
import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg
from kemeny import sc

rep = 1
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,15,17,13,18,18,17,13,14,12,16,18,15,13,15],
[11,0,11,17,14,16,14,15,10,11,16,19,11,13,17],
[9,15,0,12,13,17,14,20,16,11,17,13,9,14,16],
[13,9,14,0,14,12,13,11,11,6,12,13,11,11,19],
[8,12,13,12,0,15,15,12,13,13,14,14,13,13,16],
[8,10,9,14,11,0,9,12,3,9,11,16,10,9,11],
[9,12,12,13,11,17,0,14,14,10,12,15,12,14,17],
[13,11,6,15,14,14,12,0,11,5,13,13,12,9,16],
[12,16,10,15,13,23,12,15,0,13,15,20,13,16,16],
[14,15,15,20,13,17,16,21,13,0,13,13,16,15,21],
[10,10,9,14,12,15,14,13,11,13,0,13,12,11,17],
[8,7,13,13,12,10,11,13,6,13,13,0,11,9,14],
[11,15,17,15,13,16,14,14,13,10,14,15,0,13,16],
[13,13,12,15,13,17,12,17,10,11,15,17,13,0,14],
[11,9,10,7,10,15,9,10,10,5,9,12,10,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 1, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,11,18,13,15,19,16,16,14,15,21,20,17,19],
[7,0,7,14,15,11,16,12,12,12,12,16,14,15,17],
[15,19,0,16,14,14,17,13,14,16,14,21,17,14,16],
[8,12,10,0,9,7,15,11,10,9,8,15,12,13,17],
[13,11,12,17,0,15,14,15,15,13,16,18,14,13,18],
[11,15,12,19,11,0,15,12,13,11,12,22,18,10,17],
[7,10,9,11,12,11,0,16,10,8,10,13,12,15,12],
[10,14,13,15,11,14,10,0,12,11,12,18,13,14,15],
[10,14,12,16,11,13,16,14,0,12,12,17,15,11,17],
[12,14,10,17,13,15,18,15,14,0,12,15,14,13,19],
[11,14,12,18,10,14,16,14,14,14,0,14,12,14,19],
[5,10,5,11,8,4,13,8,9,11,12,0,8,9,15],
[6,12,9,14,12,8,14,13,11,12,14,18,0,13,17],
[9,11,12,13,13,16,11,12,15,13,12,17,13,0,16],
[7,9,10,9,8,9,14,11,9,7,7,11,9,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 2, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,16,13,7,16,10,16,8,16,13,10,13,13,16],
[10,0,16,13,12,3,7,9,7,21,9,6,18,12,9],
[10,10,0,5,5,2,10,5,5,13,7,0,5,7,5],
[13,13,21,0,10,6,13,10,10,18,12,4,13,15,10],
[19,14,21,16,0,17,14,14,11,17,17,11,25,22,16],
[10,23,24,20,9,0,17,23,15,24,18,13,20,12,23],
[16,19,16,13,12,9,0,7,13,21,13,6,18,18,9],
[10,17,21,16,12,3,19,0,11,20,18,6,16,12,10],
[18,19,21,16,15,11,13,15,0,26,17,9,25,20,16],
[10,5,13,8,9,2,5,6,0,0,9,1,17,12,8],
[13,17,19,14,9,8,13,8,9,17,0,9,17,15,13],
[16,20,26,22,15,13,20,20,17,25,17,0,22,18,17],
[13,8,21,13,1,6,8,10,1,9,9,4,0,8,9],
[13,14,19,11,4,14,8,14,6,14,11,8,18,0,14],
[10,17,21,16,10,3,17,16,10,18,13,9,17,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 3, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,14,23,14,17,13,18,8,14,17,22,14,18,11],
[16,0,12,16,9,15,14,13,5,16,11,24,16,8,9],
[12,14,0,12,7,12,12,20,14,12,17,15,12,15,11],
[3,10,14,0,9,15,13,8,5,12,9,17,9,13,11],
[12,17,19,17,0,15,12,20,17,12,17,15,12,12,11],
[9,11,14,11,11,0,12,15,5,14,13,16,11,10,16],
[13,12,14,13,14,14,0,13,7,17,14,14,18,5,16],
[8,13,6,18,6,11,13,0,13,8,16,16,13,13,10],
[18,21,12,21,9,21,19,13,0,21,24,24,16,13,18],
[12,10,14,14,14,12,9,18,5,0,12,17,18,10,14],
[9,15,9,17,9,13,12,10,2,14,0,13,12,10,10],
[4,2,11,9,11,10,12,10,2,9,13,0,11,5,11],
[12,10,14,17,14,15,8,13,10,8,14,15,0,8,11],
[8,18,11,13,14,16,21,13,13,16,16,21,18,0,15],
[15,17,15,15,15,10,10,16,8,12,16,15,15,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 4, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,8,12,9,11,6,11,7,8,8,6,9,11,9],
[18,0,12,14,18,16,13,17,13,14,13,14,11,14,13],
[18,14,0,14,15,19,13,18,11,16,12,13,13,17,15],
[14,12,12,0,13,14,11,14,12,16,14,13,9,13,13],
[17,8,11,13,0,17,9,13,16,12,15,9,8,12,13],
[15,10,7,12,9,0,7,11,9,11,12,9,9,9,8],
[20,13,13,15,17,19,0,19,12,19,14,15,13,13,15],
[15,9,8,12,13,15,7,0,10,10,11,7,10,14,8],
[19,13,15,14,10,17,14,16,0,15,15,12,13,11,15],
[18,12,10,10,14,15,7,16,11,0,13,12,8,9,10],
[18,13,14,12,11,14,12,15,11,13,0,9,12,13,14],
[20,12,13,13,17,17,11,19,14,14,17,0,14,16,15],
[17,15,13,17,18,17,13,16,13,18,14,12,0,14,15],
[15,12,9,13,14,17,13,12,15,17,13,10,12,0,9],
[17,13,11,13,13,18,11,18,11,16,12,11,11,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 5, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,13,0,13,13,13,13,0,0,13,13,0,0,26],
[0,0,13,0,13,13,13,13,0,0,13,0,0,0,13],
[13,13,0,13,26,13,26,13,0,13,13,13,13,13,26],
[26,26,13,0,26,26,26,13,0,13,26,26,13,13,26],
[13,13,0,0,0,13,13,13,0,0,0,0,0,0,13],
[13,13,13,0,13,0,13,13,0,0,13,13,0,0,13],
[13,13,0,0,13,13,0,13,0,0,0,0,0,0,13],
[13,13,13,13,13,13,13,0,0,13,13,13,13,13,13],
[26,26,26,26,26,26,26,26,0,13,26,26,26,13,26],
[26,26,13,13,26,26,26,13,13,0,13,13,26,26,26],
[13,13,13,0,26,13,26,13,0,13,0,13,13,13,26],
[13,26,13,0,26,13,26,13,0,13,13,0,13,13,26],
[26,26,13,13,26,26,26,13,0,0,13,13,0,0,26],
[26,26,13,13,26,26,26,13,13,0,13,13,26,0,26],
[0,13,0,0,13,13,13,13,0,0,0,0,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 6, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,5,17,12,14,11,6,14,17,21,14,23,14,13],
[22,0,17,20,14,18,21,14,14,16,18,16,20,15,11],
[21,9,0,20,18,16,14,12,22,17,19,17,22,18,15],
[9,6,6,0,3,14,14,10,16,9,17,14,11,5,14],
[14,12,8,23,0,14,16,12,22,11,23,22,18,13,16],
[12,8,10,12,12,0,10,10,18,10,14,9,14,14,15],
[15,5,12,12,10,16,0,12,11,11,15,12,17,11,15],
[20,12,14,16,14,16,14,0,21,18,16,15,17,17,16],
[12,12,4,10,4,8,15,5,0,11,12,10,13,8,9],
[9,10,9,17,15,16,15,8,15,0,18,15,15,16,15],
[5,8,7,9,3,12,11,10,14,8,0,8,11,6,12],
[12,10,9,12,4,17,14,11,16,11,18,0,14,8,16],
[3,6,4,15,8,12,9,9,13,11,15,12,0,10,8],
[12,11,8,21,13,12,15,9,18,10,20,18,16,0,17],
[13,15,11,12,10,11,11,10,17,11,14,10,18,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 7, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,14,17,17,13,16,14,12,13,13,16,15,17,11],
[9,0,10,12,11,14,9,10,12,8,11,10,15,12,9],
[12,16,0,14,15,19,12,11,10,10,12,15,18,14,11],
[9,14,12,0,14,9,8,9,9,8,7,10,17,10,9],
[9,15,11,12,0,14,8,11,11,10,12,13,16,14,8],
[13,12,7,17,12,0,13,17,12,13,13,17,20,15,14],
[10,17,14,18,18,13,0,14,14,15,15,15,16,15,13],
[12,16,15,17,15,9,12,0,9,14,12,14,16,17,11],
[14,14,16,17,15,14,12,17,0,14,19,17,18,18,13],
[13,18,16,18,16,13,11,12,12,0,10,15,21,17,14],
[13,15,14,19,14,13,11,14,7,16,0,19,19,20,14],
[10,16,11,16,13,9,11,12,9,11,7,0,15,17,8],
[11,11,8,9,10,6,10,10,8,5,7,11,0,11,7],
[9,14,12,16,12,11,11,9,8,9,6,9,15,0,13],
[15,17,15,17,18,12,13,15,13,12,12,18,19,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 8, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,18,18,19,14,17,10,14,13,13,11,14,18,16],
[14,0,15,13,15,14,11,10,14,14,10,9,17,18,14],
[8,11,0,11,12,13,12,9,12,10,9,8,13,13,12],
[8,13,15,0,12,11,13,9,12,10,13,9,13,14,14],
[7,11,14,14,0,13,15,6,13,12,11,9,12,13,13],
[12,12,13,15,13,0,18,7,15,9,11,7,15,14,15],
[9,15,14,13,11,8,0,7,10,11,11,8,14,15,13],
[16,16,17,17,20,19,19,0,17,13,15,14,21,17,18],
[12,12,14,14,13,11,16,9,0,9,11,7,16,13,13],
[13,12,16,16,14,17,15,13,17,0,16,9,18,13,16],
[13,16,17,13,15,15,15,11,15,10,0,7,20,18,18],
[15,17,18,17,17,19,18,12,19,17,19,0,19,16,16],
[12,9,13,13,14,11,12,5,10,8,6,7,0,14,10],
[8,8,13,12,13,12,11,9,13,13,8,10,12,0,12],
[10,12,14,12,13,11,13,8,13,10,8,10,16,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 9, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,11,12,9,12,10,15,10,9,13,10,11,8,15],
[14,0,16,15,10,13,11,11,10,9,17,11,16,14,17],
[15,10,0,12,13,12,8,17,8,6,19,9,15,9,12],
[14,11,14,0,12,13,13,14,10,6,16,8,12,12,11],
[17,16,13,14,0,12,11,14,15,8,19,11,17,13,16],
[14,13,14,13,14,0,12,19,10,8,18,9,14,11,11],
[16,15,18,13,15,14,0,13,13,4,18,11,18,11,16],
[11,15,9,12,12,7,13,0,13,8,16,11,18,9,15],
[16,16,18,16,11,16,13,13,0,14,17,17,20,14,19],
[17,17,20,20,18,18,22,18,12,0,20,18,15,13,14],
[13,9,7,10,7,8,8,10,9,6,0,10,14,9,14],
[16,15,17,18,15,17,15,15,9,8,16,0,18,12,14],
[15,10,11,14,9,12,8,8,6,11,12,8,0,11,14],
[18,12,17,14,13,15,15,17,12,13,17,14,15,0,18],
[11,9,14,15,10,15,10,11,7,12,12,12,12,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 10, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,19,26,12,7,7,0,7,19,14,19,7,26,7],
[7,0,7,19,0,7,7,7,7,14,7,7,14,7,7],
[7,19,0,26,12,7,7,7,14,26,14,26,14,26,7],
[0,7,0,0,0,0,0,0,0,7,0,0,7,7,7],
[14,26,14,26,0,14,14,7,14,14,14,26,14,14,14],
[19,19,19,26,12,0,7,12,19,19,14,19,19,26,19],
[19,19,19,26,12,19,0,12,19,19,7,19,19,26,19],
[26,19,19,26,19,14,14,0,14,26,14,19,19,26,7],
[19,19,12,26,12,7,7,12,0,26,7,12,19,19,19],
[7,12,0,19,12,7,7,0,0,0,7,12,0,7,0],
[12,19,12,26,12,12,19,12,19,19,0,12,19,19,19],
[7,19,0,26,0,7,7,7,14,14,14,0,14,14,7],
[19,12,12,19,12,7,7,7,7,26,7,12,0,19,0],
[0,19,0,19,12,0,0,0,7,19,7,12,7,0,7],
[19,19,19,19,12,7,7,19,7,26,7,19,26,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 11, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,15,9,13,9,9,9,8,11,11,5,15,9,6],
[20,0,18,13,24,17,16,17,18,16,13,14,15,19,13],
[11,8,0,9,16,12,9,16,11,16,16,7,11,11,11],
[17,13,17,0,21,14,15,14,15,13,13,14,13,18,10],
[13,2,10,5,0,10,8,7,12,10,6,4,8,11,9],
[17,9,14,12,16,0,14,11,14,16,11,13,12,12,11],
[17,10,17,11,18,12,0,14,10,15,12,9,12,18,6],
[17,9,10,12,19,15,12,0,14,14,6,7,13,17,8],
[18,8,15,11,14,12,16,12,0,16,13,9,12,15,10],
[15,10,10,13,16,10,11,12,10,0,5,4,13,13,9],
[15,13,10,13,20,15,14,20,13,21,0,12,12,16,10],
[21,12,19,12,22,13,17,19,17,22,14,0,16,18,14],
[11,11,15,13,18,14,14,13,14,13,14,10,0,12,11],
[17,7,15,8,15,14,8,9,11,13,10,8,14,0,7],
[20,13,15,16,17,15,20,18,16,17,16,12,15,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 12, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,14,19,10,18,13,11,11,11,14,13,11,16,15],
[10,0,19,19,15,14,16,9,13,13,17,11,16,14,16],
[12,7,0,18,6,12,7,12,7,13,11,12,8,9,13],
[7,7,8,0,6,9,10,9,7,10,11,9,11,8,10],
[16,11,20,20,0,16,15,14,10,16,18,16,13,17,17],
[8,12,14,17,10,0,11,9,10,11,13,12,14,18,10],
[13,10,19,16,11,15,0,11,14,18,17,14,17,15,18],
[15,17,14,17,12,17,15,0,8,16,14,14,14,15,18],
[15,13,19,19,16,16,12,18,0,16,18,15,17,12,18],
[15,13,13,16,10,15,8,10,10,0,13,14,11,14,12],
[12,9,15,15,8,13,9,12,8,13,0,16,13,12,11],
[13,15,14,17,10,14,12,12,11,12,10,0,13,11,15],
[15,10,18,15,13,12,9,12,9,15,13,13,0,11,16],
[10,12,17,18,9,8,11,11,14,12,14,15,15,0,14],
[11,10,13,16,9,16,8,8,8,14,15,11,10,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 13, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,7,6,6,6,11,3,8,12,7,5,1,8,5],
[23,0,16,17,12,13,16,13,12,22,12,13,11,11,14],
[19,10,0,10,10,10,18,14,15,13,11,12,9,10,8],
[20,9,16,0,9,6,13,10,9,12,9,10,4,11,7],
[20,14,16,17,0,4,17,18,17,18,15,9,9,13,13],
[20,13,16,20,22,0,15,18,23,19,15,23,16,17,16],
[15,10,8,13,9,11,0,11,13,11,12,13,10,11,13],
[23,13,12,16,8,8,15,0,12,17,12,9,12,15,9],
[18,14,11,17,9,3,13,14,0,15,12,11,9,17,9],
[14,4,13,14,8,7,15,9,11,0,6,8,4,9,4],
[19,14,15,17,11,11,14,14,14,20,0,11,10,11,13],
[21,13,14,16,17,3,13,17,15,18,15,0,9,13,13],
[25,15,17,22,17,10,16,14,17,22,16,17,0,11,11],
[18,15,16,15,13,9,15,11,9,17,15,13,15,0,12],
[21,12,18,19,13,10,13,17,17,22,13,13,15,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 14, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,14,13,18,16,17,14,15,10,10,13,11,19,15],
[11,0,16,16,17,11,14,18,9,15,11,13,12,12,9],
[12,10,0,13,16,15,13,15,12,14,12,14,14,17,6],
[13,10,13,0,16,12,14,13,13,12,12,8,10,13,13],
[8,9,10,10,0,9,10,10,4,8,6,6,7,12,5],
[10,15,11,14,17,0,18,12,7,13,13,11,10,12,11],
[9,12,13,12,16,8,0,14,11,13,9,15,11,8,13],
[12,8,11,13,16,14,12,0,11,13,11,12,10,11,10],
[11,17,14,13,22,19,15,15,0,14,14,12,9,18,14],
[16,11,12,14,18,13,13,13,12,0,16,11,8,13,13],
[16,15,14,14,20,13,17,15,12,10,0,13,12,14,13],
[13,13,12,18,20,15,11,14,14,15,13,0,13,9,10],
[15,14,12,16,19,16,15,16,17,18,14,13,0,14,13],
[7,14,9,13,14,14,18,15,8,13,12,17,12,0,7],
[11,17,20,13,21,15,13,16,12,13,13,16,13,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 15, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,16,19,16,13,22,18,16,18,14,17,16,16,17],
[8,0,12,14,12,13,15,12,14,13,11,11,13,11,7],
[10,14,0,11,11,11,13,12,12,15,10,10,13,12,11],
[7,12,15,0,11,12,12,15,14,14,10,15,13,9,11],
[10,14,15,15,0,14,11,16,14,15,13,14,16,14,11],
[13,13,15,14,12,0,14,13,12,17,12,15,16,13,14],
[4,11,13,14,15,12,0,13,15,10,9,13,11,10,9],
[8,14,14,11,10,13,13,0,10,12,9,15,12,10,10],
[10,12,14,12,12,14,11,16,0,13,10,15,15,13,13],
[8,13,11,12,11,9,16,14,13,0,9,13,13,9,8],
[12,15,16,16,13,14,17,17,16,17,0,17,17,15,15],
[9,15,16,11,12,11,13,11,11,13,9,0,15,11,10],
[10,13,13,13,10,10,15,14,11,13,9,11,0,10,10],
[10,15,14,17,12,13,16,16,13,17,11,15,16,0,12],
[9,19,15,15,15,12,17,16,13,18,11,16,16,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 16, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,15,15,15,18,14,14,16,17,12,21,11,18,10],
[11,0,10,15,12,18,15,12,13,12,12,17,11,17,7],
[11,16,0,13,14,18,12,14,14,14,10,16,11,16,10],
[11,11,13,0,13,17,12,14,12,17,14,17,7,15,10],
[11,14,12,13,0,16,15,12,13,14,10,16,9,13,12],
[8,8,8,9,10,0,12,12,9,14,11,16,9,11,7],
[12,11,14,14,11,14,0,15,13,13,11,17,12,15,10],
[12,14,12,12,14,14,11,0,17,16,12,16,10,16,9],
[10,13,12,14,13,17,13,9,0,14,14,18,14,15,10],
[9,14,12,9,12,12,13,10,12,0,13,16,11,11,9],
[14,14,16,12,16,15,15,14,12,13,0,15,15,17,11],
[5,9,10,9,10,10,9,10,8,10,11,0,7,10,8],
[15,15,15,19,17,17,14,16,12,15,11,19,0,17,14],
[8,9,10,11,13,15,11,10,11,15,9,16,9,0,11],
[16,19,16,16,14,19,16,17,16,17,15,18,12,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 17, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,11,11,9,5,6,10,9,7,14,7,5,5,16],
[23,0,16,9,17,9,13,15,12,14,14,11,3,13,14],
[15,10,0,18,19,9,16,15,16,11,18,8,13,15,23],
[15,17,8,0,19,9,11,15,6,7,13,3,8,11,12],
[17,9,7,7,0,12,8,4,8,7,15,7,6,7,10],
[21,17,17,17,14,0,17,17,17,14,14,10,12,17,19],
[20,13,10,15,18,9,0,17,9,13,20,11,15,16,20],
[16,11,11,11,22,9,9,0,11,14,19,9,11,16,14],
[17,14,10,20,18,9,17,15,0,13,20,18,12,17,23],
[19,12,15,19,19,12,13,12,13,0,15,11,8,15,12],
[12,12,8,13,11,12,6,7,6,11,0,6,3,13,12],
[19,15,18,23,19,16,15,17,8,15,20,0,8,15,18],
[21,23,13,18,20,14,11,15,14,18,23,18,0,15,23],
[21,13,11,15,19,9,10,10,9,11,13,11,11,0,15],
[10,12,3,14,16,7,6,12,3,14,14,8,3,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 18, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,19,12,17,15,14,13,12,16,10,10,13,14,14],
[10,0,16,9,12,14,16,13,13,17,10,16,11,13,15],
[7,10,0,12,9,13,9,7,6,13,6,9,11,8,11],
[14,17,14,0,13,15,13,11,10,14,14,18,12,12,14],
[9,14,17,13,0,12,13,12,10,14,9,15,12,12,14],
[11,12,13,11,14,0,12,9,9,14,9,13,14,14,15],
[12,10,17,13,13,14,0,7,9,14,13,15,15,10,15],
[13,13,19,15,14,17,19,0,14,15,14,17,13,14,13],
[14,13,20,16,16,17,17,12,0,17,15,19,16,14,17],
[10,9,13,12,12,12,12,11,9,0,8,10,8,14,10],
[16,16,20,12,17,17,13,12,11,18,0,16,18,16,19],
[16,10,17,8,11,13,11,9,7,16,10,0,13,8,12],
[13,15,15,14,14,12,11,13,10,18,8,13,0,12,14],
[12,13,18,14,14,12,16,12,12,12,10,18,14,0,14],
[12,11,15,12,12,11,11,13,9,16,7,14,12,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 19, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,15,17,17,13,15,18,15,18,15,18,18,17,18],
[10,0,17,14,15,14,14,16,12,15,12,15,18,17,14],
[11,9,0,11,14,11,13,11,9,15,12,16,14,13,13],
[9,12,15,0,14,12,15,11,13,16,10,14,12,10,15],
[9,11,12,12,0,16,13,12,11,16,9,15,16,14,14],
[13,12,15,14,10,0,12,16,12,13,9,15,13,12,12],
[11,12,13,11,13,14,0,11,11,13,12,15,11,10,13],
[8,10,15,15,14,10,15,0,13,15,11,16,14,13,15],
[11,14,17,13,15,14,15,13,0,17,13,18,17,16,14],
[8,11,11,10,10,13,13,11,9,0,11,13,14,12,14],
[11,14,14,16,17,17,14,15,13,15,0,16,14,14,15],
[8,11,10,12,11,11,11,10,8,13,10,0,12,11,10],
[8,8,12,14,10,13,15,12,9,12,12,14,0,16,11],
[9,9,13,16,12,14,16,13,10,14,12,15,10,0,12],
[8,12,13,11,12,14,13,11,12,12,11,16,15,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 20, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,11,12,16,14,19,12,11,13,16,18,15,21,9],
[14,0,14,15,14,13,17,13,17,14,16,13,13,20,15],
[15,12,0,12,12,9,20,15,14,13,16,20,13,17,13],
[14,11,14,0,11,12,14,13,14,9,17,12,13,16,13],
[10,12,14,15,0,11,17,14,12,13,17,13,13,17,12],
[12,13,17,14,15,0,17,15,17,16,20,17,15,21,16],
[7,9,6,12,9,9,0,11,8,10,10,9,10,13,8],
[14,13,11,13,12,11,15,0,13,9,15,12,13,15,11],
[15,9,12,12,14,9,18,13,0,13,16,15,17,16,8],
[13,12,13,17,13,10,16,17,13,0,14,12,14,17,15],
[10,10,10,9,9,6,16,11,10,12,0,13,10,9,4],
[8,13,6,14,13,9,17,14,11,14,13,0,11,12,10],
[11,13,13,13,13,11,16,13,9,12,16,15,0,20,13],
[5,6,9,10,9,5,13,11,10,9,17,14,6,0,3],
[17,11,13,13,14,10,18,15,18,11,22,16,13,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 21, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,12,14,12,13,15,18,13,11,12,15,15,10,16],
[16,0,13,14,13,15,15,19,15,11,15,14,16,15,14],
[14,13,0,17,15,17,18,19,15,13,17,18,17,14,16],
[12,12,9,0,9,9,11,14,8,10,13,13,13,9,13],
[14,13,11,17,0,10,18,19,19,11,14,13,16,10,17],
[13,11,9,17,16,0,16,15,12,15,16,19,12,11,14],
[11,11,8,15,8,10,0,14,16,9,11,16,10,10,15],
[8,7,7,12,7,11,12,0,8,11,14,13,13,8,10],
[13,11,11,18,7,14,10,18,0,9,12,12,17,5,10],
[15,15,13,16,15,11,17,15,17,0,15,17,17,12,17],
[14,11,9,13,12,10,15,12,14,11,0,15,13,9,12],
[11,12,8,13,13,7,10,13,14,9,11,0,12,8,14],
[11,10,9,13,10,14,16,13,9,9,13,14,0,10,13],
[16,11,12,17,16,15,16,18,21,14,17,18,16,0,18],
[10,12,10,13,9,12,11,16,16,9,14,12,13,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 22, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,16,12,11,14,13,13,14,18,8,15,20,11,12],
[14,0,16,19,11,16,14,15,14,17,10,20,20,17,14],
[10,10,0,12,11,10,6,12,12,16,11,10,15,11,12],
[14,7,14,0,11,12,9,12,11,15,9,13,15,14,17],
[15,15,15,15,0,11,10,16,16,18,14,19,20,13,15],
[12,10,16,14,15,0,15,13,10,15,13,15,18,14,11],
[13,12,20,17,16,11,0,16,16,17,8,21,14,12,14],
[13,11,14,14,10,13,10,0,13,14,14,18,15,11,10],
[12,12,14,15,10,16,10,13,0,16,11,15,16,15,15],
[8,9,10,11,8,11,9,12,10,0,8,10,16,8,7],
[18,16,15,17,12,13,18,12,15,18,0,19,13,12,14],
[11,6,16,13,7,11,5,8,11,16,7,0,11,12,12],
[6,6,11,11,6,8,12,11,10,10,13,15,0,6,6],
[15,9,15,12,13,12,14,15,11,18,14,14,20,0,8],
[14,12,14,9,11,15,12,16,11,19,12,14,20,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 23, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,13,15,11,15,14,12,17,18,15,15,15,14,13],
[12,0,11,16,11,19,16,16,17,15,14,17,17,9,13],
[13,15,0,14,16,19,15,13,17,21,18,18,16,10,16],
[11,10,12,0,16,19,14,16,17,19,14,14,15,10,11],
[15,15,10,10,0,19,10,19,18,16,17,16,15,13,14],
[11,7,7,7,7,0,12,10,17,11,15,9,15,5,7],
[12,10,11,12,16,14,0,9,17,18,15,17,14,13,12],
[14,10,13,10,7,16,17,0,19,15,16,16,12,12,11],
[9,9,9,9,8,9,9,7,0,9,15,11,13,7,8],
[8,11,5,7,10,15,8,11,17,0,13,11,15,7,5],
[11,12,8,12,9,11,11,10,11,13,0,15,15,9,8],
[11,9,8,12,10,17,9,10,15,15,11,0,16,10,8],
[11,9,10,11,11,11,12,14,13,11,11,10,0,9,10],
[12,17,16,16,13,21,13,14,19,19,17,16,17,0,16],
[13,13,10,15,12,19,14,15,18,21,18,18,16,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 24, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,19,11,19,11,19,11,3,8,11,19,11,8,16],
[15,0,26,23,15,18,18,18,15,15,15,15,26,8,15],
[7,0,0,8,15,8,15,7,7,15,0,0,8,0,15],
[15,3,18,0,15,18,18,18,10,15,7,18,18,8,15],
[7,11,11,11,0,11,11,10,3,8,0,3,11,0,0],
[15,8,18,8,15,0,15,7,7,15,15,15,15,8,15],
[7,8,11,8,15,11,0,7,0,8,0,0,8,0,8],
[15,8,19,8,16,19,19,0,0,8,8,16,8,8,16],
[23,11,19,16,23,19,26,26,0,15,8,19,19,16,23],
[18,11,11,11,18,11,18,18,11,0,11,11,11,8,15],
[15,11,26,19,26,11,26,18,18,15,0,26,26,16,23],
[7,11,26,8,23,11,26,10,7,15,0,0,18,0,15],
[15,0,18,8,15,11,18,18,7,15,0,8,0,8,15],
[18,18,26,18,26,18,26,18,10,18,10,26,18,0,15],
[10,11,11,11,26,11,18,10,3,11,3,11,11,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 25, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,12,14,15,15,16,10,13,15,13,17,13,18,13],
[8,0,4,6,6,8,10,7,12,10,10,12,10,9,6],
[14,22,0,15,13,17,17,15,15,18,16,15,13,15,16],
[12,20,11,0,10,20,16,13,20,15,12,15,15,15,17],
[11,20,13,16,0,14,18,9,15,14,14,17,17,16,17],
[11,18,9,6,12,0,15,11,16,13,12,11,14,12,13],
[10,16,9,10,8,11,0,5,14,8,11,9,11,10,12],
[16,19,11,13,17,15,21,0,18,19,18,20,17,19,15],
[13,14,11,6,11,10,12,8,0,13,12,11,13,13,8],
[11,16,8,11,12,13,18,7,13,0,13,14,11,13,9],
[13,16,10,14,12,14,15,8,14,13,0,15,13,14,15],
[9,14,11,11,9,15,17,6,15,12,11,0,11,11,10],
[13,16,13,11,9,12,15,9,13,15,13,15,0,14,11],
[8,17,11,11,10,14,16,7,13,13,12,15,12,0,11],
[13,20,10,9,9,13,14,11,18,17,11,16,15,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 26, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,13,17,12,9,15,13,12,18,15,17,17,13,11],
[14,0,14,18,16,16,15,13,14,14,20,17,20,13,15],
[13,12,0,17,13,13,17,9,12,14,15,16,17,13,12],
[9,8,9,0,6,7,11,5,6,12,9,11,12,8,8],
[14,10,13,20,0,13,15,12,14,15,16,15,17,11,9],
[17,10,13,19,13,0,15,12,18,18,21,20,20,14,13],
[11,11,9,15,11,11,0,11,12,11,13,13,13,12,12],
[13,13,17,21,14,14,15,0,13,14,16,17,16,14,14],
[14,12,14,20,12,8,14,13,0,15,14,16,17,14,12],
[8,12,12,14,11,8,15,12,11,0,15,15,16,13,11],
[11,6,11,17,10,5,13,10,12,11,0,13,13,10,7],
[9,9,10,15,11,6,13,9,10,11,13,0,13,10,11],
[9,6,9,14,9,6,13,10,9,10,13,13,0,7,10],
[13,13,13,18,15,12,14,12,12,13,16,16,19,0,15],
[15,11,14,18,17,13,14,12,14,15,19,15,16,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 27, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,9,8,4,12,8,7,8,17,15,17,14,13,10],
[14,0,14,4,13,15,13,12,15,18,14,24,16,16,15],
[17,12,0,14,7,14,12,14,12,20,20,18,12,16,8],
[18,22,12,0,12,19,14,15,14,17,20,20,21,16,13],
[22,13,19,14,0,15,17,16,13,15,21,20,17,19,11],
[14,11,12,7,11,0,15,12,13,17,15,20,13,15,8],
[18,13,14,12,9,11,0,11,11,13,14,17,12,14,12],
[19,14,12,11,10,14,15,0,9,15,20,19,13,15,9],
[18,11,14,12,13,13,15,17,0,19,20,19,12,15,7],
[9,8,6,9,11,9,13,11,7,0,11,18,8,9,5],
[11,12,6,6,5,11,12,6,6,15,0,16,5,13,8],
[9,2,8,6,6,6,9,7,7,8,10,0,9,14,8],
[12,10,14,5,9,13,14,13,14,18,21,17,0,15,12],
[13,10,10,10,7,11,12,11,11,17,13,12,11,0,8],
[16,11,18,13,15,18,14,17,19,21,18,18,14,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 28, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,11,15,14,10,14,13,12,12,14,13,13,15,16],
[10,0,13,14,14,13,13,17,15,14,12,13,11,14,16],
[15,13,0,13,14,11,13,16,14,14,15,15,13,14,18],
[11,12,13,0,14,13,12,17,16,11,16,14,9,14,15],
[12,12,12,12,0,12,13,16,14,15,12,14,13,13,16],
[16,13,15,13,14,0,17,15,15,16,11,14,13,16,21],
[12,13,13,14,13,9,0,15,14,13,14,13,15,15,20],
[13,9,10,9,10,11,11,0,11,11,11,11,10,12,14],
[14,11,12,10,12,11,12,15,0,12,9,12,10,11,16],
[14,12,12,15,11,10,13,15,14,0,11,12,13,11,18],
[12,14,11,10,14,15,12,15,17,15,0,15,14,16,19],
[13,13,11,12,12,12,13,15,14,14,11,0,13,17,18],
[13,15,13,17,13,13,11,16,16,13,12,13,0,17,18],
[11,12,12,12,13,10,11,14,15,15,10,9,9,0,15],
[10,10,8,11,10,5,6,12,10,8,7,8,8,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 29, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,3,1,23,4,14,5,10,16,21,15,14,13,16],
[13,0,15,13,15,13,14,3,13,3,13,15,3,15,16],
[23,11,0,1,23,4,14,3,13,13,21,15,13,10,14],
[25,13,25,0,23,4,26,15,25,15,20,25,15,12,26],
[3,11,3,3,0,4,14,3,13,3,3,5,13,13,4],
[22,13,22,22,22,0,26,15,22,15,22,25,15,22,26],
[12,12,12,0,12,0,0,2,0,12,10,15,10,12,16],
[21,23,23,11,23,11,24,0,20,24,21,25,21,13,26],
[16,13,13,1,13,4,26,6,0,16,11,16,14,13,16],
[10,23,13,11,23,11,14,2,10,0,21,15,20,12,16],
[5,13,5,6,23,4,16,5,15,5,0,5,15,12,6],
[11,11,11,1,21,1,11,1,10,11,21,0,11,11,4],
[12,23,13,11,13,11,16,5,12,6,11,15,0,12,16],
[13,11,16,14,13,4,14,13,13,14,14,15,14,0,16],
[10,10,12,0,22,0,10,0,10,10,20,22,10,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 30, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,13,14,14,13,17,15,16,12,17,16,13,18,14],
[14,0,9,11,12,12,17,16,15,11,14,13,13,14,15],
[13,17,0,13,13,13,18,16,15,13,18,16,15,15,14],
[12,15,13,0,10,12,17,15,12,12,14,14,14,15,14],
[12,14,13,16,0,14,18,14,12,13,15,17,14,17,15],
[13,14,13,14,12,0,17,15,17,14,16,14,13,15,15],
[9,9,8,9,8,9,0,14,13,11,13,12,12,14,7],
[11,10,10,11,12,11,12,0,13,11,10,11,13,13,11],
[10,11,11,14,14,9,13,13,0,7,9,14,10,13,10],
[14,15,13,14,13,12,15,15,19,0,18,14,14,16,13],
[9,12,8,12,11,10,13,16,17,8,0,13,12,11,13],
[10,13,10,12,9,12,14,15,12,12,13,0,14,14,13],
[13,13,11,12,12,13,14,13,16,12,14,12,0,15,13],
[8,12,11,11,9,11,12,13,13,10,15,12,11,0,13],
[12,11,12,12,11,11,19,15,16,13,13,13,13,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 31, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,15,17,14,17,14,14,16,17,15,14,15,13,15],
[11,0,9,11,13,16,9,8,9,14,13,9,13,11,16],
[11,17,0,15,12,17,12,11,11,16,10,12,12,9,16],
[9,15,11,0,14,19,13,11,15,19,12,11,14,9,15],
[12,13,14,12,0,15,6,6,12,13,11,9,12,9,17],
[9,10,9,7,11,0,9,8,8,15,10,9,10,7,11],
[12,17,14,13,20,17,0,15,18,15,15,15,20,14,19],
[12,18,15,15,20,18,11,0,12,15,16,9,16,15,16],
[10,17,15,11,14,18,8,14,0,13,14,12,16,12,18],
[9,12,10,7,13,11,11,11,13,0,10,11,12,7,11],
[11,13,16,14,15,16,11,10,12,16,0,11,11,11,14],
[12,17,14,15,17,17,11,17,14,15,15,0,14,15,15],
[11,13,14,12,14,16,6,10,10,14,15,12,0,14,14],
[13,15,17,17,17,19,12,11,14,19,15,11,12,0,17],
[11,10,10,11,9,15,7,10,8,15,12,11,12,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 32, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,23,21,17,18,14,18,23,20,22,18,21,17,20],
[14,0,16,18,8,15,5,12,13,11,15,18,16,7,17],
[3,10,0,12,3,12,12,16,18,12,9,16,13,11,11],
[5,8,14,0,3,8,3,13,15,11,11,14,10,7,8],
[9,18,23,23,0,20,14,17,20,22,18,21,20,23,19],
[8,11,14,18,6,0,6,15,16,9,14,12,10,8,5],
[12,21,14,23,12,20,0,20,22,13,18,21,20,20,15],
[8,14,10,13,9,11,6,0,9,9,12,14,13,8,8],
[3,13,8,11,6,10,4,17,0,5,7,18,11,6,6],
[6,15,14,15,4,17,13,17,21,0,15,18,14,10,9],
[4,11,17,15,8,12,8,14,19,11,0,14,17,11,11],
[8,8,10,12,5,14,5,12,8,8,12,0,12,8,5],
[5,10,13,16,6,16,6,13,15,12,9,14,0,9,15],
[9,19,15,19,3,18,6,18,20,16,15,18,17,0,17],
[6,9,15,18,7,21,11,18,20,17,15,21,11,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 33, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,7,14,12,9,11,10,10,14,16,12,13,11,8],
[18,0,12,15,13,13,12,11,14,16,17,12,14,14,16],
[19,14,0,14,19,12,14,16,14,19,22,16,16,14,16],
[12,11,12,0,16,11,12,15,11,20,17,10,14,8,16],
[14,13,7,10,0,7,9,9,14,11,15,10,13,10,9],
[17,13,14,15,19,0,13,19,16,19,15,15,19,14,18],
[15,14,12,14,17,13,0,14,11,19,16,14,13,14,18],
[16,15,10,11,17,7,12,0,15,15,13,9,8,12,12],
[16,12,12,15,12,10,15,11,0,14,15,12,14,15,15],
[12,10,7,6,15,7,7,11,12,0,13,5,11,6,14],
[10,9,4,9,11,11,10,13,11,13,0,8,15,11,10],
[14,14,10,16,16,11,12,17,14,21,18,0,16,11,12],
[13,12,10,12,13,7,13,18,12,15,11,10,0,13,14],
[15,12,12,18,16,12,12,14,11,20,15,15,13,0,14],
[18,10,10,10,17,8,8,14,11,12,16,14,12,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 34, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,19,18,13,19,14,10,16,5,15,12,17,14,23],
[7,0,15,10,12,11,11,11,11,12,15,5,19,11,8],
[7,11,0,7,8,7,7,1,7,6,8,7,9,0,12],
[8,16,19,0,6,16,12,12,10,6,16,6,17,16,17],
[13,14,18,20,0,18,14,17,23,17,19,11,19,17,22],
[7,15,19,10,8,0,8,7,7,7,10,1,8,11,13],
[12,15,19,14,12,18,0,9,15,10,19,18,16,16,19],
[16,15,25,14,9,19,17,0,15,11,21,14,13,16,19],
[10,15,19,16,3,19,11,11,0,1,11,4,9,14,22],
[21,14,20,20,9,19,16,15,25,0,26,15,17,19,22],
[11,11,18,10,7,16,7,5,15,0,0,11,15,15,18],
[14,21,19,20,15,25,8,12,22,11,15,0,22,16,19],
[9,7,17,9,7,18,10,13,17,9,11,4,0,13,14],
[12,15,26,10,9,15,10,10,12,7,11,10,13,0,22],
[3,18,14,9,4,13,7,7,4,4,8,7,12,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 35, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,12,13,9,14,12,10,18,17,18,14,14,7,11],
[12,0,17,15,13,16,13,16,19,16,20,21,20,13,9],
[14,9,0,14,11,14,11,12,12,16,13,15,16,5,12],
[13,11,12,0,14,15,11,16,16,18,14,18,16,10,11],
[17,13,15,12,0,17,10,13,16,13,19,15,16,8,11],
[12,10,12,11,9,0,9,12,10,15,11,14,13,6,9],
[14,13,15,15,16,17,0,18,17,17,14,19,18,12,13],
[16,10,14,10,13,14,8,0,11,12,15,14,15,8,15],
[8,7,14,10,10,16,9,15,0,12,10,14,12,9,9],
[9,10,10,8,13,11,9,14,14,0,10,12,8,8,12],
[8,6,13,12,7,15,12,11,16,16,0,14,14,8,11],
[12,5,11,8,11,12,7,12,12,14,12,0,14,8,10],
[12,6,10,10,10,13,8,11,14,18,12,12,0,4,10],
[19,13,21,16,18,20,14,18,17,18,18,18,22,0,12],
[15,17,14,15,15,17,13,11,17,14,15,16,16,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 36, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,11,9,8,12,10,11,10,9,10,11,11,8,9],
[15,0,17,15,17,16,14,17,16,13,16,13,15,12,16],
[15,9,0,16,14,12,14,13,13,9,13,12,12,12,10],
[17,11,10,0,16,17,13,14,11,12,17,12,15,11,12],
[18,9,12,10,0,13,14,14,10,10,16,9,12,10,12],
[14,10,14,9,13,0,13,15,12,10,12,14,14,10,12],
[16,12,12,13,12,13,0,14,12,9,16,13,14,14,14],
[15,9,13,12,12,11,12,0,10,11,14,12,15,11,11],
[16,10,13,15,16,14,14,16,0,15,16,16,11,13,12],
[17,13,17,14,16,16,17,15,11,0,20,14,16,13,13],
[16,10,13,9,10,14,10,12,10,6,0,10,13,10,12],
[15,13,14,14,17,12,13,14,10,12,16,0,12,12,12],
[15,11,14,11,14,12,12,11,15,10,13,14,0,11,12],
[18,14,14,15,16,16,12,15,13,13,16,14,15,0,15],
[17,10,16,14,14,14,12,15,14,13,14,14,14,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 37, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,16,20,15,16,15,15,10,14,14,15,19,13,13],
[11,0,13,20,9,15,14,10,7,15,13,17,20,12,13],
[10,13,0,17,9,12,10,9,8,6,11,13,14,10,14],
[6,6,9,0,4,8,6,3,3,6,4,6,14,4,6],
[11,17,17,22,0,18,23,20,14,17,17,13,18,15,12],
[10,11,14,18,8,0,10,14,10,4,12,8,12,9,14],
[11,12,16,20,3,16,0,14,10,14,12,10,16,9,8],
[11,16,17,23,6,12,12,0,12,12,16,12,17,13,12],
[16,19,18,23,12,16,16,14,0,17,13,13,20,14,11],
[12,11,20,20,9,22,12,14,9,0,14,15,16,13,13],
[12,13,15,22,9,14,14,10,13,12,0,18,20,16,11],
[11,9,13,20,13,18,16,14,13,11,8,0,22,12,11],
[7,6,12,12,8,14,10,9,6,10,6,4,0,3,7],
[13,14,16,22,11,17,17,13,12,13,10,14,23,0,8],
[13,13,12,20,14,12,18,14,15,13,15,15,19,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 38, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,7,7,17,17,0,7,7,0,0,7,10,10,7],
[16,0,16,16,17,17,7,7,16,16,16,16,19,19,16],
[19,10,0,19,17,10,0,10,19,10,9,7,19,19,0],
[19,10,7,0,17,10,0,0,9,0,9,7,19,19,0],
[9,9,9,9,0,10,0,0,9,9,9,16,19,19,9],
[9,9,16,16,16,0,9,16,9,9,9,16,19,9,9],
[26,19,26,26,26,17,0,17,26,19,9,26,19,19,16],
[19,19,16,26,26,10,9,0,9,9,9,16,19,19,9],
[19,10,7,17,17,17,0,17,0,10,9,7,19,10,0],
[26,10,16,26,17,17,7,17,16,0,16,16,19,19,16],
[26,10,17,17,17,17,17,17,17,10,0,17,10,10,17],
[19,10,19,19,10,10,0,10,19,10,9,0,19,19,9],
[16,7,7,7,7,7,7,7,7,7,16,7,0,0,7],
[16,7,7,7,7,17,7,7,16,7,16,7,26,0,7],
[19,10,26,26,17,17,10,17,26,10,9,17,19,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 39, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,13,16,16,11,13,10,12,11,15,15,13,14,15],
[14,0,13,13,13,10,12,14,10,12,16,13,14,13,14],
[13,13,0,16,15,15,15,17,11,13,15,17,15,11,16],
[10,13,10,0,13,14,8,12,9,10,14,12,12,10,16],
[10,13,11,13,0,14,15,12,13,13,15,12,13,12,13],
[15,16,11,12,12,0,12,12,12,12,20,13,15,13,17],
[13,14,11,18,11,14,0,14,14,14,13,13,16,17,15],
[16,12,9,14,14,14,12,0,10,12,17,10,16,13,15],
[14,16,15,17,13,14,12,16,0,12,16,13,15,15,17],
[15,14,13,16,13,14,12,14,14,0,14,13,17,14,16],
[11,10,11,12,11,6,13,9,10,12,0,12,13,9,9],
[11,13,9,14,14,13,13,16,13,13,14,0,15,11,16],
[13,12,11,14,13,11,10,10,11,9,13,11,0,14,12],
[12,13,15,16,14,13,9,13,11,12,17,15,12,0,15],
[11,12,10,10,13,9,11,11,9,10,17,10,14,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 40, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,14,10,12,14,15,16,14,15,14,21,11,17,15],
[12,0,11,11,12,11,14,12,14,11,11,19,12,12,14],
[12,15,0,13,17,10,16,16,14,15,11,21,14,15,12],
[16,15,13,0,16,11,15,15,17,13,13,23,15,17,12],
[14,14,9,10,0,10,13,13,13,12,12,21,12,17,15],
[12,15,16,15,16,0,19,15,14,15,10,22,14,19,11],
[11,12,10,11,13,7,0,15,12,13,9,16,12,12,11],
[10,14,10,11,13,11,11,0,10,11,12,17,12,12,13],
[12,12,12,9,13,12,14,16,0,12,11,17,9,13,11],
[11,15,11,13,14,11,13,15,14,0,12,18,10,13,10],
[12,15,15,13,14,16,17,14,15,14,0,23,11,16,13],
[5,7,5,3,5,4,10,9,9,8,3,0,8,7,8],
[15,14,12,11,14,12,14,14,17,16,15,18,0,12,13],
[9,14,11,9,9,7,14,14,13,13,10,19,14,0,11],
[11,12,14,14,11,15,15,13,15,16,13,18,13,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 41, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,9,15,13,12,12,14,13,14,9,13,15,16,11],
[10,0,10,14,13,12,10,16,14,13,13,12,11,16,10],
[17,16,0,15,12,12,11,19,16,13,14,13,13,14,15],
[11,12,11,0,11,14,12,10,14,13,11,14,15,12,13],
[13,13,14,15,0,10,11,19,13,13,11,14,14,14,13],
[14,14,14,12,16,0,15,16,18,14,14,18,17,17,13],
[14,16,15,14,15,11,0,16,14,14,13,18,16,16,16],
[12,10,7,16,7,10,10,0,12,11,13,8,10,12,9],
[13,12,10,12,13,8,12,14,0,11,9,14,13,15,13],
[12,13,13,13,13,12,12,15,15,0,11,11,11,16,12],
[17,13,12,15,15,12,13,13,17,15,0,13,12,17,13],
[13,14,13,12,12,8,8,18,12,15,13,0,13,16,11],
[11,15,13,11,12,9,10,16,13,15,14,13,0,14,13],
[10,10,12,14,12,9,10,14,11,10,9,10,12,0,10],
[15,16,11,13,13,13,10,17,13,14,13,15,13,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 42, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,9,14,12,14,13,16,11,12,15,11,13,15,10],
[12,0,12,12,14,12,14,12,9,13,14,12,13,17,12],
[17,14,0,16,13,16,17,15,13,15,15,14,16,18,14],
[12,14,10,0,11,16,18,13,9,10,15,10,15,16,13],
[14,12,13,15,0,14,14,13,10,16,15,13,13,16,12],
[12,14,10,10,12,0,16,15,8,11,12,12,15,15,10],
[13,12,9,8,12,10,0,15,8,11,13,11,13,13,11],
[10,14,11,13,13,11,11,0,11,10,12,10,16,13,11],
[15,17,13,17,16,18,18,15,0,18,15,13,16,16,13],
[14,13,11,16,10,15,15,16,8,0,13,12,14,14,11],
[11,12,11,11,11,14,13,14,11,13,0,11,13,16,12],
[15,14,12,16,13,14,15,16,13,14,15,0,16,15,15],
[13,13,10,11,13,11,13,10,10,12,13,10,0,13,11],
[11,9,8,10,10,11,13,13,10,12,10,11,13,0,11],
[16,14,12,13,14,16,15,15,13,15,14,11,15,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 43, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,19,15,16,18,10,13,16,15,9,18,14,15,12],
[9,0,17,16,13,20,17,12,14,13,10,17,16,16,15],
[7,9,0,10,11,18,8,10,12,13,12,14,11,9,13],
[11,10,16,0,14,17,12,14,18,12,9,14,15,9,14],
[10,13,15,12,0,13,10,14,13,15,9,16,12,16,14],
[8,6,8,9,13,0,2,12,12,11,5,10,10,6,10],
[16,9,18,14,16,24,0,12,19,16,10,21,13,11,13],
[13,14,16,12,12,14,14,0,20,17,10,18,10,14,12],
[10,12,14,8,13,14,7,6,0,8,4,12,9,14,8],
[11,13,13,14,11,15,10,9,18,0,13,15,11,16,12],
[17,16,14,17,17,21,16,16,22,13,0,21,17,17,19],
[8,9,12,12,10,16,5,8,14,11,5,0,10,10,10],
[12,10,15,11,14,16,13,16,17,15,9,16,0,12,17],
[11,10,17,17,10,20,15,12,12,10,9,16,14,0,13],
[14,11,13,12,12,16,13,14,18,14,7,16,9,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 44, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,10,10,10,12,6,20,8,21,11,12,6,15,8],
[8,0,4,9,13,5,8,14,8,15,8,10,9,14,9],
[16,22,0,10,15,13,7,20,10,20,17,12,9,22,11],
[16,17,16,0,11,14,18,21,8,14,19,13,11,17,12],
[16,13,11,15,0,11,17,18,11,18,17,15,12,11,12],
[14,21,13,12,15,0,12,16,12,21,19,10,15,18,10],
[20,18,19,8,9,14,0,20,9,15,18,17,11,20,11],
[6,12,6,5,8,10,6,0,7,9,6,6,7,11,2],
[18,18,16,18,15,14,17,19,0,19,22,14,19,23,13],
[5,11,6,12,8,5,11,17,7,0,7,8,10,15,7],
[15,18,9,7,9,7,8,20,4,19,0,9,9,13,4],
[14,16,14,13,11,16,9,20,12,18,17,0,11,21,13],
[20,17,17,15,14,11,15,19,7,16,17,15,0,22,15],
[11,12,4,9,15,8,6,15,3,11,13,5,4,0,8],
[18,17,15,14,14,16,15,24,13,19,22,13,11,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 45, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,13,16,10,12,14,11,12,13,20,15,13,14,9],
[10,0,10,11,12,14,12,13,10,10,13,9,9,13,9],
[13,16,0,16,12,12,14,13,9,14,13,14,11,13,10],
[10,15,10,0,10,12,12,9,12,12,12,14,8,13,11],
[16,14,14,16,0,15,15,14,14,18,14,15,14,15,11],
[14,12,14,14,11,0,12,11,14,11,15,13,10,11,13],
[12,14,12,14,11,14,0,8,10,15,16,13,11,12,12],
[15,13,13,17,12,15,18,0,15,15,18,14,12,15,15],
[14,16,17,14,12,12,16,11,0,16,17,15,9,14,14],
[13,16,12,14,8,15,11,11,10,0,16,13,12,12,10],
[6,13,13,14,12,11,10,8,9,10,0,11,10,12,8],
[11,17,12,12,11,13,13,12,11,13,15,0,10,17,9],
[13,17,15,18,12,16,15,14,17,14,16,16,0,13,15],
[12,13,13,13,11,15,14,11,12,14,14,9,13,0,10],
[17,17,16,15,15,13,14,11,12,16,18,17,11,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 46, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,17,12,16,12,14,10,8,12,12,15,14,12,14],
[11,0,16,10,14,9,11,10,8,4,14,10,13,11,13],
[9,10,0,6,12,12,10,7,11,6,11,14,11,9,8],
[14,16,20,0,16,14,14,16,10,14,12,14,15,17,15],
[10,12,14,10,0,10,13,7,10,9,10,16,12,11,13],
[14,17,14,12,16,0,14,14,12,13,16,19,16,16,13],
[12,15,16,12,13,12,0,11,9,8,16,14,15,13,16],
[16,16,19,10,19,12,15,0,12,10,16,16,18,18,17],
[18,18,15,16,16,14,17,14,0,12,16,17,20,17,19],
[14,22,20,12,17,13,18,16,14,0,15,19,18,15,18],
[14,12,15,14,16,10,10,10,10,11,0,14,16,13,12],
[11,16,12,12,10,7,12,10,9,7,12,0,13,11,11],
[12,13,15,11,14,10,11,8,6,8,10,13,0,15,12],
[14,15,17,9,15,10,13,8,9,11,13,15,11,0,14],
[12,13,18,11,13,13,10,9,7,8,14,15,14,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 47, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,14,16,17,12,15,18,14,15,15,13,17,17,18],
[11,0,13,14,11,13,14,15,16,16,14,14,17,14,17],
[12,13,0,17,12,13,14,17,16,15,13,14,17,15,17],
[10,12,9,0,12,9,10,14,11,13,12,8,12,16,14],
[9,15,14,14,0,11,10,12,13,11,12,11,15,13,16],
[14,13,13,17,15,0,14,16,15,18,16,12,15,15,17],
[11,12,12,16,16,12,0,13,15,14,13,11,12,15,14],
[8,11,9,12,14,10,13,0,13,13,12,11,15,16,12],
[12,10,10,15,13,11,11,13,0,11,12,13,12,15,14],
[11,10,11,13,15,8,12,13,15,0,13,9,12,13,12],
[11,12,13,14,14,10,13,14,14,13,0,11,12,11,15],
[13,12,12,18,15,14,15,15,13,17,15,0,13,15,14],
[9,9,9,14,11,11,14,11,14,14,14,13,0,12,14],
[9,12,11,10,13,11,11,10,11,13,15,11,14,0,12],
[8,9,9,12,10,9,12,14,12,14,11,12,12,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 48, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1,8,7,0,12,1,4,11,1,4,0,6,0,8],
[25,0,15,11,10,19,10,19,16,11,8,21,21,19,15],
[18,11,0,11,8,12,5,12,11,12,1,13,13,12,8],
[19,15,15,0,10,20,16,19,9,10,9,15,14,9,9],
[26,16,18,16,0,20,10,26,16,17,9,18,22,17,17],
[14,7,14,6,6,0,7,10,5,7,4,14,6,5,12],
[25,16,21,10,16,19,0,16,19,10,15,21,21,15,15],
[22,7,14,7,0,16,10,0,16,4,6,11,11,5,12],
[15,10,15,17,10,21,7,10,0,7,10,15,10,10,10],
[25,15,14,16,9,19,16,22,19,0,9,14,21,15,15],
[22,18,25,17,17,22,11,20,16,17,0,22,22,22,22],
[26,5,13,11,8,12,5,15,11,12,4,0,13,12,8],
[20,5,13,12,4,20,5,15,16,5,4,13,0,20,20],
[26,7,14,17,9,21,11,21,16,11,4,14,6,0,19],
[18,11,18,17,9,14,11,14,16,11,4,18,6,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 49, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,16,15,15,14,17,10,16,9,11,14,16,17,18],
[12,0,17,14,19,18,21,12,18,11,14,14,17,19,18],
[10,9,0,13,18,19,20,6,17,11,11,12,14,17,16],
[11,12,13,0,18,10,17,10,12,10,14,10,15,18,17],
[11,7,8,8,0,15,10,8,14,10,12,9,13,19,15],
[12,8,7,16,11,0,14,8,15,13,10,12,12,16,15],
[9,5,6,9,16,12,0,6,12,8,12,11,12,15,16],
[16,14,20,16,18,18,20,0,17,13,14,14,18,22,18],
[10,8,9,14,12,11,14,9,0,12,9,13,14,18,16],
[17,15,15,16,16,13,18,13,14,0,13,16,21,19,19],
[15,12,15,12,14,16,14,12,17,13,0,15,20,20,16],
[12,12,14,16,17,14,15,12,13,10,11,0,15,18,17],
[10,9,12,11,13,14,14,8,12,5,6,11,0,14,9],
[9,7,9,8,7,10,11,4,8,7,6,8,12,0,10],
[8,8,10,9,11,11,10,8,10,7,10,9,17,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 50, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,13,10,12,10,11,11,11,10,15,10,11,9,10],
[16,0,19,15,10,14,16,15,14,11,17,11,15,18,12],
[13,7,0,13,11,11,14,11,11,10,17,10,11,12,10],
[16,11,13,0,8,12,16,13,15,9,15,11,9,14,9],
[14,16,15,18,0,12,16,15,13,10,19,13,12,14,11],
[16,12,15,14,14,0,14,12,13,11,13,14,13,10,12],
[15,10,12,10,10,12,0,10,10,7,15,10,8,11,6],
[15,11,15,13,11,14,16,0,15,11,19,16,12,16,10],
[15,12,15,11,13,13,16,11,0,9,17,12,10,17,11],
[16,15,16,17,16,15,19,15,17,0,23,15,12,16,12],
[11,9,9,11,7,13,11,7,9,3,0,8,7,7,9],
[16,15,16,15,13,12,16,10,14,11,18,0,14,16,13],
[15,11,15,17,14,13,18,14,16,14,19,12,0,14,13],
[17,8,14,12,12,16,15,10,9,10,19,10,12,0,10],
[16,14,16,17,15,14,20,16,15,14,17,13,13,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 51, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,9,13,10,8,8,11,12,14,14,10,7,10,13],
[15,0,13,16,10,13,13,12,11,14,15,14,13,10,17],
[17,13,0,14,12,16,14,18,12,12,15,12,14,10,10],
[13,10,12,0,13,15,13,13,13,16,16,12,11,12,18],
[16,16,14,13,0,13,14,14,15,15,12,15,8,14,13],
[18,13,10,11,13,0,12,13,14,12,12,14,14,11,10],
[18,13,12,13,12,14,0,12,19,12,16,16,9,13,17],
[15,14,8,13,12,13,14,0,12,12,13,14,14,11,12],
[14,15,14,13,11,12,7,14,0,13,11,14,10,13,13],
[12,12,14,10,11,14,14,14,13,0,13,16,9,13,11],
[12,11,11,10,14,14,10,13,15,13,0,13,12,12,14],
[16,12,14,14,11,12,10,12,12,10,13,0,9,12,15],
[19,13,12,15,18,12,17,12,16,17,14,17,0,15,14],
[16,16,16,14,12,15,13,15,13,13,14,14,11,0,14],
[13,9,16,8,13,16,9,14,13,15,12,11,12,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 52, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,7,9,11,14,8,4,14,9,12,12,8,12,8],
[16,0,9,8,16,16,11,7,10,14,11,10,16,10,8],
[19,17,0,5,14,17,11,5,12,13,12,17,11,15,11],
[17,18,21,0,19,21,11,16,17,14,15,18,16,19,9],
[15,10,12,7,0,15,9,10,13,10,13,12,15,11,9],
[12,10,9,5,11,0,9,4,10,5,15,11,10,11,7],
[18,15,15,15,17,17,0,10,14,10,18,16,11,17,10],
[22,19,21,10,16,22,16,0,14,15,21,18,20,19,13],
[12,16,14,9,13,16,12,12,0,12,15,18,17,15,12],
[17,12,13,12,16,21,16,11,14,0,17,17,13,13,8],
[14,15,14,11,13,11,8,5,11,9,0,13,12,12,9],
[14,16,9,8,14,15,10,8,8,9,13,0,16,9,8],
[18,10,15,10,11,16,15,6,9,13,14,10,0,10,14],
[14,16,11,7,15,15,9,7,11,13,14,17,16,0,14],
[18,18,15,17,17,19,16,13,14,18,17,18,12,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 53, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,8,16,18,12,21,11,15,20,11,16,15,18,20],
[10,0,10,15,11,8,15,12,14,14,14,15,14,15,15],
[18,16,0,17,18,13,21,15,19,19,16,18,17,17,18],
[10,11,9,0,11,12,14,10,12,12,10,15,11,14,12],
[8,15,8,15,0,11,14,15,15,17,13,13,12,18,14],
[14,18,13,14,15,0,19,14,14,17,14,15,11,19,19],
[5,11,5,12,12,7,0,6,10,9,7,9,8,11,12],
[15,14,11,16,11,12,20,0,15,15,14,15,14,16,15],
[11,12,7,14,11,12,16,11,0,17,12,17,13,18,12],
[6,12,7,14,9,9,17,11,9,0,7,15,12,13,10],
[15,12,10,16,13,12,19,12,14,19,0,17,18,17,18],
[10,11,8,11,13,11,17,11,9,11,9,0,8,14,15],
[11,12,9,15,14,15,18,12,13,14,8,18,0,16,15],
[8,11,9,12,8,7,15,10,8,13,9,12,10,0,12],
[6,11,8,14,12,7,14,11,14,16,8,11,11,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 54, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,17,13,22,15,15,19,12,16,11,17,19,13,6],
[8,0,9,4,11,9,3,8,2,8,7,11,7,6,8],
[9,17,0,7,13,11,10,9,13,15,12,22,19,15,10],
[13,22,19,0,19,18,16,16,9,8,9,15,18,8,6],
[4,15,13,7,0,13,9,5,4,6,7,13,13,10,6],
[11,17,15,8,13,0,7,11,11,12,11,15,18,6,8],
[11,23,16,10,17,19,0,13,15,10,10,16,19,18,14],
[7,18,17,10,21,15,13,0,9,8,7,17,17,12,6],
[14,24,13,17,22,15,11,17,0,16,13,17,17,15,16],
[10,18,11,18,20,14,16,18,10,0,8,18,20,16,4],
[15,19,14,17,19,15,16,19,13,18,0,21,21,14,16],
[9,15,4,11,13,11,10,9,9,8,5,0,11,8,6],
[7,19,7,8,13,8,7,9,9,6,5,15,0,8,10],
[13,20,11,18,16,20,8,14,11,10,12,18,18,0,10],
[20,18,16,20,20,18,12,20,10,22,10,20,16,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 55, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,13,0,13,0,13,0,0,0,26,13,26,0,13],
[13,0,13,0,13,0,13,0,0,13,13,0,13,0,13],
[13,13,0,13,13,0,0,0,0,0,26,13,26,0,13],
[26,26,13,0,13,0,13,0,13,13,26,13,26,0,13],
[13,13,13,13,0,13,13,13,13,13,13,13,26,13,13],
[26,26,26,26,13,0,26,13,26,13,26,13,26,13,26],
[13,13,26,13,13,0,0,13,13,0,26,13,26,13,13],
[26,26,26,26,13,13,13,0,13,13,26,26,26,13,13],
[26,26,26,13,13,0,13,13,0,13,26,13,26,0,13],
[26,13,26,13,13,13,26,13,13,0,26,13,26,13,26],
[0,13,0,0,13,0,0,0,0,0,0,13,26,0,13],
[13,26,13,13,13,13,13,0,13,13,13,0,13,0,13],
[0,13,0,0,0,0,0,0,0,0,0,13,0,0,0],
[26,26,26,26,13,13,13,13,26,13,26,26,26,0,13],
[13,13,13,13,13,0,13,13,13,0,13,13,26,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 56, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,9,16,16,14,14,15,12,12,14,13,14,7,13],
[10,0,10,14,12,9,11,14,11,9,13,10,14,5,11],
[17,16,0,19,13,14,16,15,12,11,15,14,14,11,16],
[10,12,7,0,12,12,11,10,9,8,11,7,7,6,10],
[10,14,13,14,0,9,12,14,9,11,12,11,10,11,10],
[12,17,12,14,17,0,13,18,10,12,15,11,14,8,12],
[12,15,10,15,14,13,0,16,9,8,14,10,11,11,15],
[11,12,11,16,12,8,10,0,7,7,14,7,10,4,10],
[14,15,14,17,17,16,17,19,0,13,17,14,16,11,17],
[14,17,15,18,15,14,18,19,13,0,19,11,18,13,19],
[12,13,11,15,14,11,12,12,9,7,0,7,12,6,14],
[13,16,12,19,15,15,16,19,12,15,19,0,17,10,18],
[12,12,12,19,16,12,15,16,10,8,14,9,0,5,12],
[19,21,15,20,15,18,15,22,15,13,20,16,21,0,20],
[13,15,10,16,16,14,11,16,9,7,12,8,14,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 57, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,11,7,13,10,8,10,9,10,8,12,7,14,17],
[18,0,12,16,13,15,11,14,8,14,15,13,14,16,22],
[15,14,0,10,16,12,10,16,12,12,14,11,13,17,17],
[19,10,16,0,17,10,12,11,12,13,20,16,13,13,18],
[13,13,10,9,0,11,9,13,7,13,14,9,11,16,17],
[16,11,14,16,15,0,7,14,13,15,12,11,11,16,18],
[18,15,16,14,17,19,0,16,15,13,21,12,15,18,20],
[16,12,10,15,13,12,10,0,12,12,14,14,14,16,17],
[17,18,14,14,19,13,11,14,0,13,16,17,16,16,19],
[16,12,14,13,13,11,13,14,13,0,15,19,14,17,19],
[18,11,12,6,12,14,5,12,10,11,0,9,10,14,18],
[14,13,15,10,17,15,14,12,9,7,17,0,14,14,23],
[19,12,13,13,15,15,11,12,10,12,16,12,0,16,15],
[12,10,9,13,10,10,8,10,10,9,12,12,10,0,14],
[9,4,9,8,9,8,6,9,7,7,8,3,11,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 58, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,18,15,18,13,13,12,15,12,16,12,13,16,11],
[11,0,14,13,10,13,7,9,12,14,10,7,15,11,7],
[8,12,0,9,9,11,6,8,15,10,9,8,12,9,7],
[11,13,17,0,9,14,9,12,16,17,14,9,16,9,10],
[8,16,17,17,0,15,15,14,15,15,15,10,15,12,9],
[13,13,15,12,11,0,11,12,16,11,12,11,17,12,10],
[13,19,20,17,11,15,0,15,17,21,15,14,15,12,13],
[14,17,18,14,12,14,11,0,18,14,14,14,19,13,13],
[11,14,11,10,11,10,9,8,0,13,13,8,12,12,9],
[14,12,16,9,11,15,5,12,13,0,12,9,18,12,9],
[10,16,17,12,11,14,11,12,13,14,0,9,15,11,8],
[14,19,18,17,16,15,12,12,18,17,17,0,19,15,10],
[13,11,14,10,11,9,11,7,14,8,11,7,0,11,8],
[10,15,17,17,14,14,14,13,14,14,15,11,15,0,8],
[15,19,19,16,17,16,13,13,17,17,18,16,18,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 59, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,19,16,18,12,16,17,15,18,19,16,21,14,18],
[14,0,17,16,17,8,12,20,13,17,14,9,18,11,14],
[7,9,0,11,18,15,13,17,9,20,18,13,17,9,18],
[10,10,15,0,18,13,14,22,10,18,19,13,19,14,16],
[8,9,8,8,0,9,4,17,8,15,14,7,12,11,8],
[14,18,11,13,17,0,7,21,10,21,11,11,18,14,13],
[10,14,13,12,22,19,0,18,10,17,16,13,17,11,18],
[9,6,9,4,9,5,8,0,5,10,7,7,18,9,7],
[11,13,17,16,18,16,16,21,0,19,21,11,22,15,18],
[8,9,6,8,11,5,9,16,7,0,9,9,17,10,3],
[7,12,8,7,12,15,10,19,5,17,0,5,17,9,9],
[10,17,13,13,19,15,13,19,15,17,21,0,17,14,18],
[5,8,9,7,14,8,9,8,4,9,9,9,0,6,9],
[12,15,17,12,15,12,15,17,11,16,17,12,20,0,14],
[8,12,8,10,18,13,8,19,8,23,17,8,17,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 60, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,17,12,14,13,14,15,12,14,16,9,13,17,10],
[16,0,16,17,15,13,13,15,15,16,15,13,12,20,16],
[9,10,0,13,14,6,10,12,12,12,10,8,13,14,12],
[14,9,13,0,12,9,10,10,11,14,12,10,10,13,10],
[12,11,12,14,0,8,10,13,11,14,14,9,12,17,9],
[13,13,20,17,18,0,14,15,16,18,17,10,17,17,14],
[12,13,16,16,16,12,0,15,15,18,15,12,14,19,14],
[11,11,14,16,13,11,11,0,14,13,12,9,15,14,11],
[14,11,14,15,15,10,11,12,0,13,12,11,14,16,12],
[12,10,14,12,12,8,8,13,13,0,15,10,11,15,12],
[10,11,16,14,12,9,11,14,14,11,0,10,12,15,10],
[17,13,18,16,17,16,14,17,15,16,16,0,14,18,14],
[13,14,13,16,14,9,12,11,12,15,14,12,0,15,13],
[9,6,12,13,9,9,7,12,10,11,11,8,11,0,11],
[16,10,14,16,17,12,12,15,14,14,16,12,13,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 61, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,6,4,11,5,4,9,19,20,10,6,8,7,8],
[6,0,6,6,2,3,2,11,15,6,6,8,6,3,6],
[20,20,0,4,19,5,13,13,19,20,10,15,23,20,8],
[22,20,22,0,22,7,19,19,19,22,20,15,25,22,8],
[15,24,7,4,0,5,8,13,19,20,11,6,14,11,8],
[21,23,21,19,21,0,23,15,19,21,19,15,21,18,13],
[22,24,13,7,18,3,0,18,20,22,11,7,12,9,4],
[17,15,13,7,13,11,8,0,11,13,11,7,16,13,8],
[7,11,7,7,7,7,6,15,0,7,13,9,6,7,6],
[6,20,6,4,6,5,4,13,19,0,14,10,8,13,8],
[16,20,16,6,15,7,15,15,13,12,0,19,19,16,8],
[20,18,11,11,20,11,19,19,17,16,7,0,19,11,10],
[18,20,3,1,12,5,14,10,20,18,7,7,0,9,4],
[19,23,6,4,15,8,17,13,19,13,10,15,17,0,8],
[18,20,18,18,18,13,22,18,20,18,18,16,22,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 62, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,11,17,13,17,18,6,17,7,11,17,17,11,11],
[3,0,1,5,0,11,19,1,13,0,5,12,0,8,8],
[15,25,0,12,14,11,25,13,20,7,12,13,17,14,19],
[9,21,14,0,13,8,19,14,14,7,13,13,14,9,9],
[13,26,12,13,0,11,19,7,18,7,12,12,19,12,13],
[9,15,15,18,15,0,20,9,15,8,13,13,15,9,16],
[8,7,1,7,7,6,0,7,1,1,11,8,7,9,7],
[20,25,13,12,19,17,19,0,18,19,12,19,19,13,13],
[9,13,6,12,8,11,25,8,0,2,12,13,12,13,12],
[19,26,19,19,19,18,25,7,24,0,19,19,18,18,19],
[15,21,14,13,14,13,15,14,14,7,0,14,21,8,16],
[9,14,13,13,14,13,18,7,13,7,12,0,14,8,9],
[9,26,9,12,7,11,19,7,14,8,5,12,0,8,8],
[15,18,12,17,14,17,17,13,13,8,18,18,18,0,18],
[15,18,7,17,13,10,19,13,14,7,10,17,18,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 63, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,15,13,19,15,14,11,16,17,13,13,11,14,10],
[6,0,9,7,8,9,9,5,6,12,9,6,8,11,8],
[11,17,0,10,11,13,10,8,10,10,13,10,8,16,11],
[13,19,16,0,18,19,14,15,13,19,15,10,13,17,17],
[7,18,15,8,0,13,14,9,11,14,11,9,11,13,8],
[11,17,13,7,13,0,12,8,10,12,11,10,11,10,11],
[12,17,16,12,12,14,0,12,15,17,14,10,11,16,10],
[15,21,18,11,17,18,14,0,18,19,17,13,13,16,13],
[10,20,16,13,15,16,11,8,0,17,17,12,12,15,13],
[9,14,16,7,12,14,9,7,9,0,10,11,9,12,10],
[13,17,13,11,15,15,12,9,9,16,0,13,10,14,10],
[13,20,16,16,17,16,16,13,14,15,13,0,11,19,14],
[15,18,18,13,15,15,15,13,14,17,16,15,0,17,12],
[12,15,10,9,13,16,10,10,11,14,12,7,9,0,10],
[16,18,15,9,18,15,16,13,13,16,16,12,14,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 64, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,18,19,17,20,12,17,14,18,15,15,17,15,17],
[9,0,13,9,10,11,10,7,11,7,12,13,12,11,15],
[8,13,0,13,12,13,11,13,13,12,15,15,12,14,15],
[7,17,13,0,11,12,12,9,12,14,12,14,11,9,13],
[9,16,14,15,0,14,12,7,10,14,15,12,12,9,11],
[6,15,13,14,12,0,9,8,6,11,12,12,11,9,10],
[14,16,15,14,14,17,0,10,12,15,13,13,15,14,17],
[9,19,13,17,19,18,16,0,11,17,15,15,16,16,16],
[12,15,13,14,16,20,14,15,0,13,12,10,15,15,11],
[8,19,14,12,12,15,11,9,13,0,13,10,11,12,14],
[11,14,11,14,11,14,13,11,14,13,0,12,14,14,14],
[11,13,11,12,14,14,13,11,16,16,14,0,12,13,13],
[9,14,14,15,14,15,11,10,11,15,12,14,0,10,14],
[11,15,12,17,17,17,12,10,11,14,12,13,16,0,14],
[9,11,11,13,15,16,9,10,15,12,12,13,12,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 65, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,15,14,16,12,11,18,11,11,8,12,17,14,8],
[17,0,12,13,19,14,16,17,13,10,9,15,18,15,10],
[11,14,0,12,13,13,7,10,8,11,12,9,12,11,10],
[12,13,14,0,17,11,12,15,13,10,8,14,17,14,13],
[10,7,13,9,0,15,12,15,7,10,8,15,12,15,11],
[14,12,13,15,11,0,13,17,14,11,8,9,15,15,8],
[15,10,19,14,14,13,0,16,8,12,8,10,14,16,10],
[8,9,16,11,11,9,10,0,7,11,8,10,12,13,9],
[15,13,18,13,19,12,18,19,0,12,10,15,15,15,15],
[15,16,15,16,16,15,14,15,14,0,13,13,18,18,15],
[18,17,14,18,18,18,18,18,16,13,0,18,22,19,15],
[14,11,17,12,11,17,16,16,11,13,8,0,13,14,13],
[9,8,14,9,14,11,12,14,11,8,4,13,0,11,11],
[12,11,15,12,11,11,10,13,11,8,7,12,15,0,9],
[18,16,16,13,15,18,16,17,11,11,11,13,15,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 66, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,12,18,17,10,8,15,12,13,12,15,18,5,8],
[13,0,9,13,16,11,8,9,15,7,13,14,11,10,7],
[14,17,0,18,17,10,13,17,20,15,17,17,15,10,10],
[8,13,8,0,14,7,3,9,11,7,7,13,10,7,3],
[9,10,9,12,0,5,8,9,10,4,10,13,13,5,7],
[16,15,16,19,21,0,16,15,15,12,18,18,17,15,12],
[18,18,13,23,18,10,0,15,18,15,19,15,18,10,9],
[11,17,9,17,17,11,11,0,15,12,15,16,14,10,10],
[14,11,6,15,16,11,8,11,0,8,15,18,15,9,8],
[13,19,11,19,22,14,11,14,18,0,17,18,14,11,12],
[14,13,9,19,16,8,7,11,11,9,0,12,15,7,6],
[11,12,9,13,13,8,11,10,8,8,14,0,11,4,4],
[8,15,11,16,13,9,8,12,11,12,11,15,0,7,7],
[21,16,16,19,21,11,16,16,17,15,19,22,19,0,13],
[18,19,16,23,19,14,17,16,18,14,20,22,19,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 67, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,10,12,11,9,12,15,14,13,10,16,8,14,15],
[14,0,14,13,12,13,13,14,15,14,15,17,12,14,17],
[16,12,0,12,15,14,15,15,14,12,14,18,9,15,17],
[14,13,14,0,14,10,14,15,14,13,13,18,12,13,16],
[15,14,11,12,0,11,15,14,14,12,12,15,8,12,12],
[17,13,12,16,15,0,15,17,14,13,16,21,14,15,16],
[14,13,11,12,11,11,0,17,15,15,12,16,11,12,14],
[11,12,11,11,12,9,9,0,9,11,12,16,9,12,15],
[12,11,12,12,12,12,11,17,0,12,13,17,11,14,13],
[13,12,14,13,14,13,11,15,14,0,13,19,11,14,16],
[16,11,12,13,14,10,14,14,13,13,0,15,12,15,14],
[10,9,8,8,11,5,10,10,9,7,11,0,7,11,8],
[18,14,17,14,18,12,15,17,15,15,14,19,0,17,17],
[12,12,11,13,14,11,14,14,12,12,11,15,9,0,15],
[11,9,9,10,14,10,12,11,13,10,12,18,9,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 68, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,8,11,8,11,7,8,11,3,8,6,11,3,14],
[18,0,5,17,12,8,18,4,8,14,12,12,12,5,15],
[18,21,0,20,18,14,18,13,11,14,15,12,15,14,23],
[15,9,6,0,6,6,10,6,8,9,6,9,9,6,6],
[18,14,8,20,0,8,18,8,11,14,11,8,11,8,14],
[15,18,12,20,18,0,18,7,20,14,12,15,15,12,18],
[19,8,8,16,8,8,0,8,11,14,13,11,11,8,14],
[18,22,13,20,18,19,18,0,13,14,8,8,17,14,19],
[15,18,15,18,15,6,15,13,0,11,15,15,16,14,18],
[23,12,12,17,12,12,12,12,15,0,12,12,15,7,18],
[18,14,11,20,15,14,13,18,11,14,0,3,15,14,14],
[20,14,14,17,18,11,15,18,11,14,23,0,15,14,14],
[15,14,11,17,15,11,15,9,10,11,11,11,0,14,14],
[23,21,12,20,18,14,18,12,12,19,12,12,12,0,18],
[12,11,3,20,12,8,12,7,8,8,12,12,12,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 69, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,11,11,10,11,11,11,13,11,12,11,15,14,12],
[14,0,15,12,15,12,12,12,16,14,15,17,16,19,12],
[15,11,0,10,12,11,10,8,13,11,14,13,17,17,12],
[15,14,16,0,15,14,13,14,15,13,19,16,17,17,16],
[16,11,14,11,0,12,14,10,12,14,12,14,17,16,9],
[15,14,15,12,14,0,10,10,14,14,17,15,18,19,9],
[15,14,16,13,12,16,0,11,14,17,17,14,17,19,13],
[15,14,18,12,16,16,15,0,14,19,19,19,16,17,15],
[13,10,13,11,14,12,12,12,0,14,16,16,17,17,13],
[15,12,15,13,12,12,9,7,12,0,10,14,13,15,12],
[14,11,12,7,14,9,9,7,10,16,0,12,14,16,12],
[15,9,13,10,12,11,12,7,10,12,14,0,13,14,10],
[11,10,9,9,9,8,9,10,9,13,12,13,0,13,9],
[12,7,9,9,10,7,7,9,9,11,10,12,13,0,10],
[14,14,14,10,17,17,13,11,13,14,14,16,17,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 70, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,11,10,9,3,9,11,7,8,13,10,6,9,9],
[18,0,21,15,12,7,11,12,14,10,14,14,14,14,13],
[15,5,0,13,10,3,7,12,5,9,15,10,12,7,10],
[16,11,13,0,13,8,13,13,13,10,18,16,10,12,12],
[17,14,16,13,0,6,8,15,9,9,12,18,9,11,11],
[23,19,23,18,20,0,13,20,21,21,19,19,17,19,21],
[17,15,19,13,18,13,0,14,11,15,17,19,15,14,17],
[15,14,14,13,11,6,12,0,10,15,15,20,11,13,14],
[19,12,21,13,17,5,15,16,0,10,17,20,12,11,13],
[18,16,17,16,17,5,11,11,16,0,17,17,10,12,14],
[13,12,11,8,14,7,9,11,9,9,0,15,10,13,13],
[16,12,16,10,8,7,7,6,6,9,11,0,10,9,14],
[20,12,14,16,17,9,11,15,14,16,16,16,0,13,17],
[17,12,19,14,15,7,12,13,15,14,13,17,13,0,13],
[17,13,16,14,15,5,9,12,13,12,13,12,9,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 71, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,6,14,17,14,12,16,10,10,11,15,14,13,11],
[16,0,10,17,17,16,16,17,11,14,12,17,16,13,14],
[20,16,0,16,21,17,16,15,15,14,13,20,19,13,19],
[12,9,10,0,13,11,8,10,11,8,10,15,16,15,13],
[9,9,5,13,0,12,11,13,11,8,7,11,13,11,11],
[12,10,9,15,14,0,12,13,12,11,9,12,18,12,13],
[14,10,10,18,15,14,0,14,12,14,11,15,17,15,16],
[10,9,11,16,13,13,12,0,13,9,10,13,17,12,13],
[16,15,11,15,15,14,14,13,0,13,9,15,16,12,17],
[16,12,12,18,18,15,12,17,13,0,12,18,16,17,15],
[15,14,13,16,19,17,15,16,17,14,0,18,22,18,16],
[11,9,6,11,15,14,11,13,11,8,8,0,14,10,12],
[12,10,7,10,13,8,9,9,10,10,4,12,0,9,12],
[13,13,13,11,15,14,11,14,14,9,8,16,17,0,14],
[15,12,7,13,15,13,10,13,9,11,10,14,14,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 72, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,16,11,17,17,18,8,11,12,20,14,13,15,13],
[7,0,10,11,14,12,9,6,10,7,14,12,7,12,9],
[10,16,0,12,17,15,11,9,14,7,16,10,7,13,13],
[15,15,14,0,16,18,16,12,14,8,17,13,17,13,19],
[9,12,9,10,0,14,9,10,13,4,9,6,12,8,9],
[9,14,11,8,12,0,11,10,7,6,13,11,10,8,10],
[8,17,15,10,17,15,0,9,10,11,19,13,6,14,9],
[18,20,17,14,16,16,17,0,12,12,20,13,13,16,15],
[15,16,12,12,13,19,16,14,0,12,14,10,14,15,15],
[14,19,19,18,22,20,15,14,14,0,20,10,18,16,17],
[6,12,10,9,17,13,7,6,12,6,0,8,5,14,7],
[12,14,16,13,20,15,13,13,16,16,18,0,12,15,15],
[13,19,19,9,14,16,20,13,12,8,21,14,0,14,15],
[11,14,13,13,18,18,12,10,11,10,12,11,12,0,14],
[13,17,13,7,17,16,17,11,11,9,19,11,11,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 73, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,12,16,11,13,16,13,15,17,9,14,14,14,10],
[12,0,14,16,12,15,17,14,19,15,16,16,13,14,16],
[14,12,0,15,10,10,13,12,11,16,11,16,13,15,14],
[10,10,11,0,9,8,14,14,12,16,10,16,14,14,12],
[15,14,16,17,0,13,18,15,15,14,14,19,18,19,14],
[13,11,16,18,13,0,15,12,16,17,17,16,12,14,16],
[10,9,13,12,8,11,0,11,13,13,11,15,15,9,12],
[13,12,14,12,11,14,15,0,15,14,12,18,13,12,18],
[11,7,15,14,11,10,13,11,0,12,14,13,11,10,10],
[9,11,10,10,12,9,13,12,14,0,11,13,10,10,12],
[17,10,15,16,12,9,15,14,12,15,0,12,15,15,14],
[12,10,10,10,7,10,11,8,13,13,14,0,11,10,8],
[12,13,13,12,8,14,11,13,15,16,11,15,0,9,12],
[12,12,11,12,7,12,17,14,16,16,11,16,17,0,14],
[16,10,12,14,12,10,14,8,16,14,12,18,14,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 74, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,11,10,14,16,10,15,11,10,16,13,11,18,12],
[11,0,15,10,12,14,12,17,13,11,15,14,14,19,10],
[15,11,0,6,13,13,10,14,11,9,12,11,10,12,14],
[16,16,20,0,13,16,10,13,14,11,19,13,15,19,15],
[12,14,13,13,0,13,12,13,15,11,14,12,16,16,14],
[10,12,13,10,13,0,9,14,13,8,18,7,12,16,11],
[16,14,16,16,14,17,0,20,16,13,20,13,19,20,14],
[11,9,12,13,13,12,6,0,10,11,14,8,13,16,7],
[15,13,15,12,11,13,10,16,0,11,19,12,17,19,15],
[16,15,17,15,15,18,13,15,15,0,21,16,17,18,14],
[10,11,14,7,12,8,6,12,7,5,0,9,9,15,9],
[13,12,15,13,14,19,13,18,14,10,17,0,13,16,11],
[15,12,16,11,10,14,7,13,9,9,17,13,0,19,8],
[8,7,14,7,10,10,6,10,7,8,11,10,7,0,8],
[14,16,12,11,12,15,12,19,11,12,17,15,18,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 75, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,12,9,6,8,8,7,12,6,9,9,8,9,7],
[17,0,16,16,16,14,12,13,15,9,17,16,13,16,13],
[14,10,0,13,14,16,9,10,16,13,13,14,11,14,12],
[17,10,13,0,18,17,12,16,15,10,12,16,9,15,13],
[20,10,12,8,0,14,11,8,13,10,12,16,8,12,11],
[18,12,10,9,12,0,13,12,15,10,10,13,9,15,11],
[18,14,17,14,15,13,0,17,16,17,17,16,14,17,14],
[19,13,16,10,18,14,9,0,13,12,16,14,11,16,13],
[14,11,10,11,13,11,10,13,0,14,16,15,12,16,15],
[20,17,13,16,16,16,9,14,12,0,19,15,10,17,14],
[17,9,13,14,14,16,9,10,10,7,0,13,10,10,10],
[17,10,12,10,10,13,10,12,11,11,13,0,10,12,11],
[18,13,15,17,18,17,12,15,14,16,16,16,0,19,15],
[17,10,12,11,14,11,9,10,10,9,16,14,7,0,13],
[19,13,14,13,15,15,12,13,11,12,16,15,11,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 76, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,14,16,13,14,13,16,16,17,14,17,13,16,14],
[15,0,16,16,15,13,14,18,15,16,18,13,13,17,17],
[12,10,0,13,14,12,14,13,13,12,14,15,12,15,14],
[10,10,13,0,15,13,13,16,11,11,13,15,13,13,10],
[13,11,12,11,0,13,12,17,12,12,14,15,10,14,13],
[12,13,14,13,13,0,14,18,13,15,20,14,10,18,13],
[13,12,12,13,14,12,0,15,17,13,16,17,11,14,14],
[10,8,13,10,9,8,11,0,9,9,12,13,10,10,12],
[10,11,13,15,14,13,9,17,0,11,11,14,12,16,12],
[9,10,14,15,14,11,13,17,15,0,14,14,13,15,11],
[12,8,12,13,12,6,10,14,15,12,0,10,9,16,12],
[9,13,11,11,11,12,9,13,12,12,16,0,8,13,12],
[13,13,14,13,16,16,15,16,14,13,17,18,0,14,15],
[10,9,11,13,12,8,12,16,10,11,10,13,12,0,10],
[12,9,12,16,13,13,12,14,14,15,14,14,11,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 77, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,11,3,9,5,11,8,13,12,10,3,9,12,11],
[23,0,15,4,19,11,10,14,20,18,17,7,17,14,10],
[15,11,0,4,11,7,10,18,21,12,14,4,14,13,4],
[23,22,22,0,17,13,20,20,25,20,25,14,24,20,18],
[17,7,15,9,0,8,10,15,21,9,18,9,12,12,8],
[21,15,19,13,18,0,16,19,22,18,19,11,21,19,17],
[15,16,16,6,16,10,0,11,17,14,10,6,16,14,13],
[18,12,8,6,11,7,15,0,21,14,7,9,8,11,7],
[13,6,5,1,5,4,9,5,0,7,4,4,3,12,7],
[14,8,14,6,17,8,12,12,19,0,10,5,7,15,10],
[16,9,12,1,8,7,16,19,22,16,0,4,12,15,7],
[23,19,22,12,17,15,20,17,22,21,22,0,21,20,18],
[17,9,12,2,14,5,10,18,23,19,14,5,0,17,10],
[14,12,13,6,14,7,12,15,14,11,11,6,9,0,8],
[15,16,22,8,18,9,13,19,19,16,19,8,16,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 78, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,8,10,12,9,10,15,10,9,10,18,13,13,13],
[11,0,5,5,11,5,10,12,9,7,7,14,8,11,11],
[18,21,0,15,19,18,15,18,11,14,13,18,18,16,17],
[16,21,11,0,16,16,16,15,13,13,10,19,17,14,17],
[14,15,7,10,0,11,11,13,12,9,9,16,16,13,16],
[17,21,8,10,15,0,14,16,11,12,11,17,12,16,14],
[16,16,11,10,15,12,0,14,9,12,12,16,13,13,12],
[11,14,8,11,13,10,12,0,9,7,10,13,14,11,12],
[16,17,15,13,14,15,17,17,0,14,12,17,16,19,15],
[17,19,12,13,17,14,14,19,12,0,9,21,17,16,16],
[16,19,13,16,17,15,14,16,14,17,0,17,19,14,18],
[8,12,8,7,10,9,10,13,9,5,9,0,11,11,8],
[13,18,8,9,10,14,13,12,10,9,7,15,0,9,14],
[13,15,10,12,13,10,13,15,7,10,12,15,17,0,13],
[13,15,9,9,10,12,14,14,11,10,8,18,12,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 79, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,16,7,7,16,12,17,20,13,6,8,16,11,21],
[18,0,17,16,19,15,15,20,20,16,14,13,16,17,16],
[10,9,0,10,7,11,12,16,13,12,8,9,8,15,11],
[19,10,16,0,10,18,14,21,19,14,12,8,13,13,17],
[19,7,19,16,0,17,11,16,16,20,15,7,19,16,17],
[10,11,15,8,9,0,16,21,19,11,4,7,8,14,11],
[14,11,14,12,15,10,0,18,18,12,10,13,13,18,17],
[9,6,10,5,10,5,8,0,9,7,6,5,8,11,9],
[6,6,13,7,10,7,8,17,0,8,7,6,11,11,12],
[13,10,14,12,6,15,14,19,18,0,5,5,13,11,18],
[20,12,18,14,11,22,16,20,19,21,0,5,15,18,18],
[18,13,17,18,19,19,13,21,20,21,21,0,22,17,20],
[10,10,18,13,7,18,13,18,15,13,11,4,0,12,15],
[15,9,11,13,10,12,8,15,15,15,8,9,14,0,15],
[5,10,15,9,9,15,9,17,14,8,8,6,11,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 80, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,11,10,9,10,13,8,15,5,6,12,10,10,10],
[19,0,15,13,12,10,17,11,16,14,12,17,15,11,13],
[15,11,0,14,9,11,14,8,17,9,9,9,14,9,12],
[16,13,12,0,8,8,18,10,13,9,7,12,13,14,8],
[17,14,17,18,0,17,16,13,16,14,12,14,16,18,10],
[16,16,15,18,9,0,18,14,13,13,17,12,20,14,14],
[13,9,12,8,10,8,0,7,14,7,6,11,11,11,9],
[18,15,18,16,13,12,19,0,15,14,14,15,12,14,16],
[11,10,9,13,10,13,12,11,0,9,11,11,10,14,11],
[21,12,17,17,12,13,19,12,17,0,14,17,15,15,11],
[20,14,17,19,14,9,20,12,15,12,0,12,16,15,15],
[14,9,17,14,12,14,15,11,15,9,14,0,12,13,11],
[16,11,12,13,10,6,15,14,16,11,10,14,0,11,7],
[16,15,17,12,8,12,15,12,12,11,11,13,15,0,10],
[16,13,14,18,16,12,17,10,15,15,11,15,19,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 81, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,18,13,17,20,11,18,20,22,12,21,16,22,20],
[12,0,13,10,15,21,10,13,23,16,9,19,12,20,24],
[8,13,0,11,11,12,13,2,14,14,9,12,7,16,14],
[13,16,15,0,19,17,14,13,17,19,20,19,14,22,17],
[9,11,15,7,0,18,11,13,20,15,12,15,14,18,21],
[6,5,14,9,8,0,7,14,16,13,8,12,9,13,17],
[15,16,13,12,15,19,0,11,21,17,12,19,9,23,18],
[8,13,24,13,13,12,15,0,20,13,12,15,11,15,19],
[6,3,12,9,6,10,5,6,0,4,7,7,4,11,15],
[4,10,12,7,11,13,9,13,22,0,7,19,11,20,18],
[14,17,17,6,14,18,14,14,19,19,0,18,14,22,21],
[5,7,14,7,11,14,7,11,19,7,8,0,9,18,19],
[10,14,19,12,12,17,17,15,22,15,12,17,0,17,19],
[4,6,10,4,8,13,3,11,15,6,4,8,9,0,11],
[6,2,12,9,5,9,8,7,11,8,5,7,7,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 82, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,14,14,12,15,15,16,13,12,13,13,12,14,10],
[14,0,9,16,13,19,15,16,12,11,12,17,11,10,13],
[12,17,0,15,14,15,16,16,13,11,13,16,15,14,12],
[12,10,11,0,14,14,15,15,14,12,14,16,14,13,13],
[14,13,12,12,0,15,14,15,11,15,15,16,13,12,9],
[11,7,11,12,11,0,10,12,6,11,13,10,10,10,10],
[11,11,10,11,12,16,0,13,12,11,13,14,13,7,10],
[10,10,10,11,11,14,13,0,11,12,14,14,11,12,10],
[13,14,13,12,15,20,14,15,0,12,14,18,10,12,14],
[14,15,15,14,11,15,15,14,14,0,15,16,13,13,13],
[13,14,13,12,11,13,13,12,12,11,0,15,11,12,11],
[13,9,10,10,10,16,12,12,8,10,11,0,11,12,7],
[14,15,11,12,13,16,13,15,16,13,15,15,0,15,14],
[12,16,12,13,14,16,19,14,14,13,14,14,11,0,12],
[16,13,14,13,17,16,16,16,12,13,15,19,12,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 83, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,12,11,11,16,12,13,11,15,8,14,14,12,8],
[18,0,15,13,13,16,13,15,10,16,11,16,16,20,16],
[14,11,0,9,11,13,12,12,11,12,15,13,13,17,12],
[15,13,17,0,12,17,8,13,9,13,11,14,17,15,10],
[15,13,15,14,0,17,16,14,10,15,14,20,14,15,9],
[10,10,13,9,9,0,10,7,9,12,12,14,11,16,9],
[14,13,14,18,10,16,0,16,11,14,11,17,15,11,9],
[13,11,14,13,12,19,10,0,12,17,15,16,12,16,11],
[15,16,15,17,16,17,15,14,0,13,14,18,16,18,11],
[11,10,14,13,11,14,12,9,13,0,12,14,14,16,10],
[18,15,11,15,12,14,15,11,12,14,0,16,13,20,13],
[12,10,13,12,6,12,9,10,8,12,10,0,11,13,10],
[12,10,13,9,12,15,11,14,10,12,13,15,0,14,10],
[14,6,9,11,11,10,15,10,8,10,6,13,12,0,7],
[18,10,14,16,17,17,17,15,15,16,13,16,16,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 84, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,12,15,13,14,20,11,14,14,16,14,16,16,13],
[12,0,9,10,6,14,15,10,10,6,11,11,14,11,4],
[14,17,0,8,8,22,11,12,13,11,22,13,17,17,11],
[11,16,18,0,18,20,18,20,16,12,16,16,22,16,9],
[13,20,18,8,0,14,20,14,18,18,18,18,16,16,13],
[12,12,4,6,12,0,8,8,10,6,12,8,11,8,6],
[6,11,15,8,6,18,0,11,6,9,11,11,18,13,4],
[15,16,14,6,12,18,15,0,13,9,16,14,20,14,7],
[12,16,13,10,8,16,20,13,0,9,13,13,14,13,8],
[12,20,15,14,8,20,17,17,17,0,20,17,20,17,11],
[10,15,4,10,8,14,15,10,13,6,0,11,11,17,13],
[12,15,13,10,8,18,15,12,13,9,15,0,15,22,9],
[10,12,9,4,10,15,8,6,12,6,15,11,0,11,6],
[10,15,9,10,10,18,13,12,13,9,9,4,15,0,7],
[13,22,15,17,13,20,22,19,18,15,13,17,20,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 85, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,18,12,15,13,15,7,20,16,16,13,11,10,16],
[12,0,21,14,16,16,20,14,16,14,16,18,12,14,21],
[8,5,0,3,9,3,17,6,5,7,5,6,5,3,15],
[14,12,23,0,18,15,21,8,22,20,16,13,13,8,18],
[11,10,17,8,0,7,19,7,19,13,15,8,5,9,9],
[13,10,23,11,19,0,18,8,18,18,19,11,5,11,15],
[11,6,9,5,7,8,0,5,11,6,9,5,6,5,13],
[19,12,20,18,19,18,21,0,20,16,19,13,14,11,22],
[6,10,21,4,7,8,15,6,0,8,11,8,3,8,11],
[10,12,19,6,13,8,20,10,18,0,14,8,12,10,15],
[10,10,21,10,11,7,17,7,15,12,0,7,3,9,13],
[13,8,20,13,18,15,21,13,18,18,19,0,12,14,22],
[15,14,21,13,21,21,20,12,23,14,23,14,0,18,21],
[16,12,23,18,17,15,21,15,18,16,17,12,8,0,17],
[10,5,11,8,17,11,13,4,15,11,13,4,5,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 86, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,13,13,14,9,13,17,13,14,18,16,12,12,13],
[14,0,14,12,14,9,17,16,13,19,22,15,17,12,16],
[13,12,0,18,16,13,15,17,16,19,21,18,17,16,16],
[13,14,8,0,14,14,15,16,14,16,15,15,16,12,15],
[12,12,10,12,0,8,14,15,13,13,20,16,16,10,8],
[17,17,13,12,18,0,14,18,18,19,20,17,20,12,19],
[13,9,11,11,12,12,0,15,15,14,16,17,15,11,15],
[9,10,9,10,11,8,11,0,12,12,17,13,12,11,12],
[13,13,10,12,13,8,11,14,0,15,16,16,18,15,14],
[12,7,7,10,13,7,12,14,11,0,19,21,12,12,14],
[8,4,5,11,6,6,10,9,10,7,0,10,7,10,9],
[10,11,8,11,10,9,9,13,10,5,16,0,10,9,13],
[14,9,9,10,10,6,11,14,8,14,19,16,0,13,11],
[14,14,10,14,16,14,15,15,11,14,16,17,13,0,18],
[13,10,10,11,18,7,11,14,12,12,17,13,15,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 87, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,21,16,16,9,14,18,15,15,15,14,13,14,8],
[13,0,14,15,15,7,14,14,15,4,13,12,16,7,4],
[5,12,0,13,7,9,15,9,5,8,9,6,14,13,5],
[10,11,13,0,16,7,12,10,10,11,14,10,17,10,5],
[10,11,19,10,0,9,17,11,17,11,11,9,13,12,5],
[17,19,17,19,17,0,15,11,11,17,12,13,19,18,8],
[12,12,11,14,9,11,0,16,10,12,9,10,14,11,7],
[8,12,17,16,15,15,10,0,10,10,12,11,13,13,10],
[11,11,21,16,9,15,16,16,0,13,13,9,13,16,8],
[11,22,18,15,15,9,14,16,13,0,16,15,22,12,7],
[11,13,17,12,15,14,17,14,13,10,0,15,13,13,7],
[12,14,20,16,17,13,16,15,17,11,11,0,17,17,14],
[13,10,12,9,13,7,12,13,13,4,13,9,0,9,6],
[12,19,13,16,14,8,15,13,10,14,13,9,17,0,14],
[18,22,21,21,21,18,19,16,18,19,19,12,20,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 88, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,14,12,16,13,13,13,17,17,16,13,18,22,13],
[9,0,21,20,20,21,21,13,25,25,20,21,25,9,20],
[12,5,0,20,4,9,0,0,5,17,12,13,4,8,1],
[14,6,6,0,5,6,6,6,6,6,14,18,6,14,6],
[10,6,22,21,0,22,14,14,5,18,22,22,18,10,2],
[13,5,17,20,4,0,17,13,5,18,13,17,5,9,1],
[13,5,26,20,12,9,0,0,13,25,12,25,13,9,9],
[13,13,26,20,12,13,26,0,13,25,13,25,13,13,13],
[9,1,21,20,21,21,13,13,0,26,21,21,17,9,1],
[9,1,9,20,8,8,1,1,0,0,9,21,5,9,0],
[10,6,14,12,4,13,14,13,5,17,0,13,18,10,1],
[13,5,13,8,4,9,1,1,5,5,13,0,5,9,1],
[8,1,22,20,8,21,13,13,9,21,8,21,0,8,9],
[4,17,18,12,16,17,17,13,17,17,16,17,18,0,13],
[13,6,25,20,24,25,17,13,25,26,25,25,17,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 89, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,17,21,14,16,16,13,16,19,16,11,14,13,12],
[12,0,13,15,13,14,14,13,12,11,10,12,10,11,15],
[9,13,0,15,16,14,12,15,13,14,17,10,14,12,10],
[5,11,11,0,9,14,16,9,13,9,14,11,6,9,9],
[12,13,10,17,0,13,15,12,18,18,16,10,14,12,7],
[10,12,12,12,13,0,11,10,11,10,14,10,7,8,8],
[10,12,14,10,11,15,0,7,14,9,11,10,9,10,12],
[13,13,11,17,14,16,19,0,18,17,16,13,17,16,10],
[10,14,13,13,8,15,12,8,0,13,13,9,14,11,10],
[7,15,12,17,8,16,17,9,13,0,13,10,7,10,9],
[10,16,9,12,10,12,15,10,13,13,0,9,11,9,11],
[15,14,16,15,16,16,16,13,17,16,17,0,12,15,9],
[12,16,12,20,12,19,17,9,12,19,15,14,0,12,12],
[13,15,14,17,14,18,16,10,15,16,17,11,14,0,12],
[14,11,16,17,19,18,14,16,16,17,15,17,14,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 90, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,24,10,22,17,11,11,21,13,19,21,20,16,22],
[10,0,26,14,14,10,14,14,24,7,18,14,16,13,19],
[2,0,0,5,4,6,7,4,7,3,5,6,6,2,8],
[16,12,21,0,19,14,18,18,21,11,17,14,20,13,19],
[4,12,22,7,0,7,8,13,21,6,17,8,16,4,10],
[9,16,20,12,19,0,12,14,20,10,16,16,19,14,20],
[15,12,19,8,18,14,0,14,16,9,15,17,21,14,24],
[15,12,22,8,13,12,12,0,20,5,16,14,10,7,18],
[5,2,19,5,5,6,10,6,0,3,10,5,7,6,12],
[13,19,23,15,20,16,17,21,23,0,19,23,25,22,24],
[7,8,21,9,9,10,11,10,16,7,0,16,15,6,12],
[5,12,20,12,18,10,9,12,21,3,10,0,15,10,11],
[6,10,20,6,10,7,5,16,19,1,11,11,0,6,12],
[10,13,24,13,22,12,12,19,20,4,20,16,20,0,15],
[4,7,18,7,16,6,2,8,14,2,14,15,14,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 91, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,19,11,17,15,9,15,26,20,17,14,12,18,11],
[10,0,15,6,12,9,14,17,19,15,14,11,8,11,9],
[7,11,0,9,14,14,9,10,19,20,8,13,7,17,15],
[15,20,17,0,18,14,16,13,20,19,12,8,8,12,15],
[9,14,12,8,0,5,7,11,18,19,13,13,11,13,12],
[11,17,12,12,21,0,10,17,25,22,11,15,11,16,11],
[17,12,17,10,19,16,0,19,25,25,18,12,13,19,19],
[11,9,16,13,15,9,7,0,19,16,14,12,10,16,9],
[0,7,7,6,8,1,1,7,0,12,9,7,8,8,4],
[6,11,6,7,7,4,1,10,14,0,6,11,5,10,1],
[9,12,18,14,13,15,8,12,17,20,0,14,1,13,16],
[12,15,13,18,13,11,14,14,19,15,12,0,7,16,13],
[14,18,19,18,15,15,13,16,18,21,25,19,0,19,19],
[8,15,9,14,13,10,7,10,18,16,13,10,7,0,5],
[15,17,11,11,14,15,7,17,22,25,10,13,7,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 92, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,11,10,12,14,6,6,16,6,10,12,16,13,9],
[14,0,16,13,13,11,5,11,12,9,5,15,15,12,7],
[15,10,0,14,7,11,7,11,11,15,7,6,11,5,14],
[16,13,12,0,14,10,8,10,13,12,8,12,11,14,7],
[14,13,19,12,0,11,11,7,14,12,10,10,7,16,11],
[12,15,15,16,15,0,12,10,11,13,1,16,17,10,12],
[20,21,19,18,15,14,0,14,20,18,13,14,17,15,20],
[20,15,15,16,19,16,12,0,13,16,11,18,18,18,12],
[10,14,15,13,12,15,6,13,0,10,4,10,11,8,9],
[20,17,11,14,14,13,8,10,16,0,11,13,13,14,11],
[16,21,19,18,16,25,13,15,22,15,0,19,19,16,17],
[14,11,20,14,16,10,12,8,16,13,7,0,18,12,15],
[10,11,15,15,19,9,9,8,15,13,7,8,0,13,11],
[13,14,21,12,10,16,11,8,18,12,10,14,13,0,16],
[17,19,12,19,15,14,6,14,17,15,9,11,15,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 93, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,14,14,15,11,15,17,14,16,16,15,14,9,9],
[10,0,13,13,9,10,13,11,9,14,15,14,11,12,11],
[12,13,0,13,14,14,16,15,11,16,19,15,14,11,13],
[12,13,13,0,14,11,18,14,13,20,18,15,16,11,13],
[11,17,12,12,0,9,19,11,9,17,12,16,14,10,12],
[15,16,12,15,17,0,19,15,11,18,14,18,16,14,14],
[11,13,10,8,7,7,0,10,11,13,12,13,13,8,9],
[9,15,11,12,15,11,16,0,11,16,15,11,11,8,11],
[12,17,15,13,17,15,15,15,0,16,16,20,16,12,10],
[10,12,10,6,9,8,13,10,10,0,13,14,11,8,10],
[10,11,7,8,14,12,14,11,10,13,0,15,14,9,11],
[11,12,11,11,10,8,13,15,6,12,11,0,9,9,9],
[12,15,12,10,12,10,13,15,10,15,12,17,0,12,9],
[17,14,15,15,16,12,18,18,14,18,17,17,14,0,17],
[17,15,13,13,14,12,17,15,16,16,15,17,17,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 94, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,12,10,13,19,13,11,3,13,13,13,3,15,22],
[13,0,13,4,12,16,16,20,9,9,16,16,3,9,12],
[14,13,0,7,10,19,10,11,0,10,10,10,6,15,10],
[16,22,19,0,19,19,19,20,12,22,19,22,15,15,19],
[13,14,16,7,0,16,23,20,9,10,7,14,7,12,15],
[7,10,7,7,10,0,17,11,7,6,14,17,10,6,10],
[13,10,16,7,3,9,0,13,0,3,7,3,7,12,12],
[15,6,15,6,6,15,13,0,6,6,13,6,6,15,15],
[23,17,26,14,17,19,26,20,0,13,14,17,10,15,22],
[13,17,16,4,16,20,23,20,13,0,23,23,7,15,16],
[13,10,16,7,19,12,19,13,12,3,0,7,7,12,15],
[13,10,16,4,12,9,23,20,9,3,19,0,7,15,12],
[23,23,20,11,19,16,19,20,16,19,19,19,0,19,19],
[11,17,11,11,14,20,14,11,11,11,14,11,7,0,14],
[4,14,16,7,11,16,14,11,4,10,11,14,7,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 95, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,12,21,22,21,25,9,25,21,18,25,12,22,18],
[7,0,12,18,19,18,16,12,22,19,12,12,12,16,12],
[14,14,0,13,16,16,14,10,20,22,15,20,10,17,14],
[5,8,13,0,16,19,20,7,14,19,13,17,7,17,13],
[4,7,10,10,0,12,10,6,10,6,6,10,6,10,4],
[5,8,10,7,14,0,13,4,13,11,12,13,6,10,4],
[1,10,12,6,16,13,0,0,9,13,12,7,6,12,0],
[17,14,16,19,20,22,26,0,20,13,18,26,18,22,17],
[1,4,6,12,16,13,17,6,0,13,12,13,6,12,13],
[5,7,4,7,20,15,13,13,13,0,12,19,6,10,10],
[8,14,11,13,20,14,14,8,14,14,0,14,7,11,11],
[1,14,6,9,16,13,19,0,13,7,12,0,6,10,6],
[14,14,16,19,20,20,20,8,20,20,19,20,0,16,20],
[4,10,9,9,16,16,14,4,14,16,15,16,10,0,10],
[8,14,12,13,22,22,26,9,13,16,15,20,6,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 96, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,14,12,19,12,19,6,19,13,20,14,19,19,20],
[1,0,1,6,7,7,6,6,14,0,7,1,6,7,7],
[12,25,0,17,12,12,19,17,25,19,18,19,17,19,17],
[14,20,9,0,20,15,14,11,14,8,15,15,20,14,20],
[7,19,14,6,0,6,13,12,13,13,6,20,11,20,18],
[14,19,14,11,20,0,13,11,14,8,21,19,20,19,20],
[7,20,7,12,13,13,0,12,14,7,13,7,12,13,13],
[20,20,9,15,14,15,14,0,14,8,15,15,14,14,21],
[7,12,1,12,13,12,12,12,0,6,12,12,18,12,18],
[13,26,7,18,13,18,19,18,20,0,13,12,17,18,13],
[6,19,8,11,20,5,13,11,14,13,0,19,25,19,20],
[12,25,7,11,6,7,19,11,14,14,7,0,6,19,12],
[7,20,9,6,15,6,14,12,8,9,1,20,0,14,21],
[7,19,7,12,6,7,13,12,14,8,7,7,12,0,13],
[6,19,9,6,8,6,13,5,8,13,6,14,5,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 97, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,14,9,13,10,11,9,14,13,12,7,10,13,19],
[12,0,12,13,9,15,12,17,15,14,11,9,8,12,18],
[12,14,0,11,12,15,10,12,14,10,8,7,9,11,20],
[17,13,15,0,15,15,15,16,13,18,15,14,9,17,17],
[13,17,14,11,0,14,11,12,18,12,11,6,14,13,19],
[16,11,11,11,12,0,10,11,16,10,7,6,12,12,19],
[15,14,16,11,15,16,0,16,16,16,13,12,10,20,20],
[17,9,14,10,14,15,10,0,17,11,11,11,13,13,16],
[12,11,12,13,8,10,10,9,0,14,13,8,13,12,18],
[13,12,16,8,14,16,10,15,12,0,17,13,9,13,18],
[14,15,18,11,15,19,13,15,13,9,0,14,12,14,16],
[19,17,19,12,20,20,14,15,18,13,12,0,15,15,22],
[16,18,17,17,12,14,16,13,13,17,14,11,0,18,18],
[13,14,15,9,13,14,6,13,14,13,12,11,8,0,17],
[7,8,6,9,7,7,6,10,8,8,10,4,8,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 98, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,8,10,12,13,9,12,4,7,13,15,7,12,7],
[12,0,7,9,15,10,8,6,4,5,7,16,5,8,8],
[18,19,0,15,10,15,8,10,9,14,17,20,10,13,9],
[16,17,11,0,15,15,12,14,9,10,12,17,10,16,9],
[14,11,16,11,0,19,4,15,5,15,12,17,10,14,10],
[13,16,11,11,7,0,4,5,4,7,12,15,13,8,6],
[17,18,18,14,22,22,0,18,15,13,13,19,13,19,18],
[14,20,16,12,11,21,8,0,12,16,16,16,11,12,14],
[22,22,17,17,21,22,11,14,0,12,18,20,18,19,18],
[19,21,12,16,11,19,13,10,14,0,16,20,14,9,12],
[13,19,9,14,14,14,13,10,8,10,0,20,8,15,13],
[11,10,6,9,9,11,7,10,6,6,6,0,5,10,10],
[19,21,16,16,16,13,13,15,8,12,18,21,0,16,6],
[14,18,13,10,12,18,7,14,7,17,11,16,10,0,10],
[19,18,17,17,16,20,8,12,8,14,13,16,20,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 99, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,7,13,13,16,13,16,9,13,8,18,11,13,8],
[8,0,13,13,15,15,15,10,3,8,3,10,13,5,5],
[19,13,0,19,14,19,14,9,9,11,11,14,19,13,11],
[13,13,7,0,15,15,19,10,12,11,16,11,14,9,16],
[13,11,12,11,0,8,14,15,14,14,9,9,16,7,9],
[10,11,7,11,18,0,11,10,14,9,11,9,11,7,11],
[13,11,12,7,12,15,0,15,7,9,6,9,21,7,6],
[10,16,17,16,11,16,11,0,4,14,11,9,21,11,11],
[17,23,17,14,12,12,19,22,0,21,13,21,17,9,18],
[13,18,15,15,12,17,17,12,5,0,14,12,20,9,12],
[18,23,15,10,17,15,20,15,13,12,0,12,15,14,14],
[8,16,12,15,17,17,17,17,5,14,14,0,12,7,16],
[15,13,7,12,10,15,5,5,9,6,11,14,0,9,11],
[13,21,13,17,19,19,19,15,17,17,12,19,17,0,19],
[18,21,15,10,17,15,20,15,8,14,12,10,15,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 100, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,16,15,13,11,16,15,15,14,15,14,15,10,12],
[8,0,13,13,12,9,11,13,12,13,11,13,13,12,15],
[10,13,0,13,13,11,14,13,15,13,13,13,14,14,10],
[11,13,13,0,12,9,15,13,15,14,13,13,17,11,13],
[13,14,13,14,0,12,12,11,18,14,12,11,15,14,13],
[15,17,15,17,14,0,16,12,17,17,14,14,14,12,17],
[10,15,12,11,14,10,0,13,15,12,14,9,14,10,12],
[11,13,13,13,15,14,13,0,15,12,12,11,14,10,12],
[11,14,11,11,8,9,11,11,0,13,8,10,12,10,10],
[12,13,13,12,12,9,14,14,13,0,13,9,13,13,9],
[11,15,13,13,14,12,12,14,18,13,0,13,16,14,13],
[12,13,13,13,15,12,17,15,16,17,13,0,18,12,13],
[11,13,12,9,11,12,12,12,14,13,10,8,0,11,10],
[16,14,12,15,12,14,16,16,16,13,12,14,15,0,14],
[14,11,16,13,13,9,14,14,16,17,13,13,16,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 101, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,12,15,16,7,13,12,17,15,13,16,11,16,12],
[9,0,5,10,10,3,5,6,8,10,7,10,7,10,8],
[14,21,0,21,20,9,18,15,19,20,15,21,16,18,13],
[11,16,5,0,14,10,9,7,16,17,12,15,9,16,14],
[10,16,6,12,0,7,10,9,14,13,12,13,11,15,12],
[19,23,17,16,19,0,18,19,22,20,15,19,17,19,13],
[13,21,8,17,16,8,0,14,14,16,17,17,10,17,15],
[14,20,11,19,17,7,12,0,19,14,16,18,13,18,12],
[9,18,7,10,12,4,12,7,0,9,10,15,10,14,8],
[11,16,6,9,13,6,10,12,17,0,10,11,8,13,11],
[13,19,11,14,14,11,9,10,16,16,0,13,10,17,14],
[10,16,5,11,13,7,9,8,11,15,13,0,5,15,11],
[15,19,10,17,15,9,16,13,16,18,16,21,0,15,17],
[10,16,8,10,11,7,9,8,12,13,9,11,11,0,7],
[14,18,13,12,14,13,11,14,18,15,12,15,9,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 102, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,16,19,16,14,13,16,11,12,15,11,12,17,15],
[10,0,15,15,12,9,12,13,9,13,14,15,11,13,14],
[10,11,0,12,10,9,13,12,10,12,11,11,10,14,8],
[7,11,14,0,17,10,10,14,12,15,11,11,12,12,13],
[10,14,16,9,0,9,12,9,11,10,12,10,9,12,11],
[12,17,17,16,17,0,15,15,14,16,15,16,13,15,14],
[13,14,13,16,14,11,0,12,13,15,12,13,13,14,13],
[10,13,14,12,17,11,14,0,11,13,12,11,11,12,11],
[15,17,16,14,15,12,13,15,0,12,15,14,14,13,13],
[14,13,14,11,16,10,11,13,14,0,14,12,14,14,13],
[11,12,15,15,14,11,14,14,11,12,0,14,8,14,12],
[15,11,15,15,16,10,13,15,12,14,12,0,10,18,12],
[14,15,16,14,17,13,13,15,12,12,18,16,0,12,16],
[9,13,12,14,14,11,12,14,13,12,12,8,14,0,13],
[11,12,18,13,15,12,13,15,13,13,14,14,10,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 103, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,7,11,7,11,13,9,13,4,7,8,9,12,12],
[18,0,13,17,11,18,14,12,12,16,13,17,14,14,20],
[19,13,0,21,13,12,15,11,19,14,16,17,17,12,15],
[15,9,5,0,10,9,10,9,14,9,14,14,12,8,13],
[19,15,13,16,0,16,18,11,17,13,13,15,13,16,18],
[15,8,14,17,10,0,13,11,14,11,12,12,11,12,16],
[13,12,11,16,8,13,0,12,15,9,11,11,10,15,11],
[17,14,15,17,15,15,14,0,17,16,10,17,14,19,17],
[13,14,7,12,9,12,11,9,0,9,9,9,8,13,11],
[22,10,12,17,13,15,17,10,17,0,15,14,12,15,17],
[19,13,10,12,13,14,15,16,17,11,0,12,16,14,14],
[18,9,9,12,11,14,15,9,17,12,14,0,13,13,14],
[17,12,9,14,13,15,16,12,18,14,10,13,0,14,14],
[14,12,14,18,10,14,11,7,13,11,12,13,12,0,15],
[14,6,11,13,8,10,15,9,15,9,12,12,12,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 104, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,10,14,12,9,17,10,14,22,18,16,12,15,11],
[15,0,12,14,18,10,13,17,13,18,10,16,15,13,12],
[16,14,0,18,22,19,17,10,9,20,14,11,11,18,10],
[12,12,8,0,14,12,17,9,8,13,8,11,11,8,7],
[14,8,4,12,0,8,15,6,9,18,11,12,6,12,5],
[17,16,7,14,18,0,17,12,12,17,16,11,14,12,6],
[9,13,9,9,11,9,0,9,8,17,14,5,14,6,12],
[16,9,16,17,20,14,17,0,16,25,16,12,19,13,16],
[12,13,17,18,17,14,18,10,0,14,15,10,17,10,7],
[4,8,6,13,8,9,9,1,12,0,8,7,3,4,1],
[8,16,12,18,15,10,12,10,11,18,0,8,14,11,13],
[10,10,15,15,14,15,21,14,16,19,18,0,16,13,13],
[14,11,15,15,20,12,12,7,9,23,12,10,0,11,9],
[11,13,8,18,14,14,20,13,16,22,15,13,15,0,13],
[15,14,16,19,21,20,14,10,19,25,13,13,17,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 105, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,16,3,7,12,21,21,12,15,3,12,12,3,25],
[5,0,13,4,8,4,9,23,7,13,4,4,14,5,17],
[10,13,0,1,1,10,18,16,9,16,1,10,7,4,23],
[23,22,25,0,8,22,25,25,22,20,22,19,13,22,25],
[19,18,25,18,0,18,18,22,19,21,18,15,13,18,25],
[14,22,16,4,8,0,18,23,13,16,1,10,14,8,26],
[5,17,8,1,8,8,0,23,5,17,5,14,14,8,14],
[5,3,10,1,4,3,3,0,4,16,1,0,10,4,17],
[14,19,17,4,7,13,21,22,0,16,7,19,13,10,26],
[11,13,10,6,5,10,9,10,10,0,10,10,10,13,13],
[23,22,25,4,8,25,21,25,19,16,0,19,14,14,26],
[14,22,16,7,11,16,12,26,7,16,7,0,17,14,17],
[14,12,19,13,13,12,12,16,13,16,12,9,0,13,20],
[23,21,22,4,8,18,18,22,16,13,12,12,13,0,26],
[1,9,3,1,1,0,12,9,0,13,0,9,6,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 106, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,14,14,13,11,14,14,14,11,17,15,10,15,15],
[14,0,12,16,18,16,11,14,15,15,14,18,11,22,21],
[12,14,0,17,16,13,13,18,17,18,16,15,15,20,18],
[12,10,9,0,12,12,8,14,12,13,15,12,16,16,14],
[13,8,10,14,0,13,9,11,8,11,16,13,12,18,11],
[15,10,13,14,13,0,12,14,11,14,15,11,14,19,14],
[12,15,13,18,17,14,0,17,17,15,20,18,15,20,17],
[12,12,8,12,15,12,9,0,9,14,15,17,13,18,12],
[12,11,9,14,18,15,9,17,0,13,18,15,12,17,18],
[15,11,8,13,15,12,11,12,13,0,17,16,14,17,15],
[9,12,10,11,10,11,6,11,8,9,0,10,7,15,10],
[11,8,11,14,13,15,8,9,11,10,16,0,10,16,12],
[16,15,11,10,14,12,11,13,14,12,19,16,0,17,17],
[11,4,6,10,8,7,6,8,9,9,11,10,9,0,10],
[11,5,8,12,15,12,9,14,8,11,16,14,9,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 107, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,14,12,22,12,8,18,22,13,12,25,22,10,17],
[1,0,10,6,21,6,1,6,18,4,6,11,12,6,10],
[12,16,0,7,17,20,3,9,23,8,9,17,12,14,13],
[14,20,19,0,21,22,14,9,18,18,8,16,20,14,18],
[4,5,9,5,0,9,4,9,19,5,9,10,6,9,10],
[14,20,6,4,17,0,3,8,13,14,8,16,17,11,12],
[18,25,23,12,22,23,0,11,22,13,12,20,20,23,15],
[8,20,17,17,17,18,15,0,22,13,7,11,15,18,20],
[4,8,3,8,7,13,4,4,0,8,9,3,9,9,8],
[13,22,18,8,21,12,13,13,18,0,8,18,18,16,17],
[14,20,17,18,17,18,14,19,17,18,0,14,20,13,18],
[1,15,9,10,16,10,6,15,23,8,12,0,6,11,15],
[4,14,14,6,20,9,6,11,17,8,6,20,0,14,19],
[16,20,12,12,17,15,3,8,17,10,13,15,12,0,12],
[9,16,13,8,16,14,11,6,18,9,8,11,7,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 108, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,15,16,15,14,14,15,13,14,20,17,19,14,13],
[9,0,14,16,15,15,11,11,8,12,14,14,15,8,13],
[11,12,0,17,12,15,12,13,11,13,17,15,17,14,14],
[10,10,9,0,12,12,12,11,4,12,16,14,13,9,13],
[11,11,14,14,0,10,11,12,8,14,15,13,15,10,11],
[12,11,11,14,16,0,10,10,7,10,15,15,13,11,9],
[12,15,14,14,15,16,0,13,11,13,14,14,12,9,12],
[11,15,13,15,14,16,13,0,11,10,19,13,15,12,18],
[13,18,15,22,18,19,15,15,0,16,18,17,17,13,13],
[12,14,13,14,12,16,13,16,10,0,14,15,15,12,13],
[6,12,9,10,11,11,12,7,8,12,0,12,16,8,9],
[9,12,11,12,13,11,12,13,9,11,14,0,14,10,13],
[7,11,9,13,11,13,14,11,9,11,10,12,0,9,12],
[12,18,12,17,16,15,17,14,13,14,18,16,17,0,15],
[13,13,12,13,15,17,14,8,13,13,17,13,14,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 109, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,5,5,5,5,5,5,5,10,10,5,10,10,5,5],
[21,0,9,21,17,4,17,9,5,21,5,9,5,4,26],
[21,17,0,26,12,5,22,9,22,22,10,14,10,21,17],
[21,5,0,0,12,5,22,9,10,22,10,14,10,9,17],
[21,9,14,14,0,9,14,14,14,14,10,14,10,9,14],
[21,22,21,21,17,0,22,9,22,17,17,14,5,21,22],
[21,9,4,4,12,4,0,4,10,21,5,14,5,9,21],
[21,17,17,17,12,17,22,0,22,17,17,26,17,21,17],
[16,21,4,16,12,4,16,4,0,21,0,9,0,4,21],
[16,5,4,4,12,9,5,9,5,0,5,14,5,9,21],
[21,21,16,16,16,9,21,9,26,21,0,14,10,21,21],
[16,17,12,12,12,12,12,0,17,12,12,0,0,21,17],
[16,21,16,16,16,21,21,9,26,21,16,26,0,21,21],
[21,22,5,17,17,5,17,5,22,17,5,5,5,0,22],
[21,0,9,9,12,4,5,9,5,5,5,9,5,4,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 110, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,3,5,8,3,3,11,3,3,11,3,0,3,13,11],
[23,0,5,10,13,8,8,13,16,11,26,15,3,10,8],
[21,21,0,21,8,8,8,21,24,8,21,21,24,10,21],
[18,16,5,0,3,3,11,16,16,11,16,13,3,13,3],
[23,13,18,23,0,13,21,21,16,21,21,13,16,23,21],
[23,18,18,23,13,0,8,26,16,11,26,15,16,13,24],
[15,18,18,15,5,18,0,18,18,13,18,15,18,26,18],
[23,13,5,10,5,0,8,0,16,11,16,13,3,10,8],
[23,10,2,10,10,10,8,10,0,10,23,23,11,10,8],
[15,15,18,15,5,15,13,15,16,0,15,15,16,23,13],
[23,0,5,10,5,0,8,10,3,11,0,15,3,10,8],
[26,11,5,13,13,11,11,13,3,11,11,0,3,13,11],
[23,23,2,23,10,10,8,23,15,10,23,23,0,10,8],
[13,16,16,13,3,13,0,16,16,3,16,13,16,0,16],
[15,18,5,23,5,2,8,18,18,13,18,15,18,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 111, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,8,13,7,8,14,9,13,13,16,7,13,8,9],
[14,0,17,16,10,11,19,11,12,21,14,13,18,18,8],
[18,9,0,13,7,16,16,10,12,16,13,14,13,13,11],
[13,10,13,0,7,10,13,11,16,17,15,13,18,11,16],
[19,16,19,19,0,20,15,11,19,19,21,18,24,13,17],
[18,15,10,16,6,0,13,14,15,18,18,12,18,15,15],
[12,7,10,13,11,13,0,12,13,19,13,15,19,13,15],
[17,15,16,15,15,12,14,0,15,16,17,12,19,13,10],
[13,14,14,10,7,11,13,11,0,14,19,12,14,13,10],
[13,5,10,9,7,8,7,10,12,0,14,11,12,5,8],
[10,12,13,11,5,8,13,9,7,12,0,7,15,10,6],
[19,13,12,13,8,14,11,14,14,15,19,0,12,12,16],
[13,8,13,8,2,8,7,7,12,14,11,14,0,7,14],
[18,8,13,15,13,11,13,13,13,21,16,14,19,0,16],
[17,18,15,10,9,11,11,16,16,18,20,10,12,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 112, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,19,11,13,16,18,14,14,17,18,20,17,18,19],
[5,0,10,9,11,1,16,18,15,7,7,8,5,20,10],
[7,16,0,11,14,10,17,15,15,13,13,14,7,18,9],
[15,17,15,0,17,12,17,18,21,17,13,17,15,26,10],
[13,15,12,9,0,7,14,19,15,12,12,14,13,18,13],
[10,25,16,14,19,0,22,18,18,16,21,15,14,22,14],
[8,10,9,9,12,4,0,10,15,12,15,10,9,15,9],
[12,8,11,8,7,8,16,0,16,14,15,12,8,21,13],
[12,11,11,5,11,8,11,10,0,7,8,12,13,19,15],
[9,19,13,9,14,10,14,12,19,0,20,9,12,21,10],
[8,19,13,13,14,5,11,11,18,6,0,12,12,17,10],
[6,18,12,9,12,11,16,14,14,17,14,0,12,18,10],
[9,21,19,11,13,12,17,18,13,14,14,14,0,20,18],
[8,6,8,0,8,4,11,5,7,5,9,8,6,0,6],
[7,16,17,16,13,12,17,13,11,16,16,16,8,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 113, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,9,9,7,12,6,12,12,5,2,9,7,12,9],
[14,0,5,9,0,7,3,12,5,5,2,13,10,2,12],
[17,21,0,23,5,16,17,23,12,10,8,18,16,18,23],
[17,17,3,0,3,6,6,6,3,11,3,6,6,6,8],
[19,26,21,23,0,18,14,26,21,13,11,23,21,18,26],
[14,19,10,20,8,0,8,16,10,10,16,20,21,13,17],
[20,23,9,20,12,18,0,23,9,10,15,20,13,18,20],
[14,14,3,20,0,10,3,0,3,8,8,18,10,5,15],
[14,21,14,23,5,16,17,23,0,10,8,18,16,18,21],
[21,21,16,15,13,16,16,18,16,0,15,13,13,18,21],
[24,24,18,23,15,10,11,18,18,11,0,21,13,12,18],
[17,13,8,20,3,6,6,8,8,13,5,0,6,8,13],
[19,16,10,20,5,5,13,16,10,13,13,20,0,5,17],
[14,24,8,20,8,13,8,21,8,8,14,18,21,0,21],
[17,14,3,18,0,9,6,11,5,5,8,13,9,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 114, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,10,13,0,9,15,14,10,15,8,9,12,5,17],
[16,0,10,14,8,16,16,16,11,23,16,15,18,11,17],
[16,16,0,16,10,10,22,16,10,23,16,16,9,9,8],
[13,12,10,0,2,3,10,11,10,10,11,3,13,5,12],
[26,18,16,24,0,16,23,17,10,24,24,16,19,25,18],
[17,10,16,23,10,0,21,9,15,17,14,8,11,17,9],
[11,10,4,16,3,5,0,4,3,17,17,10,4,10,3],
[12,10,10,15,9,17,22,0,10,24,16,18,11,12,10],
[16,15,16,16,16,11,23,16,0,23,16,15,9,17,15],
[11,3,3,16,2,9,9,2,3,0,15,9,5,5,5],
[18,10,10,15,2,12,9,10,10,11,0,5,12,12,12],
[17,11,10,23,10,18,16,8,11,17,21,0,12,11,11],
[14,8,17,13,7,15,22,15,17,21,14,14,0,10,15],
[21,15,17,21,1,9,16,14,9,21,14,15,16,0,13],
[9,9,18,14,8,17,23,16,11,21,14,15,11,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 115, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,17,15,20,18,12,14,14,18,12,21,14,12,15],
[12,0,12,9,20,14,12,16,12,18,15,11,8,13,9],
[9,14,0,14,18,20,20,8,16,12,18,16,11,11,21],
[11,17,12,0,21,17,10,15,12,13,15,16,6,13,12],
[6,6,8,5,0,15,11,10,5,3,10,8,1,5,12],
[8,12,6,9,11,0,10,5,7,9,10,12,6,8,15],
[14,14,6,16,15,16,0,11,12,15,11,16,8,13,12],
[12,10,18,11,16,21,15,0,14,8,15,16,10,11,15],
[12,14,10,14,21,19,14,12,0,13,13,10,4,7,18],
[8,8,14,13,23,17,11,18,13,0,16,14,8,9,14],
[14,11,8,11,16,16,15,11,13,10,0,15,5,8,14],
[5,15,10,10,18,14,10,10,16,12,11,0,6,8,14],
[12,18,15,20,25,20,18,16,22,18,21,20,0,15,16],
[14,13,15,13,21,18,13,15,19,17,18,18,11,0,12],
[11,17,5,14,14,11,14,11,8,12,12,12,10,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 116, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,11,14,11,13,15,13,11,12,13,9,14,13,15],
[9,0,9,10,13,16,16,13,12,15,14,8,18,13,16],
[15,17,0,16,17,17,16,18,12,15,16,15,17,16,15],
[12,16,10,0,12,17,15,15,10,13,13,9,14,14,14],
[15,13,9,14,0,12,15,15,15,13,15,10,19,14,17],
[13,10,9,9,14,0,12,12,12,12,10,8,16,10,15],
[11,10,10,11,11,14,0,12,9,12,11,9,13,10,13],
[13,13,8,11,11,14,14,0,10,16,14,9,18,15,16],
[15,14,14,16,11,14,17,16,0,14,13,9,18,12,13],
[14,11,11,13,13,14,14,10,12,0,11,11,15,13,11],
[13,12,10,13,11,16,15,12,13,15,0,13,16,12,15],
[17,18,11,17,16,18,17,17,17,15,13,0,19,16,14],
[12,8,9,12,7,10,13,8,8,11,10,7,0,12,13],
[13,13,10,12,12,16,16,11,14,13,14,10,14,0,15],
[11,10,11,12,9,11,13,10,13,15,11,12,13,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 117, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,13,12,13,14,15,10,10,9,12,11,9,14,13],
[11,0,11,9,14,12,11,11,10,10,14,14,12,13,12],
[13,15,0,16,15,19,16,10,11,14,13,16,14,15,15],
[14,17,10,0,17,13,14,11,12,11,14,14,14,11,14],
[13,12,11,9,0,10,13,7,11,10,11,10,8,13,13],
[12,14,7,13,16,0,10,8,11,10,14,10,9,15,12],
[11,15,10,12,13,16,0,4,8,11,13,11,10,16,11],
[16,15,16,15,19,18,22,0,13,18,14,20,15,20,17],
[16,16,15,14,15,15,18,13,0,12,19,14,12,14,14],
[17,16,12,15,16,16,15,8,14,0,16,14,12,13,15],
[14,12,13,12,15,12,13,12,7,10,0,12,9,12,11],
[15,12,10,12,16,16,15,6,12,12,14,0,11,15,12],
[17,14,12,12,18,17,16,11,14,14,17,15,0,16,16],
[12,13,11,15,13,11,10,6,12,13,14,11,10,0,15],
[13,14,11,12,13,14,15,9,12,11,15,14,10,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 118, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,23,15,17,17,17,8,23,23,17,23,15,23,17],
[9,0,23,6,20,14,11,14,14,14,17,23,18,26,20],
[3,3,0,0,3,0,3,0,0,0,3,0,12,3,12],
[11,20,26,0,20,11,20,11,11,11,11,26,12,26,20],
[9,6,23,6,0,14,3,14,14,14,14,14,18,26,17],
[9,12,26,15,12,0,12,8,23,18,26,23,18,26,20],
[9,15,23,6,23,14,0,14,14,14,14,23,15,23,17],
[18,12,26,15,12,18,12,0,26,18,26,26,18,26,20],
[3,12,26,15,12,3,12,0,0,12,12,18,18,18,12],
[3,12,26,15,12,8,12,8,14,0,20,23,18,26,20],
[9,9,23,15,12,0,12,0,14,6,0,23,18,26,20],
[3,3,26,0,12,3,3,0,8,3,3,0,12,20,20],
[11,8,14,14,8,8,11,8,8,8,8,14,0,17,8],
[3,0,23,0,0,0,3,0,8,0,0,6,9,0,9],
[9,6,14,6,9,6,9,6,14,6,6,6,18,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 119, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,8,13,13,13,8,13,13,8,12,5,15,5,12],
[11,0,4,9,9,5,7,14,9,7,11,4,16,9,6],
[18,22,0,24,12,15,15,24,20,19,26,21,26,12,17],
[13,17,2,0,5,9,12,24,2,16,13,13,23,9,9],
[13,17,14,21,0,12,17,21,21,21,21,18,26,14,12],
[13,21,11,17,14,0,14,24,14,14,18,18,16,11,13],
[18,19,11,14,9,12,0,21,14,21,23,21,16,11,14],
[13,12,2,2,5,2,5,0,2,9,13,9,16,2,9],
[13,17,6,24,5,12,12,24,0,16,13,11,23,9,9],
[18,19,7,10,5,12,5,17,10,0,23,12,16,10,9],
[14,15,0,13,5,8,3,13,13,3,0,7,15,5,9],
[21,22,5,13,8,8,5,17,15,14,19,0,19,7,12],
[11,10,0,3,0,10,10,10,3,10,11,7,0,0,9],
[21,17,14,17,12,15,15,24,17,16,21,19,26,0,12],
[14,20,9,17,14,13,12,17,17,17,17,14,17,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 120, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,16,10,18,10,12,13,16,10,15,14,9,9,10],
[14,0,13,12,20,9,12,14,16,12,14,19,15,14,14],
[10,13,0,9,16,8,9,11,14,11,15,15,10,10,11],
[16,14,17,0,18,11,13,15,15,18,17,14,13,19,12],
[8,6,10,8,0,3,7,10,13,10,14,9,7,11,9],
[16,17,18,15,23,0,14,21,23,15,15,19,12,20,16],
[14,14,17,13,19,12,0,19,17,10,13,18,20,15,14],
[13,12,15,11,16,5,7,0,18,10,11,14,9,18,13],
[10,10,12,11,13,3,9,8,0,13,13,10,8,14,11],
[16,14,15,8,16,11,16,16,13,0,18,11,16,15,12],
[11,12,11,9,12,11,13,15,13,8,0,12,13,14,8],
[12,7,11,12,17,7,8,12,16,15,14,0,13,13,8],
[17,11,16,13,19,14,6,17,18,10,13,13,0,16,13],
[17,12,16,7,15,6,11,8,12,11,12,13,10,0,11],
[16,12,15,14,17,10,12,13,15,14,18,18,13,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 121, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,10,9,9,11,11,11,12,11,9,13,15,12,12],
[16,0,15,10,15,15,13,12,14,15,10,13,18,19,16],
[16,11,0,12,11,13,13,15,13,15,10,17,15,16,12],
[17,16,14,0,17,13,13,14,12,18,13,15,15,16,17],
[17,11,15,9,0,12,13,15,14,18,13,14,16,13,15],
[15,11,13,13,14,0,12,13,12,15,11,14,13,12,9],
[15,13,13,13,13,14,0,19,14,18,9,21,14,19,17],
[15,14,11,12,11,13,7,0,10,11,9,14,12,16,13],
[14,12,13,14,12,14,12,16,0,18,8,18,12,16,15],
[15,11,11,8,8,11,8,15,8,0,8,13,11,11,11],
[17,16,16,13,13,15,17,17,18,18,0,18,17,18,17],
[13,13,9,11,12,12,5,12,8,13,8,0,11,13,11],
[11,8,11,11,10,13,12,14,14,15,9,15,0,14,11],
[14,7,10,10,13,14,7,10,10,15,8,13,12,0,9],
[14,10,14,9,11,17,9,13,11,15,9,15,15,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 122, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,10,13,11,8,14,8,10,12,14,13,8,13,11],
[18,0,16,20,18,13,17,17,17,19,16,17,13,16,12],
[16,10,0,16,9,10,15,15,11,14,16,12,12,14,10],
[13,6,10,0,9,9,11,12,10,12,15,11,9,10,7],
[15,8,17,17,0,10,16,13,16,18,17,15,15,15,11],
[18,13,16,17,16,0,15,15,12,15,19,17,15,18,16],
[12,9,11,15,10,11,0,11,14,15,15,13,12,14,13],
[18,9,11,14,13,11,15,0,10,14,16,15,13,13,11],
[16,9,15,16,10,14,12,16,0,18,16,18,10,15,15],
[14,7,12,14,8,11,11,12,8,0,16,11,11,15,9],
[12,10,10,11,9,7,11,10,10,10,0,9,8,14,8],
[13,9,14,15,11,9,13,11,8,15,17,0,10,14,12],
[18,13,14,17,11,11,14,13,16,15,18,16,0,16,13],
[13,10,12,16,11,8,12,13,11,11,12,12,10,0,8],
[15,14,16,19,15,10,13,15,11,17,18,14,13,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 123, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,13,13,10,15,12,16,10,12,16,12,11,11,15],
[12,0,7,8,10,11,5,10,9,10,7,8,8,5,14],
[13,19,0,16,15,13,12,16,13,14,19,14,6,8,19],
[13,18,10,0,14,12,11,16,12,9,18,11,7,11,21],
[16,16,11,12,0,12,15,15,11,12,16,12,14,10,15],
[11,15,13,14,14,0,12,13,11,11,17,12,14,13,15],
[14,21,14,15,11,14,0,18,12,12,15,12,9,7,17],
[10,16,10,10,11,13,8,0,12,8,13,11,11,13,12],
[16,17,13,14,15,15,14,14,0,17,18,10,12,11,21],
[14,16,12,17,14,15,14,18,9,0,15,11,12,9,18],
[10,19,7,8,10,9,11,13,8,11,0,10,7,6,10],
[14,18,12,15,14,14,14,15,16,15,16,0,11,7,16],
[15,18,20,19,12,12,17,15,14,14,19,15,0,13,20],
[15,21,18,15,16,13,19,13,15,17,20,19,13,0,21],
[11,12,7,5,11,11,9,14,5,8,16,10,6,5,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 124, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,14,12,11,10,11,11,9,9,16,19,14,9,14],
[13,0,15,9,9,11,8,8,16,8,9,15,13,8,13],
[12,11,0,9,7,9,9,9,9,11,12,13,13,10,14],
[14,17,17,0,14,14,13,17,15,11,15,18,12,13,14],
[15,17,19,12,0,12,9,17,16,16,15,14,17,16,19],
[16,15,17,12,14,0,11,9,13,14,13,16,14,11,13],
[15,18,17,13,17,15,0,15,15,14,16,17,17,18,19],
[15,18,17,9,9,17,11,0,14,12,15,16,10,16,17],
[17,10,17,11,10,13,11,12,0,14,16,16,12,13,17],
[17,18,15,15,10,12,12,14,12,0,15,17,13,16,13],
[10,17,14,11,11,13,10,11,10,11,0,15,14,12,17],
[7,11,13,8,12,10,9,10,10,9,11,0,9,11,13],
[12,13,13,14,9,12,9,16,14,13,12,17,0,12,13],
[17,18,16,13,10,15,8,10,13,10,14,15,14,0,16],
[12,13,12,12,7,13,7,9,9,13,9,13,13,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 125, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,13,17,12,17,15,21,15,20,13,10,17,16,17],
[10,0,16,16,14,11,9,11,7,16,11,11,15,12,13],
[13,10,0,10,2,10,11,8,8,16,7,10,12,6,14],
[9,10,16,0,10,12,13,9,7,13,9,12,13,10,17],
[14,12,24,16,0,19,14,11,7,22,12,16,15,16,19],
[9,15,16,14,7,0,14,5,7,18,5,13,12,12,15],
[11,17,15,13,12,12,0,13,9,15,10,7,13,13,18],
[5,15,18,17,15,21,13,0,9,20,10,11,15,14,14],
[11,19,18,19,19,19,17,17,0,23,15,13,18,18,20],
[6,10,10,13,4,8,11,6,3,0,3,10,7,8,16],
[13,15,19,17,14,21,16,16,11,23,0,15,17,15,17],
[16,15,16,14,10,13,19,15,13,16,11,0,17,17,20],
[9,11,14,13,11,14,13,11,8,19,9,9,0,12,14],
[10,14,20,16,10,14,13,12,8,18,11,9,14,0,20],
[9,13,12,9,7,11,8,12,6,10,9,6,12,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 126, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,14,14,14,14,0,11,0,26,23,0,14,14,11],
[15,0,26,26,26,14,15,23,3,26,26,12,26,15,11],
[12,0,0,26,15,11,0,11,0,15,12,0,11,3,11],
[12,0,0,0,12,0,0,0,0,12,12,0,0,3,11],
[12,0,11,14,0,11,0,11,0,15,12,0,11,3,11],
[12,12,15,26,15,0,12,12,0,15,12,12,23,15,11],
[26,11,26,26,26,14,0,11,14,26,26,23,26,26,11],
[15,3,15,26,15,14,15,0,3,15,15,15,26,15,14],
[26,23,26,26,26,26,12,23,0,26,26,23,26,26,11],
[0,0,11,14,11,11,0,11,0,0,0,0,11,3,11],
[3,0,14,14,14,14,0,11,0,26,0,0,14,3,11],
[26,14,26,26,26,14,3,11,3,26,26,0,26,14,11],
[12,0,15,26,15,3,0,0,0,15,12,0,0,3,11],
[12,11,23,23,23,11,0,11,0,23,23,12,23,0,11],
[15,15,15,15,15,15,15,12,15,15,15,15,15,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 127, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,7,15,10,10,8,11,6,8,10,10,11,11,6],
[20,0,13,13,12,16,14,15,10,13,16,15,15,11,12],
[19,13,0,13,18,17,15,16,11,15,13,17,18,12,16],
[11,13,13,0,8,13,10,9,5,11,12,10,14,12,6],
[16,14,8,18,0,11,19,15,9,15,12,15,17,12,15],
[16,10,9,13,15,0,14,12,8,11,14,12,12,12,11],
[18,12,11,16,7,12,0,14,8,12,15,11,12,12,12],
[15,11,10,17,11,14,12,0,12,15,12,10,16,10,10],
[20,16,15,21,17,18,18,14,0,17,17,13,17,17,15],
[18,13,11,15,11,15,14,11,9,0,11,9,17,11,7],
[16,10,13,14,14,12,11,14,9,15,0,14,17,15,9],
[16,11,9,16,11,14,15,16,13,17,12,0,16,12,12],
[15,11,8,12,9,14,14,10,9,9,9,10,0,8,7],
[15,15,14,14,14,14,14,16,9,15,11,14,18,0,9],
[20,14,10,20,11,15,14,16,11,19,17,14,19,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 128, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,12,10,14,12,14,19,13,14,16,12,12,11,14],
[15,0,13,10,14,16,16,25,16,18,14,16,10,11,15],
[14,13,0,11,12,12,21,16,15,17,12,12,14,10,13],
[16,16,15,0,20,16,20,19,19,19,19,17,16,13,18],
[12,12,14,6,0,15,18,14,15,16,16,16,9,12,8],
[14,10,14,10,11,0,12,17,11,15,12,13,9,7,8],
[12,10,5,6,8,14,0,14,10,10,8,10,6,8,4],
[7,1,10,7,12,9,12,0,11,14,13,10,9,11,9],
[13,10,11,7,11,15,16,15,0,12,11,10,11,7,11],
[12,8,9,7,10,11,16,12,14,0,14,10,8,13,10],
[10,12,14,7,10,14,18,13,15,12,0,14,6,6,13],
[14,10,14,9,10,13,16,16,16,16,12,0,9,12,15],
[14,16,12,10,17,17,20,17,15,18,20,17,0,11,15],
[15,15,16,13,14,19,18,15,19,13,20,14,15,0,14],
[12,11,13,8,18,18,22,17,15,16,13,11,11,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 129, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,14,12,13,17,14,13,13,11,11,7,15,11,12],
[12,0,17,15,14,17,18,11,16,8,14,11,21,14,10],
[12,9,0,15,15,18,14,12,13,12,16,10,15,12,13],
[14,11,11,0,13,15,11,4,14,7,7,12,14,16,15],
[13,12,11,13,0,11,15,6,13,8,13,10,13,13,7],
[9,9,8,11,15,0,11,10,12,5,10,10,16,12,12],
[12,8,12,15,11,15,0,6,14,6,15,8,19,11,8],
[13,15,14,22,20,16,20,0,17,8,13,14,19,15,13],
[13,10,13,12,13,14,12,9,0,14,12,11,9,10,6],
[15,18,14,19,18,21,20,18,12,0,13,11,20,15,10],
[15,12,10,19,13,16,11,13,14,13,0,16,18,18,13],
[19,15,16,14,16,16,18,12,15,15,10,0,20,11,16],
[11,5,11,12,13,10,7,7,17,6,8,6,0,10,5],
[15,12,14,10,13,14,15,11,16,11,8,15,16,0,14],
[14,16,13,11,19,14,18,13,20,16,13,10,21,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 130, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,11,15,14,14,14,14,14,11,14,17,12,14,13],
[10,0,8,11,10,15,14,13,10,9,13,14,11,11,12],
[15,18,0,13,15,17,17,17,15,14,18,18,11,15,15],
[11,15,13,0,11,12,13,16,10,12,16,15,12,13,12],
[12,16,11,15,0,17,11,13,13,14,15,13,13,10,13],
[12,11,9,14,9,0,15,15,15,13,15,19,11,12,16],
[12,12,9,13,15,11,0,16,15,12,15,13,9,12,15],
[12,13,9,10,13,11,10,0,12,10,11,14,10,11,9],
[12,16,11,16,13,11,11,14,0,11,17,14,14,10,12],
[15,17,12,14,12,13,14,16,15,0,14,17,12,16,14],
[12,13,8,10,11,11,11,15,9,12,0,13,11,11,13],
[9,12,8,11,13,7,13,12,12,9,13,0,12,11,12],
[14,15,15,14,13,15,17,16,12,14,15,14,0,11,15],
[12,15,11,13,16,14,14,15,16,10,15,15,15,0,14],
[13,14,11,14,13,10,11,17,14,12,13,14,11,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 131, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,19,10,15,11,19,9,17,13,10,13,13,16,13],
[16,0,10,14,6,16,16,12,11,10,10,16,13,17,17],
[7,16,0,16,15,13,16,15,23,16,16,20,13,16,7],
[16,12,10,0,18,22,22,18,11,10,10,22,13,23,17],
[11,20,11,8,0,11,14,7,11,5,5,11,13,17,11],
[15,10,13,4,15,0,13,15,11,7,4,13,10,16,13],
[7,10,10,4,12,13,0,12,11,4,4,11,13,13,7],
[17,14,11,8,19,11,14,0,11,5,5,11,11,17,17],
[9,15,3,15,15,15,15,15,0,3,4,19,9,15,7],
[13,16,10,16,21,19,22,21,23,0,17,26,13,22,13],
[16,16,10,16,21,22,22,21,22,9,0,20,16,22,13],
[13,10,6,4,15,13,15,15,7,0,6,0,7,13,13],
[13,13,13,13,13,16,13,15,17,13,10,19,0,20,11],
[10,9,10,3,9,10,13,9,11,4,4,13,6,0,17],
[13,9,19,9,15,13,19,9,19,13,13,13,15,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 132, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,18,12,16,14,14,16,14,16,14,13,15,14,11],
[12,0,15,10,14,12,12,17,10,13,10,14,13,10,14],
[8,11,0,9,12,9,7,14,8,16,10,9,10,11,9],
[14,16,17,0,17,15,14,15,12,17,10,13,15,11,17],
[10,12,14,9,0,13,14,13,10,13,11,12,11,10,15],
[12,14,17,11,13,0,11,15,12,16,11,12,13,14,14],
[12,14,19,12,12,15,0,16,12,16,14,13,15,12,15],
[10,9,12,11,13,11,10,0,11,12,11,11,11,11,12],
[12,16,18,14,16,14,14,15,0,19,12,14,14,12,14],
[10,13,10,9,13,10,10,14,7,0,9,10,10,11,12],
[12,16,16,16,15,15,12,15,14,17,0,13,13,14,15],
[13,12,17,13,14,14,13,15,12,16,13,0,16,12,13],
[11,13,16,11,15,13,11,15,12,16,13,10,0,10,12],
[12,16,15,15,16,12,14,15,14,15,12,14,16,0,16],
[15,12,17,9,11,12,11,14,12,14,11,13,14,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 133, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,12,15,12,18,12,16,16,18,15,15,18,18,14],
[11,0,12,8,12,13,11,13,10,13,13,13,17,11,10],
[14,14,0,16,13,18,10,19,18,16,16,17,21,17,15],
[11,18,10,0,15,18,14,15,14,14,10,12,19,16,12],
[14,14,13,11,0,20,15,19,18,15,16,22,20,20,16],
[8,13,8,8,6,0,4,12,11,17,11,13,18,13,10],
[14,15,16,12,11,22,0,19,16,17,15,17,24,20,11],
[10,13,7,11,7,14,7,0,9,14,12,16,17,14,13],
[10,16,8,12,8,15,10,17,0,16,14,16,18,16,15],
[8,13,10,12,11,9,9,12,10,0,14,16,15,11,13],
[11,13,10,16,10,15,11,14,12,12,0,13,15,17,15],
[11,13,9,14,4,13,9,10,10,10,13,0,13,15,10],
[8,9,5,7,6,8,2,9,8,11,11,13,0,12,11],
[8,15,9,10,6,13,6,12,10,15,9,11,14,0,8],
[12,16,11,14,10,16,15,13,11,13,11,16,15,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 134, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,18,16,14,15,16,9,20,12,16,13,16,16,13],
[9,0,13,14,10,7,13,8,11,10,13,10,13,10,12],
[8,13,0,11,12,12,12,10,11,11,17,11,9,13,10],
[10,12,15,0,12,12,13,10,14,13,13,13,10,11,13],
[12,16,14,14,0,11,14,11,14,14,12,14,15,14,14],
[11,19,14,14,15,0,13,11,14,16,21,16,15,17,15],
[10,13,14,13,12,13,0,8,13,10,14,9,13,15,10],
[17,18,16,16,15,15,18,0,19,13,16,14,17,15,16],
[6,15,15,12,12,12,13,7,0,12,14,14,15,14,9],
[14,16,15,13,12,10,16,13,14,0,13,16,14,10,15],
[10,13,9,13,14,5,12,10,12,13,0,11,10,9,11],
[13,16,15,13,12,10,17,12,12,10,15,0,11,14,11],
[10,13,17,16,11,11,13,9,11,12,16,15,0,12,12],
[10,16,13,15,12,9,11,11,12,16,17,12,14,0,15],
[13,14,16,13,12,11,16,10,17,11,15,15,14,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 135, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,16,20,14,14,19,13,17,14,10,17,17,14,18],
[8,0,9,14,9,12,13,10,6,11,5,12,13,7,14],
[10,17,0,14,13,16,13,10,11,13,11,10,12,11,18],
[6,12,12,0,10,14,14,11,11,13,9,14,12,12,13],
[12,17,13,16,0,23,22,17,10,18,13,14,16,10,20],
[12,14,10,12,3,0,18,15,8,13,14,13,14,11,15],
[7,13,13,12,4,8,0,12,12,12,6,15,16,10,18],
[13,16,16,15,9,11,14,0,12,10,16,18,19,15,15],
[9,20,15,15,16,18,14,14,0,15,14,18,17,17,14],
[12,15,13,13,8,13,14,16,11,0,12,10,14,7,16],
[16,21,15,17,13,12,20,10,12,14,0,16,15,13,18],
[9,14,16,12,12,13,11,8,8,16,10,0,12,9,11],
[9,13,14,14,10,12,10,7,9,12,11,14,0,11,10],
[12,19,15,14,16,15,16,11,9,19,13,17,15,0,19],
[8,12,8,13,6,11,8,11,12,10,8,15,16,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 136, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,12,13,17,12,12,11,11,11,11,14,13,13,12],
[13,0,14,11,15,14,13,15,14,11,16,15,13,14,15],
[14,12,0,10,16,13,10,10,6,10,12,10,14,9,10],
[13,15,16,0,15,12,16,14,12,16,12,14,15,10,12],
[9,11,10,11,0,14,12,9,9,10,12,14,9,11,10],
[14,12,13,14,12,0,14,8,12,14,11,11,13,11,9],
[14,13,16,10,14,12,0,14,16,17,13,10,12,15,15],
[15,11,16,12,17,18,12,0,16,15,13,11,14,10,12],
[15,12,20,14,17,14,10,10,0,12,16,11,13,10,17],
[15,15,16,10,16,12,9,11,14,0,15,9,14,12,15],
[15,10,14,14,14,15,13,13,10,11,0,11,13,12,15],
[12,11,16,12,12,15,16,15,15,17,15,0,11,15,15],
[13,13,12,11,17,13,14,12,13,12,13,15,0,13,14],
[13,12,17,16,15,15,11,16,16,14,14,11,13,0,16],
[14,11,16,14,16,17,11,14,9,11,11,11,12,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 137, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,10,14,10,9,11,19,10,8,14,13,11,15,10],
[20,0,6,21,19,11,12,20,18,12,16,12,12,23,11],
[16,20,0,21,20,16,21,21,17,15,17,20,13,18,16],
[12,5,5,0,12,8,5,8,5,3,9,2,17,14,0],
[16,7,6,14,0,7,7,10,6,4,10,8,15,15,1],
[17,15,10,18,19,0,19,18,19,12,20,16,15,19,14],
[15,14,5,21,19,7,0,21,18,8,17,16,13,18,16],
[7,6,5,18,16,8,5,0,5,0,7,7,15,10,14],
[16,8,9,21,20,7,8,21,0,15,17,12,15,17,11],
[18,14,11,23,22,14,18,26,11,0,19,22,16,15,22],
[12,10,9,17,16,6,9,19,9,7,0,16,10,14,14],
[13,14,6,24,18,10,10,19,14,4,10,0,18,19,10],
[15,14,13,9,11,11,13,11,11,10,16,8,0,15,7],
[11,3,8,12,11,7,8,16,9,11,12,7,11,0,7],
[16,15,10,26,25,12,10,12,15,4,12,16,19,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 138, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,14,10,14,13,17,12,19,10,3,0,12,14,3],
[16,0,26,0,13,22,16,12,19,19,3,9,12,26,12],
[12,0,0,0,9,22,16,12,19,19,3,9,12,22,12],
[16,26,26,0,26,22,16,12,19,22,3,12,12,26,16],
[12,13,17,0,0,22,16,12,19,19,3,9,12,26,3],
[13,4,4,4,4,0,13,16,13,4,7,13,16,23,7],
[9,10,10,10,10,13,0,12,19,10,3,0,12,19,3],
[14,14,14,14,14,10,14,0,10,10,17,14,13,14,14],
[7,7,7,7,7,13,7,16,0,17,7,7,16,17,7],
[16,7,7,4,7,22,16,16,9,0,7,13,16,26,7],
[23,23,23,23,23,19,23,9,19,19,0,9,12,23,13],
[26,17,17,14,17,13,26,12,19,13,17,0,12,26,17],
[14,14,14,14,14,10,14,13,10,10,14,14,0,14,14],
[12,0,4,0,0,3,7,12,9,0,3,0,12,0,3],
[23,14,14,10,23,19,23,12,19,19,13,9,12,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 139, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,9,5,11,6,9,10,15,10,11,9,10,16,8],
[12,0,5,10,12,7,10,10,13,11,14,10,8,11,11],
[17,21,0,15,10,15,16,15,16,18,16,16,18,19,15],
[21,16,11,0,12,13,13,16,16,11,16,15,11,19,16],
[15,14,16,14,0,13,8,7,13,13,13,12,13,15,14],
[20,19,11,13,13,0,14,15,18,18,19,15,11,19,17],
[17,16,10,13,18,12,0,12,15,9,12,12,12,14,14],
[16,16,11,10,19,11,14,0,16,13,15,13,10,13,15],
[11,13,10,10,13,8,11,10,0,12,8,9,5,15,12],
[16,15,8,15,13,8,17,13,14,0,16,14,8,17,12],
[15,12,10,10,13,7,14,11,18,10,0,7,9,21,15],
[17,16,10,11,14,11,14,13,17,12,19,0,9,18,12],
[16,18,8,15,13,15,14,16,21,18,17,17,0,16,15],
[10,15,7,7,11,7,12,13,11,9,5,8,10,0,12],
[18,15,11,10,12,9,12,11,14,14,11,14,11,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 140, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,11,17,9,11,13,17,20,11,16,11,12,10,18],
[13,0,8,19,11,13,16,11,18,10,11,15,13,10,16],
[15,18,0,19,14,14,16,14,20,12,11,15,11,10,17],
[9,7,7,0,1,7,8,9,16,8,7,9,8,8,11],
[17,15,12,25,0,14,17,14,20,16,12,14,14,13,17],
[15,13,12,19,12,0,19,15,19,11,17,19,11,15,18],
[13,10,10,18,9,7,0,12,18,10,13,14,9,8,10],
[9,15,12,17,12,11,14,0,16,13,9,11,12,10,17],
[6,8,6,10,6,7,8,10,0,6,8,7,8,6,12],
[15,16,14,18,10,15,16,13,20,0,14,16,10,15,16],
[10,15,15,19,14,9,13,17,18,12,0,13,12,16,16],
[15,11,11,17,12,7,12,15,19,10,13,0,9,9,14],
[14,13,15,18,12,15,17,14,18,16,14,17,0,11,18],
[16,16,16,18,13,11,18,16,20,11,10,17,15,0,14],
[8,10,9,15,9,8,16,9,14,10,10,12,8,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 141, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,8,14,15,9,16,25,17,16,4,21,14,15,19],
[1,0,8,3,1,10,10,9,12,9,4,4,9,10,8],
[18,18,0,7,13,12,13,18,12,18,18,18,18,13,13],
[12,23,19,0,18,19,7,17,12,18,13,24,18,18,18],
[11,25,13,8,0,14,9,20,12,20,8,14,8,19,8],
[17,16,14,7,12,0,14,16,17,14,13,15,18,20,11],
[10,16,13,19,17,12,0,17,16,14,12,17,12,17,17],
[1,17,8,9,6,10,9,0,11,3,2,9,14,14,13],
[9,14,14,14,14,9,10,15,0,15,9,14,14,14,14],
[10,17,8,8,6,12,12,23,11,0,12,11,12,13,11],
[22,22,8,13,18,13,14,24,17,14,0,20,25,14,19],
[5,22,8,2,12,11,9,17,12,15,6,0,7,12,6],
[12,17,8,8,18,8,14,12,12,14,1,19,0,14,9],
[11,16,13,8,7,6,9,12,12,13,12,14,12,0,6],
[7,18,13,8,18,15,9,13,12,15,7,20,17,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 142, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,9,7,10,17,12,13,22,19,14,14,18,22,5],
[11,0,12,11,4,17,14,10,18,15,13,13,13,17,12],
[17,14,0,6,12,18,15,15,22,20,14,12,16,19,12],
[19,15,20,0,12,25,20,16,24,22,17,20,17,21,18],
[16,22,14,14,0,21,13,15,18,22,13,17,17,22,16],
[9,9,8,1,5,0,9,5,10,8,7,10,4,12,7],
[14,12,11,6,13,17,0,13,19,20,9,15,16,21,11],
[13,16,11,10,11,21,13,0,20,19,10,15,16,17,11],
[4,8,4,2,8,16,7,6,0,13,5,9,6,13,3],
[7,11,6,4,4,18,6,7,13,0,7,13,7,12,6],
[12,13,12,9,13,19,17,16,21,19,0,13,19,20,10],
[12,13,14,6,9,16,11,11,17,13,13,0,9,16,9],
[8,13,10,9,9,22,10,10,20,19,7,17,0,20,10],
[4,9,7,5,4,14,5,9,13,14,6,10,6,0,5],
[21,14,14,8,10,19,15,15,23,20,16,17,16,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 143, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,11,12,9,15,10,15,11,15,12,9,15,7,18],
[10,0,12,15,10,14,15,19,10,14,14,12,13,11,13],
[15,14,0,11,16,10,13,14,14,14,15,11,14,12,16],
[14,11,15,0,10,16,5,16,17,11,14,7,17,9,14],
[17,16,10,16,0,16,16,16,17,17,12,13,17,16,22],
[11,12,16,10,10,0,11,16,13,14,12,13,15,13,12],
[16,11,13,21,10,15,0,20,17,20,15,13,18,13,20],
[11,7,12,10,10,10,6,0,12,9,13,13,13,10,14],
[15,16,12,9,9,13,9,14,0,11,15,12,12,9,13],
[11,12,12,15,9,12,6,17,15,0,14,9,18,9,17],
[14,12,11,12,14,14,11,13,11,12,0,12,18,12,15],
[17,14,15,19,13,13,13,13,14,17,14,0,16,16,20],
[11,13,12,9,9,11,8,13,14,8,8,10,0,10,9],
[19,15,14,17,10,13,13,16,17,17,14,10,16,0,14],
[8,13,10,12,4,14,6,12,13,9,11,6,17,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 144, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,17,17,16,15,16,9,11,14,10,21,12,20,15],
[3,0,10,8,12,13,12,10,5,7,8,15,8,9,7],
[9,16,0,8,12,11,10,14,6,7,15,14,12,8,14],
[9,18,18,0,11,13,23,16,8,11,14,21,14,16,16],
[10,14,14,15,0,15,17,12,10,12,10,18,15,14,12],
[11,13,15,13,11,0,16,8,8,6,7,14,13,14,13],
[10,14,16,3,9,10,0,13,8,7,12,17,11,15,16],
[17,16,12,10,14,18,13,0,14,10,10,19,13,16,17],
[15,21,20,18,16,18,18,12,0,15,15,21,17,13,15],
[12,19,19,15,14,20,19,16,11,0,14,17,11,20,17],
[16,18,11,12,16,19,14,16,11,12,0,18,18,17,14],
[5,11,12,5,8,12,9,7,5,9,8,0,7,10,9],
[14,18,14,12,11,13,15,13,9,15,8,19,0,13,13],
[6,17,18,10,12,12,11,10,13,6,9,16,13,0,13],
[11,19,12,10,14,13,10,9,11,9,12,17,13,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 145, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,15,13,18,20,10,17,17,9,17,16,16,15,15],
[7,0,15,7,14,14,7,10,12,11,7,8,11,16,10],
[11,11,0,9,14,19,11,11,15,13,11,6,14,13,14],
[13,19,17,0,19,19,14,16,16,16,21,15,23,20,20],
[8,12,12,7,0,16,13,12,15,6,13,11,16,14,12],
[6,12,7,7,10,0,4,11,14,10,10,10,5,10,10],
[16,19,15,12,13,22,0,16,21,14,17,14,15,16,17],
[9,16,15,10,14,15,10,0,15,11,13,14,11,12,13],
[9,14,11,10,11,12,5,11,0,7,11,13,10,7,12],
[17,15,13,10,20,16,12,15,19,0,16,12,14,14,16],
[9,19,15,5,13,16,9,13,15,10,0,13,12,15,7],
[10,18,20,11,15,16,12,12,13,14,13,0,15,16,16],
[10,15,12,3,10,21,11,15,16,12,14,11,0,11,10],
[11,10,13,6,12,16,10,14,19,12,11,10,15,0,12],
[11,16,12,6,14,16,9,13,14,10,19,10,16,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 146, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,13,14,6,5,6,16,9,9,8,9,8,23,18],
[20,0,22,19,13,5,9,18,18,19,26,19,15,23,18],
[13,4,0,17,6,8,4,4,16,11,11,17,5,16,18],
[12,7,9,0,7,7,7,12,8,17,12,4,2,23,17],
[20,13,20,19,0,10,3,13,18,18,14,14,13,25,18],
[21,21,18,19,16,0,11,13,19,26,21,14,11,25,18],
[20,17,22,19,23,15,0,13,18,19,26,19,10,25,18],
[10,8,22,14,13,13,13,0,16,18,16,17,10,23,18],
[17,8,10,18,8,7,8,10,0,18,10,21,2,20,20],
[17,7,15,9,8,0,7,8,8,0,10,12,2,20,13],
[18,0,15,14,12,5,0,10,16,16,0,12,8,23,18],
[17,7,9,22,12,12,7,9,5,14,14,0,2,20,25],
[18,11,21,24,13,15,16,16,24,24,18,24,0,23,25],
[3,3,10,3,1,1,1,3,6,6,3,6,3,0,5],
[8,8,8,9,8,8,8,8,6,13,8,1,1,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 147, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,19,9,11,8,26,11,15,10,13,15,16,8,17],
[13,0,19,14,18,8,15,19,13,16,21,13,23,13,14],
[7,7,0,5,10,7,7,9,15,7,13,8,10,5,5],
[17,12,21,0,20,17,17,19,15,18,15,15,25,15,21],
[15,8,16,6,0,10,15,19,15,10,13,15,23,5,14],
[18,18,19,9,16,0,18,19,15,15,16,15,23,8,17],
[0,11,19,9,11,8,0,11,13,8,13,13,16,3,14],
[15,7,17,7,7,7,15,0,15,14,15,7,15,5,13],
[11,13,11,11,11,11,13,11,0,13,24,8,16,11,16],
[16,10,19,8,16,11,18,12,13,0,16,9,16,8,16],
[13,5,13,11,13,10,13,11,2,10,0,2,13,11,11],
[11,13,18,11,11,11,13,19,18,17,24,0,16,11,11],
[10,3,16,1,3,3,10,11,10,10,13,10,0,0,9],
[18,13,21,11,21,18,23,21,15,18,15,15,26,0,16],
[9,12,21,5,12,9,12,13,10,10,15,15,17,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 148, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,4,4,4,4,4,4,4,11,8,11,4,10,9,4],
[22,0,22,16,10,9,6,6,11,17,7,9,6,15,11],
[22,4,0,4,14,9,6,6,11,10,11,9,6,15,4],
[22,10,22,0,10,15,6,10,17,17,17,9,6,11,10],
[22,16,12,16,0,5,13,7,11,11,7,9,6,22,7],
[22,17,17,11,21,0,13,13,17,17,17,16,13,22,17],
[22,20,20,20,13,13,0,9,20,16,16,13,15,22,20],
[22,20,20,16,19,13,17,0,15,22,16,13,6,22,20],
[15,15,15,9,15,9,6,11,0,15,15,9,11,11,11],
[18,9,16,9,15,9,10,4,11,0,7,9,6,15,4],
[15,19,15,9,19,9,10,10,11,19,0,13,6,15,15],
[22,17,17,17,17,10,13,13,17,17,13,0,13,22,17],
[16,20,20,20,20,13,11,20,15,20,20,13,0,16,20],
[17,11,11,15,4,4,4,4,15,11,11,4,10,0,11],
[22,15,22,16,19,9,6,6,15,22,11,9,6,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 149, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,12,14,13,12,14,12,11,13,13,17,13,12,11],
[15,0,12,15,15,9,14,14,8,15,15,19,12,14,13],
[14,14,0,16,14,10,15,14,9,13,17,18,12,14,12],
[12,11,10,0,14,11,12,14,10,10,12,13,12,11,12],
[13,11,12,12,0,11,15,12,8,11,14,12,11,12,11],
[14,17,16,15,15,0,14,16,14,18,17,17,17,15,12],
[12,12,11,14,11,12,0,13,10,8,14,10,14,11,10],
[14,12,12,12,14,10,13,0,11,11,14,12,13,12,12],
[15,18,17,16,18,12,16,15,0,19,19,18,12,15,16],
[13,11,13,16,15,8,18,15,7,0,15,16,14,15,12],
[13,11,9,14,12,9,12,12,7,11,0,11,10,9,9],
[9,7,8,13,14,9,16,14,8,10,15,0,13,11,9],
[13,14,14,14,15,9,12,13,14,12,16,13,0,13,13],
[14,12,12,15,14,11,15,14,11,11,17,15,13,0,10],
[15,13,14,14,15,14,16,14,10,14,17,17,13,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 150, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,11,13,9,11,10,11,9,7,15,13,8,7,11],
[15,0,11,18,12,19,9,13,15,8,16,12,7,9,14],
[15,15,0,14,12,17,13,11,14,10,12,13,8,13,13],
[13,8,12,0,7,13,6,12,8,7,9,13,9,9,8],
[17,14,14,19,0,18,9,13,11,11,15,16,8,10,13],
[15,7,9,13,8,0,9,12,9,8,13,10,7,6,10],
[16,17,13,20,17,17,0,16,10,13,15,16,13,16,11],
[15,13,15,14,13,14,10,0,7,10,15,13,14,12,15],
[17,11,12,18,15,17,16,19,0,13,15,15,11,13,16],
[19,18,16,19,15,18,13,16,13,0,17,15,11,13,17],
[11,10,14,17,11,13,11,11,11,9,0,12,11,10,15],
[13,14,13,13,10,16,10,13,11,11,14,0,8,13,10],
[18,19,18,17,18,19,13,12,15,15,15,18,0,15,19],
[19,17,13,17,16,20,10,14,13,13,16,13,11,0,16],
[15,12,13,18,13,16,15,11,10,9,11,16,7,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 151, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,8,13,13,13,10,11,11,12,13,10,12,12,8],
[16,0,14,17,14,16,17,13,14,15,19,15,16,10,16],
[18,12,0,14,13,14,15,16,13,16,19,13,14,13,12],
[13,9,12,0,10,10,11,8,12,10,15,7,9,9,10],
[13,12,13,16,0,11,16,11,11,15,17,12,15,13,16],
[13,10,12,16,15,0,13,14,8,10,20,14,12,14,12],
[16,9,11,15,10,13,0,14,9,17,15,11,11,11,12],
[15,13,10,18,15,12,12,0,10,11,15,14,13,12,9],
[15,12,13,14,15,18,17,16,0,18,18,16,13,14,13],
[14,11,10,16,11,16,9,15,8,0,13,8,15,9,8],
[13,7,7,11,9,6,11,11,8,13,0,8,7,11,10],
[16,11,13,19,14,12,15,12,10,18,18,0,11,14,13],
[14,10,12,17,11,14,15,13,13,11,19,15,0,14,10],
[14,16,13,17,13,12,15,14,12,17,15,12,12,0,12],
[18,10,14,16,10,14,14,17,13,18,16,13,16,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 152, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,10,17,11,15,13,16,17,15,13,9,12,14,10],
[15,0,12,20,9,14,16,14,15,17,13,12,14,14,18],
[16,14,0,17,13,18,14,19,17,16,12,13,15,17,18],
[9,6,9,0,5,9,10,9,12,13,7,2,10,7,9],
[15,17,13,21,0,18,15,17,17,18,14,15,14,19,17],
[11,12,8,17,8,0,11,15,12,12,7,6,10,15,15],
[13,10,12,16,11,15,0,15,16,15,11,8,14,15,11],
[10,12,7,17,9,11,11,0,10,16,8,7,10,16,16],
[9,11,9,14,9,14,10,16,0,14,9,9,12,16,15],
[11,9,10,13,8,14,11,10,12,0,9,5,10,16,14],
[13,13,14,19,12,19,15,18,17,17,0,13,15,18,17],
[17,14,13,24,11,20,18,19,17,21,13,0,16,17,15],
[14,12,11,16,12,16,12,16,14,16,11,10,0,15,15],
[12,12,9,19,7,11,11,10,10,10,8,9,11,0,13],
[16,8,8,17,9,11,15,10,11,12,9,11,11,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 153, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,13,26,17,13,16,13,17,13,19,17,20,17,20],
[6,0,13,9,13,13,19,13,0,13,19,13,13,13,16],
[13,13,0,13,20,26,22,20,4,26,23,13,26,23,20],
[0,17,13,0,17,13,13,13,0,13,19,13,17,13,16],
[9,13,6,9,0,19,9,6,6,6,6,9,9,6,3],
[13,13,0,13,7,0,9,7,4,7,6,7,7,4,7],
[10,7,4,13,17,17,0,4,4,4,10,4,17,4,7],
[13,13,6,13,20,19,22,0,10,26,19,13,26,23,7],
[9,26,22,26,20,22,22,16,0,22,22,22,26,26,16],
[13,13,0,13,20,19,22,0,4,0,6,7,20,4,7],
[7,7,3,7,20,20,16,7,4,20,0,7,20,7,7],
[9,13,13,13,17,19,22,13,4,19,19,0,26,23,20],
[6,13,0,9,17,19,9,0,0,6,6,0,0,6,3],
[9,13,3,13,20,22,22,3,0,22,19,3,20,0,3],
[6,10,6,10,23,19,19,19,10,19,19,6,23,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 154, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,13,16,16,19,13,12,12,14,11,15,15,15,10],
[12,0,12,13,19,14,13,13,15,16,16,19,10,15,13],
[13,14,0,15,16,19,14,9,12,18,12,17,11,13,12],
[10,13,11,0,13,16,13,12,11,14,14,17,10,15,11],
[10,7,10,13,0,13,12,12,12,13,11,13,8,11,12],
[7,12,7,10,13,0,10,10,11,9,10,11,12,9,9],
[13,13,12,13,14,16,0,14,15,14,15,17,10,14,13],
[14,13,17,14,14,16,12,0,15,13,12,15,15,16,10],
[14,11,14,15,14,15,11,11,0,13,10,15,12,17,11],
[12,10,8,12,13,17,12,13,13,0,13,13,12,11,10],
[15,10,14,12,15,16,11,14,16,13,0,16,12,17,15],
[11,7,9,9,13,15,9,11,11,13,10,0,8,16,9],
[11,16,15,16,18,14,16,11,14,14,14,18,0,15,10],
[11,11,13,11,15,17,12,10,9,15,9,10,11,0,12],
[16,13,14,15,14,17,13,16,15,16,11,17,16,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 155, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,16,12,14,15,11,12,13,15,9,15,15,12,12],
[15,0,16,14,13,15,14,14,13,16,11,18,13,10,11],
[10,10,0,13,11,7,7,9,6,13,8,15,15,10,9],
[14,12,13,0,14,11,13,15,10,20,13,12,18,14,11],
[12,13,15,12,0,10,10,16,9,19,13,16,16,14,10],
[11,11,19,15,16,0,15,12,10,16,9,16,17,10,15],
[15,12,19,13,16,11,0,16,9,17,14,16,19,14,14],
[14,12,17,11,10,14,10,0,8,11,12,14,16,14,12],
[13,13,20,16,17,16,17,18,0,22,14,17,21,14,14],
[11,10,13,6,7,10,9,15,4,0,12,10,13,8,11],
[17,15,18,13,13,17,12,14,12,14,0,13,16,14,12],
[11,8,11,14,10,10,10,12,9,16,13,0,16,9,9],
[11,13,11,8,10,9,7,10,5,13,10,10,0,9,10],
[14,16,16,12,12,16,12,12,12,18,12,17,17,0,16],
[14,15,17,15,16,11,12,14,12,15,14,17,16,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 156, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,9,14,11,13,13,15,16,10,13,11,11,15,13],
[16,0,17,14,13,15,15,24,18,17,20,18,14,17,10],
[17,9,0,16,10,10,14,22,12,16,14,17,7,11,12],
[12,12,10,0,13,12,10,15,10,14,15,11,10,17,12],
[15,13,16,13,0,12,12,20,15,14,15,8,13,14,5],
[13,11,16,14,14,0,13,20,17,13,16,17,13,13,12],
[13,11,12,16,14,13,0,17,16,9,17,13,9,17,12],
[11,2,4,11,6,6,9,0,10,4,7,13,6,11,8],
[10,8,14,16,11,9,10,16,0,10,11,8,9,15,10],
[16,9,10,12,12,13,17,22,16,0,17,16,12,19,9],
[13,6,12,11,11,10,9,19,15,9,0,13,4,11,8],
[15,8,9,15,18,9,13,13,18,10,13,0,10,15,8],
[15,12,19,16,13,13,17,20,17,14,22,16,0,19,10],
[11,9,15,9,12,13,9,15,11,7,15,11,7,0,6],
[13,16,14,14,21,14,14,18,16,17,18,18,16,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 157, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,13,9,19,20,16,15,13,12,9,13,6,15,10],
[6,0,6,9,9,16,10,11,7,9,7,12,9,9,7],
[13,20,0,10,13,15,19,17,13,14,16,18,13,11,11],
[17,17,16,0,20,17,20,16,19,9,12,13,15,16,13],
[7,17,13,6,0,16,15,12,10,7,13,12,7,15,8],
[6,10,11,9,10,0,11,18,10,7,7,12,6,14,8],
[10,16,7,6,11,15,0,15,12,13,7,10,6,6,7],
[11,15,9,10,14,8,11,0,15,10,14,10,10,12,11],
[13,19,13,7,16,16,14,11,0,10,10,18,5,12,8],
[14,17,12,17,19,19,13,16,16,0,11,14,11,16,18],
[17,19,10,14,13,19,19,12,16,15,0,17,11,16,11],
[13,14,8,13,14,14,16,16,8,12,9,0,10,8,11],
[20,17,13,11,19,20,20,16,21,15,15,16,0,16,17],
[11,17,15,10,11,12,20,14,14,10,10,18,10,0,11],
[16,19,15,13,18,18,19,15,18,8,15,15,9,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 158, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,15,13,11,17,11,18,16,19,17,15,18,13,19],
[13,0,11,17,11,19,15,16,14,16,16,15,11,11,15],
[11,15,0,19,13,18,12,16,8,19,22,12,15,5,16],
[13,9,7,0,10,17,11,14,11,12,16,13,8,6,13],
[15,15,13,16,0,17,19,15,14,18,18,12,17,7,16],
[9,7,8,9,9,0,12,12,9,13,12,11,10,4,12],
[15,11,14,15,7,14,0,15,15,18,15,15,14,9,13],
[8,10,10,12,11,14,11,0,10,10,13,10,8,8,9],
[10,12,18,15,12,17,11,16,0,17,18,15,15,8,18],
[7,10,7,14,8,13,8,16,9,0,15,12,9,6,13],
[9,10,4,10,8,14,11,13,8,11,0,11,8,3,9],
[11,11,14,13,14,15,11,16,11,14,15,0,14,14,13],
[8,15,11,18,9,16,12,18,11,17,18,12,0,5,12],
[13,15,21,20,19,22,17,18,18,20,23,12,21,0,17],
[7,11,10,13,10,14,13,17,8,13,17,13,14,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 159, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,15,7,11,11,13,12,7,11,11,12,14,12,13],
[18,0,20,18,15,14,20,13,13,14,13,17,17,21,16],
[11,6,0,10,10,6,11,10,8,11,8,11,7,16,10],
[19,8,16,0,15,12,13,12,11,10,11,14,14,17,15],
[15,11,16,11,0,11,15,11,6,10,11,15,15,17,14],
[15,12,20,14,15,0,21,13,17,13,12,14,17,19,14],
[13,6,15,13,11,5,0,9,11,12,8,12,9,15,8],
[14,13,16,14,15,13,17,0,13,16,12,17,18,16,12],
[19,13,18,15,20,9,15,13,0,15,12,14,19,19,14],
[15,12,15,16,16,13,14,10,11,0,14,16,19,15,16],
[15,13,18,15,15,14,18,14,14,12,0,17,16,18,14],
[14,9,15,12,11,12,14,9,12,10,9,0,15,15,15],
[12,9,19,12,11,9,17,8,7,7,10,11,0,17,12],
[14,5,10,9,9,7,11,10,7,11,8,11,9,0,10],
[13,10,16,11,12,12,18,14,12,10,12,11,14,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 160, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,10,15,10,9,13,10,8,12,15,9,8,10,11],
[16,0,17,18,15,13,17,15,14,17,12,15,10,17,15],
[16,9,0,16,13,13,16,11,11,13,16,15,11,13,11],
[11,8,10,0,12,8,11,8,10,10,9,11,6,10,8],
[16,11,13,14,0,13,16,17,14,16,13,11,11,13,15],
[17,13,13,18,13,0,17,13,11,12,14,14,10,11,14],
[13,9,10,15,10,9,0,10,10,8,13,10,8,8,8],
[16,11,15,18,9,13,16,0,14,13,14,15,12,13,16],
[18,12,15,16,12,15,16,12,0,14,13,12,14,13,14],
[14,9,13,16,10,14,18,13,12,0,14,17,11,12,14],
[11,14,10,17,13,12,13,12,13,12,0,13,14,14,14],
[17,11,11,15,15,12,16,11,14,9,13,0,8,16,13],
[18,16,15,20,15,16,18,14,12,15,12,18,0,16,17],
[16,9,13,16,13,15,18,13,13,14,12,10,10,0,16],
[15,11,15,18,11,12,18,10,12,12,12,13,9,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 161, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,13,8,9,11,13,10,11,16,9,14,13,12,15],
[18,0,15,10,8,14,18,12,10,19,15,14,13,11,18],
[13,11,0,8,9,11,12,9,8,14,12,10,11,15,15],
[18,16,18,0,10,13,14,14,14,23,16,15,17,14,20],
[17,18,17,16,0,14,16,14,13,20,14,15,14,17,17],
[15,12,15,13,12,0,15,12,14,17,17,19,15,14,16],
[13,8,14,12,10,11,0,8,10,17,13,13,10,11,11],
[16,14,17,12,12,14,18,0,11,17,19,16,18,15,16],
[15,16,18,12,13,12,16,15,0,19,14,16,13,15,16],
[10,7,12,3,6,9,9,9,7,0,9,13,11,10,13],
[17,11,14,10,12,9,13,7,12,17,0,15,11,12,17],
[12,12,16,11,11,7,13,10,10,13,11,0,9,15,15],
[13,13,15,9,12,11,16,8,13,15,15,17,0,15,18],
[14,15,11,12,9,12,15,11,11,16,14,11,11,0,19],
[11,8,11,6,9,10,15,10,10,13,9,11,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 162, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,15,17,14,15,15,13,12,15,15,17,13,16,16],
[9,0,8,14,9,13,7,6,13,11,12,9,11,12,12],
[11,18,0,14,12,15,11,11,16,13,16,12,11,14,17],
[9,12,12,0,12,15,7,11,10,14,15,10,7,13,11],
[12,17,14,14,0,14,10,10,14,12,16,11,10,15,13],
[11,13,11,11,12,0,8,10,11,10,13,9,13,11,12],
[11,19,15,19,16,18,0,14,18,18,19,12,14,13,18],
[13,20,15,15,16,16,12,0,15,17,16,14,11,13,19],
[14,13,10,16,12,15,8,11,0,11,15,10,11,13,9],
[11,15,13,12,14,16,8,9,15,0,15,9,13,14,14],
[11,14,10,11,10,13,7,10,11,11,0,9,10,11,12],
[9,17,14,16,15,17,14,12,16,17,17,0,15,12,14],
[13,15,15,19,16,13,12,15,15,13,16,11,0,14,15],
[10,14,12,13,11,15,13,13,13,12,15,14,12,0,15],
[10,14,9,15,13,14,8,7,17,12,14,12,11,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 163, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,12,18,19,20,14,10,12,21,20,19,15,22,16],
[8,0,7,12,7,11,14,12,7,11,8,11,10,17,11],
[14,19,0,15,7,9,15,15,9,10,9,13,5,18,13],
[8,14,11,0,12,14,9,14,12,14,14,14,11,11,11],
[7,19,19,14,0,7,10,8,5,14,8,13,16,14,12],
[6,15,17,12,19,0,14,14,11,15,15,18,20,12,14],
[12,12,11,17,16,12,0,18,17,12,16,14,9,16,16],
[16,14,11,12,18,12,8,0,12,13,15,11,10,16,11],
[14,19,17,14,21,15,9,14,0,15,16,13,17,18,12],
[5,15,16,12,12,11,14,13,11,0,5,16,11,14,13],
[6,18,17,12,18,11,10,11,10,21,0,18,15,12,17],
[7,15,13,12,13,8,12,15,13,10,8,0,14,12,15],
[11,16,21,15,10,6,17,16,9,15,11,12,0,17,10],
[4,9,8,15,12,14,10,10,8,12,14,14,9,0,10],
[10,15,13,15,14,12,10,15,14,13,9,11,16,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 164, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,13,15,13,17,13,13,19,16,15,16,14,12,10],
[14,0,12,12,15,16,13,11,13,12,15,12,14,9,13],
[13,14,0,14,16,14,11,13,15,11,15,14,14,14,15],
[11,14,12,0,12,16,13,14,10,12,16,14,11,11,11],
[13,11,10,14,0,14,12,12,10,12,14,13,15,10,11],
[9,10,12,10,12,0,9,8,14,8,10,15,13,9,11],
[13,13,15,13,14,17,0,13,14,12,16,16,13,16,14],
[13,15,13,12,14,18,13,0,14,11,12,14,12,13,13],
[7,13,11,16,16,12,12,12,0,15,14,15,15,9,11],
[10,14,15,14,14,18,14,15,11,0,15,16,14,15,12],
[11,11,11,10,12,16,10,14,12,11,0,14,11,10,12],
[10,14,12,12,13,11,10,12,11,10,12,0,13,14,11],
[12,12,12,15,11,13,13,14,11,12,15,13,0,12,11],
[14,17,12,15,16,17,10,13,17,11,16,12,14,0,17],
[16,13,11,15,15,15,12,13,15,14,14,15,15,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 165, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,14,11,11,11,15,19,17,16,11,17,9,17,14],
[17,0,18,16,13,17,10,21,20,19,15,14,13,19,17],
[12,8,0,13,7,9,10,14,16,14,8,10,10,12,9],
[15,10,13,0,9,12,16,14,16,14,11,14,8,17,14],
[15,13,19,17,0,21,13,21,21,15,16,22,15,21,16],
[15,9,17,14,5,0,11,14,15,12,8,16,7,13,14],
[11,16,16,10,13,15,0,19,17,14,13,15,13,21,14],
[7,5,12,12,5,12,7,0,12,9,4,8,5,11,7],
[9,6,10,10,5,11,9,14,0,13,8,10,9,17,10],
[10,7,12,12,11,14,12,17,13,0,9,14,7,16,10],
[15,11,18,15,10,18,13,22,18,17,0,19,11,18,15],
[9,12,16,12,4,10,11,18,16,12,7,0,10,12,12],
[17,13,16,18,11,19,13,21,17,19,15,16,0,21,17],
[9,7,14,9,5,13,5,15,9,10,8,14,5,0,13],
[12,9,17,12,10,12,12,19,16,16,11,14,9,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 166, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,14,17,17,15,11,16,14,14,16,16,12,17,20],
[8,0,21,22,20,17,16,15,15,17,16,17,15,19,13],
[12,5,0,18,11,9,10,15,10,19,7,9,8,9,7],
[9,4,8,0,6,5,1,10,10,10,6,8,7,9,6],
[9,6,15,20,0,11,14,15,11,15,14,13,12,13,14],
[11,9,17,21,15,0,10,14,11,10,14,13,9,16,14],
[15,10,16,25,12,16,0,20,12,25,10,12,11,14,15],
[10,11,11,16,11,12,6,0,14,13,12,12,12,13,12],
[12,11,16,16,15,15,14,12,0,17,12,16,11,9,17],
[12,9,7,16,11,16,1,13,9,0,10,11,8,11,10],
[10,10,19,20,12,12,16,14,14,16,0,12,8,10,15],
[10,9,17,18,13,13,14,14,10,15,14,0,12,9,15],
[14,11,18,19,14,17,15,14,15,18,18,14,0,11,18],
[9,7,17,17,13,10,12,13,17,15,16,17,15,0,13],
[6,13,19,20,12,12,11,14,9,16,11,11,8,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 167, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,14,18,17,15,14,17,18,15,12,15,15,16,9],
[12,0,13,15,13,14,9,12,14,11,11,9,13,6,6],
[12,13,0,18,17,11,9,15,13,6,10,8,10,6,5],
[8,11,8,0,12,10,4,12,9,5,9,8,11,5,4],
[9,13,9,14,0,11,10,13,9,9,5,6,10,5,8],
[11,12,15,16,15,0,14,16,10,6,14,12,14,7,9],
[12,17,17,22,16,12,0,16,13,7,11,10,11,8,7],
[9,14,11,14,13,10,10,0,12,9,9,5,14,6,11],
[8,12,13,17,17,16,13,14,0,7,10,10,12,6,6],
[11,15,20,21,17,20,19,17,19,0,16,13,16,12,11],
[14,15,16,17,21,12,15,17,16,10,0,13,13,10,12],
[11,17,18,18,20,14,16,21,16,13,13,0,17,9,14],
[11,13,16,15,16,12,15,12,14,10,13,9,0,11,12],
[10,20,20,21,21,19,18,20,20,14,16,17,15,0,17],
[17,20,21,22,18,17,19,15,20,15,14,12,14,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 168, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,17,15,14,16,12,11,17,14,17,12,15,14,11],
[13,0,11,13,15,12,10,10,12,16,14,14,13,12,13],
[9,15,0,9,12,13,13,10,13,14,15,14,10,11,15],
[11,13,17,0,14,17,12,11,15,14,17,16,15,12,13],
[12,11,14,12,0,10,10,8,12,12,12,10,14,11,13],
[10,14,13,9,16,0,7,8,12,15,14,13,17,12,14],
[14,16,13,14,16,19,0,17,18,15,16,16,14,16,11],
[15,16,16,15,18,18,9,0,17,15,15,15,19,16,13],
[9,14,13,11,14,14,8,9,0,11,13,15,11,12,11],
[12,10,12,12,14,11,11,11,15,0,16,14,10,11,10],
[9,12,11,9,14,12,10,11,13,10,0,15,11,11,12],
[14,12,12,10,16,13,10,11,11,12,11,0,14,11,11],
[11,13,16,11,12,9,12,7,15,16,15,12,0,11,13],
[12,14,15,14,15,14,10,10,14,15,15,15,15,0,13],
[15,13,11,13,13,12,15,13,15,16,14,15,13,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 169, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,15,13,13,13,14,15,13,15,13,16,13,16,13],
[11,0,14,13,15,12,13,14,11,13,11,14,14,15,13],
[11,12,0,11,14,13,17,14,10,18,15,20,15,16,15],
[13,13,15,0,12,10,14,10,15,16,12,17,14,13,16],
[13,11,12,14,0,12,12,12,12,14,11,16,11,15,12],
[13,14,13,16,14,0,16,14,14,17,15,20,18,17,11],
[12,13,9,12,14,10,0,15,11,13,12,14,12,14,11],
[11,12,12,16,14,12,11,0,13,16,11,17,12,15,12],
[13,15,16,11,14,12,15,13,0,14,13,20,15,18,14],
[11,13,8,10,12,9,13,10,12,0,11,19,12,12,9],
[13,15,11,14,15,11,14,15,13,15,0,17,11,18,15],
[10,12,6,9,10,6,12,9,6,7,9,0,10,9,7],
[13,12,11,12,15,8,14,14,11,14,15,16,0,13,10],
[10,11,10,13,11,9,12,11,8,14,8,17,13,0,10],
[13,13,11,10,14,15,15,14,12,17,11,19,16,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 170, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,15,13,13,10,7,11,14,14,14,12,9,13,15],
[12,0,13,12,17,11,13,13,14,14,17,14,15,13,12],
[11,13,0,13,11,12,5,12,10,12,14,10,9,11,7],
[13,14,13,0,12,12,8,14,14,14,15,10,10,14,10],
[13,9,15,14,0,9,9,15,18,16,16,11,14,14,10],
[16,15,14,14,17,0,11,15,17,15,16,15,12,15,15],
[19,13,21,18,17,15,0,18,16,18,18,15,11,16,16],
[15,13,14,12,11,11,8,0,15,13,15,13,12,13,11],
[12,12,16,12,8,9,10,11,0,10,15,11,9,15,12],
[12,12,14,12,10,11,8,13,16,0,15,10,11,13,13],
[12,9,12,11,10,10,8,11,11,11,0,11,8,10,11],
[14,12,16,16,15,11,11,13,15,16,15,0,10,13,11],
[17,11,17,16,12,14,15,14,17,15,18,16,0,18,16],
[13,13,15,12,12,11,10,13,11,13,16,13,8,0,14],
[11,14,19,16,16,11,10,15,14,13,15,15,10,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 171, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,18,15,16,18,17,25,25,8,15,14,16,15],
[1,0,8,18,2,9,9,18,19,12,9,1,7,9,9],
[1,18,0,18,8,8,1,18,11,18,8,1,8,9,1],
[8,8,8,0,8,9,1,1,8,8,8,8,7,15,8],
[11,24,18,18,0,18,17,18,18,25,17,7,17,19,17],
[10,17,18,17,8,0,18,17,10,18,18,1,17,18,8],
[8,17,25,25,9,8,0,25,18,18,15,8,7,16,14],
[9,8,8,25,8,9,1,0,18,9,15,8,7,16,8],
[1,7,15,18,8,16,8,8,0,9,8,1,7,9,15],
[1,14,8,18,1,8,8,17,17,0,8,1,7,9,7],
[18,17,18,18,9,8,11,11,18,18,0,8,7,19,7],
[11,25,25,18,19,25,18,18,25,25,18,0,18,19,25],
[12,19,18,19,9,9,19,19,19,19,19,8,0,19,9],
[10,17,17,11,7,8,10,10,17,17,7,7,7,0,7],
[11,17,25,18,9,18,12,18,11,19,19,1,17,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 172, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,19,20,20,16,15,18,14,18,15,9,19,18,18],
[12,0,18,16,16,18,13,15,18,17,13,12,19,19,17],
[7,8,0,10,12,11,7,11,11,10,10,10,12,12,12],
[6,10,16,0,13,12,15,13,12,15,14,12,13,16,19],
[6,10,14,13,0,11,12,10,14,14,13,10,10,13,15],
[10,8,15,14,15,0,12,12,7,14,17,13,12,14,18],
[11,13,19,11,14,14,0,13,10,12,9,15,15,16,14],
[8,11,15,13,16,14,13,0,10,15,11,8,19,15,11],
[12,8,15,14,12,19,16,16,0,14,17,10,15,17,15],
[8,9,16,11,12,12,14,11,12,0,8,13,15,13,12],
[11,13,16,12,13,9,17,15,9,18,0,16,12,15,17],
[17,14,16,14,16,13,11,18,16,13,10,0,18,15,16],
[7,7,14,13,16,14,11,7,11,11,14,8,0,15,13],
[8,7,14,10,13,12,10,11,9,13,11,11,11,0,16],
[8,9,14,7,11,8,12,15,11,14,9,10,13,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 173, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,17,26,18,17,25,17,18,25,13,12,13,17,17],
[14,0,13,15,7,7,14,6,7,14,2,0,6,6,6],
[9,13,0,26,18,18,20,17,18,25,13,11,12,17,17],
[0,11,0,0,18,16,11,6,5,24,1,11,1,5,17],
[8,19,8,8,0,16,19,0,0,8,1,11,1,0,11],
[9,19,8,10,10,0,20,1,2,9,2,11,1,0,12],
[1,12,6,15,7,6,0,6,7,14,2,12,1,6,17],
[9,20,9,20,26,25,20,0,9,24,2,11,20,5,17],
[8,19,8,21,26,24,19,17,0,24,12,11,12,5,17],
[1,12,1,2,18,17,12,2,2,0,2,12,1,1,12],
[13,24,13,25,25,24,24,24,14,24,0,16,25,5,17],
[14,26,15,15,15,15,14,15,15,14,10,0,14,7,17],
[13,20,14,25,25,25,25,6,14,25,1,12,0,6,16],
[9,20,9,21,26,26,20,21,21,25,21,19,20,0,20],
[9,20,9,9,15,14,9,9,9,14,9,9,10,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 174, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,18,7,8,19,15,15,16,14,7,15,0,18,18],
[11,0,18,7,11,19,16,15,16,15,8,15,1,18,18],
[8,8,0,11,8,11,8,7,11,12,8,14,1,15,7],
[19,19,15,0,15,15,15,12,15,19,7,15,15,11,12],
[18,15,18,11,0,11,18,8,11,10,7,15,15,11,15],
[7,7,15,11,15,0,18,8,11,14,14,7,7,19,12],
[11,10,18,11,8,8,0,8,15,10,7,7,10,15,7],
[11,11,19,14,18,18,18,0,11,18,15,10,11,25,10],
[10,10,15,11,15,15,11,15,0,14,11,11,4,22,14],
[12,11,14,7,16,12,16,8,12,0,7,11,12,15,11],
[19,18,18,19,19,12,19,11,15,19,0,18,19,11,15],
[11,11,12,11,11,19,19,16,15,15,8,0,4,18,12],
[26,25,25,11,11,19,16,15,22,14,7,22,0,18,22],
[8,8,11,15,15,7,11,1,4,11,15,8,8,0,11],
[8,8,19,14,11,14,19,16,12,15,11,14,4,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 175, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,9,9,11,14,13,14,10,13,11,14,11,12,15],
[13,0,12,7,10,13,9,5,13,14,7,15,9,14,8],
[17,14,0,10,11,17,14,14,13,16,9,14,11,21,12],
[17,19,16,0,11,18,11,9,14,17,17,16,6,14,11],
[15,16,15,15,0,21,20,16,11,18,19,20,11,23,12],
[12,13,9,8,5,0,10,6,9,12,7,13,7,13,8],
[13,17,12,15,6,16,0,10,12,16,15,18,8,20,10],
[12,21,12,17,10,20,16,0,10,14,14,18,6,17,8],
[16,13,13,12,15,17,14,16,0,19,12,15,12,18,10],
[13,12,10,9,8,14,10,12,7,0,16,13,7,19,9],
[15,19,17,9,7,19,11,12,14,10,0,17,8,16,9],
[12,11,12,10,6,13,8,8,11,13,9,0,5,13,9],
[15,17,15,20,15,19,18,20,14,19,18,21,0,21,13],
[14,12,5,12,3,13,6,9,8,7,10,13,5,0,11],
[11,18,14,15,14,18,16,18,16,17,17,17,13,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 176, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,7,13,11,10,17,9,12,13,9,9,10,12,10],
[15,0,15,18,13,20,14,14,15,12,13,14,15,18,18],
[19,11,0,17,14,19,15,14,16,12,14,14,15,16,12],
[13,8,9,0,10,16,12,11,10,10,11,14,9,15,13],
[15,13,12,16,0,15,12,15,13,14,12,14,11,12,13],
[16,6,7,10,11,0,10,11,9,12,9,13,9,13,11],
[9,12,11,14,14,16,0,13,12,11,11,12,11,16,14],
[17,12,12,15,11,15,13,0,14,10,9,12,12,15,13],
[14,11,10,16,13,17,14,12,0,15,13,13,14,18,13],
[13,14,14,16,12,14,15,16,11,0,13,13,13,17,15],
[17,13,12,15,14,17,15,17,13,13,0,12,10,15,11],
[17,12,12,12,12,13,14,14,13,13,14,0,16,16,11],
[16,11,11,17,15,17,15,14,12,13,16,10,0,18,13],
[14,8,10,11,14,13,10,11,8,9,11,10,8,0,12],
[16,8,14,13,13,15,12,13,13,11,15,15,13,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 177, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,10,15,11,10,16,5,8,10,5,8,8,9,15],
[18,0,12,12,8,8,8,9,9,8,2,2,13,2,8],
[16,14,0,16,14,13,16,16,15,16,7,6,19,12,5],
[11,14,10,0,10,9,13,6,6,11,2,6,11,11,11],
[15,18,12,16,0,12,8,16,11,13,16,6,10,11,6],
[16,18,13,17,14,0,15,6,14,15,11,8,17,9,10],
[10,18,10,13,18,11,0,11,14,16,12,1,11,11,10],
[21,17,10,20,10,20,15,0,9,15,14,7,13,19,14],
[18,17,11,20,15,12,12,17,0,15,11,11,17,11,16],
[16,18,10,15,13,11,10,11,11,0,11,5,10,11,10],
[21,24,19,24,10,15,14,12,15,15,0,9,15,15,12],
[18,24,20,20,20,18,25,19,15,21,17,0,21,20,12],
[18,13,7,15,16,9,15,13,9,16,11,5,0,7,12],
[17,24,14,15,15,17,15,7,15,15,11,6,19,0,11],
[11,18,21,15,20,16,16,12,10,16,14,14,14,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 178, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,20,13,14,19,17,13,18,16,16,15,15,14,15],
[9,0,17,13,15,16,12,14,14,13,11,14,14,13,11],
[6,9,0,10,14,12,11,12,13,9,13,9,8,10,12],
[13,13,16,0,14,15,17,13,14,15,15,15,10,10,14],
[12,11,12,12,0,15,13,11,14,13,14,14,9,14,12],
[7,10,14,11,11,0,12,9,11,12,11,12,5,10,11],
[9,14,15,9,13,14,0,14,15,16,13,16,10,13,10],
[13,12,14,13,15,17,12,0,15,13,16,14,12,11,14],
[8,12,13,12,12,15,11,11,0,9,10,11,11,11,11],
[10,13,17,11,13,14,10,13,17,0,16,16,11,13,15],
[10,15,13,11,12,15,13,10,16,10,0,15,10,15,10],
[11,12,17,11,12,14,10,12,15,10,11,0,11,13,14],
[11,12,18,16,17,21,16,14,15,15,16,15,0,15,16],
[12,13,16,16,12,16,13,15,15,13,11,13,11,0,14],
[11,15,14,12,14,15,16,12,15,11,16,12,10,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 179, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,16,17,17,13,16,15,13,18,18,17,16,18,17],
[5,0,12,13,13,12,14,11,12,19,15,12,13,18,15],
[10,14,0,16,13,11,11,14,13,15,20,12,14,13,16],
[9,13,10,0,10,14,13,12,9,10,16,10,13,11,16],
[9,13,13,16,0,16,14,13,15,12,18,15,17,19,17],
[13,14,15,12,10,0,13,14,15,14,19,12,15,17,19],
[10,12,15,13,12,13,0,14,10,13,17,8,14,15,18],
[11,15,12,14,13,12,12,0,12,15,17,11,13,17,17],
[13,14,13,17,11,11,16,14,0,15,20,12,14,15,18],
[8,7,11,16,14,12,13,11,11,0,16,11,16,16,18],
[8,11,6,10,8,7,9,9,6,10,0,7,11,14,15],
[9,14,14,16,11,14,18,15,14,15,19,0,15,14,15],
[10,13,12,13,9,11,12,13,12,10,15,11,0,14,16],
[8,8,13,15,7,9,11,9,11,10,12,12,12,0,14],
[9,11,10,10,9,7,8,9,8,8,11,11,10,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 180, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,8,8,8,5,9,7,5,2,9,10,8,6,14],
[16,0,14,12,13,12,14,12,12,6,13,9,12,13,17],
[18,12,0,11,12,15,17,14,14,7,18,12,13,16,18],
[18,14,15,0,16,15,12,12,17,9,10,14,11,17,18],
[18,13,14,10,0,14,15,12,11,12,14,15,13,22,17],
[21,14,11,11,12,0,16,9,13,10,18,14,13,20,18],
[17,12,9,14,11,10,0,10,13,6,16,9,12,10,15],
[19,14,12,14,14,17,16,0,18,13,19,16,15,17,16],
[21,14,12,9,15,13,13,8,0,8,13,16,14,14,19],
[24,20,19,17,14,16,20,13,18,0,20,19,15,18,21],
[17,13,8,16,12,8,10,7,13,6,0,8,8,13,15],
[16,17,14,12,11,12,17,10,10,7,18,0,12,14,18],
[18,14,13,15,13,13,14,11,12,11,18,14,0,21,15],
[20,13,10,9,4,6,16,9,12,8,13,12,5,0,17],
[12,9,8,8,9,8,11,10,7,5,11,8,11,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 181, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,15,17,17,12,18,16,16,16,14,13,16,17,17],
[9,0,9,10,9,5,10,11,11,10,11,10,13,13,15],
[11,17,0,11,12,10,14,14,13,12,12,11,14,17,14],
[9,16,15,0,15,12,12,12,13,9,11,10,13,17,16],
[9,17,14,11,0,13,10,16,18,9,11,15,14,16,15],
[14,21,16,14,13,0,16,19,13,13,17,14,16,17,19],
[8,16,12,14,16,10,0,15,15,12,13,14,16,18,16],
[10,15,12,14,10,7,11,0,11,9,15,6,13,15,14],
[10,15,13,13,8,13,11,15,0,14,11,11,13,15,13],
[10,16,14,17,17,13,14,17,12,0,14,17,16,20,18],
[12,15,14,15,15,9,13,11,15,12,0,8,12,15,14],
[13,16,15,16,11,12,12,20,15,9,18,0,16,18,18],
[10,13,12,13,12,10,10,13,13,10,14,10,0,16,15],
[9,13,9,9,10,9,8,11,11,6,11,8,10,0,14],
[9,11,12,10,11,7,10,12,13,8,12,8,11,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 182, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,14,7,19,14,15,11,11,3,18,10,11,10,3],
[11,0,5,5,17,4,14,2,8,10,9,14,9,9,13],
[12,21,0,13,23,5,24,12,12,14,14,14,13,14,12],
[19,21,13,0,16,16,25,20,23,22,25,22,23,24,21],
[7,9,3,10,0,1,22,9,8,10,14,10,11,13,9],
[12,22,21,10,25,0,21,10,15,10,25,14,14,17,14],
[11,12,2,1,4,5,0,11,5,14,6,14,5,6,11],
[15,24,14,6,17,16,15,0,9,14,18,17,11,10,14],
[15,18,14,3,18,11,21,17,0,9,14,13,3,17,17],
[23,16,12,4,16,16,12,12,17,0,15,22,16,16,16],
[8,17,12,1,12,1,20,8,12,11,0,8,1,10,8],
[16,12,12,4,16,12,12,9,13,4,18,0,4,18,9],
[15,17,13,3,15,12,21,15,23,10,25,22,0,17,17],
[16,17,12,2,13,9,20,16,9,10,16,8,9,0,7],
[23,13,14,5,17,12,15,12,9,10,18,17,9,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 183, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,11,9,13,10,12,15,16,14,14,15,10,15,11],
[11,0,13,15,16,13,12,13,16,14,15,15,15,16,16],
[15,13,0,16,14,13,14,15,18,13,16,18,17,14,13],
[17,11,10,0,12,10,11,13,13,12,13,14,14,13,17],
[13,10,12,14,0,12,13,10,14,17,13,15,11,13,13],
[16,13,13,16,14,0,14,16,20,15,18,16,17,16,16],
[14,14,12,15,13,12,0,13,18,14,13,15,15,17,13],
[11,13,11,13,16,10,13,0,16,18,17,14,12,12,18],
[10,10,8,13,12,6,8,10,0,14,10,11,7,12,13],
[12,12,13,14,9,11,12,8,12,0,14,12,13,13,15],
[12,11,10,13,13,8,13,9,16,12,0,12,13,9,12],
[11,11,8,12,11,10,11,12,15,14,14,0,11,9,13],
[16,11,9,12,15,9,11,14,19,13,13,15,0,15,13],
[11,10,12,13,13,10,9,14,14,13,17,17,11,0,11],
[15,10,13,9,13,10,13,8,13,11,14,13,13,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 184, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,8,9,9,13,16,14,15,11,16,15,14,13,11],
[17,0,13,9,14,18,16,20,16,14,18,17,16,13,15],
[18,13,0,12,11,18,12,17,16,9,21,16,11,14,11],
[17,17,14,0,14,14,15,19,15,11,15,16,15,18,14],
[17,12,15,12,0,19,16,17,16,13,17,19,16,14,12],
[13,8,8,12,7,0,15,14,14,9,14,12,11,11,10],
[10,10,14,11,10,11,0,16,13,10,13,15,11,10,13],
[12,6,9,7,9,12,10,0,8,9,9,8,9,6,7],
[11,10,10,11,10,12,13,18,0,8,15,13,9,11,11],
[15,12,17,15,13,17,16,17,18,0,17,16,14,17,14],
[10,8,5,11,9,12,13,17,11,9,0,12,8,11,11],
[11,9,10,10,7,14,11,18,13,10,14,0,10,14,10],
[12,10,15,11,10,15,15,17,17,12,18,16,0,14,15],
[13,13,12,8,12,15,16,20,15,9,15,12,12,0,14],
[15,11,15,12,14,16,13,19,15,12,15,16,11,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 185, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,14,12,13,15,10,12,10,13,16,13,15,13,15],
[18,0,16,19,19,15,10,17,16,16,19,16,20,19,19],
[12,10,0,13,14,15,8,15,11,16,15,11,17,14,17],
[14,7,13,0,13,14,7,12,13,15,18,14,14,16,14],
[13,7,12,13,0,10,8,11,10,12,15,12,15,13,11],
[11,11,11,12,16,0,12,12,12,14,15,18,17,15,14],
[16,16,18,19,18,14,0,16,12,18,16,15,20,16,20],
[14,9,11,14,15,14,10,0,11,14,17,14,16,16,17],
[16,10,15,13,16,14,14,15,0,14,16,15,16,13,18],
[13,10,10,11,14,12,8,12,12,0,15,13,14,14,12],
[10,7,11,8,11,11,10,9,10,11,0,10,11,9,12],
[13,10,15,12,14,8,11,12,11,13,16,0,17,11,17],
[11,6,9,12,11,9,6,10,10,12,15,9,0,12,10],
[13,7,12,10,13,11,10,10,13,12,17,15,14,0,17],
[11,7,9,12,15,12,6,9,8,14,14,9,16,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 186, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,16,19,14,19,8,10,12,17,12,15,13,20,9],
[6,0,4,11,11,10,7,8,8,7,12,14,8,10,6],
[10,22,0,21,16,17,7,11,11,15,15,19,11,13,13],
[7,15,5,0,14,14,5,9,10,7,11,16,5,9,9],
[12,15,10,12,0,12,6,10,3,11,16,16,6,14,10],
[7,16,9,12,14,0,6,9,9,12,12,17,11,12,11],
[18,19,19,21,20,20,0,15,11,17,15,16,16,21,17],
[16,18,15,17,16,17,11,0,14,17,16,22,13,19,18],
[14,18,15,16,23,17,15,12,0,17,17,17,8,11,13],
[9,19,11,19,15,14,9,9,9,0,15,16,8,10,7],
[14,14,11,15,10,14,11,10,9,11,0,17,11,8,10],
[11,12,7,10,10,9,10,4,9,10,9,0,7,12,11],
[13,18,15,21,20,15,10,13,18,18,15,19,0,9,19],
[6,16,13,17,12,14,5,7,15,16,18,14,17,0,10],
[17,20,13,17,16,15,9,8,13,19,16,15,7,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 187, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,12,15,12,11,8,12,9,8,14,11,9,11,11],
[17,0,15,17,18,17,15,19,16,12,16,13,16,15,18],
[14,11,0,18,15,16,17,16,17,12,15,13,13,11,17],
[11,9,8,0,13,10,12,15,11,9,16,6,9,10,13],
[14,8,11,13,0,12,12,16,18,6,15,7,13,8,14],
[15,9,10,16,14,0,12,16,14,8,14,12,10,8,15],
[18,11,9,14,14,14,0,17,16,11,17,8,12,10,17],
[14,7,10,11,10,10,9,0,14,7,16,8,7,8,14],
[17,10,9,15,8,12,10,12,0,8,12,10,8,8,14],
[18,14,14,17,20,18,15,19,18,0,22,14,15,13,20],
[12,10,11,10,11,12,9,10,14,4,0,8,9,8,11],
[15,13,13,20,19,14,18,18,16,12,18,0,12,15,16],
[17,10,13,17,13,16,14,19,18,11,17,14,0,9,18],
[15,11,15,16,18,18,16,18,18,13,18,11,17,0,18],
[15,8,9,13,12,11,9,12,12,6,15,10,8,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 188, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,8,10,9,14,10,15,11,8,13,12,11,11,11],
[17,0,11,16,10,18,12,15,15,11,10,18,15,11,15],
[18,15,0,15,12,18,13,16,16,12,13,17,16,16,13],
[16,10,11,0,9,18,13,14,15,9,11,14,13,10,11],
[17,16,14,17,0,18,13,16,16,15,13,19,14,14,17],
[12,8,8,8,8,0,7,13,9,7,7,11,8,4,8],
[16,14,13,13,13,19,0,15,14,15,11,16,14,15,14],
[11,11,10,12,10,13,11,0,12,9,7,15,14,11,15],
[15,11,10,11,10,17,12,14,0,11,10,14,13,12,12],
[18,15,14,17,11,19,11,17,15,0,17,15,15,13,14],
[13,16,13,15,13,19,15,19,16,9,0,16,14,10,15],
[14,8,9,12,7,15,10,11,12,11,10,0,10,11,11],
[15,11,10,13,12,18,12,12,13,11,12,16,0,14,15],
[15,15,10,16,12,22,11,15,14,13,16,15,12,0,16],
[15,11,13,15,9,18,12,11,14,12,11,15,11,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 189, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,12,15,7,12,11,17,17,11,15,13,7,11,18],
[13,0,6,13,6,13,9,9,11,11,13,9,7,9,12],
[14,20,0,16,11,16,17,12,16,9,16,9,13,14,18],
[11,13,10,0,5,12,11,12,15,10,12,10,9,8,15],
[19,20,15,21,0,18,15,17,12,16,15,17,15,15,18],
[14,13,10,14,8,0,11,17,17,13,15,15,11,13,18],
[15,17,9,15,11,15,0,12,11,9,7,11,12,10,13],
[9,17,14,14,9,9,14,0,16,11,15,5,9,17,13],
[9,15,10,11,14,9,15,10,0,10,16,8,12,8,10],
[15,15,17,16,10,13,17,15,16,0,19,12,15,13,17],
[11,13,10,14,11,11,19,11,10,7,0,10,14,8,10],
[13,17,17,16,9,11,15,21,18,14,16,0,15,17,19],
[19,19,13,17,11,15,14,17,14,11,12,11,0,11,15],
[15,17,12,18,11,13,16,9,18,13,18,9,15,0,15],
[8,14,8,11,8,8,13,13,16,9,16,7,11,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 190, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,20,19,10,12,14,15,16,13,19,17,13,11,13],
[12,0,19,12,12,16,12,14,9,20,15,18,12,12,11],
[6,7,0,6,5,10,5,9,4,8,11,10,3,5,7],
[7,14,20,0,8,10,13,12,9,16,12,14,11,12,10],
[16,14,21,18,0,13,18,15,14,19,18,17,14,18,12],
[14,10,16,16,13,0,12,5,10,15,13,12,10,12,12],
[12,14,21,13,8,14,0,14,15,16,11,16,9,10,11],
[11,12,17,14,11,21,12,0,13,14,12,14,15,14,15],
[10,17,22,17,12,16,11,13,0,19,13,17,13,15,14],
[13,6,18,10,7,11,10,12,7,0,12,11,4,7,7],
[7,11,15,14,8,13,15,14,13,14,0,15,15,14,14],
[9,8,16,12,9,14,10,12,9,15,11,0,14,13,13],
[13,14,23,15,12,16,17,11,13,22,11,12,0,15,9],
[15,14,21,14,8,14,16,12,11,19,12,13,11,0,7],
[13,15,19,16,14,14,15,11,12,19,12,13,17,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 191, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,9,16,16,17,18,16,14,19,15,20,16,20,18],
[5,0,9,9,10,8,11,11,11,17,3,10,16,8,12],
[17,17,0,17,12,15,16,14,11,18,10,17,21,17,23],
[10,17,9,0,13,14,15,11,14,17,9,14,18,14,16],
[10,16,14,13,0,17,13,20,8,15,13,17,21,16,17],
[9,18,11,12,9,0,11,10,10,12,7,12,11,11,19],
[8,15,10,11,13,15,0,13,13,19,7,17,15,10,17],
[10,15,12,15,6,16,13,0,10,16,5,12,14,13,17],
[12,15,15,12,18,16,13,16,0,15,10,14,19,14,14],
[7,9,8,9,11,14,7,10,11,0,6,11,17,10,16],
[11,23,16,17,13,19,19,21,16,20,0,23,18,12,24],
[6,16,9,12,9,14,9,14,12,15,3,0,17,7,16],
[10,10,5,8,5,15,11,12,7,9,8,9,0,13,18],
[6,18,9,12,10,15,16,13,12,16,14,19,13,0,19],
[8,14,3,10,9,7,9,9,12,10,2,10,8,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 192, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,17,19,16,14,11,14,20,19,16,22,17,18,17],
[10,0,13,18,15,16,13,12,18,14,17,16,14,12,10],
[9,13,0,13,13,10,11,11,13,12,15,15,14,13,8],
[7,8,13,0,12,12,11,11,11,13,12,15,13,10,8],
[10,11,13,14,0,11,9,13,14,13,10,14,16,14,14],
[12,10,16,14,15,0,13,16,15,18,16,17,17,14,11],
[15,13,15,15,17,13,0,12,17,16,16,16,14,14,15],
[12,14,15,15,13,10,14,0,14,13,16,19,13,16,11],
[6,8,13,15,12,11,9,12,0,10,13,13,10,11,8],
[7,12,14,13,13,8,10,13,16,0,13,16,13,12,11],
[10,9,11,14,16,10,10,10,13,13,0,12,11,12,10],
[4,10,11,11,12,9,10,7,13,10,14,0,8,9,10],
[9,12,12,13,10,9,12,13,16,13,15,18,0,10,10],
[8,14,13,16,12,12,12,10,15,14,14,17,16,0,11],
[9,16,18,18,12,15,11,15,18,15,16,16,16,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 193, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,14,20,19,8,17,13,13,14,24,12,18,23,18],
[7,0,9,8,8,11,15,3,6,11,11,8,10,6,17],
[12,17,0,13,15,13,21,11,9,18,17,12,17,10,20],
[6,18,13,0,11,3,13,3,9,7,17,4,13,4,11],
[7,18,11,15,0,9,16,8,8,13,20,7,13,5,18],
[18,15,13,23,17,0,15,6,13,12,21,7,15,16,18],
[9,11,5,13,10,11,0,6,11,15,21,11,16,7,20],
[13,23,15,23,18,20,20,0,13,13,22,14,13,16,20],
[13,20,17,17,18,13,15,13,0,14,19,10,15,10,19],
[12,15,8,19,13,14,11,13,12,0,17,18,15,14,18],
[2,15,9,9,6,5,5,4,7,9,0,3,13,0,13],
[14,18,14,22,19,19,15,12,16,8,23,0,13,16,20],
[8,16,9,13,13,11,10,13,11,11,13,13,0,11,13],
[3,20,16,22,21,10,19,10,16,12,26,10,15,0,20],
[8,9,6,15,8,8,6,6,7,8,13,6,13,6,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 194, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,15,8,12,10,17,8,9,7,10,9,12,7,7],
[19,0,12,15,21,20,24,15,17,17,18,20,22,14,15],
[11,14,0,12,20,17,17,14,17,8,18,14,16,13,10],
[18,11,14,0,20,12,16,16,14,14,10,16,16,15,13],
[14,5,6,6,0,11,8,2,11,10,6,6,12,4,2],
[16,6,9,14,15,0,11,8,11,12,12,13,14,7,8],
[9,2,9,10,18,15,0,1,13,13,9,16,17,6,11],
[18,11,12,10,24,18,25,0,20,17,10,15,18,14,15],
[17,9,9,12,15,15,13,6,0,10,10,10,12,5,8],
[19,9,18,12,16,14,13,9,16,0,11,10,13,11,9],
[16,8,8,16,20,14,17,16,16,15,0,16,15,11,11],
[17,6,12,10,20,13,10,11,16,16,10,0,22,6,11],
[14,4,10,10,14,12,9,8,14,13,11,4,0,3,7],
[19,12,13,11,22,19,20,12,21,15,15,20,23,0,13],
[19,11,16,13,24,18,15,11,18,17,15,15,19,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 195, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,13,14,16,11,14,18,10,13,14,14,13,15,14],
[16,0,12,13,17,13,16,17,13,13,16,15,17,16,16],
[13,14,0,16,19,19,15,17,13,15,16,17,17,18,12],
[12,13,10,0,18,11,13,16,9,11,15,14,15,13,12],
[10,9,7,8,0,9,12,12,10,11,12,11,13,11,12],
[15,13,7,15,17,0,14,13,12,15,14,16,16,15,13],
[12,10,11,13,14,12,0,16,10,13,14,15,12,11,14],
[8,9,9,10,14,13,10,0,10,11,12,12,14,13,12],
[16,13,13,17,16,14,16,16,0,13,17,16,14,13,13],
[13,13,11,15,15,11,13,15,13,0,17,12,15,14,12],
[12,10,10,11,14,12,12,14,9,9,0,13,11,14,11],
[12,11,9,12,15,10,11,14,10,14,13,0,16,13,14],
[13,9,9,11,13,10,14,12,12,11,15,10,0,11,12],
[11,10,8,13,15,11,15,13,13,12,12,13,15,0,13],
[12,10,14,14,14,13,12,14,13,14,15,12,14,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 196, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,9,10,11,11,8,11,5,9,13,7,8,16,10],
[15,0,17,20,16,17,16,17,13,17,19,12,18,19,12],
[17,9,0,12,15,14,11,12,10,9,15,12,11,18,12],
[16,6,14,0,9,14,9,9,9,7,12,10,10,14,13],
[15,10,11,17,0,13,13,20,9,14,13,11,14,19,14],
[15,9,12,12,13,0,11,14,9,11,14,13,13,13,12],
[18,10,15,17,13,15,0,16,11,15,14,15,13,17,16],
[15,9,14,17,6,12,10,0,10,12,12,8,14,14,10],
[21,13,16,17,17,17,15,16,0,12,17,17,13,19,18],
[17,9,17,19,12,15,11,14,14,0,17,11,13,16,15],
[13,7,11,14,13,12,12,14,9,9,0,11,10,12,13],
[19,14,14,16,15,13,11,18,9,15,15,0,15,22,13],
[18,8,15,16,12,13,13,12,13,13,16,11,0,17,11],
[10,7,8,12,7,13,9,12,7,10,14,4,9,0,9],
[16,14,14,13,12,14,10,16,8,11,13,13,15,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 197, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,6,8,8,8,6,8,8,8,19,8,8,8,9,19],
[20,0,26,26,26,18,13,26,26,26,15,20,20,20,19],
[18,0,0,11,11,11,11,17,13,11,2,11,11,7,13],
[18,0,15,0,7,11,11,13,13,17,2,18,18,7,13],
[18,0,15,19,0,11,13,13,13,17,8,13,18,9,19],
[20,8,15,15,15,0,13,15,15,26,8,9,15,9,19],
[18,13,15,15,13,13,0,13,15,24,15,15,13,9,26],
[18,0,9,13,13,11,13,0,13,13,2,13,13,9,13],
[18,0,13,13,13,11,11,13,0,17,8,7,7,7,19],
[7,0,15,9,9,0,2,13,9,0,2,9,9,9,13],
[18,11,24,24,18,18,11,24,18,24,0,18,18,18,17],
[18,6,15,8,13,17,11,13,19,17,8,0,24,7,19],
[18,6,15,8,8,11,13,13,19,17,8,2,0,9,19],
[17,6,19,19,17,17,17,17,19,17,8,19,17,0,19],
[7,7,13,13,7,7,0,13,7,13,9,7,7,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 198, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,9,15,8,9,10,12,12,14,11,11,10,13,13],
[12,0,11,17,12,12,9,10,13,18,13,12,10,15,13],
[17,15,0,18,11,16,13,12,15,16,17,14,13,19,16],
[11,9,8,0,8,8,11,9,9,11,12,10,10,11,7],
[18,14,15,18,0,17,15,14,18,17,19,16,11,21,16],
[17,14,10,18,9,0,11,13,10,17,15,9,12,13,12],
[16,17,13,15,11,15,0,15,20,18,18,14,16,16,10],
[14,16,14,17,12,13,11,0,15,15,16,12,12,16,14],
[14,13,11,17,8,16,6,11,0,18,15,12,12,16,12],
[12,8,10,15,9,9,8,11,8,0,13,11,7,11,12],
[15,13,9,14,7,11,8,10,11,13,0,8,11,14,11],
[15,14,12,16,10,17,12,14,14,15,18,0,14,15,17],
[16,16,13,16,15,14,10,14,14,19,15,12,0,18,13],
[13,11,7,15,5,13,10,10,10,15,12,11,8,0,9],
[13,13,10,19,10,14,16,12,14,14,15,9,13,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 199, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,14,16,12,16,15,12,17,16,15,15,13,17,10],
[14,0,15,17,15,17,14,18,18,15,17,15,11,15,11],
[12,11,0,14,12,17,14,17,16,15,15,16,13,16,14],
[10,9,12,0,13,14,15,12,14,13,10,13,9,13,14],
[14,11,14,13,0,14,13,15,17,12,13,13,11,15,13],
[10,9,9,12,12,0,9,13,11,11,10,10,8,9,10],
[11,12,12,11,13,17,0,11,16,18,14,13,13,14,13],
[14,8,9,14,11,13,15,0,17,13,14,13,9,15,14],
[9,8,10,12,9,15,10,9,0,12,12,11,11,10,11],
[10,11,11,13,14,15,8,13,14,0,13,16,9,11,9],
[11,9,11,16,13,16,12,12,14,13,0,16,12,13,11],
[11,11,10,13,13,16,13,13,15,10,10,0,8,9,10],
[13,15,13,17,15,18,13,17,15,17,14,18,0,15,15],
[9,11,10,13,11,17,12,11,16,15,13,17,11,0,10],
[16,15,12,12,13,16,13,12,15,17,15,16,11,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 26, 200, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebbrcwd/mebbrcwd_15_26.csv", index=False, header=False)
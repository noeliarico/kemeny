
import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg
from kemeny import sc

rep = 1
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,116,135,107,116,109,114,104,97,118,109,115,123],
[135,0,113,119,122,128,104,131,118,125,109,118,125],
[116,138,0,118,118,124,113,140,94,103,131,113,140],
[144,132,133,0,134,121,137,117,109,123,147,128,144],
[135,129,133,117,0,123,144,161,118,117,132,128,138],
[142,123,127,130,128,0,136,142,121,140,116,128,139],
[137,147,138,114,107,115,0,134,87,139,110,131,136],
[147,120,111,134,90,109,117,0,113,109,116,122,120],
[154,133,157,142,133,130,164,138,0,129,125,146,135],
[133,126,148,128,134,111,112,142,122,0,138,134,128],
[142,142,120,104,119,135,141,135,126,113,0,116,125],
[136,133,138,123,123,123,120,129,105,117,135,0,120],
[128,126,111,107,113,112,115,131,116,123,126,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 1, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,111,133,124,141,137,103,126,137,130,125,136],
[116,0,91,108,109,115,124,106,110,111,110,104,117],
[140,160,0,143,132,138,138,135,129,130,146,124,138],
[118,143,108,0,134,121,125,117,124,122,125,132,113],
[127,142,119,117,0,126,138,118,123,126,126,133,130],
[110,136,113,130,125,0,129,114,118,135,127,142,115],
[114,127,113,126,113,122,0,110,122,108,118,107,115],
[148,145,116,134,133,137,141,0,147,118,137,145,137],
[125,141,122,127,128,133,129,104,0,126,125,122,134],
[114,140,121,129,125,116,143,133,125,0,146,130,115],
[121,141,105,126,125,124,133,114,126,105,0,113,112],
[126,147,127,119,118,109,144,106,129,121,138,0,129],
[115,134,113,138,121,136,136,114,117,136,139,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 2, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,161,156,189,183,177,178,184,121,197,171,127],
[126,0,177,111,144,166,137,138,158,76,110,131,66],
[90,74,0,76,109,72,125,41,90,81,133,95,81],
[95,140,175,0,167,162,225,150,114,168,143,150,133],
[62,107,142,84,0,69,160,103,149,83,138,96,38],
[68,85,179,89,182,0,136,135,158,80,138,114,66],
[74,114,126,26,91,115,0,110,100,60,129,108,57],
[73,113,210,101,148,116,141,0,162,142,123,109,85],
[67,93,161,137,102,93,151,89,0,102,136,162,128],
[130,175,170,83,168,171,191,109,149,0,168,135,120],
[54,141,118,108,113,113,122,128,115,83,0,93,118],
[80,120,156,101,155,137,143,142,89,116,158,0,101],
[124,185,170,118,213,185,194,166,123,131,133,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 3, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,142,122,102,140,121,135,128,148,105,146,155],
[129,0,134,81,98,124,128,136,127,138,135,137,136],
[109,117,0,107,99,139,121,123,106,137,117,121,128],
[129,170,144,0,119,154,138,138,131,133,125,145,149],
[149,153,152,132,0,163,149,175,122,156,151,144,140],
[111,127,112,97,88,0,122,128,116,145,115,109,131],
[130,123,130,113,102,129,0,140,132,147,126,139,158],
[116,115,128,113,76,123,111,0,118,135,113,110,133],
[123,124,145,120,129,135,119,133,0,165,152,134,149],
[103,113,114,118,95,106,104,116,86,0,110,119,149],
[146,116,134,126,100,136,125,138,99,141,0,127,160],
[105,114,130,106,107,142,112,141,117,132,124,0,146],
[96,115,123,102,111,120,93,118,102,102,91,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 4, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,114,124,126,116,116,118,117,113,117,119,110],
[143,0,134,133,131,129,139,141,127,124,125,129,122],
[137,117,0,109,115,122,121,116,118,115,110,111,121],
[127,118,142,0,118,116,140,124,126,118,119,128,130],
[125,120,136,133,0,126,121,117,118,123,114,120,116],
[135,122,129,135,125,0,123,128,111,117,118,126,129],
[135,112,130,111,130,128,0,135,126,112,114,126,124],
[133,110,135,127,134,123,116,0,114,110,122,125,118],
[134,124,133,125,133,140,125,137,0,112,122,121,121],
[138,127,136,133,128,134,139,141,139,0,134,132,113],
[134,126,141,132,137,133,137,129,129,117,0,133,129],
[132,122,140,123,131,125,125,126,130,119,118,0,122],
[141,129,130,121,135,122,127,133,130,138,122,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 5, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,129,131,123,132,125,134,148,129,137,133,129],
[126,0,105,127,106,98,106,125,115,112,110,123,115],
[122,146,0,139,121,127,138,130,125,114,135,135,126],
[120,124,112,0,113,116,125,136,113,112,122,122,110],
[128,145,130,138,0,116,132,148,132,137,134,145,121],
[119,153,124,135,135,0,134,139,136,120,126,141,130],
[126,145,113,126,119,117,0,121,126,118,130,119,117],
[117,126,121,115,103,112,130,0,110,115,132,125,112],
[103,136,126,138,119,115,125,141,0,122,118,130,114],
[122,139,137,139,114,131,133,136,129,0,137,149,125],
[114,141,116,129,117,125,121,119,133,114,0,152,121],
[118,128,116,129,106,110,132,126,121,102,99,0,102],
[122,136,125,141,130,121,134,139,137,126,130,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 6, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,134,150,148,151,125,157,132,112,131,135,130],
[129,0,130,128,123,117,127,145,129,106,168,121,111],
[117,121,0,96,107,120,129,123,120,105,139,120,104],
[101,123,155,0,126,131,114,110,135,127,132,107,119],
[103,128,144,125,0,147,127,124,104,91,139,93,111],
[100,134,131,120,104,0,102,130,122,85,143,116,110],
[126,124,122,137,124,149,0,131,144,135,159,111,141],
[94,106,128,141,127,121,120,0,125,113,148,104,104],
[119,122,131,116,147,129,107,126,0,120,134,118,110],
[139,145,146,124,160,166,116,138,131,0,172,129,126],
[120,83,112,119,112,108,92,103,117,79,0,88,114],
[116,130,131,144,158,135,140,147,133,122,163,0,132],
[121,140,147,132,140,141,110,147,141,125,137,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 7, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,96,115,113,105,118,112,111,107,113,92,106],
[140,0,104,117,118,126,112,133,141,105,121,111,130],
[155,147,0,134,138,142,130,143,141,132,115,135,132],
[136,134,117,0,129,137,122,142,119,129,123,125,128],
[138,133,113,122,0,141,115,127,122,118,115,126,135],
[146,125,109,114,110,0,115,129,128,122,111,125,101],
[133,139,121,129,136,136,0,132,126,120,130,136,125],
[139,118,108,109,124,122,119,0,131,108,115,117,123],
[140,110,110,132,129,123,125,120,0,109,112,125,115],
[144,146,119,122,133,129,131,143,142,0,123,137,128],
[138,130,136,128,136,140,121,136,139,128,0,131,127],
[159,140,116,126,125,126,115,134,126,114,120,0,123],
[145,121,119,123,116,150,126,128,136,123,124,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 8, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,118,130,117,119,117,133,121,133,117,130,138],
[130,0,119,127,124,137,127,138,129,133,124,135,135],
[133,132,0,120,132,130,131,145,129,132,125,135,140],
[121,124,131,0,118,120,122,130,118,122,118,136,126],
[134,127,119,133,0,124,134,137,124,132,137,143,132],
[132,114,121,131,127,0,123,139,121,128,125,137,125],
[134,124,120,129,117,128,0,141,115,123,117,135,128],
[118,113,106,121,114,112,110,0,106,116,115,122,123],
[130,122,122,133,127,130,136,145,0,124,129,138,134],
[118,118,119,129,119,123,128,135,127,0,129,141,119],
[134,127,126,133,114,126,134,136,122,122,0,130,127],
[121,116,116,115,108,114,116,129,113,110,121,0,126],
[113,116,111,125,119,126,123,128,117,132,124,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 9, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,137,128,142,154,119,121,118,130,123,120,115],
[152,0,140,156,143,174,150,121,143,151,159,140,122],
[114,111,0,127,126,150,121,105,128,128,124,126,109],
[123,95,124,0,134,134,123,118,125,143,129,113,120],
[109,108,125,117,0,135,116,88,129,128,107,109,122],
[97,77,101,117,116,0,102,88,117,106,124,106,107],
[132,101,130,128,135,149,0,133,141,135,134,127,120],
[130,130,146,133,163,163,118,0,148,152,148,132,135],
[133,108,123,126,122,134,110,103,0,144,112,127,105],
[121,100,123,108,123,145,116,99,107,0,95,127,130],
[128,92,127,122,144,127,117,103,139,156,0,130,124],
[131,111,125,138,142,145,124,119,124,124,121,0,107],
[136,129,142,131,129,144,131,116,146,121,127,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 10, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,85,127,151,123,125,155,90,96,124,122,106],
[85,0,93,151,157,167,112,150,126,89,167,146,88],
[166,158,0,185,163,162,212,204,156,121,185,147,146],
[124,100,66,0,155,109,103,140,74,39,104,109,63],
[100,94,88,96,0,117,91,143,96,96,118,100,57],
[128,84,89,142,134,0,135,138,122,93,146,107,124],
[126,139,39,148,160,116,0,158,101,49,126,102,95],
[96,101,47,111,108,113,93,0,98,56,127,83,81],
[161,125,95,177,155,129,150,153,0,86,170,143,109],
[155,162,130,212,155,158,202,195,165,0,189,168,125],
[127,84,66,147,133,105,125,124,81,62,0,94,123],
[129,105,104,142,151,144,149,168,108,83,157,0,109],
[145,163,105,188,194,127,156,170,142,126,128,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 11, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,136,132,149,152,148,159,155,148,113,131,135],
[113,0,109,118,127,128,143,134,113,131,115,128,136],
[115,142,0,131,149,137,139,150,145,133,140,140,128],
[119,133,120,0,143,134,135,127,133,124,112,149,115],
[102,124,102,108,0,141,130,116,123,102,97,127,97],
[99,123,114,117,110,0,131,127,117,105,111,134,97],
[103,108,112,116,121,120,0,108,97,125,102,120,115],
[92,117,101,124,135,124,143,0,125,133,129,153,124],
[96,138,106,118,128,134,154,126,0,137,101,128,120],
[103,120,118,127,149,146,126,118,114,0,115,148,115],
[138,136,111,139,154,140,149,122,150,136,0,144,146],
[120,123,111,102,124,117,131,98,123,103,107,0,120],
[116,115,123,136,154,154,136,127,131,136,105,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 12, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,107,115,121,109,111,115,129,122,115,122,103],
[128,0,125,114,118,136,128,113,115,131,116,127,121],
[144,126,0,130,141,141,125,135,126,141,125,146,126],
[136,137,121,0,133,133,119,129,131,134,132,143,130],
[130,133,110,118,0,133,116,122,128,130,119,130,123],
[142,115,110,118,118,0,125,128,118,122,118,115,120],
[140,123,126,132,135,126,0,128,136,139,118,124,128],
[136,138,116,122,129,123,123,0,125,130,112,121,118],
[122,136,125,120,123,133,115,126,0,136,114,128,122],
[129,120,110,117,121,129,112,121,115,0,102,120,122],
[136,135,126,119,132,133,133,139,137,149,0,124,131],
[129,124,105,108,121,136,127,130,123,131,127,0,134],
[148,130,125,121,128,131,123,133,129,129,120,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 13, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,135,123,144,134,112,124,116,125,118,122,127],
[127,0,127,121,138,133,120,131,125,135,130,123,131],
[116,124,0,129,127,122,111,124,121,119,112,115,125],
[128,130,122,0,137,132,115,131,126,135,118,120,128],
[107,113,124,114,0,121,109,121,111,130,117,114,115],
[117,118,129,119,130,0,115,116,116,123,113,124,120],
[139,131,140,136,142,136,0,126,135,143,127,128,119],
[127,120,127,120,130,135,125,0,125,122,113,113,127],
[135,126,130,125,140,135,116,126,0,135,120,125,127],
[126,116,132,116,121,128,108,129,116,0,118,111,116],
[133,121,139,133,134,138,124,138,131,133,0,123,129],
[129,128,136,131,137,127,123,138,126,140,128,0,128],
[124,120,126,123,136,131,132,124,124,135,122,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 14, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,140,126,140,136,141,131,146,138,134,136,130],
[132,0,141,115,138,142,142,143,144,142,139,133,142],
[111,110,0,123,133,141,135,112,136,124,117,113,128],
[125,136,128,0,148,133,142,130,143,121,133,132,136],
[111,113,118,103,0,128,132,114,126,105,115,117,128],
[115,109,110,118,123,0,123,122,120,114,131,119,126],
[110,109,116,109,119,128,0,124,114,121,110,110,113],
[120,108,139,121,137,129,127,0,130,128,117,120,134],
[105,107,115,108,125,131,137,121,0,128,124,109,138],
[113,109,127,130,146,137,130,123,123,0,128,133,133],
[117,112,134,118,136,120,141,134,127,123,0,112,141],
[115,118,138,119,134,132,141,131,142,118,139,0,135],
[121,109,123,115,123,125,138,117,113,118,110,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 15, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,102,109,108,109,105,112,124,100,125,122,124],
[139,0,125,126,129,134,123,119,143,121,135,134,141],
[149,126,0,121,130,131,130,124,130,124,139,135,137],
[142,125,130,0,123,126,126,118,127,117,125,131,138],
[143,122,121,128,0,133,113,124,133,106,135,132,136],
[142,117,120,125,118,0,129,114,136,105,143,131,131],
[146,128,121,125,138,122,0,130,133,129,139,128,149],
[139,132,127,133,127,137,121,0,139,112,147,136,134],
[127,108,121,124,118,115,118,112,0,109,129,122,122],
[151,130,127,134,145,146,122,139,142,0,143,141,148],
[126,116,112,126,116,108,112,104,122,108,0,121,118],
[129,117,116,120,119,120,123,115,129,110,130,0,130],
[127,110,114,113,115,120,102,117,129,103,133,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 16, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,124,156,134,154,159,141,152,150,146,127,148],
[108,0,110,115,110,113,117,98,98,110,101,98,102],
[127,141,0,140,139,133,149,138,147,142,135,122,133],
[95,136,111,0,113,129,100,107,123,140,119,109,106],
[117,141,112,138,0,128,129,109,124,137,120,103,124],
[97,138,118,122,123,0,134,111,137,127,117,104,125],
[92,134,102,151,122,117,0,123,118,133,99,121,123],
[110,153,113,144,142,140,128,0,152,141,127,118,139],
[99,153,104,128,127,114,133,99,0,124,110,121,115],
[101,141,109,111,114,124,118,110,127,0,99,116,105],
[105,150,116,132,131,134,152,124,141,152,0,115,150],
[124,153,129,142,148,147,130,133,130,135,136,0,147],
[103,149,118,145,127,126,128,112,136,146,101,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 17, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,169,130,131,162,167,136,174,133,152,128,173],
[142,0,162,135,144,157,156,102,150,155,106,172,204],
[82,89,0,107,109,161,145,112,132,85,112,121,134],
[121,116,144,0,101,170,159,96,133,116,97,118,179],
[120,107,142,150,0,177,139,106,140,114,141,125,193],
[89,94,90,81,74,0,116,93,116,67,101,63,99],
[84,95,106,92,112,135,0,57,116,74,118,99,178],
[115,149,139,155,145,158,194,0,179,105,133,117,186],
[77,101,119,118,111,135,135,72,0,90,125,73,153],
[118,96,166,135,137,184,177,146,161,0,128,131,176],
[99,145,139,154,110,150,133,118,126,123,0,153,143],
[123,79,130,133,126,188,152,134,178,120,98,0,152],
[78,47,117,72,58,152,73,65,98,75,108,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 18, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,138,140,124,140,131,151,136,137,133,127,126],
[114,0,123,122,119,120,123,135,130,124,127,102,118],
[113,128,0,114,106,127,125,134,120,115,125,112,128],
[111,129,137,0,117,131,131,126,130,122,132,124,129],
[127,132,145,134,0,140,127,141,126,138,137,125,133],
[111,131,124,120,111,0,125,138,111,130,132,107,122],
[120,128,126,120,124,126,0,137,127,126,125,113,131],
[100,116,117,125,110,113,114,0,115,117,124,102,115],
[115,121,131,121,125,140,124,136,0,125,131,111,123],
[114,127,136,129,113,121,125,134,126,0,129,113,128],
[118,124,126,119,114,119,126,127,120,122,0,107,132],
[124,149,139,127,126,144,138,149,140,138,144,0,135],
[125,133,123,122,118,129,120,136,128,123,119,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 19, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,124,128,132,130,109,121,118,126,130,126,124],
[128,0,125,128,141,126,120,122,131,129,121,144,121],
[127,126,0,132,139,128,115,119,124,121,129,129,131],
[123,123,119,0,134,135,116,102,114,112,134,137,117],
[119,110,112,117,0,131,121,111,114,128,121,136,113],
[121,125,123,116,120,0,101,117,111,131,140,129,127],
[142,131,136,135,130,150,0,147,123,139,147,143,128],
[130,129,132,149,140,134,104,0,119,122,132,137,135],
[133,120,127,137,137,140,128,132,0,135,130,145,127],
[125,122,130,139,123,120,112,129,116,0,126,139,128],
[121,130,122,117,130,111,104,119,121,125,0,132,126],
[125,107,122,114,115,122,108,114,106,112,119,0,113],
[127,130,120,134,138,124,123,116,124,123,125,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 20, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,120,128,137,132,134,126,113,134,124,109,152],
[120,0,113,118,120,138,129,126,116,122,121,112,131],
[131,138,0,134,125,140,122,131,110,129,123,118,132],
[123,133,117,0,131,135,124,126,129,135,125,111,140],
[114,131,126,120,0,131,126,118,123,138,129,114,140],
[119,113,111,116,120,0,126,112,113,116,115,111,129],
[117,122,129,127,125,125,0,131,118,130,122,110,151],
[125,125,120,125,133,139,120,0,114,127,120,114,138],
[138,135,141,122,128,138,133,137,0,135,130,126,146],
[117,129,122,116,113,135,121,124,116,0,122,112,139],
[127,130,128,126,122,136,129,131,121,129,0,117,143],
[142,139,133,140,137,140,141,137,125,139,134,0,147],
[99,120,119,111,111,122,100,113,105,112,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 21, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,134,133,135,133,138,120,134,144,122,132,146],
[97,0,110,123,116,115,112,120,119,116,114,106,112],
[117,141,0,122,102,111,118,101,126,123,124,110,142],
[118,128,129,0,131,114,113,117,116,127,130,112,108],
[116,135,149,120,0,125,122,93,119,119,104,117,128],
[118,136,140,137,126,0,116,122,143,118,130,140,140],
[113,139,133,138,129,135,0,128,109,116,140,128,142],
[131,131,150,134,158,129,123,0,119,117,132,140,141],
[117,132,125,135,132,108,142,132,0,133,138,118,136],
[107,135,128,124,132,133,135,134,118,0,136,113,130],
[129,137,127,121,147,121,111,119,113,115,0,115,145],
[119,145,141,139,134,111,123,111,133,138,136,0,138],
[105,139,109,143,123,111,109,110,115,121,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 22, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,105,122,109,125,113,107,118,113,129,120,110],
[133,0,119,135,124,132,123,108,126,117,140,116,126],
[146,132,0,135,128,137,127,122,127,116,138,129,134],
[129,116,116,0,117,124,115,117,115,122,133,117,121],
[142,127,123,134,0,136,123,126,133,135,134,126,133],
[126,119,114,127,115,0,124,117,119,121,136,123,123],
[138,128,124,136,128,127,0,118,135,135,139,120,135],
[144,143,129,134,125,134,133,0,131,140,139,136,136],
[133,125,124,136,118,132,116,120,0,119,129,123,113],
[138,134,135,129,116,130,116,111,132,0,132,117,129],
[122,111,113,118,117,115,112,112,122,119,0,110,113],
[131,135,122,134,125,128,131,115,128,134,141,0,130],
[141,125,117,130,118,128,116,115,138,122,138,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 23, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,127,119,122,121,120,130,125,125,130,121,108],
[130,0,119,128,131,120,132,130,130,141,133,127,125],
[124,132,0,120,133,117,131,132,130,137,145,130,122],
[132,123,131,0,120,125,117,137,128,123,125,123,113],
[129,120,118,131,0,123,121,140,123,123,140,117,128],
[130,131,134,126,128,0,133,138,136,139,136,128,124],
[131,119,120,134,130,118,0,138,115,134,147,116,121],
[121,121,119,114,111,113,113,0,124,126,128,113,113],
[126,121,121,123,128,115,136,127,0,130,126,120,119],
[126,110,114,128,128,112,117,125,121,0,126,111,118],
[121,118,106,126,111,115,104,123,125,125,0,111,118],
[130,124,121,128,134,123,135,138,131,140,140,0,123],
[143,126,129,138,123,127,130,138,132,133,133,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 24, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,137,156,138,134,132,132,130,121,129,131,106],
[106,0,141,135,112,122,103,125,126,114,126,128,116],
[114,110,0,126,108,143,128,121,123,112,108,124,99],
[95,116,125,0,86,120,116,115,119,93,99,110,104],
[113,139,143,165,0,131,135,127,127,127,138,136,129],
[117,129,108,131,120,0,135,130,123,136,135,129,137],
[119,148,123,135,116,116,0,123,109,91,125,121,118],
[119,126,130,136,124,121,128,0,136,104,142,123,113],
[121,125,128,132,124,128,142,115,0,118,118,123,125],
[130,137,139,158,124,115,160,147,133,0,137,130,124],
[122,125,143,152,113,116,126,109,133,114,0,120,90],
[120,123,127,141,115,122,130,128,128,121,131,0,125],
[145,135,152,147,122,114,133,138,126,127,161,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 25, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,119,121,127,119,113,113,116,122,106,126],
[145,0,125,127,134,137,130,112,123,126,117,114,118],
[142,126,0,120,127,121,125,117,129,133,116,119,138],
[132,124,131,0,136,125,119,114,132,125,125,119,135],
[130,117,124,115,0,115,113,113,117,120,120,109,118],
[124,114,130,126,136,0,127,126,121,135,120,118,132],
[132,121,126,132,138,124,0,120,116,126,123,123,136],
[138,139,134,137,138,125,131,0,147,135,134,133,130],
[138,128,122,119,134,130,135,104,0,126,116,121,123],
[135,125,118,126,131,116,125,116,125,0,110,111,126],
[129,134,135,126,131,131,128,117,135,141,0,128,132],
[145,137,132,132,142,133,128,118,130,140,123,0,132],
[125,133,113,116,133,119,115,121,128,125,119,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 26, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,126,125,123,136,120,117,109,116,138,123,123],
[137,0,129,121,131,141,143,118,139,121,150,121,133],
[125,122,0,131,138,137,124,100,130,129,127,128,144],
[126,130,120,0,118,120,142,113,119,116,135,119,137],
[128,120,113,133,0,131,135,122,107,114,144,125,136],
[115,110,114,131,120,0,132,99,106,119,120,118,121],
[131,108,127,109,116,119,0,120,121,105,129,114,119],
[134,133,151,138,129,152,131,0,133,124,133,134,144],
[142,112,121,132,144,145,130,118,0,119,143,133,150],
[135,130,122,135,137,132,146,127,132,0,147,123,139],
[113,101,124,116,107,131,122,118,108,104,0,115,134],
[128,130,123,132,126,133,137,117,118,128,136,0,143],
[128,118,107,114,115,130,132,107,101,112,117,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 27, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,135,119,134,118,116,119,121,133,124,145,134],
[128,0,131,103,130,128,108,107,130,138,146,143,134],
[116,120,0,110,137,126,112,115,117,128,106,144,127],
[132,148,141,0,150,133,117,119,135,153,135,144,136],
[117,121,114,101,0,117,106,101,109,102,112,156,124],
[133,123,125,118,134,0,115,137,129,131,144,147,128],
[135,143,139,134,145,136,0,125,142,127,139,164,140],
[132,144,136,132,150,114,126,0,142,137,144,173,142],
[130,121,134,116,142,122,109,109,0,142,132,144,131],
[118,113,123,98,149,120,124,114,109,0,102,128,117],
[127,105,145,116,139,107,112,107,119,149,0,131,118],
[106,108,107,107,95,104,87,78,107,123,120,0,114],
[117,117,124,115,127,123,111,109,120,134,133,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 28, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,93,154,129,121,143,132,117,153,114,110,140],
[123,0,74,133,128,115,157,132,137,163,121,127,120],
[158,177,0,156,151,123,160,163,139,157,144,115,145],
[97,118,95,0,109,89,127,134,113,100,123,108,135],
[122,123,100,142,0,112,143,116,133,123,133,109,127],
[130,136,128,162,139,0,137,148,143,148,115,118,152],
[108,94,91,124,108,114,0,121,109,113,90,100,131],
[119,119,88,117,135,103,130,0,125,133,99,127,135],
[134,114,112,138,118,108,142,126,0,147,93,132,149],
[98,88,94,151,128,103,138,118,104,0,109,100,121],
[137,130,107,128,118,136,161,152,158,142,0,120,164],
[141,124,136,143,142,133,151,124,119,151,131,0,160],
[111,131,106,116,124,99,120,116,102,130,87,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 29, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,130,132,136,120,125,126,132,140,126,142,138],
[136,0,154,146,137,142,134,144,124,146,122,142,141],
[121,97,0,117,120,122,110,104,118,123,91,118,111],
[119,105,134,0,118,126,107,125,119,126,120,118,128],
[115,114,131,133,0,121,110,130,125,132,115,127,128],
[131,109,129,125,130,0,119,125,112,143,118,119,123],
[126,117,141,144,141,132,0,126,133,126,119,141,134],
[125,107,147,126,121,126,125,0,121,138,124,133,141],
[119,127,133,132,126,139,118,130,0,124,133,130,131],
[111,105,128,125,119,108,125,113,127,0,98,125,129],
[125,129,160,131,136,133,132,127,118,153,0,139,141],
[109,109,133,133,124,132,110,118,121,126,112,0,126],
[113,110,140,123,123,128,117,110,120,122,110,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 30, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,152,138,144,143,124,139,130,141,134,146,147],
[121,0,130,118,133,127,121,117,123,136,133,130,135],
[99,121,0,123,126,121,111,117,112,123,116,122,126],
[113,133,128,0,132,122,131,124,126,125,129,148,140],
[107,118,125,119,0,127,111,122,112,131,125,131,141],
[108,124,130,129,124,0,114,133,128,125,129,132,147],
[127,130,140,120,140,137,0,129,129,135,135,143,141],
[112,134,134,127,129,118,122,0,121,133,127,146,132],
[121,128,139,125,139,123,122,130,0,130,127,139,146],
[110,115,128,126,120,126,116,118,121,0,120,138,134],
[117,118,135,122,126,122,116,124,124,131,0,136,140],
[105,121,129,103,120,119,108,105,112,113,115,0,129],
[104,116,125,111,110,104,110,119,105,117,111,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 31, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,136,121,119,122,127,128,123,118,123,131,119],
[120,0,137,127,118,122,132,129,132,123,124,129,116],
[115,114,0,129,113,121,127,124,131,128,128,122,120],
[130,124,122,0,117,131,130,134,129,124,119,131,127],
[132,133,138,134,0,123,139,123,141,130,129,119,129],
[129,129,130,120,128,0,134,134,133,124,130,138,122],
[124,119,124,121,112,117,0,122,130,115,112,104,126],
[123,122,127,117,128,117,129,0,122,127,120,116,122],
[128,119,120,122,110,118,121,129,0,116,119,117,103],
[133,128,123,127,121,127,136,124,135,0,109,123,118],
[128,127,123,132,122,121,139,131,132,142,0,139,121],
[120,122,129,120,132,113,147,135,134,128,112,0,119],
[132,135,131,124,122,129,125,129,148,133,130,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 32, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,97,132,94,130,101,97,117,120,108,118,99],
[126,0,121,144,128,136,144,119,133,159,133,139,130],
[154,130,0,154,114,145,139,104,127,140,143,133,129],
[119,107,97,0,120,130,124,129,126,140,111,144,137],
[157,123,137,131,0,149,124,116,123,148,120,142,135],
[121,115,106,121,102,0,121,110,115,128,125,131,107],
[150,107,112,127,127,130,0,103,126,128,119,135,123],
[154,132,147,122,135,141,148,0,151,136,133,139,143],
[134,118,124,125,128,136,125,100,0,146,127,138,136],
[131,92,111,111,103,123,123,115,105,0,108,122,112],
[143,118,108,140,131,126,132,118,124,143,0,126,135],
[133,112,118,107,109,120,116,112,113,129,125,0,122],
[152,121,122,114,116,144,128,108,115,139,116,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 33, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,129,136,115,115,113,117,130,110,119,116,128],
[149,0,145,147,130,135,134,121,141,125,133,141,143],
[122,106,0,130,108,110,111,124,135,101,117,123,127],
[115,104,121,0,110,123,112,105,120,97,113,121,116],
[136,121,143,141,0,133,135,121,138,122,125,129,145],
[136,116,141,128,118,0,126,115,132,131,135,129,133],
[138,117,140,139,116,125,0,126,127,120,128,133,138],
[134,130,127,146,130,136,125,0,132,120,133,134,139],
[121,110,116,131,113,119,124,119,0,115,111,115,127],
[141,126,150,154,129,120,131,131,136,0,130,144,134],
[132,118,134,138,126,116,123,118,140,121,0,124,134],
[135,110,128,130,122,122,118,117,136,107,127,0,130],
[123,108,124,135,106,118,113,112,124,117,117,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 34, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,157,115,100,70,155,181,121,150,115,102],
[143,0,80,173,90,50,97,155,130,110,134,85,128],
[145,171,0,205,115,127,82,155,228,134,170,110,112],
[94,78,46,0,59,28,61,82,59,122,59,42,61],
[136,161,136,192,0,121,83,182,238,138,158,148,98],
[151,201,124,223,130,0,132,155,182,165,134,116,153],
[181,154,169,190,168,119,0,222,209,109,155,165,156],
[96,96,96,169,69,96,29,0,159,120,109,90,71],
[70,121,23,192,13,69,42,92,0,119,66,17,32],
[130,141,117,129,113,86,142,131,132,0,78,113,132],
[101,117,81,192,93,117,96,142,185,173,0,89,112],
[136,166,141,209,103,135,86,161,234,138,162,0,124],
[149,123,139,190,153,98,95,180,219,119,139,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 35, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,94,124,105,111,132,93,104,111,120,105,98],
[134,0,114,137,130,122,130,116,133,116,117,112,102],
[157,137,0,146,129,121,157,126,123,136,131,121,124],
[127,114,105,0,113,117,125,117,120,111,127,91,112],
[146,121,122,138,0,114,143,127,122,123,134,135,125],
[140,129,130,134,137,0,129,128,131,140,128,116,119],
[119,121,94,126,108,122,0,97,124,122,120,109,106],
[158,135,125,134,124,123,154,0,109,142,134,118,126],
[147,118,128,131,129,120,127,142,0,131,129,139,126],
[140,135,115,140,128,111,129,109,120,0,122,121,113],
[131,134,120,124,117,123,131,117,122,129,0,118,113],
[146,139,130,160,116,135,142,133,112,130,133,0,124],
[153,149,127,139,126,132,145,125,125,138,138,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 36, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,132,122,127,128,126,123,118,125,122,133,115],
[133,0,130,129,130,123,136,122,127,137,126,143,117],
[119,121,0,125,119,127,126,120,119,118,120,130,115],
[129,122,126,0,131,115,126,115,123,137,118,146,128],
[124,121,132,120,0,106,112,116,115,118,124,125,115],
[123,128,124,136,145,0,137,129,122,135,125,132,114],
[125,115,125,125,139,114,0,113,120,121,129,128,123],
[128,129,131,136,135,122,138,0,129,132,129,140,136],
[133,124,132,128,136,129,131,122,0,130,129,142,128],
[126,114,133,114,133,116,130,119,121,0,126,126,117],
[129,125,131,133,127,126,122,122,122,125,0,130,124],
[118,108,121,105,126,119,123,111,109,125,121,0,114],
[136,134,136,123,136,137,128,115,123,134,127,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 37, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,105,108,122,124,122,117,108,121,122,142,113],
[133,0,115,127,131,133,138,126,119,137,131,131,114],
[146,136,0,116,142,130,136,124,130,133,129,148,128],
[143,124,135,0,136,138,141,120,134,138,135,149,140],
[129,120,109,115,0,117,137,121,120,127,120,132,130],
[127,118,121,113,134,0,126,113,118,126,139,143,130],
[129,113,115,110,114,125,0,116,123,119,125,125,117],
[134,125,127,131,130,138,135,0,126,143,134,147,130],
[143,132,121,117,131,133,128,125,0,127,120,154,129],
[130,114,118,113,124,125,132,108,124,0,124,120,115],
[129,120,122,116,131,112,126,117,131,127,0,131,123],
[109,120,103,102,119,108,126,104,97,131,120,0,114],
[138,137,123,111,121,121,134,121,122,136,128,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 38, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,122,133,125,133,132,129,122,129,130,130,126],
[133,0,124,135,123,125,126,133,121,126,140,116,136],
[129,127,0,135,118,134,131,127,119,132,131,134,126],
[118,116,116,0,114,116,111,122,111,131,130,130,120],
[126,128,133,137,0,128,129,134,129,135,136,130,123],
[118,126,117,135,123,0,129,129,120,141,127,124,132],
[119,125,120,140,122,122,0,127,116,123,135,125,132],
[122,118,124,129,117,122,124,0,119,126,123,116,121],
[129,130,132,140,122,131,135,132,0,130,130,128,142],
[122,125,119,120,116,110,128,125,121,0,127,118,121],
[121,111,120,121,115,124,116,128,121,124,0,122,119],
[121,135,117,121,121,127,126,135,123,133,129,0,124],
[125,115,125,131,128,119,119,130,109,130,132,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 39, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,151,167,131,193,153,130,120,136,121,162],
[148,0,145,107,134,183,185,142,139,75,138,87,132],
[141,106,0,95,160,200,179,155,182,106,151,139,160],
[100,144,156,0,132,130,183,124,138,135,141,117,186],
[84,117,91,119,0,135,171,133,127,98,131,89,101],
[120,68,51,121,116,0,112,134,95,111,128,121,130],
[58,66,72,68,80,139,0,126,101,76,72,67,118],
[98,109,96,127,118,117,125,0,148,139,136,136,101],
[121,112,69,113,124,156,150,103,0,106,141,135,141],
[131,176,145,116,153,140,175,112,145,0,169,120,125],
[115,113,100,110,120,123,179,115,110,82,0,76,159],
[130,164,112,134,162,130,184,115,116,131,175,0,132],
[89,119,91,65,150,121,133,150,110,126,92,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 40, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,113,120,92,100,72,92,44,113,120,100,141],
[179,0,201,173,207,112,68,129,88,109,173,116,157],
[138,50,0,132,166,112,40,88,40,81,182,96,137],
[131,78,119,0,138,96,68,89,0,109,98,28,97],
[159,44,85,113,0,112,84,61,0,81,92,100,69],
[151,139,139,155,139,0,60,61,61,179,139,89,89],
[179,183,211,183,167,191,0,139,139,207,183,161,117],
[159,122,163,162,190,190,112,0,84,159,182,140,97],
[207,163,211,251,251,190,112,167,0,159,211,181,117],
[138,142,170,142,170,72,44,92,92,0,142,120,120],
[131,78,69,153,159,112,68,69,40,109,0,68,69],
[151,135,155,223,151,162,90,111,70,131,183,0,139],
[110,94,114,154,182,162,134,154,134,131,182,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 41, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,119,116,136,122,124,110,126,125,122,108,133],
[126,0,114,128,125,119,118,115,128,122,123,108,126],
[132,137,0,122,128,125,132,125,133,123,131,119,129],
[135,123,129,0,137,130,125,117,135,121,132,121,130],
[115,126,123,114,0,136,122,118,123,122,126,112,125],
[129,132,126,121,115,0,123,113,129,117,137,123,132],
[127,133,119,126,129,128,0,126,136,126,132,112,137],
[141,136,126,134,133,138,125,0,147,129,138,121,134],
[125,123,118,116,128,122,115,104,0,118,114,102,121],
[126,129,128,130,129,134,125,122,133,0,125,128,128],
[129,128,120,119,125,114,119,113,137,126,0,120,124],
[143,143,132,130,139,128,139,130,149,123,131,0,120],
[118,125,122,121,126,119,114,117,130,123,127,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 42, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,141,118,127,112,124,112,109,125,113,122,108],
[146,0,147,130,131,124,130,110,103,126,114,131,123],
[110,104,0,103,99,96,109,107,98,117,107,119,116],
[133,121,148,0,133,129,125,116,104,131,116,134,119],
[124,120,152,118,0,110,113,120,128,128,115,134,114],
[139,127,155,122,141,0,129,122,125,143,130,130,137],
[127,121,142,126,138,122,0,122,110,127,112,131,127],
[139,141,144,135,131,129,129,0,127,141,125,141,114],
[142,148,153,147,123,126,141,124,0,134,138,129,124],
[126,125,134,120,123,108,124,110,117,0,109,127,112],
[138,137,144,135,136,121,139,126,113,142,0,122,127],
[129,120,132,117,117,121,120,110,122,124,129,0,124],
[143,128,135,132,137,114,124,137,127,139,124,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 43, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,104,142,125,132,128,121,122,119,128,133,127],
[133,0,125,136,121,134,145,134,141,122,135,142,136],
[147,126,0,146,121,136,158,140,128,128,148,134,140],
[109,115,105,0,131,137,135,127,131,118,119,133,133],
[126,130,130,120,0,146,145,135,114,119,123,138,133],
[119,117,115,114,105,0,134,130,109,111,127,132,116],
[123,106,93,116,106,117,0,119,107,99,115,115,121],
[130,117,111,124,116,121,132,0,118,117,125,137,132],
[129,110,123,120,137,142,144,133,0,120,130,137,136],
[132,129,123,133,132,140,152,134,131,0,120,146,124],
[123,116,103,132,128,124,136,126,121,131,0,136,120],
[118,109,117,118,113,119,136,114,114,105,115,0,122],
[124,115,111,118,118,135,130,119,115,127,131,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 44, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,118,122,120,116,135,132,112,124,111,122,126],
[113,0,119,116,118,113,120,131,113,129,122,125,125],
[133,132,0,128,144,129,119,149,132,132,128,136,133],
[129,135,123,0,127,128,120,140,112,134,111,119,120],
[131,133,107,124,0,114,133,125,113,113,117,129,126],
[135,138,122,123,137,0,130,151,127,132,122,135,141],
[116,131,132,131,118,121,0,133,123,130,108,129,145],
[119,120,102,111,126,100,118,0,110,115,110,104,123],
[139,138,119,139,138,124,128,141,0,131,116,127,127],
[127,122,119,117,138,119,121,136,120,0,133,125,136],
[140,129,123,140,134,129,143,141,135,118,0,148,129],
[129,126,115,132,122,116,122,147,124,126,103,0,127],
[125,126,118,131,125,110,106,128,124,115,122,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 45, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,142,133,129,144,142,135,112,135,122,117,145],
[121,0,114,131,137,99,146,138,107,140,109,100,137],
[109,137,0,117,122,124,141,142,113,140,99,122,131],
[118,120,134,0,100,99,134,126,107,152,132,114,131],
[122,114,129,151,0,126,147,144,114,135,145,110,125],
[107,152,127,152,125,0,162,167,126,157,136,106,164],
[109,105,110,117,104,89,0,136,76,105,120,98,107],
[116,113,109,125,107,84,115,0,86,109,99,82,102],
[139,144,138,144,137,125,175,165,0,134,125,145,151],
[116,111,111,99,116,94,146,142,117,0,83,92,89],
[129,142,152,119,106,115,131,152,126,168,0,138,148],
[134,151,129,137,141,145,153,169,106,159,113,0,147],
[106,114,120,120,126,87,144,149,100,162,103,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 46, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,126,117,106,117,108,140,111,107,133,119,107],
[126,0,124,126,111,129,125,154,123,121,148,124,124],
[125,127,0,123,109,126,107,128,118,122,116,115,118],
[134,125,128,0,122,120,114,147,118,118,127,126,117],
[145,140,142,129,0,127,140,161,139,123,129,120,125],
[134,122,125,131,124,0,113,145,115,121,136,101,130],
[143,126,144,137,111,138,0,144,115,122,129,121,123],
[111,97,123,104,90,106,107,0,109,94,113,91,106],
[140,128,133,133,112,136,136,142,0,128,131,117,120],
[144,130,129,133,128,130,129,157,123,0,127,111,124],
[118,103,135,124,122,115,122,138,120,124,0,118,109],
[132,127,136,125,131,150,130,160,134,140,133,0,143],
[144,127,133,134,126,121,128,145,131,127,142,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 47, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,122,123,109,131,131,125,120,131,106,121,123],
[135,0,131,111,109,122,129,140,121,121,111,120,115],
[129,120,0,112,125,136,140,131,121,129,116,126,119],
[128,140,139,0,133,141,146,125,142,143,135,134,137],
[142,142,126,118,0,130,130,139,132,132,126,127,127],
[120,129,115,110,121,0,125,127,118,109,126,114,117],
[120,122,111,105,121,126,0,116,107,117,119,119,121],
[126,111,120,126,112,124,135,0,108,130,115,130,103],
[131,130,130,109,119,133,144,143,0,134,127,135,133],
[120,130,122,108,119,142,134,121,117,0,109,113,111],
[145,140,135,116,125,125,132,136,124,142,0,126,118],
[130,131,125,117,124,137,132,121,116,138,125,0,100],
[128,136,132,114,124,134,130,148,118,140,133,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 48, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,131,140,136,126,132,137,127,134,132,125,126],
[119,0,120,140,126,123,119,133,114,123,119,127,118],
[120,131,0,134,124,123,124,136,109,121,103,119,126],
[111,111,117,0,112,114,105,118,108,111,100,105,109],
[115,125,127,139,0,132,122,136,123,123,118,131,119],
[125,128,128,137,119,0,119,132,119,131,125,126,125],
[119,132,127,146,129,132,0,132,130,117,127,118,126],
[114,118,115,133,115,119,119,0,103,111,121,121,109],
[124,137,142,143,128,132,121,148,0,124,126,132,123],
[117,128,130,140,128,120,134,140,127,0,127,127,127],
[119,132,148,151,133,126,124,130,125,124,0,128,126],
[126,124,132,146,120,125,133,130,119,124,123,0,120],
[125,133,125,142,132,126,125,142,128,124,125,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 49, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,128,116,129,128,129,115,135,128,128,122,128],
[136,0,125,133,132,134,144,134,132,132,140,133,130],
[123,126,0,119,122,130,127,108,122,126,121,125,134],
[135,118,132,0,131,131,127,127,117,137,132,122,129],
[122,119,129,120,0,131,126,122,128,122,132,118,135],
[123,117,121,120,120,0,131,118,115,122,122,119,126],
[122,107,124,124,125,120,0,115,110,124,126,117,117],
[136,117,143,124,129,133,136,0,126,140,134,136,145],
[116,119,129,134,123,136,141,125,0,126,131,123,138],
[123,119,125,114,129,129,127,111,125,0,120,125,120],
[123,111,130,119,119,129,125,117,120,131,0,119,133],
[129,118,126,129,133,132,134,115,128,126,132,0,131],
[123,121,117,122,116,125,134,106,113,131,118,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 50, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,131,130,128,129,108,131,111,130,122,131,122],
[142,0,126,157,141,138,132,130,119,139,149,138,123],
[120,125,0,127,134,133,116,129,111,117,134,117,116],
[121,94,124,0,116,121,120,124,115,123,113,95,125],
[123,110,117,135,0,128,117,130,119,109,123,104,114],
[122,113,118,130,123,0,104,114,121,125,126,114,110],
[143,119,135,131,134,147,0,132,120,124,118,123,133],
[120,121,122,127,121,137,119,0,114,116,115,100,108],
[140,132,140,136,132,130,131,137,0,126,122,126,119],
[121,112,134,128,142,126,127,135,125,0,133,117,105],
[129,102,117,138,128,125,133,136,129,118,0,118,133],
[120,113,134,156,147,137,128,151,125,134,133,0,128],
[129,128,135,126,137,141,118,143,132,146,118,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 51, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,96,144,118,156,130,113,104,149,122,126,100],
[131,0,92,134,137,171,173,126,112,121,130,108,151],
[155,159,0,144,140,150,163,162,123,148,142,123,145],
[107,117,107,0,132,156,161,97,102,134,131,125,125],
[133,114,111,119,0,138,162,128,106,142,121,110,99],
[95,80,101,95,113,0,122,128,105,106,111,91,98],
[121,78,88,90,89,129,0,102,84,117,97,100,113],
[138,125,89,154,123,123,149,0,133,119,135,131,106],
[147,139,128,149,145,146,167,118,0,141,143,127,115],
[102,130,103,117,109,145,134,132,110,0,142,74,73],
[129,121,109,120,130,140,154,116,108,109,0,77,119],
[125,143,128,126,141,160,151,120,124,177,174,0,85],
[151,100,106,126,152,153,138,145,136,178,132,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 52, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,136,123,175,142,119,148,179,140,145,164,135],
[104,0,122,123,156,117,105,94,144,126,86,140,84],
[115,129,0,128,120,147,116,113,144,135,125,125,89],
[128,128,123,0,129,147,127,115,147,128,120,136,90],
[76,95,131,122,0,105,85,112,120,103,74,126,58],
[109,134,104,104,146,0,102,102,132,124,119,119,82],
[132,146,135,124,166,149,0,154,179,136,127,144,106],
[103,157,138,136,139,149,97,0,142,118,129,128,136],
[72,107,107,104,131,119,72,109,0,104,73,119,75],
[111,125,116,123,148,127,115,133,147,0,105,133,120],
[106,165,126,131,177,132,124,122,178,146,0,191,137],
[87,111,126,115,125,132,107,123,132,118,60,0,85],
[116,167,162,161,193,169,145,115,176,131,114,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 53, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,131,115,125,126,122,123,119,127,120,134,127],
[127,0,138,103,135,123,119,122,110,116,124,131,123],
[120,113,0,111,121,128,127,114,116,116,120,132,116],
[136,148,140,0,134,133,136,139,122,137,134,155,134],
[126,116,130,117,0,109,115,115,112,113,122,132,116],
[125,128,123,118,142,0,120,124,119,117,123,142,133],
[129,132,124,115,136,131,0,132,127,136,131,138,118],
[128,129,137,112,136,127,119,0,120,131,124,126,133],
[132,141,135,129,139,132,124,131,0,134,136,152,115],
[124,135,135,114,138,134,115,120,117,0,129,139,128],
[131,127,131,117,129,128,120,127,115,122,0,138,129],
[117,120,119,96,119,109,113,125,99,112,113,0,115],
[124,128,135,117,135,118,133,118,136,123,122,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 54, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,118,123,132,107,118,133,106,123,111,130,134],
[140,0,140,137,150,138,143,142,127,132,116,132,150],
[133,111,0,127,139,131,132,147,109,121,124,132,136],
[128,114,124,0,136,111,124,120,101,136,117,125,137],
[119,101,112,115,0,116,121,120,107,126,126,124,118],
[144,113,120,140,135,0,128,130,116,135,122,135,138],
[133,108,119,127,130,123,0,125,101,129,118,141,133],
[118,109,104,131,131,121,126,0,116,140,107,132,124],
[145,124,142,150,144,135,150,135,0,139,126,137,148],
[128,119,130,115,125,116,122,111,112,0,123,141,134],
[140,135,127,134,125,129,133,144,125,128,0,134,146],
[121,119,119,126,127,116,110,119,114,110,117,0,132],
[117,101,115,114,133,113,118,127,103,117,105,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 55, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,117,121,119,110,123,120,106,136,121,117,125],
[127,0,109,124,114,120,115,124,108,119,122,108,121],
[134,142,0,144,132,125,132,134,126,143,137,130,138],
[130,127,107,0,130,115,118,122,112,133,120,114,120],
[132,137,119,121,0,127,119,118,110,131,129,123,126],
[141,131,126,136,124,0,129,129,115,147,129,130,129],
[128,136,119,133,132,122,0,125,111,126,136,132,137],
[131,127,117,129,133,122,126,0,116,133,130,121,128],
[145,143,125,139,141,136,140,135,0,141,140,138,139],
[115,132,108,118,120,104,125,118,110,0,117,124,113],
[130,129,114,131,122,122,115,121,111,134,0,118,118],
[134,143,121,137,128,121,119,130,113,127,133,0,124],
[126,130,113,131,125,122,114,123,112,138,133,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 56, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,123,111,113,132,105,115,109,107,97,118,117],
[125,0,131,114,123,125,111,125,110,124,100,122,113],
[128,120,0,109,108,131,126,126,111,120,93,116,110],
[140,137,142,0,125,151,129,131,126,127,113,129,130],
[138,128,143,126,0,133,119,131,125,128,115,134,128],
[119,126,120,100,118,0,106,122,106,115,104,113,114],
[146,140,125,122,132,145,0,138,123,127,113,132,137],
[136,126,125,120,120,129,113,0,109,116,104,128,113],
[142,141,140,125,126,145,128,142,0,130,128,135,142],
[144,127,131,124,123,136,124,135,121,0,116,122,123],
[154,151,158,138,136,147,138,147,123,135,0,141,131],
[133,129,135,122,117,138,119,123,116,129,110,0,122],
[134,138,141,121,123,137,114,138,109,128,120,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 57, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,127,135,116,117,118,125,110,126,126,128,130],
[129,0,139,128,124,128,126,130,127,139,127,122,136],
[124,112,0,118,122,128,106,119,114,117,117,129,125],
[116,123,133,0,113,127,117,119,121,129,118,126,117],
[135,127,129,138,0,126,130,121,116,118,118,123,130],
[134,123,123,124,125,0,130,128,114,124,128,120,129],
[133,125,145,134,121,121,0,137,125,131,116,126,140],
[126,121,132,132,130,123,114,0,110,122,120,132,119],
[141,124,137,130,135,137,126,141,0,138,131,138,139],
[125,112,134,122,133,127,120,129,113,0,128,124,133],
[125,124,134,133,133,123,135,131,120,123,0,120,133],
[123,129,122,125,128,131,125,119,113,127,131,0,119],
[121,115,126,134,121,122,111,132,112,118,118,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 58, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,186,137,154,72,101,97,106,191,200,106,87],
[65,0,137,113,65,111,63,99,94,111,113,130,92],
[65,114,0,65,63,74,123,97,46,111,74,84,78],
[114,138,186,0,106,72,95,95,143,143,111,97,78],
[97,186,188,145,0,143,114,97,145,208,159,145,143],
[179,140,177,179,108,0,129,140,97,177,164,116,158],
[150,188,128,156,137,122,0,99,94,148,202,67,115],
[154,152,154,156,154,111,152,0,157,200,202,130,92],
[145,157,205,108,106,154,157,94,0,191,154,125,186],
[60,140,140,108,43,74,103,51,60,0,71,60,106],
[51,138,177,140,92,87,49,49,97,180,0,116,78],
[145,121,167,154,106,135,184,121,126,191,135,0,167],
[164,159,173,173,108,93,136,159,65,145,173,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 59, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,140,111,116,132,123,115,120,130,119,115,125],
[145,0,146,116,122,142,129,121,130,126,138,114,129],
[111,105,0,109,101,128,101,99,106,121,119,104,121],
[140,135,142,0,121,129,121,118,130,143,146,131,128],
[135,129,150,130,0,138,124,111,117,136,127,124,125],
[119,109,123,122,113,0,112,106,103,106,132,126,110],
[128,122,150,130,127,139,0,131,123,129,135,133,127],
[136,130,152,133,140,145,120,0,126,139,135,129,141],
[131,121,145,121,134,148,128,125,0,130,140,127,132],
[121,125,130,108,115,145,122,112,121,0,126,119,126],
[132,113,132,105,124,119,116,116,111,125,0,120,127],
[136,137,147,120,127,125,118,122,124,132,131,0,127],
[126,122,130,123,126,141,124,110,119,125,124,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 60, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,125,104,129,122,126,125,116,124,135,129,131],
[119,0,138,122,126,130,122,132,133,118,126,124,134],
[126,113,0,108,126,140,119,125,128,120,129,126,117],
[147,129,143,0,139,143,128,137,145,121,148,143,139],
[122,125,125,112,0,139,124,126,127,112,141,124,125],
[129,121,111,108,112,0,109,108,114,114,130,123,110],
[125,129,132,123,127,142,0,120,128,121,122,126,133],
[126,119,126,114,125,143,131,0,122,127,136,129,124],
[135,118,123,106,124,137,123,129,0,116,132,124,120],
[127,133,131,130,139,137,130,124,135,0,138,127,131],
[116,125,122,103,110,121,129,115,119,113,0,122,114],
[122,127,125,108,127,128,125,122,127,124,129,0,125],
[120,117,134,112,126,141,118,127,131,120,137,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 61, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,150,131,116,136,133,152,140,130,131,138,124],
[109,0,130,137,128,121,138,163,134,128,118,122,123],
[101,121,0,113,92,118,125,151,127,125,104,111,111],
[120,114,138,0,119,138,137,141,136,107,118,112,119],
[135,123,159,132,0,125,138,143,136,153,145,125,133],
[115,130,133,113,126,0,131,154,129,119,132,103,118],
[118,113,126,114,113,120,0,137,128,127,108,121,109],
[99,88,100,110,108,97,114,0,123,106,112,96,90],
[111,117,124,115,115,122,123,128,0,133,119,114,126],
[121,123,126,144,98,132,124,145,118,0,109,119,118],
[120,133,147,133,106,119,143,139,132,142,0,124,124],
[113,129,140,139,126,148,130,155,137,132,127,0,137],
[127,128,140,132,118,133,142,161,125,133,127,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 62, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,112,126,136,144,99,159,104,136,109,107,111],
[140,0,120,139,156,157,115,149,130,151,127,138,116],
[139,131,0,154,161,150,137,154,147,154,122,125,144],
[125,112,97,0,146,147,115,153,131,145,120,128,123],
[115,95,90,105,0,132,103,122,95,127,90,110,95],
[107,94,101,104,119,0,95,119,110,126,110,112,92],
[152,136,114,136,148,156,0,135,130,156,124,139,143],
[92,102,97,98,129,132,116,0,113,141,96,95,78],
[147,121,104,120,156,141,121,138,0,154,126,127,120],
[115,100,97,106,124,125,95,110,97,0,104,92,93],
[142,124,129,131,161,141,127,155,125,147,0,123,129],
[144,113,126,123,141,139,112,156,124,159,128,0,120],
[140,135,107,128,156,159,108,173,131,158,122,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 63, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,118,159,150,138,157,151,158,136,148,151,149],
[109,0,141,136,129,122,149,123,147,127,125,147,132],
[133,110,0,138,122,109,143,144,128,127,132,143,124],
[92,115,113,0,127,124,125,141,151,148,123,125,131],
[101,122,129,124,0,109,125,139,150,145,150,129,133],
[113,129,142,127,142,0,143,149,151,151,143,151,145],
[94,102,108,126,126,108,0,121,123,122,127,128,123],
[100,128,107,110,112,102,130,0,115,108,121,114,129],
[93,104,123,100,101,100,128,136,0,113,138,142,124],
[115,124,124,103,106,100,129,143,138,0,126,132,139],
[103,126,119,128,101,108,124,130,113,125,0,128,130],
[100,104,108,126,122,100,123,137,109,119,123,0,132],
[102,119,127,120,118,106,128,122,127,112,121,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 64, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,168,122,112,134,134,94,144,102,119,94,78],
[124,0,95,98,108,136,85,97,182,138,79,151,138],
[83,156,0,138,134,113,91,165,149,113,61,125,125],
[129,153,113,0,120,69,85,149,172,102,56,155,95],
[139,143,117,131,0,147,114,159,156,156,99,144,95],
[117,115,138,182,104,0,60,119,139,131,98,127,97],
[117,166,160,166,137,191,0,172,170,128,121,165,118],
[157,154,86,102,92,132,79,0,112,100,99,132,90],
[107,69,102,79,95,112,81,139,0,96,91,143,97],
[149,113,138,149,95,120,123,151,155,0,82,130,86],
[132,172,190,195,152,153,130,152,160,169,0,149,108],
[157,100,126,96,107,124,86,119,108,121,102,0,86],
[173,113,126,156,156,154,133,161,154,165,143,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 65, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,113,115,121,129,131,105,113,125,123,124,118],
[132,0,118,133,114,133,142,121,123,131,138,120,123],
[138,133,0,120,128,145,146,121,127,128,137,130,128],
[136,118,131,0,124,143,135,130,134,143,141,129,119],
[130,137,123,127,0,137,130,126,130,127,133,132,132],
[122,118,106,108,114,0,136,113,112,113,122,133,116],
[120,109,105,116,121,115,0,107,110,125,108,113,108],
[146,130,130,121,125,138,144,0,123,126,141,130,122],
[138,128,124,117,121,139,141,128,0,125,145,132,119],
[126,120,123,108,124,138,126,125,126,0,132,114,113],
[128,113,114,110,118,129,143,110,106,119,0,124,113],
[127,131,121,122,119,118,138,121,119,137,127,0,119],
[133,128,123,132,119,135,143,129,132,138,138,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 66, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,144,123,99,105,108,119,129,107,129,133,112],
[148,0,164,130,129,122,132,147,135,130,131,155,115],
[107,87,0,88,96,117,95,110,107,83,102,127,87],
[128,121,163,0,117,119,131,128,117,109,121,147,118],
[152,122,155,134,0,125,128,150,120,142,142,142,126],
[146,129,134,132,126,0,126,131,123,116,160,138,135],
[143,119,156,120,123,125,0,134,129,123,121,133,114],
[132,104,141,123,101,120,117,0,114,123,125,131,109],
[122,116,144,134,131,128,122,137,0,123,137,148,113],
[144,121,168,142,109,135,128,128,128,0,126,156,121],
[122,120,149,130,109,91,130,126,114,125,0,149,117],
[118,96,124,104,109,113,118,120,103,95,102,0,100],
[139,136,164,133,125,116,137,142,138,130,134,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 67, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,122,129,145,128,128,128,134,134,133,128,111],
[117,0,116,126,128,113,114,120,121,119,124,114,103],
[129,135,0,129,152,131,134,130,137,138,134,136,120],
[122,125,122,0,149,111,121,133,134,131,133,127,105],
[106,123,99,102,0,102,110,114,106,105,113,104,84],
[123,138,120,140,149,0,124,139,138,146,145,135,129],
[123,137,117,130,141,127,0,120,134,127,123,127,115],
[123,131,121,118,137,112,131,0,131,121,123,117,115],
[117,130,114,117,145,113,117,120,0,124,125,132,103],
[117,132,113,120,146,105,124,130,127,0,128,120,104],
[118,127,117,118,138,106,128,128,126,123,0,121,115],
[123,137,115,124,147,116,124,134,119,131,130,0,106],
[140,148,131,146,167,122,136,136,148,147,136,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 68, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,121,128,126,129,131,142,116,137,134,142,142],
[111,0,119,94,108,109,108,148,91,97,100,149,125],
[130,132,0,106,133,110,101,136,91,116,106,124,117],
[123,157,145,0,154,163,134,149,132,141,112,156,147],
[125,143,118,97,0,118,105,113,98,117,114,131,108],
[122,142,141,88,133,0,132,142,104,120,143,141,133],
[120,143,150,117,146,119,0,141,106,146,120,138,139],
[109,103,115,102,138,109,110,0,66,117,99,96,111],
[135,160,160,119,153,147,145,185,0,146,158,176,148],
[114,154,135,110,134,131,105,134,105,0,118,146,126],
[117,151,145,139,137,108,131,152,93,133,0,146,135],
[109,102,127,95,120,110,113,155,75,105,105,0,126],
[109,126,134,104,143,118,112,140,103,125,116,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 69, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,116,120,130,100,127,118,111,117,117,105,117],
[146,0,121,142,130,123,147,127,120,137,125,112,117],
[135,130,0,139,139,116,128,144,121,124,126,114,121],
[131,109,112,0,130,111,136,136,109,122,107,125,114],
[121,121,112,121,0,95,124,121,112,105,112,96,122],
[151,128,135,140,156,0,134,134,122,113,139,121,118],
[124,104,123,115,127,117,0,116,94,123,120,114,105],
[133,124,107,115,130,117,135,0,114,114,108,105,119],
[140,131,130,142,139,129,157,137,0,131,123,137,125],
[134,114,127,129,146,138,128,137,120,0,127,111,122],
[134,126,125,144,139,112,131,143,128,124,0,117,129],
[146,139,137,126,155,130,137,146,114,140,134,0,119],
[134,134,130,137,129,133,146,132,126,129,122,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 70, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,122,132,138,134,131,135,150,113,129,125,140],
[123,0,126,125,137,140,127,129,151,130,113,123,136],
[129,125,0,128,143,143,136,138,141,134,128,132,140],
[119,126,123,0,149,141,137,134,133,132,114,115,134],
[113,114,108,102,0,127,106,115,124,103,96,105,126],
[117,111,108,110,124,0,111,118,128,122,105,109,126],
[120,124,115,114,145,140,0,120,132,108,111,113,129],
[116,122,113,117,136,133,131,0,134,129,108,120,128],
[101,100,110,118,127,123,119,117,0,97,97,97,121],
[138,121,117,119,148,129,143,122,154,0,114,118,132],
[122,138,123,137,155,146,140,143,154,137,0,131,150],
[126,128,119,136,146,142,138,131,154,133,120,0,146],
[111,115,111,117,125,125,122,123,130,119,101,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 71, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,124,122,125,119,129,128,126,115,137,133,114],
[118,0,127,122,123,112,127,123,122,112,123,123,116],
[127,124,0,117,118,121,121,121,118,122,127,129,129],
[129,129,134,0,118,124,128,128,127,124,141,139,127],
[126,128,133,133,0,126,141,130,134,125,139,148,129],
[132,139,130,127,125,0,133,136,127,126,134,139,121],
[122,124,130,123,110,118,0,117,123,117,127,122,127],
[123,128,130,123,121,115,134,0,119,110,126,130,113],
[125,129,133,124,117,124,128,132,0,108,135,134,117],
[136,139,129,127,126,125,134,141,143,0,139,138,126],
[114,128,124,110,112,117,124,125,116,112,0,120,118],
[118,128,122,112,103,112,129,121,117,113,131,0,121],
[137,135,122,124,122,130,124,138,134,125,133,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 72, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,132,103,115,114,122,133,128,123,129,136,134],
[129,0,136,123,146,119,141,149,116,138,141,130,133],
[119,115,0,110,132,116,114,115,98,128,130,100,130],
[148,128,141,0,134,141,144,149,118,143,169,142,143],
[136,105,119,117,0,132,125,117,102,122,131,130,124],
[137,132,135,110,119,0,120,128,108,132,122,135,125],
[129,110,137,107,126,131,0,134,109,117,118,116,103],
[118,102,136,102,134,123,117,0,115,111,137,124,122],
[123,135,153,133,149,143,142,136,0,134,151,129,140],
[128,113,123,108,129,119,134,140,117,0,126,127,124],
[122,110,121,82,120,129,133,114,100,125,0,118,118],
[115,121,151,109,121,116,135,127,122,124,133,0,119],
[117,118,121,108,127,126,148,129,111,127,133,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 73, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,108,123,105,113,125,125,123,113,134,91,125],
[138,0,125,122,119,133,131,136,134,125,161,131,133],
[143,126,0,134,119,129,132,129,130,141,149,130,147],
[128,129,117,0,125,128,138,131,139,122,134,113,133],
[146,132,132,126,0,122,145,133,135,131,140,115,141],
[138,118,122,123,129,0,126,110,127,123,135,120,124],
[126,120,119,113,106,125,0,110,116,100,137,109,109],
[126,115,122,120,118,141,141,0,146,125,135,101,131],
[128,117,121,112,116,124,135,105,0,124,146,120,136],
[138,126,110,129,120,128,151,126,127,0,138,111,123],
[117,90,102,117,111,116,114,116,105,113,0,89,124],
[160,120,121,138,136,131,142,150,131,140,162,0,126],
[126,118,104,118,110,127,142,120,115,128,127,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 74, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,113,119,116,133,115,120,114,111,119,123,124],
[137,0,133,130,136,140,136,121,129,116,143,121,150],
[138,118,0,131,136,140,123,134,133,123,138,134,144],
[132,121,120,0,114,133,117,125,126,115,132,121,131],
[135,115,115,137,0,125,114,115,127,109,132,120,125],
[118,111,111,118,126,0,122,117,117,105,130,119,128],
[136,115,128,134,137,129,0,124,134,118,143,124,137],
[131,130,117,126,136,134,127,0,131,129,129,122,134],
[137,122,118,125,124,134,117,120,0,108,124,123,120],
[140,135,128,136,142,146,133,122,143,0,150,132,147],
[132,108,113,119,119,121,108,122,127,101,0,115,128],
[128,130,117,130,131,132,127,129,128,119,136,0,125],
[127,101,107,120,126,123,114,117,131,104,123,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 75, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,129,132,129,133,139,121,129,128,129,135,127],
[120,0,124,121,113,126,122,115,124,119,120,113,116],
[122,127,0,118,122,133,116,106,120,121,128,124,119],
[119,130,133,0,128,134,125,122,123,116,128,124,120],
[122,138,129,123,0,128,125,125,122,124,129,126,114],
[118,125,118,117,123,0,121,120,125,116,125,119,120],
[112,129,135,126,126,130,0,126,124,120,121,125,123],
[130,136,145,129,126,131,125,0,129,128,123,123,122],
[122,127,131,128,129,126,127,122,0,117,129,124,120],
[123,132,130,135,127,135,131,123,134,0,138,138,129],
[122,131,123,123,122,126,130,128,122,113,0,121,128],
[116,138,127,127,125,132,126,128,127,113,130,0,123],
[124,135,132,131,137,131,128,129,131,122,123,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 76, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,129,105,135,126,135,141,138,121,142,111,141],
[106,0,147,131,128,115,137,130,114,109,133,120,139],
[122,104,0,102,113,119,105,120,128,103,121,115,126],
[146,120,149,0,127,138,133,134,152,126,135,128,142],
[116,123,138,124,0,112,118,108,136,124,131,115,138],
[125,136,132,113,139,0,145,145,145,131,133,133,156],
[116,114,146,118,133,106,0,132,140,119,132,109,132],
[110,121,131,117,143,106,119,0,114,116,144,123,157],
[113,137,123,99,115,106,111,137,0,125,109,106,140],
[130,142,148,125,127,120,132,135,126,0,124,126,161],
[109,118,130,116,120,118,119,107,142,127,0,125,146],
[140,131,136,123,136,118,142,128,145,125,126,0,121],
[110,112,125,109,113,95,119,94,111,90,105,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 77, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,124,118,148,132,135,147,113,137,124,163,148],
[119,0,123,112,123,122,122,132,126,130,121,134,138],
[127,128,0,134,133,123,121,110,138,119,135,126,139],
[133,139,117,0,122,143,130,117,118,129,129,160,147],
[103,128,118,129,0,139,120,123,124,121,108,130,138],
[119,129,128,108,112,0,127,119,131,141,135,142,156],
[116,129,130,121,131,124,0,130,126,129,134,147,157],
[104,119,141,134,128,132,121,0,114,138,120,135,154],
[138,125,113,133,127,120,125,137,0,126,130,158,130],
[114,121,132,122,130,110,122,113,125,0,126,127,131],
[127,130,116,122,143,116,117,131,121,125,0,113,112],
[88,117,125,91,121,109,104,116,93,124,138,0,133],
[103,113,112,104,113,95,94,97,121,120,139,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 78, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,137,131,119,138,124,134,124,139,141,135,136],
[121,0,132,127,125,137,123,138,119,134,126,143,130],
[114,119,0,119,108,126,105,128,122,113,123,134,122],
[120,124,132,0,130,137,123,138,140,130,132,131,132],
[132,126,143,121,0,134,128,129,129,136,133,137,135],
[113,114,125,114,117,0,116,126,121,125,121,131,121],
[127,128,146,128,123,135,0,135,132,134,131,142,137],
[117,113,123,113,122,125,116,0,128,131,126,134,124],
[127,132,129,111,122,130,119,123,0,122,134,135,133],
[112,117,138,121,115,126,117,120,129,0,120,131,125],
[110,125,128,119,118,130,120,125,117,131,0,138,132],
[116,108,117,120,114,120,109,117,116,120,113,0,124],
[115,121,129,119,116,130,114,127,118,126,119,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 79, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,161,124,143,145,139,182,163,156,143,166,122],
[92,0,98,103,92,90,100,135,99,95,94,105,78],
[90,153,0,150,119,115,123,150,125,120,130,131,115],
[127,148,101,0,78,137,123,147,137,124,109,121,102],
[108,159,132,173,0,155,138,179,149,140,157,158,149],
[106,161,136,114,96,0,110,156,128,125,122,123,98],
[112,151,128,128,113,141,0,134,110,110,133,119,133],
[69,116,101,104,72,95,117,0,113,127,122,103,87],
[88,152,126,114,102,123,141,138,0,118,131,123,108],
[95,156,131,127,111,126,141,124,133,0,154,110,102],
[108,157,121,142,94,129,118,129,120,97,0,133,119],
[85,146,120,130,93,128,132,148,128,141,118,0,150],
[129,173,136,149,102,153,118,164,143,149,132,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 80, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,138,145,128,124,81,112,135,123,131,133,163],
[108,0,96,156,50,128,115,150,142,149,124,97,143],
[113,155,0,125,75,86,82,101,152,125,116,101,128],
[106,95,126,0,88,83,100,102,152,148,106,139,157],
[123,201,176,163,0,170,96,161,169,153,139,137,155],
[127,123,165,168,81,0,92,178,155,136,141,119,186],
[170,136,169,151,155,159,0,137,192,175,154,124,153],
[139,101,150,149,90,73,114,0,171,130,99,97,144],
[116,109,99,99,82,96,59,80,0,105,115,56,154],
[128,102,126,103,98,115,76,121,146,0,112,104,116],
[120,127,135,145,112,110,97,152,136,139,0,146,165],
[118,154,150,112,114,132,127,154,195,147,105,0,154],
[88,108,123,94,96,65,98,107,97,135,86,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 81, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,132,120,130,130,139,131,130,139,126,156,145],
[118,0,134,113,127,112,122,140,128,142,125,137,133],
[119,117,0,105,114,105,126,121,108,117,120,122,120],
[131,138,146,0,133,122,149,131,137,141,144,153,141],
[121,124,137,118,0,122,129,132,121,137,122,138,137],
[121,139,146,129,129,0,144,141,154,143,150,147,148],
[112,129,125,102,122,107,0,133,123,135,127,129,124],
[120,111,130,120,119,110,118,0,129,136,128,145,138],
[121,123,143,114,130,97,128,122,0,131,130,141,136],
[112,109,134,110,114,108,116,115,120,0,122,124,120],
[125,126,131,107,129,101,124,123,121,129,0,121,134],
[95,114,129,98,113,104,122,106,110,127,130,0,116],
[106,118,131,110,114,103,127,113,115,131,117,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 82, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,147,139,115,129,125,143,125,133,148,137,105],
[117,0,136,132,105,114,144,135,122,120,126,142,100],
[104,115,0,129,97,112,116,130,116,117,137,137,126],
[112,119,122,0,102,99,124,123,119,121,139,113,98],
[136,146,154,149,0,130,147,141,147,145,144,145,119],
[122,137,139,152,121,0,142,144,144,122,128,151,106],
[126,107,135,127,104,109,0,110,118,110,121,137,94],
[108,116,121,128,110,107,141,0,105,120,122,146,92],
[126,129,135,132,104,107,133,146,0,129,128,148,104],
[118,131,134,130,106,129,141,131,122,0,125,129,104],
[103,125,114,112,107,123,130,129,123,126,0,126,100],
[114,109,114,138,106,100,114,105,103,122,125,0,77],
[146,151,125,153,132,145,157,159,147,147,151,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 83, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,128,132,140,105,101,135,125,101,128,118,120],
[139,0,142,143,152,124,129,148,133,115,131,156,142],
[123,109,0,133,138,119,109,123,129,106,111,135,120],
[119,108,118,0,125,116,101,121,104,114,115,130,124],
[111,99,113,126,0,98,99,136,115,107,106,116,126],
[146,127,132,135,153,0,110,138,125,119,136,132,147],
[150,122,142,150,152,141,0,151,121,126,129,144,141],
[116,103,128,130,115,113,100,0,107,104,125,130,125],
[126,118,122,147,136,126,130,144,0,100,128,127,125],
[150,136,145,137,144,132,125,147,151,0,142,144,142],
[123,120,140,136,145,115,122,126,123,109,0,127,128],
[133,95,116,121,135,119,107,121,124,107,124,0,132],
[131,109,131,127,125,104,110,126,126,109,123,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 84, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,135,148,142,136,130,146,141,127,120,143,126],
[108,0,120,134,125,104,117,120,123,125,125,134,114],
[116,131,0,125,136,110,110,119,141,110,126,140,119],
[103,117,126,0,115,116,96,103,129,116,110,121,119],
[109,126,115,136,0,119,107,122,137,118,121,148,120],
[115,147,141,135,132,0,117,123,145,121,134,149,128],
[121,134,141,155,144,134,0,125,151,124,136,156,147],
[105,131,132,148,129,128,126,0,144,119,113,129,122],
[110,128,110,122,114,106,100,107,0,116,107,122,112],
[124,126,141,135,133,130,127,132,135,0,137,154,122],
[131,126,125,141,130,117,115,138,144,114,0,138,125],
[108,117,111,130,103,102,95,122,129,97,113,0,113],
[125,137,132,132,131,123,104,129,139,129,126,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 85, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,122,71,170,98,104,89,104,139,160,109,109],
[119,0,122,63,89,78,104,43,73,93,165,165,43],
[129,129,0,129,129,129,63,109,58,93,150,129,129],
[180,188,122,0,191,78,99,150,73,114,160,160,109],
[81,162,122,60,0,60,61,43,93,93,127,101,25],
[153,173,122,173,191,0,107,191,84,180,87,153,112],
[147,147,188,152,190,144,0,155,185,119,193,152,117],
[162,208,142,101,208,60,96,0,139,93,142,142,121],
[147,178,193,178,158,167,66,112,0,96,193,158,132],
[112,158,158,137,158,71,132,158,155,0,158,158,71],
[91,86,101,91,124,164,58,109,58,93,0,91,91],
[142,86,122,91,150,98,99,109,93,93,160,0,91],
[142,208,122,142,226,139,134,130,119,180,160,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 86, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,112,172,114,127,108,116,156,156,129,147,160],
[116,0,107,136,119,111,119,142,128,133,120,122,177],
[139,144,0,158,102,121,119,99,113,155,105,173,157],
[79,115,93,0,108,92,88,115,124,107,125,131,138],
[137,132,149,143,0,111,140,138,158,131,131,149,163],
[124,140,130,159,140,0,146,166,173,126,140,141,179],
[143,132,132,163,111,105,0,129,153,130,113,158,147],
[135,109,152,136,113,85,122,0,132,162,116,157,163],
[95,123,138,127,93,78,98,119,0,143,130,130,174],
[95,118,96,144,120,125,121,89,108,0,150,147,171],
[122,131,146,126,120,111,138,135,121,101,0,140,137],
[104,129,78,120,102,110,93,94,121,104,111,0,156],
[91,74,94,113,88,72,104,88,77,80,114,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 87, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,150,131,140,137,138,135,140,120,127,133,139],
[117,0,134,124,141,129,138,131,140,121,124,129,128],
[101,117,0,113,123,112,132,132,119,105,115,126,121],
[120,127,138,0,115,124,134,131,118,119,110,115,116],
[111,110,128,136,0,128,136,128,120,127,119,115,113],
[114,122,139,127,123,0,139,130,142,113,118,121,134],
[113,113,119,117,115,112,0,123,119,102,113,109,102],
[116,120,119,120,123,121,128,0,126,112,114,122,117],
[111,111,132,133,131,109,132,125,0,121,100,131,128],
[131,130,146,132,124,138,149,139,130,0,117,131,131],
[124,127,136,141,132,133,138,137,151,134,0,134,137],
[118,122,125,136,136,130,142,129,120,120,117,0,116],
[112,123,130,135,138,117,149,134,123,120,114,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 88, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,127,133,105,117,124,117,124,110,135,119,148],
[138,0,149,138,135,113,123,128,146,137,121,118,151],
[124,102,0,106,98,119,116,103,124,101,104,107,140],
[118,113,145,0,124,118,124,129,119,101,107,130,137],
[146,116,153,127,0,119,135,121,137,108,139,127,154],
[134,138,132,133,132,0,130,141,137,133,132,119,142],
[127,128,135,127,116,121,0,131,141,137,116,116,152],
[134,123,148,122,130,110,120,0,130,128,119,108,140],
[127,105,127,132,114,114,110,121,0,120,130,127,147],
[141,114,150,150,143,118,114,123,131,0,122,118,156],
[116,130,147,144,112,119,135,132,121,129,0,125,159],
[132,133,144,121,124,132,135,143,124,133,126,0,141],
[103,100,111,114,97,109,99,111,104,95,92,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 89, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,133,123,99,116,136,114,112,123,114,115],
[142,0,129,132,142,132,116,129,133,137,142,114,122],
[142,122,0,142,156,146,123,134,120,130,139,128,124],
[118,119,109,0,127,118,108,122,127,118,128,111,102],
[128,109,95,124,0,111,101,135,122,107,126,120,106],
[152,119,105,133,140,0,116,119,123,107,132,124,110],
[135,135,128,143,150,135,0,139,124,140,146,126,126],
[115,122,117,129,116,132,112,0,125,129,138,114,115],
[137,118,131,124,129,128,127,126,0,123,143,118,119],
[139,114,121,133,144,144,111,122,128,0,134,137,121],
[128,109,112,123,125,119,105,113,108,117,0,94,105],
[137,137,123,140,131,127,125,137,133,114,157,0,124],
[136,129,127,149,145,141,125,136,132,130,146,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 90, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,132,115,144,119,119,128,128,130,125,129,129],
[119,0,127,117,132,122,117,115,117,116,109,125,112],
[119,124,0,112,129,118,108,121,112,122,118,123,110],
[136,134,139,0,144,131,126,124,134,139,134,144,130],
[107,119,122,107,0,122,115,113,117,115,120,117,105],
[132,129,133,120,129,0,126,120,120,125,125,138,119],
[132,134,143,125,136,125,0,125,138,125,130,140,120],
[123,136,130,127,138,131,126,0,122,124,127,135,125],
[123,134,139,117,134,131,113,129,0,122,131,133,121],
[121,135,129,112,136,126,126,127,129,0,126,135,114],
[126,142,133,117,131,126,121,124,120,125,0,134,121],
[122,126,128,107,134,113,111,116,118,116,117,0,110],
[122,139,141,121,146,132,131,126,130,137,130,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 91, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,91,104,122,83,107,131,115,142,104,122,116],
[149,0,88,132,154,97,111,136,123,138,127,137,117],
[160,163,0,121,135,112,131,130,99,144,133,135,132],
[147,119,130,0,141,115,143,109,117,160,133,119,128],
[129,97,116,110,0,92,130,115,107,151,117,113,108],
[168,154,139,136,159,0,136,153,128,169,164,138,115],
[144,140,120,108,121,115,0,126,122,140,141,129,117],
[120,115,121,142,136,98,125,0,120,153,141,133,122],
[136,128,152,134,144,123,129,131,0,143,127,143,104],
[109,113,107,91,100,82,111,98,108,0,111,91,93],
[147,124,118,118,134,87,110,110,124,140,0,95,109],
[129,114,116,132,138,113,122,118,108,160,156,0,110],
[135,134,119,123,143,136,134,129,147,158,142,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 92, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,119,147,142,131,124,135,129,143,123,125,157],
[121,0,121,141,151,134,126,154,132,124,116,131,139],
[132,130,0,165,136,155,108,150,134,145,129,151,143],
[104,110,86,0,124,131,98,126,106,126,112,129,128],
[109,100,115,127,0,112,103,137,125,120,119,116,142],
[120,117,96,120,139,0,113,135,106,116,115,136,134],
[127,125,143,153,148,138,0,147,129,147,137,142,154],
[116,97,101,125,114,116,104,0,113,131,108,126,123],
[122,119,117,145,126,145,122,138,0,122,118,133,156],
[108,127,106,125,131,135,104,120,129,0,118,128,149],
[128,135,122,139,132,136,114,143,133,133,0,136,148],
[126,120,100,122,135,115,109,125,118,123,115,0,135],
[94,112,108,123,109,117,97,128,95,102,103,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 93, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,126,134,124,112,124,117,119,126,108,138,118],
[130,0,137,124,116,115,128,142,116,124,116,145,114],
[125,114,0,137,132,134,127,132,126,123,119,155,124],
[117,127,114,0,103,114,122,126,123,117,113,146,115],
[127,135,119,148,0,122,136,131,124,126,129,146,125],
[139,136,117,137,129,0,134,135,141,136,114,156,131],
[127,123,124,129,115,117,0,129,120,127,107,141,130],
[134,109,119,125,120,116,122,0,113,131,115,159,119],
[132,135,125,128,127,110,131,138,0,128,124,141,133],
[125,127,128,134,125,115,124,120,123,0,116,152,132],
[143,135,132,138,122,137,144,136,127,135,0,159,133],
[113,106,96,105,105,95,110,92,110,99,92,0,105],
[133,137,127,136,126,120,121,132,118,119,118,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 94, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,130,117,103,105,100,132,105,104,111,111,113],
[141,0,137,113,115,109,108,136,122,112,113,117,117],
[121,114,0,109,106,104,102,129,107,101,115,106,104],
[134,138,142,0,124,127,111,130,116,124,123,133,114],
[148,136,145,127,0,135,121,131,120,120,140,131,134],
[146,142,147,124,116,0,130,140,134,117,127,141,117],
[151,143,149,140,130,121,0,154,131,132,127,135,134],
[119,115,122,121,120,111,97,0,114,115,114,118,101],
[146,129,144,135,131,117,120,137,0,114,122,140,116],
[147,139,150,127,131,134,119,136,137,0,127,137,126],
[140,138,136,128,111,124,124,137,129,124,0,101,116],
[140,134,145,118,120,110,116,133,111,114,150,0,120],
[138,134,147,137,117,134,117,150,135,125,135,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 95, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,120,124,120,141,130,139,143,121,132,132,128],
[121,0,113,125,112,130,112,130,126,107,115,121,106],
[131,138,0,122,121,139,130,147,136,123,130,125,135],
[127,126,129,0,117,132,131,141,134,120,134,135,127],
[131,139,130,134,0,150,129,147,146,128,142,125,132],
[110,121,112,119,101,0,121,126,121,112,127,123,118],
[121,139,121,120,122,130,0,138,132,110,132,130,123],
[112,121,104,110,104,125,113,0,120,109,130,121,109],
[108,125,115,117,105,130,119,131,0,112,136,125,116],
[130,144,128,131,123,139,141,142,139,0,140,143,133],
[119,136,121,117,109,124,119,121,115,111,0,125,126],
[119,130,126,116,126,128,121,130,126,108,126,0,133],
[123,145,116,124,119,133,128,142,135,118,125,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 96, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,128,138,120,135,131,144,147,147,140,134,136],
[118,0,118,120,129,131,121,128,139,134,129,134,123],
[123,133,0,123,110,128,123,134,133,142,120,127,127],
[113,131,128,0,121,130,128,149,130,141,125,132,124],
[131,122,141,130,0,133,125,129,131,139,142,141,124],
[116,120,123,121,118,0,122,143,127,134,120,144,117],
[120,130,128,123,126,129,0,145,136,146,138,135,119],
[107,123,117,102,122,108,106,0,122,127,120,124,118],
[104,112,118,121,120,124,115,129,0,134,120,127,118],
[104,117,109,110,112,117,105,124,117,0,114,123,123],
[111,122,131,126,109,131,113,131,131,137,0,127,127],
[117,117,124,119,110,107,116,127,124,128,124,0,118],
[115,128,124,127,127,134,132,133,133,128,124,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 97, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,134,144,121,121,130,119,123,143,135,130,126],
[125,0,140,140,132,122,140,138,136,128,136,132,113],
[117,111,0,129,117,122,131,129,121,119,140,122,114],
[107,111,122,0,120,119,126,120,125,109,118,120,123],
[130,119,134,131,0,123,128,119,125,133,117,127,113],
[130,129,129,132,128,0,121,125,119,130,131,122,118],
[121,111,120,125,123,130,0,121,112,111,119,115,117],
[132,113,122,131,132,126,130,0,118,122,122,128,122],
[128,115,130,126,126,132,139,133,0,116,123,125,123],
[108,123,132,142,118,121,140,129,135,0,134,124,111],
[116,115,111,133,134,120,132,129,128,117,0,121,116],
[121,119,129,131,124,129,136,123,126,127,130,0,121],
[125,138,137,128,138,133,134,129,128,140,135,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 98, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,111,113,126,120,123,130,132,120,130,137],
[147,0,116,118,124,122,128,125,129,116,141,121,121],
[148,135,0,124,113,132,130,131,134,121,137,129,124],
[140,133,127,0,121,140,132,148,136,124,147,125,127],
[138,127,138,130,0,122,131,119,124,117,131,124,130],
[125,129,119,111,129,0,124,115,123,122,126,118,120],
[131,123,121,119,120,127,0,123,131,110,131,117,126],
[128,126,120,103,132,136,128,0,131,124,137,119,122],
[121,122,117,115,127,128,120,120,0,127,142,106,144],
[119,135,130,127,134,129,141,127,124,0,137,133,118],
[131,110,114,104,120,125,120,114,109,114,0,116,126],
[121,130,122,126,127,133,134,132,145,118,135,0,134],
[114,130,127,124,121,131,125,129,107,133,125,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 99, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,157,148,138,163,95,127,126,135,114,126,120],
[90,0,155,130,115,101,123,109,141,104,132,119,126],
[94,96,0,116,106,101,120,135,157,125,115,117,137],
[103,121,135,0,113,149,80,106,118,87,129,126,99],
[113,136,145,138,0,119,146,103,150,132,113,127,146],
[88,150,150,102,132,0,115,106,139,104,104,107,118],
[156,128,131,171,105,136,0,117,164,150,163,145,141],
[124,142,116,145,148,145,134,0,132,147,152,116,138],
[125,110,94,133,101,112,87,119,0,123,117,110,116],
[116,147,126,164,119,147,101,104,128,0,121,125,93],
[137,119,136,122,138,147,88,99,134,130,0,103,127],
[125,132,134,125,124,144,106,135,141,126,148,0,114],
[131,125,114,152,105,133,110,113,135,158,124,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 100, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,141,123,140,120,134,129,127,133,133,127,126],
[128,0,140,131,134,122,130,112,126,133,121,129,133],
[110,111,0,117,124,125,115,111,115,117,126,118,126],
[128,120,134,0,130,131,124,116,123,128,140,136,135],
[111,117,127,121,0,112,113,113,111,121,124,120,129],
[131,129,126,120,139,0,131,122,121,113,138,121,137],
[117,121,136,127,138,120,0,116,114,128,136,124,131],
[122,139,140,135,138,129,135,0,116,125,140,138,139],
[124,125,136,128,140,130,137,135,0,133,140,137,141],
[118,118,134,123,130,138,123,126,118,0,141,122,134],
[118,130,125,111,127,113,115,111,111,110,0,125,131],
[124,122,133,115,131,130,127,113,114,129,126,0,139],
[125,118,125,116,122,114,120,112,110,117,120,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 101, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,128,136,156,142,134,139,121,142,127,135,115],
[115,0,117,124,138,136,127,132,123,130,118,136,131],
[123,134,0,133,139,136,123,128,122,123,120,120,130],
[115,127,118,0,136,140,132,142,129,132,127,139,122],
[95,113,112,115,0,133,113,113,104,118,110,117,97],
[109,115,115,111,118,0,108,127,115,111,112,120,106],
[117,124,128,119,138,143,0,133,123,123,115,128,128],
[112,119,123,109,138,124,118,0,114,128,105,120,113],
[130,128,129,122,147,136,128,137,0,140,134,134,136],
[109,121,128,119,133,140,128,123,111,0,119,131,125],
[124,133,131,124,141,139,136,146,117,132,0,135,131],
[116,115,131,112,134,131,123,131,117,120,116,0,113],
[136,120,121,129,154,145,123,138,115,126,120,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 102, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,135,138,127,129,125,123,145,139,121,139,130],
[114,0,121,127,112,130,123,120,131,130,123,128,121],
[116,130,0,127,117,118,127,126,127,140,125,118,125],
[113,124,124,0,123,129,118,121,132,139,130,117,125],
[124,139,134,128,0,135,124,121,135,130,114,123,131],
[122,121,133,122,116,0,120,124,129,132,115,127,119],
[126,128,124,133,127,131,0,121,135,138,130,128,140],
[128,131,125,130,130,127,130,0,139,140,121,129,139],
[106,120,124,119,116,122,116,112,0,128,121,127,114],
[112,121,111,112,121,119,113,111,123,0,110,122,109],
[130,128,126,121,137,136,121,130,130,141,0,120,131],
[112,123,133,134,128,124,123,122,124,129,131,0,128],
[121,130,126,126,120,132,111,112,137,142,120,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 103, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,128,130,119,114,108,116,124,125,112,137,106],
[144,0,149,136,131,133,123,150,149,148,129,160,136],
[123,102,0,121,123,114,120,118,119,130,109,147,115],
[121,115,130,0,126,146,121,122,127,141,121,124,125],
[132,120,128,125,0,126,117,113,114,127,122,132,126],
[137,118,137,105,125,0,114,127,136,138,106,130,109],
[143,128,131,130,134,137,0,112,130,139,143,129,130],
[135,101,133,129,138,124,139,0,128,131,108,149,133],
[127,102,132,124,137,115,121,123,0,139,119,128,126],
[126,103,121,110,124,113,112,120,112,0,108,131,108],
[139,122,142,130,129,145,108,143,132,143,0,143,132],
[114,91,104,127,119,121,122,102,123,120,108,0,122],
[145,115,136,126,125,142,121,118,125,143,119,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 104, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,116,116,122,119,117,130,115,122,125,128,121],
[136,0,133,120,123,123,120,130,123,131,109,122,126],
[135,118,0,119,129,122,120,133,125,128,120,120,115],
[135,131,132,0,133,132,125,133,132,142,129,133,132],
[129,128,122,118,0,120,122,132,116,128,122,123,126],
[132,128,129,119,131,0,127,138,129,133,120,138,118],
[134,131,131,126,129,124,0,125,119,132,126,132,131],
[121,121,118,118,119,113,126,0,115,121,120,121,123],
[136,128,126,119,135,122,132,136,0,140,123,135,132],
[129,120,123,109,123,118,119,130,111,0,111,125,120],
[126,142,131,122,129,131,125,131,128,140,0,135,126],
[123,129,131,118,128,113,119,130,116,126,116,0,132],
[130,125,136,119,125,133,120,128,119,131,125,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 105, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,144,127,137,139,133,138,143,125,128,128,122],
[127,0,135,128,122,142,135,138,142,114,139,151,126],
[107,116,0,120,115,135,135,133,120,119,111,113,94],
[124,123,131,0,122,135,117,136,129,120,138,90,132],
[114,129,136,129,0,140,143,140,122,132,135,135,133],
[112,109,116,116,111,0,114,116,129,106,152,117,128],
[118,116,116,134,108,137,0,125,116,119,126,113,108],
[113,113,118,115,111,135,126,0,127,118,126,125,110],
[108,109,131,122,129,122,135,124,0,122,131,102,111],
[126,137,132,131,119,145,132,133,129,0,134,122,122],
[123,112,140,113,116,99,125,125,120,117,0,95,102],
[123,100,138,161,116,134,138,126,149,129,156,0,132],
[129,125,157,119,118,123,143,141,140,129,149,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 106, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,105,156,126,86,111,137,133,102,140,151,109],
[132,0,108,155,106,87,110,130,110,115,100,129,102],
[146,143,0,165,151,138,148,157,152,133,123,148,161],
[95,96,86,0,98,96,96,114,104,94,123,102,107],
[125,145,100,153,0,107,125,148,137,122,127,152,118],
[165,164,113,155,144,0,137,161,150,140,144,163,149],
[140,141,103,155,126,114,0,142,116,93,136,133,135],
[114,121,94,137,103,90,109,0,114,81,123,104,112],
[118,141,99,147,114,101,135,137,0,120,143,146,125],
[149,136,118,157,129,111,158,170,131,0,154,144,132],
[111,151,128,128,124,107,115,128,108,97,0,116,129],
[100,122,103,149,99,88,118,147,105,107,135,0,103],
[142,149,90,144,133,102,116,139,126,119,122,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 107, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,122,117,123,142,119,128,120,120,120,121,121],
[125,0,136,131,131,142,124,125,132,129,117,122,131],
[129,115,0,110,123,131,117,117,122,117,117,123,119],
[134,120,141,0,128,140,130,127,123,116,130,122,123],
[128,120,128,123,0,144,127,126,133,120,124,125,127],
[109,109,120,111,107,0,118,110,105,113,105,104,121],
[132,127,134,121,124,133,0,127,127,119,118,133,117],
[123,126,134,124,125,141,124,0,112,124,118,126,127],
[131,119,129,128,118,146,124,139,0,137,129,121,119],
[131,122,134,135,131,138,132,127,114,0,136,123,122],
[131,134,134,121,127,146,133,133,122,115,0,135,128],
[130,129,128,129,126,147,118,125,130,128,116,0,121],
[130,120,132,128,124,130,134,124,132,129,123,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 108, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,148,131,111,133,121,121,146,134,125,127,123],
[141,0,153,133,145,150,122,139,153,147,132,131,142],
[103,98,0,118,108,121,106,122,132,116,121,105,109],
[120,118,133,0,118,131,125,119,121,128,114,119,124],
[140,106,143,133,0,123,142,139,128,131,140,117,118],
[118,101,130,120,128,0,105,127,125,116,129,116,125],
[130,129,145,126,109,146,0,116,146,126,137,115,104],
[130,112,129,132,112,124,135,0,139,137,134,112,124],
[105,98,119,130,123,126,105,112,0,128,145,116,101],
[117,104,135,123,120,135,125,114,123,0,127,124,113],
[126,119,130,137,111,122,114,117,106,124,0,105,103],
[124,120,146,132,134,135,136,139,135,127,146,0,115],
[128,109,142,127,133,126,147,127,150,138,148,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 109, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,110,138,124,119,150,141,137,129,125,140,118],
[113,0,99,121,97,96,121,116,104,96,141,120,105],
[141,152,0,128,134,123,147,159,133,117,138,149,132],
[113,130,123,0,109,118,114,141,120,105,114,122,118],
[127,154,117,142,0,112,123,145,140,116,124,130,133],
[132,155,128,133,139,0,153,159,135,136,133,147,123],
[101,130,104,137,128,98,0,136,122,112,125,130,111],
[110,135,92,110,106,92,115,0,100,102,120,104,104],
[114,147,118,131,111,116,129,151,0,108,118,118,118],
[122,155,134,146,135,115,139,149,143,0,126,161,123],
[126,110,113,137,127,118,126,131,133,125,0,135,115],
[111,131,102,129,121,104,121,147,133,90,116,0,117],
[133,146,119,133,118,128,140,147,133,128,136,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 110, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,128,146,133,122,148,126,137,137,149,151,116],
[111,0,133,142,121,118,132,107,123,130,129,145,125],
[123,118,0,141,129,106,150,121,103,115,136,122,107],
[105,109,110,0,111,115,135,114,98,113,124,120,99],
[118,130,122,140,0,109,142,131,119,127,134,140,109],
[129,133,145,136,142,0,147,146,129,121,149,153,140],
[103,119,101,116,109,104,0,104,99,97,117,113,94],
[125,144,130,137,120,105,147,0,128,136,131,135,130],
[114,128,148,153,132,122,152,123,0,129,147,136,137],
[114,121,136,138,124,130,154,115,122,0,144,136,118],
[102,122,115,127,117,102,134,120,104,107,0,130,91],
[100,106,129,131,111,98,138,116,115,115,121,0,107],
[135,126,144,152,142,111,157,121,114,133,160,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 111, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,124,122,126,122,108,132,116,123,131,134,117],
[130,0,128,106,115,129,132,129,122,123,132,135,120],
[127,123,0,114,120,122,105,130,121,121,127,136,119],
[129,145,137,0,131,147,131,141,133,125,133,144,124],
[125,136,131,120,0,121,131,117,127,118,127,140,119],
[129,122,129,104,130,0,116,126,118,123,118,134,122],
[143,119,146,120,120,135,0,129,116,126,133,132,126],
[119,122,121,110,134,125,122,0,117,120,114,130,111],
[135,129,130,118,124,133,135,134,0,136,132,126,125],
[128,128,130,126,133,128,125,131,115,0,131,139,115],
[120,119,124,118,124,133,118,137,119,120,0,128,125],
[117,116,115,107,111,117,119,121,125,112,123,0,127],
[134,131,132,127,132,129,125,140,126,136,126,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 112, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,125,113,133,133,153,126,99,139,128,106,126],
[132,0,134,104,138,121,163,136,112,136,128,146,136],
[126,117,0,100,133,139,169,130,143,159,136,128,131],
[138,147,151,0,126,146,191,129,116,154,123,158,113],
[118,113,118,125,0,120,156,134,110,134,160,120,131],
[118,130,112,105,131,0,139,118,129,146,139,122,146],
[98,88,82,60,95,112,0,72,127,105,110,100,106],
[125,115,121,122,117,133,179,0,122,135,142,117,107],
[152,139,108,135,141,122,124,129,0,137,126,110,146],
[112,115,92,97,117,105,146,116,114,0,129,112,121],
[123,123,115,128,91,112,141,109,125,122,0,99,119],
[145,105,123,93,131,129,151,134,141,139,152,0,106],
[125,115,120,138,120,105,145,144,105,130,132,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 113, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,115,133,130,121,121,138,117,112,131,113,126],
[130,0,122,141,126,139,137,151,153,123,133,129,141],
[136,129,0,143,138,138,119,141,130,126,130,120,131],
[118,110,108,0,141,133,125,133,136,116,126,110,104],
[121,125,113,110,0,131,121,139,125,117,130,115,124],
[130,112,113,118,120,0,120,131,138,115,122,104,122],
[130,114,132,126,130,131,0,139,135,127,123,126,131],
[113,100,110,118,112,120,112,0,131,88,118,105,112],
[134,98,121,115,126,113,116,120,0,115,114,112,132],
[139,128,125,135,134,136,124,163,136,0,138,128,137],
[120,118,121,125,121,129,128,133,137,113,0,107,132],
[138,122,131,141,136,147,125,146,139,123,144,0,127],
[125,110,120,147,127,129,120,139,119,114,119,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 114, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,121,126,133,144,136,123,135,143,141,126,119],
[116,0,121,135,115,136,118,121,151,131,130,128,120],
[130,130,0,125,105,120,101,132,133,124,134,122,124],
[125,116,126,0,138,136,130,135,167,139,138,114,140],
[118,136,146,113,0,117,138,135,147,136,144,113,123],
[107,115,131,115,134,0,125,111,124,107,100,114,133],
[115,133,150,121,113,126,0,126,130,137,121,131,98],
[128,130,119,116,116,140,125,0,140,125,138,118,102],
[116,100,118,84,104,127,121,111,0,107,99,107,115],
[108,120,127,112,115,144,114,126,144,0,137,114,116],
[110,121,117,113,107,151,130,113,152,114,0,128,108],
[125,123,129,137,138,137,120,133,144,137,123,0,140],
[132,131,127,111,128,118,153,149,136,135,143,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 115, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,161,133,135,141,150,151,150,116,139,157,134],
[117,0,138,123,120,128,148,147,121,137,129,155,116],
[90,113,0,78,119,110,132,103,97,94,101,142,113],
[118,128,173,0,115,156,144,139,134,115,151,159,130],
[116,131,132,136,0,114,140,104,111,121,129,122,103],
[110,123,141,95,137,0,144,102,144,119,140,141,105],
[101,103,119,107,111,107,0,117,116,114,143,138,122],
[100,104,148,112,147,149,134,0,101,125,132,147,111],
[101,130,154,117,140,107,135,150,0,134,144,152,127],
[135,114,157,136,130,132,137,126,117,0,129,148,137],
[112,122,150,100,122,111,108,119,107,122,0,149,114],
[94,96,109,92,129,110,113,104,99,103,102,0,129],
[117,135,138,121,148,146,129,140,124,114,137,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 116, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,118,129,126,120,124,116,114,130,124,123,127],
[117,0,111,120,120,128,112,119,121,113,117,120,124],
[133,140,0,132,125,134,128,123,127,130,129,130,129],
[122,131,119,0,125,126,115,126,119,129,129,119,129],
[125,131,126,126,0,126,120,118,124,130,131,132,127],
[131,123,117,125,125,0,118,124,120,121,136,125,137],
[127,139,123,136,131,133,0,117,115,130,136,119,135],
[135,132,128,125,133,127,134,0,123,131,127,123,129],
[137,130,124,132,127,131,136,128,0,130,130,141,138],
[121,138,121,122,121,130,121,120,121,0,127,138,126],
[127,134,122,122,120,115,115,124,121,124,0,126,132],
[128,131,121,132,119,126,132,128,110,113,125,0,120],
[124,127,122,122,124,114,116,122,113,125,119,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 117, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,131,131,133,132,125,104,136,123,120,120,112],
[122,0,121,124,125,117,109,106,128,117,113,117,111],
[120,130,0,145,122,128,126,121,132,145,125,121,125],
[120,127,106,0,123,123,114,108,123,121,107,132,126],
[118,126,129,128,0,123,127,112,140,127,103,137,122],
[119,134,123,128,128,0,121,115,124,130,128,115,118],
[126,142,125,137,124,130,0,115,127,120,129,125,129],
[147,145,130,143,139,136,136,0,141,146,141,144,123],
[115,123,119,128,111,127,124,110,0,124,121,118,111],
[128,134,106,130,124,121,131,105,127,0,122,115,118],
[131,138,126,144,148,123,122,110,130,129,0,129,127],
[131,134,130,119,114,136,126,107,133,136,122,0,115],
[139,140,126,125,129,133,122,128,140,133,124,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 118, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,82,153,138,144,138,150,138,130,156,112,142],
[107,0,75,127,103,122,105,100,112,105,116,89,116],
[169,176,0,162,133,154,136,122,130,143,133,118,159],
[98,124,89,0,130,134,112,99,123,125,101,65,130],
[113,148,118,121,0,138,128,109,122,127,111,86,166],
[107,129,97,117,113,0,122,80,134,134,135,101,133],
[113,146,115,139,123,129,0,121,140,141,131,98,125],
[101,151,129,152,142,171,130,0,162,146,159,128,165],
[113,139,121,128,129,117,111,89,0,121,108,91,122],
[121,146,108,126,124,117,110,105,130,0,112,92,146],
[95,135,118,150,140,116,120,92,143,139,0,120,136],
[139,162,133,186,165,150,153,123,160,159,131,0,173],
[109,135,92,121,85,118,126,86,129,105,115,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 119, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,127,136,126,131,134,121,121,134,127,122,133],
[113,0,117,125,115,119,125,118,121,124,112,115,121],
[124,134,0,131,126,129,130,119,118,128,133,120,136],
[115,126,120,0,104,116,121,108,113,109,117,108,120],
[125,136,125,147,0,124,137,120,135,132,127,126,134],
[120,132,122,135,127,0,127,117,127,138,127,121,131],
[117,126,121,130,114,124,0,113,124,127,124,123,129],
[130,133,132,143,131,134,138,0,125,132,138,121,131],
[130,130,133,138,116,124,127,126,0,136,131,128,133],
[117,127,123,142,119,113,124,119,115,0,122,122,123],
[124,139,118,134,124,124,127,113,120,129,0,117,133],
[129,136,131,143,125,130,128,130,123,129,134,0,136],
[118,130,115,131,117,120,122,120,118,128,118,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 120, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,131,122,129,118,118,127,130,128,133,137,129],
[108,0,108,116,117,115,100,121,115,110,116,122,119],
[120,143,0,127,134,125,117,125,130,113,132,123,130],
[129,135,124,0,137,129,127,131,134,118,140,154,120],
[122,134,117,114,0,120,107,112,114,121,129,128,111],
[133,136,126,122,131,0,102,138,134,127,117,143,121],
[133,151,134,124,144,149,0,134,139,140,147,148,131],
[124,130,126,120,139,113,117,0,116,126,122,128,126],
[121,136,121,117,137,117,112,135,0,134,134,144,123],
[123,141,138,133,130,124,111,125,117,0,135,144,129],
[118,135,119,111,122,134,104,129,117,116,0,131,125],
[114,129,128,97,123,108,103,123,107,107,120,0,119],
[122,132,121,131,140,130,120,125,128,122,126,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 121, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,125,133,145,135,138,137,131,141,129,139,141],
[127,0,126,133,136,128,139,123,125,131,125,127,124],
[126,125,0,133,134,126,133,132,112,129,130,134,128],
[118,118,118,0,130,113,139,123,108,131,117,115,121],
[106,115,117,121,0,120,123,122,100,123,117,127,123],
[116,123,125,138,131,0,134,138,119,140,129,125,136],
[113,112,118,112,128,117,0,121,106,122,131,114,122],
[114,128,119,128,129,113,130,0,117,130,124,134,128],
[120,126,139,143,151,132,145,134,0,147,139,136,140],
[110,120,122,120,128,111,129,121,104,0,117,127,123],
[122,126,121,134,134,122,120,127,112,134,0,138,125],
[112,124,117,136,124,126,137,117,115,124,113,0,121],
[110,127,123,130,128,115,129,123,111,128,126,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 122, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,58,149,186,172,228,149,58,251,107,130,58],
[174,0,137,228,209,216,151,114,137,251,174,174,137],
[193,114,0,193,193,114,193,114,156,216,114,114,137],
[102,23,58,0,209,65,102,137,137,144,95,23,58],
[65,42,58,42,0,65,42,42,100,65,137,23,58],
[79,35,137,186,186,0,186,72,137,209,107,130,137],
[23,100,58,149,209,65,0,114,58,179,95,23,58],
[102,137,137,114,209,179,137,0,137,179,209,137,137],
[193,114,95,114,151,114,193,114,0,216,72,72,95],
[0,0,35,107,186,42,72,72,35,0,72,0,35],
[144,77,137,156,114,144,156,42,179,179,0,58,137],
[121,77,137,228,228,121,228,114,179,251,193,0,179],
[193,114,114,193,193,114,193,114,156,216,114,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 123, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,129,118,115,91,108,108,123,98,113,102,112],
[151,0,120,158,165,141,162,143,163,142,137,119,134],
[122,131,0,130,148,124,137,132,148,134,127,115,115],
[133,93,121,0,142,112,109,125,136,111,125,89,127],
[136,86,103,109,0,96,133,115,124,114,125,101,83],
[160,110,127,139,155,0,151,151,149,137,148,137,128],
[143,89,114,142,118,100,0,130,129,129,123,110,102],
[143,108,119,126,136,100,121,0,135,144,113,105,121],
[128,88,103,115,127,102,122,116,0,118,117,105,95],
[153,109,117,140,137,114,122,107,133,0,127,115,109],
[138,114,124,126,126,103,128,138,134,124,0,101,108],
[149,132,136,162,150,114,141,146,146,136,150,0,133],
[139,117,136,124,168,123,149,130,156,142,143,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 124, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,143,127,118,130,138,137,131,124,123,123,130],
[133,0,129,115,137,136,146,131,145,127,118,130,134],
[108,122,0,132,124,136,132,139,140,128,121,135,145],
[124,136,119,0,131,138,126,139,137,135,122,141,135],
[133,114,127,120,0,134,132,136,128,133,127,124,132],
[121,115,115,113,117,0,119,127,119,116,108,131,124],
[113,105,119,125,119,132,0,128,128,121,112,120,130],
[114,120,112,112,115,124,123,0,122,130,98,139,126],
[120,106,111,114,123,132,123,129,0,118,96,139,139],
[127,124,123,116,118,135,130,121,133,0,109,130,133],
[128,133,130,129,124,143,139,153,155,142,0,137,135],
[128,121,116,110,127,120,131,112,112,121,114,0,109],
[121,117,106,116,119,127,121,125,112,118,116,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 125, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,129,121,131,127,125,126,128,138,129,137,135],
[121,0,126,125,118,122,129,132,124,128,125,134,111],
[122,125,0,117,132,133,135,123,134,133,134,135,117],
[130,126,134,0,121,124,134,125,124,134,133,139,116],
[120,133,119,130,0,136,133,126,133,137,126,143,117],
[124,129,118,127,115,0,133,120,124,132,136,136,116],
[126,122,116,117,118,118,0,122,118,125,115,135,104],
[125,119,128,126,125,131,129,0,121,123,126,130,113],
[123,127,117,127,118,127,133,130,0,129,123,133,121],
[113,123,118,117,114,119,126,128,122,0,113,131,112],
[122,126,117,118,125,115,136,125,128,138,0,135,112],
[114,117,116,112,108,115,116,121,118,120,116,0,110],
[116,140,134,135,134,135,147,138,130,139,139,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 126, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,108,125,113,121,130,119,129,125,130,131,127],
[133,0,128,128,111,108,101,112,133,106,112,123,131],
[143,123,0,124,136,124,134,124,134,118,139,135,130],
[126,123,127,0,118,108,123,115,129,120,123,126,129],
[138,140,115,133,0,123,121,118,120,129,135,137,130],
[130,143,127,143,128,0,120,119,138,115,134,140,145],
[121,150,117,128,130,131,0,125,129,124,131,139,122],
[132,139,127,136,133,132,126,0,137,124,154,115,135],
[122,118,117,122,131,113,122,114,0,107,132,132,109],
[126,145,133,131,122,136,127,127,144,0,140,145,135],
[121,139,112,128,116,117,120,97,119,111,0,122,107],
[120,128,116,125,114,111,112,136,119,106,129,0,109],
[124,120,121,122,121,106,129,116,142,116,144,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 127, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,137,128,148,138,140,130,132,120,136,132,135],
[126,0,130,134,128,140,118,130,133,130,124,127,116],
[114,121,0,128,142,141,131,132,132,123,136,129,123],
[123,117,123,0,129,137,103,119,140,138,124,129,122],
[103,123,109,122,0,123,120,119,135,107,124,115,104],
[113,111,110,114,128,0,105,126,136,109,96,110,117],
[111,133,120,148,131,146,0,126,132,110,136,136,131],
[121,121,119,132,132,125,125,0,128,132,120,122,119],
[119,118,119,111,116,115,119,123,0,124,99,132,101],
[131,121,128,113,144,142,141,119,127,0,130,122,123],
[115,127,115,127,127,155,115,131,152,121,0,125,125],
[119,124,122,122,136,141,115,129,119,129,126,0,118],
[116,135,128,129,147,134,120,132,150,128,126,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 128, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,120,132,135,122,124,129,118,120,129,134,128],
[112,0,112,111,127,110,114,118,118,122,114,123,110],
[131,139,0,139,134,143,126,131,123,130,124,142,128],
[119,140,112,0,123,119,115,118,111,129,116,122,125],
[116,124,117,128,0,131,120,119,103,121,118,127,122],
[129,141,108,132,120,0,130,128,121,138,122,124,126],
[127,137,125,136,131,121,0,120,122,130,133,125,125],
[122,133,120,133,132,123,131,0,116,131,124,124,133],
[133,133,128,140,148,130,129,135,0,136,133,124,133],
[131,129,121,122,130,113,121,120,115,0,126,137,121],
[122,137,127,135,133,129,118,127,118,125,0,133,127],
[117,128,109,129,124,127,126,127,127,114,118,0,132],
[123,141,123,126,129,125,126,118,118,130,124,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 129, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,123,134,116,104,141,110,132,113,118,123,115],
[145,0,142,133,125,139,137,135,148,136,134,140,127],
[128,109,0,121,110,131,133,113,141,132,131,129,126],
[117,118,130,0,120,102,130,111,144,121,115,116,119],
[135,126,141,131,0,116,151,115,142,122,135,117,106],
[147,112,120,149,135,0,146,116,146,144,130,141,134],
[110,114,118,121,100,105,0,116,137,126,82,121,100],
[141,116,138,140,136,135,135,0,135,129,130,120,126],
[119,103,110,107,109,105,114,116,0,112,106,115,112],
[138,115,119,130,129,107,125,122,139,0,137,132,128],
[133,117,120,136,116,121,169,121,145,114,0,133,110],
[128,111,122,135,134,110,130,131,136,119,118,0,120],
[136,124,125,132,145,117,151,125,139,123,141,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 130, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,119,122,129,128,126,130,124,128,119,108,122],
[126,0,121,123,121,130,124,130,127,120,130,117,131],
[132,130,0,131,124,126,125,132,128,134,136,127,129],
[129,128,120,0,117,127,127,134,123,129,131,126,125],
[122,130,127,134,0,124,132,135,128,131,134,124,139],
[123,121,125,124,127,0,125,134,125,129,135,122,125],
[125,127,126,124,119,126,0,138,127,129,129,118,129],
[121,121,119,117,116,117,113,0,127,135,126,119,126],
[127,124,123,128,123,126,124,124,0,127,124,116,124],
[123,131,117,122,120,122,122,116,124,0,131,120,120],
[132,121,115,120,117,116,122,125,127,120,0,110,119],
[143,134,124,125,127,129,133,132,135,131,141,0,130],
[129,120,122,126,112,126,122,125,127,131,132,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 131, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,135,123,149,98,149,98,60,142,122,110,102],
[114,0,112,101,119,66,140,96,85,127,125,104,128],
[116,139,0,95,129,109,148,99,98,134,158,118,128],
[128,150,156,0,127,133,172,130,122,146,141,118,141],
[102,132,122,124,0,111,169,105,60,118,132,112,106],
[153,185,142,118,140,0,168,153,131,187,165,114,132],
[102,111,103,79,82,83,0,96,73,121,118,73,80],
[153,155,152,121,146,98,155,0,111,154,171,117,111],
[191,166,153,129,191,120,178,140,0,151,138,134,126],
[109,124,117,105,133,64,130,97,100,0,105,94,96],
[129,126,93,110,119,86,133,80,113,146,0,114,107],
[141,147,133,133,139,137,178,134,117,157,137,0,144],
[149,123,123,110,145,119,171,140,125,155,144,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 132, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,124,128,136,125,130,125,143,130,141,129,124],
[118,0,107,117,124,126,123,106,127,124,115,126,115],
[127,144,0,121,147,121,137,123,142,135,144,117,123],
[123,134,130,0,140,132,141,126,142,128,150,132,142],
[115,127,104,111,0,121,131,114,129,125,134,117,114],
[126,125,130,119,130,0,136,113,140,134,128,120,124],
[121,128,114,110,120,115,0,99,123,131,126,109,123],
[126,145,128,125,137,138,152,0,148,133,145,130,137],
[108,124,109,109,122,111,128,103,0,116,122,119,120],
[121,127,116,123,126,117,120,118,135,0,130,115,109],
[110,136,107,101,117,123,125,106,129,121,0,104,107],
[122,125,134,119,134,131,142,121,132,136,147,0,128],
[127,136,128,109,137,127,128,114,131,142,144,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 133, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,121,147,154,129,112,130,121,115,127,153,111],
[131,0,124,118,141,144,135,122,125,115,111,126,111],
[130,127,0,139,137,164,142,123,152,128,148,156,130],
[104,133,112,0,145,115,107,95,136,129,99,115,94],
[97,110,114,106,0,104,66,115,110,100,103,129,109],
[122,107,87,136,147,0,100,110,132,118,112,126,111],
[139,116,109,144,185,151,0,102,119,106,146,137,123],
[121,129,128,156,136,141,149,0,123,146,112,140,117],
[130,126,99,115,141,119,132,128,0,107,146,132,112],
[136,136,123,122,151,133,145,105,144,0,130,134,95],
[124,140,103,152,148,139,105,139,105,121,0,96,132],
[98,125,95,136,122,125,114,111,119,117,155,0,119],
[140,140,121,157,142,140,128,134,139,156,119,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 134, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,106,92,45,114,114,113,175,120,154,175,85],
[173,0,87,101,91,104,152,101,152,97,137,197,113],
[145,164,0,83,111,130,165,208,225,136,109,169,140],
[159,150,168,0,124,158,179,168,178,123,123,168,168],
[206,160,140,127,0,191,124,140,191,136,109,251,139],
[137,147,121,93,60,0,96,128,121,142,151,128,85],
[137,99,86,72,127,155,0,86,229,100,87,182,127],
[138,150,43,83,111,123,165,0,171,111,76,157,96],
[76,99,26,73,60,130,22,80,0,94,62,122,52],
[131,154,115,128,115,109,151,140,157,0,62,115,107],
[97,114,142,128,142,100,164,175,189,189,0,189,160],
[76,54,82,83,0,123,69,94,129,136,62,0,61],
[166,138,111,83,112,166,124,155,199,144,91,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 135, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,124,139,128,131,133,128,124,139,148,134,122],
[124,0,130,142,125,125,128,127,128,126,141,137,120],
[127,121,0,139,125,125,131,120,119,120,143,137,120],
[112,109,112,0,116,117,117,109,115,121,133,141,112],
[123,126,126,135,0,136,123,125,138,138,156,138,123],
[120,126,126,134,115,0,119,125,126,138,147,134,128],
[118,123,120,134,128,132,0,116,132,120,141,134,125],
[123,124,131,142,126,126,135,0,131,135,152,127,122],
[127,123,132,136,113,125,119,120,0,125,143,147,122],
[112,125,131,130,113,113,131,116,126,0,144,134,123],
[103,110,108,118,95,104,110,99,108,107,0,125,112],
[117,114,114,110,113,117,117,124,104,117,126,0,108],
[129,131,131,139,128,123,126,129,129,128,139,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 136, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,153,113,132,169,138,131,133,164,162,91,160],
[106,0,145,111,164,174,154,126,139,145,166,115,162],
[98,106,0,77,113,146,124,117,115,86,121,103,135],
[138,140,174,0,155,160,153,111,140,149,143,133,144],
[119,87,138,96,0,177,149,144,132,137,140,127,125],
[82,77,105,91,74,0,77,102,104,87,108,97,84],
[113,97,127,98,102,174,0,115,87,123,147,127,135],
[120,125,134,140,107,149,136,0,116,123,129,125,118],
[118,112,136,111,119,147,164,135,0,135,143,132,163],
[87,106,165,102,114,164,128,128,116,0,139,141,133],
[89,85,130,108,111,143,104,122,108,112,0,108,113],
[160,136,148,118,124,154,124,126,119,110,143,0,141],
[91,89,116,107,126,167,116,133,88,118,138,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 137, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,134,131,117,126,126,127,137,142,128,132,121],
[131,0,112,127,117,116,120,132,136,130,133,120,114],
[117,139,0,135,115,130,133,128,146,145,138,128,127],
[120,124,116,0,121,112,138,133,137,122,127,130,119],
[134,134,136,130,0,124,135,133,134,136,138,131,112],
[125,135,121,139,127,0,129,133,141,124,134,120,115],
[125,131,118,113,116,122,0,133,129,120,123,119,118],
[124,119,123,118,118,118,118,0,121,118,120,124,114],
[114,115,105,114,117,110,122,130,0,120,117,127,117],
[109,121,106,129,115,127,131,133,131,0,132,130,107],
[123,118,113,124,113,117,128,131,134,119,0,131,122],
[119,131,123,121,120,131,132,127,124,121,120,0,119],
[130,137,124,132,139,136,133,137,134,144,129,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 138, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,133,129,129,113,133,128,132,119,141,121,137],
[118,0,114,130,103,118,136,135,119,124,119,116,128],
[118,137,0,135,132,123,141,130,122,114,135,137,126],
[122,121,116,0,111,100,127,119,118,117,116,113,111],
[122,148,119,140,0,128,133,147,121,124,129,127,134],
[138,133,128,151,123,0,143,137,124,119,134,134,140],
[118,115,110,124,118,108,0,114,114,107,120,105,129],
[123,116,121,132,104,114,137,0,133,100,127,111,135],
[119,132,129,133,130,127,137,118,0,126,134,119,137],
[132,127,137,134,127,132,144,151,125,0,133,141,136],
[110,132,116,135,122,117,131,124,117,118,0,119,127],
[130,135,114,138,124,117,146,140,132,110,132,0,146],
[114,123,125,140,117,111,122,116,114,115,124,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 139, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,90,123,117,116,118,99,130,102,122,117,123],
[144,0,115,117,151,128,136,124,126,120,118,121,142],
[161,136,0,137,171,143,141,126,138,116,129,148,159],
[128,134,114,0,140,106,113,108,135,100,97,113,133],
[134,100,80,111,0,119,105,110,114,82,120,112,126],
[135,123,108,145,132,0,135,124,138,109,142,133,146],
[133,115,110,138,146,116,0,99,125,115,116,128,139],
[152,127,125,143,141,127,152,0,158,148,151,148,141],
[121,125,113,116,137,113,126,93,0,107,117,116,136],
[149,131,135,151,169,142,136,103,144,0,128,147,156],
[129,133,122,154,131,109,135,100,134,123,0,143,138],
[134,130,103,138,139,118,123,103,135,104,108,0,121],
[128,109,92,118,125,105,112,110,115,95,113,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 140, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,127,133,128,125,133,130,134,126,131,122,128],
[113,0,114,118,114,120,110,123,123,107,120,110,124],
[124,137,0,133,118,124,125,134,133,126,129,126,127],
[118,133,118,0,120,115,114,130,136,110,123,114,118],
[123,137,133,131,0,123,133,124,135,120,136,130,130],
[126,131,127,136,128,0,129,121,134,118,128,123,135],
[118,141,126,137,118,122,0,123,138,114,128,115,123],
[121,128,117,121,127,130,128,0,126,113,132,128,125],
[117,128,118,115,116,117,113,125,0,106,120,119,132],
[125,144,125,141,131,133,137,138,145,0,145,130,127],
[120,131,122,128,115,123,123,119,131,106,0,120,132],
[129,141,125,137,121,128,136,123,132,121,131,0,121],
[123,127,124,133,121,116,128,126,119,124,119,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 141, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,142,101,116,120,135,106,132,115,116,118,108],
[108,0,143,101,110,115,123,113,154,126,108,95,108],
[109,108,0,88,103,104,101,97,107,109,88,98,101],
[150,150,163,0,130,160,143,106,165,165,132,134,139],
[135,141,148,121,0,149,144,125,144,140,120,135,128],
[131,136,147,91,102,0,127,116,140,113,113,138,125],
[116,128,150,108,107,124,0,129,134,124,116,130,107],
[145,138,154,145,126,135,122,0,147,157,144,136,140],
[119,97,144,86,107,111,117,104,0,115,85,89,108],
[136,125,142,86,111,138,127,94,136,0,105,123,106],
[135,143,163,119,131,138,135,107,166,146,0,140,122],
[133,156,153,117,116,113,121,115,162,128,111,0,131],
[143,143,150,112,123,126,144,111,143,145,129,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 142, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,66,79,113,120,100,98,107,139,101,110,114],
[154,0,102,151,137,132,120,119,144,124,129,132,124],
[185,149,0,154,160,118,165,153,155,135,156,153,150],
[172,100,97,0,144,129,143,117,148,132,139,103,131],
[138,114,91,107,0,144,102,101,135,116,140,126,108],
[131,119,133,122,107,0,132,125,143,109,112,99,126],
[151,131,86,108,149,119,0,126,154,140,125,105,125],
[153,132,98,134,150,126,125,0,147,121,144,137,134],
[144,107,96,103,116,108,97,104,0,133,99,95,132],
[112,127,116,119,135,142,111,130,118,0,118,90,134],
[150,122,95,112,111,139,126,107,152,133,0,111,142],
[141,119,98,148,125,152,146,114,156,161,140,0,147],
[137,127,101,120,143,125,126,117,119,117,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 143, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,127,127,129,141,126,140,125,139,137,134,132],
[114,0,125,127,116,135,133,139,124,130,132,134,120],
[124,126,0,137,133,148,120,133,113,137,128,134,123],
[124,124,114,0,127,137,123,137,122,132,127,128,118],
[122,135,118,124,0,140,126,120,124,124,125,126,124],
[110,116,103,114,111,0,110,122,89,115,101,120,100],
[125,118,131,128,125,141,0,133,120,130,118,136,126],
[111,112,118,114,131,129,118,0,112,121,128,122,122],
[126,127,138,129,127,162,131,139,0,141,123,138,134],
[112,121,114,119,127,136,121,130,110,0,131,123,124],
[114,119,123,124,126,150,133,123,128,120,0,130,116],
[117,117,117,123,125,131,115,129,113,128,121,0,109],
[119,131,128,133,127,151,125,129,117,127,135,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 144, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,124,103,119,105,106,120,138,119,112,120,118],
[120,0,132,129,115,104,122,115,135,108,132,120,103],
[127,119,0,139,139,120,125,126,148,138,131,131,104],
[148,122,112,0,102,105,108,129,135,99,121,127,107],
[132,136,112,149,0,122,125,132,129,109,128,154,132],
[146,147,131,146,129,0,123,132,148,119,140,147,127],
[145,129,126,143,126,128,0,131,131,125,142,169,124],
[131,136,125,122,119,119,120,0,126,139,133,140,116],
[113,116,103,116,122,103,120,125,0,91,125,104,97],
[132,143,113,152,142,132,126,112,160,0,137,148,111],
[139,119,120,130,123,111,109,118,126,114,0,126,107],
[131,131,120,124,97,104,82,111,147,103,125,0,115],
[133,148,147,144,119,124,127,135,154,140,144,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 145, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,123,131,130,126,145,112,115,127,112,131,107],
[124,0,135,121,126,133,160,114,131,126,121,124,126],
[128,116,0,134,125,122,139,114,119,132,117,123,113],
[120,130,117,0,117,127,144,106,129,126,118,128,114],
[121,125,126,134,0,116,139,127,121,120,117,134,123],
[125,118,129,124,135,0,139,108,125,119,119,119,122],
[106,91,112,107,112,112,0,99,121,126,105,113,110],
[139,137,137,145,124,143,152,0,140,146,106,134,125],
[136,120,132,122,130,126,130,111,0,132,113,123,121],
[124,125,119,125,131,132,125,105,119,0,126,122,108],
[139,130,134,133,134,132,146,145,138,125,0,131,126],
[120,127,128,123,117,132,138,117,128,129,120,0,109],
[144,125,138,137,128,129,141,126,130,143,125,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 146, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,112,149,127,126,125,119,158,134,124,138,123],
[126,0,117,131,125,106,120,130,137,119,101,143,127],
[139,134,0,141,151,99,138,126,153,121,125,150,130],
[102,120,110,0,123,122,100,122,142,118,121,128,118],
[124,126,100,128,0,132,84,130,150,122,97,116,112],
[125,145,152,129,119,0,132,137,157,115,117,150,134],
[126,131,113,151,167,119,0,139,172,120,133,120,121],
[132,121,125,129,121,114,112,0,140,91,117,124,106],
[93,114,98,109,101,94,79,111,0,79,77,117,102],
[117,132,130,133,129,136,131,160,172,0,118,148,135],
[127,150,126,130,154,134,118,134,174,133,0,160,135],
[113,108,101,123,135,101,131,127,134,103,91,0,119],
[128,124,121,133,139,117,130,145,149,116,116,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 147, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,123,136,139,148,137,146,142,124,153,141,131],
[118,0,135,136,142,144,151,133,135,155,157,149,129],
[128,116,0,133,137,137,118,130,135,140,158,146,142],
[115,115,118,0,124,139,115,132,133,137,160,142,126],
[112,109,114,127,0,130,130,126,112,141,146,150,131],
[103,107,114,112,121,0,114,124,126,119,140,133,121],
[114,100,133,136,121,137,0,123,140,116,151,139,135],
[105,118,121,119,125,127,128,0,138,125,139,115,129],
[109,116,116,118,139,125,111,113,0,113,125,131,113],
[127,96,111,114,110,132,135,126,138,0,138,155,126],
[98,94,93,91,105,111,100,112,126,113,0,106,117],
[110,102,105,109,101,118,112,136,120,96,145,0,110],
[120,122,109,125,120,130,116,122,138,125,134,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 148, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,138,130,136,141,135,143,147,164,135,138,113],
[118,0,115,105,95,127,117,120,128,128,122,126,97],
[113,136,0,128,112,132,123,139,119,130,116,137,103],
[121,146,123,0,137,141,123,129,142,133,120,138,105],
[115,156,139,114,0,133,128,130,144,135,125,129,121],
[110,124,119,110,118,0,113,137,103,108,110,118,98],
[116,134,128,128,123,138,0,119,148,135,136,139,118],
[108,131,112,122,121,114,132,0,116,135,111,115,106],
[104,123,132,109,107,148,103,135,0,118,126,117,101],
[87,123,121,118,116,143,116,116,133,0,127,135,113],
[116,129,135,131,126,141,115,140,125,124,0,117,126],
[113,125,114,113,122,133,112,136,134,116,134,0,106],
[138,154,148,146,130,153,133,145,150,138,125,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 149, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,125,133,121,136,139,121,127,133,121,126,145],
[117,0,123,131,125,130,128,116,117,124,125,128,137],
[126,128,0,133,129,139,131,128,125,137,136,138,149],
[118,120,118,0,113,134,130,114,119,123,136,129,134],
[130,126,122,138,0,137,136,126,135,136,135,143,142],
[115,121,112,117,114,0,122,118,114,121,122,123,137],
[112,123,120,121,115,129,0,112,122,124,131,119,135],
[130,135,123,137,125,133,139,0,130,138,129,140,139],
[124,134,126,132,116,137,129,121,0,137,131,139,144],
[118,127,114,128,115,130,127,113,114,0,120,123,139],
[130,126,115,115,116,129,120,122,120,131,0,131,147],
[125,123,113,122,108,128,132,111,112,128,120,0,133],
[106,114,102,117,109,114,116,112,107,112,104,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 150, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,139,117,133,132,120,134,119,149,142,129,107],
[116,0,127,123,139,131,128,139,123,144,142,125,122],
[112,124,0,121,134,118,122,142,120,132,138,120,116],
[134,128,130,0,131,129,135,140,123,138,138,130,113],
[118,112,117,120,0,130,116,139,124,141,120,109,105],
[119,120,133,122,121,0,121,136,131,139,132,129,112],
[131,123,129,116,135,130,0,140,120,150,146,127,130],
[117,112,109,111,112,115,111,0,108,128,112,105,111],
[132,128,131,128,127,120,131,143,0,137,137,120,124],
[102,107,119,113,110,112,101,123,114,0,123,116,109],
[109,109,113,113,131,119,105,139,114,128,0,118,103],
[122,126,131,121,142,122,124,146,131,135,133,0,123],
[144,129,135,138,146,139,121,140,127,142,148,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 151, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,111,111,101,116,121,105,117,120,126,113,114],
[121,0,100,113,105,120,124,118,113,105,119,95,115],
[140,151,0,120,128,150,137,140,143,132,140,122,131],
[140,138,131,0,117,123,127,127,129,117,118,126,118],
[150,146,123,134,0,127,148,139,132,129,137,123,132],
[135,131,101,128,124,0,131,119,120,121,131,115,111],
[130,127,114,124,103,120,0,120,107,112,108,97,103],
[146,133,111,124,112,132,131,0,123,128,137,117,117],
[134,138,108,122,119,131,144,128,0,127,133,122,110],
[131,146,119,134,122,130,139,123,124,0,138,134,125],
[125,132,111,133,114,120,143,114,118,113,0,137,125],
[138,156,129,125,128,136,154,134,129,117,114,0,139],
[137,136,120,133,119,140,148,134,141,126,126,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 152, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,123,104,127,118,136,123,102,121,115,108,130],
[127,0,122,121,122,122,117,114,117,121,115,117,115],
[128,129,0,117,129,132,133,130,119,123,136,130,126],
[147,130,134,0,131,128,134,138,134,136,135,123,130],
[124,129,122,120,0,135,134,121,123,132,122,118,122],
[133,129,119,123,116,0,125,114,119,126,125,118,120],
[115,134,118,117,117,126,0,115,113,140,117,112,114],
[128,137,121,113,130,137,136,0,112,121,116,118,130],
[149,134,132,117,128,132,138,139,0,129,128,112,133],
[130,130,128,115,119,125,111,130,122,0,118,121,131],
[136,136,115,116,129,126,134,135,123,133,0,123,129],
[143,134,121,128,133,133,139,133,139,130,128,0,130],
[121,136,125,121,129,131,137,121,118,120,122,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 153, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,130,142,118,110,162,167,121,128,112,139,123],
[99,0,116,112,99,83,117,143,112,107,109,109,96],
[121,135,0,148,103,116,157,155,114,121,111,118,131],
[109,139,103,0,108,105,116,119,116,107,110,125,104],
[133,152,148,143,0,132,146,161,148,123,123,146,128],
[141,168,135,146,119,0,146,167,142,113,126,128,128],
[89,134,94,135,105,105,0,127,105,98,105,109,108],
[84,108,96,132,90,84,124,0,106,92,99,105,94],
[130,139,137,135,103,109,146,145,0,116,131,130,131],
[123,144,130,144,128,138,153,159,135,0,136,141,146],
[139,142,140,141,128,125,146,152,120,115,0,138,112],
[112,142,133,126,105,123,142,146,121,110,113,0,126],
[128,155,120,147,123,123,143,157,120,105,139,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 154, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,128,148,130,146,129,143,143,109,119,136,134],
[106,0,119,141,132,96,127,127,131,139,129,104,115],
[123,132,0,133,123,133,131,132,123,127,126,112,152],
[103,110,118,0,102,124,119,126,113,112,115,89,126],
[121,119,128,149,0,126,142,138,134,129,147,133,134],
[105,155,118,127,125,0,129,133,117,123,116,127,145],
[122,124,120,132,109,122,0,109,116,114,98,120,124],
[108,124,119,125,113,118,142,0,123,125,120,126,141],
[108,120,128,138,117,134,135,128,0,130,112,121,133],
[142,112,124,139,122,128,137,126,121,0,118,113,131],
[132,122,125,136,104,135,153,131,139,133,0,132,141],
[115,147,139,162,118,124,131,125,130,138,119,0,128],
[117,136,99,125,117,106,127,110,118,120,110,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 155, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,132,113,122,121,133,132,107,120,122,124,127],
[128,0,128,119,120,119,124,125,121,123,127,131,115],
[119,123,0,119,97,108,121,124,110,112,117,118,118],
[138,132,132,0,137,129,133,135,123,125,126,139,131],
[129,131,154,114,0,131,137,133,120,134,138,125,127],
[130,132,143,122,120,0,128,129,120,141,136,131,122],
[118,127,130,118,114,123,0,130,126,128,126,117,128],
[119,126,127,116,118,122,121,0,117,121,131,126,117],
[144,130,141,128,131,131,125,134,0,131,131,137,130],
[131,128,139,126,117,110,123,130,120,0,124,123,123],
[129,124,134,125,113,115,125,120,120,127,0,114,122],
[127,120,133,112,126,120,134,125,114,128,137,0,128],
[124,136,133,120,124,129,123,134,121,128,129,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 156, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,114,131,118,117,131,108,119,131,125,117,123],
[134,0,126,140,134,120,128,128,124,139,139,136,132],
[137,125,0,134,126,131,134,130,128,125,119,131,119],
[120,111,117,0,110,113,111,118,114,118,120,114,114],
[133,117,125,141,0,123,127,126,127,128,140,134,120],
[134,131,120,138,128,0,130,121,133,134,131,133,127],
[120,123,117,140,124,121,0,114,120,126,121,121,123],
[143,123,121,133,125,130,137,0,134,135,129,130,125],
[132,127,123,137,124,118,131,117,0,123,132,126,127],
[120,112,126,133,123,117,125,116,128,0,119,125,123],
[126,112,132,131,111,120,130,122,119,132,0,125,126],
[134,115,120,137,117,118,130,121,125,126,126,0,118],
[128,119,132,137,131,124,128,126,124,128,125,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 157, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,89,96,82,67,94,64,67,48,27,93,106],
[200,0,162,159,153,136,95,173,157,140,133,136,169],
[162,89,0,121,158,98,113,120,146,156,107,137,139],
[155,92,130,0,94,50,95,100,117,95,105,129,129],
[169,98,93,157,0,124,125,136,128,139,108,143,164],
[184,115,153,201,127,0,163,182,205,144,117,118,195],
[157,156,138,156,126,88,0,113,142,117,113,117,133],
[187,78,131,151,115,69,138,0,107,127,79,99,105],
[184,94,105,134,123,46,109,144,0,169,85,102,145],
[203,111,95,156,112,107,134,124,82,0,99,117,114],
[224,118,144,146,143,134,138,172,166,152,0,139,167],
[158,115,114,122,108,133,134,152,149,134,112,0,141],
[145,82,112,122,87,56,118,146,106,137,84,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 158, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,118,132,116,125,114,124,130,119,130,141,126],
[126,0,117,112,120,114,126,110,136,127,130,122,116],
[133,134,0,116,123,121,124,125,142,110,113,141,132],
[119,139,135,0,122,124,122,134,146,125,112,129,133],
[135,131,128,129,0,125,139,126,129,116,132,145,132],
[126,137,130,127,126,0,134,129,127,125,135,125,136],
[137,125,127,129,112,117,0,125,136,120,135,132,135],
[127,141,126,117,125,122,126,0,138,133,139,134,134],
[121,115,109,105,122,124,115,113,0,116,114,126,118],
[132,124,141,126,135,126,131,118,135,0,129,128,138],
[121,121,138,139,119,116,116,112,137,122,0,124,122],
[110,129,110,122,106,126,119,117,125,123,127,0,125],
[125,135,119,118,119,115,116,117,133,113,129,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 159, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,117,124,113,100,111,117,115,145,130,121,118],
[112,0,112,105,110,102,101,104,107,122,129,110,106],
[134,139,0,102,94,108,111,146,122,133,114,92,111],
[127,146,149,0,113,126,130,129,123,128,137,128,127],
[138,141,157,138,0,121,157,137,134,129,150,135,126],
[151,149,143,125,130,0,144,140,129,141,155,121,121],
[140,150,140,121,94,107,0,135,125,138,164,137,129],
[134,147,105,122,114,111,116,0,129,136,127,146,110],
[136,144,129,128,117,122,126,122,0,124,122,111,108],
[106,129,118,123,122,110,113,115,127,0,134,99,120],
[121,122,137,114,101,96,87,124,129,117,0,118,104],
[130,141,159,123,116,130,114,105,140,152,133,0,107],
[133,145,140,124,125,130,122,141,143,131,147,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 160, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,131,125,132,129,124,133,122,130,128,124,131],
[118,0,124,132,131,134,133,128,121,130,135,126,133],
[120,127,0,136,129,124,133,130,127,129,129,126,127],
[126,119,115,0,116,125,130,127,130,133,124,116,125],
[119,120,122,135,0,127,125,128,119,130,123,127,124],
[122,117,127,126,124,0,126,126,122,120,127,121,118],
[127,118,118,121,126,125,0,120,120,129,134,125,124],
[118,123,121,124,123,125,131,0,124,123,119,128,126],
[129,130,124,121,132,129,131,127,0,131,141,116,128],
[121,121,122,118,121,131,122,128,120,0,129,112,128],
[123,116,122,127,128,124,117,132,110,122,0,110,124],
[127,125,125,135,124,130,126,123,135,139,141,0,133],
[120,118,124,126,127,133,127,125,123,123,127,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 161, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,107,135,130,97,135,183,114,139,195,65,106],
[151,0,150,202,157,100,150,157,108,157,163,111,159],
[144,101,0,176,104,65,109,106,120,116,112,68,91],
[116,49,75,0,119,24,79,122,93,127,163,79,84],
[121,94,147,132,0,117,161,122,102,171,165,105,177],
[154,151,186,227,134,0,129,101,108,145,160,136,177],
[116,101,142,172,90,122,0,113,93,156,131,122,148],
[68,94,145,129,129,150,138,0,82,157,132,82,123],
[137,143,131,158,149,143,158,169,0,139,187,125,134],
[112,94,135,124,80,106,95,94,112,0,112,39,85],
[56,88,139,88,86,91,120,119,64,139,0,67,70],
[186,140,183,172,146,115,129,169,126,212,184,0,207],
[145,92,160,167,74,74,103,128,117,166,181,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 162, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,144,117,142,119,124,122,134,136,145,128,131],
[135,0,153,125,139,124,133,127,135,151,141,142,134],
[107,98,0,120,127,99,98,119,121,129,120,115,120],
[134,126,131,0,133,126,120,126,136,134,147,134,141],
[109,112,124,118,0,105,116,125,120,120,131,122,110],
[132,127,152,125,146,0,137,142,136,129,151,135,128],
[127,118,153,131,135,114,0,132,138,145,136,135,130],
[129,124,132,125,126,109,119,0,132,141,131,136,126],
[117,116,130,115,131,115,113,119,0,135,128,122,116],
[115,100,122,117,131,122,106,110,116,0,125,127,112],
[106,110,131,104,120,100,115,120,123,126,0,121,109],
[123,109,136,117,129,116,116,115,129,124,130,0,129],
[120,117,131,110,141,123,121,125,135,139,142,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 163, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,138,129,120,118,135,124,127,119,117,135,120],
[139,0,138,136,135,140,149,137,127,128,126,140,115],
[113,113,0,104,107,125,124,116,120,113,108,118,117],
[122,115,147,0,116,129,146,111,125,109,115,119,117],
[131,116,144,135,0,132,129,129,130,129,117,126,120],
[133,111,126,122,119,0,124,128,124,110,116,130,120],
[116,102,127,105,122,127,0,118,120,105,110,113,120],
[127,114,135,140,122,123,133,0,130,115,106,131,126],
[124,124,131,126,121,127,131,121,0,131,107,133,112],
[132,123,138,142,122,141,146,136,120,0,124,135,122],
[134,125,143,136,134,135,141,145,144,127,0,135,135],
[116,111,133,132,125,121,138,120,118,116,116,0,117],
[131,136,134,134,131,131,131,125,139,129,116,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 164, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,130,118,115,119,128,128,129,139,121,118,128],
[123,0,127,119,106,115,120,116,117,135,131,118,128],
[121,124,0,120,107,113,140,115,124,131,106,110,119],
[133,132,131,0,116,124,134,128,126,143,129,126,131],
[136,145,144,135,0,127,156,129,137,138,125,129,142],
[132,136,138,127,124,0,134,131,130,133,119,125,132],
[123,131,111,117,95,117,0,117,119,136,110,109,114],
[123,135,136,123,122,120,134,0,122,142,110,121,136],
[122,134,127,125,114,121,132,129,0,140,122,115,143],
[112,116,120,108,113,118,115,109,111,0,103,101,116],
[130,120,145,122,126,132,141,141,129,148,0,130,130],
[133,133,141,125,122,126,142,130,136,150,121,0,136],
[123,123,132,120,109,119,137,115,108,135,121,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 165, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,129,124,116,122,126,118,125,141,123,128,115],
[129,0,130,133,116,135,124,123,132,132,126,147,133],
[122,121,0,119,115,116,124,123,133,132,118,130,127],
[127,118,132,0,127,137,125,118,128,136,134,136,127],
[135,135,136,124,0,139,129,131,133,140,135,137,138],
[129,116,135,114,112,0,125,116,128,133,123,132,115],
[125,127,127,126,122,126,0,122,121,138,130,141,127],
[133,128,128,133,120,135,129,0,136,146,139,138,127],
[126,119,118,123,118,123,130,115,0,135,126,131,120],
[110,119,119,115,111,118,113,105,116,0,111,117,106],
[128,125,133,117,116,128,121,112,125,140,0,139,121],
[123,104,121,115,114,119,110,113,120,134,112,0,119],
[136,118,124,124,113,136,124,124,131,145,130,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 166, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,136,111,107,122,119,109,130,140,120,127,123],
[136,0,135,126,119,133,128,126,120,145,128,140,130],
[115,116,0,112,114,122,117,109,113,127,119,132,112],
[140,125,139,0,130,142,132,121,133,151,131,137,124],
[144,132,137,121,0,125,128,135,133,149,124,139,137],
[129,118,129,109,126,0,132,129,119,131,130,137,119],
[132,123,134,119,123,119,0,127,132,141,135,139,126],
[142,125,142,130,116,122,124,0,124,142,132,143,126],
[121,131,138,118,118,132,119,127,0,139,110,147,124],
[111,106,124,100,102,120,110,109,112,0,110,117,120],
[131,123,132,120,127,121,116,119,141,141,0,145,130],
[124,111,119,114,112,114,112,108,104,134,106,0,117],
[128,121,139,127,114,132,125,125,127,131,121,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 167, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,139,119,126,132,115,128,115,114,127,122,143],
[111,0,129,117,131,125,126,131,116,104,120,132,127],
[112,122,0,128,125,123,115,129,138,99,113,125,123],
[132,134,123,0,122,125,136,117,125,120,117,118,136],
[125,120,126,129,0,128,128,128,120,108,132,129,134],
[119,126,128,126,123,0,107,129,117,110,111,118,131],
[136,125,136,115,123,144,0,134,126,112,120,116,131],
[123,120,122,134,123,122,117,0,117,123,127,120,144],
[136,135,113,126,131,134,125,134,0,127,114,118,142],
[137,147,152,131,143,141,139,128,124,0,134,144,136],
[124,131,138,134,119,140,131,124,137,117,0,142,125],
[129,119,126,133,122,133,135,131,133,107,109,0,131],
[108,124,128,115,117,120,120,107,109,115,126,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 168, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,132,128,122,128,110,143,130,137,137,137,138],
[125,0,131,138,121,125,128,135,141,145,138,133,134],
[119,120,0,125,119,119,112,123,129,132,120,116,119],
[123,113,126,0,111,118,119,121,121,140,137,124,116],
[129,130,132,140,0,131,124,125,141,143,144,134,141],
[123,126,132,133,120,0,112,121,130,130,133,139,130],
[141,123,139,132,127,139,0,139,130,139,144,142,132],
[108,116,128,130,126,130,112,0,118,121,140,131,130],
[121,110,122,130,110,121,121,133,0,114,136,138,133],
[114,106,119,111,108,121,112,130,137,0,138,123,121],
[114,113,131,114,107,118,107,111,115,113,0,110,112],
[114,118,135,127,117,112,109,120,113,128,141,0,118],
[113,117,132,135,110,121,119,121,118,130,139,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 169, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,113,144,161,200,130,100,131,129,90,144,105],
[120,0,120,157,144,175,137,130,112,148,103,171,114],
[138,131,0,129,169,189,134,82,118,97,83,158,96],
[107,94,122,0,133,158,86,101,131,138,92,96,100],
[90,107,82,118,0,198,111,114,124,112,61,143,98],
[51,76,62,93,53,0,109,45,95,74,21,84,17],
[121,114,117,165,140,142,0,118,131,106,100,144,114],
[151,121,169,150,137,206,133,0,144,149,160,134,124],
[120,139,133,120,127,156,120,107,0,138,106,122,85],
[122,103,154,113,139,177,145,102,113,0,101,147,91],
[161,148,168,159,190,230,151,91,145,150,0,157,139],
[107,80,93,155,108,167,107,117,129,104,94,0,71],
[146,137,155,151,153,234,137,127,166,160,112,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 170, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,129,124,88,102,130,119,134,115,110,136,135],
[133,0,142,153,135,119,162,142,140,107,127,134,140],
[122,109,0,115,125,122,135,124,133,103,110,114,156],
[127,98,136,0,116,132,127,126,135,113,126,125,141],
[163,116,126,135,0,109,156,120,145,133,110,133,125],
[149,132,129,119,142,0,159,129,146,132,136,113,158],
[121,89,116,124,95,92,0,105,98,119,91,114,142],
[132,109,127,125,131,122,146,0,130,115,115,106,139],
[117,111,118,116,106,105,153,121,0,109,124,122,125],
[136,144,148,138,118,119,132,136,142,0,136,130,143],
[141,124,141,125,141,115,160,136,127,115,0,142,154],
[115,117,137,126,118,138,137,145,129,121,109,0,140],
[116,111,95,110,126,93,109,112,126,108,97,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 171, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,127,114,121,126,141,141,116,121,117,121,122],
[128,0,131,132,129,123,129,126,125,117,125,131,113],
[124,120,0,109,122,120,136,128,130,119,125,120,112],
[137,119,142,0,128,133,142,123,127,134,149,139,111],
[130,122,129,123,0,125,131,118,112,118,122,111,108],
[125,128,131,118,126,0,144,128,127,117,123,129,114],
[110,122,115,109,120,107,0,128,98,121,113,131,103],
[110,125,123,128,133,123,123,0,113,120,124,117,107],
[135,126,121,124,139,124,153,138,0,140,147,137,128],
[130,134,132,117,133,134,130,131,111,0,117,125,124],
[134,126,126,102,129,128,138,127,104,134,0,122,95],
[130,120,131,112,140,122,120,134,114,126,129,0,125],
[129,138,139,140,143,137,148,144,123,127,156,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 172, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,137,140,115,125,134,150,125,124,123,138,134],
[107,0,113,121,114,120,115,112,121,109,111,122,121],
[114,138,0,128,130,120,109,129,135,121,118,139,137],
[111,130,123,0,117,116,117,116,119,118,117,136,113],
[136,137,121,134,0,133,129,120,123,125,135,143,132],
[126,131,131,135,118,0,125,129,127,120,124,138,133],
[117,136,142,134,122,126,0,126,114,108,122,132,137],
[101,139,122,135,131,122,125,0,126,123,128,140,119],
[126,130,116,132,128,124,137,125,0,131,127,142,125],
[127,142,130,133,126,131,143,128,120,0,131,157,130],
[128,140,133,134,116,127,129,123,124,120,0,128,137],
[113,129,112,115,108,113,119,111,109,94,123,0,119],
[117,130,114,138,119,118,114,132,126,121,114,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 173, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,144,119,115,147,127,128,135,134,142,132,141],
[117,0,134,129,120,134,130,117,119,120,141,132,132],
[107,117,0,111,104,116,124,106,115,115,130,126,122],
[132,122,140,0,131,136,129,125,124,127,138,131,141],
[136,131,147,120,0,139,138,138,134,141,140,141,131],
[104,117,135,115,112,0,112,129,122,122,130,126,122],
[124,121,127,122,113,139,0,119,132,126,129,136,134],
[123,134,145,126,113,122,132,0,137,121,153,130,131],
[116,132,136,127,117,129,119,114,0,115,136,132,124],
[117,131,136,124,110,129,125,130,136,0,143,142,127],
[109,110,121,113,111,121,122,98,115,108,0,124,121],
[119,119,125,120,110,125,115,121,119,109,127,0,133],
[110,119,129,110,120,129,117,120,127,124,130,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 174, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,94,133,90,132,117,100,152,122,122,133,128],
[127,0,101,113,115,118,124,110,107,95,135,117,146],
[157,150,0,131,131,134,178,133,148,121,197,147,141],
[118,138,120,0,125,135,123,119,175,91,170,127,131],
[161,136,120,126,0,114,113,63,139,147,153,105,100],
[119,133,117,116,137,0,126,108,101,89,146,100,112],
[134,127,73,128,138,125,0,102,143,122,130,138,132],
[151,141,118,132,188,143,149,0,194,160,190,166,161],
[99,144,103,76,112,150,108,57,0,111,117,115,108],
[129,156,130,160,104,162,129,91,140,0,161,131,132],
[129,116,54,81,98,105,121,61,134,90,0,93,137],
[118,134,104,124,146,151,113,85,136,120,158,0,123],
[123,105,110,120,151,139,119,90,143,119,114,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 175, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,130,120,116,111,122,101,122,102,121,133,122],
[139,0,140,130,133,138,134,123,140,120,140,126,133],
[121,111,0,107,120,129,132,110,135,112,123,130,134],
[131,121,144,0,119,122,122,123,134,120,137,120,137],
[135,118,131,132,0,127,123,129,128,132,128,130,134],
[140,113,122,129,124,0,115,121,127,116,135,119,126],
[129,117,119,129,128,136,0,112,138,121,130,130,127],
[150,128,141,128,122,130,139,0,122,120,155,141,123],
[129,111,116,117,123,124,113,129,0,124,128,127,116],
[149,131,139,131,119,135,130,131,127,0,136,134,134],
[130,111,128,114,123,116,121,96,123,115,0,120,116],
[118,125,121,131,121,132,121,110,124,117,131,0,117],
[129,118,117,114,117,125,124,128,135,117,135,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 176, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,131,119,137,133,119,132,130,125,127,127,144],
[99,0,125,113,119,122,109,111,129,112,109,120,111],
[120,126,0,127,114,126,119,115,128,115,124,125,127],
[132,138,124,0,124,129,132,138,139,119,123,133,131],
[114,132,137,127,0,124,108,137,131,121,120,140,133],
[118,129,125,122,127,0,120,118,140,136,113,141,132],
[132,142,132,119,143,131,0,126,144,124,118,125,134],
[119,140,136,113,114,133,125,0,131,120,118,124,133],
[121,122,123,112,120,111,107,120,0,113,103,117,136],
[126,139,136,132,130,115,127,131,138,0,118,130,121],
[124,142,127,128,131,138,133,133,148,133,0,139,130],
[124,131,126,118,111,110,126,127,134,121,112,0,128],
[107,140,124,120,118,119,117,118,115,130,121,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 177, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,122,128,131,114,132,132,112,116,121,107,138],
[134,0,137,135,116,124,144,129,136,134,125,112,128],
[129,114,0,137,122,126,136,136,130,127,117,121,134],
[123,116,114,0,116,104,125,124,116,110,121,100,131],
[120,135,129,135,0,127,127,133,122,127,130,127,137],
[137,127,125,147,124,0,136,147,125,126,127,127,150],
[119,107,115,126,124,115,0,121,122,124,123,127,133],
[119,122,115,127,118,104,130,0,107,107,116,122,123],
[139,115,121,135,129,126,129,144,0,115,139,122,129],
[135,117,124,141,124,125,127,144,136,0,141,119,147],
[130,126,134,130,121,124,128,135,112,110,0,111,136],
[144,139,130,151,124,124,124,129,129,132,140,0,133],
[113,123,117,120,114,101,118,128,122,104,115,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 178, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,116,143,128,109,139,118,141,128,132,148,135],
[114,0,115,137,136,121,149,109,135,118,120,132,156],
[135,136,0,144,136,127,136,116,140,121,131,130,135],
[108,114,107,0,124,121,108,112,131,92,130,111,131],
[123,115,115,127,0,113,130,103,136,116,137,125,125],
[142,130,124,130,138,0,136,106,143,120,148,132,123],
[112,102,115,143,121,115,0,109,131,92,132,130,142],
[133,142,135,139,148,145,142,0,151,122,161,138,131],
[110,116,111,120,115,108,120,100,0,96,131,106,126],
[123,133,130,159,135,131,159,129,155,0,144,135,149],
[119,131,120,121,114,103,119,90,120,107,0,124,136],
[103,119,121,140,126,119,121,113,145,116,127,0,138],
[116,95,116,120,126,128,109,120,125,102,115,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 179, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,119,106,114,114,144,127,132,140,113,114,131],
[106,0,129,128,127,136,151,139,144,156,130,126,135],
[132,122,0,120,116,117,118,122,124,140,125,122,107],
[145,123,131,0,139,118,129,129,121,168,129,118,123],
[137,124,135,112,0,144,138,121,132,138,116,134,92],
[137,115,134,133,107,0,135,124,117,137,136,133,113],
[107,100,133,122,113,116,0,115,132,159,118,121,107],
[124,112,129,122,130,127,136,0,125,135,127,116,115],
[119,107,127,130,119,134,119,126,0,136,139,134,114],
[111,95,111,83,113,114,92,116,115,0,90,100,85],
[138,121,126,122,135,115,133,124,112,161,0,108,130],
[137,125,129,133,117,118,130,135,117,151,143,0,119],
[120,116,144,128,159,138,144,136,137,166,121,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 180, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,133,129,129,128,139,139,122,140,145,144,135],
[116,0,117,124,133,112,122,129,119,126,128,125,129],
[118,134,0,119,133,119,133,135,124,125,126,143,118],
[122,127,132,0,147,125,138,139,128,136,136,137,122],
[122,118,118,104,0,115,118,106,125,126,128,131,121],
[123,139,132,126,136,0,130,137,137,123,138,130,127],
[112,129,118,113,133,121,0,125,117,127,121,128,123],
[112,122,116,112,145,114,126,0,128,132,128,121,109],
[129,132,127,123,126,114,134,123,0,131,134,133,118],
[111,125,126,115,125,128,124,119,120,0,127,128,122],
[106,123,125,115,123,113,130,123,117,124,0,133,117],
[107,126,108,114,120,121,123,130,118,123,118,0,116],
[116,122,133,129,130,124,128,142,133,129,134,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 181, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,140,135,142,162,115,124,133,125,139,130,130],
[114,0,123,134,115,137,110,122,114,123,119,102,114],
[111,128,0,120,117,145,121,110,140,110,121,118,113],
[116,117,131,0,117,146,116,130,138,113,121,125,105],
[109,136,134,134,0,151,106,130,145,128,123,112,109],
[89,114,106,105,100,0,106,108,112,91,94,87,105],
[136,141,130,135,145,145,0,153,152,131,135,138,121],
[127,129,141,121,121,143,98,0,141,128,136,118,100],
[118,137,111,113,106,139,99,110,0,118,122,108,107],
[126,128,141,138,123,160,120,123,133,0,122,127,122],
[112,132,130,130,128,157,116,115,129,129,0,128,104],
[121,149,133,126,139,164,113,133,143,124,123,0,107],
[121,137,138,146,142,146,130,151,144,129,147,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 182, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,129,131,132,130,117,125,134,120,133,117,135],
[132,0,128,121,121,126,125,124,124,115,119,118,123],
[122,123,0,123,125,129,129,122,140,129,135,124,133],
[120,130,128,0,122,134,115,132,131,118,131,120,122],
[119,130,126,129,0,126,121,122,130,127,124,113,123],
[121,125,122,117,125,0,124,116,122,100,122,110,113],
[134,126,122,136,130,127,0,123,132,127,118,127,124],
[126,127,129,119,129,135,128,0,137,114,119,122,132],
[117,127,111,120,121,129,119,114,0,110,134,113,120],
[131,136,122,133,124,151,124,137,141,0,136,121,139],
[118,132,116,120,127,129,133,132,117,115,0,110,124],
[134,133,127,131,138,141,124,129,138,130,141,0,141],
[116,128,118,129,128,138,127,119,131,112,127,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 183, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,100,136,96,77,145,114,69,157,116,60,98],
[162,0,97,107,119,115,133,102,102,148,153,62,107],
[151,154,0,151,133,129,206,179,129,195,160,110,150],
[115,144,100,0,94,86,209,126,134,133,122,139,83],
[155,132,118,157,0,86,203,146,117,148,119,102,86],
[174,136,122,165,165,0,182,161,148,179,170,116,100],
[106,118,45,42,48,69,0,109,70,143,94,47,55],
[137,149,72,125,105,90,142,0,46,133,122,80,63],
[182,149,122,117,134,103,181,205,0,178,158,113,123],
[94,103,56,118,103,72,108,118,73,0,85,70,52],
[135,98,91,129,132,81,157,129,93,166,0,91,91],
[191,189,141,112,149,135,204,171,138,181,160,0,154],
[153,144,101,168,165,151,196,188,128,199,160,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 184, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,109,168,170,116,142,144,164,154,155,144,156],
[120,0,115,150,151,98,172,149,155,165,158,127,133],
[142,136,0,147,149,138,159,124,167,136,169,125,146],
[83,101,104,0,129,94,114,134,125,115,146,91,111],
[81,100,102,122,0,95,119,124,127,101,140,104,136],
[135,153,113,157,156,0,147,152,128,146,171,117,125],
[109,79,92,137,132,104,0,94,115,125,119,92,105],
[107,102,127,117,127,99,157,0,140,125,128,119,142],
[87,96,84,126,124,123,136,111,0,129,141,102,122],
[97,86,115,136,150,105,126,126,122,0,136,132,113],
[96,93,82,105,111,80,132,123,110,115,0,78,93],
[107,124,126,160,147,134,159,132,149,119,173,0,136],
[95,118,105,140,115,126,146,109,129,138,158,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 185, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,134,136,130,128,140,133,116,118,136,134,119],
[128,0,120,149,148,140,135,134,131,128,142,131,137],
[117,131,0,129,135,125,127,132,125,132,142,113,125],
[115,102,122,0,127,134,117,120,124,113,148,115,123],
[121,103,116,124,0,135,117,117,118,105,124,102,111],
[123,111,126,117,116,0,112,123,101,113,133,111,119],
[111,116,124,134,134,139,0,132,120,118,132,126,124],
[118,117,119,131,134,128,119,0,115,104,145,108,117],
[135,120,126,127,133,150,131,136,0,123,144,136,127],
[133,123,119,138,146,138,133,147,128,0,141,134,124],
[115,109,109,103,127,118,119,106,107,110,0,111,116],
[117,120,138,136,149,140,125,143,115,117,140,0,136],
[132,114,126,128,140,132,127,134,124,127,135,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 186, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,166,178,130,201,197,114,153,169,214,175,150],
[92,0,78,158,101,191,154,122,84,120,114,107,154],
[85,173,0,125,64,188,176,122,96,142,161,88,128],
[73,93,126,0,74,149,158,94,82,145,148,119,138],
[121,150,187,177,0,191,170,132,116,187,168,147,189],
[50,60,63,102,60,0,63,44,47,70,97,80,91],
[54,97,75,93,81,188,0,89,122,133,106,117,109],
[137,129,129,157,119,207,162,0,134,146,198,114,172],
[98,167,155,169,135,204,129,117,0,179,164,142,204],
[82,131,109,106,64,181,118,105,72,0,170,76,156],
[37,137,90,103,83,154,145,53,87,81,0,79,82],
[76,144,163,132,104,171,134,137,109,175,172,0,157],
[101,97,123,113,62,160,142,79,47,95,169,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 187, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,144,134,124,124,128,125,142,129,117,129,133],
[119,0,134,113,118,124,109,118,122,126,119,134,125],
[107,117,0,121,97,118,108,108,111,111,99,120,110],
[117,138,130,0,119,114,123,113,128,127,108,116,122],
[127,133,154,132,0,130,117,123,136,128,132,132,133],
[127,127,133,137,121,0,120,120,142,125,122,138,124],
[123,142,143,128,134,131,0,133,144,131,135,142,128],
[126,133,143,138,128,131,118,0,133,125,114,126,133],
[109,129,140,123,115,109,107,118,0,124,106,120,125],
[122,125,140,124,123,126,120,126,127,0,122,132,117],
[134,132,152,143,119,129,116,137,145,129,0,126,139],
[122,117,131,135,119,113,109,125,131,119,125,0,124],
[118,126,141,129,118,127,123,118,126,134,112,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 188, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,102,113,179,131,93,64,123,109,90,173,91],
[108,0,92,111,184,119,96,95,117,83,100,134,96],
[149,159,0,135,175,170,123,121,177,138,141,193,139],
[138,140,116,0,130,167,116,92,130,84,125,135,123],
[72,67,76,121,0,110,103,77,129,49,100,130,91],
[120,132,81,84,141,0,125,114,103,77,103,155,76],
[158,155,128,135,148,126,0,170,140,115,113,162,135],
[187,156,130,159,174,137,81,0,177,117,125,203,138],
[128,134,74,121,122,148,111,74,0,78,137,133,110],
[142,168,113,167,202,174,136,134,173,0,140,218,143],
[161,151,110,126,151,148,138,126,114,111,0,176,135],
[78,117,58,116,121,96,89,48,118,33,75,0,83],
[160,155,112,128,160,175,116,113,141,108,116,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 189, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,134,138,113,135,129,135,123,133,135,132,130],
[124,0,124,133,123,130,133,140,128,127,123,127,126],
[117,127,0,125,116,130,138,132,124,123,133,126,125],
[113,118,126,0,122,128,127,134,112,123,126,115,125],
[138,128,135,129,0,142,130,146,146,125,139,133,141],
[116,121,121,123,109,0,128,118,116,117,125,118,119],
[122,118,113,124,121,123,0,135,131,122,131,116,125],
[116,111,119,117,105,133,116,0,124,119,122,113,123],
[128,123,127,139,105,135,120,127,0,121,138,129,140],
[118,124,128,128,126,134,129,132,130,0,150,131,146],
[116,128,118,125,112,126,120,129,113,101,0,117,124],
[119,124,125,136,118,133,135,138,122,120,134,0,130],
[121,125,126,126,110,132,126,128,111,105,127,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 190, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,107,121,133,118,122,118,124,122,118,114,124],
[127,0,131,126,146,129,131,116,136,121,111,119,124],
[144,120,0,125,139,130,139,127,134,118,122,133,128],
[130,125,126,0,143,133,135,122,133,126,129,126,122],
[118,105,112,108,0,118,122,107,125,103,110,121,123],
[133,122,121,118,133,0,126,114,135,122,122,110,120],
[129,120,112,116,129,125,0,98,128,119,106,113,119],
[133,135,124,129,144,137,153,0,140,129,128,137,138],
[127,115,117,118,126,116,123,111,0,119,130,118,109],
[129,130,133,125,148,129,132,122,132,0,124,128,136],
[133,140,129,122,141,129,145,123,121,127,0,126,133],
[137,132,118,125,130,141,138,114,133,123,125,0,124],
[127,127,123,129,128,131,132,113,142,115,118,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 191, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,127,120,124,112,129,112,125,109,121,124,118],
[130,0,137,138,118,130,111,110,135,131,119,114,121],
[124,114,0,128,127,126,132,112,124,123,119,117,123],
[131,113,123,0,111,126,109,109,120,114,118,113,109],
[127,133,124,140,0,132,124,117,131,116,117,123,120],
[139,121,125,125,119,0,127,117,128,115,129,117,125],
[122,140,119,142,127,124,0,122,117,124,109,109,120],
[139,141,139,142,134,134,129,0,139,125,130,128,133],
[126,116,127,131,120,123,134,112,0,119,116,117,116],
[142,120,128,137,135,136,127,126,132,0,121,120,132],
[130,132,132,133,134,122,142,121,135,130,0,121,132],
[127,137,134,138,128,134,142,123,134,131,130,0,132],
[133,130,128,142,131,126,131,118,135,119,119,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 192, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,149,128,161,141,185,208,156,161,140,118,141],
[118,0,122,114,137,106,159,196,139,138,114,106,168],
[102,129,0,113,128,82,132,146,100,137,120,91,136],
[123,137,138,0,142,145,190,184,154,142,127,174,144],
[90,114,123,109,0,88,163,171,120,123,117,151,121],
[110,145,169,106,163,0,163,158,168,148,128,134,132],
[66,92,119,61,88,88,0,154,141,136,101,126,123],
[43,55,105,67,80,93,97,0,103,118,101,94,106],
[95,112,151,97,131,83,110,148,0,137,97,104,122],
[90,113,114,109,128,103,115,133,114,0,119,124,110],
[111,137,131,124,134,123,150,150,154,132,0,126,145],
[133,145,160,77,100,117,125,157,147,127,125,0,127],
[110,83,115,107,130,119,128,145,129,141,106,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 193, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,110,120,110,121,125,124,120,111,118,113,127],
[121,0,132,121,110,114,136,144,135,125,124,140,143],
[141,119,0,126,130,127,139,128,130,113,141,130,121],
[131,130,125,0,93,129,134,104,119,115,127,127,123],
[141,141,121,158,0,146,144,151,110,149,150,133,151],
[130,137,124,122,105,0,140,120,103,114,115,117,116],
[126,115,112,117,107,111,0,136,121,123,121,114,129],
[127,107,123,147,100,131,115,0,108,99,136,109,132],
[131,116,121,132,141,148,130,143,0,120,145,129,127],
[140,126,138,136,102,137,128,152,131,0,137,146,157],
[133,127,110,124,101,136,130,115,106,114,0,130,128],
[138,111,121,124,118,134,137,142,122,105,121,0,112],
[124,108,130,128,100,135,122,119,124,94,123,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 194, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,132,122,137,130,122,137,115,117,123,112,113],
[132,0,141,143,130,144,131,135,127,134,136,132,114],
[119,110,0,126,125,130,121,124,112,123,134,113,106],
[129,108,125,0,135,126,119,123,122,127,120,118,117],
[114,121,126,116,0,131,112,124,115,125,120,119,121],
[121,107,121,125,120,0,125,110,118,135,115,109,116],
[129,120,130,132,139,126,0,141,122,136,121,120,117],
[114,116,127,128,127,141,110,0,122,121,135,119,111],
[136,124,139,129,136,133,129,129,0,137,130,120,129],
[134,117,128,124,126,116,115,130,114,0,125,124,111],
[128,115,117,131,131,136,130,116,121,126,0,114,104],
[139,119,138,133,132,142,131,132,131,127,137,0,115],
[138,137,145,134,130,135,134,140,122,140,147,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 195, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,133,92,120,155,133,89,103,118,86,115],
[143,0,130,127,102,141,114,182,86,93,94,81,143],
[139,121,0,143,109,149,149,138,105,94,95,84,107],
[118,124,108,0,135,126,114,147,102,136,95,89,101],
[159,149,142,116,0,144,163,148,80,73,105,123,129],
[131,110,102,125,107,0,165,164,81,89,93,52,117],
[96,137,102,137,88,86,0,158,93,105,105,104,116],
[118,69,113,104,103,87,93,0,57,83,54,74,112],
[162,165,146,149,171,170,158,194,0,114,123,129,160],
[148,158,157,115,178,162,146,168,137,0,119,109,138],
[133,157,156,156,146,158,146,197,128,132,0,84,141],
[165,170,167,162,128,199,147,177,122,142,167,0,165],
[136,108,144,150,122,134,135,139,91,113,110,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 196, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,119,130,126,131,125,124,130,144,135,132,133],
[121,0,124,127,136,126,129,127,135,131,135,137,128],
[132,127,0,126,127,132,130,120,139,134,138,142,124],
[121,124,125,0,122,121,113,127,128,127,135,133,118],
[125,115,124,129,0,127,138,141,125,140,134,126,136],
[120,125,119,130,124,0,125,132,144,135,135,133,118],
[126,122,121,138,113,126,0,125,128,136,143,135,114],
[127,124,131,124,110,119,126,0,128,137,127,128,125],
[121,116,112,123,126,107,123,123,0,130,129,122,115],
[107,120,117,124,111,116,115,114,121,0,124,123,122],
[116,116,113,116,117,116,108,124,122,127,0,125,123],
[119,114,109,118,125,118,116,123,129,128,126,0,108],
[118,123,127,133,115,133,137,126,136,129,128,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 197, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,103,72,140,88,114,121,132,156,105,133,124],
[114,0,122,108,132,114,132,126,127,165,101,138,133],
[148,129,0,129,148,122,130,120,153,168,112,141,119],
[179,143,122,0,153,138,141,154,152,165,127,153,170],
[111,119,103,98,0,121,142,154,107,149,92,145,130],
[163,137,129,113,130,0,160,151,134,154,102,130,145],
[137,119,121,110,109,91,0,139,121,156,99,170,107],
[130,125,131,97,97,100,112,0,123,168,98,148,118],
[119,124,98,99,144,117,130,128,0,163,83,118,116],
[95,86,83,86,102,97,95,83,88,0,60,91,115],
[146,150,139,124,159,149,152,153,168,191,0,159,140],
[118,113,110,98,106,121,81,103,133,160,92,0,119],
[127,118,132,81,121,106,144,133,135,136,111,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 198, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,117,128,104,113,143,90,92,90,110,118,114],
[145,0,105,151,125,126,139,144,142,124,128,107,141],
[134,146,0,123,111,121,139,103,119,145,114,131,115],
[123,100,128,0,124,117,131,119,136,121,114,99,121],
[147,126,140,127,0,120,139,126,129,121,122,120,124],
[138,125,130,134,131,0,123,128,124,106,119,117,134],
[108,112,112,120,112,128,0,111,114,100,126,93,111],
[161,107,148,132,125,123,140,0,132,140,125,132,130],
[159,109,132,115,122,127,137,119,0,119,124,105,112],
[161,127,106,130,130,145,151,111,132,0,124,126,138],
[141,123,137,137,129,132,125,126,127,127,0,125,131],
[133,144,120,152,131,134,158,119,146,125,126,0,143],
[137,110,136,130,127,117,140,121,139,113,120,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 199, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,143,136,122,115,134,153,132,118,144,141,133],
[132,0,133,145,122,126,138,146,139,119,125,150,132],
[108,118,0,131,109,120,136,121,128,121,124,131,127],
[115,106,120,0,116,113,129,124,99,101,84,104,114],
[129,129,142,135,0,123,140,137,135,123,141,135,119],
[136,125,131,138,128,0,154,138,130,137,133,141,139],
[117,113,115,122,111,97,0,134,117,100,121,114,105],
[98,105,130,127,114,113,117,0,121,97,110,112,125],
[119,112,123,152,116,121,134,130,0,98,120,130,119],
[133,132,130,150,128,114,151,154,153,0,121,122,166],
[107,126,127,167,110,118,130,141,131,130,0,149,121],
[110,101,120,147,116,110,137,139,121,129,102,0,136],
[118,119,124,137,132,112,146,126,132,85,130,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 251, 200, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebbrcwd/mebbrcwd_13_251.csv", index=False, header=False)
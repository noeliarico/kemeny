
import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg
from kemeny import sc

rep = 1
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,1008,985,935,955,948,947,1060,937,1008,1041,954,878],
[993,0,952,964,953,1001,975,1046,938,917,1034,978,909],
[1016,1049,0,983,987,1009,990,1072,955,979,1013,1006,968],
[1066,1037,1018,0,1059,993,1097,1089,1040,979,1082,988,985],
[1046,1048,1014,942,0,969,992,1079,999,917,1102,955,986],
[1053,1000,992,1008,1032,0,994,1099,1052,956,1099,1035,976],
[1054,1026,1011,904,1009,1007,0,1036,918,1022,1082,1012,990],
[941,955,929,912,922,902,965,0,941,888,1034,942,922],
[1064,1063,1046,961,1002,949,1083,1060,0,953,1121,1000,993],
[993,1084,1022,1022,1084,1045,979,1113,1048,0,1126,1051,1033],
[960,967,988,919,899,902,919,967,880,875,0,889,854],
[1047,1023,995,1013,1046,966,989,1059,1001,950,1112,0,1012],
[1123,1092,1033,1016,1015,1025,1011,1079,1008,968,1147,989,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 1, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,999,994,1010,982,1039,1043,957,1032,1026,1079,1015,1003],
[1002,0,1005,994,985,1019,993,1031,989,999,1028,1001,975],
[1007,996,0,978,996,1084,1060,969,978,1032,1040,980,1022],
[991,1007,1023,0,997,1021,1034,961,998,1022,1027,1034,1023],
[1019,1016,1005,1004,0,1084,1054,999,985,1026,1063,1013,1002],
[962,982,917,980,917,0,960,961,929,983,985,995,956],
[958,1008,941,967,947,1041,0,986,1010,978,1041,1001,1001],
[1044,970,1032,1040,1002,1040,1015,0,1011,1021,1067,1017,1006],
[969,1012,1023,1003,1016,1072,991,990,0,971,1030,1026,1035],
[975,1002,969,979,975,1018,1023,980,1030,0,1052,1001,955],
[922,973,961,974,938,1016,960,934,971,949,0,1003,973],
[986,1000,1021,967,988,1006,1000,984,975,1000,998,0,1008],
[998,1026,979,978,999,1045,1000,995,966,1046,1028,993,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 2, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,984,961,1010,953,997,996,969,989,989,998,984,1020],
[1017,0,968,1009,977,1011,1029,994,1003,988,1003,991,1028],
[1040,1033,0,1010,1007,1034,1026,999,998,1006,1027,1014,1075],
[991,992,991,0,976,1015,994,948,994,983,996,991,1016],
[1048,1024,994,1025,0,1023,1022,988,1005,1012,1024,1023,1057],
[1004,990,967,986,978,0,1002,949,1007,992,1044,994,1057],
[1005,972,975,1007,979,999,0,1017,987,1009,1007,981,1048],
[1032,1007,1002,1053,1013,1052,984,0,1004,992,1022,1014,1042],
[1012,998,1003,1007,996,994,1014,997,0,973,1004,981,1023],
[1012,1013,995,1018,989,1009,992,1009,1028,0,1010,1003,1056],
[1003,998,974,1005,977,957,994,979,997,991,0,987,1033],
[1017,1010,987,1010,978,1007,1020,987,1020,998,1014,0,1049],
[981,973,926,985,944,944,953,959,978,945,968,952,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 3, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1140,1190,1275,1021,1174,990,1040,1057,1150,1018,1098,1316],
[861,0,906,972,821,793,873,869,793,1042,718,803,982],
[811,1095,0,1110,853,892,939,1019,859,1197,968,957,985],
[726,1029,891,0,675,884,894,982,777,946,729,705,942],
[980,1180,1148,1326,0,1135,1117,1116,984,1165,1006,1009,1041],
[827,1208,1109,1117,866,0,812,1037,898,1202,957,876,1011],
[1011,1128,1062,1107,884,1189,0,1209,1013,1201,1035,1007,1080],
[961,1132,982,1019,885,964,792,0,973,1155,1093,788,965],
[944,1208,1142,1224,1017,1103,988,1028,0,1301,1039,1045,1148],
[851,959,804,1055,836,799,800,846,700,0,773,754,918],
[983,1283,1033,1272,995,1044,966,908,962,1228,0,922,1084],
[903,1198,1044,1296,992,1125,994,1213,956,1247,1079,0,1179],
[685,1019,1016,1059,960,990,921,1036,853,1083,917,822,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 4, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,965,948,967,1015,1013,997,960,934,1004,1019,986,974],
[1036,0,943,1010,988,994,1011,974,980,970,1013,960,974],
[1053,1058,0,996,1025,1037,1057,990,982,1007,1038,1047,991],
[1034,991,1005,0,989,1010,1018,948,999,1011,1013,1072,1015],
[986,1013,976,1012,0,997,1018,952,1006,971,1019,1006,998],
[988,1007,964,991,1004,0,989,963,933,1000,1063,982,977],
[1004,990,944,983,983,1012,0,943,974,982,1024,971,1017],
[1041,1027,1011,1053,1049,1038,1058,0,999,1034,1064,1035,1049],
[1067,1021,1019,1002,995,1068,1027,1002,0,1002,1033,1020,1041],
[997,1031,994,990,1030,1001,1019,967,999,0,1032,1006,990],
[982,988,963,988,982,938,977,937,968,969,0,1005,1003],
[1015,1041,954,929,995,1019,1030,966,981,995,996,0,950],
[1027,1027,1010,986,1003,1024,984,952,960,1011,998,1051,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 5, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,979,987,951,1016,986,990,997,1010,977,967,975,982],
[1022,0,1035,1011,1008,999,1031,1037,1037,1014,1003,993,987],
[1014,966,0,966,1026,1010,1032,1035,1031,1001,962,971,964],
[1050,990,1035,0,1061,1054,1050,1081,1084,1034,1028,1038,992],
[985,993,975,940,0,964,1004,1000,966,972,971,950,955],
[1015,1002,991,947,1037,0,1013,1007,1004,990,1023,1017,1002],
[1011,970,969,951,997,988,0,961,983,990,928,969,960],
[1004,964,966,920,1001,994,1040,0,982,978,965,960,951],
[991,964,970,917,1035,997,1018,1019,0,969,977,1019,939],
[1024,987,1000,967,1029,1011,1011,1023,1032,0,969,990,971],
[1034,998,1039,973,1030,978,1073,1036,1024,1032,0,1014,997],
[1026,1008,1030,963,1051,984,1032,1041,982,1011,987,0,965],
[1019,1014,1037,1009,1046,999,1041,1050,1062,1030,1004,1036,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 6, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1001,959,961,974,945,980,1010,1016,1026,1003,1024,1008],
[1000,0,985,942,970,955,969,1034,985,991,987,990,978],
[1042,1016,0,941,953,993,998,1056,995,1010,1023,1015,999],
[1040,1059,1060,0,989,1020,1044,1084,1064,1044,1019,1082,1035],
[1027,1031,1048,1012,0,995,1010,1038,1013,998,1050,1004,1012],
[1056,1046,1008,981,1006,0,1031,1083,1033,1022,1032,1079,1006],
[1021,1032,1003,957,991,970,0,1058,998,985,1017,1005,994],
[991,967,945,917,963,918,943,0,950,966,970,1001,970],
[985,1016,1006,937,988,968,1003,1051,0,1001,1001,997,1014],
[975,1010,991,957,1003,979,1016,1035,1000,0,1008,1032,1006],
[998,1014,978,982,951,969,984,1031,1000,993,0,1003,1013],
[977,1011,986,919,997,922,996,1000,1004,969,998,0,1001],
[993,1023,1002,966,989,995,1007,1031,987,995,988,1000,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 7, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,921,958,1058,1008,963,992,958,935,1076,1000,1089,1033],
[1080,0,1094,1104,1087,1050,1065,942,1127,1170,1019,1139,1056],
[1043,907,0,1020,948,953,1009,932,1043,1096,977,1067,994],
[943,897,981,0,1027,953,996,837,1054,1070,980,1063,976],
[993,914,1053,974,0,953,1021,909,1101,1034,990,1008,1044],
[1038,951,1048,1048,1048,0,1131,1003,1066,1068,1015,1048,1065],
[1009,936,992,1005,980,870,0,950,1009,1028,994,1061,1029],
[1043,1059,1069,1164,1092,998,1051,0,1095,1093,1049,1140,1110],
[1066,874,958,947,900,935,992,906,0,1087,941,1083,980],
[925,831,905,931,967,933,973,908,914,0,923,1100,1032],
[1001,982,1024,1021,1011,986,1007,952,1060,1078,0,1107,1146],
[912,862,934,938,993,953,940,861,918,901,894,0,1041],
[968,945,1007,1025,957,936,972,891,1021,969,855,960,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 8, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1009,1042,1012,1054,1008,1036,1020,1056,1022,1001,1061,979],
[992,0,1010,997,1000,1033,998,985,1020,1031,961,1065,1012],
[959,991,0,982,1026,1007,992,1020,1011,1008,1016,1004,1010],
[989,1004,1019,0,1027,1092,1025,1010,1080,1079,1029,1055,1036],
[947,1001,975,974,0,1029,994,975,987,985,953,1007,985],
[993,968,994,909,972,0,971,976,1027,979,952,1028,944],
[965,1003,1009,976,1007,1030,0,962,1000,1035,1015,1035,1060],
[981,1016,981,991,1026,1025,1039,0,1016,1036,999,1043,1039],
[945,981,990,921,1014,974,1001,985,0,1032,986,1045,1007],
[979,970,993,922,1016,1022,966,965,969,0,983,1009,970],
[1000,1040,985,972,1048,1049,986,1002,1015,1018,0,1041,1043],
[940,936,997,946,994,973,966,958,956,992,960,0,990],
[1022,989,991,965,1016,1057,941,962,994,1031,958,1011,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 9, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1001,930,1027,960,1043,1040,1017,1052,974,1002,1024,979],
[1000,0,1001,1073,1014,1097,1052,1050,1030,1056,1011,1041,1018],
[1071,1000,0,1046,1060,1088,1046,1041,1065,1049,1038,1045,995],
[974,928,955,0,1016,1007,951,988,1001,946,1026,890,951],
[1041,987,941,985,0,1013,975,1049,1078,929,1086,1011,991],
[958,904,913,994,988,0,951,991,931,957,1010,983,977],
[961,949,955,1050,1026,1050,0,1003,977,933,967,990,985],
[984,951,960,1013,952,1010,998,0,963,952,995,959,978],
[949,971,936,1000,923,1070,1024,1038,0,1049,1015,946,930],
[1027,945,952,1055,1072,1044,1068,1049,952,0,1116,979,968],
[999,990,963,975,915,991,1034,1006,986,885,0,971,939],
[977,960,956,1111,990,1018,1011,1042,1055,1022,1030,0,991],
[1022,983,1006,1050,1010,1024,1016,1023,1071,1033,1062,1010,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 10, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,989,975,1017,968,977,1024,1034,973,994,1035,1012,985],
[1012,0,998,1005,1012,994,1023,1047,1003,995,996,1023,1008],
[1026,1003,0,990,1003,969,980,1056,960,957,989,1015,991],
[984,996,1011,0,1005,1018,1021,1042,982,977,995,1014,978],
[1033,989,998,996,0,985,1056,1054,945,986,1005,1026,978],
[1024,1007,1032,983,1016,0,1045,1045,1001,1000,1015,1022,1045],
[977,978,1021,980,945,956,0,986,981,971,968,1015,964],
[967,954,945,959,947,956,1015,0,923,940,954,985,954],
[1028,998,1041,1019,1056,1000,1020,1078,0,1001,1021,1026,1019],
[1007,1006,1044,1024,1015,1001,1030,1061,1000,0,1021,1049,1010],
[966,1005,1012,1006,996,986,1033,1047,980,980,0,1001,996],
[989,978,986,987,975,979,986,1016,975,952,1000,0,960],
[1016,993,1010,1023,1023,956,1037,1047,982,991,1005,1041,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 11, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1041,996,1020,1026,1025,1047,997,995,1057,1004,1038,1026],
[960,0,963,972,1000,1002,969,971,985,967,978,1002,989],
[1005,1038,0,1019,1042,1014,1020,1006,991,1005,1016,1028,1039],
[981,1029,982,0,1002,984,991,1006,1005,980,963,1022,997],
[975,1001,959,999,0,1002,988,964,979,982,972,1019,1019],
[976,999,987,1017,999,0,977,995,992,1004,998,1007,1018],
[954,1032,981,1010,1013,1024,0,1001,987,1003,1022,1020,1014],
[1004,1030,995,995,1037,1006,1000,0,976,1005,1000,1003,1002],
[1006,1016,1010,996,1022,1009,1014,1025,0,1034,991,1044,1019],
[944,1034,996,1021,1019,997,998,996,967,0,1009,1033,997],
[997,1023,985,1038,1029,1003,979,1001,1010,992,0,1039,1037],
[963,999,973,979,982,994,981,998,957,968,962,0,989],
[975,1012,962,1004,982,983,987,999,982,1004,964,1012,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 12, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1081,1024,1044,1035,1013,1057,1047,1026,1049,1045,1030,991],
[920,0,944,931,939,937,923,987,990,966,956,961,932],
[977,1057,0,995,1000,1009,998,1021,952,1003,1005,1030,979],
[957,1070,1006,0,976,951,968,1035,1002,1037,985,1007,967],
[966,1062,1001,1025,0,1018,1019,1026,990,1025,1030,1027,1003],
[988,1064,992,1050,983,0,1005,1053,1016,1044,1008,1038,1013],
[944,1078,1003,1033,982,996,0,1037,962,1046,1023,1027,974],
[954,1014,980,966,975,948,964,0,944,1013,991,951,963],
[975,1011,1049,999,1011,985,1039,1057,0,1047,996,985,973],
[952,1035,998,964,976,957,955,988,954,0,1017,1008,940],
[956,1045,996,1016,971,993,978,1010,1005,984,0,999,978],
[971,1040,971,994,974,963,974,1050,1016,993,1002,0,979],
[1010,1069,1022,1034,998,988,1027,1038,1028,1061,1023,1022,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 13, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1029,1020,994,1017,1033,1020,1027,1001,1036,1011,1036,1003],
[972,0,1007,975,996,997,1008,993,995,982,1020,997,995],
[981,994,0,983,1004,994,995,1016,962,974,978,1009,983],
[1007,1026,1018,0,1008,1032,1006,1028,1034,1048,1035,1023,998],
[984,1005,997,993,0,1022,1002,964,985,987,989,987,972],
[968,1004,1007,969,979,0,990,982,983,962,968,994,958],
[981,993,1006,995,999,1011,0,1001,1014,1000,1009,1023,987],
[974,1008,985,973,1037,1019,1000,0,1010,1015,990,1015,1002],
[1000,1006,1039,967,1016,1018,987,991,0,984,988,1000,994],
[965,1019,1027,953,1014,1039,1001,986,1017,0,1030,1034,990],
[990,981,1023,966,1012,1033,992,1011,1013,971,0,1001,997],
[965,1004,992,978,1014,1007,978,986,1001,967,1000,0,963],
[998,1006,1018,1003,1029,1043,1014,999,1007,1011,1004,1038,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 14, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1000,1047,1019,1050,1052,1094,998,1062,1058,1022,1015,1002],
[1001,0,993,1031,974,1032,1034,963,1025,991,1009,1020,986],
[954,1008,0,1006,984,1002,1017,994,972,1028,1019,1024,1002],
[982,970,995,0,992,998,1007,964,996,1007,998,1037,950],
[951,1027,1017,1009,0,1034,1007,1009,1019,1002,993,1046,985],
[949,969,999,1003,967,0,1001,987,994,990,993,1003,983],
[907,967,984,994,994,1000,0,910,1028,979,1032,966,961],
[1003,1038,1007,1037,992,1014,1091,0,1007,1033,1028,1001,995],
[939,976,1029,1005,982,1007,973,994,0,997,1007,1032,972],
[943,1010,973,994,999,1011,1022,968,1004,0,998,1032,1028],
[979,992,982,1003,1008,1008,969,973,994,1003,0,983,994],
[986,981,977,964,955,998,1035,1000,969,969,1018,0,973],
[999,1015,999,1051,1016,1018,1040,1006,1029,973,1007,1028,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 15, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1013,993,959,976,988,1003,1026,960,978,988,981,991],
[988,0,960,943,948,945,977,976,976,960,986,974,939],
[1008,1041,0,972,998,1006,1032,1045,1012,974,1006,980,1010],
[1042,1058,1029,0,1014,1032,1004,1055,1007,996,1018,1045,995],
[1025,1053,1003,987,0,1038,1053,1024,1044,1042,1040,1020,1001],
[1013,1056,995,969,963,0,989,983,984,1021,1025,1004,997],
[998,1024,969,997,948,1012,0,1018,985,1016,982,985,1002],
[975,1025,956,946,977,1018,983,0,1011,1008,1053,1026,978],
[1041,1025,989,994,957,1017,1016,990,0,1007,1014,1012,994],
[1023,1041,1027,1005,959,980,985,993,994,0,998,1008,994],
[1013,1015,995,983,961,976,1019,948,987,1003,0,1019,997],
[1020,1027,1021,956,981,997,1016,975,989,993,982,0,977],
[1010,1062,991,1006,1000,1004,999,1023,1007,1007,1004,1024,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 16, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1004,1010,981,1053,958,1002,1012,1028,1019,1022,1026,1046],
[997,0,1034,1012,1084,941,1020,992,1017,1035,1055,1002,1024],
[991,967,0,964,1007,951,974,966,995,941,918,949,922],
[1020,989,1037,0,1028,1014,1018,1009,1047,1010,1009,1019,980],
[948,917,994,973,0,938,999,993,945,970,987,1009,925],
[1043,1060,1050,987,1063,0,1047,999,1010,1036,1049,1012,982],
[999,981,1027,983,1002,954,0,961,994,973,1017,989,976],
[989,1009,1035,992,1008,1002,1040,0,972,1002,1002,1026,1002],
[973,984,1006,954,1056,991,1007,1029,0,1008,998,1007,977],
[982,966,1060,991,1031,965,1028,999,993,0,1001,972,998],
[979,946,1083,992,1014,952,984,999,1003,1000,0,964,967],
[975,999,1052,982,992,989,1012,975,994,1029,1037,0,968],
[955,977,1079,1021,1076,1019,1025,999,1024,1003,1034,1033,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 17, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,984,1024,989,1007,1051,972,1024,999,1045,981,993,1016],
[1017,0,1006,984,1023,982,1035,969,990,1046,997,994,1022],
[977,995,0,1029,982,1024,975,1003,1022,1037,982,976,1005],
[1012,1017,972,0,1008,1011,947,1005,1000,1082,1032,1015,1008],
[994,978,1019,993,0,997,1005,1003,990,1047,1030,977,990],
[950,1019,977,990,1004,0,980,973,990,1017,977,964,1004],
[1029,966,1026,1054,996,1021,0,1064,992,1068,1020,1051,1028],
[977,1032,998,996,998,1028,937,0,944,1030,985,952,1001],
[1002,1011,979,1001,1011,1011,1009,1057,0,1040,1044,1021,1033],
[956,955,964,919,954,984,933,971,961,0,968,967,960],
[1020,1004,1019,969,971,1024,981,1016,957,1033,0,966,999],
[1008,1007,1025,986,1024,1037,950,1049,980,1034,1035,0,1015],
[985,979,996,993,1011,997,973,1000,968,1041,1002,986,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 18, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1042,1012,1013,969,1000,1026,985,991,952,985,1000,1033],
[959,0,1021,1004,958,995,1018,940,997,954,980,971,957],
[989,980,0,958,945,971,1026,967,965,948,988,986,1022],
[988,997,1043,0,969,1003,1058,990,986,984,1002,976,1036],
[1032,1043,1056,1032,0,1014,1039,1029,979,1013,986,1064,1037],
[1001,1006,1030,998,987,0,994,1008,987,984,990,1018,1035],
[975,983,975,943,962,1007,0,957,985,939,964,995,1004],
[1016,1061,1034,1011,972,993,1044,0,987,953,1063,994,992],
[1010,1004,1036,1015,1022,1014,1016,1014,0,993,1018,1034,1015],
[1049,1047,1053,1017,988,1017,1062,1048,1008,0,1060,1051,1031],
[1016,1021,1013,999,1015,1011,1037,938,983,941,0,1001,1021],
[1001,1030,1015,1025,937,983,1006,1007,967,950,1000,0,998],
[968,1044,979,965,964,966,997,1009,986,970,980,1003,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 19, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1025,1074,1018,937,988,1046,1012,998,1040,1000,1037,1015],
[976,0,1056,899,936,1015,968,1020,880,952,913,997,1036],
[927,945,0,935,825,970,951,916,910,824,908,947,932],
[983,1102,1066,0,1015,1013,1033,1023,1001,1019,958,1006,1058],
[1064,1065,1176,986,0,1041,978,1032,1112,986,1029,1073,1062],
[1013,986,1031,988,960,0,1005,948,975,1015,918,1035,1013],
[955,1033,1050,968,1023,996,0,1080,1009,1010,1011,1020,1044],
[989,981,1085,978,969,1053,921,0,923,1015,924,944,1037],
[1003,1121,1091,1000,889,1026,992,1078,0,982,998,1053,1115],
[961,1049,1177,982,1015,986,991,986,1019,0,1069,1022,1088],
[1001,1088,1093,1043,972,1083,990,1077,1003,932,0,967,1045],
[964,1004,1054,995,928,966,981,1057,948,979,1034,0,1021],
[986,965,1069,943,939,988,957,964,886,913,956,980,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 20, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,979,961,997,1007,986,1031,973,1008,993,982,976,965],
[1022,0,983,990,1016,1015,1020,995,990,990,1015,1045,986],
[1040,1018,0,973,973,1007,1029,970,987,1046,983,1007,965],
[1004,1011,1028,0,1004,989,1031,941,1008,1034,949,1011,991],
[994,985,1028,997,0,1004,1005,958,1003,1001,965,1028,1004],
[1015,986,994,1012,997,0,1037,995,986,985,986,1002,1005],
[970,981,972,970,996,964,0,951,1013,966,974,974,908],
[1028,1006,1031,1060,1043,1006,1050,0,1008,997,988,1039,1005],
[993,1011,1014,993,998,1015,988,993,0,1000,962,1017,1018],
[1008,1011,955,967,1000,1016,1035,1004,1001,0,987,1016,997],
[1019,986,1018,1052,1036,1015,1027,1013,1039,1014,0,1031,1013],
[1025,956,994,990,973,999,1027,962,984,985,970,0,997],
[1036,1015,1036,1010,997,996,1093,996,983,1004,988,1004,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 21, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1003,1030,1016,1032,969,1011,1014,1005,1005,1002,990,1007],
[998,0,998,997,971,1004,996,977,979,1016,1008,989,990],
[971,1003,0,1016,996,989,984,1001,999,988,999,1018,1002],
[985,1004,985,0,997,970,986,978,1006,1016,1006,997,1013],
[969,1030,1005,1004,0,1015,957,1017,994,958,1003,1001,973],
[1032,997,1012,1031,986,0,1033,991,1000,1024,1052,1021,1029],
[990,1005,1017,1015,1044,968,0,1009,1008,1013,998,991,983],
[987,1024,1000,1023,984,1010,992,0,1029,1027,999,1040,995],
[996,1022,1002,995,1007,1001,993,972,0,977,1005,992,995],
[996,985,1013,985,1043,977,988,974,1024,0,1018,1014,979],
[999,993,1002,995,998,949,1003,1002,996,983,0,1004,991],
[1011,1012,983,1004,1000,980,1010,961,1009,987,997,0,991],
[994,1011,999,988,1028,972,1018,1006,1006,1022,1010,1010,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 22, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1070,1046,982,967,980,1035,914,1065,994,1033,1048,1032],
[931,0,990,936,912,903,911,845,1022,935,943,900,933],
[955,1011,0,980,971,930,942,907,944,1025,1010,975,984],
[1019,1065,1021,0,981,892,1032,873,1029,967,1052,972,987],
[1034,1089,1030,1020,0,982,1028,956,1055,970,1130,985,987],
[1021,1098,1071,1109,1019,0,1023,1001,1090,1069,1023,1110,982],
[966,1090,1059,969,973,978,0,987,1025,957,1053,970,1033],
[1087,1156,1094,1128,1045,1000,1014,0,1106,1011,1074,1038,1026],
[936,979,1057,972,946,911,976,895,0,1031,990,956,916],
[1007,1066,976,1034,1031,932,1044,990,970,0,1069,1002,1044],
[968,1058,991,949,871,978,948,927,1011,932,0,893,893],
[953,1101,1026,1029,1016,891,1031,963,1045,999,1108,0,1004],
[969,1068,1017,1014,1014,1019,968,975,1085,957,1108,997,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 23, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,918,875,880,1083,1072,944,841,1004,889,1025,975,1057],
[1083,0,863,983,1123,1032,996,1046,1029,991,972,1084,1192],
[1126,1138,0,1039,1024,1191,1187,938,977,1075,1102,1082,1101],
[1121,1018,962,0,1087,1147,1022,1096,1110,1032,1135,1201,1021],
[918,878,977,914,0,964,927,984,953,1038,990,948,1035],
[929,969,810,854,1037,0,903,964,994,915,1113,987,966],
[1057,1005,814,979,1074,1098,0,986,1106,938,957,976,1039],
[1160,955,1063,905,1017,1037,1015,0,1094,965,1037,950,1071],
[997,972,1024,891,1048,1007,895,907,0,951,987,963,928],
[1112,1010,926,969,963,1086,1063,1036,1050,0,1020,1090,1042],
[976,1029,899,866,1011,888,1044,964,1014,981,0,998,1033],
[1026,917,919,800,1053,1014,1025,1051,1038,911,1003,0,947],
[944,809,900,980,966,1035,962,930,1073,959,968,1054,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 24, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,993,990,974,1007,1002,969,997,1018,1011,987,1017,1000],
[1008,0,979,961,1015,1012,995,1000,985,974,995,1016,983],
[1011,1022,0,992,1043,1024,977,990,996,1000,993,1043,1019],
[1027,1040,1009,0,1041,999,1007,1003,1060,1020,997,1034,985],
[994,986,958,960,0,971,986,1010,995,970,981,1029,961],
[999,989,977,1002,1030,0,989,1012,991,993,984,1010,956],
[1032,1006,1024,994,1015,1012,0,1009,1015,977,972,1036,1000],
[1004,1001,1011,998,991,989,992,0,996,996,1000,1036,1001],
[983,1016,1005,941,1006,1010,986,1005,0,1004,1020,1064,994],
[990,1027,1001,981,1031,1008,1024,1005,997,0,973,1028,1002],
[1014,1006,1008,1004,1020,1017,1029,1001,981,1028,0,1067,979],
[984,985,958,967,972,991,965,965,937,973,934,0,960],
[1001,1018,982,1016,1040,1045,1001,1000,1007,999,1022,1041,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 25, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,898,1038,958,1061,961,1048,1101,1075,1001,971,1085,1017],
[1103,0,1086,989,1087,1029,1073,1128,1117,1095,1019,1132,1059],
[963,915,0,989,993,983,995,1037,992,987,965,1079,971],
[1043,1012,1012,0,1039,997,1062,1095,1045,1059,990,1088,1025],
[940,914,1008,962,0,981,1016,1028,1071,971,935,1066,1002],
[1040,972,1018,1004,1020,0,1010,1111,1076,1050,977,1065,1000],
[953,928,1006,939,985,991,0,1015,1021,955,929,999,962],
[900,873,964,906,973,890,986,0,959,986,916,1036,954],
[926,884,1009,956,930,925,980,1042,0,1010,911,1042,973],
[1000,906,1014,942,1030,951,1046,1015,991,0,965,1099,974],
[1030,982,1036,1011,1066,1024,1072,1085,1090,1036,0,1073,1004],
[916,869,922,913,935,936,1002,965,959,902,928,0,917],
[984,942,1030,976,999,1001,1039,1047,1028,1027,997,1084,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 26, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1036,983,988,975,979,990,1006,974,1002,970,986,1000],
[965,0,988,974,985,960,969,951,953,976,977,979,978],
[1018,1013,0,985,959,975,980,993,989,970,980,995,983],
[1013,1027,1016,0,991,987,986,1005,995,960,1005,992,1002],
[1026,1016,1042,1010,0,986,1026,1015,989,1010,982,1013,993],
[1022,1041,1026,1014,1015,0,1005,1013,992,995,980,1013,1040],
[1011,1032,1021,1015,975,996,0,994,1004,1016,1020,994,1019],
[995,1050,1008,996,986,988,1007,0,997,990,1011,1007,1014],
[1027,1048,1012,1006,1012,1009,997,1004,0,1002,1016,1029,1016],
[999,1025,1031,1041,991,1006,985,1011,999,0,1016,993,1004],
[1031,1024,1021,996,1019,1021,981,990,985,985,0,997,1033],
[1015,1022,1006,1009,988,988,1007,994,972,1008,1004,0,1030],
[1001,1023,1018,999,1008,961,982,987,985,997,968,971,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 27, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,986,1026,1005,972,1007,1035,980,954,998,1003,1002,1028],
[1015,0,1021,947,1007,990,1017,954,992,988,1032,975,1018],
[975,980,0,943,945,1004,998,952,982,990,965,983,956],
[996,1054,1058,0,1018,1016,1036,1001,985,1026,1024,1019,1043],
[1029,994,1056,983,0,1013,1061,1021,1016,1027,1027,1047,1039],
[994,1011,997,985,988,0,1026,993,980,1027,1021,1026,1000],
[966,984,1003,965,940,975,0,985,983,981,972,1019,964],
[1021,1047,1049,1000,980,1008,1016,0,975,1040,1017,1008,999],
[1047,1009,1019,1016,985,1021,1018,1026,0,1010,1024,1045,1049],
[1003,1013,1011,975,974,974,1020,961,991,0,985,999,1010],
[998,969,1036,977,974,980,1029,984,977,1016,0,1037,1013],
[999,1026,1018,982,954,975,982,993,956,1002,964,0,994],
[973,983,1045,958,962,1001,1037,1002,952,991,988,1007,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 28, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,983,991,968,1005,923,981,968,945,987,986,953,1038],
[1018,0,1040,1027,1026,958,1015,1024,1022,1008,1024,997,1032],
[1010,961,0,975,995,962,977,958,988,957,968,997,1000],
[1033,974,1026,0,1010,971,1023,1005,958,976,990,944,1007],
[996,975,1006,991,0,960,1027,1010,968,982,988,973,1009],
[1078,1043,1039,1030,1041,0,1047,996,982,1048,1078,1005,1061],
[1020,986,1024,978,974,954,0,971,973,994,967,951,1034],
[1033,977,1043,996,991,1005,1030,0,1010,1031,1018,967,1047],
[1056,979,1013,1043,1033,1019,1028,991,0,1008,1014,1011,1043],
[1014,993,1044,1025,1019,953,1007,970,993,0,1036,941,1033],
[1015,977,1033,1011,1013,923,1034,983,987,965,0,950,983],
[1048,1004,1004,1057,1028,996,1050,1034,990,1060,1051,0,1043],
[963,969,1001,994,992,940,967,954,958,968,1018,958,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 29, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,999,988,1005,993,988,1013,985,1004,977,989,984,1017],
[1002,0,996,1008,1012,978,1020,955,1020,975,982,968,1022],
[1013,1005,0,995,978,990,1012,954,1015,967,998,966,985],
[996,993,1006,0,1002,972,1013,960,992,1015,998,959,1025],
[1008,989,1023,999,0,1005,1019,987,998,989,982,984,1050],
[1013,1023,1011,1029,996,0,1030,1008,1042,1039,994,999,1013],
[988,981,989,988,982,971,0,966,1013,996,943,976,1032],
[1016,1046,1047,1041,1014,993,1035,0,1037,994,1004,1018,1027],
[997,981,986,1009,1003,959,988,964,0,968,978,961,1017],
[1024,1026,1034,986,1012,962,1005,1007,1033,0,983,977,1038],
[1012,1019,1003,1003,1019,1007,1058,997,1023,1018,0,977,1011],
[1017,1033,1035,1042,1017,1002,1025,983,1040,1024,1024,0,1039],
[984,979,1016,976,951,988,969,974,984,963,990,962,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 30, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,999,984,1014,991,992,1002,1007,1028,973,1000,989,1001],
[1002,0,1038,1009,1027,982,1007,1033,1028,971,1006,990,1006],
[1017,963,0,962,1009,991,1046,1048,1010,961,989,1004,1008],
[987,992,1039,0,987,1005,1041,1029,1014,999,1035,987,1002],
[1010,974,992,1014,0,968,998,1023,993,969,989,959,1008],
[1009,1019,1010,996,1033,0,996,1008,1037,972,1000,1009,1018],
[999,994,955,960,1003,1005,0,995,1013,975,986,982,994],
[994,968,953,972,978,993,1006,0,1000,980,985,977,980],
[973,973,991,987,1008,964,988,1001,0,975,986,974,997],
[1028,1030,1040,1002,1032,1029,1026,1021,1026,0,1019,982,1026],
[1001,995,1012,966,1012,1001,1015,1016,1015,982,0,987,1005],
[1012,1011,997,1014,1042,992,1019,1024,1027,1019,1014,0,1028],
[1000,995,993,999,993,983,1007,1021,1004,975,996,973,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 31, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1040,1026,1023,1086,981,930,998,1032,979,1009,1037,1010],
[961,0,935,987,1014,995,908,982,989,966,983,992,1016],
[975,1066,0,1020,1083,1049,1015,979,1016,1041,987,1015,1062],
[978,1014,981,0,1023,988,956,989,1045,979,998,1016,1000],
[915,987,918,978,0,966,911,898,997,963,928,983,1044],
[1020,1006,952,1013,1035,0,953,1017,1033,1003,977,1032,1054],
[1071,1093,986,1045,1090,1048,0,986,1001,997,996,1033,1051],
[1003,1019,1022,1012,1103,984,1015,0,1030,1029,969,1091,1069],
[969,1012,985,956,1004,968,1000,971,0,996,1008,996,1003],
[1022,1035,960,1022,1038,998,1004,972,1005,0,1006,1010,1110],
[992,1018,1014,1003,1073,1024,1005,1032,993,995,0,989,1060],
[964,1009,986,985,1018,969,968,910,1005,991,1012,0,985],
[991,985,939,1001,957,947,950,932,998,891,941,1016,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 32, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,974,925,994,1015,937,997,1014,965,965,966,971,1011],
[1027,0,944,1043,1019,982,1031,988,1014,1020,969,1016,1013],
[1076,1057,0,1049,1060,1018,1078,1030,1038,1019,977,1015,1062],
[1007,958,952,0,1013,883,951,986,955,922,936,946,1006],
[986,982,941,988,0,933,999,991,990,985,957,1013,999],
[1064,1019,983,1118,1068,0,1054,1049,1067,1039,1019,1037,1045],
[1004,970,923,1050,1002,947,0,967,985,986,944,971,1001],
[987,1013,971,1015,1010,952,1034,0,1017,966,915,990,1014],
[1036,987,963,1046,1011,934,1016,984,0,995,957,1020,1024],
[1036,981,982,1079,1016,962,1015,1035,1006,0,1000,1026,1022],
[1035,1032,1024,1065,1044,982,1057,1086,1044,1001,0,1027,1069],
[1030,985,986,1055,988,964,1030,1011,981,975,974,0,1012],
[990,988,939,995,1002,956,1000,987,977,979,932,989,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 33, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1033,1041,992,995,1030,1022,1066,1081,1046,1033,1064,1034],
[968,0,1050,937,987,988,994,1018,974,1012,1007,1018,1023],
[960,951,0,977,977,987,966,998,961,1013,970,961,1023],
[1009,1064,1024,0,1030,998,1011,1031,1032,983,1028,999,1039],
[1006,1014,1024,971,0,994,1017,998,1002,1022,1020,1038,997],
[971,1013,1014,1003,1007,0,1016,1014,1028,1023,1040,1000,1000],
[979,1007,1035,990,984,985,0,986,1009,1025,1004,1025,996],
[935,983,1003,970,1003,987,1015,0,988,995,972,992,995],
[920,1027,1040,969,999,973,992,1013,0,1014,937,1035,1029],
[955,989,988,1018,979,978,976,1006,987,0,1007,983,1009],
[968,994,1031,973,981,961,997,1029,1064,994,0,971,991],
[937,983,1040,1002,963,1001,976,1009,966,1018,1030,0,1012],
[967,978,978,962,1004,1001,1005,1006,972,992,1010,989,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 34, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1034,970,1057,1012,1118,1063,1072,1043,1090,1124,1029,1058],
[967,0,928,1046,942,1096,959,1052,1022,1009,1116,1059,963],
[1031,1073,0,988,1036,1101,1007,1137,1058,1094,1174,1060,1030],
[944,955,1013,0,955,968,1029,1029,1044,1050,1089,931,1026],
[989,1059,965,1046,0,1134,1075,1091,1060,1085,1117,1054,995],
[883,905,900,1033,867,0,921,921,980,1025,974,922,975],
[938,1042,994,972,926,1080,0,1020,959,1038,1088,1052,944],
[929,949,864,972,910,1080,981,0,996,1031,1117,1021,1013],
[958,979,943,957,941,1021,1042,1005,0,1074,956,990,982],
[911,992,907,951,916,976,963,970,927,0,1094,894,962],
[877,885,827,912,884,1027,913,884,1045,907,0,970,921],
[972,942,941,1070,947,1079,949,980,1011,1107,1031,0,962],
[943,1038,971,975,1006,1026,1057,988,1019,1039,1080,1039,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 35, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,975,995,979,1008,1039,997,1027,1025,1015,982,968,1004],
[1026,0,1039,1055,1021,1051,1000,1025,1005,1039,1002,1030,1005],
[1006,962,0,1012,1047,1016,1002,1035,1004,1019,1020,991,1021],
[1022,946,989,0,1011,993,976,1009,995,996,967,980,1014],
[993,980,954,990,0,1024,1009,996,998,1013,984,1019,1002],
[962,950,985,1008,977,0,983,1001,975,964,970,969,996],
[1004,1001,999,1025,992,1018,0,1021,990,996,989,1002,985],
[974,976,966,992,1005,1000,980,0,999,1005,994,991,975],
[976,996,997,1006,1003,1026,1011,1002,0,1029,991,979,1031],
[986,962,982,1005,988,1037,1005,996,972,0,1003,1003,987],
[1019,999,981,1034,1017,1031,1012,1007,1010,998,0,1039,1013],
[1033,971,1010,1021,982,1032,999,1010,1022,998,962,0,1014],
[997,996,980,987,999,1005,1016,1026,970,1014,988,987,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 36, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,988,963,1030,1099,1049,927,998,961,961,1015,997,961],
[1013,0,944,1042,1005,1015,938,969,1102,1029,1073,955,956],
[1038,1057,0,971,1111,1074,984,963,1040,1059,1049,1000,1101],
[971,959,1030,0,1050,991,1021,1041,1064,1059,1164,1053,972],
[902,996,890,951,0,1029,943,936,953,898,1013,848,1021],
[952,986,927,1010,972,0,949,1055,1009,987,1018,995,995],
[1074,1063,1017,980,1058,1052,0,1059,985,944,1097,1113,1122],
[1003,1032,1038,960,1065,946,942,0,1127,1016,1050,970,1020],
[1040,899,961,937,1048,992,1016,874,0,996,1096,901,954],
[1040,972,942,942,1103,1014,1057,985,1005,0,1046,1146,978],
[986,928,952,837,988,983,904,951,905,955,0,839,885],
[1004,1046,1001,948,1153,1006,888,1031,1100,855,1162,0,1041],
[1040,1045,900,1029,980,1006,879,981,1047,1023,1116,960,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 37, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,988,1015,986,975,1008,966,1031,1012,991,999,967,992],
[1013,0,1002,986,976,998,1004,1007,1011,1007,982,976,988],
[986,999,0,1009,976,1005,989,1003,1026,987,1006,982,971],
[1015,1015,992,0,980,991,1008,1039,1022,974,1020,973,992],
[1026,1025,1025,1021,0,1015,997,1036,1064,1026,1019,1031,1024],
[993,1003,996,1010,986,0,1005,1006,1016,1018,1008,987,998],
[1035,997,1012,993,1004,996,0,1045,1019,981,1013,1011,1005],
[970,994,998,962,965,995,956,0,1014,981,994,962,960],
[989,990,975,979,937,985,982,987,0,998,996,969,988],
[1010,994,1014,1027,975,983,1020,1020,1003,0,1024,1000,1024],
[1002,1019,995,981,982,993,988,1007,1005,977,0,993,1018],
[1034,1025,1019,1028,970,1014,990,1039,1032,1001,1008,0,1001],
[1009,1013,1030,1009,977,1003,996,1041,1013,977,983,1000,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 38, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1073,1062,1066,1066,1054,1064,1062,1054,1022,1038,1018,998],
[928,0,1025,997,1035,996,1000,1009,1008,984,1010,947,927],
[939,976,0,972,1011,998,989,964,1025,945,1008,960,924],
[935,1004,1029,0,992,1001,1024,985,1020,982,1019,959,934],
[935,966,990,1009,0,1012,1004,970,991,941,1006,940,968],
[947,1005,1003,1000,989,0,1004,970,1025,967,961,979,929],
[937,1001,1012,977,997,997,0,979,1012,954,1009,964,927],
[939,992,1037,1016,1031,1031,1022,0,999,980,1004,950,949],
[947,993,976,981,1010,976,989,1002,0,971,1013,955,963],
[979,1017,1056,1019,1060,1034,1047,1021,1030,0,1014,979,1000],
[963,991,993,982,995,1040,992,997,988,987,0,985,967],
[983,1054,1041,1042,1061,1022,1037,1051,1046,1022,1016,0,1024],
[1003,1074,1077,1067,1033,1072,1074,1052,1038,1001,1034,977,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 39, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,594,1126,424,837,793,380,656,381,182,380,380,484],
[1407,0,1067,868,1209,1023,748,1008,643,993,930,811,1190],
[875,934,0,658,934,980,693,871,1118,659,215,737,719],
[1577,1133,1343,0,1315,1271,918,962,1056,1406,794,1224,1056],
[1164,792,1067,686,0,838,486,989,624,731,486,811,197],
[1208,978,1021,730,1163,0,505,962,400,731,687,568,809],
[1621,1253,1308,1083,1515,1496,0,1359,838,703,1171,1162,1163],
[1345,993,1130,1039,1012,1039,642,0,444,687,562,749,641],
[1620,1358,883,945,1377,1601,1163,1557,0,945,901,1377,809],
[1819,1008,1342,595,1270,1270,1298,1314,1056,0,820,1361,918],
[1621,1071,1786,1207,1515,1314,830,1439,1100,1181,0,1377,1025],
[1621,1190,1264,777,1190,1433,839,1252,624,640,624,0,622],
[1517,811,1282,945,1804,1192,838,1360,1192,1083,976,1379,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 40, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,970,1010,964,1013,984,1018,999,1005,1013,970,996,1003],
[1031,0,1020,997,1022,981,1039,1046,1030,1020,998,990,1033],
[991,981,0,977,996,991,1012,983,1016,997,1020,969,1005],
[1037,1004,1024,0,1012,1021,1017,1013,1047,1007,1011,972,1013],
[988,979,1005,989,0,988,1006,980,1001,1016,993,967,996],
[1017,1020,1010,980,1013,0,1020,1025,1010,1005,982,1003,1009],
[983,962,989,984,995,981,0,975,1000,989,990,993,995],
[1002,955,1018,988,1021,976,1026,0,984,992,985,981,990],
[996,971,985,954,1000,991,1001,1017,0,974,1010,955,1028],
[988,981,1004,994,985,996,1012,1009,1027,0,1010,970,1008],
[1031,1003,981,990,1008,1019,1011,1016,991,991,0,1014,1005],
[1005,1011,1032,1029,1034,998,1008,1020,1046,1031,987,0,1055],
[998,968,996,988,1005,992,1006,1011,973,993,996,946,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 41, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,919,1027,1022,1008,1038,1006,1011,1033,944,982,1035,963],
[1082,0,1040,1083,1002,1096,1043,936,1076,1071,1100,1091,1063],
[974,961,0,970,1018,995,947,988,1018,967,1013,1000,965],
[979,918,1031,0,975,953,985,966,1037,982,994,1037,1003],
[993,999,983,1026,0,1016,1051,1011,1046,966,1025,1084,1024],
[963,905,1006,1048,985,0,1057,989,1073,980,1013,1024,993],
[995,958,1054,1016,950,944,0,981,1025,992,974,1052,1009],
[990,1065,1013,1035,990,1012,1020,0,1060,961,994,1058,1006],
[968,925,983,964,955,928,976,941,0,948,948,978,986],
[1057,930,1034,1019,1035,1021,1009,1040,1053,0,1038,1034,990],
[1019,901,988,1007,976,988,1027,1007,1053,963,0,1015,989],
[966,910,1001,964,917,977,949,943,1023,967,986,0,946],
[1038,938,1036,998,977,1008,992,995,1015,1011,1012,1055,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 42, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,972,980,1014,984,986,957,967,980,983,988,993,998],
[1029,0,986,1016,1032,1012,1016,1018,1007,1026,998,1017,1058],
[1021,1015,0,1004,1010,995,1023,989,1009,1028,1007,988,1016],
[987,985,997,0,986,992,980,1004,959,969,1041,977,1006],
[1017,969,991,1015,0,981,995,1025,982,1009,1045,1011,1017],
[1015,989,1006,1009,1020,0,1009,1003,1013,1019,1028,1000,1016],
[1044,985,978,1021,1006,992,0,1007,1008,993,1039,999,998],
[1034,983,1012,997,976,998,994,0,1007,1018,1027,1008,1032],
[1021,994,992,1042,1019,988,993,994,0,1011,1034,1015,1013],
[1018,975,973,1032,992,982,1008,983,990,0,1019,986,1013],
[1013,1003,994,960,956,973,962,974,967,982,0,985,984],
[1008,984,1013,1024,990,1001,1002,993,986,1015,1016,0,1000],
[1003,943,985,995,984,985,1003,969,988,988,1017,1001,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 43, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1028,1043,1105,987,1014,1178,1130,977,1082,1000,1099,1064],
[973,0,945,941,964,931,1054,1008,984,1030,1055,1023,1000],
[958,1056,0,1050,1030,1035,1116,1116,1050,1070,1000,1068,1052],
[896,1060,951,0,946,1012,1010,976,960,967,984,1032,1064],
[1014,1037,971,1055,0,1018,1108,1109,1023,1046,1019,1098,1078],
[987,1070,966,989,983,0,1136,1040,1022,1042,1020,1129,1016],
[823,947,885,991,893,865,0,974,991,973,945,971,1002],
[871,993,885,1025,892,961,1027,0,904,936,892,1015,991],
[1024,1017,951,1041,978,979,1010,1097,0,1015,1025,1025,1039],
[919,971,931,1034,955,959,1028,1065,986,0,972,1020,1048],
[1001,946,1001,1017,982,981,1056,1109,976,1029,0,1053,1081],
[902,978,933,969,903,872,1030,986,976,981,948,0,1053],
[937,1001,949,937,923,985,999,1010,962,953,920,948,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 44, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,964,992,984,949,990,962,964,932,925,988,963,961],
[1037,0,1016,1044,987,1069,1041,1012,1025,966,1013,1013,993],
[1009,985,0,984,995,974,1015,989,987,959,1017,991,954],
[1017,957,1017,0,947,994,956,969,1017,942,1018,959,949],
[1052,1014,1006,1054,0,1053,981,1016,1000,968,1022,937,1016],
[1011,932,1027,1007,948,0,959,1011,970,985,973,964,942],
[1039,960,986,1045,1020,1042,0,985,985,988,1006,983,972],
[1037,989,1012,1032,985,990,1016,0,998,972,981,947,981],
[1069,976,1014,984,1001,1031,1016,1003,0,920,1068,973,983],
[1076,1035,1042,1059,1033,1016,1013,1029,1081,0,1009,1035,959],
[1013,988,984,983,979,1028,995,1020,933,992,0,1003,949],
[1038,988,1010,1042,1064,1037,1018,1054,1028,966,998,0,971],
[1040,1008,1047,1052,985,1059,1029,1020,1018,1042,1052,1030,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 45, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,975,980,1018,988,954,999,1003,980,971,923,896,999],
[1026,0,941,975,1009,966,1017,979,981,1013,964,942,998],
[1021,1060,0,1058,1009,989,1036,1009,1021,1065,961,1004,971],
[983,1026,943,0,968,966,993,1002,1001,1030,1011,937,1008],
[1013,992,992,1033,0,983,1031,1008,986,1037,983,978,1024],
[1047,1035,1012,1035,1018,0,1025,1030,1019,1037,996,980,1018],
[1002,984,965,1008,970,976,0,999,948,1000,947,949,981],
[998,1022,992,999,993,971,1002,0,967,1010,930,958,1001],
[1021,1020,980,1000,1015,982,1053,1034,0,1022,968,986,1001],
[1030,988,936,971,964,964,1001,991,979,0,925,932,966],
[1078,1037,1040,990,1018,1005,1054,1071,1033,1076,0,1003,1063],
[1105,1059,997,1064,1023,1021,1052,1043,1015,1069,998,0,1082],
[1002,1003,1030,993,977,983,1020,1000,1000,1035,938,919,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 46, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1066,1059,933,959,1014,1037,1088,1140,1077,1031,1132,1032],
[935,0,886,887,883,971,993,941,1027,951,971,1034,942],
[942,1115,0,974,976,1007,1041,959,1073,1021,983,1075,1011],
[1068,1114,1027,0,937,1051,1091,1090,1127,1068,1071,1147,960],
[1042,1118,1025,1064,0,969,1082,1081,1215,1026,1141,1083,959],
[987,1030,994,950,1032,0,971,1035,1023,936,960,1129,953],
[964,1008,960,910,919,1030,0,1096,1002,903,1040,970,943],
[913,1060,1042,911,920,966,905,0,1016,927,978,1034,899],
[861,974,928,874,786,978,999,985,0,869,959,1035,909],
[924,1050,980,933,975,1065,1098,1074,1132,0,997,1112,1053],
[970,1030,1018,930,860,1041,961,1023,1042,1004,0,1015,998],
[869,967,926,854,918,872,1031,967,966,889,986,0,867],
[969,1059,990,1041,1042,1048,1058,1102,1092,948,1003,1134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 47, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,964,1050,978,1016,998,1024,1039,965,960,933,1016,999],
[1037,0,1039,980,1021,972,995,1024,987,986,977,1010,1013],
[951,962,0,938,944,945,944,973,933,936,925,957,978],
[1023,1021,1063,0,1004,996,1034,1000,994,993,958,1031,1032],
[985,980,1057,997,0,999,1003,1013,966,994,951,1028,1022],
[1003,1029,1056,1005,1002,0,1013,1039,985,1014,985,1055,1023],
[977,1006,1057,967,998,988,0,1013,1005,997,988,1014,997],
[962,977,1028,1001,988,962,988,0,981,941,976,1018,995],
[1036,1014,1068,1007,1035,1016,996,1020,0,957,988,1018,1026],
[1041,1015,1065,1008,1007,987,1004,1060,1044,0,1013,1045,1021],
[1068,1024,1076,1043,1050,1016,1013,1025,1013,988,0,1023,1033],
[985,991,1044,970,973,946,987,983,983,956,978,0,967],
[1002,988,1023,969,979,978,1004,1006,975,980,968,1034,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 48, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1011,998,1040,1028,996,965,1043,1004,963,970,1044,975],
[990,0,962,941,990,949,940,955,974,972,956,984,964],
[1003,1039,0,1068,1001,978,962,976,987,1052,1020,1053,990],
[961,1060,933,0,1025,940,969,976,932,1008,955,1013,985],
[973,1011,1000,976,0,959,965,956,982,984,979,963,934],
[1005,1052,1023,1061,1042,0,989,977,999,991,970,1060,1051],
[1036,1061,1039,1032,1036,1012,0,983,987,999,992,1101,993],
[958,1046,1025,1025,1045,1024,1018,0,1017,965,976,1068,964],
[997,1027,1014,1069,1019,1002,1014,984,0,983,985,1034,981],
[1038,1029,949,993,1017,1010,1002,1036,1018,0,982,1069,1019],
[1031,1045,981,1046,1022,1031,1009,1025,1016,1019,0,1060,1042],
[957,1017,948,988,1038,941,900,933,967,932,941,0,979],
[1026,1037,1011,1016,1067,950,1008,1037,1020,982,959,1022,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 49, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,996,937,957,983,986,1002,948,948,989,1041,1016,974],
[1005,0,969,983,987,1016,1017,995,965,981,1015,1007,988],
[1064,1032,0,1015,1033,1004,1054,995,1026,1008,1024,1060,1080],
[1044,1018,986,0,1021,993,1016,967,1004,997,1042,1028,980],
[1018,1014,968,980,0,993,1000,1025,994,989,1045,1053,1026],
[1015,985,997,1008,1008,0,986,991,1001,1041,1064,1030,1015],
[999,984,947,985,1001,1015,0,977,985,997,1053,1054,1036],
[1053,1006,1006,1034,976,1010,1024,0,1004,986,1047,1020,1012],
[1053,1036,975,997,1007,1000,1016,997,0,965,1054,1013,1023],
[1012,1020,993,1004,1012,960,1004,1015,1036,0,1068,1036,1007],
[960,986,977,959,956,937,948,954,947,933,0,956,1004],
[985,994,941,973,948,971,947,981,988,965,1045,0,998],
[1027,1013,921,1021,975,986,965,989,978,994,997,1003,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 50, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,989,991,989,993,999,994,1007,998,958,947,1003,1000],
[1012,0,1009,1008,1005,975,989,1005,1014,982,973,1039,982],
[1010,992,0,1003,1025,959,993,984,992,991,978,1033,981],
[1012,993,998,0,1025,981,1020,1005,975,1003,985,1001,977],
[1008,996,976,976,0,958,971,1006,976,964,949,1009,987],
[1002,1026,1042,1020,1043,0,998,1009,1049,988,1004,1033,1000],
[1007,1012,1008,981,1030,1003,0,1014,1007,992,981,1034,993],
[994,996,1017,996,995,992,987,0,979,1009,977,989,996],
[1003,987,1009,1026,1025,952,994,1022,0,998,978,1005,1004],
[1043,1019,1010,998,1037,1013,1009,992,1003,0,965,1043,997],
[1054,1028,1023,1016,1052,997,1020,1024,1023,1036,0,1043,1032],
[998,962,968,1000,992,968,967,1012,996,958,958,0,979],
[1001,1019,1020,1024,1014,1001,1008,1005,997,1004,969,1022,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 51, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1017,1006,1036,992,1049,1001,1019,1014,1043,1029,1026,1016],
[984,0,1028,1043,1031,1048,1025,999,994,1001,1003,1027,1042],
[995,973,0,1013,978,993,968,999,1009,1002,962,989,998],
[965,958,988,0,973,1007,986,944,996,1016,987,1004,1005],
[1009,970,1023,1028,0,1049,967,1005,1006,1030,983,1032,1009],
[952,953,1008,994,952,0,956,974,961,991,951,966,965],
[1000,976,1033,1015,1034,1045,0,993,1007,1016,1004,1014,1011],
[982,1002,1002,1057,996,1027,1008,0,1013,1053,1022,1018,1028],
[987,1007,992,1005,995,1040,994,988,0,1055,971,1012,1012],
[958,1000,999,985,971,1010,985,948,946,0,977,976,992],
[972,998,1039,1014,1018,1050,997,979,1030,1024,0,1016,1035],
[975,974,1012,997,969,1035,987,983,989,1025,985,0,1004],
[985,959,1003,996,992,1036,990,973,989,1009,966,997,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 52, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,966,1028,1007,1004,994,1024,970,1044,995,1009,1003,1027],
[1035,0,998,1020,978,1017,993,954,1021,1010,995,993,1005],
[973,1003,0,993,992,1011,964,926,1009,972,951,1005,984],
[994,981,1008,0,958,974,1002,985,1017,974,1014,972,1020],
[997,1023,1009,1043,0,984,1021,967,1023,988,965,1032,991],
[1007,984,990,1027,1017,0,1007,954,982,982,979,1006,993],
[977,1008,1037,999,980,994,0,964,979,1022,998,1009,1040],
[1031,1047,1075,1016,1034,1047,1037,0,1035,1008,998,1029,1039],
[957,980,992,984,978,1019,1022,966,0,968,965,996,1030],
[1006,991,1029,1027,1013,1019,979,993,1033,0,978,1011,1010],
[992,1006,1050,987,1036,1022,1003,1003,1036,1023,0,1017,1018],
[998,1008,996,1029,969,995,992,972,1005,990,984,0,1013],
[974,996,1017,981,1010,1008,961,962,971,991,983,988,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 53, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1002,958,1016,936,1041,945,958,1030,1050,970,1031,1004],
[999,0,1045,1030,951,1088,1050,1009,1022,1047,982,1063,1036],
[1043,956,0,1007,944,998,1011,957,1017,1057,981,1068,1026],
[985,971,994,0,1002,1041,952,964,1032,1017,978,1012,1014],
[1065,1050,1057,999,0,1030,983,1013,1028,1038,961,1020,1054],
[960,913,1003,960,971,0,938,951,974,1035,923,1017,1019],
[1056,951,990,1049,1018,1063,0,1010,1016,1029,1023,1090,1071],
[1043,992,1044,1037,988,1050,991,0,993,1013,1030,996,1064],
[971,979,984,969,973,1027,985,1008,0,1054,1012,1005,1040],
[951,954,944,984,963,966,972,988,947,0,959,984,973],
[1031,1019,1020,1023,1040,1078,978,971,989,1042,0,934,1077],
[970,938,933,989,981,984,911,1005,996,1017,1067,0,1017],
[997,965,975,987,947,982,930,937,961,1028,924,984,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 54, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,996,1139,1011,1034,1050,1118,1038,1106,1147,1001,1029,1110],
[1005,0,1176,1035,1076,1007,1090,937,1113,1192,1072,1106,1036],
[862,825,0,962,899,857,978,841,953,949,888,999,870],
[990,966,1039,0,997,1015,1084,998,1012,1089,1013,1022,1015],
[967,925,1102,1004,0,995,1077,930,1029,1044,978,1069,976],
[951,994,1144,986,1006,0,1047,883,1058,1084,989,1048,970],
[883,911,1023,917,924,954,0,970,972,1110,961,965,949],
[963,1064,1160,1003,1071,1118,1031,0,1060,1155,1108,1170,1062],
[895,888,1048,989,972,943,1029,941,0,1030,940,972,957],
[854,809,1052,912,957,917,891,846,971,0,912,915,923],
[1000,929,1113,988,1023,1012,1040,893,1061,1089,0,1018,978],
[972,895,1002,979,932,953,1036,831,1029,1086,983,0,974],
[891,965,1131,986,1025,1031,1052,939,1044,1078,1023,1027,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 55, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,985,972,1040,1078,1043,962,975,1013,974,1006,1017,1075],
[1016,0,1054,1051,1059,1040,964,1013,1070,1011,1058,1093,1058],
[1029,947,0,1071,1054,997,999,1001,1088,1048,1010,1082,998],
[961,950,930,0,986,929,882,906,970,991,993,1018,953],
[923,942,947,1015,0,953,924,888,954,1018,1009,996,919],
[958,961,1004,1072,1048,0,946,960,1016,1005,1060,1052,1007],
[1039,1037,1002,1119,1077,1055,0,1011,1025,1012,1076,1044,961],
[1026,988,1000,1095,1113,1041,990,0,1064,1049,1098,1162,1030],
[988,931,913,1031,1047,985,976,937,0,945,979,959,938],
[1027,990,953,1010,983,996,989,952,1056,0,1034,1023,1031],
[995,943,991,1008,992,941,925,903,1022,967,0,1001,1026],
[984,908,919,983,1005,949,957,839,1042,978,1000,0,955],
[926,943,1003,1048,1082,994,1040,971,1063,970,975,1046,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 56, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1053,1035,1014,1064,1042,1015,1007,1027,1028,1024,991,1021],
[948,0,994,1038,997,1016,999,1000,992,1003,990,971,977],
[966,1007,0,1027,988,983,963,981,963,1003,1012,974,993],
[987,963,974,0,993,983,963,944,978,985,994,970,979],
[937,1004,1013,1008,0,969,972,986,949,1007,1004,965,975],
[959,985,1018,1018,1032,0,985,976,987,1000,1004,972,986],
[986,1002,1038,1038,1029,1016,0,994,989,1007,1022,1012,975],
[994,1001,1020,1057,1015,1025,1007,0,986,993,1008,1014,989],
[974,1009,1038,1023,1052,1014,1012,1015,0,1026,1021,998,1030],
[973,998,998,1016,994,1001,994,1008,975,0,987,983,1002],
[977,1011,989,1007,997,997,979,993,980,1014,0,999,1006],
[1010,1030,1027,1031,1036,1029,989,987,1003,1018,1002,0,1013],
[980,1024,1008,1022,1026,1015,1026,1012,971,999,995,988,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 57, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1106,891,989,1203,1041,998,1428,1149,1086,1178,1182,1126],
[895,0,735,1013,1048,786,944,1061,939,1149,913,880,720],
[1110,1266,0,922,970,1093,1328,1284,1107,1162,1083,1187,1157],
[1012,988,1079,0,918,920,920,1014,1002,938,960,1140,888],
[798,953,1031,1083,0,1089,975,1092,855,988,889,1000,926],
[960,1215,908,1081,912,0,1059,1346,1055,1130,943,851,1029],
[1003,1057,673,1081,1026,942,0,1169,1101,1193,1034,919,1060],
[573,940,717,987,909,655,832,0,955,799,701,1013,835],
[852,1062,894,999,1146,946,900,1046,0,1077,932,1278,1001],
[915,852,839,1063,1013,871,808,1202,924,0,910,739,861],
[823,1088,918,1041,1112,1058,967,1300,1069,1091,0,990,890],
[819,1121,814,861,1001,1150,1082,988,723,1262,1011,0,922],
[875,1281,844,1113,1075,972,941,1166,1000,1140,1111,1079,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 58, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,964,1005,1086,1103,1047,1023,959,1067,1091,1098,1175,1046],
[1037,0,1053,1049,1088,879,1039,996,1043,993,1050,1078,985],
[996,948,0,1048,1105,947,1105,943,1034,1041,1090,1174,863],
[915,952,953,0,1119,899,936,996,1079,982,1150,1088,1004],
[898,913,896,882,0,855,1005,949,988,851,1058,1117,938],
[954,1122,1054,1102,1146,0,1052,1006,1046,1080,1053,1195,986],
[978,962,896,1065,996,949,0,941,968,1030,1017,1040,971],
[1042,1005,1058,1005,1052,995,1060,0,1013,1037,1091,1114,1000],
[934,958,967,922,1013,955,1033,988,0,1050,1065,1076,1020],
[910,1008,960,1019,1150,921,971,964,951,0,961,1223,997],
[903,951,911,851,943,948,984,910,936,1040,0,959,911],
[826,923,827,913,884,806,961,887,925,778,1042,0,892],
[955,1016,1138,997,1063,1015,1030,1001,981,1004,1090,1109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 59, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,976,970,976,1006,972,966,972,976,1012,990,955,945],
[1025,0,1002,1023,1021,1035,1002,1017,982,1057,1010,1002,960],
[1031,999,0,939,1025,986,1011,999,972,1068,977,997,940],
[1025,978,1062,0,1021,1027,1023,1006,984,1057,1038,1015,961],
[995,980,976,980,0,990,991,999,987,1021,980,986,975],
[1029,966,1015,974,1011,0,1007,1004,977,1032,993,998,965],
[1035,999,990,978,1010,994,0,1016,977,1053,1003,955,997],
[1029,984,1002,995,1002,997,985,0,950,1031,1004,967,960],
[1025,1019,1029,1017,1014,1024,1024,1051,0,1032,1005,1028,980],
[989,944,933,944,980,969,948,970,969,0,936,948,928],
[1011,991,1024,963,1021,1008,998,997,996,1065,0,1001,1004],
[1046,999,1004,986,1015,1003,1046,1034,973,1053,1000,0,964],
[1056,1041,1061,1040,1026,1036,1004,1041,1021,1073,997,1037,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 60, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1022,1120,1080,1024,993,1029,1024,1083,1101,1053,1015,1037],
[979,0,1097,1127,972,1085,1053,1042,1024,1047,1044,1021,1044],
[881,904,0,1019,965,994,950,1025,938,1018,970,964,979],
[921,874,982,0,948,967,963,1007,1000,1010,940,907,984],
[977,1029,1036,1053,0,1051,1007,1016,1052,1083,947,987,974],
[1008,916,1007,1034,950,0,995,1017,959,1035,945,1015,1024],
[972,948,1051,1038,994,1006,0,1070,956,1017,1050,961,977],
[977,959,976,994,985,984,931,0,946,1008,987,927,970],
[918,977,1063,1001,949,1042,1045,1055,0,1057,1003,980,1029],
[900,954,983,991,918,966,984,993,944,0,962,919,981],
[948,957,1031,1061,1054,1056,951,1014,998,1039,0,954,1059],
[986,980,1037,1094,1014,986,1040,1074,1021,1082,1047,0,1011],
[964,957,1022,1017,1027,977,1024,1031,972,1020,942,990,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 61, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1062,1049,1060,1063,1023,1069,1018,1079,958,1070,1035,1019],
[939,0,938,962,1006,942,1036,997,1009,914,991,937,991],
[952,1063,0,973,985,1016,1028,1041,1019,1007,1032,945,943],
[941,1039,1028,0,1037,1005,1049,1050,1046,1054,1029,997,986],
[938,995,1016,964,0,1027,1032,1007,1028,943,1050,953,986],
[978,1059,985,996,974,0,997,1004,1035,1009,1039,938,985],
[932,965,973,952,969,1004,0,1009,981,946,990,918,887],
[983,1004,960,951,994,997,992,0,1042,973,1007,969,959],
[922,992,982,955,973,966,1020,959,0,945,992,941,956],
[1043,1087,994,947,1058,992,1055,1028,1056,0,1085,974,1000],
[931,1010,969,972,951,962,1011,994,1009,916,0,935,966],
[966,1064,1056,1004,1048,1063,1083,1032,1060,1027,1066,0,1043],
[982,1010,1058,1015,1015,1016,1114,1042,1045,1001,1035,958,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 62, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,967,990,1025,983,1005,998,999,1005,1009,992,987,1024],
[1034,0,992,989,950,966,1019,998,978,987,1012,1034,1039],
[1011,1009,0,1021,999,1013,1000,1004,1000,1006,993,987,1007],
[976,1012,980,0,1003,977,997,981,958,999,989,998,973],
[1018,1051,1002,998,0,980,1016,995,992,1017,995,1035,1021],
[996,1035,988,1024,1021,0,1025,1000,1014,995,1008,993,1006],
[1003,982,1001,1004,985,976,0,969,1019,1009,986,990,1013],
[1002,1003,997,1020,1006,1001,1032,0,998,1009,985,1022,1021],
[996,1023,1001,1043,1009,987,982,1003,0,999,988,995,1016],
[992,1014,995,1002,984,1006,992,992,1002,0,994,979,998],
[1009,989,1008,1012,1006,993,1015,1016,1013,1007,0,1012,1028],
[1014,967,1014,1003,966,1008,1011,979,1006,1022,989,0,1027],
[977,962,994,1028,980,995,988,980,985,1003,973,974,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 63, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,950,1053,1020,984,931,954,995,1014,969,938,1011,974],
[1051,0,1076,1054,1072,966,983,1014,1018,997,976,1018,1011],
[948,925,0,959,944,900,900,967,998,900,872,923,916],
[981,947,1042,0,979,950,942,952,989,952,910,937,911],
[1017,929,1057,1022,0,965,989,983,996,944,943,947,935],
[1070,1035,1101,1051,1036,0,971,1011,1023,957,982,966,990],
[1047,1018,1101,1059,1012,1030,0,1063,1052,983,1005,1023,1007],
[1006,987,1034,1049,1018,990,938,0,1035,923,918,940,934],
[987,983,1003,1012,1005,978,949,966,0,933,924,970,922],
[1032,1004,1101,1049,1057,1044,1018,1078,1068,0,991,1023,992],
[1063,1025,1129,1091,1058,1019,996,1083,1077,1010,0,990,1006],
[990,983,1078,1064,1054,1035,978,1061,1031,978,1011,0,986],
[1027,990,1085,1090,1066,1011,994,1067,1079,1009,995,1015,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 64, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1146,988,967,1132,1101,1155,1010,1085,1114,1052,1049,1206],
[855,0,921,943,926,1001,976,947,890,1045,1042,1037,898],
[1013,1080,0,1091,1138,957,1079,1023,1091,1008,1095,1090,1162],
[1034,1058,910,0,1099,915,1096,934,947,1018,1064,1010,1052],
[869,1075,863,902,0,951,967,884,965,997,944,1050,993],
[900,1000,1044,1086,1050,0,981,969,1060,1041,1051,1041,1062],
[846,1025,922,905,1034,1020,0,948,1015,941,1002,932,1010],
[991,1054,978,1067,1117,1032,1053,0,1084,1091,1066,1034,1224],
[916,1111,910,1054,1036,941,986,917,0,1126,1046,988,1044],
[887,956,993,983,1004,960,1060,910,875,0,993,1048,1032],
[949,959,906,937,1057,950,999,935,955,1008,0,1005,1075],
[952,964,911,991,951,960,1069,967,1013,953,996,0,977],
[795,1103,839,949,1008,939,991,777,957,969,926,1024,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 65, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,783,936,1077,866,1055,1077,1072,1129,873,971,1061,1058],
[1218,0,1028,1030,901,1082,1117,1147,1053,997,1253,1207,1369],
[1065,973,0,982,997,1084,1033,1071,1052,883,1171,1138,1044],
[924,971,1019,0,921,1018,1062,1017,1029,914,1112,1099,1053],
[1135,1100,1004,1080,0,1095,1102,1022,1046,939,1255,1039,1177],
[946,919,917,983,906,0,930,1068,1067,780,1207,1013,1182],
[924,884,968,939,899,1071,0,986,964,774,1054,1067,1029],
[929,854,930,984,979,933,1015,0,1157,1075,1283,1097,1124],
[872,948,949,972,955,934,1037,844,0,741,1133,1039,1033],
[1128,1004,1118,1087,1062,1221,1227,926,1260,0,1213,1267,1165],
[1030,748,830,889,746,794,947,718,868,788,0,881,1108],
[940,794,863,902,962,988,934,904,962,734,1120,0,952],
[943,632,957,948,824,819,972,877,968,836,893,1049,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 66, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,984,1032,1016,1065,977,988,944,1011,972,1010,1046,977],
[1017,0,1035,1001,997,966,954,941,997,960,1029,987,1023],
[969,966,0,1016,1028,937,986,939,977,937,1008,992,942],
[985,1000,985,0,975,947,963,923,995,926,1037,1002,984],
[936,1004,973,1026,0,933,990,964,987,985,1003,978,961],
[1024,1035,1064,1054,1068,0,1018,997,1014,1006,1053,1036,993],
[1013,1047,1015,1038,1011,983,0,993,992,975,1069,1034,1007],
[1057,1060,1062,1078,1037,1004,1008,0,1042,993,1054,1039,1009],
[990,1004,1024,1006,1014,987,1009,959,0,987,1022,1018,1003],
[1029,1041,1064,1075,1016,995,1026,1008,1014,0,1045,1018,1016],
[991,972,993,964,998,948,932,947,979,956,0,965,992],
[955,1014,1009,999,1023,965,967,962,983,983,1036,0,960],
[1024,978,1059,1017,1040,1008,994,992,998,985,1009,1041,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 67, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,983,1013,984,1006,1040,1048,1043,976,959,1023,978,978],
[1018,0,1025,1029,1066,1064,1046,1068,1022,992,999,1001,983],
[988,976,0,994,969,988,1002,1032,977,990,1001,994,941],
[1017,972,1007,0,990,1014,995,1056,998,968,1004,983,957],
[995,935,1032,1011,0,1008,1003,1026,1000,954,985,991,947],
[961,937,1013,987,993,0,977,1001,965,922,943,939,930],
[953,955,999,1006,998,1024,0,1012,982,971,1003,970,986],
[958,933,969,945,975,1000,989,0,928,929,960,951,924],
[1025,979,1024,1003,1001,1036,1019,1073,0,981,1000,1004,1013],
[1042,1009,1011,1033,1047,1079,1030,1072,1020,0,991,999,980],
[978,1002,1000,997,1016,1058,998,1041,1001,1010,0,970,973],
[1023,1000,1007,1018,1010,1062,1031,1050,997,1002,1031,0,946],
[1023,1018,1060,1044,1054,1071,1015,1077,988,1021,1028,1055,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 68, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,980,1009,990,1039,1036,1021,1004,994,1012,1018,986,1028],
[1021,0,1031,1024,1035,1017,1023,1041,1008,995,1053,1027,1031],
[992,970,0,990,965,985,975,970,971,940,1005,948,980],
[1011,977,1011,0,1019,1004,1013,1015,1021,976,988,1007,1040],
[962,966,1036,982,0,1009,995,1001,996,986,983,998,994],
[965,984,1016,997,992,0,1004,992,970,977,1018,1011,994],
[980,978,1026,988,1006,997,0,1002,1011,981,971,985,1025],
[997,960,1031,986,1000,1009,999,0,982,977,1002,990,997],
[1007,993,1030,980,1005,1031,990,1019,0,966,1015,994,1031],
[989,1006,1061,1025,1015,1024,1020,1024,1035,0,991,998,1033],
[983,948,996,1013,1018,983,1030,999,986,1010,0,984,1002],
[1015,974,1053,994,1003,990,1016,1011,1007,1003,1017,0,1015],
[973,970,1021,961,1007,1007,976,1004,970,968,999,986,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 69, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1014,1043,973,1022,993,1037,1066,1033,1000,1015,964,1058],
[987,0,1054,1005,990,924,966,1030,1005,1042,964,951,965],
[958,947,0,974,946,932,961,1043,937,972,1010,944,986],
[1028,996,1027,0,995,1013,1026,1100,952,1017,990,1014,986],
[979,1011,1055,1006,0,969,961,1073,982,1045,938,1014,1017],
[1008,1077,1069,988,1032,0,1053,1078,1038,1102,1034,1050,1028],
[964,1035,1040,975,1040,948,0,1111,1023,1042,984,1008,1029],
[935,971,958,901,928,923,890,0,961,965,943,931,971],
[968,996,1064,1049,1019,963,978,1040,0,1071,1056,985,1051],
[1001,959,1029,984,956,899,959,1036,930,0,942,931,954],
[986,1037,991,1011,1063,967,1017,1058,945,1059,0,989,998],
[1037,1050,1057,987,987,951,993,1070,1016,1070,1012,0,1040],
[943,1036,1015,1015,984,973,972,1030,950,1047,1003,961,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 70, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1007,1008,1058,992,1043,999,1080,983,1055,990,1012,1061],
[994,0,989,1011,1008,1019,1013,1037,1001,1048,983,961,1043],
[993,1012,0,1017,991,1037,1054,1042,992,1010,1015,995,1042],
[943,990,984,0,1012,1032,952,1025,990,993,987,971,1046],
[1009,993,1010,989,0,1043,978,1007,973,1029,982,960,1008],
[958,982,964,969,958,0,985,986,976,988,991,955,1001],
[1002,988,947,1049,1023,1016,0,1025,1012,1028,961,1002,1050],
[921,964,959,976,994,1015,976,0,936,971,1007,937,1025],
[1018,1000,1009,1011,1028,1025,989,1065,0,1011,980,1016,1042],
[946,953,991,1008,972,1013,973,1030,990,0,977,982,1005],
[1011,1018,986,1014,1019,1010,1040,994,1021,1024,0,978,1058],
[989,1040,1006,1030,1041,1046,999,1064,985,1019,1023,0,1044],
[940,958,959,955,993,1000,951,976,959,996,943,957,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 71, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1000,818,730,849,700,1017,1037,891,887,875,1116,849],
[1001,0,1013,866,972,919,1151,1204,1084,922,892,1057,977],
[1183,988,0,856,1162,1055,1060,1160,1012,724,958,1122,1132],
[1271,1135,1145,0,1146,990,1118,937,1205,1017,1166,1207,1117],
[1152,1029,839,855,0,900,1011,1091,621,714,854,1015,871],
[1301,1082,946,1011,1101,0,1045,1107,863,1026,1070,1020,985],
[984,850,941,883,990,956,0,1184,894,1045,872,847,1044],
[964,797,841,1064,910,894,817,0,793,925,906,1175,866],
[1110,917,989,796,1380,1138,1107,1208,0,957,977,1472,1039],
[1114,1079,1277,984,1287,975,956,1076,1044,0,795,1336,1082],
[1126,1109,1043,835,1147,931,1129,1095,1024,1206,0,1324,1119],
[885,944,879,794,986,981,1154,826,529,665,677,0,825],
[1152,1024,869,884,1130,1016,957,1135,962,919,882,1176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 72, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,985,976,1009,961,958,1028,978,998,956,980,983,976],
[1016,0,960,1001,1001,980,989,952,990,933,981,984,975],
[1025,1041,0,1019,1001,1007,1008,973,997,1001,1039,1025,1000],
[992,1000,982,0,970,968,1002,959,987,963,992,979,996],
[1040,1000,1000,1031,0,984,994,977,991,1011,1022,984,981],
[1043,1021,994,1033,1017,0,1017,976,994,999,991,1005,982],
[973,1012,993,999,1007,984,0,971,986,964,993,1013,950],
[1023,1049,1028,1042,1024,1025,1030,0,1015,993,1007,986,988],
[1003,1011,1004,1014,1010,1007,1015,986,0,991,1024,1011,999],
[1045,1068,1000,1038,990,1002,1037,1008,1010,0,1047,1018,1004],
[1021,1020,962,1009,979,1010,1008,994,977,954,0,999,979],
[1018,1017,976,1022,1017,996,988,1015,990,983,1002,0,992],
[1025,1026,1001,1005,1020,1019,1051,1013,1002,997,1022,1009,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 73, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,987,1060,1001,1024,1007,997,875,1072,1038,1003,1068,1017],
[1014,0,1074,978,1039,1003,1039,981,1043,1054,987,1062,1066],
[941,927,0,949,952,953,956,835,1016,1024,991,990,977],
[1000,1023,1052,0,1044,1040,1024,1003,1081,1057,995,1059,981],
[977,962,1049,957,0,1028,1009,882,1107,1001,965,1014,957],
[994,998,1048,961,973,0,943,972,1059,987,989,1031,1017],
[1004,962,1045,977,992,1058,0,891,1070,1029,1055,980,1110],
[1126,1020,1166,998,1119,1029,1110,0,1144,1095,1088,1068,1119],
[929,958,985,920,894,942,931,857,0,949,927,940,922],
[963,947,977,944,1000,1014,972,906,1052,0,1031,1015,974],
[998,1014,1010,1006,1036,1012,946,913,1074,970,0,1008,1066],
[933,939,1011,942,987,970,1021,933,1061,986,993,0,980],
[984,935,1024,1020,1044,984,891,882,1079,1027,935,1021,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 74, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,981,1025,1060,1038,933,982,960,980,984,1071,994,1020],
[1020,0,1077,1051,1017,1015,1016,1055,1049,979,1071,1015,995],
[976,924,0,991,1007,966,904,929,936,963,958,984,987],
[941,950,1010,0,946,948,970,942,943,930,966,910,970],
[963,984,994,1055,0,951,975,923,960,951,1046,1004,908],
[1068,986,1035,1053,1050,0,990,992,951,968,1065,975,994],
[1019,985,1097,1031,1026,1011,0,1007,1020,1086,1105,1016,1033],
[1041,946,1072,1059,1078,1009,994,0,990,1049,1070,1029,1014],
[1021,952,1065,1058,1041,1050,981,1011,0,1010,1058,999,1027],
[1017,1022,1038,1071,1050,1033,915,952,991,0,1057,965,1029],
[930,930,1043,1035,955,936,896,931,943,944,0,954,933],
[1007,986,1017,1091,997,1026,985,972,1002,1036,1047,0,1038],
[981,1006,1014,1031,1093,1007,968,987,974,972,1068,963,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 75, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,609,1083,1341,932,982,710,1068,1004,1132,1005,949,1034],
[1392,0,1157,1393,803,1419,999,1098,1374,1118,1030,950,1416],
[918,844,0,872,646,892,754,802,752,715,879,870,1337],
[660,608,1129,0,754,985,762,1065,889,764,760,1016,859],
[1069,1198,1355,1247,0,1230,1198,1192,1354,929,1074,1361,958],
[1019,582,1109,1016,771,0,920,600,877,464,625,833,933],
[1291,1002,1247,1239,803,1081,0,1207,1089,1070,934,1240,1060],
[933,903,1199,936,809,1401,794,0,1156,802,836,1078,1133],
[997,627,1249,1112,647,1124,912,845,0,656,851,890,905],
[869,883,1286,1237,1072,1537,931,1199,1345,0,905,1419,1212],
[996,971,1122,1241,927,1376,1067,1165,1150,1096,0,1199,1231],
[1052,1051,1131,985,640,1168,761,923,1111,582,802,0,1016],
[967,585,664,1142,1043,1068,941,868,1096,789,770,985,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 76, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,951,1111,1053,1038,1062,1019,1035,995,1043,1008,1064,1038],
[1050,0,1075,1050,1003,1069,1006,980,1024,999,987,1032,1030],
[890,926,0,989,953,983,962,890,886,968,909,937,944],
[948,951,1012,0,888,1014,972,968,991,969,995,957,991],
[963,998,1048,1113,0,1038,1008,982,1044,1024,1077,989,979],
[939,932,1018,987,963,0,964,987,979,973,969,906,917],
[982,995,1039,1029,993,1037,0,1065,1053,1040,1017,1048,996],
[966,1021,1111,1033,1019,1014,936,0,1026,975,1026,1025,1017],
[1006,977,1115,1010,957,1022,948,975,0,1055,940,953,1003],
[958,1002,1033,1032,977,1028,961,1026,946,0,1014,961,967],
[993,1014,1092,1006,924,1032,984,975,1061,987,0,965,986],
[937,969,1064,1044,1012,1095,953,976,1048,1040,1036,0,972],
[963,971,1057,1010,1022,1084,1005,984,998,1034,1015,1029,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 77, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,990,986,1088,1047,1050,989,996,1001,1031,1042,1053,1032],
[1011,0,990,1046,982,1016,982,970,969,998,982,1015,1010],
[1015,1011,0,1075,1013,997,989,991,929,1055,1008,1033,1038],
[913,955,926,0,929,964,985,951,914,982,964,966,937],
[954,1019,988,1072,0,1049,1025,1016,980,1023,975,1045,1022],
[951,985,1004,1037,952,0,965,999,979,1025,948,1022,967],
[1012,1019,1012,1016,976,1036,0,993,955,1037,1024,1025,1056],
[1005,1031,1010,1050,985,1002,1008,0,981,1054,1019,1053,1030],
[1000,1032,1072,1087,1021,1022,1046,1020,0,1077,1034,1039,1031],
[970,1003,946,1019,978,976,964,947,924,0,974,1010,970],
[959,1019,993,1037,1026,1053,977,982,967,1027,0,1000,1012],
[948,986,968,1035,956,979,976,948,962,991,1001,0,965],
[969,991,963,1064,979,1034,945,971,970,1031,989,1036,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 78, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1451,1123,626,1152,1023,867,791,1175,1240,818,1035,1035],
[550,0,687,657,796,752,819,596,716,808,493,819,600],
[878,1314,0,887,1181,1250,1150,1079,960,988,823,1288,861],
[1375,1344,1114,0,1247,1260,1088,995,812,1305,764,1137,850],
[849,1205,820,754,0,1370,1094,927,1087,970,616,963,727],
[978,1249,751,741,631,0,930,587,894,716,654,792,566],
[1134,1182,851,913,907,1071,0,1106,1295,1229,818,1254,817],
[1210,1405,922,1006,1074,1414,895,0,1083,1093,983,1351,850],
[826,1285,1041,1189,914,1107,706,918,0,995,795,1061,592],
[761,1193,1013,696,1031,1285,772,908,1006,0,824,1198,597],
[1183,1508,1178,1237,1385,1347,1183,1018,1206,1177,0,1307,848],
[966,1182,713,864,1038,1209,747,650,940,803,694,0,392],
[966,1401,1140,1151,1274,1435,1184,1151,1409,1404,1153,1609,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 79, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,961,987,881,1071,980,969,997,948,996,958,947,927],
[1040,0,1041,940,1062,1062,1011,1008,1001,1026,991,996,977],
[1014,960,0,942,1037,978,967,997,986,995,940,925,920],
[1120,1061,1059,0,1093,1047,990,1033,985,1005,1003,981,987],
[930,939,964,908,0,942,890,919,937,933,935,942,866],
[1021,939,1023,954,1059,0,972,946,958,960,979,890,952],
[1032,990,1034,1011,1111,1029,0,982,997,1016,974,997,962],
[1004,993,1004,968,1082,1055,1019,0,964,1017,995,997,930],
[1053,1000,1015,1016,1064,1043,1004,1037,0,1048,1029,997,981],
[1005,975,1006,996,1068,1041,985,984,953,0,1037,971,917],
[1043,1010,1061,998,1066,1022,1027,1006,972,964,0,1001,936],
[1054,1005,1076,1020,1059,1111,1004,1004,1004,1030,1000,0,1042],
[1074,1024,1081,1014,1135,1049,1039,1071,1020,1084,1065,959,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 80, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,968,1003,983,1034,952,980,970,984,1035,1023,1018,999],
[1033,0,998,1004,1017,961,1017,1017,977,1036,1046,990,982],
[998,1003,0,978,1014,973,992,1030,955,1029,1053,1039,997],
[1018,997,1023,0,1035,1029,1000,1032,1032,1037,1052,1025,1004],
[967,984,987,966,0,958,998,979,960,976,1015,1009,981],
[1049,1040,1028,972,1043,0,1009,1026,1007,1034,1044,1046,1010],
[1021,984,1009,1001,1003,992,0,1009,1003,1021,1031,991,984],
[1031,984,971,969,1022,975,992,0,980,1006,1017,1022,981],
[1017,1024,1046,969,1041,994,998,1021,0,1048,1058,1034,1014],
[966,965,972,964,1025,967,980,995,953,0,1026,987,974],
[978,955,948,949,986,957,970,984,943,975,0,966,963],
[983,1011,962,976,992,955,1010,979,967,1014,1035,0,967],
[1002,1019,1004,997,1020,991,1017,1020,987,1027,1038,1034,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 81, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,966,985,1028,998,1013,1014,1027,1029,1013,1024,1035,1016],
[1035,0,1043,1018,1000,1015,1039,1030,1036,992,1023,1025,1021],
[1016,958,0,1022,985,1049,1031,1000,982,1020,997,982,1031],
[973,983,979,0,957,1027,1032,1015,1024,982,1013,1001,1015],
[1003,1001,1016,1044,0,1031,1026,1030,1011,1009,994,1023,1004],
[988,986,952,974,970,0,982,961,996,991,1005,971,961],
[987,962,970,969,975,1019,0,989,1018,965,1004,986,937],
[974,971,1001,986,971,1040,1012,0,1011,998,1006,958,1011],
[972,965,1019,977,990,1005,983,990,0,983,1025,972,994],
[988,1009,981,1019,992,1010,1036,1003,1018,0,1018,1006,987],
[977,978,1004,988,1007,996,997,995,976,983,0,1009,1000],
[966,976,1019,1000,978,1030,1015,1043,1029,995,992,0,993],
[985,980,970,986,997,1040,1064,990,1007,1014,1001,1008,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 82, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1021,1027,1009,1016,1023,984,1041,1008,986,986,1003,1011],
[980,0,1002,974,1001,957,966,1000,979,993,980,966,988],
[974,999,0,981,999,995,951,1003,982,994,985,946,974],
[992,1027,1020,0,1056,1027,1030,1056,1016,995,991,1017,1012],
[985,1000,1002,945,0,991,956,1056,987,1019,992,988,998],
[978,1044,1006,974,1010,0,1015,1054,1039,1013,1042,1004,984],
[1017,1035,1050,971,1045,986,0,1011,1026,1015,990,1028,1020],
[960,1001,998,945,945,947,990,0,971,955,973,983,963],
[993,1022,1019,985,1014,962,975,1030,0,1011,989,1000,984],
[1015,1008,1007,1006,982,988,986,1046,990,0,976,1007,989],
[1015,1021,1016,1010,1009,959,1011,1028,1012,1025,0,975,993],
[998,1035,1055,984,1013,997,973,1018,1001,994,1026,0,1010],
[990,1013,1027,989,1003,1017,981,1038,1017,1012,1008,991,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 83, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,995,1009,997,1029,1056,986,976,1040,1030,1017,974,1020],
[1006,0,1056,973,1023,1039,973,1007,1046,1021,1025,1023,1028],
[992,945,0,976,969,970,953,999,996,987,997,990,938],
[1004,1028,1025,0,1044,1102,993,1051,1024,1023,999,1039,1014],
[972,978,1032,957,0,996,976,1032,1017,965,959,926,1030],
[945,962,1031,899,1005,0,1012,993,994,984,996,944,1016],
[1015,1028,1048,1008,1025,989,0,969,1002,993,998,985,1005],
[1025,994,1002,950,969,1008,1032,0,1011,1002,1043,1035,1056],
[961,955,1005,977,984,1007,999,990,0,998,1020,1011,1020],
[971,980,1014,978,1036,1017,1008,999,1003,0,976,1005,1036],
[984,976,1004,1002,1042,1005,1003,958,981,1025,0,1006,1000],
[1027,978,1011,962,1075,1057,1016,966,990,996,995,0,1056],
[981,973,1063,987,971,985,996,945,981,965,1001,945,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 84, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,956,979,947,980,941,970,984,975,1009,999,995,992],
[1045,0,1038,988,1019,1029,1053,1019,989,1050,996,1033,1015],
[1022,963,0,959,997,981,975,987,981,1004,965,1043,992],
[1054,1013,1042,0,1031,1000,1029,997,973,1030,1022,962,1006],
[1021,982,1004,970,0,987,1005,971,981,1023,959,1009,987],
[1060,972,1020,1001,1014,0,1014,982,1001,1035,986,984,999],
[1031,948,1026,972,996,987,0,992,982,990,973,1017,1008],
[1017,982,1014,1004,1030,1019,1009,0,963,1050,998,1019,998],
[1026,1012,1020,1028,1020,1000,1019,1038,0,1036,1005,1022,1031],
[992,951,997,971,978,966,1011,951,965,0,979,993,982],
[1002,1005,1036,979,1042,1015,1028,1003,996,1022,0,1036,978],
[1006,968,958,1039,992,1017,984,982,979,1008,965,0,1005],
[1009,986,1009,995,1014,1002,993,1003,970,1019,1023,996,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 85, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1008,1017,1016,990,976,1027,1032,1008,1070,1055,990,1008],
[993,0,1087,1054,998,1021,1050,1037,1035,1045,1087,1044,984],
[984,914,0,982,921,965,968,955,975,1002,1011,940,1008],
[985,947,1019,0,996,960,963,964,948,1040,1002,981,988],
[1011,1003,1080,1005,0,1009,991,1038,1005,1119,1033,1035,1034],
[1025,980,1036,1041,992,0,1010,1031,1016,1058,1073,1024,1028],
[974,951,1033,1038,1010,991,0,1020,986,1069,1050,990,1027],
[969,964,1046,1037,963,970,981,0,1018,1053,1046,986,1043],
[993,966,1026,1053,996,985,1015,983,0,1112,1027,998,1001],
[931,956,999,961,882,943,932,948,889,0,1034,911,987],
[946,914,990,999,968,928,951,955,974,967,0,985,947],
[1011,957,1061,1020,966,977,1011,1015,1003,1090,1016,0,1050],
[993,1017,993,1013,967,973,974,958,1000,1014,1054,951,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 86, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,982,983,1038,943,1014,983,993,955,985,1023,989,1007],
[1019,0,1011,974,1011,986,978,993,983,984,987,995,1001],
[1018,990,0,1025,973,1007,1012,993,982,962,1047,1050,1007],
[963,1027,976,0,977,973,974,946,1012,1012,1013,1003,958],
[1058,990,1028,1024,0,1002,1026,978,1013,976,1048,1002,1013],
[987,1015,994,1028,999,0,1008,1040,988,969,1005,1022,999],
[1018,1023,989,1027,975,993,0,951,988,938,1029,1008,972],
[1008,1008,1008,1055,1023,961,1050,0,1008,974,1030,959,963],
[1046,1018,1019,989,988,1013,1013,993,0,986,1011,990,993],
[1016,1017,1039,989,1025,1032,1063,1027,1015,0,1040,1057,1009],
[978,1014,954,988,953,996,972,971,990,961,0,1010,952],
[1012,1006,951,998,999,979,993,1042,1011,944,991,0,971],
[994,1000,994,1043,988,1002,1029,1038,1008,992,1049,1030,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 87, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,932,939,975,969,966,908,933,927,926,969,925,931],
[1069,0,1009,987,978,1002,979,950,1003,991,999,963,994],
[1062,992,0,1009,1002,1012,969,1011,1019,979,999,1026,992],
[1026,1014,992,0,1003,1029,998,1000,1058,994,1037,1000,955],
[1032,1023,999,998,0,1002,990,982,993,930,993,987,971],
[1035,999,989,972,999,0,939,949,1050,964,981,961,1005],
[1093,1022,1032,1003,1011,1062,0,993,1028,940,1012,1005,993],
[1068,1051,990,1001,1019,1052,1008,0,1023,1011,1049,1050,1008],
[1074,998,982,943,1008,951,973,978,0,918,972,999,991],
[1075,1010,1022,1007,1071,1037,1061,990,1083,0,1054,1069,1032],
[1032,1002,1002,964,1008,1020,989,952,1029,947,0,992,1015],
[1076,1038,975,1001,1014,1040,996,951,1002,932,1009,0,990],
[1070,1007,1009,1046,1030,996,1008,993,1010,969,986,1011,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 88, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1042,990,1031,1071,1045,1071,1025,1066,1074,1021,1023,973],
[959,0,1004,1029,999,1101,1058,1025,1031,1029,1028,1044,1013],
[1011,997,0,1044,1048,1003,1054,1013,1050,1007,1024,1042,1049],
[970,972,957,0,1023,967,1024,953,1013,982,1017,1018,1020],
[930,1002,953,978,0,970,1018,979,980,1009,1028,993,984],
[956,900,998,1034,1031,0,1003,948,1011,1013,1002,977,1015],
[930,943,947,977,983,998,0,997,998,1055,997,1007,962],
[976,976,988,1048,1022,1053,1004,0,1048,1045,1012,963,1035],
[935,970,951,988,1021,990,1003,953,0,990,938,989,1002],
[927,972,994,1019,992,988,946,956,1011,0,970,1000,992],
[980,973,977,984,973,999,1004,989,1063,1031,0,966,987],
[978,957,959,983,1008,1024,994,1038,1012,1001,1035,0,965],
[1028,988,952,981,1017,986,1039,966,999,1009,1014,1036,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 89, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,988,987,1018,966,1023,1017,988,1036,1018,984,1021,989],
[1013,0,1011,990,975,1013,1009,1012,986,1027,992,1036,998],
[1014,990,0,1027,1016,994,1000,995,999,1041,962,1005,970],
[983,1011,974,0,981,1026,1009,986,1013,1022,990,1004,1007],
[1035,1026,985,1020,0,1000,980,998,999,1031,1015,990,997],
[978,988,1007,975,1001,0,1016,991,989,987,993,990,1001],
[984,992,1001,992,1021,985,0,1001,1014,1027,970,994,970],
[1013,989,1006,1015,1003,1010,1000,0,1007,1034,968,1021,992],
[965,1015,1002,988,1002,1012,987,994,0,999,965,992,1004],
[983,974,960,979,970,1014,974,967,1002,0,984,992,990],
[1017,1009,1039,1011,986,1008,1031,1033,1036,1017,0,1009,1003],
[980,965,996,997,1011,1011,1007,980,1009,1009,992,0,989],
[1012,1003,1031,994,1004,1000,1031,1009,997,1011,998,1012,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 90, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1045,1017,972,1060,991,1062,967,1033,1050,1044,1013,987],
[956,0,1004,961,994,939,975,950,979,995,1008,991,997],
[984,997,0,1022,1036,984,951,986,1000,1017,1026,998,993],
[1029,1040,979,0,1003,966,969,1007,1060,989,996,1041,972],
[941,1007,965,998,0,947,987,978,1017,1000,970,982,951],
[1010,1062,1017,1035,1054,0,1000,978,1058,1056,1062,995,1030],
[939,1026,1050,1032,1014,1001,0,969,1010,989,1036,1009,999],
[1034,1051,1015,994,1023,1023,1032,0,1045,1043,1043,1038,1007],
[968,1022,1001,941,984,943,991,956,0,1021,1004,1003,968],
[951,1006,984,1012,1001,945,1012,958,980,0,1018,990,1013],
[957,993,975,1005,1031,939,965,958,997,983,0,1010,923],
[988,1010,1003,960,1019,1006,992,963,998,1011,991,0,993],
[1014,1004,1008,1029,1050,971,1002,994,1033,988,1078,1008,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 91, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,996,946,989,990,961,972,943,1013,922,978,959,986],
[1005,0,993,985,1037,999,1022,985,1036,963,1016,1012,1020],
[1055,1008,0,1051,1032,970,1050,985,1071,1034,1001,957,1056],
[1012,1016,950,0,1032,964,1003,1006,1046,949,1026,966,1061],
[1011,964,969,969,0,1015,997,930,1023,959,978,1006,1013],
[1040,1002,1031,1037,986,0,1078,1048,1070,1015,1041,988,1052],
[1029,979,951,998,1004,923,0,940,1052,992,1000,995,1035],
[1058,1016,1016,995,1071,953,1061,0,1073,998,992,1024,1045],
[988,965,930,955,978,931,949,928,0,976,963,935,978],
[1079,1038,967,1052,1042,986,1009,1003,1025,0,1001,995,1023],
[1023,985,1000,975,1023,960,1001,1009,1038,1000,0,1025,1028],
[1042,989,1044,1035,995,1013,1006,977,1066,1006,976,0,1047],
[1015,981,945,940,988,949,966,956,1023,978,973,954,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 92, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1025,1036,1013,991,990,1012,1035,1045,1034,1029,1034,1021],
[976,0,977,978,945,968,995,1005,959,1032,990,1012,986],
[965,1024,0,985,1001,983,1011,987,1027,1034,967,999,1013],
[988,1023,1016,0,981,1028,997,1030,1027,1018,1032,1002,1022],
[1010,1056,1000,1020,0,1036,1008,1039,1012,1019,989,1004,999],
[1011,1033,1018,973,965,0,1029,1002,999,1064,996,1015,1017],
[989,1006,990,1004,993,972,0,999,1001,1007,1009,1039,986],
[966,996,1014,971,962,999,1002,0,985,1037,1001,1001,963],
[956,1042,974,974,989,1002,1000,1016,0,1054,985,998,998],
[967,969,967,983,982,937,994,964,947,0,960,974,960],
[972,1011,1034,969,1012,1005,992,1000,1016,1041,0,992,1003],
[967,989,1002,999,997,986,962,1000,1003,1027,1009,0,982],
[980,1015,988,979,1002,984,1015,1038,1003,1041,998,1019,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 93, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,995,996,1048,1094,1064,1041,1061,1039,1023,974,1016,1034],
[1006,0,1003,1024,1070,1043,1029,1011,1025,1046,993,1001,1021],
[1005,998,0,1055,1070,1059,1049,996,1043,1055,1002,1016,1015],
[953,977,946,0,1040,989,979,996,1007,1006,953,990,973],
[907,931,931,961,0,991,965,949,979,974,953,953,944],
[937,958,942,1012,1010,0,992,993,991,1012,936,968,978],
[960,972,952,1022,1036,1009,0,994,1014,1005,984,992,986],
[940,990,1005,1005,1052,1008,1007,0,1001,996,991,963,1017],
[962,976,958,994,1022,1010,987,1000,0,1018,983,987,1002],
[978,955,946,995,1027,989,996,1005,983,0,973,986,955],
[1027,1008,999,1048,1048,1065,1017,1010,1018,1028,0,1011,1014],
[985,1000,985,1011,1048,1033,1009,1038,1014,1015,990,0,1000],
[967,980,986,1028,1057,1023,1015,984,999,1046,987,1001,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 94, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1031,1014,1033,998,1035,1073,1061,1070,1103,1068,1055,1043],
[970,0,1043,996,990,927,1082,1066,1050,1083,1060,1003,946],
[987,958,0,913,981,926,1066,1069,1043,1071,974,1001,1040],
[968,1005,1088,0,1020,901,1048,1010,1016,1084,1022,986,1017],
[1003,1011,1020,981,0,932,1020,1072,1030,1036,1042,1020,1004],
[966,1074,1075,1100,1069,0,1093,1109,1077,1131,1024,1033,1065],
[928,919,935,953,981,908,0,983,1014,1047,961,982,915],
[940,935,932,991,929,892,1018,0,888,986,970,953,965],
[931,951,958,985,971,924,987,1113,0,1037,1013,975,975],
[898,918,930,917,965,870,954,1015,964,0,950,941,949],
[933,941,1027,979,959,977,1040,1031,988,1051,0,958,1038],
[946,998,1000,1015,981,968,1019,1048,1026,1060,1043,0,1001],
[958,1055,961,984,997,936,1086,1036,1026,1052,963,1000,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 95, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1094,1093,1102,1143,858,814,962,955,1005,959,900,842],
[907,0,1163,1162,1049,979,999,1140,1063,1023,1030,1008,946],
[908,838,0,1035,988,881,857,845,890,893,977,928,940],
[899,839,966,0,1028,894,797,944,957,936,905,927,864],
[858,952,1013,973,0,835,835,941,864,930,888,829,875],
[1143,1022,1120,1107,1166,0,896,995,946,1101,1043,986,988],
[1187,1002,1144,1204,1166,1105,0,1082,938,1062,1130,1114,1016],
[1039,861,1156,1057,1060,1006,919,0,939,926,991,1014,955],
[1046,938,1111,1044,1137,1055,1063,1062,0,995,1142,957,962],
[996,978,1108,1065,1071,900,939,1075,1006,0,998,1026,1043],
[1042,971,1024,1096,1113,958,871,1010,859,1003,0,934,952],
[1101,993,1073,1074,1172,1015,887,987,1044,975,1067,0,908],
[1159,1055,1061,1137,1126,1013,985,1046,1039,958,1049,1093,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 96, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,977,1008,1003,983,994,1014,986,1018,1027,982,1007,984],
[1024,0,1040,1028,995,1066,1013,995,1033,1010,998,1019,1000],
[993,961,0,1000,964,1003,1007,965,1007,979,933,974,958],
[998,973,1001,0,1000,1014,990,972,1007,988,985,1004,965],
[1018,1006,1037,1001,0,964,999,980,1024,992,1004,1018,978],
[1007,935,998,987,1037,0,984,987,993,1004,955,989,976],
[987,988,994,1011,1002,1017,0,978,1011,1000,952,989,992],
[1015,1006,1036,1029,1021,1014,1023,0,1057,971,976,1008,989],
[983,968,994,994,977,1008,990,944,0,982,984,963,949],
[974,991,1022,1013,1009,997,1001,1030,1019,0,973,980,967],
[1019,1003,1068,1016,997,1046,1049,1025,1017,1028,0,1007,1012],
[994,982,1027,997,983,1012,1012,993,1038,1021,994,0,993],
[1017,1001,1043,1036,1023,1025,1009,1012,1052,1034,989,1008,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 97, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1016,1038,1003,1024,997,1025,1022,1018,1014,1008,1003,984],
[985,0,977,984,989,990,991,998,969,999,1004,976,970],
[963,1024,0,1012,1006,996,1044,1026,970,995,1012,985,985],
[998,1017,989,0,993,991,1021,1022,987,1018,1014,987,979],
[977,1012,995,1008,0,988,1001,1005,982,1002,994,997,987],
[1004,1011,1005,1010,1013,0,1017,1019,984,1009,1029,993,986],
[976,1010,957,980,1000,984,0,1006,964,982,1004,956,962],
[979,1003,975,979,996,982,995,0,985,972,1009,998,979],
[983,1032,1031,1014,1019,1017,1037,1016,0,993,1018,1014,1010],
[987,1002,1006,983,999,992,1019,1029,1008,0,996,995,1000],
[993,997,989,987,1007,972,997,992,983,1005,0,999,973],
[998,1025,1016,1014,1004,1008,1045,1003,987,1006,1002,0,1005],
[1017,1031,1016,1022,1014,1015,1039,1022,991,1001,1028,996,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 98, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,962,930,961,974,932,953,1017,990,975,990,952,952],
[1039,0,1003,1036,1048,1014,1047,991,992,1051,1039,999,1003],
[1071,998,0,1003,1011,1018,1001,1020,1004,1063,1045,972,988],
[1040,965,998,0,997,997,980,979,980,1029,1036,994,1015],
[1027,953,990,1004,0,1013,1003,988,965,1024,1004,968,1036],
[1069,987,983,1004,988,0,1017,1023,1007,1047,1019,1006,997],
[1048,954,1000,1021,998,984,0,997,983,1041,1024,1012,1022],
[984,1010,981,1022,1013,978,1004,0,965,1036,1071,964,997],
[1011,1009,997,1021,1036,994,1018,1036,0,1074,1032,993,1027],
[1026,950,938,972,977,954,960,965,927,0,966,982,977],
[1011,962,956,965,997,982,977,930,969,1035,0,938,996],
[1049,1002,1029,1007,1033,995,989,1037,1008,1019,1063,0,1038],
[1049,998,1013,986,965,1004,979,1004,974,1024,1005,963,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 99, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1034,987,1003,964,1004,1026,969,1059,1030,981,950,1029],
[967,0,953,943,958,967,996,935,969,1001,965,968,962],
[1014,1048,0,991,1004,976,1002,1004,1030,1046,1018,976,1038],
[998,1058,1010,0,977,972,959,983,1003,1014,1001,992,995],
[1037,1043,997,1024,0,994,1006,983,1063,1087,1023,1013,1039],
[997,1034,1025,1029,1007,0,1016,973,1024,1030,1010,1007,1046],
[975,1005,999,1042,995,985,0,1003,1002,1048,991,989,976],
[1032,1066,997,1018,1018,1028,998,0,1005,1114,1049,994,1016],
[942,1032,971,998,938,977,999,996,0,1034,991,973,1045],
[971,1000,955,987,914,971,953,887,967,0,923,954,965],
[1020,1036,983,1000,978,991,1010,952,1010,1078,0,1005,1053],
[1051,1033,1025,1009,988,994,1012,1007,1028,1047,996,0,1024],
[972,1039,963,1006,962,955,1025,985,956,1036,948,977,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 100, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,976,1014,972,967,989,966,976,1006,971,1000,989,969],
[1025,0,1004,944,955,984,976,986,969,935,990,956,1005],
[987,997,0,990,980,984,994,992,972,969,1020,1002,1018],
[1029,1057,1011,0,1014,996,1020,1018,1016,1014,1043,1026,995],
[1034,1046,1021,987,0,990,996,1008,1038,977,1046,1014,1010],
[1012,1017,1017,1005,1011,0,1000,1032,1024,987,1035,1023,1009],
[1035,1025,1007,981,1005,1001,0,1010,1018,979,1031,994,1026],
[1025,1015,1009,983,993,969,991,0,1001,959,1018,988,997],
[995,1032,1029,985,963,977,983,1000,0,969,1028,1018,991],
[1030,1066,1032,987,1024,1014,1022,1042,1032,0,1055,1029,1020],
[1001,1011,981,958,955,966,970,983,973,946,0,987,1000],
[1012,1045,999,975,987,978,1007,1013,983,972,1014,0,1005],
[1032,996,983,1006,991,992,975,1004,1010,981,1001,996,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 101, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,964,1070,1053,1034,1004,1019,986,1093,1004,1075,995,1055],
[1037,0,1082,997,1123,949,1012,1035,1064,997,1072,1015,1048],
[931,919,0,957,949,846,927,904,1053,950,1001,953,936],
[948,1004,1044,0,967,1003,1008,926,1035,994,1058,1009,1067],
[967,878,1052,1034,0,885,941,996,994,976,1007,925,978],
[997,1052,1155,998,1116,0,1010,1008,1069,1076,1062,1051,1033],
[982,989,1074,993,1060,991,0,978,1054,1024,1097,1026,1044],
[1015,966,1097,1075,1005,993,1023,0,1034,1040,1094,1059,994],
[908,937,948,966,1007,932,947,967,0,973,1026,924,974],
[997,1004,1051,1007,1025,925,977,961,1028,0,1057,962,990],
[926,929,1000,943,994,939,904,907,975,944,0,987,974],
[1006,986,1048,992,1076,950,975,942,1077,1039,1014,0,957],
[946,953,1065,934,1023,968,957,1007,1027,1011,1027,1044,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 102, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1041,1123,1043,985,1010,1048,978,1067,962,977,1045,1008],
[960,0,1005,1028,1031,1044,1055,999,1005,1032,1015,1018,1007],
[878,996,0,1002,993,981,1056,966,1002,995,1047,993,992],
[958,973,999,0,1031,1019,1000,1024,1030,991,996,1014,1044],
[1016,970,1008,970,0,1020,978,997,1024,970,1005,1003,983],
[991,957,1020,982,981,0,991,973,944,986,968,948,978],
[953,946,945,1001,1023,1010,0,935,943,966,911,944,936],
[1023,1002,1035,977,1004,1028,1066,0,1035,1010,1032,1043,997],
[934,996,999,971,977,1057,1058,966,0,988,1023,1006,995],
[1039,969,1006,1010,1031,1015,1035,991,1013,0,990,973,983],
[1024,986,954,1005,996,1033,1090,969,978,1011,0,981,976],
[956,983,1008,987,998,1053,1057,958,995,1028,1020,0,1030],
[993,994,1009,957,1018,1023,1065,1004,1006,1018,1025,971,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 103, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,891,1023,949,895,1045,1012,979,910,1011,951,1056,978],
[1110,0,1056,1099,1027,1088,1096,1034,1063,1077,985,1135,996],
[978,945,0,1040,950,1063,1044,987,1014,1081,1048,997,1041],
[1052,902,961,0,975,1057,986,982,995,974,996,1040,1000],
[1106,974,1051,1026,0,1048,995,1067,989,1049,974,1078,1049],
[956,913,938,944,953,0,886,1004,982,947,963,967,941],
[989,905,957,1015,1006,1115,0,1022,976,1039,1007,1008,970],
[1022,967,1014,1019,934,997,979,0,941,1022,965,970,1044],
[1091,938,987,1006,1012,1019,1025,1060,0,1031,991,1019,999],
[990,924,920,1027,952,1054,962,979,970,0,903,1058,1013],
[1050,1016,953,1005,1027,1038,994,1036,1010,1098,0,1047,1018],
[945,866,1004,961,923,1034,993,1031,982,943,954,0,987],
[1023,1005,960,1001,952,1060,1031,957,1002,988,983,1014,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 104, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,999,947,950,1003,971,981,972,1006,940,984,987,1021],
[1002,0,975,987,1004,1031,983,997,1084,986,988,1068,1050],
[1054,1026,0,1009,1013,1030,1058,1043,1078,975,1095,1040,1066],
[1051,1014,992,0,1055,1020,1031,1037,1039,1007,1028,1028,1027],
[998,997,988,946,0,1008,987,967,1077,976,1066,1009,995],
[1030,970,971,981,993,0,1048,959,1017,906,980,1003,984],
[1020,1018,943,970,1014,953,0,981,1058,963,953,1004,1012],
[1029,1004,958,964,1034,1042,1020,0,1018,975,1032,1082,1052],
[995,917,923,962,924,984,943,983,0,897,958,1017,919],
[1061,1015,1026,994,1025,1095,1038,1026,1104,0,1069,1039,1049],
[1017,1013,906,973,935,1021,1048,969,1043,932,0,1050,1020],
[1014,933,961,973,992,998,997,919,984,962,951,0,1004],
[980,951,935,974,1006,1017,989,949,1082,952,981,997,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 105, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,990,1013,991,1006,1002,1004,1025,1017,989,979,991,1013],
[1011,0,1019,984,1019,987,1020,1011,995,1002,983,1001,997],
[988,982,0,1002,1008,962,1000,1014,1028,1008,981,977,983],
[1010,1017,999,0,1029,984,1006,1022,1022,1012,1006,1009,1016],
[995,982,993,972,0,981,1005,982,1016,996,962,979,976],
[999,1014,1039,1017,1020,0,1028,987,1021,1025,991,1018,1007],
[997,981,1001,995,996,973,0,1004,997,990,959,987,999],
[976,990,987,979,1019,1014,997,0,1014,1005,972,963,980],
[984,1006,973,979,985,980,1004,987,0,976,964,979,964],
[1012,999,993,989,1005,976,1011,996,1025,0,967,1017,1008],
[1022,1018,1020,995,1039,1010,1042,1029,1037,1034,0,983,1020],
[1010,1000,1024,992,1022,983,1014,1038,1022,984,1018,0,1012],
[988,1004,1018,985,1025,994,1002,1021,1037,993,981,989,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 106, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,954,894,887,1034,958,1000,966,907,951,943,874,911],
[1047,0,942,917,1025,1005,1080,975,968,982,960,926,934],
[1107,1059,0,967,1082,1132,1070,1032,1048,1048,993,1026,1047],
[1114,1084,1034,0,1065,1060,1122,1029,1035,1062,962,1094,983],
[967,976,919,936,0,982,1049,1006,906,969,906,902,897],
[1043,996,869,941,1019,0,1024,1019,1065,981,908,938,998],
[1001,921,931,879,952,977,0,1014,959,952,888,871,946],
[1035,1026,969,972,995,982,987,0,920,992,919,962,1002],
[1094,1033,953,966,1095,936,1042,1081,0,1066,951,1001,972],
[1050,1019,953,939,1032,1020,1049,1009,935,0,922,925,947],
[1058,1041,1008,1039,1095,1093,1113,1082,1050,1079,0,981,1051],
[1127,1075,975,907,1099,1063,1130,1039,1000,1076,1020,0,1028],
[1090,1067,954,1018,1104,1003,1055,999,1029,1054,950,973,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 107, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,995,989,1003,1002,1009,1009,1028,1007,961,969,982,995],
[1006,0,1019,999,1026,1033,1022,1042,987,1004,994,1030,1017],
[1012,982,0,1004,1012,1032,984,1030,961,966,977,1002,1007],
[998,1002,997,0,1042,1021,1020,1015,1010,996,992,1039,1029],
[999,975,989,959,0,1033,1004,1022,961,973,970,1006,998],
[992,968,969,980,968,0,977,1008,952,958,949,1003,991],
[992,979,1017,981,997,1024,0,1031,1013,993,980,1001,1038],
[973,959,971,986,979,993,970,0,949,963,965,1009,968],
[994,1014,1040,991,1040,1049,988,1052,0,972,981,1020,1035],
[1040,997,1035,1005,1028,1043,1008,1038,1029,0,1004,1054,1039],
[1032,1007,1024,1009,1031,1052,1021,1036,1020,997,0,1042,1035],
[1019,971,999,962,995,998,1000,992,981,947,959,0,986],
[1006,984,994,972,1003,1010,963,1033,966,962,966,1015,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 108, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1006,1002,987,986,983,983,1005,968,1008,1009,998,992],
[995,0,1010,987,974,985,996,995,964,985,988,999,994],
[999,991,0,1010,970,1006,987,995,978,969,977,1027,994],
[1014,1014,991,0,974,973,1012,971,965,1005,993,1001,1023],
[1015,1027,1031,1027,0,1022,1034,993,988,986,1026,1016,1029],
[1018,1016,995,1028,979,0,1002,1006,979,980,1023,1028,993],
[1018,1005,1014,989,967,999,0,999,975,972,977,1016,1022],
[996,1006,1006,1030,1008,995,1002,0,962,1005,1034,1031,989],
[1033,1037,1023,1036,1013,1022,1026,1039,0,1003,992,1031,1033],
[993,1016,1032,996,1015,1021,1029,996,998,0,995,1008,1001],
[992,1013,1024,1008,975,978,1024,967,1009,1006,0,1020,1013],
[1003,1002,974,1000,985,973,985,970,970,993,981,0,992],
[1009,1007,1007,978,972,1008,979,1012,968,1000,988,1009,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 109, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,989,919,1020,923,972,936,963,934,1000,948,973,1007],
[1012,0,983,1018,924,1006,928,982,979,988,953,978,1018],
[1082,1018,0,1065,982,1004,998,1020,1022,1012,968,1013,1067],
[981,983,936,0,927,1015,926,993,948,969,933,961,996],
[1078,1077,1019,1074,0,1027,990,1034,1008,1047,1011,1027,1058],
[1029,995,997,986,974,0,976,991,990,1021,1008,964,1011],
[1065,1073,1003,1075,1011,1025,0,1041,1023,1045,1026,995,1055],
[1038,1019,981,1008,967,1010,960,0,1002,1000,989,956,1003],
[1067,1022,979,1053,993,1011,978,999,0,987,987,1006,1032],
[1001,1013,989,1032,954,980,956,1001,1014,0,986,994,999],
[1053,1048,1033,1068,990,993,975,1012,1014,1015,0,1049,1081],
[1028,1023,988,1040,974,1037,1006,1045,995,1007,952,0,1006],
[994,983,934,1005,943,990,946,998,969,1002,920,995,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 110, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,975,987,1007,1036,1025,1003,1024,1011,1025,1030,1011,1031],
[1026,0,992,1014,1060,1025,1035,1019,1071,1039,1015,998,1060],
[1014,1009,0,986,1024,1049,1041,1057,1008,1030,1002,998,1048],
[994,987,1015,0,1027,1049,1012,1010,1033,1028,1035,1019,1052],
[965,941,977,974,0,1004,982,1001,974,984,970,987,996],
[976,976,952,952,997,0,988,1016,958,973,983,961,1013],
[998,966,960,989,1019,1013,0,1016,1019,1015,991,973,1031],
[977,982,944,991,1000,985,985,0,983,972,979,972,1007],
[990,930,993,968,1027,1043,982,1018,0,1043,1005,1004,1015],
[976,962,971,973,1017,1028,986,1029,958,0,979,993,1012],
[971,986,999,966,1031,1018,1010,1022,996,1022,0,1004,1027],
[990,1003,1003,982,1014,1040,1028,1029,997,1008,997,0,1026],
[970,941,953,949,1005,988,970,994,986,989,974,975,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 111, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1007,1095,1013,1000,1063,1041,1008,985,988,993,1056,1038],
[994,0,1064,974,1019,950,961,941,970,1019,914,938,980],
[906,937,0,972,1051,1092,955,963,938,1040,920,977,1016],
[988,1027,1029,0,1029,1073,1021,1005,1047,1058,960,1061,1018],
[1001,982,950,972,0,995,1016,981,966,1027,965,937,959],
[938,1051,909,928,1006,0,941,987,964,1026,918,1006,1000],
[960,1040,1046,980,985,1060,0,981,948,1041,964,1022,1041],
[993,1060,1038,996,1020,1014,1020,0,961,1042,1006,1014,984],
[1016,1031,1063,954,1035,1037,1053,1040,0,1045,962,987,1008],
[1013,982,961,943,974,975,960,959,956,0,969,980,946],
[1008,1087,1081,1041,1036,1083,1037,995,1039,1032,0,1076,964],
[945,1063,1024,940,1064,995,979,987,1014,1021,925,0,1011],
[963,1021,985,983,1042,1001,960,1017,993,1055,1037,990,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 112, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1028,1015,1043,998,1024,1010,1047,941,1053,1053,980,1037],
[973,0,966,981,991,1030,974,952,1064,904,1015,957,976],
[986,1035,0,988,967,1028,1002,969,1014,942,960,927,1025],
[958,1020,1013,0,1021,1066,975,948,1049,1017,981,947,992],
[1003,1010,1034,980,0,1076,915,1009,1041,964,1048,960,1021],
[977,971,973,935,925,0,883,995,944,961,874,875,910],
[991,1027,999,1026,1086,1118,0,1056,1047,1089,1094,1024,1094],
[954,1049,1032,1053,992,1006,945,0,1046,957,1036,926,1041],
[1060,937,987,952,960,1057,954,955,0,957,996,935,1016],
[948,1097,1059,984,1037,1040,912,1044,1044,0,1016,1006,1056],
[948,986,1041,1020,953,1127,907,965,1005,985,0,971,1005],
[1021,1044,1074,1054,1041,1126,977,1075,1066,995,1030,0,960],
[964,1025,976,1009,980,1091,907,960,985,945,996,1041,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 113, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,992,1030,994,1070,1068,1042,1001,974,1084,1042,1045,1022],
[1009,0,980,997,1066,1069,1031,998,1044,1071,1007,1011,980],
[971,1021,0,958,1028,1086,1056,990,1038,1005,1047,1029,959],
[1007,1004,1043,0,1050,1091,1038,1042,1053,1060,1070,1069,992],
[931,935,973,951,0,993,952,917,1016,1021,1028,950,951],
[933,932,915,910,1008,0,1008,945,957,926,986,998,892],
[959,970,945,963,1049,993,0,973,928,1018,1010,996,990],
[1000,1003,1011,959,1084,1056,1028,0,1020,1013,1112,1011,1032],
[1027,957,963,948,985,1044,1073,981,0,1010,989,1041,965],
[917,930,996,941,980,1075,983,988,991,0,1000,1040,962],
[959,994,954,931,973,1015,991,889,1012,1001,0,1022,997],
[956,990,972,932,1051,1003,1005,990,960,961,979,0,1018],
[979,1021,1042,1009,1050,1109,1011,969,1036,1039,1004,983,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 114, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,985,1034,1092,1025,1027,1035,1001,969,968,1078,987,975],
[1016,0,984,1015,1036,1018,978,1042,1012,985,1095,979,990],
[967,1017,0,1036,995,1029,1062,1025,1001,1011,1038,1017,1017],
[909,986,965,0,994,1015,999,992,965,956,979,948,1043],
[976,965,1006,1007,0,1003,1043,983,987,960,1010,979,999],
[974,983,972,986,998,0,1036,1013,999,976,1034,945,1010],
[966,1023,939,1002,958,965,0,989,946,942,1003,980,975],
[1000,959,976,1009,1018,988,1012,0,997,953,1009,948,998],
[1032,989,1000,1036,1014,1002,1055,1004,0,1003,1055,993,980],
[1033,1016,990,1045,1041,1025,1059,1048,998,0,1050,1036,996],
[923,906,963,1022,991,967,998,992,946,951,0,969,971],
[1014,1022,984,1053,1022,1056,1021,1053,1008,965,1032,0,1011],
[1026,1011,984,958,1002,991,1026,1003,1021,1005,1030,990,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 115, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1008,924,1043,996,1054,1027,1011,1097,961,1004,996,1020],
[993,0,879,960,975,1031,982,970,959,919,1044,968,977],
[1077,1122,0,1127,1045,1107,1103,1086,1113,1039,1094,992,1051],
[958,1041,874,0,1012,1024,998,1039,1026,966,1031,931,1014],
[1005,1026,956,989,0,1001,1053,1028,1011,955,1049,1023,1060],
[947,970,894,977,1000,0,1028,945,1013,985,946,943,1013],
[974,1019,898,1003,948,973,0,1015,1026,994,957,933,1041],
[990,1031,915,962,973,1056,986,0,996,996,1019,964,983],
[904,1042,888,975,990,988,975,1005,0,878,968,920,1049],
[1040,1082,962,1035,1046,1016,1007,1005,1123,0,1123,1064,1062],
[997,957,907,970,952,1055,1044,982,1033,878,0,928,985],
[1005,1033,1009,1070,978,1058,1068,1037,1081,937,1073,0,1037],
[981,1024,950,987,941,988,960,1018,952,939,1016,964,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 116, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1009,979,1027,1013,1018,972,921,995,1010,926,1027,956],
[992,0,972,1065,996,1057,956,962,1107,998,975,1032,994],
[1022,1029,0,1049,1039,976,985,1035,1057,964,1027,1054,936],
[974,936,952,0,967,1013,953,965,959,893,986,951,963],
[988,1005,962,1034,0,1033,906,1004,1020,985,1008,1010,1023],
[983,944,1025,988,968,0,954,930,995,1012,1000,1043,982],
[1029,1045,1016,1048,1095,1047,0,1046,1018,1012,1030,1059,992],
[1080,1039,966,1036,997,1071,955,0,1071,1015,1024,1038,982],
[1006,894,944,1042,981,1006,983,930,0,968,965,947,957],
[991,1003,1037,1108,1016,989,989,986,1033,0,1066,1017,1024],
[1075,1026,974,1015,993,1001,971,977,1036,935,0,980,998],
[974,969,947,1050,991,958,942,963,1054,984,1021,0,1006],
[1045,1007,1065,1038,978,1019,1009,1019,1044,977,1003,995,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 117, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,929,985,879,869,924,905,939,859,886,870,912,866],
[1072,0,1100,977,973,1026,963,1038,1010,940,940,982,994],
[1016,901,0,861,860,882,900,885,845,804,836,889,863],
[1122,1024,1140,0,992,1108,1024,1092,979,979,983,1156,1007],
[1132,1028,1141,1009,0,1092,1004,1071,976,1001,947,1027,948],
[1077,975,1119,893,909,0,993,1013,949,944,860,941,945],
[1096,1038,1101,977,997,1008,0,986,859,937,967,1052,1053],
[1062,963,1116,909,930,988,1015,0,944,868,996,962,983],
[1142,991,1156,1022,1025,1052,1142,1057,0,1023,1058,1021,970],
[1115,1061,1197,1022,1000,1057,1064,1133,978,0,1019,1037,1034],
[1131,1061,1165,1018,1054,1141,1034,1005,943,982,0,1067,974],
[1089,1019,1112,845,974,1060,949,1039,980,964,934,0,920],
[1135,1007,1138,994,1053,1056,948,1018,1031,967,1027,1081,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 118, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1033,1007,1028,1031,1020,1021,1015,988,1005,1049,1067,1055],
[968,0,985,995,998,999,989,982,953,980,982,1025,1017],
[994,1016,0,1006,1037,1024,1033,973,993,1017,1058,1049,1003],
[973,1006,995,0,1005,1012,1024,1000,972,985,1027,1017,994],
[970,1003,964,996,0,1009,998,998,977,1004,1029,1018,1029],
[981,1002,977,989,992,0,996,993,978,987,1010,1029,1019],
[980,1012,968,977,1003,1005,0,994,958,982,1005,999,1002],
[986,1019,1028,1001,1003,1008,1007,0,1002,1010,1004,1016,1030],
[1013,1048,1008,1029,1024,1023,1043,999,0,1004,1023,1042,1032],
[996,1021,984,1016,997,1014,1019,991,997,0,996,1006,1019],
[952,1019,943,974,972,991,996,997,978,1005,0,1006,971],
[934,976,952,984,983,972,1002,985,959,995,995,0,991],
[946,984,998,1007,972,982,999,971,969,982,1030,1010,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 119, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1039,991,996,1009,1013,1027,1014,1005,1015,1016,1023,1033],
[962,0,961,962,989,1001,1002,957,961,949,1007,984,967],
[1010,1040,0,994,1020,1025,1019,1009,971,998,1016,1018,1020],
[1005,1039,1007,0,1035,1031,1019,999,991,1018,1016,1012,1015],
[992,1012,981,966,0,1036,1017,977,1002,1039,1024,1005,1031],
[988,1000,976,970,965,0,988,984,961,1002,958,976,994],
[974,999,982,982,984,1013,0,975,978,959,999,971,1007],
[987,1044,992,1002,1024,1017,1026,0,992,1001,1007,1039,1023],
[996,1040,1030,1010,999,1040,1023,1009,0,1002,1020,1064,1031],
[986,1052,1003,983,962,999,1042,1000,999,0,1033,988,999],
[985,994,985,985,977,1043,1002,994,981,968,0,984,1006],
[978,1017,983,989,996,1025,1030,962,937,1013,1017,0,994],
[968,1034,981,986,970,1007,994,978,970,1002,995,1007,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 120, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,971,964,959,1007,994,977,1024,978,1021,986,980,1015],
[1030,0,1009,981,1016,1022,1026,1013,1018,1009,1049,980,999],
[1037,992,0,1019,1023,1022,1000,1025,1016,1035,1007,1017,1036],
[1042,1020,982,0,994,1005,976,990,999,1037,972,1005,972],
[994,985,978,1007,0,1006,1002,1009,943,1022,977,985,1023],
[1007,979,979,996,995,0,1001,997,979,1007,991,971,1000],
[1024,975,1001,1025,999,1000,0,1050,1003,1058,1026,991,1006],
[977,988,976,1011,992,1004,951,0,982,1015,1001,951,1002],
[1023,983,985,1002,1058,1022,998,1019,0,1020,976,984,1002],
[980,992,966,964,979,994,943,986,981,0,1001,950,981],
[1015,952,994,1029,1024,1010,975,1000,1025,1000,0,980,1038],
[1021,1021,984,996,1016,1030,1010,1050,1017,1051,1021,0,1014],
[986,1002,965,1029,978,1001,995,999,999,1020,963,987,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 121, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,957,983,969,971,1012,1021,1016,993,979,964,951,972],
[1044,0,964,1000,1023,1049,1031,1016,1004,1025,1025,958,1002],
[1018,1037,0,1032,1000,1057,1041,1029,975,1007,1042,1025,1025],
[1032,1001,969,0,1017,1016,991,967,980,957,999,982,1005],
[1030,978,1001,984,0,1022,1022,966,1016,976,1036,974,960],
[989,952,944,985,979,0,992,942,959,1016,991,932,932],
[980,970,960,1010,979,1009,0,952,960,971,1017,971,1019],
[985,985,972,1034,1035,1059,1049,0,1023,980,1025,1033,1034],
[1008,997,1026,1021,985,1042,1041,978,0,998,973,971,1011],
[1022,976,994,1044,1025,985,1030,1021,1003,0,1049,1007,991],
[1037,976,959,1002,965,1010,984,976,1028,952,0,966,979],
[1050,1043,976,1019,1027,1069,1030,968,1030,994,1035,0,1017],
[1029,999,976,996,1041,1069,982,967,990,1010,1022,984,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 122, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1015,1041,1031,1018,986,1030,1029,1023,1033,1015,1001,993],
[986,0,1001,991,984,971,1003,1011,978,1026,1005,985,977],
[960,1000,0,986,1000,958,980,1001,997,1001,983,986,968],
[970,1010,1015,0,978,977,984,1025,1000,1000,982,1009,1002],
[983,1017,1001,1023,0,997,1004,1010,987,1017,1014,1024,1015],
[1015,1030,1043,1024,1004,0,998,1048,1027,1027,1001,1029,1021],
[971,998,1021,1017,997,1003,0,997,1015,1003,1001,1022,982],
[972,990,1000,976,991,953,1004,0,972,1010,980,990,985],
[978,1023,1004,1001,1014,974,986,1029,0,1013,975,1023,990],
[968,975,1000,1001,984,974,998,991,988,0,978,977,987],
[986,996,1018,1019,987,1000,1000,1021,1026,1023,0,1017,997],
[1000,1016,1015,992,977,972,979,1011,978,1024,984,0,996],
[1008,1024,1033,999,986,980,1019,1016,1011,1014,1004,1005,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 123, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,984,1001,1005,1025,1009,999,997,1044,1008,996,980,980],
[1017,0,994,1028,1036,1031,1011,1037,1070,1007,1012,1020,1005],
[1000,1007,0,1018,1005,1016,987,1001,1047,995,1022,1004,1001],
[996,973,983,0,1023,1011,981,1039,1022,1002,1025,967,989],
[976,965,996,978,0,1003,1007,1004,1024,981,985,986,986],
[992,970,985,990,998,0,992,994,1038,1000,979,991,980],
[1002,990,1014,1020,994,1009,0,1008,1049,1011,1008,989,991],
[1004,964,1000,962,997,1007,993,0,1028,977,974,999,968],
[957,931,954,979,977,963,952,973,0,976,991,975,980],
[993,994,1006,999,1020,1001,990,1024,1025,0,1006,979,998],
[1005,989,979,976,1016,1022,993,1027,1010,995,0,1000,989],
[1021,981,997,1034,1015,1010,1012,1002,1026,1022,1001,0,1003],
[1021,996,1000,1012,1015,1021,1010,1033,1021,1003,1012,998,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 124, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1024,1020,1041,1023,994,991,982,1014,959,1000,1013,1001],
[977,0,1028,980,987,988,969,997,888,976,996,1013,1014],
[981,973,0,963,1006,991,994,981,967,962,989,996,997],
[960,1021,1038,0,1015,1033,1001,1022,980,959,1010,1029,1007],
[978,1014,995,986,0,975,923,964,968,960,946,978,1004],
[1007,1013,1010,968,1026,0,957,995,973,1011,976,991,978],
[1010,1032,1007,1000,1078,1044,0,1009,967,1004,1048,1029,1068],
[1019,1004,1020,979,1037,1006,992,0,962,983,1005,1049,1029],
[987,1113,1034,1021,1033,1028,1034,1039,0,1011,995,1042,1065],
[1042,1025,1039,1042,1041,990,997,1018,990,0,1007,1058,1017],
[1001,1005,1012,991,1055,1025,953,996,1006,994,0,1034,1044],
[988,988,1005,972,1023,1010,972,952,959,943,967,0,994],
[1000,987,1004,994,997,1023,933,972,936,984,957,1007,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 125, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,999,999,1040,1104,1055,1098,993,1078,1083,1032,1065,983],
[1002,0,980,1012,1064,1007,1017,1015,1030,1045,1018,1011,1004],
[1002,1021,0,1045,1094,1033,1051,1020,1052,1051,1069,1026,977],
[961,989,956,0,1030,976,1035,996,967,1045,965,989,995],
[897,937,907,971,0,959,1023,978,973,966,943,1006,914],
[946,994,968,1025,1042,0,1044,1012,987,1042,978,1001,1009],
[903,984,950,966,978,957,0,973,988,1034,919,982,915],
[1008,986,981,1005,1023,989,1028,0,1021,1048,966,1028,932],
[923,971,949,1034,1028,1014,1013,980,0,1037,983,1013,953],
[918,956,950,956,1035,959,967,953,964,0,986,1018,946],
[969,983,932,1036,1058,1023,1082,1035,1018,1015,0,1050,1049],
[936,990,975,1012,995,1000,1019,973,988,983,951,0,935],
[1018,997,1024,1006,1087,992,1086,1069,1048,1055,952,1066,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 126, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1012,974,1005,1014,1035,996,982,993,985,1026,1008,1016],
[989,0,992,1003,1009,1034,1021,1004,995,1023,981,1006,996],
[1027,1009,0,1018,1036,1031,1008,1024,992,1026,1004,1015,1030],
[996,998,983,0,1019,1034,1006,992,1000,1007,993,1015,996],
[987,992,965,982,0,990,1004,1000,1002,994,999,1019,979],
[966,967,970,967,1011,0,974,1004,998,982,979,959,967],
[1005,980,993,995,997,1027,0,984,972,996,980,984,1016],
[1019,997,977,1009,1001,997,1017,0,990,1017,990,984,1021],
[1008,1006,1009,1001,999,1003,1029,1011,0,998,1015,1019,980],
[1016,978,975,994,1007,1019,1005,984,1003,0,1001,985,991],
[975,1020,997,1008,1002,1022,1021,1011,986,1000,0,995,985],
[993,995,986,986,982,1042,1017,1017,982,1016,1006,0,1005],
[985,1005,971,1005,1022,1034,985,980,1021,1010,1016,996,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 127, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1007,997,1005,1005,1056,1063,1037,1054,1053,1058,1035,1046],
[994,0,991,974,1001,1036,1027,1014,1020,1034,1027,1024,1030],
[1004,1010,0,1021,994,1068,1044,1012,1049,1030,1022,1063,1028],
[996,1027,980,0,990,1046,1045,1036,1066,1039,997,1069,1033],
[996,1000,1007,1011,0,1047,1020,1036,1037,1030,1037,1031,1046],
[945,965,933,955,954,0,1022,987,1006,1024,1003,1031,1002],
[938,974,957,956,981,979,0,957,983,1010,953,1007,1009],
[964,987,989,965,965,1014,1044,0,1041,1015,1012,1052,1038],
[947,981,952,935,964,995,1018,960,0,1002,986,1023,980],
[948,967,971,962,971,977,991,986,999,0,1001,999,990],
[943,974,979,1004,964,998,1048,989,1015,1000,0,1040,1027],
[966,977,938,932,970,970,994,949,978,1002,961,0,979],
[955,971,973,968,955,999,992,963,1021,1011,974,1022,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 128, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1058,988,915,1059,942,942,984,913,966,947,924,951],
[943,0,939,924,1034,942,963,985,940,976,938,893,937],
[1013,1062,0,951,1021,985,936,1040,981,1024,989,977,1038],
[1086,1077,1050,0,1038,994,1020,1043,997,1062,1029,1022,995],
[942,967,980,963,0,959,908,966,963,1012,936,890,949],
[1059,1059,1016,1007,1042,0,1016,1068,1029,1054,1063,982,995],
[1059,1038,1065,981,1093,985,0,1038,1011,1001,1027,985,1019],
[1017,1016,961,958,1035,933,963,0,969,969,1039,967,983],
[1088,1061,1020,1004,1038,972,990,1032,0,1042,1051,935,988],
[1035,1025,977,939,989,947,1000,1032,959,0,991,964,978],
[1054,1063,1012,972,1065,938,974,962,950,1010,0,918,996],
[1077,1108,1024,979,1111,1019,1016,1034,1066,1037,1083,0,1063],
[1050,1064,963,1006,1052,1006,982,1018,1013,1023,1005,938,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 129, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,914,1003,917,975,889,870,958,936,996,932,924,894],
[1087,0,1052,964,1070,964,987,1088,1072,980,1032,1068,979],
[998,949,0,895,981,880,929,953,942,905,958,949,912],
[1084,1037,1106,0,1031,1023,946,1029,1020,1076,1082,1070,977],
[1026,931,1020,970,0,922,888,948,970,979,1001,952,905],
[1112,1037,1121,978,1079,0,1011,1033,1028,1039,1016,985,1033],
[1131,1014,1072,1055,1113,990,0,1064,1095,1018,1085,1040,1034],
[1043,913,1048,972,1053,968,937,0,1012,992,1009,994,942],
[1065,929,1059,981,1031,973,906,989,0,1019,1008,990,940],
[1005,1021,1096,925,1022,962,983,1009,982,0,1055,991,994],
[1069,969,1043,919,1000,985,916,992,993,946,0,1025,939],
[1077,933,1052,931,1049,1016,961,1007,1011,1010,976,0,962],
[1107,1022,1089,1024,1096,968,967,1059,1061,1007,1062,1039,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 130, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,866,887,944,888,952,967,931,849,997,919,948,885],
[1135,0,1008,1103,1022,990,1078,983,1003,1073,969,1011,971],
[1114,993,0,1017,1035,1006,1056,1033,1001,1039,969,967,1011],
[1057,898,984,0,912,965,1031,921,915,934,926,946,939],
[1113,979,966,1089,0,1053,1066,1009,1016,1092,1004,966,976],
[1049,1011,995,1036,948,0,1063,991,1010,941,996,1018,945],
[1034,923,945,970,935,938,0,968,927,924,955,967,937],
[1070,1018,968,1080,992,1010,1033,0,1010,1069,972,1056,1043],
[1152,998,1000,1086,985,991,1074,991,0,1053,992,1025,1061],
[1004,928,962,1067,909,1060,1077,932,948,0,974,1035,983],
[1082,1032,1032,1075,997,1005,1046,1029,1009,1027,0,1027,1061],
[1053,990,1034,1055,1035,983,1034,945,976,966,974,0,988],
[1116,1030,990,1062,1025,1056,1064,958,940,1018,940,1013,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 131, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1006,989,1020,1022,999,1010,1025,1005,996,1020,1003,1020],
[995,0,990,999,979,1003,983,1002,970,1008,994,1007,1011],
[1012,1011,0,1001,996,989,994,1006,1010,984,1010,986,1015],
[981,1002,1000,0,1011,984,1012,998,1007,996,1008,1004,988],
[979,1022,1005,990,0,996,1015,986,995,997,986,1003,1031],
[1002,998,1012,1017,1005,0,999,1001,1018,1022,1015,1004,1027],
[991,1018,1007,989,986,1002,0,982,1012,1000,1006,1032,1007],
[976,999,995,1003,1015,1000,1019,0,1002,995,995,1007,1017],
[996,1031,991,994,1006,983,989,999,0,966,997,1001,1003],
[1005,993,1017,1005,1004,979,1001,1006,1035,0,976,973,1039],
[981,1007,991,993,1015,986,995,1006,1004,1025,0,1023,1052],
[998,994,1015,997,998,997,969,994,1000,1028,978,0,991],
[981,990,986,1013,970,974,994,984,998,962,949,1010,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 132, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1031,1017,978,1006,1017,1004,996,1033,1009,992,1028,1014],
[970,0,970,972,988,995,977,975,986,975,977,1009,952],
[984,1031,0,1000,1010,1006,1027,1020,1032,979,985,1014,998],
[1023,1029,1001,0,990,1012,1024,1009,1030,1014,1021,1040,1009],
[995,1013,991,1011,0,1024,1006,1029,1001,1042,995,1035,976],
[984,1006,995,989,977,0,999,1018,1000,992,993,992,976],
[997,1024,974,977,995,1002,0,1045,1003,992,993,1006,996],
[1005,1026,981,992,972,983,956,0,1013,968,961,1005,969],
[968,1015,969,971,1000,1001,998,988,0,961,982,995,978],
[992,1026,1022,987,959,1009,1009,1033,1040,0,1000,1041,993],
[1009,1024,1016,980,1006,1008,1008,1040,1019,1001,0,1025,983],
[973,992,987,961,966,1009,995,996,1006,960,976,0,961],
[987,1049,1003,992,1025,1025,1005,1032,1023,1008,1018,1040,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 133, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1014,967,987,1020,1020,1093,980,1018,1016,1066,993,1013],
[987,0,968,1011,982,972,986,1005,978,953,1053,1012,987],
[1034,1033,0,1034,1108,1045,1048,1006,1023,993,1030,1053,1032],
[1014,990,967,0,1008,1042,1072,990,970,960,978,1064,998],
[981,1019,893,993,0,960,1041,978,1000,972,1025,1029,976],
[981,1029,956,959,1041,0,1005,966,992,990,986,971,991],
[908,1015,953,929,960,996,0,959,970,934,1021,975,932],
[1021,996,995,1011,1023,1035,1042,0,1027,980,1012,1037,1009],
[983,1023,978,1031,1001,1009,1031,974,0,958,990,1002,960],
[985,1048,1008,1041,1029,1011,1067,1021,1043,0,1088,1047,1033],
[935,948,971,1023,976,1015,980,989,1011,913,0,985,1003],
[1008,989,948,937,972,1030,1026,964,999,954,1016,0,954],
[988,1014,969,1003,1025,1010,1069,992,1041,968,998,1047,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 134, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1055,1009,980,1001,980,985,1022,1007,1027,1015,1012,1019],
[946,0,965,947,938,963,936,983,972,949,989,986,956],
[992,1036,0,984,989,984,996,1000,1015,1046,1051,1005,990],
[1021,1054,1017,0,1018,1034,993,1054,1015,993,1032,1003,1022],
[1000,1063,1012,983,0,1014,997,1029,1022,1012,1037,1007,1026],
[1021,1038,1017,967,987,0,1015,1014,1046,1016,1039,1013,1041],
[1016,1065,1005,1008,1004,986,0,1001,1026,981,1033,1005,1024],
[979,1018,1001,947,972,987,1000,0,1016,1004,1015,981,993],
[994,1029,986,986,979,955,975,985,0,1014,999,989,985],
[974,1052,955,1008,989,985,1020,997,987,0,1006,1001,994],
[986,1012,950,969,964,962,968,986,1002,995,0,966,997],
[989,1015,996,998,994,988,996,1020,1012,1000,1035,0,1004],
[982,1045,1011,979,975,960,977,1008,1016,1007,1004,997,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 135, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,959,986,962,931,917,983,991,964,952,945,986,980],
[1042,0,1014,1039,974,1015,1069,971,1000,1012,1037,1052,1062],
[1015,987,0,987,963,954,999,995,1012,985,1006,1014,995],
[1039,962,1014,0,1019,937,1020,1017,992,968,1009,1009,1018],
[1070,1027,1038,982,0,1019,1020,1039,985,983,1018,1022,1050],
[1084,986,1047,1064,982,0,1057,1041,1015,1021,996,1046,1056],
[1018,932,1002,981,981,944,0,992,983,993,983,1001,1041],
[1010,1030,1006,984,962,960,1009,0,963,981,1032,1007,1027],
[1037,1001,989,1009,1016,986,1018,1038,0,989,1020,1000,1044],
[1049,989,1016,1033,1018,980,1008,1020,1012,0,1000,1015,1052],
[1056,964,995,992,983,1005,1018,969,981,1001,0,1031,1021],
[1015,949,987,992,979,955,1000,994,1001,986,970,0,1028],
[1021,939,1006,983,951,945,960,974,957,949,980,973,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 136, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,970,979,984,980,963,1015,1012,950,1014,997,1024,991],
[1031,0,1003,1054,1051,1023,1045,1043,983,1050,1007,1030,1023],
[1022,998,0,980,1023,1002,1020,1031,974,1029,1015,1073,1017],
[1017,947,1021,0,1008,972,994,977,970,1019,969,1037,1009],
[1021,950,978,993,0,996,987,1001,956,992,1015,1011,946],
[1038,978,999,1029,1005,0,1050,1010,1006,1031,970,1097,1006],
[986,956,981,1007,1014,951,0,1000,991,1041,989,1055,989],
[989,958,970,1024,1000,991,1001,0,982,1001,999,1050,996],
[1051,1018,1027,1031,1045,995,1010,1019,0,1055,1043,1059,994],
[987,951,972,982,1009,970,960,1000,946,0,991,1017,974],
[1004,994,986,1032,986,1031,1012,1002,958,1010,0,1059,988],
[977,971,928,964,990,904,946,951,942,984,942,0,965],
[1010,978,984,992,1055,995,1012,1005,1007,1027,1013,1036,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 137, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,999,997,1014,943,992,992,994,980,987,1002,1025,980],
[1002,0,1002,968,948,994,984,981,990,969,1005,1032,1004],
[1004,999,0,1021,969,1064,993,1028,1067,984,1060,1044,1014],
[987,1033,980,0,920,1039,984,978,1036,974,1055,998,1010],
[1058,1053,1032,1081,0,1091,1011,1021,1054,946,1035,1051,1014],
[1009,1007,937,962,910,0,973,984,1008,931,998,986,985],
[1009,1017,1008,1017,990,1028,0,978,1035,1005,1027,1031,1016],
[1007,1020,973,1023,980,1017,1023,0,1037,1002,1064,1048,987],
[1021,1011,934,965,947,993,966,964,0,967,1057,1031,994],
[1014,1032,1017,1027,1055,1070,996,999,1034,0,1041,1048,1034],
[999,996,941,946,966,1003,974,937,944,960,0,979,950],
[976,969,957,1003,950,1015,970,953,970,953,1022,0,960],
[1021,997,987,991,987,1016,985,1014,1007,967,1051,1041,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 138, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1009,1013,957,1029,1016,1026,1025,1033,1031,1008,1011,1029],
[992,0,1001,1003,1012,1006,1038,995,1029,1011,997,998,1000],
[988,1000,0,974,1016,967,1014,995,1026,1028,981,985,992],
[1044,998,1027,0,1024,1004,1017,993,1072,1016,1018,1013,992],
[972,989,985,977,0,987,1004,987,1026,998,990,978,988],
[985,995,1034,997,1014,0,1032,1019,1060,1033,1032,999,1010],
[975,963,987,984,997,969,0,984,1015,1018,957,981,983],
[976,1006,1006,1008,1014,982,1017,0,1057,1011,984,1011,988],
[968,972,975,929,975,941,986,944,0,990,960,949,983],
[970,990,973,985,1003,968,983,990,1011,0,972,986,959],
[993,1004,1020,983,1011,969,1044,1017,1041,1029,0,993,1026],
[990,1003,1016,988,1023,1002,1020,990,1052,1015,1008,0,1004],
[972,1001,1009,1009,1013,991,1018,1013,1018,1042,975,997,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 139, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,980,1000,1009,948,1016,987,1032,1016,1053,1030,996,976],
[1021,0,1052,988,1039,1052,953,1025,1073,1005,1062,1027,1026],
[1001,949,0,929,975,1046,977,1012,1009,1015,979,1094,964],
[992,1013,1072,0,980,1002,1036,1100,994,1048,994,1019,997],
[1053,962,1026,1021,0,1025,959,1070,1017,992,1007,1065,1024],
[985,949,955,999,976,0,1026,1065,995,1046,1035,1050,1034],
[1014,1048,1024,965,1042,975,0,986,1025,976,988,1047,1005],
[969,976,989,901,931,936,1015,0,974,988,975,986,938],
[985,928,992,1007,984,1006,976,1027,0,1017,1027,1050,987],
[948,996,986,953,1009,955,1025,1013,984,0,1015,1005,1000],
[971,939,1022,1007,994,966,1013,1026,974,986,0,993,978],
[1005,974,907,982,936,951,954,1015,951,996,1008,0,909],
[1025,975,1037,1004,977,967,996,1063,1014,1001,1023,1092,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 140, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,925,969,938,938,950,950,924,1014,965,929,975,955],
[1076,0,1072,1035,1022,1018,1033,988,1041,1036,1037,1051,1048],
[1032,929,0,995,924,963,965,973,981,962,982,1012,976],
[1063,966,1006,0,972,995,1007,1020,1036,1062,1029,1032,1007],
[1063,979,1077,1029,0,1041,1036,1055,1040,1066,1006,1077,1006],
[1051,983,1038,1006,960,0,1011,980,1007,1026,1010,1016,1023],
[1051,968,1036,994,965,990,0,1024,1054,1039,982,1000,994],
[1077,1013,1028,981,946,1021,977,0,1066,1002,996,1015,1003],
[987,960,1020,965,961,994,947,935,0,982,980,992,976],
[1036,965,1039,939,935,975,962,999,1019,0,1003,980,1022],
[1072,964,1019,972,995,991,1019,1005,1021,998,0,988,1022],
[1026,950,989,969,924,985,1001,986,1009,1021,1013,0,969],
[1046,953,1025,994,995,978,1007,998,1025,979,979,1032,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 141, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1013,987,980,1010,977,1032,1025,1001,1015,1004,992,984],
[988,0,986,964,1025,992,1039,979,1012,996,1015,991,1018],
[1014,1015,0,989,1032,1035,1058,1067,1065,1014,1017,1003,995],
[1021,1037,1012,0,1038,1000,1092,1046,1076,1057,1053,1012,1017],
[991,976,969,963,0,972,1011,1020,1021,1012,987,986,998],
[1024,1009,966,1001,1029,0,1079,1040,1039,1027,1011,988,971],
[969,962,943,909,990,922,0,991,1025,971,947,926,951],
[976,1022,934,955,981,961,1010,0,1000,970,1010,986,990],
[1000,989,936,925,980,962,976,1001,0,969,990,943,963],
[986,1005,987,944,989,974,1030,1031,1032,0,985,998,983],
[997,986,984,948,1014,990,1054,991,1011,1016,0,965,967],
[1009,1010,998,989,1015,1013,1075,1015,1058,1003,1036,0,1002],
[1017,983,1006,984,1003,1030,1050,1011,1038,1018,1034,999,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 142, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,991,995,1040,981,986,1020,961,1028,995,1012,1010,989],
[1010,0,1028,1016,1007,993,1028,1004,992,984,998,1015,1033],
[1006,973,0,1031,1025,1004,1001,980,988,1006,999,1027,997],
[961,985,970,0,964,958,1003,933,950,983,999,994,981],
[1020,994,976,1037,0,980,987,988,1020,986,1006,1010,1008],
[1015,1008,997,1043,1021,0,1045,964,1006,1013,1035,1021,1029],
[981,973,1000,998,1014,956,0,966,1015,996,1013,1003,969],
[1040,997,1021,1068,1013,1037,1035,0,1016,1000,1025,1001,1005],
[973,1009,1013,1051,981,995,986,985,0,985,982,1016,1017],
[1006,1017,995,1018,1015,988,1005,1001,1016,0,1029,1057,1027],
[989,1003,1002,1002,995,966,988,976,1019,972,0,969,976],
[991,986,974,1007,991,980,998,1000,985,944,1032,0,1005],
[1012,968,1004,1020,993,972,1032,996,984,974,1025,996,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 143, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,999,1027,1025,1065,1027,1048,1003,1025,1033,988,976,1058],
[1002,0,1023,991,1051,1057,1051,994,1001,1005,946,1006,1026],
[974,978,0,1004,1013,994,1030,963,971,951,945,971,1011],
[976,1010,997,0,1031,1024,1067,1002,977,982,971,985,1019],
[936,950,988,970,0,984,999,963,975,990,920,988,977],
[974,944,1007,977,1017,0,1023,1025,992,1009,977,971,999],
[953,950,971,934,1002,978,0,963,956,957,907,973,994],
[998,1007,1038,999,1038,976,1038,0,1006,1024,1012,1049,1015],
[976,1000,1030,1024,1026,1009,1045,995,0,1023,930,1006,1026],
[968,996,1050,1019,1011,992,1044,977,978,0,941,1012,1020],
[1013,1055,1056,1030,1081,1024,1094,989,1071,1060,0,1013,1072],
[1025,995,1030,1016,1013,1030,1028,952,995,989,988,0,1029],
[943,975,990,982,1024,1002,1007,986,975,981,929,972,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 144, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1087,1027,1021,1103,956,1031,984,1093,1147,1002,1036,1094],
[914,0,954,1069,1051,930,954,911,972,1020,944,996,969],
[974,1047,0,1050,1054,1015,980,965,932,1045,944,1014,1051],
[980,932,951,0,1036,964,967,1010,994,1044,961,1000,1038],
[898,950,947,965,0,947,935,875,949,1074,922,928,950],
[1045,1071,986,1037,1054,0,1022,963,1072,1048,1059,980,1088],
[970,1047,1021,1034,1066,979,0,964,936,1068,950,1018,1024],
[1017,1090,1036,991,1126,1038,1037,0,1033,1088,976,987,1100],
[908,1029,1069,1007,1052,929,1065,968,0,1069,987,977,1053],
[854,981,956,957,927,953,933,913,932,0,957,928,961],
[999,1057,1057,1040,1079,942,1051,1025,1014,1044,0,1023,1024],
[965,1005,987,1001,1073,1021,983,1014,1024,1073,978,0,1013],
[907,1032,950,963,1051,913,977,901,948,1040,977,988,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 145, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,987,1012,1069,1133,1134,1054,1042,1104,1033,979,1039,989],
[1014,0,946,1021,1059,1032,1035,976,1035,1046,961,1037,1031],
[989,1055,0,1001,1109,1012,975,985,1081,1000,1034,1104,981],
[932,980,1000,0,1074,1064,937,944,998,949,910,1016,902],
[868,942,892,927,0,968,949,949,1003,961,930,1033,963],
[867,969,989,937,1033,0,959,904,1021,959,991,1030,1067],
[947,966,1026,1064,1052,1042,0,1000,1020,1055,950,1045,1060],
[959,1025,1016,1057,1052,1097,1001,0,1015,1043,925,1104,1006],
[897,966,920,1003,998,980,981,986,0,1049,949,998,961],
[968,955,1001,1052,1040,1042,946,958,952,0,926,1092,969],
[1022,1040,967,1091,1071,1010,1051,1076,1052,1075,0,1127,1039],
[962,964,897,985,968,971,956,897,1003,909,874,0,991],
[1012,970,1020,1099,1038,934,941,995,1040,1032,962,1010,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 146, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1053,1090,1019,1045,1046,1031,1083,984,1011,1030,986,1092],
[948,0,1029,982,973,1016,1007,1059,954,1008,980,975,1029],
[911,972,0,936,950,991,954,966,954,962,910,954,1013],
[982,1019,1065,0,967,1034,1037,1014,1008,1006,1009,985,1039],
[956,1028,1051,1034,0,1086,1031,1018,968,1029,1011,1021,1056],
[955,985,1010,967,915,0,1021,1008,958,983,955,1005,990],
[970,994,1047,964,970,980,0,967,1000,987,967,953,1068],
[918,942,1035,987,983,993,1034,0,992,976,966,992,986],
[1017,1047,1047,993,1033,1043,1001,1009,0,1004,1046,1029,1102],
[990,993,1039,995,972,1018,1014,1025,997,0,1001,1026,1023],
[971,1021,1091,992,990,1046,1034,1035,955,1000,0,988,1061],
[1015,1026,1047,1016,980,996,1048,1009,972,975,1013,0,1032],
[909,972,988,962,945,1011,933,1015,899,978,940,969,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 147, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,998,973,1009,996,1004,978,1001,1020,994,1001,999,1008],
[1003,0,981,1024,995,996,1010,1020,1017,982,985,958,994],
[1028,1020,0,1025,1003,992,992,1008,1015,996,990,1021,1015],
[992,977,976,0,992,984,956,986,1018,985,971,960,982],
[1005,1006,998,1009,0,1019,999,983,989,978,975,1008,1000],
[997,1005,1009,1017,982,0,990,997,1029,995,989,979,1010],
[1023,991,1009,1045,1002,1011,0,1014,1009,991,977,1008,1009],
[1000,981,993,1015,1018,1004,987,0,1015,989,987,1024,1011],
[981,984,986,983,1012,972,992,986,0,980,992,986,996],
[1007,1019,1005,1016,1023,1006,1010,1012,1021,0,987,1004,1029],
[1000,1016,1011,1030,1026,1012,1024,1014,1009,1014,0,1018,1026],
[1002,1043,980,1041,993,1022,993,977,1015,997,983,0,1009],
[993,1007,986,1019,1001,991,992,990,1005,972,975,992,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 148, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,975,954,1015,1000,964,991,1021,967,977,976,974,1028],
[1026,0,1000,991,1042,1013,1013,1029,999,1013,1047,1041,1009],
[1047,1001,0,1007,1041,1002,985,996,1017,1025,1059,1023,1050],
[986,1010,994,0,1021,989,970,1009,968,959,1013,1025,1001],
[1001,959,960,980,0,997,978,993,959,971,1004,987,998],
[1037,988,999,1012,1004,0,988,1028,977,1000,1025,1008,1022],
[1010,988,1016,1031,1023,1013,0,985,983,964,1004,1018,1014],
[980,972,1005,992,1008,973,1016,0,963,997,988,1013,999],
[1034,1002,984,1033,1042,1024,1018,1038,0,1002,1022,1023,1042],
[1024,988,976,1042,1030,1001,1037,1004,999,0,1023,1001,1047],
[1025,954,942,988,997,976,997,1013,979,978,0,1022,1007],
[1027,960,978,976,1014,993,983,988,978,1000,979,0,994],
[973,992,951,1000,1003,979,987,1002,959,954,994,1007,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 149, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1005,1117,1208,1157,988,1165,927,956,827,994,1019,947],
[996,0,788,898,1029,874,1149,914,1042,771,891,1030,971],
[884,1213,0,1047,935,849,1448,1089,842,983,976,917,1160],
[793,1103,954,0,1069,1030,1269,1093,987,783,993,986,1074],
[844,972,1066,932,0,935,1202,1012,795,783,988,872,923],
[1013,1127,1152,971,1066,0,1198,978,1124,1001,937,869,1056],
[836,852,553,732,799,803,0,908,669,735,573,658,852],
[1074,1087,912,908,989,1023,1093,0,922,1011,819,926,953],
[1045,959,1159,1014,1206,877,1332,1079,0,883,906,1025,947],
[1174,1230,1018,1218,1218,1000,1266,990,1118,0,1059,1251,1383],
[1007,1110,1025,1008,1013,1064,1428,1182,1095,942,0,912,913],
[982,971,1084,1015,1129,1132,1343,1075,976,750,1089,0,1106],
[1054,1030,841,927,1078,945,1149,1048,1054,618,1088,895,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 150, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1070,1119,1081,1096,990,1101,914,1034,1014,1031,1053,934],
[931,0,1033,1045,1010,976,1040,995,1088,989,1065,993,935],
[882,968,0,1062,998,971,961,918,954,985,985,1004,878],
[920,956,939,0,1076,905,871,863,998,859,987,905,848],
[905,991,1003,925,0,1007,1003,904,998,931,934,957,840],
[1011,1025,1030,1096,994,0,1009,967,950,1000,1045,970,901],
[900,961,1040,1130,998,992,0,987,1020,1001,967,954,995],
[1087,1006,1083,1138,1097,1034,1014,0,1023,968,1105,1097,985],
[967,913,1047,1003,1003,1051,981,978,0,958,982,979,858],
[987,1012,1016,1142,1070,1001,1000,1033,1043,0,1007,1009,1011],
[970,936,1016,1014,1067,956,1034,896,1019,994,0,1027,911],
[948,1008,997,1096,1044,1031,1047,904,1022,992,974,0,960],
[1067,1066,1123,1153,1161,1100,1006,1016,1143,990,1090,1041,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 151, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,978,1017,1030,999,1015,1021,961,1024,985,986,1032,1039],
[1023,0,1039,994,1034,997,1012,979,1026,1010,1013,1040,1025],
[984,962,0,975,993,1004,972,986,965,967,984,992,1015],
[971,1007,1026,0,1011,1009,1000,989,1012,983,1003,1022,1004],
[1002,967,1008,990,0,986,960,963,1026,976,976,1026,1017],
[986,1004,997,992,1015,0,993,993,998,990,1005,1006,1029],
[980,989,1029,1001,1041,1008,0,1022,1014,991,1009,1011,1013],
[1040,1022,1015,1012,1038,1008,979,0,1032,985,998,1058,1035],
[977,975,1036,989,975,1003,987,969,0,987,962,1012,1025],
[1016,991,1034,1018,1025,1011,1010,1016,1014,0,1040,1041,1043],
[1015,988,1017,998,1025,996,992,1003,1039,961,0,988,1013],
[969,961,1009,979,975,995,990,943,989,960,1013,0,1009],
[962,976,986,997,984,972,988,966,976,958,988,992,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 152, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,990,1021,1044,1010,1002,1019,1037,1050,1024,1038,1036,1010],
[1011,0,1053,1037,1038,983,1005,1038,1026,1020,1024,1046,998],
[980,948,0,1026,1008,974,1002,989,1011,1006,1009,1012,971],
[957,964,975,0,980,987,1007,985,1012,983,973,969,973],
[991,963,993,1021,0,985,1005,1003,1037,968,970,1011,975],
[999,1018,1027,1014,1016,0,1011,1052,1056,1022,1035,1021,981],
[982,996,999,994,996,990,0,1011,1020,988,1020,995,971],
[964,963,1012,1016,998,949,990,0,1001,984,1000,968,969],
[951,975,990,989,964,945,981,1000,0,982,988,974,948],
[977,981,995,1018,1033,979,1013,1017,1019,0,996,1001,1012],
[963,977,992,1028,1031,966,981,1001,1013,1005,0,1000,993],
[965,955,989,1032,990,980,1006,1033,1027,1000,1001,0,991],
[991,1003,1030,1028,1026,1020,1030,1032,1053,989,1008,1010,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 153, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,964,994,990,996,1018,974,1008,970,990,1020,983,963],
[1037,0,1022,1037,1023,1029,976,1019,992,1033,1044,1048,1023],
[1007,979,0,963,1030,980,952,998,1018,985,1031,971,971],
[1011,964,1038,0,1050,1018,998,1008,965,1048,1009,1019,1007],
[1005,978,971,951,0,988,994,977,935,987,1002,981,939],
[983,972,1021,983,1013,0,1000,1022,986,986,996,992,1028],
[1027,1025,1049,1003,1007,1001,0,1059,982,1032,997,981,990],
[993,982,1003,993,1024,979,942,0,1003,977,1038,1000,976],
[1031,1009,983,1036,1066,1015,1019,998,0,1033,1020,1041,984],
[1011,968,1016,953,1014,1015,969,1024,968,0,1014,1014,1010],
[981,957,970,992,999,1005,1004,963,981,987,0,1042,977],
[1018,953,1030,982,1020,1009,1020,1001,960,987,959,0,989],
[1038,978,1030,994,1062,973,1011,1025,1017,991,1024,1012,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 154, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1074,1002,967,993,1006,1040,1007,1031,1050,1029,1064,1034],
[927,0,987,965,944,982,965,1009,997,1007,1064,990,991],
[999,1014,0,920,963,1008,961,953,951,1043,957,982,1025],
[1034,1036,1081,0,977,1017,1051,1038,1043,1090,1079,1044,1024],
[1008,1057,1038,1024,0,997,1003,1018,1020,1088,1073,1073,1065],
[995,1019,993,984,1004,0,972,1001,963,1123,1029,1044,994],
[961,1036,1040,950,998,1029,0,1028,1050,1110,1058,1041,1046],
[994,992,1048,963,983,1000,973,0,990,1114,1048,1099,1018],
[970,1004,1050,958,981,1038,951,1011,0,1053,1067,1061,1001],
[951,994,958,911,913,878,891,887,948,0,1000,975,928],
[972,937,1044,922,928,972,943,953,934,1001,0,1004,938],
[937,1011,1019,957,928,957,960,902,940,1026,997,0,992],
[967,1010,976,977,936,1007,955,983,1000,1073,1063,1009,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 155, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,983,939,948,1042,1083,950,990,997,1016,1028,999,978],
[1018,0,1027,1023,1024,1140,992,1019,1029,1041,1053,1068,1010],
[1062,974,0,975,1086,1038,955,1028,993,961,1057,1057,1021],
[1053,978,1026,0,1079,1154,956,1037,1121,1026,1159,1088,1024],
[959,977,915,922,0,1053,913,988,922,961,1066,987,952],
[918,861,963,847,948,0,856,917,974,904,961,954,909],
[1051,1009,1046,1045,1088,1145,0,1025,1033,1000,1117,1050,1020],
[1011,982,973,964,1013,1084,976,0,1074,963,1079,1039,1002],
[1004,972,1008,880,1079,1027,968,927,0,981,1056,1078,897],
[985,960,1040,975,1040,1097,1001,1038,1020,0,1121,1060,1039],
[973,948,944,842,935,1040,884,922,945,880,0,967,910],
[1002,933,944,913,1014,1047,951,962,923,941,1034,0,950],
[1023,991,980,977,1049,1092,981,999,1104,962,1091,1051,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 156, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1052,1039,990,1090,1026,997,988,964,1029,1009,997,969],
[949,0,1006,1007,1031,1014,956,966,959,998,1027,952,1006],
[962,995,0,1047,1017,1029,994,1066,990,1043,1007,988,948],
[1011,994,954,0,1028,1010,982,997,933,1038,1041,944,959],
[911,970,984,973,0,1021,955,1012,919,1036,990,931,929],
[975,987,972,991,980,0,1012,921,966,1052,971,963,961],
[1004,1045,1007,1019,1046,989,0,963,949,1019,1037,1020,976],
[1013,1035,935,1004,989,1080,1038,0,980,1059,1103,971,985],
[1037,1042,1011,1068,1082,1035,1052,1021,0,1080,1062,996,996],
[972,1003,958,963,965,949,982,942,921,0,1014,976,898],
[992,974,994,960,1011,1030,964,898,939,987,0,964,911],
[1004,1049,1013,1057,1070,1038,981,1030,1005,1025,1037,0,1028],
[1032,995,1053,1042,1072,1040,1025,1016,1005,1103,1090,973,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 157, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,984,968,968,976,997,956,1006,983,1006,1004,998,1026],
[1017,0,1010,1008,998,1027,988,960,1050,990,1021,966,1005],
[1033,991,0,1031,952,967,981,1011,987,967,996,991,975],
[1033,993,970,0,950,988,990,995,1003,1030,988,1037,1022],
[1025,1003,1049,1051,0,985,1051,998,1022,978,1054,1010,1034],
[1004,974,1034,1013,1016,0,1032,969,990,1004,1003,1010,989],
[1045,1013,1020,1011,950,969,0,994,992,999,973,1020,982],
[995,1041,990,1006,1003,1032,1007,0,1014,973,1010,1045,1048],
[1018,951,1014,998,979,1011,1009,987,0,979,967,1002,991],
[995,1011,1034,971,1023,997,1002,1028,1022,0,1019,1006,1025],
[997,980,1005,1013,947,998,1028,991,1034,982,0,977,1015],
[1003,1035,1010,964,991,991,981,956,999,995,1024,0,1002],
[975,996,1026,979,967,1012,1019,953,1010,976,986,999,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 158, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1046,1006,965,1069,970,1054,981,1054,937,995,1009,952],
[955,0,961,997,975,1003,987,984,1009,967,1026,1006,918],
[995,1040,0,956,1030,976,1075,994,1014,1022,1074,1045,1023],
[1036,1004,1045,0,1071,1065,1081,987,1107,992,1073,1006,1019],
[932,1026,971,930,0,958,1039,966,992,1007,1055,958,953],
[1031,998,1025,936,1043,0,1057,966,1060,966,1008,1005,944],
[947,1014,926,920,962,944,0,983,988,925,985,959,908],
[1020,1017,1007,1014,1035,1035,1018,0,1054,1028,1011,988,979],
[947,992,987,894,1009,941,1013,947,0,943,993,971,943],
[1064,1034,979,1009,994,1035,1076,973,1058,0,1053,978,959],
[1006,975,927,928,946,993,1016,990,1008,948,0,922,951],
[992,995,956,995,1043,996,1042,1013,1030,1023,1079,0,1012],
[1049,1083,978,982,1048,1057,1093,1022,1058,1042,1050,989,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 159, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,981,974,987,905,957,970,948,962,870,1045,1045,1024],
[1020,0,1014,1036,964,1011,1060,1008,1033,957,1058,1024,1002],
[1027,987,0,995,957,932,993,972,967,921,1014,984,979],
[1014,965,1006,0,989,992,1010,963,973,911,1013,1007,977],
[1096,1037,1044,1012,0,1014,1030,1028,1024,957,1002,1035,978],
[1044,990,1069,1009,987,0,1079,984,1071,1031,1131,1034,1005],
[1031,941,1008,991,971,922,0,910,952,947,993,1012,963],
[1053,993,1029,1038,973,1017,1091,0,1017,922,1083,997,984],
[1039,968,1034,1028,977,930,1049,984,0,998,1056,1055,1023],
[1131,1044,1080,1090,1044,970,1054,1079,1003,0,1135,1062,1065],
[956,943,987,988,999,870,1008,918,945,866,0,989,920],
[956,977,1017,994,966,967,989,1004,946,939,1012,0,938],
[977,999,1022,1024,1023,996,1038,1017,978,936,1081,1063,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 160, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1014,984,1015,1029,1027,976,972,990,1006,1008,1060,1004],
[987,0,973,1002,1003,1004,974,940,965,1006,990,1016,999],
[1017,1028,0,1036,1044,1019,994,990,1028,1007,1007,1068,1013],
[986,999,965,0,999,986,966,955,976,1014,967,1035,992],
[972,998,957,1002,0,1007,994,957,1001,1012,984,1040,992],
[974,997,982,1015,994,0,1002,974,980,1031,1009,1048,985],
[1025,1027,1007,1035,1007,999,0,956,978,1027,986,1032,988],
[1029,1061,1011,1046,1044,1027,1045,0,956,1024,1012,1059,1009],
[1011,1036,973,1025,1000,1021,1023,1045,0,1017,1015,1069,1009],
[995,995,994,987,989,970,974,977,984,0,983,990,979],
[993,1011,994,1034,1017,992,1015,989,986,1018,0,1050,1026],
[941,985,933,966,961,953,969,942,932,1011,951,0,969],
[997,1002,988,1009,1009,1016,1013,992,992,1022,975,1032,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 161, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,940,976,921,861,972,1038,1086,988,1055,983,949,1032],
[1061,0,1004,832,917,868,919,1003,1000,982,1034,923,968],
[1025,997,0,1022,1009,1047,1108,1112,1111,1051,1164,1055,1069],
[1080,1169,979,0,1035,1101,1133,1192,966,1152,1166,1146,1160],
[1140,1084,992,966,0,918,929,1062,1041,1031,989,1071,1096],
[1029,1133,954,900,1083,0,1011,1034,1010,1065,1129,1007,1054],
[963,1082,893,868,1072,990,0,1038,1035,1038,998,1038,998],
[915,998,889,809,939,967,963,0,929,919,909,946,998],
[1013,1001,890,1035,960,991,966,1072,0,955,1051,1010,1051],
[946,1019,950,849,970,936,963,1082,1046,0,1082,913,968],
[1018,967,837,835,1012,872,1003,1092,950,919,0,989,948],
[1052,1078,946,855,930,994,963,1055,991,1088,1012,0,1078],
[969,1033,932,841,905,947,1003,1003,950,1033,1053,923,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 162, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,986,1046,998,1038,899,1102,906,966,1001,973,1012,1015],
[1015,0,1048,1014,939,967,1025,997,1066,1040,959,1097,1046],
[955,953,0,941,943,927,1052,960,883,1033,1014,945,958],
[1003,987,1060,0,1057,990,1048,1015,951,1084,983,977,992],
[963,1062,1058,944,0,1033,1085,980,1038,1079,973,1030,1081],
[1102,1034,1074,1011,968,0,1047,1037,1000,1173,1050,1045,1034],
[899,976,949,953,916,954,0,959,948,1021,940,952,1013],
[1095,1004,1041,986,1021,964,1042,0,1012,1115,974,992,948],
[1035,935,1118,1050,963,1001,1053,989,0,1024,972,954,934],
[1000,961,968,917,922,828,980,886,977,0,915,906,948],
[1028,1042,987,1018,1028,951,1061,1027,1029,1086,0,956,1030],
[989,904,1056,1024,971,956,1049,1009,1047,1095,1045,0,971],
[986,955,1043,1009,920,967,988,1053,1067,1053,971,1030,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 163, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,996,1012,991,1033,1048,1029,995,1010,1041,1083,1031,990],
[1005,0,1011,996,990,987,986,969,1002,981,1067,1008,966],
[989,990,0,969,1020,1018,971,967,1008,976,1016,1002,1019],
[1010,1005,1032,0,1048,1065,1028,994,997,997,1059,1024,990],
[968,1011,981,953,0,974,982,966,955,964,1004,1004,944],
[953,1014,983,936,1027,0,979,951,974,946,1009,1022,928],
[972,1015,1030,973,1019,1022,0,1002,968,997,1040,1038,973],
[1006,1032,1034,1007,1035,1050,999,0,998,1023,1044,1033,1002],
[991,999,993,1004,1046,1027,1033,1003,0,1043,1075,1012,985],
[960,1020,1025,1004,1037,1055,1004,978,958,0,1022,1027,969],
[918,934,985,942,997,992,961,957,926,979,0,1004,914],
[970,993,999,977,997,979,963,968,989,974,997,0,980],
[1011,1035,982,1011,1057,1073,1028,999,1016,1032,1087,1021,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 164, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1035,1029,997,998,1029,982,1008,987,990,996,1002,1014],
[966,0,1019,948,973,973,932,974,986,994,933,948,975],
[972,982,0,978,951,1005,964,987,969,969,973,989,984],
[1004,1053,1023,0,974,1011,1014,988,1027,994,1004,993,1012],
[1003,1028,1050,1027,0,1036,1018,1009,998,990,1035,996,1047],
[972,1028,996,990,965,0,962,995,992,1000,1010,984,996],
[1019,1069,1037,987,983,1039,0,1016,995,1034,992,1020,1022],
[993,1027,1014,1013,992,1006,985,0,994,993,1038,996,1008],
[1014,1015,1032,974,1003,1009,1006,1007,0,1001,1002,988,1015],
[1011,1007,1032,1007,1011,1001,967,1008,1000,0,998,998,1043],
[1005,1068,1028,997,966,991,1009,963,999,1003,0,1009,1034],
[999,1053,1012,1008,1005,1017,981,1005,1013,1003,992,0,1006],
[987,1026,1017,989,954,1005,979,993,986,958,967,995,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 165, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1018,1021,1006,1037,999,1039,1012,1024,1003,1036,1020,982],
[983,0,1062,1016,1070,1016,1044,1019,1055,1007,1079,1011,990],
[980,939,0,995,1005,995,1040,918,987,953,944,981,951],
[995,985,1006,0,1010,968,1005,988,1008,1003,1030,980,963],
[964,931,996,991,0,942,980,912,1029,981,1008,962,944],
[1002,985,1006,1033,1059,0,1049,1012,1027,970,1017,981,983],
[962,957,961,996,1021,952,0,966,1011,1013,1006,993,994],
[989,982,1083,1013,1089,989,1035,0,1017,997,994,1069,996],
[977,946,1014,993,972,974,990,984,0,979,987,954,1004],
[998,994,1048,998,1020,1031,988,1004,1022,0,978,991,988],
[965,922,1057,971,993,984,995,1007,1014,1023,0,987,949],
[981,990,1020,1021,1039,1020,1008,932,1047,1010,1014,0,1001],
[1019,1011,1050,1038,1057,1018,1007,1005,997,1013,1052,1000,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 166, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1108,1027,1008,969,1000,1016,960,1002,1018,1061,1015,952],
[893,0,956,970,937,956,957,952,986,932,977,984,968],
[974,1045,0,1002,967,1035,1010,1034,1003,1031,1014,1021,938],
[993,1031,999,0,949,971,1014,956,1024,1017,1026,995,924],
[1032,1064,1034,1052,0,995,1055,1077,1040,1046,1071,1029,1041],
[1001,1045,966,1030,1006,0,985,1000,1042,1045,1047,1014,975],
[985,1044,991,987,946,1016,0,978,1038,1059,1012,1011,988],
[1041,1049,967,1045,924,1001,1023,0,1004,1063,1023,952,952],
[999,1015,998,977,961,959,963,997,0,988,1022,1019,943],
[983,1069,970,984,955,956,942,938,1013,0,1016,996,940],
[940,1024,987,975,930,954,989,978,979,985,0,1019,977],
[986,1017,980,1006,972,987,990,1049,982,1005,982,0,1019],
[1049,1033,1063,1077,960,1026,1013,1049,1058,1061,1024,982,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 167, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,996,967,983,952,1010,972,992,954,988,961,991,989],
[1005,0,993,1015,953,988,1004,1000,972,974,969,958,1001],
[1034,1008,0,998,967,1019,1004,988,976,975,941,944,1002],
[1018,986,1003,0,969,977,976,986,973,998,974,1014,999],
[1049,1048,1034,1032,0,1034,1048,1024,1030,1026,1017,987,1043],
[991,1013,982,1024,967,0,988,992,967,979,989,992,1022],
[1029,997,997,1025,953,1013,0,997,1009,984,975,995,1003],
[1009,1001,1013,1015,977,1009,1004,0,991,1010,992,982,1021],
[1047,1029,1025,1028,971,1034,992,1010,0,994,987,1016,1028],
[1013,1027,1026,1003,975,1022,1017,991,1007,0,992,990,1003],
[1040,1032,1060,1027,984,1012,1026,1009,1014,1009,0,1014,1028],
[1010,1043,1057,987,1014,1009,1006,1019,985,1011,987,0,1004],
[1012,1000,999,1002,958,979,998,980,973,998,973,997,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 168, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1064,1018,1010,978,1023,1048,1015,1014,1043,952,1111,954],
[937,0,995,940,1004,959,985,1065,1012,1025,949,1019,969],
[983,1006,0,1015,992,998,994,953,958,1043,973,1013,985],
[991,1061,986,0,1019,953,969,963,1047,1036,934,1016,991],
[1023,997,1009,982,0,980,970,993,1048,1011,992,1032,1006],
[978,1042,1003,1048,1021,0,1026,987,1040,983,976,1048,1002],
[953,1016,1007,1032,1031,975,0,1014,1012,1041,1001,1107,1015],
[986,936,1048,1038,1008,1014,987,0,1065,1081,1013,1066,1016],
[987,989,1043,954,953,961,989,936,0,1038,895,1024,987],
[958,976,958,965,990,1018,960,920,963,0,950,1017,986],
[1049,1052,1028,1067,1009,1025,1000,988,1106,1051,0,1045,1050],
[890,982,988,985,969,953,894,935,977,984,956,0,913],
[1047,1032,1016,1010,995,999,986,985,1014,1015,951,1088,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 169, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1027,977,1014,990,995,1024,973,984,984,1000,969,977],
[974,0,942,980,960,960,965,950,963,947,988,952,932],
[1024,1059,0,1011,1025,1042,1022,1031,1016,1003,1017,1004,980],
[987,1021,990,0,988,1012,1009,1012,997,978,998,985,986],
[1011,1041,976,1013,0,1018,1019,1001,992,996,989,1006,978],
[1006,1041,959,989,983,0,1014,981,992,992,996,968,954],
[977,1036,979,992,982,987,0,980,981,985,976,973,967],
[1028,1051,970,989,1000,1020,1021,0,1016,998,1034,994,1018],
[1017,1038,985,1004,1009,1009,1020,985,0,979,1025,988,982],
[1017,1054,998,1023,1005,1009,1016,1003,1022,0,1017,993,1013],
[1001,1013,984,1003,1012,1005,1025,967,976,984,0,972,976],
[1032,1049,997,1016,995,1033,1028,1007,1013,1008,1029,0,997],
[1024,1069,1021,1015,1023,1047,1034,983,1019,988,1025,1004,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 170, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1009,1046,969,999,1015,958,1016,1000,1018,1014,1015,1043],
[992,0,1022,951,1057,957,965,971,978,1013,1063,992,1058],
[955,979,0,941,982,996,940,955,955,970,996,970,1033],
[1032,1050,1060,0,1026,1038,1013,1013,1001,1059,1065,975,1054],
[1002,944,1019,975,0,945,918,976,981,996,996,975,1071],
[986,1044,1005,963,1056,0,1011,1016,1002,1022,1049,1017,1096],
[1043,1036,1061,988,1083,990,0,1020,988,1042,1057,972,1099],
[985,1030,1046,988,1025,985,981,0,963,969,1019,1002,1039],
[1001,1023,1046,1000,1020,999,1013,1038,0,1011,1038,998,1084],
[983,988,1031,942,1005,979,959,1032,990,0,1013,1010,1090],
[987,938,1005,936,1005,952,944,982,963,988,0,931,1020],
[986,1009,1031,1026,1026,984,1029,999,1003,991,1070,0,1063],
[958,943,968,947,930,905,902,962,917,911,981,938,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 171, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1021,1058,978,1031,1027,1095,982,974,1066,1020,989,992],
[980,0,1013,954,932,1030,1013,955,983,996,954,891,989],
[943,988,0,992,991,1001,1002,984,999,950,911,944,910],
[1023,1047,1009,0,1017,1009,997,999,974,988,976,950,976],
[970,1069,1010,984,0,987,997,989,973,1013,940,908,1017],
[974,971,1000,992,1014,0,1019,969,939,974,977,925,950],
[906,988,999,1004,1004,982,0,987,980,951,968,957,952],
[1019,1046,1017,1002,1012,1032,1014,0,977,1019,1023,1012,997],
[1027,1018,1002,1027,1028,1062,1021,1024,0,968,974,1005,953],
[935,1005,1051,1013,988,1027,1050,982,1033,0,1027,948,960],
[981,1047,1090,1025,1061,1024,1033,978,1027,974,0,953,980],
[1012,1110,1057,1051,1093,1076,1044,989,996,1053,1048,0,1002],
[1009,1012,1091,1025,984,1051,1049,1004,1048,1041,1021,999,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 172, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,935,1010,958,953,1103,963,974,1006,952,1002,1003,994],
[1066,0,1124,993,990,1046,1007,1037,968,1031,1050,1062,1020],
[991,877,0,957,900,1042,1022,928,1009,959,955,981,1049],
[1043,1008,1044,0,1002,1086,1055,1059,1076,1069,990,1048,1062],
[1048,1011,1101,999,0,1125,987,1060,1013,974,1023,995,1073],
[898,955,959,915,876,0,944,934,1014,941,1008,919,1010],
[1038,994,979,946,1014,1057,0,1023,1029,1005,1000,1024,1063],
[1027,964,1073,942,941,1067,978,0,1066,1015,983,1009,1047],
[995,1033,992,925,988,987,972,935,0,1001,965,1004,1029],
[1049,970,1042,932,1027,1060,996,986,1000,0,1013,1030,1018],
[999,951,1046,1011,978,993,1001,1018,1036,988,0,999,1071],
[998,939,1020,953,1006,1082,977,992,997,971,1002,0,1052],
[1007,981,952,939,928,991,938,954,972,983,930,949,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 173, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,973,1062,1123,951,1018,990,1042,1055,979,1002,980,997],
[1028,0,1055,1108,1025,992,1104,1081,1045,1001,974,1034,1014],
[939,946,0,1056,925,987,1017,1022,943,988,878,880,970],
[878,893,945,0,923,910,942,959,962,944,941,953,940],
[1050,976,1076,1078,0,1018,1060,1157,1009,1000,989,1014,1097],
[983,1009,1014,1091,983,0,1025,1047,973,1025,930,941,1062],
[1011,897,984,1059,941,976,0,1031,1031,951,890,984,962],
[959,920,979,1042,844,954,970,0,996,977,878,938,949],
[946,956,1058,1039,992,1028,970,1005,0,988,958,998,998],
[1022,1000,1013,1057,1001,976,1050,1024,1013,0,956,987,1042],
[999,1027,1123,1060,1012,1071,1111,1123,1043,1045,0,1022,1080],
[1021,967,1121,1048,987,1060,1017,1063,1003,1014,979,0,1056],
[1004,987,1031,1061,904,939,1039,1052,1003,959,921,945,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 174, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1017,1034,1068,969,960,1032,1046,1035,982,1055,1046,1007],
[984,0,1072,997,973,1021,1033,1036,998,1008,1146,1004,981],
[967,929,0,1028,932,955,972,981,975,944,1033,981,942],
[933,1004,973,0,908,945,957,995,1015,938,1087,999,935],
[1032,1028,1069,1093,0,1049,1001,1099,996,995,1067,1050,949],
[1041,980,1046,1056,952,0,1039,1036,947,988,1092,997,967],
[969,968,1029,1044,1000,962,0,1010,983,955,1055,1029,940],
[955,965,1020,1006,902,965,991,0,997,927,1024,993,942],
[966,1003,1026,986,1005,1054,1018,1004,0,961,1050,1044,976],
[1019,993,1057,1063,1006,1013,1046,1074,1040,0,1064,1040,1030],
[946,855,968,914,934,909,946,977,951,937,0,939,931],
[955,997,1020,1002,951,1004,972,1008,957,961,1062,0,972],
[994,1020,1059,1066,1052,1034,1061,1059,1025,971,1070,1029,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 175, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,992,980,1003,1030,988,983,956,979,1001,973,980,995],
[1009,0,991,1017,1049,1016,1029,1003,948,1031,996,992,1011],
[1021,1010,0,1017,1017,1022,1030,982,992,1042,1013,1025,998],
[998,984,984,0,993,991,994,952,960,995,968,961,1001],
[971,952,984,1008,0,983,988,961,954,971,972,995,969],
[1013,985,979,1010,1018,0,1031,955,969,1018,995,987,994],
[1018,972,971,1007,1013,970,0,958,974,963,975,989,981],
[1045,998,1019,1049,1040,1046,1043,0,1002,1006,1031,1038,1027],
[1022,1053,1009,1041,1047,1032,1027,999,0,1019,1011,1040,1039],
[1000,970,959,1006,1030,983,1038,995,982,0,978,975,962],
[1028,1005,988,1033,1029,1006,1026,970,990,1023,0,987,997],
[1021,1009,976,1040,1006,1014,1012,963,961,1026,1014,0,983],
[1006,990,1003,1000,1032,1007,1020,974,962,1039,1004,1018,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 176, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,997,953,963,995,965,958,1032,975,984,993,977,957],
[1004,0,975,1005,968,989,1000,1014,958,962,970,989,976],
[1048,1026,0,995,990,998,1018,1015,997,995,1003,1008,987],
[1038,996,1006,0,1036,994,1000,1062,992,1006,1006,1011,998],
[1006,1033,1011,965,0,1015,1034,1061,980,1019,999,1012,1003],
[1036,1012,1003,1007,986,0,1017,1043,1005,988,994,979,986],
[1043,1001,983,1001,967,984,0,1043,994,979,998,982,1002],
[969,987,986,939,940,958,958,0,987,977,954,957,965],
[1026,1043,1004,1009,1021,996,1007,1014,0,981,1025,994,1002],
[1017,1039,1006,995,982,1013,1022,1024,1020,0,1039,995,1004],
[1008,1031,998,995,1002,1007,1003,1047,976,962,0,1014,1014],
[1024,1012,993,990,989,1022,1019,1044,1007,1006,987,0,1011],
[1044,1025,1014,1003,998,1015,999,1036,999,997,987,990,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 177, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,995,1019,952,1006,851,924,1010,1053,1145,983,1072,1000],
[1006,0,959,963,914,948,923,1013,957,1155,1030,1058,971],
[982,1042,0,1019,874,984,941,915,996,1064,987,966,960],
[1049,1038,982,0,1101,1044,1031,1059,1009,1144,1003,1132,1091],
[995,1087,1127,900,0,984,1095,1004,1013,1138,1006,1016,1054],
[1150,1053,1017,957,1017,0,997,1069,1117,1180,995,1115,1035],
[1077,1078,1060,970,906,1004,0,1059,996,1129,1000,1071,1100],
[991,988,1086,942,997,932,942,0,1047,1049,983,1102,979],
[948,1044,1005,992,988,884,1005,954,0,1127,1036,1103,972],
[856,846,937,857,863,821,872,952,874,0,869,982,1017],
[1018,971,1014,998,995,1006,1001,1018,965,1132,0,1062,1046],
[929,943,1035,869,985,886,930,899,898,1019,939,0,1015],
[1001,1030,1041,910,947,966,901,1022,1029,984,955,986,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 178, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,974,1034,1003,1012,981,984,994,989,989,1036,1005,950],
[1027,0,1068,1011,1009,965,1001,1017,998,1001,1045,1028,999],
[967,933,0,938,952,943,962,948,938,963,974,977,950],
[998,990,1063,0,1031,953,978,1000,956,1028,1027,983,958],
[989,992,1049,970,0,992,995,1003,988,1038,1048,985,984],
[1020,1036,1058,1048,1009,0,1039,1022,1011,1023,1034,1068,995],
[1017,1000,1039,1023,1006,962,0,988,990,1011,1019,1011,990],
[1007,984,1053,1001,998,979,1013,0,982,1013,1020,981,1004],
[1012,1003,1063,1045,1013,990,1011,1019,0,1017,1032,1001,990],
[1012,1000,1038,973,963,978,990,988,984,0,1031,955,972],
[965,956,1027,974,953,967,982,981,969,970,0,953,920],
[996,973,1024,1018,1016,933,990,1020,1000,1046,1048,0,987],
[1051,1002,1051,1043,1017,1006,1011,997,1011,1029,1081,1014,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 179, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1023,1085,971,980,976,989,1021,1070,1016,997,1042,1036],
[978,0,1006,1045,918,994,976,927,1062,910,959,977,997],
[916,995,0,944,902,954,939,954,1025,905,961,947,971],
[1030,956,1057,0,1021,1018,935,1023,1087,975,956,975,1023],
[1021,1083,1099,980,0,1059,1000,966,1067,1043,1031,1028,1032],
[1025,1007,1047,983,942,0,945,943,970,999,1006,902,989],
[1012,1025,1062,1066,1001,1056,0,973,1035,1007,1021,965,1020],
[980,1074,1047,978,1035,1058,1028,0,991,1007,1042,1044,1010],
[931,939,976,914,934,1031,966,1010,0,944,936,985,962],
[985,1091,1096,1026,958,1002,994,994,1057,0,1014,925,1001],
[1004,1042,1040,1045,970,995,980,959,1065,987,0,951,1030],
[959,1024,1054,1026,973,1099,1036,957,1016,1076,1050,0,1023],
[965,1004,1030,978,969,1012,981,991,1039,1000,971,978,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 180, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,980,998,1037,1016,1005,1023,965,989,1020,1025,1012,967],
[1021,0,1022,1048,990,1000,1029,1003,1007,1030,1030,996,1015],
[1003,979,0,954,1010,965,1010,992,985,988,977,991,989],
[964,953,1047,0,987,972,971,992,973,981,1000,1010,981],
[985,1011,991,1014,0,987,994,969,1010,993,959,967,990],
[996,1001,1036,1029,1014,0,1005,979,997,1046,991,998,981],
[978,972,991,1030,1007,996,0,966,994,985,978,1002,1021],
[1036,998,1009,1009,1032,1022,1035,0,1038,1040,1035,1044,1027],
[1012,994,1016,1028,991,1004,1007,963,0,1019,989,1010,1005],
[981,971,1013,1020,1008,955,1016,961,982,0,984,933,994],
[976,971,1024,1001,1042,1010,1023,966,1012,1017,0,1024,1002],
[989,1005,1010,991,1034,1003,999,957,991,1068,977,0,1025],
[1034,986,1012,1020,1011,1020,980,974,996,1007,999,976,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 181, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1044,956,995,991,935,928,939,1007,969,933,945,958],
[957,0,954,1016,967,878,910,945,940,904,977,898,896],
[1045,1047,0,1023,1013,969,963,991,971,961,971,931,996],
[1006,985,978,0,989,941,942,918,985,940,950,895,906],
[1010,1034,988,1012,0,942,889,926,969,898,994,985,866],
[1066,1123,1032,1060,1059,0,974,1006,1041,992,1043,995,989],
[1073,1091,1038,1059,1112,1027,0,1010,1040,984,1056,1013,1004],
[1062,1056,1010,1083,1075,995,991,0,993,964,957,962,977],
[994,1061,1030,1016,1032,960,961,1008,0,964,990,985,971],
[1032,1097,1040,1061,1103,1009,1017,1037,1037,0,1006,1014,949],
[1068,1024,1030,1051,1007,958,945,1044,1011,995,0,1000,990],
[1056,1103,1070,1106,1016,1006,988,1039,1016,987,1001,0,963],
[1043,1105,1005,1095,1135,1012,997,1024,1030,1052,1011,1038,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 182, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,941,1003,992,1002,1003,982,1000,979,980,947,958,1010],
[1060,0,1051,995,1022,1031,1030,1050,997,1017,985,1036,1032],
[998,950,0,1004,1030,986,987,991,996,1020,962,981,990],
[1009,1006,997,0,1043,1071,979,1018,1020,1021,974,1019,1013],
[999,979,971,958,0,985,958,986,996,960,978,980,971],
[998,970,1015,930,1016,0,964,988,1041,983,962,980,993],
[1019,971,1014,1022,1043,1037,0,1054,999,1028,1016,1047,1049],
[1001,951,1010,983,1015,1013,947,0,978,982,1014,1002,1031],
[1022,1004,1005,981,1005,960,1002,1023,0,994,965,1006,999],
[1021,984,981,980,1041,1018,973,1019,1007,0,941,982,992],
[1054,1016,1039,1027,1023,1039,985,987,1036,1060,0,996,987],
[1043,965,1020,982,1021,1021,954,999,995,1019,1005,0,1005],
[991,969,1011,988,1030,1008,952,970,1002,1009,1014,996,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 183, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,958,961,1006,943,847,938,893,961,890,1056,1054,1028],
[1043,0,939,1021,1051,1011,963,1002,1033,1103,1077,978,1079],
[1040,1062,0,940,1011,881,1105,913,956,1035,1064,1015,1089],
[995,980,1061,0,1025,1022,1029,947,1027,1060,1101,1000,1172],
[1058,950,990,976,0,953,1000,836,989,901,992,1067,1036],
[1154,990,1120,979,1048,0,1062,976,1020,958,1173,1037,1138],
[1063,1038,896,972,1001,939,0,898,1005,1028,1021,1012,1077],
[1108,999,1088,1054,1165,1025,1103,0,1044,960,1096,1132,1150],
[1040,968,1045,974,1012,981,996,957,0,1087,1102,1105,1075],
[1111,898,966,941,1100,1043,973,1041,914,0,1101,973,1111],
[945,924,937,900,1009,828,980,905,899,900,0,986,1098],
[947,1023,986,1001,934,964,989,869,896,1028,1015,0,1071],
[973,922,912,829,965,863,924,851,926,890,903,930,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 184, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1081,1034,977,1042,1004,939,946,1098,1017,1038,1014,985],
[920,0,816,917,884,891,768,877,951,914,1004,889,840],
[967,1185,0,1069,1069,993,1007,1066,1125,1082,1186,1081,1021],
[1024,1084,932,0,1005,914,977,1037,1110,948,1170,996,987],
[959,1117,932,996,0,907,934,929,984,976,1107,934,971],
[997,1110,1008,1087,1094,0,997,947,1081,1007,1131,1016,946],
[1062,1233,994,1024,1067,1004,0,1044,1101,994,1134,1107,975],
[1055,1124,935,964,1072,1054,957,0,1084,980,1129,972,1023],
[903,1050,876,891,1017,920,900,917,0,923,1007,1010,831],
[984,1087,919,1053,1025,994,1007,1021,1078,0,1102,982,940],
[963,997,815,831,894,870,867,872,994,899,0,952,876],
[987,1112,920,1005,1067,985,894,1029,991,1019,1049,0,889],
[1016,1161,980,1014,1030,1055,1026,978,1170,1061,1125,1112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 185, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1030,1019,1011,999,1038,1030,1034,1009,1035,1019,1013,1006],
[971,0,1025,1008,1011,998,1032,1030,985,997,1043,996,989],
[982,976,0,994,972,974,1012,994,972,979,990,960,949],
[990,993,1007,0,907,959,960,988,960,963,960,944,933],
[1002,990,1029,1094,0,1029,1046,1025,976,975,1076,1020,983],
[963,1003,1027,1042,972,0,964,997,1004,1004,1035,990,964],
[971,969,989,1041,955,1037,0,1015,1003,987,1035,988,1005],
[967,971,1007,1013,976,1004,986,0,988,994,995,972,953],
[992,1016,1029,1041,1025,997,998,1013,0,986,1034,990,1016],
[966,1004,1022,1038,1026,997,1014,1007,1015,0,1032,968,974],
[982,958,1011,1041,925,966,966,1006,967,969,0,974,965],
[988,1005,1041,1057,981,1011,1013,1029,1011,1033,1027,0,999],
[995,1012,1052,1068,1018,1037,996,1048,985,1027,1036,1002,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 186, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,917,954,954,954,1027,990,1013,984,967,999,925,962],
[1084,0,958,1057,1021,1069,1058,1086,970,984,1038,953,984],
[1047,1043,0,966,1045,1132,1010,1087,1005,1039,1040,1030,988],
[1047,944,1035,0,968,1014,982,966,981,1058,1010,929,953],
[1047,980,956,1033,0,1079,1071,1047,1012,1030,1019,1000,1074],
[974,932,869,987,922,0,948,983,921,977,953,931,964],
[1011,943,991,1019,930,1053,0,1020,978,1032,1004,951,1019],
[988,915,914,1035,954,1018,981,0,1008,999,1013,1041,936],
[1017,1031,996,1020,989,1080,1023,993,0,994,1013,978,1026],
[1034,1017,962,943,971,1024,969,1002,1007,0,969,975,1011],
[1002,963,961,991,982,1048,997,988,988,1032,0,1004,984],
[1076,1048,971,1072,1001,1070,1050,960,1023,1026,997,0,1001],
[1039,1017,1013,1048,927,1037,982,1065,975,990,1017,1000,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 187, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1015,966,1012,946,1047,936,958,992,997,951,974,994],
[986,0,1091,1056,1069,1111,993,999,964,984,1022,997,1113],
[1035,910,0,1000,1072,978,861,937,987,992,948,1021,977],
[989,945,1001,0,925,1032,960,1003,979,947,893,975,1029],
[1055,932,929,1076,0,1062,998,867,1042,998,922,990,998],
[954,890,1023,969,939,0,968,912,969,936,890,1012,920],
[1065,1008,1140,1041,1003,1033,0,977,987,943,953,968,989],
[1043,1002,1064,998,1134,1089,1024,0,1027,982,947,1124,1029],
[1009,1037,1014,1022,959,1032,1014,974,0,1018,879,1001,1069],
[1004,1017,1009,1054,1003,1065,1058,1019,983,0,913,1086,1041],
[1050,979,1053,1108,1079,1111,1048,1054,1122,1088,0,1035,1067],
[1027,1004,980,1026,1011,989,1033,877,1000,915,966,0,916],
[1007,888,1024,972,1003,1081,1012,972,932,960,934,1085,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 188, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1040,947,1027,1043,1100,1034,956,1128,1002,1107,1106,972],
[961,0,959,851,1101,987,1006,1063,1064,1119,937,1083,931],
[1054,1042,0,966,1003,955,1102,1044,1039,1175,1076,1077,1018],
[974,1150,1035,0,971,1093,993,938,960,1070,855,1148,979],
[958,900,998,1030,0,1014,970,1106,1062,1081,988,993,930],
[901,1014,1046,908,987,0,991,929,907,1039,937,984,999],
[967,995,899,1008,1031,1010,0,972,1091,1111,1041,1092,990],
[1045,938,957,1063,895,1072,1029,0,998,1212,1137,1103,1081],
[873,937,962,1041,939,1094,910,1003,0,1064,1077,999,988],
[999,882,826,931,920,962,890,789,937,0,970,1119,788],
[894,1064,925,1146,1013,1064,960,864,924,1031,0,1117,969],
[895,918,924,853,1008,1017,909,898,1002,882,884,0,966],
[1029,1070,983,1022,1071,1002,1011,920,1013,1213,1032,1035,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 189, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1029,965,967,1004,996,995,1030,1011,872,968,928,1034],
[972,0,968,977,948,933,960,1056,966,909,963,953,995],
[1036,1033,0,1058,981,1037,1028,1036,982,983,1038,1018,1024],
[1034,1024,943,0,981,968,1002,986,1027,933,1009,910,947],
[997,1053,1020,1020,0,986,1010,1034,977,918,963,972,1019],
[1005,1068,964,1033,1015,0,1007,1062,994,997,1001,964,1044],
[1006,1041,973,999,991,994,0,963,1009,960,972,963,1026],
[971,945,965,1015,967,939,1038,0,940,938,985,927,955],
[990,1035,1019,974,1024,1007,992,1061,0,986,992,989,1034],
[1129,1092,1018,1068,1083,1004,1041,1063,1015,0,1012,994,1062],
[1033,1038,963,992,1038,1000,1029,1016,1009,989,0,981,1039],
[1073,1048,983,1091,1029,1037,1038,1074,1012,1007,1020,0,1037],
[967,1006,977,1054,982,957,975,1046,967,939,962,964,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 190, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,957,1040,951,1041,934,1098,997,1059,993,960,998,987],
[1044,0,1077,985,1047,1038,1066,1057,1038,989,1047,1121,1022],
[961,924,0,936,971,950,998,955,1043,952,996,1003,975],
[1050,1016,1065,0,1098,1008,1124,1063,1103,1022,966,1045,1064],
[960,954,1030,903,0,944,987,944,996,980,1055,1105,1015],
[1067,963,1051,993,1057,0,1101,1097,1054,959,1053,1136,1069],
[903,935,1003,877,1014,900,0,899,985,899,909,942,936],
[1004,944,1046,938,1057,904,1102,0,989,960,997,1061,992],
[942,963,958,898,1005,947,1016,1012,0,928,959,1024,941],
[1008,1012,1049,979,1021,1042,1102,1041,1073,0,1016,1104,1014],
[1041,954,1005,1035,946,948,1092,1004,1042,985,0,1076,1019],
[1003,880,998,956,896,865,1059,940,977,897,925,0,1012],
[1014,979,1026,937,986,932,1065,1009,1060,987,982,989,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 191, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,963,983,915,970,974,1001,873,983,940,911,978,985],
[1038,0,1010,897,979,1011,960,951,958,1001,990,1007,982],
[1018,991,0,954,977,1026,1000,931,941,955,965,974,958],
[1086,1104,1047,0,1002,1034,1064,1048,953,1032,1028,1042,1042],
[1031,1022,1024,999,0,1072,990,976,1003,984,1004,1044,987],
[1027,990,975,967,929,0,1012,962,923,995,992,943,1000],
[1000,1041,1001,937,1011,989,0,898,968,976,996,957,909],
[1128,1050,1070,953,1025,1039,1103,0,1016,1034,1037,1056,1021],
[1018,1043,1060,1048,998,1078,1033,985,0,977,1005,1002,1008],
[1061,1000,1046,969,1017,1006,1025,967,1024,0,1013,1058,1016],
[1090,1011,1036,973,997,1009,1005,964,996,988,0,988,1017],
[1023,994,1027,959,957,1058,1044,945,999,943,1013,0,1054],
[1016,1019,1043,959,1014,1001,1092,980,993,985,984,947,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 192, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1004,1031,982,1008,1001,1002,994,990,1003,1002,1006,1010],
[997,0,974,1007,1004,982,989,995,1000,984,992,988,978],
[970,1027,0,980,1004,985,985,993,1002,960,1019,980,1004],
[1019,994,1021,0,1022,1028,1021,1021,1014,987,1005,1018,1005],
[993,997,997,979,0,995,973,992,992,971,969,989,977],
[1000,1019,1016,973,1006,0,954,969,1004,972,955,962,992],
[999,1012,1016,980,1028,1047,0,996,1005,1000,1024,1008,994],
[1007,1006,1008,980,1009,1032,1005,0,1006,985,1012,1009,1013],
[1011,1001,999,987,1009,997,996,995,0,974,1014,997,1017],
[998,1017,1041,1014,1030,1029,1001,1016,1027,0,996,1012,1024],
[999,1009,982,996,1032,1046,977,989,987,1005,0,1011,1011],
[995,1013,1021,983,1012,1039,993,992,1004,989,990,0,1022],
[991,1023,997,996,1024,1009,1007,988,984,977,990,979,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 193, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,987,1013,1025,954,973,979,997,994,1012,950,959,1008],
[1014,0,1021,1022,960,1000,967,1002,1013,991,957,955,966],
[988,980,0,1046,971,979,954,992,1008,982,977,978,988],
[976,979,955,0,972,997,962,1001,1001,975,947,944,1016],
[1047,1041,1030,1029,0,1011,1000,975,1056,1049,987,998,1005],
[1028,1001,1022,1004,990,0,992,991,1011,987,974,955,1000],
[1022,1034,1047,1039,1001,1009,0,1016,1047,1025,992,1014,1034],
[1004,999,1009,1000,1026,1010,985,0,1042,995,985,985,1001],
[1007,988,993,1000,945,990,954,959,0,971,939,999,968],
[989,1010,1019,1026,952,1014,976,1006,1030,0,980,932,1000],
[1051,1044,1024,1054,1014,1027,1009,1016,1062,1021,0,1002,993],
[1042,1046,1023,1057,1003,1046,987,1016,1002,1069,999,0,1018],
[993,1035,1013,985,996,1001,967,1000,1033,1001,1008,983,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 194, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,958,972,1000,1004,1001,972,982,983,979,1008,979,960],
[1043,0,995,1050,1057,1039,1064,1008,1034,994,1028,1009,967],
[1029,1006,0,1038,1008,1037,1029,1007,980,1008,999,992,964],
[1001,951,963,0,999,983,991,989,999,975,997,959,970],
[997,944,993,1002,0,997,1046,992,978,967,972,964,975],
[1000,962,964,1018,1004,0,963,1000,985,972,976,955,968],
[1029,937,972,1010,955,1038,0,975,989,974,982,990,942],
[1019,993,994,1012,1009,1001,1026,0,1011,989,1020,978,991],
[1018,967,1021,1002,1023,1016,1012,990,0,974,990,999,981],
[1022,1007,993,1026,1034,1029,1027,1012,1027,0,1028,986,1013],
[993,973,1002,1004,1029,1025,1019,981,1011,973,0,980,977],
[1022,992,1009,1042,1037,1046,1011,1023,1002,1015,1021,0,1001],
[1041,1034,1037,1031,1026,1033,1059,1010,1020,988,1024,1000,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 195, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,927,1027,1019,1055,1063,1024,1043,917,937,990,1058,1071],
[1074,0,1009,1033,1142,1091,1003,1040,959,1003,1031,1025,1019],
[974,992,0,975,1025,1029,1046,1039,952,1030,967,1055,991],
[982,968,1026,0,1057,1033,989,1065,1008,985,1014,1056,1056],
[946,859,976,944,0,997,976,939,928,954,926,1028,1036],
[938,910,972,968,1004,0,992,983,935,948,944,975,956],
[977,998,955,1012,1025,1009,0,991,966,1041,990,1025,1027],
[958,961,962,936,1062,1018,1010,0,939,974,998,1015,1031],
[1084,1042,1049,993,1073,1066,1035,1062,0,1006,1024,1091,1054],
[1064,998,971,1016,1047,1053,960,1027,995,0,1009,1049,1012],
[1011,970,1034,987,1075,1057,1011,1003,977,992,0,1007,1018],
[943,976,946,945,973,1026,976,986,910,952,994,0,1046],
[930,982,1010,945,965,1045,974,970,947,989,983,955,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 196, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1017,986,983,976,1003,973,987,972,980,952,1008,1078],
[984,0,982,952,961,969,955,954,959,987,980,964,1048],
[1015,1019,0,1029,1001,1002,978,986,1012,974,963,1006,1034],
[1018,1049,972,0,991,1007,1026,986,984,966,969,989,1098],
[1025,1040,1000,1010,0,988,989,998,1036,975,958,1012,1077],
[998,1032,999,994,1013,0,1003,1009,994,1001,951,1024,1069],
[1028,1046,1023,975,1012,998,0,992,1023,993,1009,1015,1043],
[1014,1047,1015,1015,1003,992,1009,0,1006,999,982,988,1100],
[1029,1042,989,1017,965,1007,978,995,0,984,977,1006,1052],
[1021,1014,1027,1035,1026,1000,1008,1002,1017,0,967,1025,1099],
[1049,1021,1038,1032,1043,1050,992,1019,1024,1034,0,1048,1117],
[993,1037,995,1012,989,977,986,1013,995,976,953,0,1042],
[923,953,967,903,924,932,958,901,949,902,884,959,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 197, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,988,999,992,976,1001,950,996,1001,986,990,995,990],
[1013,0,1008,1022,965,1034,998,1015,987,1017,998,989,999],
[1002,993,0,1025,1010,1037,959,1004,1023,994,988,979,1011],
[1009,979,976,0,1018,1015,981,1008,992,1010,966,1000,985],
[1025,1036,991,983,0,1006,1003,1022,1010,1044,1028,995,1009],
[1000,967,964,986,995,0,972,996,987,1013,980,998,1016],
[1051,1003,1042,1020,998,1029,0,1025,1022,1048,1025,1026,1020],
[1005,986,997,993,979,1005,976,0,1025,1012,1010,987,1025],
[1000,1014,978,1009,991,1014,979,976,0,1008,1001,991,1013],
[1015,984,1007,991,957,988,953,989,993,0,974,1010,975],
[1011,1003,1013,1035,973,1021,976,991,1000,1027,0,1011,998],
[1006,1012,1022,1001,1006,1003,975,1014,1010,991,990,0,1007],
[1011,1002,990,1016,992,985,981,976,988,1026,1003,994,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 198, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,983,1045,985,991,993,1017,1014,962,1012,1028,961,1005],
[1018,0,1033,1008,1013,982,1027,1016,988,996,990,991,974],
[956,968,0,991,1023,993,1013,989,985,1023,966,986,985],
[1016,993,1010,0,976,1004,1027,992,984,1030,992,987,994],
[1010,988,978,1025,0,974,1015,1015,990,1017,1006,969,1005],
[1008,1019,1008,997,1027,0,1062,1044,992,1012,1040,976,985],
[984,974,988,974,986,939,0,1003,969,969,946,969,975],
[987,985,1012,1009,986,957,998,0,982,1016,1006,1005,988],
[1039,1013,1016,1017,1011,1009,1032,1019,0,1023,1022,1027,992],
[989,1005,978,971,984,989,1032,985,978,0,1006,998,965],
[973,1011,1035,1009,995,961,1055,995,979,995,0,982,986],
[1040,1010,1015,1014,1032,1025,1032,996,974,1003,1019,0,998],
[996,1027,1016,1007,996,1016,1026,1013,1009,1036,1015,1003,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 199, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,986,985,1027,975,1010,1027,948,976,943,987,1032,965],
[1015,0,1003,1030,961,1022,1013,999,986,968,1005,1027,1005],
[1016,998,0,998,921,1052,1039,983,971,952,1021,1006,998],
[974,971,1003,0,939,1002,1014,988,989,1000,982,1029,976],
[1026,1040,1080,1062,0,1062,1052,1048,991,970,982,1056,1060],
[991,979,949,999,939,0,1008,964,999,994,977,1030,989],
[974,988,962,987,949,993,0,967,932,954,997,995,925],
[1053,1002,1018,1013,953,1037,1034,0,1031,983,1023,1042,1007],
[1025,1015,1030,1012,1010,1002,1069,970,0,980,1056,1050,1033],
[1058,1033,1049,1001,1031,1007,1047,1018,1021,0,944,1065,1050],
[1014,996,980,1019,1019,1024,1004,978,945,1057,0,1091,1028],
[969,974,995,972,945,971,1006,959,951,936,910,0,961],
[1036,996,1003,1025,941,1012,1076,994,968,951,973,1040,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2001, 200, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebbrcwd/mebbrcwd_13_2001.csv", index=False, header=False)
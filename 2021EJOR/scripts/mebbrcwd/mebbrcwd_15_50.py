
import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg
from kemeny import sc

rep = 1
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,12,20,27,24,16,22,31,15,19,19,13,7,40,23],
[38,0,35,33,27,29,23,30,23,19,29,24,33,43,36],
[30,15,0,28,10,22,14,27,16,24,29,21,26,38,34],
[23,17,22,0,26,18,25,11,8,22,25,19,16,33,37],
[26,23,40,24,0,31,20,29,26,16,30,25,24,38,29],
[34,21,28,32,19,0,19,36,25,25,23,22,25,36,31],
[28,27,36,25,30,31,0,25,15,35,33,27,25,35,40],
[19,20,23,39,21,14,25,0,7,21,22,21,20,31,31],
[35,27,34,42,24,25,35,43,0,30,37,30,36,41,39],
[31,31,26,28,34,25,15,29,20,0,34,25,26,48,36],
[31,21,21,25,20,27,17,28,13,16,0,22,21,37,29],
[37,26,29,31,25,28,23,29,20,25,28,0,23,32,34],
[43,17,24,34,26,25,25,30,14,24,29,27,0,35,30],
[10,7,12,17,12,14,15,19,9,2,13,18,15,0,20],
[27,14,16,13,21,19,10,19,11,14,21,16,20,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 1, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,23,25,19,23,21,23,20,21,20,22,19,23,19],
[27,0,24,27,28,26,26,26,19,26,23,25,23,23,18],
[27,26,0,24,23,28,26,27,19,28,24,24,23,28,24],
[25,23,26,0,24,26,23,26,25,28,25,23,18,23,22],
[31,22,27,26,0,31,24,26,27,26,27,25,24,26,25],
[27,24,22,24,19,0,23,25,19,23,24,24,22,20,19],
[29,24,24,27,26,27,0,27,21,31,23,23,26,21,21],
[27,24,23,24,24,25,23,0,21,22,25,21,22,24,16],
[30,31,31,25,23,31,29,29,0,31,31,27,30,24,28],
[29,24,22,22,24,27,19,28,19,0,21,24,20,19,19],
[30,27,26,25,23,26,27,25,19,29,0,23,28,26,25],
[28,25,26,27,25,26,27,29,23,26,27,0,26,24,23],
[31,27,27,32,26,28,24,28,20,30,22,24,0,25,24],
[27,27,22,27,24,30,29,26,26,31,24,26,25,0,20],
[31,32,26,28,25,31,29,34,22,31,25,27,26,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 2, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,31,29,30,27,22,24,28,22,24,25,30,27,25],
[24,0,26,27,24,24,19,22,19,20,25,23,26,22,21],
[19,24,0,24,25,28,18,23,21,17,29,27,24,23,20],
[21,23,26,0,26,21,19,24,18,18,26,25,31,23,20],
[20,26,25,24,0,25,18,24,26,22,28,27,28,29,20],
[23,26,22,29,25,0,19,25,23,22,30,28,29,26,22],
[28,31,32,31,32,31,0,27,26,30,31,29,30,28,22],
[26,28,27,26,26,25,23,0,22,23,29,23,27,28,22],
[22,31,29,32,24,27,24,28,0,26,35,30,32,32,23],
[28,30,33,32,28,28,20,27,24,0,28,30,32,29,24],
[26,25,21,24,22,20,19,21,15,22,0,24,27,25,20],
[25,27,23,25,23,22,21,27,20,20,26,0,26,30,17],
[20,24,26,19,22,21,20,23,18,18,23,24,0,23,18],
[23,28,27,27,21,24,22,22,18,21,25,20,27,0,20],
[25,29,30,30,30,28,28,28,27,26,30,33,32,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 3, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,22,23,29,24,24,24,27,27,28,26,28,22,29],
[28,0,30,25,29,24,27,25,29,25,28,25,28,24,30],
[28,20,0,24,29,25,22,26,27,26,31,27,29,20,28],
[27,25,26,0,30,28,30,28,30,28,26,29,29,26,29],
[21,21,21,20,0,22,23,19,25,23,24,21,26,20,24],
[26,26,25,22,28,0,28,27,28,28,29,29,26,25,29],
[26,23,28,20,27,22,0,22,23,19,21,22,30,18,23],
[26,25,24,22,31,23,28,0,27,27,23,23,31,23,29],
[23,21,23,20,25,22,27,23,0,24,26,25,25,21,26],
[23,25,24,22,27,22,31,23,26,0,26,23,25,21,21],
[22,22,19,24,26,21,29,27,24,24,0,24,27,23,27],
[24,25,23,21,29,21,28,27,25,27,26,0,29,19,25],
[22,22,21,21,24,24,20,19,25,25,23,21,0,17,25],
[28,26,30,24,30,25,32,27,29,29,27,31,33,0,29],
[21,20,22,21,26,21,27,21,24,29,23,25,25,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 4, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,22,33,23,34,21,31,25,24,35,31,21,27,24],
[18,0,31,31,28,21,27,15,26,27,34,26,28,23,24],
[28,19,0,33,18,27,15,29,22,32,24,29,21,23,23],
[17,19,17,0,16,22,24,23,17,22,33,30,23,22,18],
[27,22,32,34,0,33,27,25,20,27,39,31,22,27,25],
[16,29,23,28,17,0,19,23,24,21,33,30,23,31,14],
[29,23,35,26,23,31,0,26,31,35,40,35,34,32,29],
[19,35,21,27,25,27,24,0,15,23,34,33,21,27,28],
[25,24,28,33,30,26,19,35,0,26,36,32,27,21,30],
[26,23,18,28,23,29,15,27,24,0,29,31,18,27,19],
[15,16,26,17,11,17,10,16,14,21,0,31,20,18,12],
[19,24,21,20,19,20,15,17,18,19,19,0,16,16,17],
[29,22,29,27,28,27,16,29,23,32,30,34,0,25,25],
[23,27,27,28,23,19,18,23,29,23,32,34,25,0,23],
[26,26,27,32,25,36,21,22,20,31,38,33,25,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 5, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,27,27,27,28,30,27,25,28,25,27,32,26],
[22,0,28,23,25,26,28,31,22,31,26,24,28,27,20],
[24,22,0,28,27,32,31,33,24,32,26,26,28,34,22],
[23,27,22,0,29,27,28,33,25,28,26,25,22,24,27],
[23,25,23,21,0,25,25,24,20,27,24,18,18,26,21],
[23,24,18,23,25,0,26,28,14,25,26,19,25,21,24],
[22,22,19,22,25,24,0,31,21,28,23,24,24,24,27],
[20,19,17,17,26,22,19,0,15,28,22,19,15,24,22],
[23,28,26,25,30,36,29,35,0,34,29,27,27,30,26],
[25,19,18,22,23,25,22,22,16,0,25,24,19,20,20],
[22,24,24,24,26,24,27,28,21,25,0,23,22,25,24],
[25,26,24,25,32,31,26,31,23,26,27,0,24,25,21],
[23,22,22,28,32,25,26,35,23,31,28,26,0,29,25],
[18,23,16,26,24,29,26,26,20,30,25,25,21,0,27],
[24,30,28,23,29,26,23,28,24,30,26,29,25,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 6, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,25,28,23,28,31,36,28,30,28,35,31,35,23],
[40,0,34,19,19,26,34,34,27,26,19,33,31,25,18],
[25,16,0,19,21,25,22,26,26,25,26,26,22,25,25],
[22,31,31,0,11,23,28,23,37,33,17,33,22,15,15],
[27,31,29,39,0,29,21,39,30,45,23,38,46,27,20],
[22,24,25,27,21,0,21,29,23,37,23,38,30,20,8],
[19,16,28,22,29,29,0,38,27,37,13,30,31,20,4],
[14,16,24,27,11,21,12,0,14,29,14,37,21,12,5],
[22,23,24,13,20,27,23,36,0,28,20,37,17,20,0],
[20,24,25,17,5,13,13,21,22,0,6,38,22,13,5],
[22,31,24,33,27,27,37,36,30,44,0,42,38,22,15],
[15,17,24,17,12,12,20,13,13,12,8,0,29,15,8],
[19,19,28,28,4,20,19,29,33,28,12,21,0,19,19],
[15,25,25,35,23,30,30,38,30,37,28,35,31,0,24],
[27,32,25,35,30,42,46,45,50,45,35,42,31,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 7, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,27,23,30,24,32,27,27,24,29,27,25,24,30],
[20,0,21,18,15,18,23,19,21,25,18,22,25,24,21],
[23,29,0,20,22,19,30,19,24,28,23,21,28,22,27],
[27,32,30,0,34,31,38,28,29,30,27,24,29,31,32],
[20,35,28,16,0,27,25,22,29,24,23,23,26,27,23],
[26,32,31,19,23,0,30,26,21,24,24,22,27,28,27],
[18,27,20,12,25,20,0,20,19,25,23,18,22,26,23],
[23,31,31,22,28,24,30,0,31,29,26,29,31,29,31],
[23,29,26,21,21,29,31,19,0,24,19,28,29,29,22],
[26,25,22,20,26,26,25,21,26,0,28,26,25,23,25],
[21,32,27,23,27,26,27,24,31,22,0,24,28,24,26],
[23,28,29,26,27,28,32,21,22,24,26,0,26,17,28],
[25,25,22,21,24,23,28,19,21,25,22,24,0,25,27],
[26,26,28,19,23,22,24,21,21,27,26,33,25,0,28],
[20,29,23,18,27,23,27,19,28,25,24,22,23,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 8, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,14,15,24,17,21,21,21,21,14,25,19,21,17],
[31,0,21,24,26,20,27,30,23,23,26,34,28,28,24],
[36,29,0,23,33,28,24,35,32,30,28,32,32,30,27],
[35,26,27,0,27,28,22,26,28,30,27,33,26,28,30],
[26,24,17,23,0,26,16,21,22,21,21,27,23,20,23],
[33,30,22,22,24,0,22,24,23,33,27,29,31,21,25],
[29,23,26,28,34,28,0,32,24,28,27,38,27,27,32],
[29,20,15,24,29,26,18,0,26,24,22,29,28,21,21],
[29,27,18,22,28,27,26,24,0,26,29,32,27,28,27],
[29,27,20,20,29,17,22,26,24,0,23,28,26,20,20],
[36,24,22,23,29,23,23,28,21,27,0,32,27,25,23],
[25,16,18,17,23,21,12,21,18,22,18,0,17,14,19],
[31,22,18,24,27,19,23,22,23,24,23,33,0,29,27],
[29,22,20,22,30,29,23,29,22,30,25,36,21,0,28],
[33,26,23,20,27,25,18,29,23,30,27,31,23,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 9, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,17,27,19,19,22,14,10,20,11,16,20,20,20],
[29,0,25,40,29,21,28,23,23,25,25,27,23,31,27],
[33,25,0,32,22,29,29,23,31,34,26,22,15,19,30],
[23,10,18,0,12,11,21,13,22,22,15,10,11,12,17],
[31,21,28,38,0,27,30,21,26,29,14,26,24,27,31],
[31,29,21,39,23,0,26,21,23,27,12,23,15,31,24],
[28,22,21,29,20,24,0,24,28,38,20,27,17,21,25],
[36,27,27,37,29,29,26,0,28,32,22,26,31,29,34],
[40,27,19,28,24,27,22,22,0,22,19,19,18,23,25],
[30,25,16,28,21,23,12,18,28,0,24,24,20,21,17],
[39,25,24,35,36,38,30,28,31,26,0,21,23,26,29],
[34,23,28,40,24,27,23,24,31,26,29,0,23,37,25],
[30,27,35,39,26,35,33,19,32,30,27,27,0,37,29],
[30,19,31,38,23,19,29,21,27,29,24,13,13,0,22],
[30,23,20,33,19,26,25,16,25,33,21,25,21,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 10, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,34,27,37,39,31,34,27,41,20,38,35,36,21],
[14,0,35,23,21,34,27,37,22,35,26,27,34,27,25],
[16,15,0,18,15,16,15,19,17,20,11,15,21,22,11],
[23,27,32,0,26,23,16,25,19,26,21,24,28,24,24],
[13,29,35,24,0,28,37,31,24,24,24,28,30,31,24],
[11,16,34,27,22,0,16,19,12,39,21,29,31,23,15],
[19,23,35,34,13,34,0,25,11,35,27,27,38,30,23],
[16,13,31,25,19,31,25,0,16,31,17,34,32,24,18],
[23,28,33,31,26,38,39,34,0,40,36,40,38,26,30],
[9,15,30,24,26,11,15,19,10,0,7,11,11,20,1],
[30,24,39,29,26,29,23,33,14,43,0,32,33,36,25],
[12,23,35,26,22,21,23,16,10,39,18,0,25,21,13],
[15,16,29,22,20,19,12,18,12,39,17,25,0,27,15],
[14,23,28,26,19,27,20,26,24,30,14,29,23,0,15],
[29,25,39,26,26,35,27,32,20,49,25,37,35,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 11, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,26,29,30,23,28,27,25,33,28,32,38,29,31],
[25,0,30,30,32,28,29,27,26,31,26,29,33,30,29],
[24,20,0,23,29,20,28,23,23,30,24,33,31,21,26],
[21,20,27,0,29,23,27,23,28,29,27,29,27,22,30],
[20,18,21,21,0,22,24,19,19,27,19,28,30,22,25],
[27,22,30,27,28,0,28,26,28,27,25,34,27,23,27],
[22,21,22,23,26,22,0,21,22,25,22,30,23,19,23],
[23,23,27,27,31,24,29,0,29,30,27,35,31,23,29],
[25,24,27,22,31,22,28,21,0,30,26,33,35,26,25],
[17,19,20,21,23,23,25,20,20,0,23,25,29,20,28],
[22,24,26,23,31,25,28,23,24,27,0,30,29,24,27],
[18,21,17,21,22,16,20,15,17,25,20,0,23,16,21],
[12,17,19,23,20,23,27,19,15,21,21,27,0,25,23],
[21,20,29,28,28,27,31,27,24,30,26,34,25,0,25],
[19,21,24,20,25,23,27,21,25,22,23,29,27,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 12, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,20,26,20,18,20,27,26,27,17,28,27,20,29],
[30,0,26,31,21,22,24,31,28,23,23,27,27,23,25],
[30,24,0,30,30,29,29,34,28,32,29,37,28,26,31],
[24,19,20,0,21,18,21,27,26,19,18,26,25,23,30],
[30,29,20,29,0,14,21,29,29,28,24,26,31,23,29],
[32,28,21,32,36,0,32,33,28,31,30,40,28,28,30],
[30,26,21,29,29,18,0,30,30,27,21,36,26,23,27],
[23,19,16,23,21,17,20,0,22,22,22,27,22,20,27],
[24,22,22,24,21,22,20,28,0,24,17,29,24,20,26],
[23,27,18,31,22,19,23,28,26,0,23,32,27,13,27],
[33,27,21,32,26,20,29,28,33,27,0,36,28,20,29],
[22,23,13,24,24,10,14,23,21,18,14,0,16,18,19],
[23,23,22,25,19,22,24,28,26,23,22,34,0,22,25],
[30,27,24,27,27,22,27,30,30,37,30,32,28,0,28],
[21,25,19,20,21,20,23,23,24,23,21,31,25,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 13, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,20,24,27,22,29,22,22,30,24,25,28,28,19],
[22,0,18,25,25,22,30,22,26,29,28,28,27,26,18],
[30,32,0,31,32,27,35,29,26,38,33,30,25,30,24],
[26,25,19,0,20,28,27,21,25,26,19,27,21,28,23],
[23,25,18,30,0,23,32,20,24,31,25,30,27,29,20],
[28,28,23,22,27,0,34,22,26,29,30,28,26,27,23],
[21,20,15,23,18,16,0,17,21,25,24,22,17,25,20],
[28,28,21,29,30,28,33,0,27,30,30,30,24,32,25],
[28,24,24,25,26,24,29,23,0,31,24,26,24,28,20],
[20,21,12,24,19,21,25,20,19,0,24,24,19,25,14],
[26,22,17,31,25,20,26,20,26,26,0,27,24,24,23],
[25,22,20,23,20,22,28,20,24,26,23,0,20,24,20],
[22,23,25,29,23,24,33,26,26,31,26,30,0,27,22],
[22,24,20,22,21,23,25,18,22,25,26,26,23,0,20],
[31,32,26,27,30,27,30,25,30,36,27,30,28,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 14, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,22,21,17,19,21,24,21,28,25,25,28,23,22],
[28,0,25,22,26,24,29,26,25,31,28,30,29,24,28],
[28,25,0,25,23,25,30,31,26,32,31,34,29,28,25],
[29,28,25,0,26,26,30,27,27,27,34,34,31,28,28],
[33,24,27,24,0,24,31,32,27,31,30,34,30,26,28],
[31,26,25,24,26,0,30,31,26,30,23,32,29,29,31],
[29,21,20,20,19,20,0,23,17,28,26,29,25,23,25],
[26,24,19,23,18,19,27,0,21,28,30,28,20,23,28],
[29,25,24,23,23,24,33,29,0,34,28,32,25,24,29],
[22,19,18,23,19,20,22,22,16,0,23,23,23,17,20],
[25,22,19,16,20,27,24,20,22,27,0,30,24,25,24],
[25,20,16,16,16,18,21,22,18,27,20,0,25,24,25],
[22,21,21,19,20,21,25,30,25,27,26,25,0,26,26],
[27,26,22,22,24,21,27,27,26,33,25,26,24,0,26],
[28,22,25,22,22,19,25,22,21,30,26,25,24,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 15, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,28,25,26,21,31,20,12,14,20,29,26,22,23],
[22,0,26,18,21,29,22,28,14,20,26,23,24,19,23],
[22,24,0,19,20,27,26,22,20,14,27,22,28,21,22],
[25,32,31,0,27,22,28,28,17,18,24,28,29,23,26],
[24,29,30,23,0,22,20,24,16,17,27,26,35,25,29],
[29,21,23,28,28,0,25,27,20,23,22,26,32,24,28],
[19,28,24,22,30,25,0,31,23,22,23,33,26,27,27],
[30,22,28,22,26,23,19,0,12,18,26,26,29,21,20],
[38,36,30,33,34,30,27,38,0,22,30,34,33,29,30],
[36,30,36,32,33,27,28,32,28,0,25,32,31,23,32],
[30,24,23,26,23,28,27,24,20,25,0,31,34,23,22],
[21,27,28,22,24,24,17,24,16,18,19,0,26,17,26],
[24,26,22,21,15,18,24,21,17,19,16,24,0,19,10],
[28,31,29,27,25,26,23,29,21,27,27,33,31,0,23],
[27,27,28,24,21,22,23,30,20,18,28,24,40,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 16, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,37,33,44,24,35,25,34,22,31,34,38,27,41],
[15,0,22,15,25,17,9,11,23,17,17,26,14,9,22],
[13,28,0,19,41,21,29,18,29,22,20,32,18,16,25],
[17,35,31,0,42,32,31,29,31,35,32,32,23,27,23],
[6,25,9,8,0,13,10,8,17,19,12,15,9,12,8],
[26,33,29,18,37,0,17,19,28,25,29,26,28,12,20],
[15,41,21,19,40,33,0,14,30,18,15,31,27,16,22],
[25,39,32,21,42,31,36,0,28,22,25,38,29,28,36],
[16,27,21,19,33,22,20,22,0,21,26,23,16,24,22],
[28,33,28,15,31,25,32,28,29,0,29,26,28,15,26],
[19,33,30,18,38,21,35,25,24,21,0,29,21,24,35],
[16,24,18,18,35,24,19,12,27,24,21,0,20,13,17],
[12,36,32,27,41,22,23,21,34,22,29,30,0,21,33],
[23,41,34,23,38,38,34,22,26,35,26,37,29,0,38],
[9,28,25,27,42,30,28,14,28,24,15,33,17,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 17, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,21,15,20,21,21,23,20,20,23,23,21,19,16],
[29,0,32,27,34,34,30,37,32,30,32,29,27,25,28],
[29,18,0,24,29,27,23,26,26,22,25,23,20,20,17],
[35,23,26,0,30,33,24,31,25,28,31,24,27,23,23],
[30,16,21,20,0,24,23,26,20,20,29,21,21,19,24],
[29,16,23,17,26,0,24,27,28,23,22,22,22,20,19],
[29,20,27,26,27,26,0,28,26,21,29,24,27,22,24],
[27,13,24,19,24,23,22,0,21,23,27,23,25,18,20],
[30,18,24,25,30,22,24,29,0,29,25,25,17,21,19],
[30,20,28,22,30,27,29,27,21,0,31,25,28,22,21],
[27,18,25,19,21,28,21,23,25,19,0,23,28,20,22],
[27,21,27,26,29,28,26,27,25,25,27,0,24,21,25],
[29,23,30,23,29,28,23,25,33,22,22,26,0,24,24],
[31,25,30,27,31,30,28,32,29,28,30,29,26,0,29],
[34,22,33,27,26,31,26,30,31,29,28,25,26,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 18, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,29,26,38,21,27,42,23,34,20,17,31,42,30],
[22,0,23,30,36,24,29,35,31,37,32,19,25,28,28],
[21,27,0,23,28,25,14,31,18,26,25,26,34,38,29],
[24,20,27,0,32,14,22,25,25,32,11,14,25,36,24],
[12,14,22,18,0,20,33,35,22,36,21,16,22,30,19],
[29,26,25,36,30,0,22,36,27,29,24,17,22,32,31],
[23,21,36,28,17,28,0,36,24,27,25,20,34,35,19],
[8,15,19,25,15,14,14,0,19,23,17,10,21,25,15],
[27,19,32,25,28,23,26,31,0,44,20,16,28,31,26],
[16,13,24,18,14,21,23,27,6,0,17,17,24,22,16],
[30,18,25,39,29,26,25,33,30,33,0,21,34,38,22],
[33,31,24,36,34,33,30,40,34,33,29,0,44,38,27],
[19,25,16,25,28,28,16,29,22,26,16,6,0,27,11],
[8,22,12,14,20,18,15,25,19,28,12,12,23,0,4],
[20,22,21,26,31,19,31,35,24,34,28,23,39,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 19, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,24,21,24,24,24,14,21,22,18,27,13,20,33],
[27,0,14,25,22,22,18,24,13,19,20,24,23,19,31],
[26,36,0,31,30,32,33,30,24,33,23,33,30,34,33],
[29,25,19,0,22,32,22,26,19,19,29,24,20,17,38],
[26,28,20,28,0,36,25,23,28,31,32,26,25,20,32],
[26,28,18,18,14,0,11,19,14,20,29,25,21,21,35],
[26,32,17,28,25,39,0,28,23,30,26,31,29,24,35],
[36,26,20,24,27,31,22,0,17,23,28,22,19,24,36],
[29,37,26,31,22,36,27,33,0,28,27,30,28,26,41],
[28,31,17,31,19,30,20,27,22,0,23,28,27,20,34],
[32,30,27,21,18,21,24,22,23,27,0,28,20,22,35],
[23,26,17,26,24,25,19,28,20,22,22,0,23,20,38],
[37,27,20,30,25,29,21,31,22,23,30,27,0,23,39],
[30,31,16,33,30,29,26,26,24,30,28,30,27,0,35],
[17,19,17,12,18,15,15,14,9,16,15,12,11,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 20, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,28,33,31,24,24,26,32,26,24,33,33,36,26],
[22,0,24,26,27,25,21,22,21,17,18,20,30,25,25],
[22,26,0,28,24,20,16,32,24,15,16,23,23,22,26],
[17,24,22,0,25,19,20,18,29,17,16,19,28,22,18],
[19,23,26,25,0,22,22,27,29,19,16,26,19,18,22],
[26,25,30,31,28,0,15,26,27,18,22,22,21,25,30],
[26,29,34,30,28,35,0,32,36,24,30,23,32,37,27],
[24,28,18,32,23,24,18,0,27,22,23,29,27,32,25],
[18,29,26,21,21,23,14,23,0,15,18,19,24,21,20],
[24,33,35,33,31,32,26,28,35,0,28,35,27,36,28],
[26,32,34,34,34,28,20,27,32,22,0,25,29,31,30],
[17,30,27,31,24,28,27,21,31,15,25,0,27,33,28],
[17,20,27,22,31,29,18,23,26,23,21,23,0,27,19],
[14,25,28,28,32,25,13,18,29,14,19,17,23,0,22],
[24,25,24,32,28,20,23,25,30,22,20,22,31,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 21, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,20,25,27,23,27,31,21,29,27,30,25,28,23],
[19,0,23,24,22,25,25,29,24,27,24,28,24,26,24],
[30,27,0,22,25,22,24,29,24,26,24,26,23,22,25],
[25,26,28,0,25,27,27,24,23,26,25,28,29,23,26],
[23,28,25,25,0,18,24,30,20,26,24,31,23,26,24],
[27,25,28,23,32,0,30,30,29,28,25,32,30,28,26],
[23,25,26,23,26,20,0,27,23,25,24,28,25,24,26],
[19,21,21,26,20,20,23,0,19,26,28,22,24,23,21],
[29,26,26,27,30,21,27,31,0,28,22,32,25,30,26],
[21,23,24,24,24,22,25,24,22,0,21,23,18,25,21],
[23,26,26,25,26,25,26,22,28,29,0,28,22,28,27],
[20,22,24,22,19,18,22,28,18,27,22,0,22,22,23],
[25,26,27,21,27,20,25,26,25,32,28,28,0,27,26],
[22,24,28,27,24,22,26,27,20,25,22,28,23,0,24],
[27,26,25,24,26,24,24,29,24,29,23,27,24,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 22, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,16,23,23,22,22,27,20,22,27,21,22,27,22],
[22,0,24,25,24,22,22,19,18,24,27,22,22,32,21],
[34,26,0,31,27,27,26,28,23,30,29,25,30,32,25],
[27,25,19,0,19,24,30,24,19,20,29,22,27,27,28],
[27,26,23,31,0,28,25,28,19,33,29,25,23,29,26],
[28,28,23,26,22,0,30,26,17,22,24,26,29,28,26],
[28,28,24,20,25,20,0,31,20,24,25,23,30,28,24],
[23,31,22,26,22,24,19,0,19,22,28,23,31,24,25],
[30,32,27,31,31,33,30,31,0,35,27,24,34,29,26],
[28,26,20,30,17,28,26,28,15,0,26,23,23,24,23],
[23,23,21,21,21,26,25,22,23,24,0,28,23,25,26],
[29,28,25,28,25,24,27,27,26,27,22,0,30,26,31],
[28,28,20,23,27,21,20,19,16,27,27,20,0,26,19],
[23,18,18,23,21,22,22,26,21,26,25,24,24,0,23],
[28,29,25,22,24,24,26,25,24,27,24,19,31,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 23, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,39,30,27,22,23,11,20,27,19,25,20,13,20],
[12,0,18,18,14,16,35,16,14,16,29,25,14,13,12],
[11,32,0,20,21,27,22,11,25,27,30,30,14,13,25],
[20,32,30,0,34,32,24,24,40,34,18,26,32,18,30],
[23,36,29,16,0,27,27,21,35,16,29,25,31,34,23],
[28,34,23,18,23,0,21,21,24,23,21,29,20,15,17],
[27,15,28,26,23,29,0,19,24,29,16,24,16,7,25],
[39,34,39,26,29,29,31,0,35,35,19,35,27,24,25],
[30,36,25,10,15,26,26,15,0,7,23,18,29,18,16],
[23,34,23,16,34,27,21,15,43,0,23,13,29,28,17],
[31,21,20,32,21,29,34,31,27,27,0,38,16,13,27],
[25,25,20,24,25,21,26,15,32,37,12,0,18,17,19],
[30,36,36,18,19,30,34,23,21,21,34,32,0,13,30],
[37,37,37,32,16,35,43,26,32,22,37,33,37,0,31],
[30,38,25,20,27,33,25,25,34,33,23,31,20,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 24, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,30,29,28,23,28,21,30,29,33,25,27,30,29],
[22,0,22,22,28,22,23,23,21,31,28,21,23,25,24],
[20,28,0,22,24,25,23,24,22,27,24,21,23,26,28],
[21,28,28,0,28,24,25,25,26,29,27,26,27,29,32],
[22,22,26,22,0,26,22,22,28,25,21,19,27,27,22],
[27,28,25,26,24,0,24,24,27,26,24,24,25,24,31],
[22,27,27,25,28,26,0,21,26,30,28,25,27,31,29],
[29,27,26,25,28,26,29,0,29,28,29,26,28,29,26],
[20,29,28,24,22,23,24,21,0,26,24,24,23,25,29],
[21,19,23,21,25,24,20,22,24,0,22,20,24,28,24],
[17,22,26,23,29,26,22,21,26,28,0,22,24,27,23],
[25,29,29,24,31,26,25,24,26,30,28,0,25,26,30],
[23,27,27,23,23,25,23,22,27,26,26,25,0,22,28],
[20,25,24,21,23,26,19,21,25,22,23,24,28,0,26],
[21,26,22,18,28,19,21,24,21,26,27,20,22,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 25, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,27,31,28,26,24,26,37,28,20,27,33,32,22],
[28,0,26,23,35,31,34,25,32,31,24,33,30,31,15],
[23,24,0,20,29,31,26,16,23,23,19,34,17,19,17],
[19,27,30,0,34,29,31,25,27,29,17,27,21,31,15],
[22,15,21,16,0,28,20,23,26,29,20,23,24,23,23],
[24,19,19,21,22,0,21,15,21,25,16,20,23,28,18],
[26,16,24,19,30,29,0,27,27,29,21,27,25,25,15],
[24,25,34,25,27,35,23,0,28,39,27,31,29,31,22],
[13,18,27,23,24,29,23,22,0,29,21,29,26,25,16],
[22,19,27,21,21,25,21,11,21,0,14,25,23,29,20],
[30,26,31,33,30,34,29,23,29,36,0,32,33,34,30],
[23,17,16,23,27,30,23,19,21,25,18,0,25,22,25],
[17,20,33,29,26,27,25,21,24,27,17,25,0,28,17],
[18,19,31,19,27,22,25,19,25,21,16,28,22,0,17],
[28,35,33,35,27,32,35,28,34,30,20,25,33,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 26, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,32,22,30,22,29,28,37,31,30,27,28,34,29],
[26,0,30,26,33,22,26,31,33,34,33,21,29,27,28],
[18,20,0,18,26,17,23,23,30,27,30,19,20,29,19],
[28,24,32,0,30,27,25,38,32,30,29,23,23,38,24],
[20,17,24,20,0,20,16,25,26,23,25,16,22,28,18],
[28,28,33,23,30,0,30,26,27,28,31,23,31,32,25],
[21,24,27,25,34,20,0,24,31,18,24,17,26,24,18],
[22,19,27,12,25,24,26,0,37,26,29,25,29,27,22],
[13,17,20,18,24,23,19,13,0,19,20,19,18,26,18],
[19,16,23,20,27,22,32,24,31,0,25,18,22,25,24],
[20,17,20,21,25,19,26,21,30,25,0,15,20,32,18],
[23,29,31,27,34,27,33,25,31,32,35,0,31,35,23],
[22,21,30,27,28,19,24,21,32,28,30,19,0,26,30],
[16,23,21,12,22,18,26,23,24,25,18,15,24,0,20],
[21,22,31,26,32,25,32,28,32,26,32,27,20,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 27, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,26,18,24,23,24,19,23,18,25,17,19,17,26],
[30,0,27,27,23,27,31,28,28,23,30,21,25,28,31],
[24,23,0,27,28,26,29,28,27,23,27,20,21,26,27],
[32,23,23,0,24,28,28,18,23,21,28,25,23,24,27],
[26,27,22,26,0,25,30,23,23,23,26,25,21,21,27],
[27,23,24,22,25,0,21,20,23,23,24,25,19,16,25],
[26,19,21,22,20,29,0,21,20,18,25,22,18,20,18],
[31,22,22,32,27,30,29,0,31,27,32,25,24,30,28],
[27,22,23,27,27,27,30,19,0,20,27,24,21,29,32],
[32,27,27,29,27,27,32,23,30,0,33,28,19,25,29],
[25,20,23,22,24,26,25,18,23,17,0,22,20,18,26],
[33,29,30,25,25,25,28,25,26,22,28,0,23,29,25],
[31,25,29,27,29,31,32,26,29,31,30,27,0,26,30],
[33,22,24,26,29,34,30,20,21,25,32,21,24,0,29],
[24,19,23,23,23,25,32,22,18,21,24,25,20,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 28, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,27,19,22,22,33,22,23,22,29,26,19,35,18],
[30,0,31,24,32,26,34,16,44,31,44,20,26,40,25],
[23,19,0,25,14,16,32,9,33,27,39,15,18,28,25],
[31,26,25,0,28,13,33,22,27,27,31,25,17,40,17],
[28,18,36,22,0,24,31,20,32,37,42,31,16,34,23],
[28,24,34,37,26,0,37,26,27,36,36,31,34,39,10],
[17,16,18,17,19,13,0,3,31,18,18,13,13,8,12],
[28,34,41,28,30,24,47,0,41,42,42,28,21,49,23],
[27,6,17,23,18,23,19,9,0,24,23,13,16,21,16],
[28,19,23,23,13,14,32,8,26,0,37,13,17,28,23],
[21,6,11,19,8,14,32,8,27,13,0,13,16,34,10],
[24,30,35,25,19,19,37,22,37,37,37,0,19,44,19],
[31,24,32,33,34,16,37,29,34,33,34,31,0,34,13],
[15,10,22,10,16,11,42,1,29,22,16,6,16,0,10],
[32,25,25,33,27,40,38,27,34,27,40,31,37,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 29, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,21,21,14,17,9,20,21,23,14,19,11,20,17],
[33,0,31,20,16,21,12,14,29,33,16,18,24,22,22],
[29,19,0,19,14,18,17,12,24,19,19,16,16,17,18],
[29,30,31,0,23,27,19,20,27,33,24,24,31,27,23],
[36,34,36,27,0,26,21,26,31,35,24,27,25,27,23],
[33,29,32,23,24,0,14,31,30,27,22,26,27,23,27],
[41,38,33,31,29,36,0,25,32,34,33,31,31,26,27],
[30,36,38,30,24,19,25,0,26,28,27,33,30,34,30],
[29,21,26,23,19,20,18,24,0,22,20,25,18,24,28],
[27,17,31,17,15,23,16,22,28,0,18,19,17,23,17],
[36,34,31,26,26,28,17,23,30,32,0,21,30,25,24],
[31,32,34,26,23,24,19,17,25,31,29,0,24,33,27],
[39,26,34,19,25,23,19,20,32,33,20,26,0,19,23],
[30,28,33,23,23,27,24,16,26,27,25,17,31,0,23],
[33,28,32,27,27,23,23,20,22,33,26,23,27,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 30, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,20,31,35,22,35,25,28,37,25,32,28,32,35],
[17,0,24,28,25,17,25,25,23,28,29,31,26,28,28],
[30,26,0,28,30,21,28,30,28,32,27,30,30,30,31],
[19,22,22,0,23,23,25,23,20,24,20,28,24,25,25],
[15,25,20,27,0,17,23,27,22,27,24,25,26,30,27],
[28,33,29,27,33,0,31,27,25,32,31,31,22,36,35],
[15,25,22,25,27,19,0,22,19,24,19,22,21,25,24],
[25,25,20,27,23,23,28,0,24,26,24,26,24,28,28],
[22,27,22,30,28,25,31,26,0,34,25,36,28,33,26],
[13,22,18,26,23,18,26,24,16,0,16,29,21,26,23],
[25,21,23,30,26,19,31,26,25,34,0,33,29,28,33],
[18,19,20,22,25,19,28,24,14,21,17,0,18,23,26],
[22,24,20,26,24,28,29,26,22,29,21,32,0,29,26],
[18,22,20,25,20,14,25,22,17,24,22,27,21,0,27],
[15,22,19,25,23,15,26,22,24,27,17,24,24,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 31, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,26,28,34,29,26,26,23,32,29,29,32,19,29],
[17,0,21,22,23,26,23,21,20,24,21,21,27,17,25],
[24,29,0,32,29,25,27,24,24,28,26,30,29,21,27],
[22,28,18,0,24,24,21,22,18,24,26,19,21,23,23],
[16,27,21,26,0,18,22,19,12,22,22,19,24,21,22],
[21,24,25,26,32,0,26,25,23,28,25,23,29,20,28],
[24,27,23,29,28,24,0,26,21,25,29,21,26,22,23],
[24,29,26,28,31,25,24,0,19,22,24,23,29,24,26],
[27,30,26,32,38,27,29,31,0,30,29,25,35,28,32],
[18,26,22,26,28,22,25,28,20,0,28,19,28,21,26],
[21,29,24,24,28,25,21,26,21,22,0,23,27,22,29],
[21,29,20,31,31,27,29,27,25,31,27,0,31,23,34],
[18,23,21,29,26,21,24,21,15,22,23,19,0,19,26],
[31,33,29,27,29,30,28,26,22,29,28,27,31,0,28],
[21,25,23,27,28,22,27,24,18,24,21,16,24,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 32, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,16,17,19,7,6,31,14,19,14,11,17,21,19],
[31,0,13,27,20,9,21,36,34,27,27,21,28,24,19],
[34,37,0,22,26,24,24,28,30,25,27,31,31,23,24],
[33,23,28,0,28,24,20,26,23,28,22,29,30,24,26],
[31,30,24,22,0,8,12,34,27,35,23,20,25,13,23],
[43,41,26,26,42,0,27,40,34,36,32,24,37,27,33],
[44,29,26,30,38,23,0,38,32,28,28,24,31,24,25],
[19,14,22,24,16,10,12,0,14,21,9,5,17,16,13],
[36,16,20,27,23,16,18,36,0,27,18,23,21,22,20],
[31,23,25,22,15,14,22,29,23,0,17,22,21,20,25],
[36,23,23,28,27,18,22,41,32,33,0,27,41,29,38],
[39,29,19,21,30,26,26,45,27,28,23,0,29,36,27],
[33,22,19,20,25,13,19,33,29,29,9,21,0,18,10],
[29,26,27,26,37,23,26,34,28,30,21,14,32,0,25],
[31,31,26,24,27,17,25,37,30,25,12,23,40,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 33, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,34,32,26,25,25,30,28,34,28,28,28,30,25],
[19,0,29,27,22,23,25,28,26,26,22,22,26,24,20],
[16,21,0,26,19,23,22,26,25,26,24,26,26,25,24],
[18,23,24,0,26,23,26,29,19,28,23,23,28,26,21],
[24,28,31,24,0,26,23,25,26,31,27,25,31,28,22],
[25,27,27,27,24,0,26,28,25,31,25,27,26,30,22],
[25,25,28,24,27,24,0,28,24,26,24,29,30,26,24],
[20,22,24,21,25,22,22,0,22,25,19,28,26,28,21],
[22,24,25,31,24,25,26,28,0,32,28,25,26,26,26],
[16,24,24,22,19,19,24,25,18,0,21,25,24,27,17],
[22,28,26,27,23,25,26,31,22,29,0,23,28,28,22],
[22,28,24,27,25,23,21,22,25,25,27,0,25,29,22],
[22,24,24,22,19,24,20,24,24,26,22,25,0,26,23],
[20,26,25,24,22,20,24,22,24,23,22,21,24,0,22],
[25,30,26,29,28,28,26,29,24,33,28,28,27,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 34, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,19,23,24,28,19,30,26,20,24,17,23,26,26],
[20,0,16,20,17,23,20,15,27,25,28,15,25,16,16],
[31,34,0,23,29,27,26,24,30,28,36,28,29,31,33],
[27,30,27,0,34,32,24,28,27,32,34,28,32,28,30],
[26,33,21,16,0,37,33,27,33,35,32,27,27,35,33],
[22,27,23,18,13,0,23,14,34,24,21,27,23,35,22],
[31,30,24,26,17,27,0,23,32,28,30,26,23,29,22],
[20,35,26,22,23,36,27,0,27,34,36,22,27,24,28],
[24,23,20,23,17,16,18,23,0,22,17,18,20,20,27],
[30,25,22,18,15,26,22,16,28,0,17,21,29,26,28],
[26,22,14,16,18,29,20,14,33,33,0,25,27,31,27],
[33,35,22,22,23,23,24,28,32,29,25,0,28,35,28],
[27,25,21,18,23,27,27,23,30,21,23,22,0,26,34],
[24,34,19,22,15,15,21,26,30,24,19,15,24,0,20],
[24,34,17,20,17,28,28,22,23,22,23,22,16,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 35, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,21,24,21,20,21,13,25,20,21,20,22,25,23],
[34,0,26,38,25,29,19,23,31,19,28,29,18,25,22],
[29,24,0,28,24,31,25,30,32,23,24,23,26,27,21],
[26,12,22,0,22,17,18,13,29,24,18,20,17,15,21],
[29,25,26,28,0,23,19,19,29,26,18,28,22,20,17],
[30,21,19,33,27,0,24,16,26,26,20,20,15,26,18],
[29,31,25,32,31,26,0,26,32,28,19,24,28,28,22],
[37,27,20,37,31,34,24,0,29,28,31,30,30,28,23],
[25,19,18,21,21,24,18,21,0,14,16,20,27,25,22],
[30,31,27,26,24,24,22,22,36,0,27,23,28,25,27],
[29,22,26,32,32,30,31,19,34,23,0,25,24,31,21],
[30,21,27,30,22,30,26,20,30,27,25,0,19,27,27],
[28,32,24,33,28,35,22,20,23,22,26,31,0,27,26],
[25,25,23,35,30,24,22,22,25,25,19,23,23,0,28],
[27,28,29,29,33,32,28,27,28,23,29,23,24,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 36, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,30,28,21,26,22,28,26,24,26,22,26,25,22],
[29,0,31,25,20,23,26,28,28,27,28,24,25,21,24],
[20,19,0,20,19,21,22,22,23,23,22,20,19,22,18],
[22,25,30,0,21,22,28,24,25,29,23,26,23,29,17],
[29,30,31,29,0,28,35,29,28,34,28,28,24,34,21],
[24,27,29,28,22,0,27,23,25,27,22,23,27,24,21],
[28,24,28,22,15,23,0,27,20,26,26,22,21,29,22],
[22,22,28,26,21,27,23,0,22,26,21,24,23,27,19],
[24,22,27,25,22,25,30,28,0,26,22,25,22,24,20],
[26,23,27,21,16,23,24,24,24,0,24,25,24,31,21],
[24,22,28,27,22,28,24,29,28,26,0,26,26,26,29],
[28,26,30,24,22,27,28,26,25,25,24,0,23,30,26],
[24,25,31,27,26,23,29,27,28,26,24,27,0,27,26],
[25,29,28,21,16,26,21,23,26,19,24,20,23,0,21],
[28,26,32,33,29,29,28,31,30,29,21,24,24,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 37, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,29,33,36,22,26,27,30,24,30,30,32,26,27],
[22,0,20,26,28,20,17,17,25,21,24,26,23,23,22],
[21,30,0,30,28,20,24,27,31,22,36,31,19,28,26],
[17,24,20,0,23,14,13,13,26,18,26,30,15,24,20],
[14,22,22,27,0,6,15,17,25,14,21,22,22,24,20],
[28,30,30,36,44,0,36,31,31,24,39,35,31,29,32],
[24,33,26,37,35,14,0,33,35,27,35,37,23,30,26],
[23,33,23,37,33,19,17,0,29,27,31,29,29,24,23],
[20,25,19,24,25,19,15,21,0,13,27,27,21,19,21],
[26,29,28,32,36,26,23,23,37,0,31,35,28,27,29],
[20,26,14,24,29,11,15,19,23,19,0,21,20,21,22],
[20,24,19,20,28,15,13,21,23,15,29,0,16,21,23],
[18,27,31,35,28,19,27,21,29,22,30,34,0,27,28],
[24,27,22,26,26,21,20,26,31,23,29,29,23,0,24],
[23,28,24,30,30,18,24,27,29,21,28,27,22,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 38, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,36,31,39,32,37,25,33,34,34,34,33,36,37],
[23,0,26,33,23,36,27,26,31,23,30,21,33,30,21],
[14,24,0,22,27,29,26,15,33,25,22,21,30,27,34],
[19,17,28,0,22,21,28,18,25,26,27,20,25,28,26],
[11,27,23,28,0,30,14,17,30,22,27,22,23,17,31],
[18,14,21,29,20,0,24,22,25,14,28,12,29,22,27],
[13,23,24,22,36,26,0,21,24,25,28,22,29,22,37],
[25,24,35,32,33,28,29,0,32,29,36,31,33,29,32],
[17,19,17,25,20,25,26,18,0,17,25,25,32,24,23],
[16,27,25,24,28,36,25,21,33,0,27,19,28,23,32],
[16,20,28,23,23,22,22,14,25,23,0,18,23,26,24],
[16,29,29,30,28,38,28,19,25,31,32,0,33,25,34],
[17,17,20,25,27,21,21,17,18,22,27,17,0,27,28],
[14,20,23,22,33,28,28,21,26,27,24,25,23,0,28],
[13,29,16,24,19,23,13,18,27,18,26,16,22,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 39, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,29,29,17,25,32,22,35,31,13,29,24,28,17],
[20,0,34,33,25,30,30,25,41,25,29,31,23,27,31],
[21,16,0,21,19,14,18,17,25,27,16,27,22,18,19],
[21,17,29,0,19,20,25,21,27,25,16,27,25,25,18],
[33,25,31,31,0,26,34,22,28,24,27,37,34,41,24],
[25,20,36,30,24,0,27,24,37,29,29,33,22,26,31],
[18,20,32,25,16,23,0,22,26,20,20,33,29,26,21],
[28,25,33,29,28,26,28,0,35,32,28,30,29,31,35],
[15,9,25,23,22,13,24,15,0,17,21,17,21,19,16],
[19,25,23,25,26,21,30,18,33,0,19,26,20,25,23],
[37,21,34,34,23,21,30,22,29,31,0,25,31,29,31],
[21,19,23,23,13,17,17,20,33,24,25,0,21,24,16],
[26,27,28,25,16,28,21,21,29,30,19,29,0,16,21],
[22,23,32,25,9,24,24,19,31,25,21,26,34,0,20],
[33,19,31,32,26,19,29,15,34,27,19,34,29,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 40, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,12,18,22,24,13,13,16,10,20,15,18,29,16],
[28,0,19,24,23,28,24,22,21,19,28,26,27,32,17],
[38,31,0,19,24,29,26,22,27,23,25,25,28,32,36],
[32,26,31,0,20,27,23,12,24,20,27,19,26,35,27],
[28,27,26,30,0,27,22,21,33,19,21,21,35,41,27],
[26,22,21,23,23,0,21,22,27,20,33,18,31,37,23],
[37,26,24,27,28,29,0,30,23,23,35,24,32,31,27],
[37,28,28,38,29,28,20,0,26,29,24,18,32,36,24],
[34,29,23,26,17,23,27,24,0,18,33,19,32,35,32],
[40,31,27,30,31,30,27,21,32,0,40,23,31,36,23],
[30,22,25,23,29,17,15,26,17,10,0,16,24,34,20],
[35,24,25,31,29,32,26,32,31,27,34,0,32,33,30],
[32,23,22,24,15,19,18,18,18,19,26,18,0,33,14],
[21,18,18,15,9,13,19,14,15,14,16,17,17,0,15],
[34,33,14,23,23,27,23,26,18,27,30,20,36,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 41, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,26,27,22,23,24,25,28,19,23,25,21,20,20],
[28,0,30,28,26,28,27,29,31,21,28,23,23,29,29],
[24,20,0,24,30,32,24,28,30,24,23,30,22,22,23],
[23,22,26,0,31,31,23,32,23,17,22,27,25,23,21],
[28,24,20,19,0,28,24,26,22,22,22,28,18,19,21],
[27,22,18,19,22,0,24,33,22,17,23,23,13,21,18],
[26,23,26,27,26,26,0,32,30,23,29,27,24,25,26],
[25,21,22,18,24,17,18,0,19,18,26,20,18,21,24],
[22,19,20,27,28,28,20,31,0,23,23,28,26,22,26],
[31,29,26,33,28,33,27,32,27,0,27,29,26,25,24],
[27,22,27,28,28,27,21,24,27,23,0,28,23,24,21],
[25,27,20,23,22,27,23,30,22,21,22,0,16,24,22],
[29,27,28,25,32,37,26,32,24,24,27,34,0,29,26],
[30,21,28,27,31,29,25,29,28,25,26,26,21,0,22],
[30,21,27,29,29,32,24,26,24,26,29,28,24,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 42, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,19,33,23,28,22,34,26,24,26,26,29,28,26],
[30,0,25,33,29,32,25,36,26,28,27,32,30,32,24],
[31,25,0,30,29,30,24,37,27,24,27,29,30,28,26],
[17,17,20,0,17,25,16,25,17,19,22,24,22,21,15],
[27,21,21,33,0,30,20,35,19,28,27,27,26,28,25],
[22,18,20,25,20,0,20,30,24,21,16,19,19,26,20],
[28,25,26,34,30,30,0,33,29,25,27,30,30,30,25],
[16,14,13,25,15,20,17,0,14,16,17,17,20,18,20],
[24,24,23,33,31,26,21,36,0,26,27,25,27,28,26],
[26,22,26,31,22,29,25,34,24,0,27,27,28,24,20],
[24,23,23,28,23,34,23,33,23,23,0,24,23,29,22],
[24,18,21,26,23,31,20,33,25,23,26,0,27,27,15],
[21,20,20,28,24,31,20,30,23,22,27,23,0,24,23],
[22,18,22,29,22,24,20,32,22,26,21,23,26,0,24],
[24,26,24,35,25,30,25,30,24,30,28,35,27,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 43, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,29,26,24,31,28,28,26,23,26,26,22,26,18],
[26,0,17,26,23,35,26,23,20,22,23,33,24,19,26],
[21,33,0,29,26,28,29,26,21,23,28,31,28,25,21],
[24,24,21,0,27,26,28,30,25,25,25,30,29,23,22],
[26,27,24,23,0,25,23,24,17,29,28,26,24,18,17],
[19,15,22,24,25,0,22,24,13,22,28,22,24,17,20],
[22,24,21,22,27,28,0,24,18,23,21,27,25,13,23],
[22,27,24,20,26,26,26,0,22,23,27,30,28,23,19],
[24,30,29,25,33,37,32,28,0,25,30,36,24,21,28],
[27,28,27,25,21,28,27,27,25,0,27,30,28,22,23],
[24,27,22,25,22,22,29,23,20,23,0,28,24,19,21],
[24,17,19,20,24,28,23,20,14,20,22,0,22,22,16],
[28,26,22,21,26,26,25,22,26,22,26,28,0,27,23],
[24,31,25,27,32,33,37,27,29,28,31,28,23,0,28],
[32,24,29,28,33,30,27,31,22,27,29,34,27,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 44, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,17,19,22,22,22,13,24,23,24,26,21,15,21],
[33,0,25,22,29,29,23,25,28,29,27,32,25,25,25],
[33,25,0,21,25,25,29,26,24,24,31,27,28,24,28],
[31,28,29,0,23,25,27,23,24,30,29,31,29,25,27],
[28,21,25,27,0,27,24,18,26,31,30,28,30,23,28],
[28,21,25,25,23,0,24,20,26,30,29,29,28,26,24],
[28,27,21,23,26,26,0,22,25,26,25,26,29,23,24],
[37,25,24,27,32,30,28,0,27,32,29,33,29,29,30],
[26,22,26,26,24,24,25,23,0,26,25,29,26,25,25],
[27,21,26,20,19,20,24,18,24,0,29,29,25,24,22],
[26,23,19,21,20,21,25,21,25,21,0,30,28,24,23],
[24,18,23,19,22,21,24,17,21,21,20,0,18,20,19],
[29,25,22,21,20,22,21,21,24,25,22,32,0,28,24],
[35,25,26,25,27,24,27,21,25,26,26,30,22,0,30],
[29,25,22,23,22,26,26,20,25,28,27,31,26,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 45, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,31,28,30,24,28,31,26,27,30,25,22,25,28],
[23,0,26,27,26,23,26,29,23,27,22,26,20,21,23],
[19,24,0,20,27,23,23,27,23,23,25,21,26,19,23],
[22,23,30,0,30,27,25,26,26,24,29,27,24,20,26],
[20,24,23,20,0,20,22,28,27,26,25,25,22,24,18],
[26,27,27,23,30,0,25,30,27,28,30,30,22,21,25],
[22,24,27,25,28,25,0,27,26,25,26,28,28,29,25],
[19,21,23,24,22,20,23,0,26,20,21,22,20,19,24],
[24,27,27,24,23,23,24,24,0,26,24,24,26,22,20],
[23,23,27,26,24,22,25,30,24,0,24,26,25,21,23],
[20,28,25,21,25,20,24,29,26,26,0,28,24,18,23],
[25,24,29,23,25,20,22,28,26,24,22,0,17,24,21],
[28,30,24,26,28,28,22,30,24,25,26,33,0,24,29],
[25,29,31,30,26,29,21,31,28,29,32,26,26,0,27],
[22,27,27,24,32,25,25,26,30,27,27,29,21,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 46, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,13,17,20,14,15,8,21,17,13,7,20,16,20],
[33,0,32,14,34,16,22,19,25,19,26,33,26,33,21],
[37,18,0,15,28,18,11,10,22,29,21,12,31,18,29],
[33,36,35,0,37,28,28,27,34,33,28,28,26,33,23],
[30,16,22,13,0,10,22,8,21,31,23,18,11,21,21],
[36,34,32,22,40,0,15,29,30,33,16,31,30,27,23],
[35,28,39,22,28,35,0,35,33,35,39,31,35,32,31],
[42,31,40,23,42,21,15,0,26,27,22,38,36,34,26],
[29,25,28,16,29,20,17,24,0,29,21,21,17,29,17],
[33,31,21,17,19,17,15,23,21,0,17,26,13,26,17],
[37,24,29,22,27,34,11,28,29,33,0,29,28,38,34],
[43,17,38,22,32,19,19,12,29,24,21,0,28,26,29],
[30,24,19,24,39,20,15,14,33,37,22,22,0,27,18],
[34,17,32,17,29,23,18,16,21,24,12,24,23,0,22],
[30,29,21,27,29,27,19,24,33,33,16,21,32,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 47, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,18,25,25,23,28,24,26,29,26,25,28,19,18],
[25,0,18,23,20,20,26,21,18,28,25,23,24,24,23],
[32,32,0,24,28,27,32,27,25,32,32,33,31,26,27],
[25,27,26,0,28,24,33,29,26,34,30,29,29,21,22],
[25,30,22,22,0,24,31,26,23,28,25,30,26,20,19],
[27,30,23,26,26,0,33,24,20,35,30,30,24,23,22],
[22,24,18,17,19,17,0,17,20,23,21,21,22,18,15],
[26,29,23,21,24,26,33,0,25,31,28,26,23,23,19],
[24,32,25,24,27,30,30,25,0,34,32,30,30,24,22],
[21,22,18,16,22,15,27,19,16,0,24,25,21,17,16],
[24,25,18,20,25,20,29,22,18,26,0,27,26,17,18],
[25,27,17,21,20,20,29,24,20,25,23,0,19,19,18],
[22,26,19,21,24,26,28,27,20,29,24,31,0,17,21],
[31,26,24,29,30,27,32,27,26,33,33,31,33,0,30],
[32,27,23,28,31,28,35,31,28,34,32,32,29,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 48, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,9,30,25,16,29,26,21,25,35,20,35,30,33],
[26,0,26,33,27,31,25,21,30,34,36,24,30,25,22],
[41,24,0,35,36,41,31,38,36,36,35,26,38,42,34],
[20,17,15,0,23,19,25,31,24,28,40,23,31,32,14],
[25,23,14,27,0,19,19,34,26,23,36,13,28,29,19],
[34,19,9,31,31,0,27,28,25,29,32,15,34,34,27],
[21,25,19,25,31,23,0,29,16,24,32,14,25,35,20],
[24,29,12,19,16,22,21,0,28,29,31,19,24,29,24],
[29,20,14,26,24,25,34,22,0,32,29,22,38,27,24],
[25,16,14,22,27,21,26,21,18,0,29,25,26,31,29],
[15,14,15,10,14,18,18,19,21,21,0,6,22,21,19],
[30,26,24,27,37,35,36,31,28,25,44,0,43,33,33],
[15,20,12,19,22,16,25,26,12,24,28,7,0,22,11],
[20,25,8,18,21,16,15,21,23,19,29,17,28,0,17],
[17,28,16,36,31,23,30,26,26,21,31,17,39,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 49, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,29,7,21,21,21,34,13,21,37,30,20,21,22],
[34,0,30,21,29,21,31,34,14,29,22,21,14,21,38],
[21,20,0,20,15,15,15,28,16,29,31,20,13,20,28],
[43,29,30,0,38,30,30,42,13,37,37,38,27,37,31],
[29,21,35,12,0,17,30,49,20,28,28,35,14,20,35],
[29,29,35,20,33,0,25,42,13,28,37,43,22,37,35],
[29,19,35,20,20,25,0,33,13,28,28,26,13,20,34],
[16,16,22,8,1,8,17,0,13,24,16,21,14,13,15],
[37,36,34,37,30,37,37,37,0,45,45,42,21,36,35],
[29,21,21,13,22,22,22,26,5,0,29,29,13,21,22],
[13,28,19,13,22,13,22,34,5,21,0,27,6,12,27],
[20,29,30,12,15,7,24,29,8,21,23,0,28,12,25],
[30,36,37,23,36,28,37,36,29,37,44,22,0,21,37],
[29,29,30,13,30,13,30,37,14,29,38,38,29,0,30],
[28,12,22,19,15,15,16,35,15,28,23,25,13,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 50, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,29,24,36,30,30,29,20,33,33,31,32,25,34],
[11,0,15,14,20,23,20,25,21,12,18,15,15,12,18],
[21,35,0,7,27,26,18,27,26,18,24,24,16,13,38],
[26,36,43,0,31,31,37,31,22,31,33,31,27,32,32],
[14,30,23,19,0,22,18,21,22,13,15,16,25,14,31],
[20,27,24,19,28,0,15,25,17,21,16,18,15,12,33],
[20,30,32,13,32,35,0,24,24,27,26,21,25,13,33],
[21,25,23,19,29,25,26,0,20,24,17,25,27,19,29],
[30,29,24,28,28,33,26,30,0,33,34,20,26,27,33],
[17,38,32,19,37,29,23,26,17,0,39,23,18,21,27],
[17,32,26,17,35,34,24,33,16,11,0,24,16,16,22],
[19,35,26,19,34,32,29,25,30,27,26,0,26,13,35],
[18,35,34,23,25,35,25,23,24,32,34,24,0,23,29],
[25,38,37,18,36,38,37,31,23,29,34,37,27,0,32],
[16,32,12,18,19,17,17,21,17,23,28,15,21,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 51, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,28,31,29,23,32,26,31,30,32,27,24,27,29],
[20,0,33,30,29,27,27,28,33,29,30,29,30,26,20],
[22,17,0,28,24,23,25,31,33,38,20,29,25,26,20],
[19,20,22,0,29,36,28,33,36,25,29,21,31,30,22],
[21,21,26,21,0,21,24,29,37,28,16,23,34,24,20],
[27,23,27,14,29,0,23,25,28,33,19,23,34,20,26],
[18,23,25,22,26,27,0,23,29,31,16,20,29,24,24],
[24,22,19,17,21,25,27,0,23,27,24,22,26,23,20],
[19,17,17,14,13,22,21,27,0,29,15,15,21,20,19],
[20,21,12,25,22,17,19,23,21,0,20,23,23,23,22],
[18,20,30,21,34,31,34,26,35,30,0,32,35,29,28],
[23,21,21,29,27,27,30,28,35,27,18,0,31,34,26],
[26,20,25,19,16,16,21,24,29,27,15,19,0,21,25],
[23,24,24,20,26,30,26,27,30,27,21,16,29,0,18],
[21,30,30,28,30,24,26,30,31,28,22,24,25,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 52, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,27,22,30,26,27,25,30,33,15,37,28,23,37],
[22,0,26,19,22,24,21,24,21,29,15,32,24,21,31],
[23,24,0,22,30,21,25,28,23,29,16,33,21,23,28],
[28,31,28,0,36,30,26,27,21,29,21,32,23,29,33],
[20,28,20,14,0,22,18,19,13,19,15,26,14,19,26],
[24,26,29,20,28,0,24,24,26,36,22,28,27,26,30],
[23,29,25,24,32,26,0,23,18,23,19,28,25,25,27],
[25,26,22,23,31,26,27,0,20,35,16,30,27,25,30],
[20,29,27,29,37,24,32,30,0,34,26,32,27,26,30],
[17,21,21,21,31,14,27,15,16,0,16,29,19,22,27],
[35,35,34,29,35,28,31,34,24,34,0,34,27,30,38],
[13,18,17,18,24,22,22,20,18,21,16,0,19,22,24],
[22,26,29,27,36,23,25,23,23,31,23,31,0,28,27],
[27,29,27,21,31,24,25,25,24,28,20,28,22,0,30],
[13,19,22,17,24,20,23,20,20,23,12,26,23,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 53, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,24,16,22,14,19,9,22,6,25,14,14,13,8],
[31,0,25,29,34,24,23,15,27,18,35,23,24,24,24],
[26,25,0,24,34,18,28,30,38,22,34,34,26,27,25],
[34,21,26,0,29,15,26,16,30,23,39,21,23,18,22],
[28,16,16,21,0,8,18,15,20,14,31,17,34,20,11],
[36,26,32,35,42,0,36,23,33,37,42,28,39,38,19],
[31,27,22,24,32,14,0,21,22,8,31,29,25,9,13],
[41,35,20,34,35,27,29,0,29,26,37,38,27,15,16],
[28,23,12,20,30,17,28,21,0,13,25,18,23,12,13],
[44,32,28,27,36,13,42,24,37,0,37,41,34,19,9],
[25,15,16,11,19,8,19,13,25,13,0,18,19,13,12],
[36,27,16,29,33,22,21,12,32,9,32,0,23,14,12],
[36,26,24,27,16,11,25,23,27,16,31,27,0,6,12],
[37,26,23,32,30,12,41,35,38,31,37,36,44,0,26],
[42,26,25,28,39,31,37,34,37,41,38,38,38,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 54, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,23,28,22,22,25,28,18,32,30,30,29,30,17],
[34,0,26,26,33,32,28,31,23,38,29,31,32,24,23],
[27,24,0,21,20,19,29,19,18,37,30,27,27,26,22],
[22,24,29,0,31,22,24,24,19,33,30,32,32,30,25],
[28,17,30,19,0,20,29,24,13,28,26,22,27,23,21],
[28,18,31,28,30,0,26,26,26,30,33,27,22,32,22],
[25,22,21,26,21,24,0,17,20,30,27,25,23,25,15],
[22,19,31,26,26,24,33,0,17,31,30,26,32,27,25],
[32,27,32,31,37,24,30,33,0,37,30,32,30,27,22],
[18,12,13,17,22,20,20,19,13,0,25,23,20,18,15],
[20,21,20,20,24,17,23,20,20,25,0,20,30,19,17],
[20,19,23,18,28,23,25,24,18,27,30,0,24,25,17],
[21,18,23,18,23,28,27,18,20,30,20,26,0,27,23],
[20,26,24,20,27,18,25,23,23,32,31,25,23,0,21],
[33,27,28,25,29,28,35,25,28,35,33,33,27,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 55, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,23,22,29,27,28,37,31,34,25,27,31,24,23],
[17,0,19,19,22,20,24,20,36,26,24,19,15,21,21],
[27,31,0,28,25,30,26,27,27,31,24,31,22,32,24],
[28,31,22,0,33,26,25,24,30,26,24,23,23,26,25],
[21,28,25,17,0,19,25,29,28,24,25,21,22,18,23],
[23,30,20,24,31,0,26,26,30,25,22,24,24,25,20],
[22,26,24,25,25,24,0,29,31,33,23,28,26,24,23],
[13,30,23,26,21,24,21,0,33,26,21,24,16,21,24],
[19,14,23,20,22,20,19,17,0,14,19,18,14,20,18],
[16,24,19,24,26,25,17,24,36,0,22,24,18,21,17],
[25,26,26,26,25,28,27,29,31,28,0,25,21,26,23],
[23,31,19,27,29,26,22,26,32,26,25,0,27,23,31],
[19,35,28,27,28,26,24,34,36,32,29,23,0,30,23],
[26,29,18,24,32,25,26,29,30,29,24,27,20,0,23],
[27,29,26,25,27,30,27,26,32,33,27,19,27,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 56, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,26,25,23,27,20,26,20,22,20,23,25,24,23],
[28,0,23,31,23,30,24,32,23,27,25,23,26,30,26],
[24,27,0,30,32,32,25,26,25,25,24,26,28,23,23],
[25,19,20,0,19,22,17,16,17,18,20,16,22,23,20],
[27,27,18,31,0,30,25,27,22,23,24,21,29,23,17],
[23,20,18,28,20,0,17,15,17,20,20,18,18,20,17],
[30,26,25,33,25,33,0,24,25,25,27,22,24,26,21],
[24,18,24,34,23,35,26,0,24,22,25,25,26,31,20],
[30,27,25,33,28,33,25,26,0,22,23,27,27,25,25],
[28,23,25,32,27,30,25,28,28,0,21,23,27,28,25],
[30,25,26,30,26,30,23,25,27,29,0,24,26,26,24],
[27,27,24,34,29,32,28,25,23,27,26,0,26,28,23],
[25,24,22,28,21,32,26,24,23,23,24,24,0,28,24],
[26,20,27,27,27,30,24,19,25,22,24,22,22,0,17],
[27,24,27,30,33,33,29,30,25,25,26,27,26,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 57, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,21,26,32,26,33,23,20,19,25,21,17,26,20],
[20,0,18,17,35,25,24,25,18,23,29,28,26,26,20],
[29,32,0,35,35,40,32,24,24,34,28,34,31,31,29],
[24,33,15,0,38,24,28,24,20,20,24,27,27,21,23],
[18,15,15,12,0,13,21,14,17,17,18,13,15,21,18],
[24,25,10,26,37,0,22,17,20,18,27,18,18,30,21],
[17,26,18,22,29,28,0,10,14,22,25,20,18,29,16],
[27,25,26,26,36,33,40,0,20,33,25,35,26,36,27],
[30,32,26,30,33,30,36,30,0,26,39,29,23,26,24],
[31,27,16,30,33,32,28,17,24,0,31,28,22,23,24],
[25,21,22,26,32,23,25,25,11,19,0,24,20,23,17],
[29,22,16,23,37,32,30,15,21,22,26,0,22,29,18],
[33,24,19,23,35,32,32,24,27,28,30,28,0,33,28],
[24,24,19,29,29,20,21,14,24,27,27,21,17,0,25],
[30,30,21,27,32,29,34,23,26,26,33,32,22,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 58, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,22,27,19,24,27,31,27,20,18,19,24,30],
[26,0,24,28,24,24,20,28,26,26,22,26,23,26,31],
[26,26,0,27,21,18,21,24,27,32,23,20,27,21,28],
[28,22,23,0,24,21,20,25,32,29,24,17,25,23,28],
[23,26,29,26,0,23,24,28,30,28,20,25,21,25,29],
[31,26,32,29,27,0,28,27,29,30,34,28,32,25,32],
[26,30,29,30,26,22,0,30,31,30,29,24,25,29,32],
[23,22,26,25,22,23,20,0,25,24,25,21,26,23,26],
[19,24,23,18,20,21,19,25,0,23,23,20,21,21,24],
[23,24,18,21,22,20,20,26,27,0,23,19,22,17,23],
[30,28,27,26,30,16,21,25,27,27,0,23,23,23,31],
[32,24,30,33,25,22,26,29,30,31,27,0,31,22,29],
[31,27,23,25,29,18,25,24,29,28,27,19,0,22,27],
[26,24,29,27,25,25,21,27,29,33,27,28,28,0,31],
[20,19,22,22,21,18,18,24,26,27,19,21,23,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 59, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,26,26,29,29,26,35,27,24,32,27,25,27,32],
[21,0,25,18,21,24,16,25,24,19,19,22,19,18,28],
[24,25,0,24,27,20,23,26,24,26,31,27,20,18,34],
[24,32,26,0,31,29,29,33,26,24,36,25,24,27,41],
[21,29,23,19,0,20,21,28,26,23,24,20,25,20,30],
[21,26,30,21,30,0,27,31,25,25,34,26,30,29,34],
[24,34,27,21,29,23,0,28,26,23,26,23,24,22,35],
[15,25,24,17,22,19,22,0,21,16,27,20,23,28,32],
[23,26,26,24,24,25,24,29,0,28,33,24,23,26,35],
[26,31,24,26,27,25,27,34,22,0,28,23,22,23,38],
[18,31,19,14,26,16,24,23,17,22,0,19,20,16,27],
[23,28,23,25,30,24,27,30,26,27,31,0,25,24,36],
[25,31,30,26,25,20,26,27,27,28,30,25,0,22,34],
[23,32,32,23,30,21,28,22,24,27,34,26,28,0,37],
[18,22,16,9,20,16,15,18,15,12,23,14,16,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 60, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,22,24,21,23,25,19,16,23,27,25,27,22,27],
[29,0,28,27,25,26,28,25,24,28,30,28,29,23,28],
[28,22,0,21,22,24,20,19,14,28,25,26,24,21,27],
[26,23,29,0,27,30,30,26,21,31,32,27,30,22,30],
[29,25,28,23,0,27,24,20,20,23,28,28,27,23,23],
[27,24,26,20,23,0,31,21,19,21,31,29,30,22,24],
[25,22,30,20,26,19,0,17,13,20,26,24,24,23,24],
[31,25,31,24,30,29,33,0,21,27,34,28,33,24,29],
[34,26,36,29,30,31,37,29,0,32,36,29,33,25,31],
[27,22,22,19,27,29,30,23,18,0,29,27,27,22,26],
[23,20,25,18,22,19,24,16,14,21,0,24,23,18,22],
[25,22,24,23,22,21,26,22,21,23,26,0,25,23,29],
[23,21,26,20,23,20,26,17,17,23,27,25,0,20,23],
[28,27,29,28,27,28,27,26,25,28,32,27,30,0,29],
[23,22,23,20,27,26,26,21,19,24,28,21,27,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 61, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,33,33,44,29,29,30,35,28,25,35,30,23,30],
[21,0,34,26,32,30,23,25,34,22,27,38,26,27,22],
[17,16,0,6,27,16,16,14,21,20,17,18,16,20,18],
[17,24,44,0,25,28,21,17,26,22,24,24,22,25,13],
[6,18,23,25,0,21,22,25,16,20,14,29,18,21,18],
[21,20,34,22,29,0,19,19,26,20,17,34,29,22,25],
[21,27,34,29,28,31,0,30,21,23,24,31,28,19,22],
[20,25,36,33,25,31,20,0,19,17,16,23,21,31,25],
[15,16,29,24,34,24,29,31,0,24,22,24,33,24,25],
[22,28,30,28,30,30,27,33,26,0,21,35,23,28,22],
[25,23,33,26,36,33,26,34,28,29,0,25,27,30,28],
[15,12,32,26,21,16,19,27,26,15,25,0,17,25,23],
[20,24,34,28,32,21,22,29,17,27,23,33,0,32,28],
[27,23,30,25,29,28,31,19,26,22,20,25,18,0,18],
[20,28,32,37,32,25,28,25,25,28,22,27,22,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 62, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,24,26,28,31,28,26,29,25,25,31,23,28,27],
[24,0,21,28,22,27,25,22,27,20,14,25,24,23,27],
[26,29,0,30,27,33,28,29,33,29,25,32,29,32,28],
[24,22,20,0,28,24,20,20,28,27,25,28,29,27,26],
[22,28,23,22,0,25,23,25,29,25,22,23,25,27,25],
[19,23,17,26,25,0,26,22,27,24,17,20,24,25,26],
[22,25,22,30,27,24,0,24,28,24,19,26,28,33,25],
[24,28,21,30,25,28,26,0,33,26,26,30,28,26,27],
[21,23,17,22,21,23,22,17,0,24,15,22,24,27,20],
[25,30,21,23,25,26,26,24,26,0,21,22,24,30,25],
[25,36,25,25,28,33,31,24,35,29,0,35,29,30,30],
[19,25,18,22,27,30,24,20,28,28,15,0,21,28,19],
[27,26,21,21,25,26,22,22,26,26,21,29,0,24,20],
[22,27,18,23,23,25,17,24,23,20,20,22,26,0,25],
[23,23,22,24,25,24,25,23,30,25,20,31,30,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 63, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,29,28,26,26,29,30,21,29,19,25,24,26],
[24,0,32,30,27,29,28,30,31,24,30,24,26,29,28],
[24,18,0,26,27,25,27,26,25,20,28,21,22,24,23],
[21,20,24,0,23,19,23,22,21,17,24,20,21,24,22],
[22,23,23,27,0,28,26,27,29,21,32,20,25,24,26],
[24,21,25,31,22,0,27,28,29,21,25,23,27,28,27],
[24,22,23,27,24,23,0,25,27,19,29,20,24,26,24],
[21,20,24,28,23,22,25,0,26,16,27,25,21,21,24],
[20,19,25,29,21,21,23,24,0,21,27,18,18,22,19],
[29,26,30,33,29,29,31,34,29,0,27,24,28,26,27],
[21,20,22,26,18,25,21,23,23,23,0,24,26,27,25],
[31,26,29,30,30,27,30,25,32,26,26,0,26,27,28],
[25,24,28,29,25,23,26,29,32,22,24,24,0,24,24],
[26,21,26,26,26,22,24,29,28,24,23,23,26,0,27],
[24,22,27,28,24,23,26,26,31,23,25,22,26,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 64, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,28,19,20,17,22,24,24,26,20,23,22,22,27],
[25,0,26,16,18,15,24,27,24,30,23,29,24,19,30],
[22,24,0,13,25,19,17,22,14,29,26,19,23,19,27],
[31,34,37,0,24,25,28,31,30,34,27,30,25,19,33],
[30,32,25,26,0,23,26,28,24,33,22,24,22,15,24],
[33,35,31,25,27,0,27,28,31,33,26,30,25,23,32],
[28,26,33,22,24,23,0,31,19,34,28,31,21,19,30],
[26,23,28,19,22,22,19,0,20,30,30,22,23,23,28],
[26,26,36,20,26,19,31,30,0,30,18,29,25,23,31],
[24,20,21,16,17,17,16,20,20,0,22,21,17,17,22],
[30,27,24,23,28,24,22,20,32,28,0,24,22,22,35],
[27,21,31,20,26,20,19,28,21,29,26,0,29,26,34],
[28,26,27,25,28,25,29,27,25,33,28,21,0,24,34],
[28,31,31,31,35,27,31,27,27,33,28,24,26,0,38],
[23,20,23,17,26,18,20,22,19,28,15,16,16,12,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 65, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,23,22,24,25,21,27,26,35,26,23,25,26,22],
[23,0,22,17,25,21,20,27,19,24,22,23,27,20,19],
[27,28,0,22,22,23,17,29,27,29,26,24,30,24,23],
[28,33,28,0,29,29,28,29,29,32,24,24,30,29,28],
[26,25,28,21,0,30,26,28,29,30,26,29,27,26,25],
[25,29,27,21,20,0,18,25,25,33,22,25,26,26,25],
[29,30,33,22,24,32,0,29,28,32,26,27,36,31,25],
[23,23,21,21,22,25,21,0,23,26,21,23,29,24,22],
[24,31,23,21,21,25,22,27,0,31,24,24,25,25,26],
[15,26,21,18,20,17,18,24,19,0,24,24,22,23,21],
[24,28,24,26,24,28,24,29,26,26,0,25,25,27,26],
[27,27,26,26,21,25,23,27,26,26,25,0,31,27,24],
[25,23,20,20,23,24,14,21,25,28,25,19,0,21,18],
[24,30,26,21,24,24,19,26,25,27,23,23,29,0,21],
[28,31,27,22,25,25,25,28,24,29,24,26,32,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 66, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,30,28,25,29,23,24,26,25,21,27,26,26,28],
[20,0,24,22,23,26,21,23,22,23,23,20,21,21,25],
[20,26,0,21,24,25,19,16,20,22,21,20,20,20,23],
[22,28,29,0,24,26,29,28,26,29,24,24,27,26,27],
[25,27,26,26,0,32,28,22,24,28,22,25,23,25,28],
[21,24,25,24,18,0,20,19,19,23,22,21,21,23,21],
[27,29,31,21,22,30,0,25,30,30,21,24,26,25,28],
[26,27,34,22,28,31,25,0,26,29,28,25,27,27,28],
[24,28,30,24,26,31,20,24,0,25,23,24,23,24,28],
[25,27,28,21,22,27,20,21,25,0,24,24,22,18,24],
[29,27,29,26,28,28,29,22,27,26,0,26,23,27,30],
[23,30,30,26,25,29,26,25,26,26,24,0,21,24,25],
[24,29,30,23,27,29,24,23,27,28,27,29,0,29,23],
[24,29,30,24,25,27,25,23,26,32,23,26,21,0,29],
[22,25,27,23,22,29,22,22,22,26,20,25,27,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 67, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,21,24,26,20,20,30,24,26,29,25,22,27,17],
[32,0,19,32,36,25,28,32,29,30,32,28,25,33,25],
[29,31,0,32,30,30,32,29,27,33,28,28,28,25,27],
[26,18,18,0,32,18,20,25,21,24,30,23,27,27,20],
[24,14,20,18,0,18,14,18,15,20,24,24,16,22,14],
[30,25,20,32,32,0,29,30,28,35,34,31,29,27,31],
[30,22,18,30,36,21,0,33,22,21,32,27,24,24,26],
[20,18,21,25,32,20,17,0,20,19,23,24,23,21,23],
[26,21,23,29,35,22,28,30,0,31,30,30,23,25,25],
[24,20,17,26,30,15,29,31,19,0,27,30,21,22,27],
[21,18,22,20,26,16,18,27,20,23,0,23,16,24,18],
[25,22,22,27,26,19,23,26,20,20,27,0,26,27,19],
[28,25,22,23,34,21,26,27,27,29,34,24,0,25,19],
[23,17,25,23,28,23,26,29,25,28,26,23,25,0,24],
[33,25,23,30,36,19,24,27,25,23,32,31,31,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 68, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,22,30,17,23,23,32,36,21,27,25,27,17,31],
[29,0,16,32,20,25,24,21,32,14,21,30,24,14,31],
[28,34,0,30,26,29,27,26,38,24,21,29,24,21,34],
[20,18,20,0,12,23,20,24,35,19,19,21,25,14,27],
[33,30,24,38,0,35,28,29,38,27,24,29,31,26,33],
[27,25,21,27,15,0,27,25,31,19,26,34,22,23,25],
[27,26,23,30,22,23,0,27,37,20,31,29,27,16,24],
[18,29,24,26,21,25,23,0,29,21,18,21,23,19,27],
[14,18,12,15,12,19,13,21,0,12,13,19,17,15,23],
[29,36,26,31,23,31,30,29,38,0,32,29,25,26,26],
[23,29,29,31,26,24,19,32,37,18,0,23,24,22,31],
[25,20,21,29,21,16,21,29,31,21,27,0,22,18,24],
[23,26,26,25,19,28,23,27,33,25,26,28,0,18,29],
[33,36,29,36,24,27,34,31,35,24,28,32,32,0,29],
[19,19,16,23,17,25,26,23,27,24,19,26,21,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 69, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,34,34,27,28,26,23,29,35,24,28,29,44,28],
[19,0,32,33,23,34,31,31,26,34,31,28,26,42,24],
[16,18,0,28,17,31,26,24,14,32,24,18,20,36,22],
[16,17,22,0,20,33,24,24,27,28,21,21,17,36,24],
[23,27,33,30,0,26,30,24,23,33,36,24,31,35,28],
[22,16,19,17,24,0,24,14,13,28,26,18,22,37,20],
[24,19,24,26,20,26,0,14,19,23,10,19,21,31,26],
[27,19,26,26,26,36,36,0,31,31,29,26,27,45,37],
[21,24,36,23,27,37,31,19,0,30,20,16,24,36,23],
[15,16,18,22,17,22,27,19,20,0,18,23,25,39,23],
[26,19,26,29,14,24,40,21,30,32,0,22,30,32,36],
[22,22,32,29,26,32,31,24,34,27,28,0,15,32,28],
[21,24,30,33,19,28,29,23,26,25,20,35,0,33,29],
[6,8,14,14,15,13,19,5,14,11,18,18,17,0,14],
[22,26,28,26,22,30,24,13,27,27,14,22,21,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 70, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,21,18,28,26,20,18,26,33,25,15,23,27,12],
[25,0,29,20,21,20,17,16,23,28,25,18,25,22,20],
[29,21,0,17,30,23,22,18,28,33,26,21,27,23,21],
[32,30,33,0,31,34,34,26,35,36,30,22,29,31,26],
[22,29,20,19,0,32,17,19,20,26,14,20,28,25,28],
[24,30,27,16,18,0,23,20,20,22,20,22,19,21,20],
[30,33,28,16,33,27,0,25,29,32,22,24,31,32,23],
[32,34,32,24,31,30,25,0,29,33,26,20,35,31,20],
[24,27,22,15,30,30,21,21,0,32,24,22,17,25,22],
[17,22,17,14,24,28,18,17,18,0,17,10,24,19,21],
[25,25,24,20,36,30,28,24,26,33,0,17,26,23,22],
[35,32,29,28,30,28,26,30,28,40,33,0,25,31,23],
[27,25,23,21,22,31,19,15,33,26,24,25,0,21,22],
[23,28,27,19,25,29,18,19,25,31,27,19,29,0,18],
[38,30,29,24,22,30,27,30,28,29,28,27,28,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 71, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,22,22,33,25,31,28,26,28,18,26,18,29,27],
[20,0,19,22,23,18,25,25,22,26,26,15,25,21,24],
[28,31,0,24,31,26,35,28,24,35,28,20,27,25,30],
[28,28,26,0,32,22,34,33,26,31,26,25,26,28,31],
[17,27,19,18,0,17,27,23,17,28,21,20,17,18,26],
[25,32,24,28,33,0,33,28,29,33,28,23,28,24,36],
[19,25,15,16,23,17,0,20,18,23,17,14,20,14,27],
[22,25,22,17,27,22,30,0,18,29,20,17,17,20,27],
[24,28,26,24,33,21,32,32,0,32,24,28,26,24,28],
[22,24,15,19,22,17,27,21,18,0,23,17,20,15,27],
[32,24,22,24,29,22,33,30,26,27,0,21,24,25,31],
[24,35,30,25,30,27,36,33,22,33,29,0,27,24,31],
[32,25,23,24,33,22,30,33,24,30,26,23,0,24,31],
[21,29,25,22,32,26,36,30,26,35,25,26,26,0,34],
[23,26,20,19,24,14,23,23,22,23,19,19,19,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 72, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,24,28,27,27,22,24,22,24,23,31,28,34,30],
[22,0,24,20,27,26,22,22,21,24,23,27,21,25,21],
[26,26,0,28,26,30,16,25,18,25,32,32,29,29,29],
[22,30,22,0,30,24,25,25,24,24,28,30,27,31,24],
[23,23,24,20,0,24,23,26,24,26,25,30,26,30,29],
[23,24,20,26,26,0,22,22,21,22,20,26,25,28,26],
[28,28,34,25,27,28,0,29,26,25,27,34,31,33,31],
[26,28,25,25,24,28,21,0,26,24,22,31,31,31,26],
[28,29,32,26,26,29,24,24,0,26,25,35,29,31,29],
[26,26,25,26,24,28,25,26,24,0,23,31,26,33,29],
[27,27,18,22,25,30,23,28,25,27,0,32,31,30,30],
[19,23,18,20,20,24,16,19,15,19,18,0,25,27,28],
[22,29,21,23,24,25,19,19,21,24,19,25,0,28,22],
[16,25,21,19,20,22,17,19,19,17,20,23,22,0,24],
[20,29,21,26,21,24,19,24,21,21,20,22,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 73, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,22,26,25,19,22,24,24,24,22,27,25,29,24],
[22,0,21,22,19,19,26,19,18,20,14,21,20,24,20],
[28,29,0,26,27,26,28,26,25,26,23,30,29,28,30],
[24,28,24,0,28,22,21,23,25,21,24,20,21,26,26],
[25,31,23,22,0,19,24,24,25,21,16,22,20,26,24],
[31,31,24,28,31,0,31,27,31,28,28,25,29,30,26],
[28,24,22,29,26,19,0,26,28,28,21,25,27,26,27],
[26,31,24,27,26,23,24,0,21,22,22,26,25,29,26],
[26,32,25,25,25,19,22,29,0,26,20,27,24,26,25],
[26,30,24,29,29,22,22,28,24,0,21,28,23,29,26],
[28,36,27,26,34,22,29,28,30,29,0,26,25,34,27],
[23,29,20,30,28,25,25,24,23,22,24,0,24,26,24],
[25,30,21,29,30,21,23,25,26,27,25,26,0,30,26],
[21,26,22,24,24,20,24,21,24,21,16,24,20,0,24],
[26,30,20,24,26,24,23,24,25,24,23,26,24,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 74, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,20,23,26,23,17,23,23,23,32,27,26,24,15],
[28,0,23,22,21,24,20,24,17,29,28,22,30,23,23],
[30,27,0,25,19,25,11,29,25,32,27,25,22,25,22],
[27,28,25,0,25,29,21,27,23,31,29,25,24,22,25],
[24,29,31,25,0,20,14,34,23,31,32,23,31,25,17],
[27,26,25,21,30,0,17,29,19,22,26,20,27,27,16],
[33,30,39,29,36,33,0,38,27,34,31,35,35,24,25],
[27,26,21,23,16,21,12,0,16,32,24,24,21,19,18],
[27,33,25,27,27,31,23,34,0,36,34,33,31,23,26],
[27,21,18,19,19,28,16,18,14,0,28,24,29,27,23],
[18,22,23,21,18,24,19,26,16,22,0,20,18,23,21],
[23,28,25,25,27,30,15,26,17,26,30,0,23,29,20],
[24,20,28,26,19,23,15,29,19,21,32,27,0,21,18],
[26,27,25,28,25,23,26,31,27,23,27,21,29,0,22],
[35,27,28,25,33,34,25,32,24,27,29,30,32,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 75, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,19,17,14,21,22,15,18,15,23,27,23,15,15],
[35,0,28,30,23,35,31,30,25,25,33,32,30,27,29],
[31,22,0,23,15,22,27,30,23,24,29,28,26,24,19],
[33,20,27,0,20,24,24,30,22,23,26,23,26,21,19],
[36,27,35,30,0,33,32,31,24,33,31,35,32,29,30],
[29,15,28,26,17,0,22,28,21,22,28,24,25,21,17],
[28,19,23,26,18,28,0,28,24,24,29,28,28,25,19],
[35,20,20,20,19,22,22,0,21,16,28,26,33,18,18],
[32,25,27,28,26,29,26,29,0,29,35,30,30,26,24],
[35,25,26,27,17,28,26,34,21,0,26,24,29,22,20],
[27,17,21,24,19,22,21,22,15,24,0,23,20,22,22],
[23,18,22,27,15,26,22,24,20,26,27,0,21,24,19],
[27,20,24,24,18,25,22,17,20,21,30,29,0,23,19],
[35,23,26,29,21,29,25,32,24,28,28,26,27,0,24],
[35,21,31,31,20,33,31,32,26,30,28,31,31,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 76, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,31,27,19,24,28,20,23,26,22,26,26,17,19],
[29,0,25,23,20,28,32,14,19,28,24,25,26,25,26],
[19,25,0,19,19,24,32,21,22,31,26,19,27,24,27],
[23,27,31,0,20,28,29,22,25,30,22,20,30,21,25],
[31,30,31,30,0,29,37,23,28,32,28,31,30,32,30],
[26,22,26,22,21,0,28,17,22,21,19,22,17,18,23],
[22,18,18,21,13,22,0,16,15,22,14,20,17,20,16],
[30,36,29,28,27,33,34,0,19,34,27,28,38,32,27],
[27,31,28,25,22,28,35,31,0,33,29,29,31,26,33],
[24,22,19,20,18,29,28,16,17,0,22,17,21,21,27],
[28,26,24,28,22,31,36,23,21,28,0,30,26,29,21],
[24,25,31,30,19,28,30,22,21,33,20,0,28,21,24],
[24,24,23,20,20,33,33,12,19,29,24,22,0,20,26],
[33,25,26,29,18,32,30,18,24,29,21,29,30,0,28],
[31,24,23,25,20,27,34,23,17,23,29,26,24,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 77, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,26,31,27,32,27,26,26,29,24,29,29,24,23],
[23,0,23,25,29,29,28,22,28,29,29,35,24,25,23],
[24,27,0,27,25,30,25,18,29,34,25,29,25,23,21],
[19,25,23,0,22,26,22,27,22,27,21,28,22,21,20],
[23,21,25,28,0,31,25,22,28,31,26,27,23,23,24],
[18,21,20,24,19,0,18,20,25,17,21,25,22,15,20],
[23,22,25,28,25,32,0,26,27,27,27,26,23,23,24],
[24,28,32,23,28,30,24,0,29,26,24,28,28,28,23],
[24,22,21,28,22,25,23,21,0,27,22,22,22,23,20],
[21,21,16,23,19,33,23,24,23,0,25,27,23,18,15],
[26,21,25,29,24,29,23,26,28,25,0,29,25,26,23],
[21,15,21,22,23,25,24,22,28,23,21,0,23,22,20],
[21,26,25,28,27,28,27,22,28,27,25,27,0,24,20],
[26,25,27,29,27,35,27,22,27,32,24,28,26,0,27],
[27,27,29,30,26,30,26,27,30,35,27,30,30,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 78, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,23,24,23,19,20,22,29,21,24,28,30,23,14],
[31,0,29,29,22,22,20,27,24,27,21,35,33,28,19],
[27,21,0,26,23,23,27,23,24,25,26,32,25,28,20],
[26,21,24,0,25,23,22,27,21,30,30,30,25,29,24],
[27,28,27,25,0,21,23,17,25,27,26,25,31,31,19],
[31,28,27,27,29,0,27,31,28,32,30,34,32,32,24],
[30,30,23,28,27,23,0,22,29,23,25,35,30,31,24],
[28,23,27,23,33,19,28,0,25,24,23,34,34,33,25],
[21,26,26,29,25,22,21,25,0,22,23,32,31,31,20],
[29,23,25,20,23,18,27,26,28,0,20,34,28,30,16],
[26,29,24,20,24,20,25,27,27,30,0,30,24,25,18],
[22,15,18,20,25,16,15,16,18,16,20,0,15,22,15],
[20,17,25,25,19,18,20,16,19,22,26,35,0,25,15],
[27,22,22,21,19,18,19,17,19,20,25,28,25,0,17],
[36,31,30,26,31,26,26,25,30,34,32,35,35,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 79, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,21,24,28,21,18,16,15,26,21,19,33,16,34],
[20,0,18,31,27,22,27,24,19,24,25,23,31,23,30],
[29,32,0,25,24,27,20,23,22,25,20,21,33,14,34],
[26,19,25,0,25,16,19,20,24,23,11,13,36,19,26],
[22,23,26,25,0,19,25,23,18,30,21,20,33,17,26],
[29,28,23,34,31,0,26,20,24,21,23,20,37,20,34],
[32,23,30,31,25,24,0,25,23,25,25,19,27,13,36],
[34,26,27,30,27,30,25,0,25,27,35,26,37,23,32],
[35,31,28,26,32,26,27,25,0,25,20,22,39,24,35],
[24,26,25,27,20,29,25,23,25,0,23,22,28,18,32],
[29,25,30,39,29,27,25,15,30,27,0,15,40,21,40],
[31,27,29,37,30,30,31,24,28,28,35,0,32,25,37],
[17,19,17,14,17,13,23,13,11,22,10,18,0,16,21],
[34,27,36,31,33,30,37,27,26,32,29,25,34,0,35],
[16,20,16,24,24,16,14,18,15,18,10,13,29,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 80, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,25,23,19,23,25,20,21,24,25,24,21,24,27],
[30,0,33,26,24,29,30,27,26,32,24,28,28,32,30],
[25,17,0,20,18,24,27,21,23,27,25,24,25,27,22],
[27,24,30,0,26,23,26,23,23,23,23,28,28,26,25],
[31,26,32,24,0,30,29,29,29,27,29,24,27,25,31],
[27,21,26,27,20,0,28,26,19,26,24,27,22,24,25],
[25,20,23,24,21,22,0,20,25,22,24,22,24,23,24],
[30,23,29,27,21,24,30,0,26,27,27,24,28,26,27],
[29,24,27,27,21,31,25,24,0,28,23,23,28,26,24],
[26,18,23,27,23,24,28,23,22,0,26,26,23,27,25],
[25,26,25,27,21,26,26,23,27,24,0,23,27,25,29],
[26,22,26,22,26,23,28,26,27,24,27,0,25,28,27],
[29,22,25,22,23,28,26,22,22,27,23,25,0,28,27],
[26,18,23,24,25,26,27,24,24,23,25,22,22,0,27],
[23,20,28,25,19,25,26,23,26,25,21,23,23,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 81, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,25,27,24,25,31,28,29,35,31,24,34,29,26],
[31,0,25,26,22,28,32,25,26,36,35,33,31,27,29],
[25,25,0,27,30,26,27,25,30,33,26,22,25,34,29],
[23,24,23,0,21,23,19,20,25,33,24,22,27,29,28],
[26,28,20,29,0,25,24,22,24,35,26,28,26,35,21],
[25,22,24,27,25,0,33,27,30,39,30,32,34,29,27],
[19,18,23,31,26,17,0,23,22,31,24,24,23,27,22],
[22,25,25,30,28,23,27,0,27,34,33,30,27,34,28],
[21,24,20,25,26,20,28,23,0,33,27,22,30,32,23],
[15,14,17,17,15,11,19,16,17,0,14,21,18,25,16],
[19,15,24,26,24,20,26,17,23,36,0,21,27,25,23],
[26,17,28,28,22,18,26,20,28,29,29,0,27,33,22],
[16,19,25,23,24,16,27,23,20,32,23,23,0,30,28],
[21,23,16,21,15,21,23,16,18,25,25,17,20,0,24],
[24,21,21,22,29,23,28,22,27,34,27,28,22,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 82, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,17,34,26,28,27,22,27,25,28,22,31,24,29],
[25,0,15,28,21,25,23,20,20,23,24,15,25,16,19],
[33,35,0,37,27,32,36,29,37,24,33,26,33,28,27],
[16,22,13,0,24,22,19,22,20,22,20,14,13,8,13],
[24,29,23,26,0,31,25,21,21,26,25,17,30,21,21],
[22,25,18,28,19,0,27,21,26,23,29,21,34,14,18],
[23,27,14,31,25,23,0,23,33,20,21,23,25,17,25],
[28,30,21,28,29,29,27,0,32,20,25,22,24,21,27],
[23,30,13,30,29,24,17,18,0,22,25,16,31,16,16],
[25,27,26,28,24,27,30,30,28,0,22,20,25,16,22],
[22,26,17,30,25,21,29,25,25,28,0,21,26,14,21],
[28,35,24,36,33,29,27,28,34,30,29,0,40,20,26],
[19,25,17,37,20,16,25,26,19,25,24,10,0,19,20],
[26,34,22,42,29,36,33,29,34,34,36,30,31,0,25],
[21,31,23,37,29,32,25,23,34,28,29,24,30,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 83, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,19,26,40,30,24,25,25,29,27,25,19,21,26],
[19,0,30,22,36,32,23,21,24,31,24,21,31,25,25],
[31,20,0,25,37,27,32,26,16,29,36,28,27,22,31],
[24,28,25,0,31,22,26,34,25,27,29,20,30,29,30],
[10,14,13,19,0,25,13,21,15,16,16,21,13,18,8],
[20,18,23,28,25,0,20,22,22,15,16,14,23,30,21],
[26,27,18,24,37,30,0,16,16,33,12,19,28,31,18],
[25,29,24,16,29,28,34,0,32,30,20,17,26,23,25],
[25,26,34,25,35,28,34,18,0,31,25,28,29,30,26],
[21,19,21,23,34,35,17,20,19,0,25,27,13,16,14],
[23,26,14,21,34,34,38,30,25,25,0,17,18,25,15],
[25,29,22,30,29,36,31,33,22,23,33,0,18,24,18],
[31,19,23,20,37,27,22,24,21,37,32,32,0,16,28],
[29,25,28,21,32,20,19,27,20,34,25,26,34,0,20],
[24,25,19,20,42,29,32,25,24,36,35,32,22,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 84, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,18,27,21,19,25,24,27,27,25,32,27,21,24],
[30,0,24,31,29,28,25,26,30,31,27,30,30,22,28],
[32,26,0,22,31,18,29,29,30,28,31,30,26,19,27],
[23,19,28,0,27,22,28,28,27,27,26,28,31,25,23],
[29,21,19,23,0,21,23,23,23,28,25,25,23,21,24],
[31,22,32,28,29,0,27,30,27,30,30,28,32,25,27],
[25,25,21,22,27,23,0,27,25,25,25,28,24,22,22],
[26,24,21,22,27,20,23,0,27,28,26,23,31,22,25],
[23,20,20,23,27,23,25,23,0,19,24,27,20,22,22],
[23,19,22,23,22,20,25,22,31,0,25,30,24,22,18],
[25,23,19,24,25,20,25,24,26,25,0,28,24,22,23],
[18,20,20,22,25,22,22,27,23,20,22,0,22,16,21],
[23,20,24,19,27,18,26,19,30,26,26,28,0,23,21],
[29,28,31,25,29,25,28,28,28,28,28,34,27,0,27],
[26,22,23,27,26,23,28,25,28,32,27,29,29,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 85, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,31,24,20,29,28,32,27,30,22,27,28,32,33],
[19,0,20,21,21,27,25,22,22,29,18,24,23,26,27],
[19,30,0,19,25,29,32,29,27,36,27,37,27,31,32],
[26,29,31,0,23,26,32,25,33,35,26,29,28,27,40],
[30,29,25,27,0,28,24,26,25,34,23,30,23,32,30],
[21,23,21,24,22,0,26,23,24,32,28,36,28,29,26],
[22,25,18,18,26,24,0,25,20,26,23,25,22,23,27],
[18,28,21,25,24,27,25,0,27,31,22,29,25,30,32],
[23,28,23,17,25,26,30,23,0,27,24,36,30,32,34],
[20,21,14,15,16,18,24,19,23,0,26,34,27,18,20],
[28,32,23,24,27,22,27,28,26,24,0,30,20,31,33],
[23,26,13,21,20,14,25,21,14,16,20,0,22,21,22],
[22,27,23,22,27,22,28,25,20,23,30,28,0,20,26],
[18,24,19,23,18,21,27,20,18,32,19,29,30,0,29],
[17,23,18,10,20,24,23,18,16,30,17,28,24,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 86, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,21,27,21,13,22,19,29,28,16,14,25,29,30],
[27,0,19,28,31,15,23,16,21,24,19,17,20,32,22],
[29,31,0,31,36,26,29,24,36,28,26,17,31,33,36],
[23,22,19,0,27,12,21,19,25,25,13,18,22,28,19],
[29,19,14,23,0,16,13,21,27,26,19,15,28,22,22],
[37,35,24,38,34,0,35,29,31,35,25,34,34,37,36],
[28,27,21,29,37,15,0,24,31,29,13,23,26,34,33],
[31,34,26,31,29,21,26,0,32,35,26,28,25,29,32],
[21,29,14,25,23,19,19,18,0,23,22,17,16,23,22],
[22,26,22,25,24,15,21,15,27,0,13,22,24,26,27],
[34,31,24,37,31,25,37,24,28,37,0,32,27,34,32],
[36,33,33,32,35,16,27,22,33,28,18,0,31,33,35],
[25,30,19,28,22,16,24,25,34,26,23,19,0,32,28],
[21,18,17,22,28,13,16,21,27,24,16,17,18,0,27],
[20,28,14,31,28,14,17,18,28,23,18,15,22,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 87, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,25,34,28,30,25,24,25,36,29,27,32,25,29],
[23,0,28,30,29,30,21,24,25,36,25,27,28,23,30],
[25,22,0,28,24,30,20,26,24,29,27,27,24,20,25],
[16,20,22,0,20,24,21,19,20,28,26,25,23,19,25],
[22,21,26,30,0,23,22,20,26,30,26,26,23,18,25],
[20,20,20,26,27,0,20,20,22,29,24,23,25,19,24],
[25,29,30,29,28,30,0,26,26,31,25,29,26,21,28],
[26,26,24,31,30,30,24,0,28,32,27,25,34,24,25],
[25,25,26,30,24,28,24,22,0,29,29,26,26,21,24],
[14,14,21,22,20,21,19,18,21,0,16,22,25,18,20],
[21,25,23,24,24,26,25,23,21,34,0,26,26,23,26],
[23,23,23,25,24,27,21,25,24,28,24,0,25,20,27],
[18,22,26,27,27,25,24,16,24,25,24,25,0,23,24],
[25,27,30,31,32,31,29,26,29,32,27,30,27,0,30],
[21,20,25,25,25,26,22,25,26,30,24,23,26,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 88, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,22,23,27,23,33,27,21,26,24,26,27,30,25],
[24,0,22,31,26,30,26,28,22,22,21,29,23,27,28],
[28,28,0,26,31,29,23,32,26,20,23,24,29,25,28],
[27,19,24,0,28,29,27,26,20,28,28,29,23,27,27],
[23,24,19,22,0,26,22,29,20,25,21,26,25,19,26],
[27,20,21,21,24,0,26,30,19,29,26,27,26,29,25],
[17,24,27,23,28,24,0,35,26,25,22,30,27,26,28],
[23,22,18,24,21,20,15,0,19,21,17,25,25,23,24],
[29,28,24,30,30,31,24,31,0,26,28,33,29,31,30],
[24,28,30,22,25,21,25,29,24,0,28,33,25,28,29],
[26,29,27,22,29,24,28,33,22,22,0,26,22,29,24],
[24,21,26,21,24,23,20,25,17,17,24,0,22,23,23],
[23,27,21,27,25,24,23,25,21,25,28,28,0,33,25],
[20,23,25,23,31,21,24,27,19,22,21,27,17,0,21],
[25,22,22,23,24,25,22,26,20,21,26,27,25,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 89, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,20,26,25,27,22,26,27,17,24,21,18,29,21],
[26,0,19,18,23,18,14,28,23,14,22,16,19,16,23],
[30,31,0,36,33,27,29,30,26,25,23,19,27,21,15],
[24,32,14,0,23,27,20,31,26,27,24,22,21,19,20],
[25,27,17,27,0,27,16,26,25,21,25,19,22,22,18],
[23,32,23,23,23,0,14,23,31,15,28,13,25,21,19],
[28,36,21,30,34,36,0,35,33,22,30,20,32,26,21],
[24,22,20,19,24,27,15,0,19,19,25,15,15,24,16],
[23,27,24,24,25,19,17,31,0,20,26,13,18,16,20],
[33,36,25,23,29,35,28,31,30,0,32,23,25,24,24],
[26,28,27,26,25,22,20,25,24,18,0,14,21,19,18],
[29,34,31,28,31,37,30,35,37,27,36,0,35,32,25],
[32,31,23,29,28,25,18,35,32,25,29,15,0,23,17],
[21,34,29,31,28,29,24,26,34,26,31,18,27,0,20],
[29,27,35,30,32,31,29,34,30,26,32,25,33,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 90, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,31,22,20,37,31,23,24,24,30,29,28,26,24],
[22,0,30,24,23,33,29,26,19,26,25,30,31,29,26],
[19,20,0,22,23,24,25,22,25,20,30,23,20,22,30],
[28,26,28,0,25,33,37,29,29,31,34,35,28,29,31],
[30,27,27,25,0,32,32,25,27,29,31,30,27,32,27],
[13,17,26,17,18,0,28,19,22,22,26,24,15,24,26],
[19,21,25,13,18,22,0,22,21,25,25,29,22,23,18],
[27,24,28,21,25,31,28,0,22,24,29,27,26,26,29],
[26,31,25,21,23,28,29,28,0,24,28,27,29,30,27],
[26,24,30,19,21,28,25,26,26,0,31,31,24,23,30],
[20,25,20,16,19,24,25,21,22,19,0,28,24,27,21],
[21,20,27,15,20,26,21,23,23,19,22,0,22,26,25],
[22,19,30,22,23,35,28,24,21,26,26,28,0,29,28],
[24,21,28,21,18,26,27,24,20,27,23,24,21,0,22],
[26,24,20,19,23,24,32,21,23,20,29,25,22,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 91, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,25,29,31,27,27,26,30,28,23,26,33,26,30],
[24,0,20,24,20,21,19,18,25,20,19,24,26,19,28],
[25,30,0,26,25,24,25,27,25,23,26,21,29,27,31],
[21,26,24,0,29,28,25,26,25,17,23,27,30,28,29],
[19,30,25,21,0,25,24,27,24,20,24,23,26,26,25],
[23,29,26,22,25,0,23,25,25,20,27,25,30,23,28],
[23,31,25,25,26,27,0,27,24,23,26,27,35,30,29],
[24,32,23,24,23,25,23,0,22,21,27,23,26,27,27],
[20,25,25,25,26,25,26,28,0,24,25,23,25,29,23],
[22,30,27,33,30,30,27,29,26,0,24,31,32,32,34],
[27,31,24,27,26,23,24,23,25,26,0,19,27,27,28],
[24,26,29,23,27,25,23,27,27,19,31,0,30,26,32],
[17,24,21,20,24,20,15,24,25,18,23,20,0,26,19],
[24,31,23,22,24,27,20,23,21,18,23,24,24,0,29],
[20,22,19,21,25,22,21,23,27,16,22,18,31,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 92, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,25,18,14,24,24,23,21,21,27,22,30,25,24],
[32,0,29,28,24,28,27,29,26,26,29,27,33,29,29],
[25,21,0,19,19,24,17,26,25,20,27,17,25,25,21],
[32,22,31,0,23,25,24,29,25,29,31,25,32,32,29],
[36,26,31,27,0,24,30,26,25,28,30,25,34,28,31],
[26,22,26,25,26,0,28,26,28,25,28,24,29,32,29],
[26,23,33,26,20,22,0,23,22,26,24,24,29,26,30],
[27,21,24,21,24,24,27,0,17,23,24,17,29,27,27],
[29,24,25,25,25,22,28,33,0,28,29,25,28,30,29],
[29,24,30,21,22,25,24,27,22,0,25,22,26,29,23],
[23,21,23,19,20,22,26,26,21,25,0,21,26,25,26],
[28,23,33,25,25,26,26,33,25,28,29,0,31,30,30],
[20,17,25,18,16,21,21,21,22,24,24,19,0,24,22],
[25,21,25,18,22,18,24,23,20,21,25,20,26,0,30],
[26,21,29,21,19,21,20,23,21,27,24,20,28,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 93, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,17,24,27,24,24,28,22,29,29,26,31,21,26],
[20,0,18,29,28,16,29,20,19,27,20,24,23,27,30],
[33,32,0,30,32,27,23,35,26,33,35,32,31,23,28],
[26,21,20,0,21,20,20,24,22,31,26,23,18,17,26],
[23,22,18,29,0,31,22,21,22,28,19,21,21,18,26],
[26,34,23,30,19,0,28,22,23,29,23,28,19,23,24],
[26,21,27,30,28,22,0,26,26,28,29,32,22,23,31],
[22,30,15,26,29,28,24,0,27,31,26,30,31,19,24],
[28,31,24,28,28,27,24,23,0,28,25,28,30,23,25],
[21,23,17,19,22,21,22,19,22,0,25,20,23,17,23],
[21,30,15,24,31,27,21,24,25,25,0,26,27,23,27],
[24,26,18,27,29,22,18,20,22,30,24,0,23,12,25],
[19,27,19,32,29,31,28,19,20,27,23,27,0,21,34],
[29,23,27,33,32,27,27,31,27,33,27,38,29,0,30],
[24,20,22,24,24,26,19,26,25,27,23,25,16,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 94, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,25,28,22,24,11,19,27,15,26,18,14,22,15],
[36,0,35,32,33,27,26,34,35,41,30,22,27,28,30],
[25,15,0,23,23,19,17,23,28,24,21,21,15,23,23],
[22,18,27,0,19,22,22,18,19,23,26,15,23,20,14],
[28,17,27,31,0,24,20,25,33,22,32,19,20,26,19],
[26,23,31,28,26,0,22,26,32,29,32,29,24,21,16],
[39,24,33,28,30,28,0,22,30,27,30,26,25,32,25],
[31,16,27,32,25,24,28,0,29,28,30,24,20,28,26],
[23,15,22,31,17,18,20,21,0,20,28,13,17,15,11],
[35,9,26,27,28,21,23,22,30,0,28,19,19,22,21],
[24,20,29,24,18,18,20,20,22,22,0,16,24,18,17],
[32,28,29,35,31,21,24,26,37,31,34,0,18,27,29],
[36,23,35,27,30,26,25,30,33,31,26,32,0,26,27],
[28,22,27,30,24,29,18,22,35,28,32,23,24,0,14],
[35,20,27,36,31,34,25,24,39,29,33,21,23,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 95, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,23,26,23,25,25,30,28,20,27,21,26,26,28],
[27,0,21,24,22,27,26,27,25,21,24,27,27,22,23],
[27,29,0,22,22,28,23,32,22,24,29,24,31,31,24],
[24,26,28,0,23,28,28,29,26,21,27,29,27,24,26],
[27,28,28,27,0,35,27,29,23,25,30,31,27,30,26],
[25,23,22,22,15,0,23,28,22,19,28,21,24,25,19],
[25,24,27,22,23,27,0,28,17,15,26,28,22,25,20],
[20,23,18,21,21,22,22,0,17,17,20,23,21,25,23],
[22,25,28,24,27,28,33,33,0,27,29,26,31,28,30],
[30,29,26,29,25,31,35,33,23,0,34,31,30,31,27],
[23,26,21,23,20,22,24,30,21,16,0,22,23,24,22],
[29,23,26,21,19,29,22,27,24,19,28,0,25,24,26],
[24,23,19,23,23,26,28,29,19,20,27,25,0,25,25],
[24,28,19,26,20,25,25,25,22,19,26,26,25,0,27],
[22,27,26,24,24,31,30,27,20,23,28,24,25,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 96, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,28,30,30,24,30,28,27,28,25,27,29,24,35],
[20,0,15,21,23,16,25,18,21,22,23,25,25,15,35],
[22,35,0,30,32,28,34,25,30,31,28,27,27,29,33],
[20,29,20,0,24,19,24,23,24,23,24,24,31,21,30],
[20,27,18,26,0,19,22,27,23,16,23,27,27,16,30],
[26,34,22,31,31,0,28,22,29,29,27,30,29,25,35],
[20,25,16,26,28,22,0,25,25,25,25,28,24,21,31],
[22,32,25,27,23,28,25,0,28,26,25,27,27,25,30],
[23,29,20,26,27,21,25,22,0,24,26,30,26,19,30],
[22,28,19,27,34,21,25,24,26,0,28,34,33,26,32],
[25,27,22,26,27,23,25,25,24,22,0,28,25,20,28],
[23,25,23,26,23,20,22,23,20,16,22,0,23,15,30],
[21,25,23,19,23,21,26,23,24,17,25,27,0,17,30],
[26,35,21,29,34,25,29,25,31,24,30,35,33,0,35],
[15,15,17,20,20,15,19,20,20,18,22,20,20,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 97, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,29,32,23,22,24,25,35,38,31,30,32,28,33],
[20,0,24,25,23,23,24,20,28,22,27,22,26,21,20],
[21,26,0,25,24,19,23,22,23,24,30,26,24,23,18],
[18,25,25,0,25,23,26,27,25,27,31,27,25,22,22],
[27,27,26,25,0,25,24,25,29,30,26,26,33,26,29],
[28,27,31,27,25,0,31,29,29,34,33,30,32,32,29],
[26,26,27,24,26,19,0,23,28,28,30,24,25,23,26],
[25,30,28,23,25,21,27,0,24,27,29,27,27,28,26],
[15,22,27,25,21,21,22,26,0,22,27,23,23,24,20],
[12,28,26,23,20,16,22,23,28,0,27,23,26,22,25],
[19,23,20,19,24,17,20,21,23,23,0,19,21,21,19],
[20,28,24,23,24,20,26,23,27,27,31,0,24,23,25],
[18,24,26,25,17,18,25,23,27,24,29,26,0,23,24],
[22,29,27,28,24,18,27,22,26,28,29,27,27,0,25],
[17,30,32,28,21,21,24,24,30,25,31,25,26,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 98, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,24,27,29,21,25,26,23,21,28,22,22,25,23],
[27,0,19,28,27,28,27,27,24,20,29,28,24,28,26],
[26,31,0,33,36,33,31,30,25,28,34,25,28,29,24],
[23,22,17,0,25,13,23,23,21,19,28,22,20,23,22],
[21,23,14,25,0,22,22,22,22,20,27,23,19,18,18],
[29,22,17,37,28,0,24,26,29,24,33,28,25,23,20],
[25,23,19,27,28,26,0,23,24,21,28,28,21,18,20],
[24,23,20,27,28,24,27,0,25,17,26,24,24,26,22],
[27,26,25,29,28,21,26,25,0,16,26,21,19,19,20],
[29,30,22,31,30,26,29,33,34,0,33,25,24,32,28],
[22,21,16,22,23,17,22,24,24,17,0,24,15,21,20],
[28,22,25,28,27,22,22,26,29,25,26,0,26,26,27],
[28,26,22,30,31,25,29,26,31,26,35,24,0,23,21],
[25,22,21,27,32,27,32,24,31,18,29,24,27,0,27],
[27,24,26,28,32,30,30,28,30,22,30,23,29,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 99, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,14,29,20,13,24,12,11,26,18,14,12,15,22],
[29,0,32,27,27,31,29,30,27,33,17,12,11,35,29],
[36,18,0,31,22,20,33,23,22,39,21,19,27,37,22],
[21,23,19,0,29,23,33,4,23,29,25,25,19,34,38],
[30,23,28,21,0,23,27,17,26,33,23,2,17,39,34],
[37,19,30,27,27,0,38,22,16,48,23,2,21,31,18],
[26,21,17,17,23,12,0,13,20,27,23,2,4,14,13],
[38,20,27,46,33,28,37,0,26,28,32,23,20,34,37],
[39,23,28,27,24,34,30,24,0,36,25,8,19,24,30],
[24,17,11,21,17,2,23,22,14,0,21,2,4,18,12],
[32,33,29,25,27,27,27,18,25,29,0,14,27,30,32],
[36,38,31,25,48,48,48,27,42,48,36,0,29,48,46],
[38,39,23,31,33,29,46,30,31,46,23,21,0,35,24],
[35,15,13,16,11,19,36,16,26,32,20,2,15,0,25],
[28,21,28,12,16,32,37,13,20,38,18,4,26,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 100, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,27,37,28,28,28,25,34,32,30,27,27,26,28],
[29,0,24,33,24,22,18,32,34,25,28,25,16,26,27],
[23,26,0,34,28,22,26,34,33,34,31,33,25,27,34],
[13,17,16,0,20,17,22,22,24,21,18,20,14,15,26],
[22,26,22,30,0,21,24,26,33,24,31,21,17,21,35],
[22,28,28,33,29,0,27,24,28,32,25,26,25,24,33],
[22,32,24,28,26,23,0,32,36,36,29,23,23,26,36],
[25,18,16,28,24,26,18,0,26,25,26,19,17,27,25],
[16,16,17,26,17,22,14,24,0,26,21,18,24,17,28],
[18,25,16,29,26,18,14,25,24,0,27,24,16,18,22],
[20,22,19,32,19,25,21,24,29,23,0,28,24,23,29],
[23,25,17,30,29,24,27,31,32,26,22,0,22,23,30],
[23,34,25,36,33,25,27,33,26,34,26,28,0,27,37],
[24,24,23,35,29,26,24,23,33,32,27,27,23,0,25],
[22,23,16,24,15,17,14,25,22,28,21,20,13,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 101, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,26,20,25,22,21,18,20,24,25,26,16,26,25],
[20,0,25,20,21,20,23,17,20,20,20,24,13,22,19],
[24,25,0,22,22,21,20,20,24,23,19,24,18,24,21],
[30,30,28,0,26,25,23,22,25,24,25,26,22,29,27],
[25,29,28,24,0,19,21,23,22,25,22,26,25,28,26],
[28,30,29,25,31,0,26,25,25,30,27,29,19,30,23],
[29,27,30,27,29,24,0,27,24,29,25,27,17,26,23],
[32,33,30,28,27,25,23,0,30,27,27,30,23,30,22],
[30,30,26,25,28,25,26,20,0,28,32,31,22,28,24],
[26,30,27,26,25,20,21,23,22,0,23,27,21,22,18],
[25,30,31,25,28,23,25,23,18,27,0,29,20,24,20],
[24,26,26,24,24,21,23,20,19,23,21,0,22,25,21],
[34,37,32,28,25,31,33,27,28,29,30,28,0,29,27],
[24,28,26,21,22,20,24,20,22,28,26,25,21,0,24],
[25,31,29,23,24,27,27,28,26,32,30,29,23,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 102, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,15,20,27,17,17,23,23,18,13,17,22,16,27],
[36,0,26,28,26,26,25,25,30,25,30,31,32,26,31],
[35,24,0,31,28,25,24,24,30,22,23,25,29,22,31],
[30,22,19,0,21,18,24,28,27,21,24,21,27,20,32],
[23,24,22,29,0,20,22,28,28,17,21,19,24,22,29],
[33,24,25,32,30,0,24,25,33,24,28,26,31,29,31],
[33,25,26,26,28,26,0,29,34,24,26,30,35,26,37],
[27,25,26,22,22,25,21,0,31,22,25,22,28,19,29],
[27,20,20,23,22,17,16,19,0,21,22,21,23,22,27],
[32,25,28,29,33,26,26,28,29,0,24,23,31,27,30],
[37,20,27,26,29,22,24,25,28,26,0,25,28,25,29],
[33,19,25,29,31,24,20,28,29,27,25,0,27,29,32],
[28,18,21,23,26,19,15,22,27,19,22,23,0,20,28],
[34,24,28,30,28,21,24,31,28,23,25,21,30,0,35],
[23,19,19,18,21,19,13,21,23,20,21,18,22,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 103, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,30,26,30,26,22,23,28,27,26,28,26,28,22],
[20,0,26,19,21,21,21,25,26,25,23,21,22,22,23],
[20,24,0,23,20,25,25,25,23,24,23,20,26,22,20],
[24,31,27,0,29,34,32,28,28,33,28,31,27,32,25],
[20,29,30,21,0,26,24,28,28,28,26,25,23,25,24],
[24,29,25,16,24,0,23,27,26,24,23,21,21,24,19],
[28,29,25,18,26,27,0,26,28,23,23,30,28,27,26],
[27,25,25,22,22,23,24,0,27,24,25,28,26,24,20],
[22,24,27,22,22,24,22,23,0,25,24,24,24,21,20],
[23,25,26,17,22,26,27,26,25,0,21,24,24,21,24],
[24,27,27,22,24,27,27,25,26,29,0,25,24,27,19],
[22,29,30,19,25,29,20,22,26,26,25,0,24,23,23],
[24,28,24,23,27,29,22,24,26,26,26,26,0,25,26],
[22,28,28,18,25,26,23,26,29,29,23,27,25,0,20],
[28,27,30,25,26,31,24,30,30,26,31,27,24,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 104, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,35,50,26,23,27,34,35,50,23,46,38,23,23],
[11,0,35,27,16,21,23,34,46,24,13,46,28,24,23],
[15,15,0,27,27,25,38,28,50,15,28,27,15,28,21],
[0,23,23,0,0,23,23,34,23,13,13,23,24,13,23],
[24,34,23,50,0,34,23,34,46,24,34,46,38,24,23],
[27,29,25,27,16,0,27,24,46,40,25,36,28,36,23],
[23,27,12,27,27,23,0,24,36,27,36,23,15,36,10],
[16,16,22,16,16,26,26,0,35,16,29,26,16,29,22],
[15,4,0,27,4,4,14,15,0,15,4,27,15,4,10],
[0,26,35,37,26,10,23,34,35,0,23,22,25,23,10],
[27,37,22,37,16,25,14,21,46,27,0,33,25,24,10],
[4,4,23,27,4,14,27,24,23,28,17,0,28,17,23],
[12,22,35,26,12,22,35,34,35,25,25,22,0,25,35],
[27,26,22,37,26,14,14,21,46,27,26,33,25,0,10],
[27,27,29,27,27,27,40,28,40,40,40,27,15,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 105, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,23,22,25,21,26,16,23,22,20,17,24,23,25],
[32,0,35,34,34,24,31,31,28,32,31,25,31,32,36],
[27,15,0,26,28,22,26,18,22,27,22,21,21,22,23],
[28,16,24,0,24,21,24,22,19,26,18,22,25,20,26],
[25,16,22,26,0,24,28,25,25,24,22,24,26,22,24],
[29,26,28,29,26,0,28,25,24,26,25,22,28,26,29],
[24,19,24,26,22,22,0,24,27,28,23,18,31,21,26],
[34,19,32,28,25,25,26,0,24,23,21,28,35,26,25],
[27,22,28,31,25,26,23,26,0,31,24,23,29,25,25],
[28,18,23,24,26,24,22,27,19,0,19,21,24,28,23],
[30,19,28,32,28,25,27,29,26,31,0,23,28,27,29],
[33,25,29,28,26,28,32,22,27,29,27,0,28,30,32],
[26,19,29,25,24,22,19,15,21,26,22,22,0,25,19],
[27,18,28,30,28,24,29,24,25,22,23,20,25,0,23],
[25,14,27,24,26,21,24,25,25,27,21,18,31,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 106, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,28,22,27,30,21,20,30,31,25,26,25,24],
[23,0,30,28,21,36,23,22,30,35,27,33,17,25,23],
[22,20,0,26,25,32,15,19,27,29,27,26,19,27,18],
[22,22,24,0,20,23,20,23,20,35,23,24,16,24,25],
[28,29,25,30,0,28,29,25,30,37,30,37,20,26,29],
[23,14,18,27,22,0,10,17,19,27,20,24,20,22,23],
[20,27,35,30,21,40,0,18,28,32,23,38,24,25,21],
[29,28,31,27,25,33,32,0,28,29,27,35,23,29,31],
[30,20,23,30,20,31,22,22,0,30,23,33,17,21,25],
[20,15,21,15,13,23,18,21,20,0,21,23,12,16,21],
[19,23,23,27,20,30,27,23,27,29,0,24,18,24,20],
[25,17,24,26,13,26,12,15,17,27,26,0,17,21,23],
[24,33,31,34,30,30,26,27,33,38,32,33,0,29,25],
[25,25,23,26,24,28,25,21,29,34,26,29,21,0,28],
[26,27,32,25,21,27,29,19,25,29,30,27,25,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 107, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,36,26,14,37,31,16,34,36,23,25,38,23,32],
[27,0,27,26,7,27,16,16,26,42,28,24,33,14,15],
[14,23,0,22,5,13,14,13,25,28,24,20,24,11,10],
[24,24,28,0,12,24,24,21,41,36,25,29,26,19,11],
[36,43,45,38,0,37,48,18,39,45,23,36,33,16,34],
[13,23,37,26,13,0,23,16,27,37,12,26,37,23,24],
[19,34,36,26,2,27,0,17,31,28,23,19,24,16,16],
[34,34,37,29,32,34,33,0,37,44,14,36,34,14,23],
[16,24,25,9,11,23,19,13,0,24,15,35,26,11,20],
[14,8,22,14,5,13,22,6,26,0,16,22,22,14,22],
[27,22,26,25,27,38,27,36,35,34,0,24,27,34,26],
[25,26,30,21,14,24,31,14,15,28,26,0,31,21,30],
[12,17,26,24,17,13,26,16,24,28,23,19,0,14,13],
[27,36,39,31,34,27,34,36,39,36,16,29,36,0,35],
[18,35,40,39,16,26,34,27,30,28,24,20,37,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 108, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,37,13,28,27,19,25,32,28,40,39,35,22,25],
[26,0,28,12,16,17,18,21,21,21,24,24,33,25,22],
[13,22,0,18,19,32,17,28,31,30,34,34,30,25,27],
[37,38,32,0,27,31,21,29,38,32,40,30,36,25,26],
[22,34,31,23,0,35,20,33,34,28,41,41,38,23,32],
[23,33,18,19,15,0,19,26,33,21,26,24,31,24,23],
[31,32,33,29,30,31,0,34,33,32,38,33,29,24,28],
[25,29,22,21,17,24,16,0,29,27,36,31,32,23,22],
[18,29,19,12,16,17,17,21,0,21,31,25,30,12,31],
[22,29,20,18,22,29,18,23,29,0,25,23,18,26,15],
[10,26,16,10,9,24,12,14,19,25,0,21,17,10,20],
[11,26,16,20,9,26,17,19,25,27,29,0,21,15,23],
[15,17,20,14,12,19,21,18,20,32,33,29,0,20,20],
[28,25,25,25,27,26,26,27,38,24,40,35,30,0,32],
[25,28,23,24,18,27,22,28,19,35,30,27,30,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 109, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,28,25,25,25,25,26,23,24,27,21,23,23,26],
[26,0,27,23,20,26,26,28,20,21,26,29,25,22,25],
[22,23,0,26,17,24,22,23,20,25,29,26,27,15,23],
[25,27,24,0,24,25,22,21,23,24,30,31,25,22,25],
[25,30,33,26,0,30,28,30,26,28,28,32,26,20,31],
[25,24,26,25,20,0,28,28,23,23,27,29,16,24,27],
[25,24,28,28,22,22,0,28,22,29,30,27,28,24,26],
[24,22,27,29,20,22,22,0,25,26,29,28,26,19,26],
[27,30,30,27,24,27,28,25,0,29,33,31,31,23,25],
[26,29,25,26,22,27,21,24,21,0,25,29,23,19,25],
[23,24,21,20,22,23,20,21,17,25,0,28,21,19,15],
[29,21,24,19,18,21,23,22,19,21,22,0,17,21,18],
[27,25,23,25,24,34,22,24,19,27,29,33,0,20,24],
[27,28,35,28,30,26,26,31,27,31,31,29,30,0,25],
[24,25,27,25,19,23,24,24,25,25,35,32,26,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 110, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,25,32,22,15,22,18,24,17,21,22,27,20,21],
[19,0,24,29,20,17,19,17,22,15,18,24,23,27,24],
[25,26,0,29,24,17,25,20,15,17,16,29,23,23,26],
[18,21,21,0,29,22,26,22,18,18,23,25,25,20,25],
[28,30,26,21,0,24,26,17,16,21,27,25,30,28,28],
[35,33,33,28,26,0,27,24,26,24,25,33,31,28,30],
[28,31,25,24,24,23,0,24,15,20,17,22,17,28,25],
[32,33,30,28,33,26,26,0,22,25,27,30,25,29,30],
[26,28,35,32,34,24,35,28,0,34,28,34,38,33,29],
[33,35,33,32,29,26,30,25,16,0,20,29,25,31,33],
[29,32,34,27,23,25,33,23,22,30,0,33,33,25,31],
[28,26,21,25,25,17,28,20,16,21,17,0,30,20,24],
[23,27,27,25,20,19,33,25,12,25,17,20,0,22,21],
[30,23,27,30,22,22,22,21,17,19,25,30,28,0,28],
[29,26,24,25,22,20,25,20,21,17,19,26,29,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 111, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,21,23,19,25,17,22,18,11,26,28,24,19,20],
[32,0,27,33,26,29,25,33,33,28,34,33,30,33,33],
[29,23,0,27,26,22,18,22,25,16,26,27,26,28,23],
[27,17,23,0,24,28,21,27,24,28,26,25,26,26,28],
[31,24,24,26,0,33,23,25,22,26,29,30,28,30,24],
[25,21,28,22,17,0,22,24,28,18,25,34,27,26,22],
[33,25,32,29,27,28,0,28,22,24,31,28,31,32,33],
[28,17,28,23,25,26,22,0,21,25,22,24,25,29,20],
[32,17,25,26,28,22,28,29,0,19,31,26,26,27,30],
[39,22,34,22,24,32,26,25,31,0,32,30,36,29,29],
[24,16,24,24,21,25,19,28,19,18,0,30,21,27,23],
[22,17,23,25,20,16,22,26,24,20,20,0,19,26,20],
[26,20,24,24,22,23,19,25,24,14,29,31,0,26,26],
[31,17,22,24,20,24,18,21,23,21,23,24,24,0,22],
[30,17,27,22,26,28,17,30,20,21,27,30,24,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 112, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,36,41,37,37,41,23,34,33,23,17,30,28,21],
[29,0,35,38,35,46,43,29,19,35,31,27,30,36,31],
[14,15,0,28,24,28,25,23,29,19,21,21,17,33,20],
[9,12,22,0,25,25,21,20,23,22,22,15,30,18,18],
[13,15,26,25,0,28,24,29,23,21,21,17,28,31,15],
[13,4,22,25,22,0,21,20,14,14,9,13,22,19,19],
[9,7,25,29,26,29,0,22,22,23,15,17,27,21,24],
[27,21,27,30,21,30,28,0,34,14,28,14,21,30,23],
[16,31,21,27,27,36,28,16,0,24,18,17,27,22,25],
[17,15,31,28,29,36,27,36,26,0,29,16,22,25,18],
[27,19,29,28,29,41,35,22,32,21,0,21,29,27,30],
[33,23,29,35,33,37,33,36,33,34,29,0,30,33,32],
[20,20,33,20,22,28,23,29,23,28,21,20,0,23,25],
[22,14,17,32,19,31,29,20,28,25,23,17,27,0,18],
[29,19,30,32,35,31,26,27,25,32,20,18,25,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 113, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,15,24,23,18,17,25,24,25,15,24,17,19,19],
[31,0,26,27,26,25,30,27,33,33,26,36,25,23,25],
[35,24,0,25,26,22,32,28,27,24,22,29,28,25,24],
[26,23,25,0,22,20,29,27,32,28,29,29,30,27,28],
[27,24,24,28,0,17,29,27,32,31,21,25,21,14,22],
[32,25,28,30,33,0,28,31,30,30,31,33,25,27,28],
[33,20,18,21,21,22,0,21,26,26,13,31,16,20,16],
[25,23,22,23,23,19,29,0,26,29,19,26,13,23,19],
[26,17,23,18,18,20,24,24,0,24,16,23,22,21,23],
[25,17,26,22,19,20,24,21,26,0,23,24,22,21,20],
[35,24,28,21,29,19,37,31,34,27,0,29,22,24,30],
[26,14,21,21,25,17,19,24,27,26,21,0,21,23,19],
[33,25,22,20,29,25,34,37,28,28,28,29,0,31,33],
[31,27,25,23,36,23,30,27,29,29,26,27,19,0,18],
[31,25,26,22,28,22,34,31,27,30,20,31,17,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 114, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,15,15,12,12,17,16,17,28,14,22,22,11,16],
[34,0,25,26,22,24,25,22,25,30,30,34,33,23,25],
[35,25,0,30,24,29,20,20,26,36,29,30,30,23,28],
[35,24,20,0,26,15,23,23,26,32,24,29,25,21,20],
[38,28,26,24,0,26,30,24,18,32,27,33,28,23,30],
[38,26,21,35,24,0,25,23,24,32,32,29,25,18,30],
[33,25,30,27,20,25,0,22,20,34,27,30,27,25,32],
[34,28,30,27,26,27,28,0,25,36,31,38,30,25,30],
[33,25,24,24,32,26,30,25,0,35,24,35,29,25,28],
[22,20,14,18,18,18,16,14,15,0,21,22,22,11,20],
[36,20,21,26,23,18,23,19,26,29,0,28,30,16,26],
[28,16,20,21,17,21,20,12,15,28,22,0,20,13,23],
[28,17,20,25,22,25,23,20,21,28,20,30,0,23,22],
[39,27,27,29,27,32,25,25,25,39,34,37,27,0,35],
[34,25,22,30,20,20,18,20,22,30,24,27,28,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 115, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,36,26,25,23,26,26,23,35,35,32,23,25,29],
[34,0,47,31,35,32,29,33,34,42,40,40,21,20,31],
[14,3,0,3,13,10,18,19,26,28,14,20,19,17,17],
[24,19,47,0,33,30,32,29,28,35,30,32,22,26,31],
[25,15,37,17,0,23,31,17,30,40,25,25,25,24,20],
[27,18,40,20,27,0,35,27,26,33,27,31,21,22,30],
[24,21,32,18,19,15,0,27,18,30,30,21,17,23,16],
[24,17,31,21,33,23,23,0,21,37,30,34,16,20,21],
[27,16,24,22,20,24,32,29,0,36,26,25,20,27,14],
[15,8,22,15,10,17,20,13,14,0,15,14,13,25,12],
[15,10,36,20,25,23,20,20,24,35,0,23,13,25,26],
[18,10,30,18,25,19,29,16,25,36,27,0,22,19,20],
[27,29,31,28,25,29,33,34,30,37,37,28,0,27,25],
[25,30,33,24,26,28,27,30,23,25,25,31,23,0,24],
[21,19,33,19,30,20,34,29,36,38,24,30,25,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 116, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,22,24,22,21,26,27,27,27,28,26,27,29,26],
[25,0,22,28,25,22,30,30,25,29,30,32,33,27,29],
[28,28,0,24,32,26,25,24,29,26,32,30,27,25,22],
[26,22,26,0,25,26,24,20,23,25,22,27,20,26,20],
[28,25,18,25,0,20,24,21,19,22,27,21,24,25,25],
[29,28,24,24,30,0,29,32,30,26,29,31,24,24,25],
[24,20,25,26,26,21,0,22,28,20,29,25,26,29,22],
[23,20,26,30,29,18,28,0,24,24,33,28,37,26,22],
[23,25,21,27,31,20,22,26,0,26,24,28,25,22,22],
[23,21,24,25,28,24,30,26,24,0,24,22,27,19,16],
[22,20,18,28,23,21,21,17,26,26,0,25,20,25,18],
[24,18,20,23,29,19,25,22,22,28,25,0,24,15,20],
[23,17,23,30,26,26,24,13,25,23,30,26,0,22,19],
[21,23,25,24,25,26,21,24,28,31,25,35,28,0,28],
[24,21,28,30,25,25,28,28,28,34,32,30,31,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 117, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,21,28,28,27,25,26,29,24,17,23,23,22,19],
[26,0,31,30,28,27,22,33,31,26,26,29,33,29,25],
[29,19,0,27,24,18,19,30,27,22,20,24,29,25,24],
[22,20,23,0,34,27,21,27,32,27,21,21,28,23,19],
[22,22,26,16,0,21,20,24,29,21,22,26,26,22,22],
[23,23,32,23,29,0,25,25,29,24,21,21,28,25,22],
[25,28,31,29,30,25,0,30,29,27,24,30,32,29,22],
[24,17,20,23,26,25,20,0,25,25,19,19,28,23,19],
[21,19,23,18,21,21,21,25,0,26,21,20,24,19,16],
[26,24,28,23,29,26,23,25,24,0,17,20,29,24,24],
[33,24,30,29,28,29,26,31,29,33,0,28,33,28,26],
[27,21,26,29,24,29,20,31,30,30,22,0,32,29,23],
[27,17,21,22,24,22,18,22,26,21,17,18,0,24,16],
[28,21,25,27,28,25,21,27,31,26,22,21,26,0,20],
[31,25,26,31,28,28,28,31,34,26,24,27,34,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 118, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,33,26,27,28,23,26,19,31,26,29,25,23,24],
[23,0,30,22,24,32,21,22,18,23,24,25,25,23,23],
[17,20,0,24,20,15,22,24,19,21,16,26,20,19,22],
[24,28,26,0,29,28,26,27,26,33,22,28,27,29,25],
[23,26,30,21,0,28,23,22,25,23,20,21,21,22,23],
[22,18,35,22,22,0,22,24,18,24,19,24,20,22,23],
[27,29,28,24,27,28,0,26,26,26,23,25,25,24,23],
[24,28,26,23,28,26,24,0,26,23,18,24,26,26,22],
[31,32,31,24,25,32,24,24,0,30,25,25,25,26,26],
[19,27,29,17,27,26,24,27,20,0,24,28,26,26,22],
[24,26,34,28,30,31,27,32,25,26,0,29,26,27,29],
[21,25,24,22,29,26,25,26,25,22,21,0,26,24,26],
[25,25,30,23,29,30,25,24,25,24,24,24,0,23,26],
[27,27,31,21,28,28,26,24,24,24,23,26,27,0,26],
[26,27,28,25,27,27,27,28,24,28,21,24,24,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 119, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,17,17,24,18,19,22,13,21,15,14,21,23,18],
[36,0,29,22,29,24,21,30,14,26,21,27,29,27,28],
[33,21,0,16,32,26,26,25,16,25,18,17,18,32,25],
[33,28,34,0,32,25,23,33,25,29,17,19,27,39,18],
[26,21,18,18,0,18,20,21,24,26,19,17,19,22,23],
[32,26,24,25,32,0,25,27,20,26,22,19,23,33,23],
[31,29,24,27,30,25,0,26,25,21,19,12,22,27,27],
[28,20,25,17,29,23,24,0,18,19,19,15,18,36,24],
[37,36,34,25,26,30,25,32,0,21,21,20,30,35,23],
[29,24,25,21,24,24,29,31,29,0,19,17,21,25,30],
[35,29,32,33,31,28,31,31,29,31,0,23,32,35,34],
[36,23,33,31,33,31,38,35,30,33,27,0,32,34,36],
[29,21,32,23,31,27,28,32,20,29,18,18,0,32,24],
[27,23,18,11,28,17,23,14,15,25,15,16,18,0,24],
[32,22,25,32,27,27,23,26,27,20,16,14,26,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 120, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,21,23,23,29,22,27,28,28,23,29,25,21,33],
[29,0,23,26,32,30,34,33,31,29,27,27,28,27,36],
[29,27,0,23,27,29,28,33,28,28,26,29,25,27,33],
[27,24,27,0,28,24,28,25,25,25,24,28,25,22,27],
[27,18,23,22,0,29,25,28,24,29,19,27,25,24,36],
[21,20,21,26,21,0,26,25,21,31,18,24,25,23,29],
[28,16,22,22,25,24,0,26,25,25,20,27,22,28,34],
[23,17,17,25,22,25,24,0,25,29,23,24,20,20,30],
[22,19,22,25,26,29,25,25,0,28,24,25,22,21,29],
[22,21,22,25,21,19,25,21,22,0,22,27,27,23,32],
[27,23,24,26,31,32,30,27,26,28,0,30,24,30,35],
[21,23,21,22,23,26,23,26,25,23,20,0,27,20,31],
[25,22,25,25,25,25,28,30,28,23,26,23,0,25,34],
[29,23,23,28,26,27,22,30,29,27,20,30,25,0,36],
[17,14,17,23,14,21,16,20,21,18,15,19,16,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 121, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,19,18,16,23,17,16,19,15,22,25,24,17,26],
[35,0,30,25,28,26,28,22,24,24,25,30,33,26,29],
[31,20,0,23,25,25,27,18,22,20,28,28,24,26,26],
[32,25,27,0,27,25,29,25,27,22,26,29,25,22,29],
[34,22,25,23,0,31,29,23,28,28,27,29,31,28,29],
[27,24,25,25,19,0,22,17,19,21,21,23,22,19,24],
[33,22,23,21,21,28,0,25,21,23,28,27,23,22,28],
[34,28,32,25,27,33,25,0,27,31,34,31,34,29,33],
[31,26,28,23,22,31,29,23,0,27,30,28,27,26,28],
[35,26,30,28,22,29,27,19,23,0,27,32,30,26,32],
[28,25,22,24,23,29,22,16,20,23,0,27,24,23,28],
[25,20,22,21,21,27,23,19,22,18,23,0,25,22,25],
[26,17,26,25,19,28,27,16,23,20,26,25,0,16,26],
[33,24,24,28,22,31,28,21,24,24,27,28,34,0,29],
[24,21,24,21,21,26,22,17,22,18,22,25,24,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 122, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,27,30,32,35,36,25,31,26,26,27,30,32,31],
[19,0,22,27,21,27,26,20,24,22,19,22,22,25,27],
[23,28,0,25,28,25,25,30,23,24,21,21,29,26,27],
[20,23,25,0,31,29,26,26,26,22,17,18,22,27,28],
[18,29,22,19,0,31,26,26,24,24,23,17,25,27,26],
[15,23,25,21,19,0,23,23,23,24,18,14,21,22,21],
[14,24,25,24,24,27,0,28,25,22,21,14,25,27,30],
[25,30,20,24,24,27,22,0,26,22,21,20,26,28,29],
[19,26,27,24,26,27,25,24,0,23,18,20,26,22,25],
[24,28,26,28,26,26,28,28,27,0,23,21,25,31,27],
[24,31,29,33,27,32,29,29,32,27,0,20,27,32,36],
[23,28,29,32,33,36,36,30,30,29,30,0,32,32,34],
[20,28,21,28,25,29,25,24,24,25,23,18,0,29,26],
[18,25,24,23,23,28,23,22,28,19,18,18,21,0,23],
[19,23,23,22,24,29,20,21,25,23,14,16,24,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 123, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,26,22,27,27,15,22,18,25,19,22,27,26],
[26,0,23,24,26,23,26,20,27,21,20,24,23,28,26],
[26,27,0,24,24,21,20,25,23,18,21,24,20,27,22],
[24,26,26,0,25,24,26,21,22,26,22,25,24,23,23],
[28,24,26,25,0,25,24,20,25,19,24,23,23,26,24],
[23,27,29,26,25,0,24,22,25,21,25,22,23,27,30],
[23,24,30,24,26,26,0,25,26,23,27,25,20,30,28],
[35,30,25,29,30,28,25,0,28,23,27,24,29,31,28],
[28,23,27,28,25,25,24,22,0,24,21,22,20,31,20],
[32,29,32,24,31,29,27,27,26,0,27,25,27,32,27],
[25,30,29,28,26,25,23,23,29,23,0,26,22,27,31],
[31,26,26,25,27,28,25,26,28,25,24,0,23,28,26],
[28,27,30,26,27,27,30,21,30,23,28,27,0,33,29],
[23,22,23,27,24,23,20,19,19,18,23,22,17,0,25],
[24,24,28,27,26,20,22,22,30,23,19,24,21,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 124, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,20,17,23,32,27,27,32,31,21,20,21,17,21],
[24,0,21,18,22,29,27,21,33,30,23,35,20,20,25],
[30,29,0,18,21,33,33,28,32,33,29,31,26,24,29],
[33,32,32,0,25,39,25,25,36,38,30,34,29,25,29],
[27,28,29,25,0,29,25,28,31,30,26,29,27,26,25],
[18,21,17,11,21,0,21,19,30,27,18,22,15,16,17],
[23,23,17,25,25,29,0,12,31,30,18,26,16,21,28],
[23,29,22,25,22,31,38,0,33,37,24,26,26,23,27],
[18,17,18,14,19,20,19,17,0,27,8,21,13,8,12],
[19,20,17,12,20,23,20,13,23,0,22,23,18,13,11],
[29,27,21,20,24,32,32,26,42,28,0,35,25,24,24],
[30,15,19,16,21,28,24,24,29,27,15,0,16,12,28],
[29,30,24,21,23,35,34,24,37,32,25,34,0,24,35],
[33,30,26,25,24,34,29,27,42,37,26,38,26,0,25],
[29,25,21,21,25,33,22,23,38,39,26,22,15,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 125, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,48,34,32,31,42,24,37,32,30,32,46,25,38],
[20,0,39,31,35,19,38,28,31,33,43,37,40,43,31],
[2,11,0,9,9,6,19,18,16,2,22,11,23,12,17],
[16,19,41,0,21,31,46,30,39,25,27,38,50,31,29],
[18,15,41,29,0,19,31,26,25,15,13,19,31,25,29],
[19,31,44,19,31,0,42,22,26,29,44,31,44,39,27],
[8,12,31,4,19,8,0,12,12,12,25,16,21,29,12],
[26,22,32,20,24,28,38,0,36,22,24,30,40,31,36],
[13,19,34,11,25,24,38,14,0,21,30,26,38,25,21],
[18,17,48,25,35,21,38,28,29,0,42,40,38,41,21],
[20,7,28,23,37,6,25,26,20,8,0,29,29,30,21],
[18,13,39,12,31,19,34,20,24,10,21,0,46,25,20],
[4,10,27,0,19,6,29,10,12,12,21,4,0,21,12],
[25,7,38,19,25,11,21,19,25,9,20,25,29,0,17],
[12,19,33,21,21,23,38,14,29,29,29,30,38,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 126, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,24,31,26,30,27,26,26,24,30,32,23,31,31],
[25,0,26,33,30,29,25,25,29,23,25,26,23,35,32],
[26,24,0,26,26,27,19,27,30,27,24,29,27,33,31],
[19,17,24,0,22,19,17,24,19,19,17,23,15,23,25],
[24,20,24,28,0,22,17,23,23,24,25,24,24,28,25],
[20,21,23,31,28,0,23,23,27,24,29,23,19,27,24],
[23,25,31,33,33,27,0,28,30,21,29,27,29,32,32],
[24,25,23,26,27,27,22,0,27,27,30,27,23,30,31],
[24,21,20,31,27,23,20,23,0,20,24,24,23,26,28],
[26,27,23,31,26,26,29,23,30,0,30,29,29,33,35],
[20,25,26,33,25,21,21,20,26,20,0,22,18,26,29],
[18,24,21,27,26,27,23,23,26,21,28,0,27,29,30],
[27,27,23,35,26,31,21,27,27,21,32,23,0,31,33],
[19,15,17,27,22,23,18,20,24,17,24,21,19,0,24],
[19,18,19,25,25,26,18,19,22,15,21,20,17,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 127, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,28,18,25,20,22,21,22,22,23,27,27,27,23],
[29,0,40,24,31,30,25,29,24,28,27,27,32,26,31],
[22,10,0,13,15,20,13,15,17,22,18,10,14,16,11],
[32,26,37,0,27,28,32,23,29,26,28,34,30,26,32],
[25,19,35,23,0,19,26,23,18,30,28,29,22,26,19],
[30,20,30,22,31,0,24,26,26,27,30,29,26,24,27],
[28,25,37,18,24,26,0,26,28,22,20,29,25,17,26],
[29,21,35,27,27,24,24,0,21,25,23,31,29,28,26],
[28,26,33,21,32,24,22,29,0,21,32,31,29,26,24],
[28,22,28,24,20,23,28,25,29,0,27,24,26,26,25],
[27,23,32,22,22,20,30,27,18,23,0,30,22,25,25],
[23,23,40,16,21,21,21,19,19,26,20,0,32,22,23],
[23,18,36,20,28,24,25,21,21,24,28,18,0,27,28],
[23,24,34,24,24,26,33,22,24,24,25,28,23,0,29],
[27,19,39,18,31,23,24,24,26,25,25,27,22,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 128, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,23,23,19,23,27,25,22,21,27,29,16,23,22],
[30,0,24,32,23,27,34,26,29,21,21,26,21,24,26],
[27,26,0,33,24,34,25,28,29,19,26,31,17,22,25],
[27,18,17,0,14,27,24,17,22,15,17,20,20,14,22],
[31,27,26,36,0,29,28,26,31,23,26,32,28,21,20],
[27,23,16,23,21,0,21,18,33,9,21,26,22,19,19],
[23,16,25,26,22,29,0,29,25,19,30,22,20,27,25],
[25,24,22,33,24,32,21,0,18,27,23,28,21,16,24],
[28,21,21,28,19,17,25,32,0,20,15,26,20,27,20],
[29,29,31,35,27,41,31,23,30,0,39,37,33,25,31],
[23,29,24,33,24,29,20,27,35,11,0,32,20,24,24],
[21,24,19,30,18,24,28,22,24,13,18,0,18,20,18],
[34,29,33,30,22,28,30,29,30,17,30,32,0,31,28],
[27,26,28,36,29,31,23,34,23,25,26,30,19,0,29],
[28,24,25,28,30,31,25,26,30,19,26,32,22,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 129, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,25,25,23,27,25,27,31,24,27,28,23,31,32],
[29,0,28,25,23,24,29,28,29,29,29,27,27,28,28],
[25,22,0,27,24,25,25,27,28,29,21,26,20,36,30],
[25,25,23,0,28,24,18,23,20,23,21,29,25,30,29],
[27,27,26,22,0,24,25,27,32,33,25,35,27,31,36],
[23,26,25,26,26,0,28,29,24,31,21,28,20,30,30],
[25,21,25,32,25,22,0,31,27,26,25,30,21,28,31],
[23,22,23,27,23,21,19,0,16,24,22,21,21,25,25],
[19,21,22,30,18,26,23,34,0,28,23,22,22,25,21],
[26,21,21,27,17,19,24,26,22,0,25,24,25,26,27],
[23,21,29,29,25,29,25,28,27,25,0,26,26,29,31],
[22,23,24,21,15,22,20,29,28,26,24,0,16,24,26],
[27,23,30,25,23,30,29,29,28,25,24,34,0,30,31],
[19,22,14,20,19,20,22,25,25,24,21,26,20,0,30],
[18,22,20,21,14,20,19,25,29,23,19,24,19,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 130, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,33,34,29,32,19,31,26,34,26,24,16,22,29],
[30,0,23,24,25,27,16,31,32,25,26,19,20,20,33],
[17,27,0,30,23,27,19,26,22,23,23,18,19,18,25],
[16,26,20,0,19,24,16,23,23,26,24,19,17,23,26],
[21,25,27,31,0,28,22,27,31,20,27,17,20,26,26],
[18,23,23,26,22,0,20,19,21,25,21,17,15,20,31],
[31,34,31,34,28,30,0,31,29,24,24,23,23,23,29],
[19,19,24,27,23,31,19,0,17,21,20,18,20,20,24],
[24,18,28,27,19,29,21,33,0,25,20,18,21,19,28],
[16,25,27,24,30,25,26,29,25,0,24,19,19,22,31],
[24,24,27,26,23,29,26,30,30,26,0,22,16,24,25],
[26,31,32,31,33,33,27,32,32,31,28,0,22,28,33],
[34,30,31,33,30,35,27,30,29,31,34,28,0,25,25],
[28,30,32,27,24,30,27,30,31,28,26,22,25,0,36],
[21,17,25,24,24,19,21,26,22,19,25,17,25,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 131, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,30,25,21,30,19,29,29,27,28,27,25,29,31],
[26,0,29,28,24,31,25,29,32,28,28,29,28,31,27],
[20,21,0,21,17,26,22,26,23,21,21,24,21,25,29],
[25,22,29,0,20,31,26,27,26,23,25,28,25,27,24],
[29,26,33,30,0,29,23,24,33,30,26,27,31,29,31],
[20,19,24,19,21,0,14,26,26,21,22,25,21,17,23],
[31,25,28,24,27,36,0,30,32,27,27,34,25,31,28],
[21,21,24,23,26,24,20,0,23,21,27,23,18,21,26],
[21,18,27,24,17,24,18,27,0,23,27,23,19,20,26],
[23,22,29,27,20,29,23,29,27,0,27,21,24,28,28],
[22,22,29,25,24,28,23,23,23,23,0,22,20,24,22],
[23,21,26,22,23,25,16,27,27,29,28,0,26,28,27],
[25,22,29,25,19,29,25,32,31,26,30,24,0,25,27],
[21,19,25,23,21,33,19,29,30,22,26,22,25,0,29],
[19,23,21,26,19,27,22,24,24,22,28,23,23,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 132, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,26,24,24,26,30,28,25,17,18,22,27,22,27],
[19,0,24,19,22,22,26,24,22,13,15,21,20,24,22],
[24,26,0,29,25,28,29,34,28,22,22,26,25,23,25],
[26,31,21,0,23,23,32,23,28,24,25,26,23,23,23],
[26,28,25,27,0,28,29,25,28,25,24,25,18,25,26],
[24,28,22,27,22,0,25,22,22,19,19,22,22,25,25],
[20,24,21,18,21,25,0,16,22,20,21,20,19,17,24],
[22,26,16,27,25,28,34,0,26,17,21,20,18,24,25],
[25,28,22,22,22,28,28,24,0,19,19,23,23,25,25],
[33,37,28,26,25,31,30,33,31,0,27,28,23,26,27],
[32,35,28,25,26,31,29,29,31,23,0,29,29,26,30],
[28,29,24,24,25,28,30,30,27,22,21,0,26,20,24],
[23,30,25,27,32,28,31,32,27,27,21,24,0,29,30],
[28,26,27,27,25,25,33,26,25,24,24,30,21,0,26],
[23,28,25,27,24,25,26,25,25,23,20,26,20,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 133, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,33,25,32,22,30,32,26,26,32,24,27,23,24],
[18,0,24,18,25,20,20,25,17,15,25,16,21,23,19],
[17,26,0,21,32,22,24,20,16,21,21,23,21,16,21],
[25,32,29,0,35,25,29,30,29,20,35,24,34,26,27],
[18,25,18,15,0,20,20,21,19,19,24,17,19,17,19],
[28,30,28,25,30,0,25,31,22,21,29,24,29,26,23],
[20,30,26,21,30,25,0,25,19,19,29,22,23,22,19],
[18,25,30,20,29,19,25,0,18,17,27,19,21,14,19],
[24,33,34,21,31,28,31,32,0,23,30,20,31,21,21],
[24,35,29,30,31,29,31,33,27,0,31,23,24,28,27],
[18,25,29,15,26,21,21,23,20,19,0,18,20,18,18],
[26,34,27,26,33,26,28,31,30,27,32,0,26,27,25],
[23,29,29,16,31,21,27,29,19,26,30,24,0,21,25],
[27,27,34,24,33,24,28,36,29,22,32,23,29,0,26],
[26,31,29,23,31,27,31,31,29,23,32,25,25,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 134, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,19,25,20,22,31,19,27,24,25,25,17,24,20],
[34,0,27,27,20,31,32,26,30,35,24,31,30,36,22],
[31,23,0,27,24,24,30,29,28,30,18,27,22,27,19],
[25,23,23,0,19,18,26,25,30,32,13,27,24,25,19],
[30,30,26,31,0,28,30,26,33,33,24,32,29,28,29],
[28,19,26,32,22,0,34,27,33,31,20,29,26,30,18],
[19,18,20,24,20,16,0,19,25,22,23,27,22,28,20],
[31,24,21,25,24,23,31,0,30,34,23,33,24,30,20],
[23,20,22,20,17,17,25,20,0,35,23,31,30,32,23],
[26,15,20,18,17,19,28,16,15,0,22,33,25,28,19],
[25,26,32,37,26,30,27,27,27,28,0,30,33,34,24],
[25,19,23,23,18,21,23,17,19,17,20,0,23,24,19],
[33,20,28,26,21,24,28,26,20,25,17,27,0,27,22],
[26,14,23,25,22,20,22,20,18,22,16,26,23,0,24],
[30,28,31,31,21,32,30,30,27,31,26,31,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 135, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,27,22,24,24,27,25,29,25,27,23,27,30,24],
[23,0,27,28,26,26,30,30,29,23,30,23,27,30,26],
[23,23,0,25,22,24,29,24,22,23,27,23,29,29,23],
[28,22,25,0,26,27,30,25,26,25,29,24,27,34,25],
[26,24,28,24,0,27,32,27,28,26,31,27,27,31,23],
[26,24,26,23,23,0,27,24,24,22,29,23,27,28,23],
[23,20,21,20,18,23,0,24,23,23,23,19,23,27,21],
[25,20,26,25,23,26,26,0,33,28,26,23,25,29,26],
[21,21,28,24,22,26,27,17,0,24,22,19,22,25,20],
[25,27,27,25,24,28,27,22,26,0,29,24,29,28,24],
[23,20,23,21,19,21,27,24,28,21,0,21,23,23,23],
[27,27,27,26,23,27,31,27,31,26,29,0,31,29,27],
[23,23,21,23,23,23,27,25,28,21,27,19,0,26,21],
[20,20,21,16,19,22,23,21,25,22,27,21,24,0,20],
[26,24,27,25,27,27,29,24,30,26,27,23,29,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 136, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,23,18,24,28,26,27,23,26,25,24,24,22,19],
[35,0,26,27,31,27,29,25,36,31,32,31,31,29,31],
[27,24,0,20,27,28,30,27,30,25,26,26,31,28,24],
[32,23,30,0,33,33,35,29,31,30,36,35,33,26,30],
[26,19,23,17,0,22,25,17,26,22,28,26,21,18,19],
[22,23,22,17,28,0,29,22,28,26,28,24,26,22,23],
[24,21,20,15,25,21,0,23,30,26,26,21,26,19,22],
[23,25,23,21,33,28,27,0,32,26,32,30,27,23,22],
[27,14,20,19,24,22,20,18,0,19,27,20,21,16,16],
[24,19,25,20,28,24,24,24,31,0,26,25,30,22,17],
[25,18,24,14,22,22,24,18,23,24,0,25,29,19,25],
[26,19,24,15,24,26,29,20,30,25,25,0,28,23,21],
[26,19,19,17,29,24,24,23,29,20,21,22,0,23,27],
[28,21,22,24,32,28,31,27,34,28,31,27,27,0,22],
[31,19,26,20,31,27,28,28,34,33,25,29,23,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 137, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,25,30,36,29,26,33,31,29,21,23,28,27,27],
[22,0,23,23,21,22,28,25,24,16,17,19,24,23,25],
[25,27,0,26,34,29,24,29,31,30,27,27,33,33,23],
[20,27,24,0,25,24,28,25,24,28,20,25,24,30,28],
[14,29,16,25,0,24,24,27,20,24,12,16,18,18,18],
[21,28,21,26,26,0,19,27,24,24,24,19,28,22,25],
[24,22,26,22,26,31,0,30,24,24,20,16,23,23,17],
[17,25,21,25,23,23,20,0,19,23,19,21,23,26,24],
[19,26,19,26,30,26,26,31,0,23,17,24,25,24,32],
[21,34,20,22,26,26,26,27,27,0,21,19,25,25,19],
[29,33,23,30,38,26,30,31,33,29,0,21,29,29,25],
[27,31,23,25,34,31,34,29,26,31,29,0,26,32,28],
[22,26,17,26,32,22,27,27,25,25,21,24,0,29,27],
[23,27,17,20,32,28,27,24,26,25,21,18,21,0,21],
[23,25,27,22,32,25,33,26,18,31,25,22,23,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 138, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,21,39,34,23,36,38,19,26,16,30,32,25,38],
[14,0,33,17,37,31,29,46,21,30,21,31,23,31,31],
[29,17,0,27,18,23,25,30,27,35,16,27,18,17,29],
[11,33,23,0,30,26,30,31,17,22,16,21,29,20,23],
[16,13,32,20,0,19,28,35,24,29,14,27,7,16,27],
[27,19,27,24,31,0,19,32,23,27,20,31,31,29,33],
[14,21,25,20,22,31,0,22,19,26,15,21,24,21,27],
[12,4,20,19,15,18,28,0,23,21,13,23,7,10,23],
[31,29,23,33,26,27,31,27,0,36,16,27,25,17,37],
[24,20,15,28,21,23,24,29,14,0,14,22,23,19,30],
[34,29,34,34,36,30,35,37,34,36,0,40,25,33,36],
[20,19,23,29,23,19,29,27,23,28,10,0,20,19,31],
[18,27,32,21,43,19,26,43,25,27,25,30,0,34,36],
[25,19,33,30,34,21,29,40,33,31,17,31,16,0,31],
[12,19,21,27,23,17,23,27,13,20,14,19,14,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 139, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,22,19,22,22,16,23,16,21,20,18,23,22,21],
[27,0,27,21,23,30,20,20,21,25,23,19,29,28,19],
[28,23,0,21,20,25,25,24,23,24,21,17,29,29,24],
[31,29,29,0,26,27,28,28,28,29,30,23,31,29,26],
[28,27,30,24,0,31,24,29,25,26,30,25,32,29,28],
[28,20,25,23,19,0,21,25,23,21,22,21,31,28,23],
[34,30,25,22,26,29,0,27,27,28,27,22,26,25,25],
[27,30,26,22,21,25,23,0,22,22,25,20,22,27,21],
[34,29,27,22,25,27,23,28,0,29,25,22,31,29,25],
[29,25,26,21,24,29,22,28,21,0,28,19,28,30,27],
[30,27,29,20,20,28,23,25,25,22,0,23,28,26,20],
[32,31,33,27,25,29,28,30,28,31,27,0,32,30,29],
[27,21,21,19,18,19,24,28,19,22,22,18,0,25,20],
[28,22,21,21,21,22,25,23,21,20,24,20,25,0,23],
[29,31,26,24,22,27,25,29,25,23,30,21,30,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 140, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,17,23,16,20,22,16,22,24,27,24,25,16,17],
[31,0,24,32,18,25,24,21,29,32,21,22,21,21,23],
[33,26,0,31,24,26,28,26,31,32,25,31,31,29,26],
[27,18,19,0,21,18,21,18,23,29,17,18,26,25,14],
[34,32,26,29,0,21,27,23,28,31,26,29,30,28,23],
[30,25,24,32,29,0,23,25,31,34,32,28,28,23,24],
[28,26,22,29,23,27,0,23,28,33,25,28,24,24,21],
[34,29,24,32,27,25,27,0,26,31,27,29,27,21,21],
[28,21,19,27,22,19,22,24,0,25,22,23,19,20,18],
[26,18,18,21,19,16,17,19,25,0,19,21,22,16,12],
[23,29,25,33,24,18,25,23,28,31,0,27,20,24,16],
[26,28,19,32,21,22,22,21,27,29,23,0,26,23,19],
[25,29,19,24,20,22,26,23,31,28,30,24,0,23,19],
[34,29,21,25,22,27,26,29,30,34,26,27,27,0,23],
[33,27,24,36,27,26,29,29,32,38,34,31,31,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 141, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,30,32,28,28,36,27,36,26,28,28,31,33,27],
[25,0,28,32,28,27,33,27,30,23,32,27,28,26,27],
[20,22,0,29,26,26,32,25,29,25,27,25,28,28,22],
[18,18,21,0,25,25,31,27,25,23,31,24,24,23,18],
[22,22,24,25,0,22,31,25,31,21,27,26,23,26,19],
[22,23,24,25,28,0,33,27,30,21,32,27,27,26,25],
[14,17,18,19,19,17,0,23,17,17,20,20,17,17,12],
[23,23,25,23,25,23,27,0,26,26,25,25,21,29,22],
[14,20,21,25,19,20,33,24,0,23,24,24,25,21,21],
[24,27,25,27,29,29,33,24,27,0,31,29,28,27,26],
[22,18,23,19,23,18,30,25,26,19,0,23,25,23,19],
[22,23,25,26,24,23,30,25,26,21,27,0,29,21,21],
[19,22,22,26,27,23,33,29,25,22,25,21,0,23,21],
[17,24,22,27,24,24,33,21,29,23,27,29,27,0,19],
[23,23,28,32,31,25,38,28,29,24,31,29,29,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 142, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,27,19,18,18,19,20,19,19,27,13,20,26,27],
[24,0,16,17,18,21,22,16,21,19,11,25,8,16,18],
[23,34,0,24,16,21,24,16,31,21,25,17,26,34,32],
[31,33,26,0,14,26,17,19,36,27,10,25,21,24,19],
[32,32,34,36,0,26,20,26,29,36,24,30,36,29,27],
[32,29,29,24,24,0,25,16,26,26,29,16,30,34,37],
[31,28,26,33,30,25,0,32,31,42,26,26,34,33,35],
[30,34,34,31,24,34,18,0,28,33,22,20,33,38,42],
[31,29,19,14,21,24,19,22,0,28,22,21,25,25,25],
[31,31,29,23,14,24,8,17,22,0,14,20,20,26,22],
[23,39,25,40,26,21,24,28,28,36,0,25,35,33,25],
[37,25,33,25,20,34,24,30,29,30,25,0,31,32,33],
[30,42,24,29,14,20,16,17,25,30,15,19,0,25,25],
[24,34,16,26,21,16,17,12,25,24,17,18,25,0,20],
[23,32,18,31,23,13,15,8,25,28,25,17,25,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 143, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,28,13,15,0,18,28,35,25,25,28,15,18,28],
[22,0,7,30,17,22,22,25,32,17,22,17,32,32,42],
[22,43,0,28,20,15,25,28,42,30,15,30,32,25,50],
[37,20,22,0,30,30,37,25,37,32,22,20,22,30,47],
[35,33,30,20,0,15,35,18,35,32,22,33,22,25,40],
[50,28,35,20,35,0,35,38,50,45,32,28,35,45,35],
[32,28,25,13,15,15,0,28,42,35,15,15,15,15,30],
[22,25,22,25,32,12,22,0,37,32,22,32,22,22,32],
[15,18,8,13,15,0,8,13,0,5,0,15,10,3,18],
[25,33,20,18,18,5,15,18,45,0,22,18,22,18,40],
[25,28,35,28,28,18,35,28,50,28,0,38,35,28,45],
[22,33,20,30,17,22,35,18,35,32,12,0,32,25,40],
[35,18,18,28,28,15,35,28,40,28,15,18,0,18,35],
[32,18,25,20,25,5,35,28,47,32,22,25,32,0,25],
[22,8,0,3,10,15,20,18,32,10,5,10,15,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 144, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,23,22,27,27,22,21,26,22,14,20,12,30,19],
[15,0,22,30,23,23,25,15,29,27,13,22,17,25,27],
[27,28,0,15,32,17,32,18,36,15,19,15,19,20,17],
[28,20,35,0,22,17,24,21,31,4,12,10,7,28,20],
[23,27,18,28,0,7,14,21,31,20,18,17,9,23,25],
[23,27,33,33,43,0,30,24,29,33,18,31,28,31,33],
[28,25,18,26,36,20,0,19,36,23,23,24,12,26,25],
[29,35,32,29,29,26,31,0,33,22,12,22,24,26,24],
[24,21,14,19,19,21,14,17,0,12,12,17,12,26,19],
[28,23,35,46,30,17,27,28,38,0,26,30,22,38,42],
[36,37,31,38,32,32,27,38,38,24,0,22,19,45,35],
[30,28,35,40,33,19,26,28,33,20,28,0,19,42,30],
[38,33,31,43,41,22,38,26,38,28,31,31,0,45,43],
[20,25,30,22,27,19,24,24,24,12,5,8,5,0,14],
[31,23,33,30,25,17,25,26,31,8,15,20,7,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 145, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,43,32,26,33,22,32,30,33,20,39,30,41,30],
[13,0,24,24,26,20,29,39,39,31,27,39,22,15,41],
[7,26,0,22,22,14,22,15,22,33,18,22,15,26,26],
[18,26,28,0,33,18,33,32,37,11,11,33,15,30,37],
[24,24,28,17,0,24,24,13,28,24,20,24,13,24,24],
[17,30,36,32,26,0,22,25,26,33,20,39,19,30,30],
[28,21,28,17,26,28,0,10,25,28,24,35,8,19,26],
[18,11,35,18,37,25,40,0,40,25,25,40,22,11,37],
[20,11,28,13,22,24,25,10,0,20,20,27,4,19,22],
[17,19,17,39,26,17,22,25,30,0,13,28,8,23,37],
[30,23,32,39,30,30,26,25,30,37,0,32,23,23,30],
[11,11,28,17,26,11,15,10,23,22,18,0,8,19,15],
[20,28,35,35,37,31,42,28,46,42,27,42,0,32,39],
[9,35,24,20,26,20,31,39,31,27,27,31,18,0,39],
[20,9,24,13,26,20,24,13,28,13,20,35,11,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 146, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,33,22,26,22,28,17,25,27,27,23,31,20],
[23,0,27,25,24,22,20,26,16,25,22,27,20,30,18],
[22,23,0,32,22,23,27,26,19,25,24,27,23,29,20],
[17,25,18,0,18,22,21,23,17,23,21,24,20,24,17],
[28,26,28,32,0,25,30,31,22,26,24,31,26,29,19],
[24,28,27,28,25,0,25,30,18,29,30,30,20,28,26],
[28,30,23,29,20,25,0,26,26,28,21,25,20,30,22],
[22,24,24,27,19,20,24,0,15,24,18,23,21,25,20],
[33,34,31,33,28,32,24,35,0,32,28,31,26,29,23],
[25,25,25,27,24,21,22,26,18,0,18,28,21,24,18],
[23,28,26,29,26,20,29,32,22,32,0,26,25,30,23],
[23,23,23,26,19,20,25,27,19,22,24,0,19,27,17],
[27,30,27,30,24,30,30,29,24,29,25,31,0,29,20],
[19,20,21,26,21,22,20,25,21,26,20,23,21,0,19],
[30,32,30,33,31,24,28,30,27,32,27,33,30,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 147, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,23,24,24,27,40,30,25,24,24,30,24,16,34],
[14,0,5,28,19,31,22,29,26,25,32,14,23,19,25],
[27,45,0,28,28,30,41,45,39,25,30,41,33,36,42],
[26,22,22,0,30,27,31,31,21,27,20,31,28,17,27],
[26,31,22,20,0,23,36,26,22,26,30,30,22,19,37],
[23,19,20,23,27,0,28,27,27,27,15,23,24,23,28],
[10,28,9,19,14,22,0,19,18,14,20,18,12,14,18],
[20,21,5,19,24,23,31,0,27,25,25,26,24,20,23],
[25,24,11,29,28,23,32,23,0,17,20,26,15,18,30],
[26,25,25,23,24,23,36,25,33,0,24,24,22,19,37],
[26,18,20,30,20,35,30,25,30,26,0,21,22,25,25],
[20,36,9,19,20,27,32,24,24,26,29,0,15,20,34],
[26,27,17,22,28,26,38,26,35,28,28,35,0,27,38],
[34,31,14,33,31,27,36,30,32,31,25,30,23,0,35],
[16,25,8,23,13,22,32,27,20,13,25,16,12,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 148, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,24,24,28,26,23,24,26,26,25,24,28,20,22],
[27,0,22,24,26,30,23,28,26,27,26,26,27,26,21],
[26,28,0,25,31,30,27,31,24,28,26,28,27,23,27],
[26,26,25,0,26,28,26,22,26,25,27,25,24,22,23],
[22,24,19,24,0,29,18,23,23,21,22,19,21,19,19],
[24,20,20,22,21,0,19,19,15,20,23,21,25,19,19],
[27,27,23,24,32,31,0,25,26,23,25,25,28,28,24],
[26,22,19,28,27,31,25,0,23,23,24,27,32,19,26],
[24,24,26,24,27,35,24,27,0,27,28,26,29,23,22],
[24,23,22,25,29,30,27,27,23,0,25,27,25,25,24],
[25,24,24,23,28,27,25,26,22,25,0,23,24,24,19],
[26,24,22,25,31,29,25,23,24,23,27,0,26,19,24],
[22,23,23,26,29,25,22,18,21,25,26,24,0,19,19],
[30,24,27,28,31,31,22,31,27,25,26,31,31,0,26],
[28,29,23,27,31,31,26,24,28,26,31,26,31,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 149, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,32,29,49,32,39,39,43,37,32,31,21,20,44],
[6,0,1,15,34,18,9,23,6,26,26,18,22,12,15],
[18,49,0,27,44,26,36,41,40,43,38,36,26,20,44],
[21,35,23,0,41,23,19,27,24,29,20,25,21,26,31],
[1,16,6,9,0,3,5,9,5,6,1,6,17,12,0],
[18,32,24,27,47,0,32,36,32,35,35,23,21,25,42],
[11,41,14,31,45,18,0,45,27,44,39,27,27,21,37],
[11,27,9,23,41,14,5,0,15,18,22,20,20,20,17],
[7,44,10,26,45,18,23,35,0,39,35,26,23,26,40],
[13,24,7,21,44,15,6,32,11,0,14,14,29,26,20],
[18,24,12,30,49,15,11,28,15,36,0,14,27,18,25],
[19,32,14,25,44,27,23,30,24,36,36,0,27,21,36],
[29,28,24,29,33,29,23,30,27,21,23,23,0,18,24],
[30,38,30,24,38,25,29,30,24,24,32,29,32,0,29],
[6,35,6,19,50,8,13,33,10,30,25,14,26,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 150, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,20,23,27,20,15,18,20,24,20,21,16,21,22],
[28,0,26,25,30,26,21,18,21,28,24,16,20,26,27],
[30,24,0,29,29,28,23,20,20,31,20,18,23,25,24],
[27,25,21,0,27,23,18,22,22,24,18,24,25,27,26],
[23,20,21,23,0,21,12,20,19,22,23,13,19,26,24],
[30,24,22,27,29,0,23,23,25,31,23,18,21,26,25],
[35,29,27,32,38,27,0,25,24,33,27,18,27,29,31],
[32,32,30,28,30,27,25,0,29,29,25,27,26,28,32],
[30,29,30,28,31,25,26,21,0,30,23,25,22,24,32],
[26,22,19,26,28,19,17,21,20,0,21,19,20,26,25],
[30,26,30,32,27,27,23,25,27,29,0,21,25,27,29],
[29,34,32,26,37,32,32,23,25,31,29,0,27,30,32],
[34,30,27,25,31,29,23,24,28,30,25,23,0,31,31],
[29,24,25,23,24,24,21,22,26,24,23,20,19,0,28],
[28,23,26,24,26,25,19,18,18,25,21,18,19,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 151, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,23,29,26,21,22,33,22,27,24,24,25,27,27],
[19,0,21,29,20,21,21,27,25,22,29,21,21,22,22],
[27,29,0,26,25,20,25,26,24,28,26,27,22,21,29],
[21,21,24,0,24,22,27,26,28,27,27,24,28,28,20],
[24,30,25,26,0,26,27,31,22,23,24,27,21,24,19],
[29,29,30,28,24,0,25,29,27,26,27,33,28,28,27],
[28,29,25,23,23,25,0,25,22,22,20,21,24,23,29],
[17,23,24,24,19,21,25,0,24,22,24,18,22,22,22],
[28,25,26,22,28,23,28,26,0,26,26,22,26,21,23],
[23,28,22,23,27,24,28,28,24,0,24,25,22,24,25],
[26,21,24,23,26,23,30,26,24,26,0,26,21,21,27],
[26,29,23,26,23,17,29,32,28,25,24,0,22,24,18],
[25,29,28,22,29,22,26,28,24,28,29,28,0,23,26],
[23,28,29,22,26,22,27,28,29,26,29,26,27,0,21],
[23,28,21,30,31,23,21,28,27,25,23,32,24,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 152, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,27,20,18,15,25,23,22,18,21,16,17,20,21],
[34,0,30,29,23,28,33,33,30,25,29,24,28,26,26],
[23,20,0,22,23,21,30,30,23,29,25,21,25,19,24],
[30,21,28,0,28,23,34,27,27,19,30,28,30,21,29],
[32,27,27,22,0,25,29,34,27,24,25,28,28,24,22],
[35,22,29,27,25,0,35,25,22,23,33,30,26,21,30],
[25,17,20,16,21,15,0,24,17,17,23,22,17,14,15],
[27,17,20,23,16,25,26,0,25,22,24,20,19,20,18],
[28,20,27,23,23,28,33,25,0,28,31,26,24,19,25],
[32,25,21,31,26,27,33,28,22,0,30,29,30,28,26],
[29,21,25,20,25,17,27,26,19,20,0,27,25,15,17],
[34,26,29,22,22,20,28,30,24,21,23,0,25,23,26],
[33,22,25,20,22,24,33,31,26,20,25,25,0,21,21],
[30,24,31,29,26,29,36,30,31,22,35,27,29,0,30],
[29,24,26,21,28,20,35,32,25,24,33,24,29,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 153, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,19,22,22,19,17,24,26,24,22,16,18,22,21],
[24,0,23,19,28,22,21,28,27,21,25,17,21,30,19],
[31,27,0,24,31,25,25,33,27,27,29,21,23,29,19],
[28,31,26,0,26,26,24,31,24,26,30,23,26,27,23],
[28,22,19,24,0,21,21,26,22,20,22,20,21,28,19],
[31,28,25,24,29,0,25,28,26,30,26,24,28,33,25],
[33,29,25,26,29,25,0,35,23,27,22,19,21,32,19],
[26,22,17,19,24,22,15,0,21,22,23,16,19,24,17],
[24,23,23,26,28,24,27,29,0,26,28,20,22,25,22],
[26,29,23,24,30,20,23,28,24,0,24,26,21,25,21],
[28,25,21,20,28,24,28,27,22,26,0,23,25,26,25],
[34,33,29,27,30,26,31,34,30,24,27,0,29,30,23],
[32,29,27,24,29,22,29,31,28,29,25,21,0,25,21],
[28,20,21,23,22,17,18,26,25,25,24,20,25,0,19],
[29,31,31,27,31,25,31,33,28,29,25,27,29,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 154, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,8,16,6,10,18,22,6,0,6,21,29,16,24],
[36,0,15,14,25,15,25,25,36,21,15,36,36,31,24],
[42,35,0,16,31,42,42,42,38,38,17,42,42,38,35],
[34,36,34,0,26,34,34,44,30,22,29,34,34,42,46],
[44,25,19,24,0,29,33,33,30,19,25,34,50,27,35],
[40,35,8,16,21,0,44,44,40,21,14,25,39,27,35],
[32,25,8,16,17,6,0,22,11,0,6,11,17,27,35],
[28,25,8,6,17,6,28,0,28,11,6,17,17,27,35],
[44,14,12,20,20,10,39,22,0,11,10,21,39,31,24],
[50,29,12,28,31,29,50,39,39,0,18,39,39,31,35],
[44,35,33,21,25,36,44,44,40,32,0,25,33,38,35],
[29,14,8,16,16,25,39,33,29,11,25,0,35,27,24],
[21,14,8,16,0,11,33,33,11,11,17,15,0,27,24],
[34,19,12,8,23,23,23,23,19,19,12,23,23,0,29],
[26,26,15,4,15,15,15,15,26,15,15,26,26,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 155, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,20,36,19,35,28,27,27,38,33,32,40,26,25],
[12,0,22,21,10,26,19,18,16,20,18,21,29,13,22],
[30,28,0,32,23,31,23,22,18,32,26,33,37,23,21],
[14,29,18,0,20,32,18,24,22,31,23,24,32,17,20],
[31,40,27,30,0,36,22,35,25,36,29,36,42,26,24],
[15,24,19,18,14,0,17,20,23,21,18,36,26,23,15],
[22,31,27,32,28,33,0,24,24,35,33,33,36,31,32],
[23,32,28,26,15,30,26,0,21,33,25,33,44,22,26],
[23,34,32,28,25,27,26,29,0,32,29,31,35,20,24],
[12,30,18,19,14,29,15,17,18,0,23,31,33,12,17],
[17,32,24,27,21,32,17,25,21,27,0,31,34,19,23],
[18,29,17,26,14,14,17,17,19,19,19,0,28,13,18],
[10,21,13,18,8,24,14,6,15,17,16,22,0,6,19],
[24,37,27,33,24,27,19,28,30,38,31,37,44,0,25],
[25,28,29,30,26,35,18,24,26,33,27,32,31,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 156, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,31,29,29,28,21,22,26,30,19,24,37,22,28],
[24,0,29,17,29,20,23,22,22,24,16,24,30,28,17],
[19,21,0,17,15,21,25,20,19,28,14,20,29,21,13],
[21,33,33,0,27,27,27,28,29,31,25,33,35,32,24],
[21,21,35,23,0,29,24,28,24,28,19,31,31,28,23],
[22,30,29,23,21,0,25,31,22,30,21,29,33,31,28],
[29,27,25,23,26,25,0,20,24,30,18,25,32,26,21],
[28,28,30,22,22,19,30,0,26,28,21,21,31,25,18],
[24,28,31,21,26,28,26,24,0,32,24,31,35,27,20],
[20,26,22,19,22,20,20,22,18,0,16,22,29,18,22],
[31,34,36,25,31,29,32,29,26,34,0,33,35,28,27],
[26,26,30,17,19,21,25,29,19,28,17,0,35,27,29],
[13,20,21,15,19,17,18,19,15,21,15,15,0,16,16],
[28,22,29,18,22,19,24,25,23,32,22,23,34,0,29],
[22,33,37,26,27,22,29,32,30,28,23,21,34,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 157, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,23,31,24,26,17,19,26,20,26,14,19,20,25],
[34,0,33,33,32,33,27,34,44,29,29,25,35,33,36],
[27,17,0,28,23,29,21,25,30,28,27,20,30,26,25],
[19,17,22,0,23,23,20,19,26,16,17,20,20,20,20],
[26,18,27,27,0,31,22,26,32,28,29,21,27,30,31],
[24,17,21,27,19,0,24,23,29,23,16,18,23,22,20],
[33,23,29,30,28,26,0,26,34,29,33,28,28,31,26],
[31,16,25,31,24,27,24,0,33,25,27,15,21,31,28],
[24,6,20,24,18,21,16,17,0,19,19,23,18,20,25],
[30,21,22,34,22,27,21,25,31,0,27,20,28,28,27],
[24,21,23,33,21,34,17,23,31,23,0,15,23,25,26],
[36,25,30,30,29,32,22,35,27,30,35,0,31,32,28],
[31,15,20,30,23,27,22,29,32,22,27,19,0,24,28],
[30,17,24,30,20,28,19,19,30,22,25,18,26,0,22],
[25,14,25,30,19,30,24,22,25,23,24,22,22,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 158, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,29,36,29,30,29,45,27,32,32,26,23,32,35],
[14,0,23,15,20,25,14,29,14,14,11,15,11,9,31],
[21,27,0,19,18,28,23,28,27,25,20,27,20,18,32],
[14,35,31,0,27,24,21,34,23,28,30,31,32,33,35],
[21,30,32,23,0,27,21,32,19,31,30,29,26,31,26],
[20,25,22,26,23,0,20,28,23,23,20,20,25,25,27],
[21,36,27,29,29,30,0,39,30,35,35,31,30,32,33],
[5,21,22,16,18,22,11,0,20,20,15,15,14,15,20],
[23,36,23,27,31,27,20,30,0,27,33,38,30,20,31],
[18,36,25,22,19,27,15,30,23,0,31,21,24,21,34],
[18,39,30,20,20,30,15,35,17,19,0,25,19,32,22],
[24,35,23,19,21,30,19,35,12,29,25,0,27,23,30],
[27,39,30,18,24,25,20,36,20,26,31,23,0,24,32],
[18,41,32,17,19,25,18,35,30,29,18,27,26,0,37],
[15,19,18,15,24,23,17,30,19,16,28,20,18,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 159, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,25,20,23,20,25,24,20,27,23,30,19,21,25],
[32,0,24,24,31,30,22,20,25,27,18,29,19,27,28],
[25,26,0,23,22,24,24,23,25,21,26,24,20,14,26],
[30,26,27,0,27,34,19,22,29,32,30,28,21,26,27],
[27,19,28,23,0,30,25,21,24,18,24,24,17,19,25],
[30,20,26,16,20,0,17,20,26,23,20,24,15,17,24],
[25,28,26,31,25,33,0,20,26,27,24,29,27,22,27],
[26,30,27,28,29,30,30,0,29,33,31,28,19,28,24],
[30,25,25,21,26,24,24,21,0,27,27,30,20,24,26],
[23,23,29,18,32,27,23,17,23,0,22,35,15,19,19],
[27,32,24,20,26,30,26,19,23,28,0,31,20,25,27],
[20,21,26,22,26,26,21,22,20,15,19,0,20,16,24],
[31,31,30,29,33,35,23,31,30,35,30,30,0,29,26],
[29,23,36,24,31,33,28,22,26,31,25,34,21,0,29],
[25,22,24,23,25,26,23,26,24,31,23,26,24,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 160, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,30,25,29,27,26,19,30,30,32,26,25,30],
[24,0,28,30,25,29,29,28,24,23,27,29,32,28,26],
[24,22,0,25,24,28,26,22,27,24,26,29,29,28,23],
[20,20,25,0,14,24,26,18,21,20,24,26,25,25,19],
[25,25,26,36,0,34,32,31,24,24,32,29,29,26,27],
[21,21,22,26,16,0,27,23,20,18,30,27,27,22,25],
[23,21,24,24,18,23,0,23,20,26,27,31,25,24,24],
[24,22,28,32,19,27,27,0,22,24,21,27,22,24,25],
[31,26,23,29,26,30,30,28,0,25,31,25,27,22,28],
[20,27,26,30,26,32,24,26,25,0,27,30,32,28,24],
[20,23,24,26,18,20,23,29,19,23,0,30,26,26,24],
[18,21,21,24,21,23,19,23,25,20,20,0,25,29,20],
[24,18,21,25,21,23,25,28,23,18,24,25,0,19,23],
[25,22,22,25,24,28,26,26,28,22,24,21,31,0,22],
[20,24,27,31,23,25,26,25,22,26,26,30,27,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 161, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,32,27,20,23,28,30,22,19,24,31,27,18,22],
[26,0,37,23,24,24,22,29,28,24,28,33,28,22,21],
[18,13,0,22,18,19,14,20,22,18,21,21,19,17,14],
[23,27,28,0,25,24,21,29,28,24,25,29,29,26,26],
[30,26,32,25,0,29,23,31,31,29,25,32,29,22,24],
[27,26,31,26,21,0,17,29,17,21,21,30,26,16,23],
[22,28,36,29,27,33,0,37,30,26,23,32,24,25,26],
[20,21,30,21,19,21,13,0,20,17,18,27,21,13,17],
[28,22,28,22,19,33,20,30,0,22,24,31,18,21,24],
[31,26,32,26,21,29,24,33,28,0,29,29,28,22,20],
[26,22,29,25,25,29,27,32,26,21,0,27,29,23,23],
[19,17,29,21,18,20,18,23,19,21,23,0,20,17,22],
[23,22,31,21,21,24,26,29,32,22,21,30,0,15,26],
[32,28,33,24,28,34,25,37,29,28,27,33,35,0,30],
[28,29,36,24,26,27,24,33,26,30,27,28,24,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 162, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,22,23,20,21,25,28,26,25,23,24,26,23,22],
[28,0,22,25,20,24,24,28,24,33,23,28,25,29,18],
[28,28,0,23,23,25,27,24,24,31,28,23,24,25,25],
[27,25,27,0,24,25,30,27,26,26,23,23,24,28,23],
[30,30,27,26,0,29,22,30,30,35,28,23,26,25,20],
[29,26,25,25,21,0,26,30,27,29,19,19,30,25,19],
[25,26,23,20,28,24,0,27,24,33,21,20,22,22,19],
[22,22,26,23,20,20,23,0,22,29,21,20,18,24,22],
[24,26,26,24,20,23,26,28,0,32,20,20,24,21,18],
[25,17,19,24,15,21,17,21,18,0,21,23,20,16,17],
[27,27,22,27,22,31,29,29,30,29,0,26,26,29,20],
[26,22,27,27,27,31,30,30,30,27,24,0,28,24,24],
[24,25,26,26,24,20,28,32,26,30,24,22,0,30,23],
[27,21,25,22,25,25,28,26,29,34,21,26,20,0,22],
[28,32,25,27,30,31,31,28,32,33,30,26,27,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 163, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,28,29,27,31,24,29,31,23,31,31,23,29,31],
[18,0,19,20,18,19,13,19,25,16,21,18,16,18,16],
[22,31,0,27,26,26,23,25,31,23,29,28,21,27,21],
[21,30,23,0,22,24,21,20,30,20,27,25,20,22,21],
[23,32,24,28,0,22,23,21,27,23,29,27,21,25,25],
[19,31,24,26,28,0,21,24,31,21,25,24,23,26,24],
[26,37,27,29,27,29,0,23,34,25,30,27,22,29,30],
[21,31,25,30,29,26,27,0,27,26,28,30,22,27,24],
[19,25,19,20,23,19,16,23,0,16,24,21,18,22,21],
[27,34,27,30,27,29,25,24,34,0,30,28,24,29,29],
[19,29,21,23,21,25,20,22,26,20,0,27,22,24,20],
[19,32,22,25,23,26,23,20,29,22,23,0,17,26,21],
[27,34,29,30,29,27,28,28,32,26,28,33,0,31,25],
[21,32,23,28,25,24,21,23,28,21,26,24,19,0,25],
[19,34,29,29,25,26,20,26,29,21,30,29,25,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 164, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,27,28,22,24,21,29,18,23,23,25,30,24,32],
[18,0,20,15,8,16,13,19,14,16,14,19,24,18,22],
[23,30,0,18,20,31,25,40,28,22,29,27,28,26,32],
[22,35,32,0,14,30,29,35,23,25,31,29,35,29,32],
[28,42,30,36,0,30,30,34,23,34,35,37,36,36,37],
[26,34,19,20,20,0,24,31,22,23,28,38,23,25,22],
[29,37,25,21,20,26,0,38,23,26,28,36,29,33,31],
[21,31,10,15,16,19,12,0,19,15,18,22,24,24,14],
[32,36,22,27,27,28,27,31,0,26,31,34,30,28,38],
[27,34,28,25,16,27,24,35,24,0,30,30,29,27,32],
[27,36,21,19,15,22,22,32,19,20,0,30,27,20,29],
[25,31,23,21,13,12,14,28,16,20,20,0,27,23,25],
[20,26,22,15,14,27,21,26,20,21,23,23,0,24,27],
[26,32,24,21,14,25,17,26,22,23,30,27,26,0,26],
[18,28,18,18,13,28,19,36,12,18,21,25,23,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 165, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,24,24,16,29,24,29,23,36,11,24,29,47,42],
[21,0,19,19,19,19,19,22,18,36,19,22,22,40,37],
[26,31,0,28,34,33,31,22,10,23,24,4,27,37,47],
[26,31,22,0,27,26,34,22,3,26,9,4,9,40,50],
[34,31,16,23,0,18,34,21,26,34,1,16,21,49,44],
[21,31,17,24,32,0,34,17,13,21,4,4,22,50,45],
[26,31,19,16,16,16,0,22,10,23,6,9,9,37,34],
[21,28,28,28,29,33,28,0,28,18,29,22,34,37,29],
[27,32,40,47,24,37,40,22,0,40,24,27,40,40,50],
[14,14,27,24,16,29,27,32,10,0,11,14,32,32,27],
[39,31,26,41,49,46,44,21,26,39,0,16,49,49,49],
[26,28,46,46,34,46,41,28,23,36,34,0,47,50,47],
[21,28,23,41,29,28,41,16,10,18,1,3,0,49,41],
[3,10,13,10,1,0,13,13,10,18,1,0,1,0,23],
[8,13,3,0,6,5,16,21,0,23,1,3,9,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 166, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,18,25,25,22,22,23,29,28,27,20,28,36,19],
[28,0,15,25,20,19,22,29,29,30,22,13,27,30,22],
[32,35,0,20,26,22,18,27,27,30,28,19,28,36,27],
[25,25,30,0,25,21,27,29,26,36,25,18,28,30,23],
[25,30,24,25,0,20,21,30,21,30,23,19,24,30,25],
[28,31,28,29,30,0,21,34,24,33,29,15,30,31,24],
[28,28,32,23,29,29,0,26,33,31,33,18,32,32,25],
[27,21,23,21,20,16,24,0,28,31,21,20,26,32,21],
[21,21,23,24,29,26,17,22,0,28,24,20,27,24,19],
[22,20,20,14,20,17,19,19,22,0,23,14,21,22,22],
[23,28,22,25,27,21,17,29,26,27,0,18,29,32,23],
[30,37,31,32,31,35,32,30,30,36,32,0,36,29,25],
[22,23,22,22,26,20,18,24,23,29,21,14,0,22,17],
[14,20,14,20,20,19,18,18,26,28,18,21,28,0,13],
[31,28,23,27,25,26,25,29,31,28,27,25,33,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 167, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,19,27,21,21,21,23,16,19,22,27,21,21,21],
[24,0,21,28,23,22,23,19,19,26,22,27,23,23,21],
[31,29,0,28,23,24,19,29,26,23,20,31,29,22,29],
[23,22,22,0,30,29,26,27,26,20,23,29,28,24,24],
[29,27,27,20,0,24,26,28,23,28,23,33,29,28,28],
[29,28,26,21,26,0,29,30,25,24,24,28,30,24,26],
[29,27,31,24,24,21,0,26,22,23,24,28,28,26,26],
[27,31,21,23,22,20,24,0,28,27,19,32,24,26,23],
[34,31,24,24,27,25,28,22,0,25,25,28,31,20,27],
[31,24,27,30,22,26,27,23,25,0,25,38,32,22,20],
[28,28,30,27,27,26,26,31,25,25,0,32,28,29,32],
[23,23,19,21,17,22,22,18,22,12,18,0,19,19,18],
[29,27,21,22,21,20,22,26,19,18,22,31,0,22,26],
[29,27,28,26,22,26,24,24,30,28,21,31,28,0,30],
[29,29,21,26,22,24,24,27,23,30,18,32,24,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 168, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,23,34,22,29,16,20,23,24,26,23,23,30,28],
[26,0,27,29,29,23,30,21,26,30,30,26,31,34,36],
[27,23,0,27,25,25,24,27,26,27,33,29,29,29,26],
[16,21,23,0,24,21,20,18,23,24,19,21,29,21,22],
[28,21,25,26,0,22,21,23,31,25,28,19,23,27,25],
[21,27,25,29,28,0,21,26,23,24,21,24,29,30,30],
[34,20,26,30,29,29,0,25,34,21,32,30,33,33,30],
[30,29,23,32,27,24,25,0,24,32,26,31,31,32,34],
[27,24,24,27,19,27,16,26,0,22,26,25,24,23,28],
[26,20,23,26,25,26,29,18,28,0,33,29,30,27,30],
[24,20,17,31,22,29,18,24,24,17,0,23,24,25,26],
[27,24,21,29,31,26,20,19,25,21,27,0,23,32,27],
[27,19,21,21,27,21,17,19,26,20,26,27,0,26,28],
[20,16,21,29,23,20,17,18,27,23,25,18,24,0,22],
[22,14,24,28,25,20,20,16,22,20,24,23,22,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 169, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,33,35,31,30,31,22,32,33,19,26,33,30,30],
[13,0,32,30,31,27,28,17,20,28,24,15,27,23,29],
[17,18,0,20,21,15,15,20,18,31,28,18,21,18,33],
[15,20,30,0,29,19,19,19,27,17,23,21,21,24,30],
[19,19,29,21,0,24,24,8,26,30,22,20,28,27,22],
[20,23,35,31,26,0,21,16,27,29,23,17,33,25,27],
[19,22,35,31,26,29,0,12,21,27,25,20,31,23,29],
[28,33,30,31,42,34,38,0,36,34,25,37,34,32,32],
[18,30,32,23,24,23,29,14,0,33,29,23,36,30,28],
[17,22,19,33,20,21,23,16,17,0,20,27,18,16,33],
[31,26,22,27,28,27,25,25,21,30,0,25,30,24,34],
[24,35,32,29,30,33,30,13,27,23,25,0,31,25,25],
[17,23,29,29,22,17,19,16,14,32,20,19,0,29,24],
[20,27,32,26,23,25,27,18,20,34,26,25,21,0,33],
[20,21,17,20,28,23,21,18,22,17,16,25,26,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 170, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,20,21,20,22,19,23,18,19,20,19,29,15,24],
[30,0,26,22,18,21,25,20,22,22,20,16,31,27,22],
[30,24,0,26,24,26,24,24,25,19,29,25,32,22,28],
[29,28,24,0,28,27,32,25,27,27,19,27,30,27,29],
[30,32,26,22,0,25,24,20,22,26,22,26,24,28,28],
[28,29,24,23,25,0,26,24,18,26,22,24,32,22,34],
[31,25,26,18,26,24,0,24,18,20,23,23,31,29,30],
[27,30,26,25,30,26,26,0,24,26,26,28,35,31,36],
[32,28,25,23,28,32,32,26,0,31,20,22,29,30,28],
[31,28,31,23,24,24,30,24,19,0,17,24,32,28,30],
[30,30,21,31,28,28,27,24,30,33,0,26,27,26,30],
[31,34,25,23,24,26,27,22,28,26,24,0,31,27,30],
[21,19,18,20,26,18,19,15,21,18,23,19,0,18,16],
[35,23,28,23,22,28,21,19,20,22,24,23,32,0,26],
[26,28,22,21,22,16,20,14,22,20,20,20,34,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 171, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,31,24,36,27,28,30,26,27,23,27,29,28,22],
[20,0,26,27,30,29,22,29,24,25,25,17,28,27,24],
[19,24,0,25,29,26,21,25,23,27,27,22,27,27,18],
[26,23,25,0,29,22,19,25,24,25,21,23,29,20,19],
[14,20,21,21,0,29,23,19,20,23,21,17,19,19,16],
[23,21,24,28,21,0,16,24,26,21,20,19,25,22,18],
[22,28,29,31,27,34,0,30,27,27,22,28,28,25,23],
[20,21,25,25,31,26,20,0,24,22,22,21,25,21,23],
[24,26,27,26,30,24,23,26,0,27,22,19,25,25,24],
[23,25,23,25,27,29,23,28,23,0,25,23,27,22,23],
[27,25,23,29,29,30,28,28,28,25,0,30,25,29,29],
[23,33,28,27,33,31,22,29,31,27,20,0,32,27,23],
[21,22,23,21,31,25,22,25,25,23,25,18,0,24,16],
[22,23,23,30,31,28,25,29,25,28,21,23,26,0,24],
[28,26,32,31,34,32,27,27,26,27,21,27,34,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 172, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,33,38,29,33,26,36,25,31,33,34,35,27,26],
[23,0,21,31,29,25,19,31,16,19,34,24,25,21,16],
[17,29,0,40,36,23,28,39,16,16,34,22,33,23,30],
[12,19,10,0,23,21,11,29,12,19,28,20,18,17,13],
[21,21,14,27,0,25,27,29,13,16,24,14,24,15,15],
[17,25,27,29,25,0,19,26,13,34,22,14,19,24,21],
[24,31,22,39,23,31,0,34,18,27,38,19,33,28,27],
[14,19,11,21,21,24,16,0,11,15,28,12,22,12,16],
[25,34,34,38,37,37,32,39,0,35,38,27,32,26,27],
[19,31,34,31,34,16,23,35,15,0,32,19,25,26,28],
[17,16,16,22,26,28,12,22,12,18,0,19,18,14,18],
[16,26,28,30,36,36,31,38,23,31,31,0,28,27,27],
[15,25,17,32,26,31,17,28,18,25,32,22,0,26,22],
[23,29,27,33,35,26,22,38,24,24,36,23,24,0,24],
[24,34,20,37,35,29,23,34,23,22,32,23,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 173, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,25,19,28,24,24,21,21,29,27,23,24,24,39],
[20,0,17,17,28,21,25,20,19,25,23,17,18,27,26],
[25,33,0,29,28,25,27,26,22,34,33,25,31,26,34],
[31,33,21,0,32,23,27,30,27,26,33,22,28,26,32],
[22,22,22,18,0,17,23,28,18,32,26,20,21,24,29],
[26,29,25,27,33,0,24,28,27,32,23,25,24,27,28],
[26,25,23,23,27,26,0,26,23,21,25,25,25,24,32],
[29,30,24,20,22,22,24,0,22,34,27,27,26,21,33],
[29,31,28,23,32,23,27,28,0,29,24,21,25,26,32],
[21,25,16,24,18,18,29,16,21,0,25,22,18,24,25],
[23,27,17,17,24,27,25,23,26,25,0,20,23,22,28],
[27,33,25,28,30,25,25,23,29,28,30,0,26,21,35],
[26,32,19,22,29,26,25,24,25,32,27,24,0,23,30],
[26,23,24,24,26,23,26,29,24,26,28,29,27,0,26],
[11,24,16,18,21,22,18,17,18,25,22,15,20,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 174, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,20,23,25,22,30,22,20,27,30,26,28,23],
[23,0,34,25,16,24,27,27,19,21,24,27,25,27,21],
[22,16,0,25,19,28,29,22,26,17,25,26,20,23,26],
[30,25,25,0,18,22,30,26,20,21,21,20,29,20,27],
[27,34,31,32,0,30,38,31,30,26,30,25,30,21,32],
[25,26,22,28,20,0,28,35,19,21,25,33,24,21,18],
[28,23,21,20,12,22,0,30,25,22,22,21,21,20,15],
[20,23,28,24,19,15,20,0,18,18,17,21,16,22,18],
[28,31,24,30,20,31,25,32,0,23,23,25,23,21,26],
[30,29,33,29,24,29,28,32,27,0,22,35,29,32,26],
[23,26,25,29,20,25,28,33,27,28,0,29,29,28,19],
[20,23,24,30,25,17,29,29,25,15,21,0,24,19,22],
[24,25,30,21,20,26,29,34,27,21,21,26,0,17,26],
[22,23,27,30,29,29,30,28,29,18,22,31,33,0,25],
[27,29,24,23,18,32,35,32,24,24,31,28,24,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 175, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,22,17,20,25,21,19,25,26,22,19,18,25,22],
[27,0,21,19,15,20,28,20,21,21,21,22,21,24,25],
[28,29,0,20,23,22,28,20,23,27,29,25,22,22,21],
[33,31,30,0,24,28,26,25,27,36,31,28,26,33,26],
[30,35,27,26,0,23,33,27,25,34,32,24,23,33,28],
[25,30,28,22,27,0,31,20,23,27,22,28,19,28,24],
[29,22,22,24,17,19,0,20,25,25,27,25,25,22,23],
[31,30,30,25,23,30,30,0,28,32,29,28,24,33,26],
[25,29,27,23,25,27,25,22,0,29,26,22,26,33,27],
[24,29,23,14,16,23,25,18,21,0,25,21,24,26,21],
[28,29,21,19,18,28,23,21,24,25,0,20,21,27,17],
[31,28,25,22,26,22,25,22,28,29,30,0,21,28,23],
[32,29,28,24,27,31,25,26,24,26,29,29,0,30,25],
[25,26,28,17,17,22,28,17,17,24,23,22,20,0,19],
[28,25,29,24,22,26,27,24,23,29,33,27,25,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 176, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,34,22,31,23,44,20,28,13,24,26,26,15,31],
[37,0,37,26,25,28,47,31,23,28,33,28,23,26,36],
[16,13,0,16,30,23,28,17,23,14,16,25,14,17,27],
[28,24,34,0,22,33,41,31,37,13,24,31,32,7,34],
[19,25,20,28,0,23,34,23,32,19,27,21,21,23,36],
[27,22,27,17,27,0,31,28,34,10,24,28,20,14,33],
[6,3,22,9,16,19,0,6,20,6,20,19,14,9,20],
[30,19,33,19,27,22,44,0,20,23,19,24,25,17,33],
[22,27,27,13,18,16,30,30,0,13,27,25,20,7,28],
[37,22,36,37,31,40,44,27,37,0,19,32,35,29,34],
[26,17,34,26,23,26,30,31,23,31,0,26,26,29,42],
[24,22,25,19,29,22,31,26,25,18,24,0,9,17,35],
[24,27,36,18,29,30,36,25,30,15,24,41,0,20,42],
[35,24,33,43,27,36,41,33,43,21,21,33,30,0,31],
[19,14,23,16,14,17,30,17,22,16,8,15,8,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 177, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,31,30,24,28,20,27,26,28,27,31,32,31,25],
[24,0,26,26,23,22,24,26,23,23,22,26,29,28,20],
[19,24,0,27,28,25,25,20,24,21,30,25,29,25,23],
[20,24,23,0,21,19,20,25,23,23,25,23,25,25,20],
[26,27,22,29,0,24,24,22,25,23,25,26,25,27,20],
[22,28,25,31,26,0,23,26,29,25,23,23,29,30,27],
[30,26,25,30,26,27,0,29,27,25,23,22,29,32,24],
[23,24,30,25,28,24,21,0,25,24,25,25,28,30,22],
[24,27,26,27,25,21,23,25,0,23,25,26,28,26,23],
[22,27,29,27,27,25,25,26,27,0,27,27,31,26,26],
[23,28,20,25,25,27,27,25,25,23,0,29,30,26,25],
[19,24,25,27,24,27,28,25,24,23,21,0,24,27,27],
[18,21,21,25,25,21,21,22,22,19,20,26,0,24,21],
[19,22,25,25,23,20,18,20,24,24,24,23,26,0,21],
[25,30,27,30,30,23,26,28,27,24,25,23,29,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 178, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,20,24,25,19,26,25,27,22,25,17,23,26,25],
[21,0,27,24,25,20,24,22,21,18,27,16,26,23,27],
[30,23,0,25,26,20,24,25,24,21,27,23,30,23,25],
[26,26,25,0,27,23,29,25,22,23,30,19,25,29,29],
[25,25,24,23,0,22,24,21,21,24,23,16,26,28,29],
[31,30,30,27,28,0,25,23,22,23,27,19,26,29,28],
[24,26,26,21,26,25,0,24,17,27,26,16,26,27,25],
[25,28,25,25,29,27,26,0,24,20,28,22,22,29,25],
[23,29,26,28,29,28,33,26,0,25,30,25,29,31,31],
[28,32,29,27,26,27,23,30,25,0,30,20,27,29,25],
[25,23,23,20,27,23,24,22,20,20,0,18,27,26,26],
[33,34,27,31,34,31,34,28,25,30,32,0,35,32,34],
[27,24,20,25,24,24,24,28,21,23,23,15,0,29,26],
[24,27,27,21,22,21,23,21,19,21,24,18,21,0,25],
[25,23,25,21,21,22,25,25,19,25,24,16,24,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 179, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,23,25,29,24,27,23,28,24,23,26,27,25,24],
[25,0,26,31,28,27,29,27,25,27,31,29,23,22,25],
[27,24,0,25,31,23,22,19,25,25,28,23,26,24,21],
[25,19,25,0,29,21,29,22,20,22,26,22,24,24,22],
[21,22,19,21,0,24,26,20,15,21,22,24,22,19,18],
[26,23,27,29,26,0,24,24,22,21,28,25,26,24,22],
[23,21,28,21,24,26,0,24,21,24,23,24,23,22,25],
[27,23,31,28,30,26,26,0,24,23,28,27,28,22,23],
[22,25,25,30,35,28,29,26,0,24,34,29,30,26,24],
[26,23,25,28,29,29,26,27,26,0,31,24,25,27,24],
[27,19,22,24,28,22,27,22,16,19,0,22,23,19,24],
[24,21,27,28,26,25,26,23,21,26,28,0,24,24,26],
[23,27,24,26,28,24,27,22,20,25,27,26,0,26,21],
[25,28,26,26,31,26,28,28,24,23,31,26,24,0,27],
[26,25,29,28,32,28,25,27,26,26,26,24,29,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 180, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,14,29,9,17,25,27,10,9,15,18,9,14,15,17],
[36,0,24,14,25,26,26,25,25,20,21,22,25,36,24],
[21,26,0,12,26,33,27,20,16,22,28,12,23,23,17],
[41,36,38,0,30,42,39,31,28,25,29,26,32,30,32],
[33,25,24,20,0,29,19,26,26,31,23,18,24,24,23],
[25,24,17,8,21,0,22,28,23,16,19,18,27,29,18],
[23,24,23,11,31,28,0,22,22,28,15,23,28,26,25],
[40,25,30,19,24,22,28,0,25,16,26,25,32,23,22],
[41,25,34,22,24,27,28,25,0,24,22,21,19,35,28],
[35,30,28,25,19,34,22,34,26,0,20,24,33,28,27],
[32,29,22,21,27,31,35,24,28,30,0,29,31,36,31],
[41,28,38,24,32,32,27,25,29,26,21,0,29,39,27],
[36,25,27,18,26,23,22,18,31,17,19,21,0,27,18],
[35,14,27,20,26,21,24,27,15,22,14,11,23,0,18],
[33,26,33,18,27,32,25,28,22,23,19,23,32,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 181, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,19,22,27,24,25,22,22,25,28,28,24,32,30],
[24,0,23,23,29,26,26,15,24,21,17,29,21,31,24],
[31,27,0,29,34,28,26,23,28,30,29,28,23,34,31],
[28,27,21,0,27,25,24,23,28,29,29,31,26,28,26],
[23,21,16,23,0,26,17,18,20,23,25,27,18,22,25],
[26,24,22,25,24,0,18,22,26,26,24,25,24,24,26],
[25,24,24,26,33,32,0,22,27,26,24,29,22,28,26],
[28,35,27,27,32,28,28,0,28,30,34,30,23,29,31],
[28,26,22,22,30,24,23,22,0,31,29,25,19,25,26],
[25,29,20,21,27,24,24,20,19,0,27,31,17,24,24],
[22,33,21,21,25,26,26,16,21,23,0,24,18,24,23],
[22,21,22,19,23,25,21,20,25,19,26,0,22,23,24],
[26,29,27,24,32,26,28,27,31,33,32,28,0,32,28],
[18,19,16,22,28,26,22,21,25,26,26,27,18,0,17],
[20,26,19,24,25,24,24,19,24,26,27,26,22,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 182, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,29,17,26,26,26,23,27,23,29,28,30,23,24],
[21,0,22,16,16,31,23,21,23,12,25,15,22,21,22],
[21,28,0,14,21,14,18,23,17,26,25,17,35,22,15],
[33,34,36,0,21,34,35,31,28,35,37,34,32,34,27],
[24,34,29,29,0,30,26,27,27,28,32,33,35,30,26],
[24,19,36,16,20,0,28,18,23,21,37,19,28,23,26],
[24,27,32,15,24,22,0,24,22,29,25,29,32,19,20],
[27,29,27,19,23,32,26,0,29,21,34,23,31,30,24],
[23,27,33,22,23,27,28,21,0,25,35,28,25,30,32],
[27,38,24,15,22,29,21,29,25,0,33,17,32,20,23],
[21,25,25,13,18,13,25,16,15,17,0,17,25,20,18],
[22,35,33,16,17,31,21,27,22,33,33,0,24,33,28],
[20,28,15,18,15,22,18,19,25,18,25,26,0,20,17],
[27,29,28,16,20,27,31,20,20,30,30,17,30,0,32],
[26,28,35,23,24,24,30,26,18,27,32,22,33,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 183, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,20,23,23,15,9,28,26,20,18,17,23,25,20],
[31,0,27,21,21,26,26,34,32,31,30,25,25,39,28],
[30,23,0,23,34,29,25,32,35,25,29,18,25,42,25],
[27,29,27,0,25,29,23,26,25,31,29,30,30,30,25],
[27,29,16,25,0,25,21,33,30,26,23,23,28,36,24],
[35,24,21,21,25,0,20,28,31,27,29,20,28,38,32],
[41,24,25,27,29,30,0,32,30,21,27,16,31,43,34],
[22,16,18,24,17,22,18,0,28,20,20,20,19,29,25],
[24,18,15,25,20,19,20,22,0,14,17,11,19,26,16],
[30,19,25,19,24,23,29,30,36,0,25,16,24,37,35],
[32,20,21,21,27,21,23,30,33,25,0,19,22,33,17],
[33,25,32,20,27,30,34,30,39,34,31,0,25,40,33],
[27,25,25,20,22,22,19,31,31,26,28,25,0,24,15],
[25,11,8,20,14,12,7,21,24,13,17,10,26,0,16],
[30,22,25,25,26,18,16,25,34,15,33,17,35,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 184, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,25,20,25,29,19,23,29,26,28,33,24,26,28],
[26,0,25,23,25,29,17,22,28,32,26,29,25,26,26],
[25,25,0,27,31,25,19,26,28,27,28,28,22,28,27],
[30,27,23,0,29,30,18,26,27,26,27,29,23,29,33],
[25,25,19,21,0,27,21,26,26,25,30,25,22,26,29],
[21,21,25,20,23,0,27,24,22,23,30,22,26,26,22],
[31,33,31,32,29,23,0,30,28,31,36,31,28,31,34],
[27,28,24,24,24,26,20,0,27,28,26,33,23,24,29],
[21,22,22,23,24,28,22,23,0,27,24,25,24,28,27],
[24,18,23,24,25,27,19,22,23,0,22,25,13,20,24],
[22,24,22,23,20,20,14,24,26,28,0,23,19,26,19],
[17,21,22,21,25,28,19,17,25,25,27,0,16,31,25],
[26,25,28,27,28,24,22,27,26,37,31,34,0,29,30],
[24,24,22,21,24,24,19,26,22,30,24,19,21,0,28],
[22,24,23,17,21,28,16,21,23,26,31,25,20,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 185, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,21,15,16,19,18,18,21,25,15,19,18,16,29],
[33,0,25,25,26,27,26,29,28,35,27,24,26,27,35],
[29,25,0,20,21,25,29,26,25,26,24,22,20,25,33],
[35,25,30,0,24,28,24,26,29,30,24,25,29,24,38],
[34,24,29,26,0,30,23,32,32,33,24,29,28,27,34],
[31,23,25,22,20,0,20,26,27,26,21,26,23,22,35],
[32,24,21,26,27,30,0,32,26,29,24,30,25,23,35],
[32,21,24,24,18,24,18,0,27,28,18,21,26,22,30],
[29,22,25,21,18,23,24,23,0,27,23,25,23,23,34],
[25,15,24,20,17,24,21,22,23,0,16,21,23,22,29],
[35,23,26,26,26,29,26,32,27,34,0,24,22,26,40],
[31,26,28,25,21,24,20,29,25,29,26,0,28,31,35],
[32,24,30,21,22,27,25,24,27,27,28,22,0,24,37],
[34,23,25,26,23,28,27,28,27,28,24,19,26,0,34],
[21,15,17,12,16,15,15,20,16,21,10,15,13,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 186, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,9,9,18,6,50,44,38,35,44,21,35,50,12],
[0,0,0,0,12,0,41,21,9,0,21,0,35,23,0],
[41,50,0,23,41,29,50,50,38,35,50,35,35,41,35],
[41,50,27,0,41,18,50,50,50,41,50,35,35,50,35],
[32,38,9,9,0,0,50,44,32,23,44,9,35,38,0],
[44,50,21,32,50,0,50,44,50,35,44,44,35,50,44],
[0,9,0,0,0,0,0,21,9,0,21,0,12,0,0],
[6,29,0,0,6,6,29,0,38,23,15,0,23,29,0],
[12,41,12,0,18,0,41,12,0,35,12,12,35,41,12],
[15,50,15,9,27,15,50,27,15,0,27,9,35,38,9],
[6,29,0,0,6,6,29,35,38,23,0,0,35,29,0],
[29,50,15,15,41,6,50,50,38,41,50,0,35,38,0],
[15,15,15,15,15,15,38,27,15,15,15,15,0,38,15],
[0,27,9,0,12,0,50,21,9,12,21,12,12,0,12],
[38,50,15,15,50,6,50,50,38,41,50,50,35,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 187, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,31,39,24,29,26,27,32,26,22,19,31,27,36],
[28,0,36,36,27,38,30,33,35,29,25,33,31,35,42],
[19,14,0,35,29,32,23,26,29,23,21,26,28,32,28],
[11,14,15,0,21,29,15,22,30,11,6,22,26,29,23],
[26,23,21,29,0,39,30,22,23,23,10,25,22,32,31],
[21,12,18,21,11,0,26,12,17,14,9,9,13,18,18],
[24,20,27,35,20,24,0,20,23,20,18,23,25,35,26],
[23,17,24,28,28,38,30,0,36,27,14,30,35,30,31],
[18,15,21,20,27,33,27,14,0,11,17,18,16,35,20],
[24,21,27,39,27,36,30,23,39,0,25,25,38,30,32],
[28,25,29,44,40,41,32,36,33,25,0,41,32,46,28],
[31,17,24,28,25,41,27,20,32,25,9,0,30,21,28],
[19,19,22,24,28,37,25,15,34,12,18,20,0,27,19],
[23,15,18,21,18,32,15,20,15,20,4,29,23,0,26],
[14,8,22,27,19,32,24,19,30,18,22,22,31,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 188, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,34,23,28,31,22,23,26,21,41,25,27,25,11],
[20,0,20,19,22,23,18,20,23,19,32,25,20,23,14],
[16,30,0,20,27,21,18,31,22,21,38,25,11,26,10],
[27,31,30,0,32,24,24,24,25,28,35,33,21,31,17],
[22,28,23,18,0,20,21,20,11,18,16,27,19,16,18],
[19,27,29,26,30,0,20,23,24,16,35,24,26,26,15],
[28,32,32,26,29,30,0,30,28,29,32,28,21,24,28],
[27,30,19,26,30,27,20,0,18,25,30,30,18,29,19],
[24,27,28,25,39,26,22,32,0,20,41,24,20,26,16],
[29,31,29,22,32,34,21,25,30,0,35,40,25,22,25],
[9,18,12,15,34,15,18,20,9,15,0,16,9,16,6],
[25,25,25,17,23,26,22,20,26,10,34,0,21,22,18],
[23,30,39,29,31,24,29,32,30,25,41,29,0,32,21],
[25,27,24,19,34,24,26,21,24,28,34,28,18,0,16],
[39,36,40,33,32,35,22,31,34,25,44,32,29,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 189, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,8,19,13,13,16,20,17,18,16,13,17,17,25,14],
[42,0,31,25,22,29,26,26,35,28,31,32,24,32,33],
[31,19,0,25,23,30,27,17,30,14,30,31,21,28,28],
[37,25,25,0,15,25,33,20,28,20,27,24,21,23,26],
[37,28,27,35,0,30,32,22,24,31,29,23,27,32,29],
[34,21,20,25,20,0,30,22,27,24,22,23,22,30,33],
[30,24,23,17,18,20,0,13,31,19,23,22,21,28,22],
[33,24,33,30,28,28,37,0,33,24,34,29,28,32,31],
[32,15,20,22,26,23,19,17,0,19,30,26,24,26,21],
[34,22,36,30,19,26,31,26,31,0,31,29,26,31,30],
[37,19,20,23,21,28,27,16,20,19,0,24,21,20,26],
[33,18,19,26,27,27,28,21,24,21,26,0,20,22,22],
[33,26,29,29,23,28,29,22,26,24,29,30,0,28,27],
[25,18,22,27,18,20,22,18,24,19,30,28,22,0,24],
[36,17,22,24,21,17,28,19,29,20,24,28,23,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 190, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,31,32,29,23,30,32,27,31,28,32,35,19,26],
[28,0,35,22,25,28,30,28,29,27,33,36,45,26,14],
[19,15,0,32,22,26,25,24,20,20,22,33,25,13,18],
[18,28,18,0,19,25,23,25,9,31,30,19,29,15,11],
[21,25,28,31,0,20,27,33,18,33,39,32,28,24,19],
[27,22,24,25,30,0,25,23,20,28,27,30,24,18,18],
[20,20,25,27,23,25,0,23,14,22,34,22,28,19,14],
[18,22,26,25,17,27,27,0,17,32,28,33,39,16,22],
[23,21,30,41,32,30,36,33,0,36,37,39,34,23,22],
[19,23,30,19,17,22,28,18,14,0,30,24,37,19,20],
[22,17,28,20,11,23,16,22,13,20,0,18,18,18,18],
[18,14,17,31,18,20,28,17,11,26,32,0,25,17,17],
[15,5,25,21,22,26,22,11,16,13,32,25,0,12,13],
[31,24,37,35,26,32,31,34,27,31,32,33,38,0,24],
[24,36,32,39,31,32,36,28,28,30,32,33,37,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 191, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,40,27,26,35,33,19,24,30,27,34,28,27,29],
[19,0,32,19,26,20,23,23,20,23,24,28,21,21,29],
[10,18,0,15,19,15,9,13,10,12,18,23,18,11,23],
[23,31,35,0,25,30,28,22,28,32,23,31,28,28,29],
[24,24,31,25,0,22,19,20,20,22,21,26,21,18,17],
[15,30,35,20,28,0,27,18,22,20,23,27,29,20,25],
[17,27,41,22,31,23,0,21,23,23,25,35,26,20,27],
[31,27,37,28,30,32,29,0,28,31,25,31,29,24,29],
[26,30,40,22,30,28,27,22,0,28,26,32,27,26,26],
[20,27,38,18,28,30,27,19,22,0,23,31,25,21,30],
[23,26,32,27,29,27,25,25,24,27,0,27,30,25,24],
[16,22,27,19,24,23,15,19,18,19,23,0,23,20,24],
[22,29,32,22,29,21,24,21,23,25,20,27,0,20,27],
[23,29,39,22,32,30,30,26,24,29,25,30,30,0,27],
[21,21,27,21,33,25,23,21,24,20,26,26,23,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 192, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,30,36,4,4,38,24,24,20,46,24,17,32,36],
[4,0,30,16,4,4,31,11,24,4,50,17,4,17,29],
[20,20,0,24,20,24,38,24,20,20,34,24,20,20,24],
[14,34,26,0,14,18,38,24,34,13,34,31,27,27,31],
[46,46,30,36,0,38,38,36,34,20,46,36,34,46,50],
[46,46,26,32,12,0,46,36,20,32,46,32,20,32,46],
[12,19,12,12,12,4,0,23,20,12,32,25,0,25,25],
[26,39,26,26,14,14,27,0,34,0,46,39,14,39,39],
[26,26,30,16,16,30,30,16,0,12,33,16,18,39,30],
[30,46,30,37,30,18,38,50,38,0,46,43,18,39,43],
[4,0,16,16,4,4,18,4,17,4,0,4,4,17,17],
[26,33,26,19,14,18,25,11,34,7,46,0,14,46,39],
[33,46,30,23,16,30,50,36,32,32,46,36,0,32,50],
[18,33,30,23,4,18,25,11,11,11,33,4,18,0,30],
[14,21,26,19,0,4,25,11,20,7,33,11,0,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 193, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,19,18,21,26,22,17,22,21,14,25,20,20,21],
[26,0,21,25,31,31,26,18,23,26,19,27,22,26,20],
[31,29,0,26,37,33,30,14,32,32,20,31,31,31,28],
[32,25,24,0,34,32,32,16,34,21,17,31,26,16,28],
[29,19,13,16,0,22,23,13,22,24,13,18,18,18,22],
[24,19,17,18,28,0,18,12,22,29,16,27,18,29,17],
[28,24,20,18,27,32,0,16,22,30,15,39,17,22,20],
[33,32,36,34,37,38,34,0,39,40,25,41,32,34,29],
[28,27,18,16,28,28,28,11,0,23,20,28,21,20,26],
[29,24,18,29,26,21,20,10,27,0,20,22,18,22,19],
[36,31,30,33,37,34,35,25,30,30,0,34,30,28,26],
[25,23,19,19,32,23,11,9,22,28,16,0,11,29,17],
[30,28,19,24,32,32,33,18,29,32,20,39,0,27,16],
[30,24,19,34,32,21,28,16,30,28,22,21,23,0,30],
[29,30,22,22,28,33,30,21,24,31,24,33,34,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 194, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,23,27,31,28,24,30,30,27,26,18,26,25,26],
[25,0,21,28,30,27,27,34,26,32,26,18,23,23,27],
[27,29,0,30,33,23,33,32,29,30,26,25,33,33,31],
[23,22,20,0,25,28,20,24,26,24,22,20,25,18,21],
[19,20,17,25,0,23,22,24,24,28,20,14,26,25,21],
[22,23,27,22,27,0,23,26,21,28,27,16,22,28,24],
[26,23,17,30,28,27,0,22,23,28,24,13,26,22,21],
[20,16,18,26,26,24,28,0,19,23,29,15,24,21,26],
[20,24,21,24,26,29,27,31,0,25,24,17,28,24,24],
[23,18,20,26,22,22,22,27,25,0,24,15,20,19,25],
[24,24,24,28,30,23,26,21,26,26,0,18,29,26,27],
[32,32,25,30,36,34,37,35,33,35,32,0,35,30,32],
[24,27,17,25,24,28,24,26,22,30,21,15,0,23,23],
[25,27,17,32,25,22,28,29,26,31,24,20,27,0,26],
[24,23,19,29,29,26,29,24,26,25,23,18,27,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 195, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,27,20,26,31,24,35,23,25,23,22,29,23,30],
[21,0,25,21,13,23,12,24,23,24,20,17,24,16,26],
[23,25,0,17,22,22,20,24,22,25,20,16,24,20,26],
[30,29,33,0,20,28,16,35,26,27,26,18,25,17,28],
[24,37,28,30,0,24,23,34,33,28,26,24,26,20,22],
[19,27,28,22,26,0,19,30,22,22,19,20,23,18,27],
[26,38,30,34,27,31,0,35,32,33,33,23,32,25,34],
[15,26,26,15,16,20,15,0,20,25,20,13,20,15,22],
[27,27,28,24,17,28,18,30,0,33,27,21,26,22,26],
[25,26,25,23,22,28,17,25,17,0,25,20,28,20,25],
[27,30,30,24,24,31,17,30,23,25,0,21,27,22,28],
[28,33,34,32,26,30,27,37,29,30,29,0,27,25,36],
[21,26,26,25,24,27,18,30,24,22,23,23,0,23,26],
[27,34,30,33,30,32,25,35,28,30,28,25,27,0,36],
[20,24,24,22,28,23,16,28,24,25,22,14,24,14,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 196, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,26,20,31,21,20,25,15,18,22,20,22,25,27],
[20,0,23,20,24,18,24,22,19,23,20,21,22,23,18],
[24,27,0,21,22,21,26,26,16,25,24,20,22,17,29],
[30,30,29,0,33,26,28,32,23,29,28,29,28,23,28],
[19,26,28,17,0,14,25,29,20,21,22,16,24,13,29],
[29,32,29,24,36,0,23,24,25,21,25,32,20,27,27],
[30,26,24,22,25,27,0,29,21,28,24,26,29,23,23],
[25,28,24,18,21,26,21,0,13,19,23,23,25,16,22],
[35,31,34,27,30,25,29,37,0,29,33,25,29,28,33],
[32,27,25,21,29,29,22,31,21,0,25,26,25,19,28],
[28,30,26,22,28,25,26,27,17,25,0,26,26,19,27],
[30,29,30,21,34,18,24,27,25,24,24,0,26,24,27],
[28,28,28,22,26,30,21,25,21,25,24,24,0,17,26],
[25,27,33,27,37,23,27,34,22,31,31,26,33,0,33],
[23,32,21,22,21,23,27,28,17,22,23,23,24,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 197, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,17,20,13,22,15,10,5,20,8,10,9,11,22],
[33,0,24,36,26,34,30,20,10,20,26,25,22,23,25],
[33,26,0,32,29,29,26,26,16,29,24,20,24,24,29],
[30,14,18,0,21,24,25,14,7,19,23,14,13,16,16],
[37,24,21,29,0,27,22,22,12,24,20,21,16,19,30],
[28,16,21,26,23,0,20,19,13,26,18,22,10,14,22],
[35,20,24,25,28,30,0,24,17,28,26,23,29,23,23],
[40,30,24,36,28,31,26,0,19,22,27,25,27,28,37],
[45,40,34,43,38,37,33,31,0,31,37,35,20,34,41],
[30,30,21,31,26,24,22,28,19,0,28,25,20,33,25],
[42,24,26,27,30,32,24,23,13,22,0,24,18,18,32],
[40,25,30,36,29,28,27,25,15,25,26,0,25,23,27],
[41,28,26,37,34,40,21,23,30,30,32,25,0,28,37],
[39,27,26,34,31,36,27,22,16,17,32,27,22,0,33],
[28,25,21,34,20,28,27,13,9,25,18,23,13,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 198, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,36,33,34,27,23,37,23,29,19,34,28,30,23],
[20,0,22,21,21,18,24,28,8,23,18,17,13,26,17],
[14,28,0,28,37,22,21,33,14,27,19,26,19,18,16],
[17,29,22,0,22,19,19,28,6,18,13,20,18,16,10],
[16,29,13,28,0,20,22,28,19,33,24,27,17,24,16],
[23,32,28,31,30,0,29,27,23,27,28,20,27,32,27],
[27,26,29,31,28,21,0,30,18,18,25,24,23,19,20],
[13,22,17,22,22,23,20,0,16,19,13,27,19,25,16],
[27,42,36,44,31,27,32,34,0,30,31,30,20,30,29],
[21,27,23,32,17,23,32,31,20,0,23,23,25,24,22],
[31,32,31,37,26,22,25,37,19,27,0,26,26,28,19],
[16,33,24,30,23,30,26,23,20,27,24,0,19,24,21],
[22,37,31,32,33,23,27,31,30,25,24,31,0,27,27],
[20,24,32,34,26,18,31,25,20,26,22,26,23,0,24],
[27,33,34,40,34,23,30,34,21,28,31,29,23,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 199, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,26,19,24,24,19,22,20,27,18,21,17,23,28],
[35,0,36,28,27,38,30,29,29,37,30,27,23,30,33],
[24,14,0,12,18,20,20,16,17,23,18,17,14,16,26],
[31,22,38,0,25,22,23,23,25,24,21,18,14,19,26],
[26,23,32,25,0,32,27,26,25,25,24,23,21,30,28],
[26,12,30,28,18,0,22,21,17,26,21,21,13,19,22],
[31,20,30,27,23,28,0,25,27,30,27,23,19,19,26],
[28,21,34,27,24,29,25,0,22,31,22,24,17,23,26],
[30,21,33,25,25,33,23,28,0,29,23,19,23,19,30],
[23,13,27,26,25,24,20,19,21,0,22,23,16,18,23],
[32,20,32,29,26,29,23,28,27,28,0,28,23,25,30],
[29,23,33,32,27,29,27,26,31,27,22,0,32,30,30],
[33,27,36,36,29,37,31,33,27,34,27,18,0,28,30],
[27,20,34,31,20,31,31,27,31,32,25,20,22,0,32],
[22,17,24,24,22,28,24,24,20,27,20,20,20,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 50, 200, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebbrcwd/mebbrcwd_15_50.csv", index=False, header=False)
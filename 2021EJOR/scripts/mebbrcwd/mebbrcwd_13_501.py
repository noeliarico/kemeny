
import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg
from kemeny import sc

rep = 1
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,265,252,242,245,248,244,271,236,257,266,241,231],
[236,0,230,241,242,244,240,256,227,229,251,240,225],
[249,271,0,245,256,260,247,262,237,249,259,249,250],
[259,260,256,0,274,249,268,272,260,251,266,249,249],
[256,259,245,227,0,243,251,267,240,229,274,231,248],
[253,257,241,252,258,0,241,271,252,238,265,251,243],
[257,261,254,233,250,260,0,263,225,254,267,253,253],
[230,245,239,229,234,230,238,0,229,224,252,226,235],
[265,274,264,241,261,249,276,272,0,255,279,252,250],
[244,272,252,250,272,263,247,277,246,0,276,257,260],
[235,250,242,235,227,236,234,249,222,225,0,217,219],
[260,261,252,252,270,250,248,275,249,244,284,0,258],
[270,276,251,252,253,258,248,266,251,241,282,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 1, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,228,305,358,187,347,291,241,295,300,275,471],
[180,0,193,249,273,150,231,272,164,226,197,274,363],
[273,308,0,233,329,170,253,354,178,314,192,255,439],
[196,252,268,0,323,163,230,363,194,324,305,286,339],
[143,228,172,178,0,156,205,285,143,343,186,152,306],
[314,351,331,338,345,0,375,370,244,329,242,347,427],
[154,270,248,271,296,126,0,270,200,267,255,185,332],
[210,229,147,138,216,131,231,0,151,213,220,253,349],
[260,337,323,307,358,257,301,350,0,330,240,315,371],
[206,275,187,177,158,172,234,288,171,0,253,248,279],
[201,304,309,196,315,259,246,281,261,248,0,262,363],
[226,227,246,215,349,154,316,248,186,253,239,0,303],
[30,138,62,162,195,74,169,152,130,222,138,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 2, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,248,258,261,286,284,252,295,288,284,269,288],
[232,0,230,257,235,260,253,243,235,248,268,266,256],
[253,271,0,249,270,304,269,263,265,317,282,282,295],
[243,244,252,0,228,266,214,214,240,283,254,244,272],
[240,266,231,273,0,292,272,265,289,298,274,269,264],
[215,241,197,235,209,0,251,254,238,242,255,237,240],
[217,248,232,287,229,250,0,264,259,281,290,258,272],
[249,258,238,287,236,247,237,0,276,295,276,254,265],
[206,266,236,261,212,263,242,225,0,286,261,269,269],
[213,253,184,218,203,259,220,206,215,0,263,233,243],
[217,233,219,247,227,246,211,225,240,238,0,239,274],
[232,235,219,257,232,264,243,247,232,268,262,0,262],
[213,245,206,229,237,261,229,236,232,258,227,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 3, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,241,249,244,249,251,247,267,244,270,245,235],
[246,0,246,253,247,253,241,264,249,252,257,239,247],
[260,255,0,260,255,269,271,247,257,252,269,245,243],
[252,248,241,0,247,243,244,241,256,226,258,244,235],
[257,254,246,254,0,251,251,244,251,236,262,251,243],
[252,248,232,258,250,0,232,251,258,234,265,248,241],
[250,260,230,257,250,269,0,244,264,246,275,243,248],
[254,237,254,260,257,250,257,0,260,244,274,243,253],
[234,252,244,245,250,243,237,241,0,223,249,241,236],
[257,249,249,275,265,267,255,257,278,0,266,255,240],
[231,244,232,243,239,236,226,227,252,235,0,248,218],
[256,262,256,257,250,253,258,258,260,246,253,0,251],
[266,254,258,266,258,260,253,248,265,261,283,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 4, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,264,253,233,266,228,235,264,240,274,257,241],
[239,0,282,278,228,276,230,264,251,254,273,269,244],
[237,219,0,229,205,236,245,233,240,215,248,258,200],
[248,223,272,0,232,251,206,228,242,238,255,240,226],
[268,273,296,269,0,266,264,273,238,230,248,251,246],
[235,225,265,250,235,0,247,229,258,236,275,258,238],
[273,271,256,295,237,254,0,244,261,262,275,256,269],
[266,237,268,273,228,272,257,0,262,240,272,245,258],
[237,250,261,259,263,243,240,239,0,256,255,237,238],
[261,247,286,263,271,265,239,261,245,0,285,264,258],
[227,228,253,246,253,226,226,229,246,216,0,229,233],
[244,232,243,261,250,243,245,256,264,237,272,0,226],
[260,257,301,275,255,263,232,243,263,243,268,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 5, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,238,261,231,250,224,243,244,261,243,251,266],
[266,0,256,263,240,273,248,272,261,260,249,264,272],
[263,245,0,233,257,244,237,266,249,253,244,244,269],
[240,238,268,0,232,247,229,261,233,235,232,261,241],
[270,261,244,269,0,251,267,264,256,252,269,277,246],
[251,228,257,254,250,0,225,262,246,244,250,243,243],
[277,253,264,272,234,276,0,282,239,247,244,270,266],
[258,229,235,240,237,239,219,0,221,229,240,244,249],
[257,240,252,268,245,255,262,280,0,241,263,271,265],
[240,241,248,266,249,257,254,272,260,0,272,262,246],
[258,252,257,269,232,251,257,261,238,229,0,240,238],
[250,237,257,240,224,258,231,257,230,239,261,0,256],
[235,229,232,260,255,258,235,252,236,255,263,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 6, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,241,255,276,264,262,273,248,260,248,254,264],
[250,0,254,260,274,294,287,271,258,277,247,257,260],
[260,247,0,262,269,266,266,271,258,259,255,255,259],
[246,241,239,0,260,253,267,269,253,261,240,258,267],
[225,227,232,241,0,248,238,234,235,236,218,251,245],
[237,207,235,248,253,0,257,252,239,234,249,255,250],
[239,214,235,234,263,244,0,246,247,251,231,247,249],
[228,230,230,232,267,249,255,0,255,250,241,252,254],
[253,243,243,248,266,262,254,246,0,265,225,252,252],
[241,224,242,240,265,267,250,251,236,0,220,274,242],
[253,254,246,261,283,252,270,260,276,281,0,256,268],
[247,244,246,243,250,246,254,249,249,227,245,0,245],
[237,241,242,234,256,251,252,247,249,259,233,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 7, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,224,239,251,223,216,225,237,239,263,254,229],
[266,0,272,223,223,233,246,214,260,282,221,208,257],
[277,229,0,264,273,291,231,248,211,262,242,297,289],
[262,278,237,0,289,247,252,220,225,274,265,278,267],
[250,278,228,212,0,258,231,218,228,268,249,245,260],
[278,268,210,254,243,0,249,241,235,271,251,209,264],
[285,255,270,249,270,252,0,260,256,310,251,262,300],
[276,287,253,281,283,260,241,0,290,297,237,202,277],
[264,241,290,276,273,266,245,211,0,282,222,253,287],
[262,219,239,227,233,230,191,204,219,0,240,252,279],
[238,280,259,236,252,250,250,264,279,261,0,211,256],
[247,293,204,223,256,292,239,299,248,249,290,0,301],
[272,244,212,234,241,237,201,224,214,222,245,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 8, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,245,226,280,295,228,255,222,261,234,225,189],
[329,0,267,270,292,319,249,226,233,260,258,284,250],
[256,234,0,272,287,267,253,245,234,277,225,266,231],
[275,231,229,0,299,258,239,240,220,266,218,265,227],
[221,209,214,202,0,290,186,218,188,233,225,203,172],
[206,182,234,243,211,0,218,210,191,203,185,202,182],
[273,252,248,262,315,283,0,249,252,245,243,214,220],
[246,275,256,261,283,291,252,0,248,262,237,248,213],
[279,268,267,281,313,310,249,253,0,283,243,275,274],
[240,241,224,235,268,298,256,239,218,0,197,234,223],
[267,243,276,283,276,316,258,264,258,304,0,247,236],
[276,217,235,236,298,299,287,253,226,267,254,0,221],
[312,251,270,274,329,319,281,288,227,278,265,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 9, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,212,253,269,298,289,252,292,311,284,233,268],
[257,0,217,259,270,301,266,274,255,286,249,267,276],
[289,284,0,263,316,356,297,277,276,281,267,228,301],
[248,242,238,0,291,325,251,263,292,274,253,259,231],
[232,231,185,210,0,276,243,208,226,251,272,182,212],
[203,200,145,176,225,0,185,244,189,186,221,214,191],
[212,235,204,250,258,316,0,233,237,252,231,200,177],
[249,227,224,238,293,257,268,0,270,260,234,253,222],
[209,246,225,209,275,312,264,231,0,256,221,212,291],
[190,215,220,227,250,315,249,241,245,0,209,179,201],
[217,252,234,248,229,280,270,267,280,292,0,215,261],
[268,234,273,242,319,287,301,248,289,322,286,0,290],
[233,225,200,270,289,310,324,279,210,300,240,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 10, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,241,242,227,233,271,235,258,239,246,226,230],
[284,0,272,242,256,272,279,260,275,250,254,242,247],
[260,229,0,265,260,270,271,270,239,244,256,234,255],
[259,259,236,0,264,252,269,261,246,252,241,231,267],
[274,245,241,237,0,280,275,278,270,249,253,246,275],
[268,229,231,249,221,0,256,258,247,246,250,221,246],
[230,222,230,232,226,245,0,245,236,232,218,212,238],
[266,241,231,240,223,243,256,0,242,224,233,222,226],
[243,226,262,255,231,254,265,259,0,245,247,242,270],
[262,251,257,249,252,255,269,277,256,0,267,260,268],
[255,247,245,260,248,251,283,268,254,234,0,238,252],
[275,259,267,270,255,280,289,279,259,241,263,0,267],
[271,254,246,234,226,255,263,275,231,233,249,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 11, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,217,225,287,203,239,230,243,257,296,247,270],
[292,0,292,273,274,299,210,280,220,273,256,287,293],
[284,209,0,269,304,230,243,274,210,241,306,315,275],
[276,228,232,0,290,227,216,248,241,210,270,257,307],
[214,227,197,211,0,231,200,277,197,191,263,231,294],
[298,202,271,274,270,0,248,254,258,243,330,299,307],
[262,291,258,285,301,253,0,260,218,238,328,304,357],
[271,221,227,253,224,247,241,0,236,190,297,251,276],
[258,281,291,260,304,243,283,265,0,216,321,317,318],
[244,228,260,291,310,258,263,311,285,0,317,311,291],
[205,245,195,231,238,171,173,204,180,184,0,232,286],
[254,214,186,244,270,202,197,250,184,190,269,0,242],
[231,208,226,194,207,194,144,225,183,210,215,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 12, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,224,243,258,224,240,244,228,236,244,213,250,256],
[277,0,264,288,266,249,303,252,237,279,283,287,289],
[258,237,0,238,236,243,225,245,225,247,240,264,272],
[243,213,263,0,235,243,210,224,238,239,239,263,251],
[277,235,265,266,0,235,262,261,237,230,255,260,295],
[261,252,258,258,266,0,228,232,230,242,259,258,265],
[257,198,276,291,239,273,0,266,252,240,272,269,281],
[273,249,256,277,240,269,235,0,235,238,248,243,250],
[265,264,276,263,264,271,249,266,0,234,247,248,272],
[257,222,254,262,271,259,261,263,267,0,269,285,275],
[288,218,261,262,246,242,229,253,254,232,0,275,227],
[251,214,237,238,241,243,232,258,253,216,226,0,255],
[245,212,229,250,206,236,220,251,229,226,274,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 13, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,241,260,249,249,248,250,238,256,256,226,253],
[244,0,239,245,232,238,256,259,232,250,245,229,253],
[260,262,0,259,251,266,251,253,239,251,264,237,272],
[241,256,242,0,241,258,248,241,241,241,251,239,256],
[252,269,250,260,0,269,261,251,241,270,277,251,270],
[252,263,235,243,232,0,249,249,227,263,273,233,261],
[253,245,250,253,240,252,0,261,232,264,252,227,264],
[251,242,248,260,250,252,240,0,233,245,257,230,257],
[263,269,262,260,260,274,269,268,0,267,275,250,270],
[245,251,250,260,231,238,237,256,234,0,257,228,266],
[245,256,237,250,224,228,249,244,226,244,0,232,259],
[275,272,264,262,250,268,274,271,251,273,269,0,270],
[248,248,229,245,231,240,237,244,231,235,242,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 14, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,241,245,237,257,252,236,247,242,260,239,220],
[262,0,248,262,248,266,260,234,256,257,266,244,240],
[260,253,0,255,258,256,262,247,253,258,269,259,246],
[256,239,246,0,240,254,243,248,242,247,258,252,229],
[264,253,243,261,0,263,259,261,266,263,264,248,253],
[244,235,245,247,238,0,260,240,245,256,267,237,238],
[249,241,239,258,242,241,0,241,250,259,269,234,242],
[265,267,254,253,240,261,260,0,252,277,272,259,253],
[254,245,248,259,235,256,251,249,0,253,246,243,235],
[259,244,243,254,238,245,242,224,248,0,251,229,243],
[241,235,232,243,237,234,232,229,255,250,0,235,230],
[262,257,242,249,253,264,267,242,258,272,266,0,241],
[281,261,255,272,248,263,259,248,266,258,271,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 15, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,225,252,245,256,244,226,241,210,233,232,247],
[257,0,239,254,256,263,248,222,252,238,245,240,250],
[276,262,0,251,254,262,271,263,250,257,247,244,274],
[249,247,250,0,242,250,240,236,261,229,245,245,253],
[256,245,247,259,0,243,235,236,250,239,250,253,253],
[245,238,239,251,258,0,251,240,258,243,244,237,249],
[257,253,230,261,266,250,0,245,251,238,253,250,272],
[275,279,238,265,265,261,256,0,285,247,268,271,265],
[260,249,251,240,251,243,250,216,0,236,236,243,246],
[291,263,244,272,262,258,263,254,265,0,254,247,270],
[268,256,254,256,251,257,248,233,265,247,0,247,247],
[269,261,257,256,248,264,251,230,258,254,254,0,254],
[254,251,227,248,248,252,229,236,255,231,254,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 16, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,255,236,242,236,252,244,258,232,239,240,250],
[253,0,255,243,252,255,249,242,243,245,235,241,232],
[246,246,0,241,263,261,255,264,245,259,232,232,248],
[265,258,260,0,265,259,254,266,259,259,261,247,272],
[259,249,238,236,0,239,237,247,240,237,244,244,247],
[265,246,240,242,262,0,247,257,246,233,245,240,265],
[249,252,246,247,264,254,0,265,244,252,251,248,253],
[257,259,237,235,254,244,236,0,235,246,229,246,241],
[243,258,256,242,261,255,257,266,0,244,251,240,248],
[269,256,242,242,264,268,249,255,257,0,239,252,252],
[262,266,269,240,257,256,250,272,250,262,0,239,251],
[261,260,269,254,257,261,253,255,261,249,262,0,265],
[251,269,253,229,254,236,248,260,253,249,250,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 17, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,240,256,265,262,256,243,253,251,272,260,251],
[246,0,257,261,264,260,254,254,248,256,270,254,252],
[261,244,0,252,264,261,271,235,236,251,263,262,245],
[245,240,249,0,267,255,263,250,235,264,261,248,247],
[236,237,237,234,0,247,240,243,234,240,250,229,219],
[239,241,240,246,254,0,259,238,239,247,263,246,249],
[245,247,230,238,261,242,0,244,224,238,261,237,238],
[258,247,266,251,258,263,257,0,256,260,259,258,239],
[248,253,265,266,267,262,277,245,0,257,264,258,244],
[250,245,250,237,261,254,263,241,244,0,277,234,220],
[229,231,238,240,251,238,240,242,237,224,0,240,226],
[241,247,239,253,272,255,264,243,243,267,261,0,243],
[250,249,256,254,282,252,263,262,257,281,275,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 18, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,340,288,288,251,296,288,243,361,211,288,421,278],
[161,0,137,148,170,269,62,94,127,72,128,378,131],
[213,364,0,349,340,340,248,340,340,180,171,385,293],
[213,353,152,0,243,357,178,164,263,188,112,451,228],
[250,331,161,258,0,206,187,165,225,225,165,289,275],
[205,232,161,144,295,0,126,126,208,135,134,253,247],
[213,439,253,323,314,375,0,289,341,291,195,451,341],
[258,407,161,337,336,375,212,0,226,222,250,484,228],
[140,374,161,238,276,293,160,275,0,235,153,386,210],
[290,429,321,313,276,366,210,279,266,0,271,450,311],
[213,373,330,389,336,367,306,251,348,230,0,386,237],
[80,123,116,50,212,248,50,17,115,51,115,0,172],
[223,370,208,273,226,254,160,273,291,190,264,329,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 19, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,243,272,243,261,249,243,230,237,236,253,230],
[263,0,254,270,242,255,255,253,257,238,235,251,248],
[258,247,0,256,227,241,235,239,255,239,250,240,255],
[229,231,245,0,218,237,233,233,253,229,229,232,237],
[258,259,274,283,0,257,269,262,263,274,263,250,254],
[240,246,260,264,244,0,235,241,242,249,243,222,236],
[252,246,266,268,232,266,0,247,261,254,243,244,240],
[258,248,262,268,239,260,254,0,244,240,240,242,257],
[271,244,246,248,238,259,240,257,0,243,230,238,243],
[264,263,262,272,227,252,247,261,258,0,261,237,232],
[265,266,251,272,238,258,258,261,271,240,0,248,251],
[248,250,261,269,251,279,257,259,263,264,253,0,258],
[271,253,246,264,247,265,261,244,258,269,250,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 20, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,230,243,248,246,257,248,238,252,262,262,243],
[271,0,244,259,251,251,262,249,245,261,271,243,256],
[271,257,0,256,258,262,264,258,248,265,270,279,259],
[258,242,245,0,254,238,250,243,248,269,263,280,256],
[253,250,243,247,0,237,259,242,255,253,270,264,261],
[255,250,239,263,264,0,255,253,253,275,275,268,265],
[244,239,237,251,242,246,0,240,256,256,262,258,260],
[253,252,243,258,259,248,261,0,249,265,257,265,262],
[263,256,253,253,246,248,245,252,0,255,251,268,273],
[249,240,236,232,248,226,245,236,246,0,244,253,243],
[239,230,231,238,231,226,239,244,250,257,0,246,246],
[239,258,222,221,237,233,243,236,233,248,255,0,249],
[258,245,242,245,240,236,241,239,228,258,255,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 21, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,224,204,202,231,241,142,160,160,300,265,119,246],
[277,0,147,243,221,237,199,161,210,282,242,148,269],
[297,354,0,274,231,288,220,180,242,298,337,142,291],
[299,258,227,0,271,248,214,172,243,253,244,184,226],
[270,280,270,230,0,295,150,217,199,275,285,188,310],
[260,264,213,253,206,0,112,129,206,238,277,144,231],
[359,302,281,287,351,389,0,257,332,361,416,206,320],
[341,340,321,329,284,372,244,0,372,324,355,271,304],
[341,291,259,258,302,295,169,129,0,257,327,189,267],
[201,219,203,248,226,263,140,177,244,0,229,200,261],
[236,259,164,257,216,224,85,146,174,272,0,152,184],
[382,353,359,317,313,357,295,230,312,301,349,0,272],
[255,232,210,275,191,270,181,197,234,240,317,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 22, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,256,242,284,248,270,246,255,249,252,223,262],
[236,0,257,239,242,232,228,232,254,229,223,228,241],
[245,244,0,238,260,237,254,247,250,234,245,230,223],
[259,262,263,0,268,270,246,249,271,246,254,249,240],
[217,259,241,233,0,261,248,238,250,227,249,224,240],
[253,269,264,231,240,0,235,231,249,221,253,235,251],
[231,273,247,255,253,266,0,250,256,230,241,231,268],
[255,269,254,252,263,270,251,0,268,239,264,233,244],
[246,247,251,230,251,252,245,233,0,239,233,223,236],
[252,272,267,255,274,280,271,262,262,0,255,251,246],
[249,278,256,247,252,248,260,237,268,246,0,242,248],
[278,273,271,252,277,266,270,268,278,250,259,0,243],
[239,260,278,261,261,250,233,257,265,255,253,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 23, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,219,255,230,266,243,195,205,233,257,199,237],
[311,0,268,276,284,322,275,278,298,261,300,243,256],
[282,233,0,247,228,283,253,218,233,272,294,229,239],
[246,225,254,0,262,304,301,226,249,216,276,202,267],
[271,217,273,239,0,227,260,171,244,249,265,199,224],
[235,179,218,197,274,0,247,203,189,196,225,145,246],
[258,226,248,200,241,254,0,235,240,222,271,209,225],
[306,223,283,275,330,298,266,0,257,270,283,269,267],
[296,203,268,252,257,312,261,244,0,213,245,228,260],
[268,240,229,285,252,305,279,231,288,0,259,255,267],
[244,201,207,225,236,276,230,218,256,242,0,260,248],
[302,258,272,299,302,356,292,232,273,246,241,0,240],
[264,245,262,234,277,255,276,234,241,234,253,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 24, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,240,254,248,249,269,256,252,261,244,251,251],
[256,0,254,240,250,224,255,248,237,253,243,246,249],
[261,247,0,251,255,253,268,265,253,265,253,251,267],
[247,261,250,0,255,256,259,259,251,261,232,243,258],
[253,251,246,246,0,250,265,243,244,249,235,257,243],
[252,277,248,245,251,0,259,272,243,257,253,249,271],
[232,246,233,242,236,242,0,245,233,238,232,243,257],
[245,253,236,242,258,229,256,0,239,253,229,252,259],
[249,264,248,250,257,258,268,262,0,240,228,247,255],
[240,248,236,240,252,244,263,248,261,0,232,246,244],
[257,258,248,269,266,248,269,272,273,269,0,271,259],
[250,255,250,258,244,252,258,249,254,255,230,0,255],
[250,252,234,243,258,230,244,242,246,257,242,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 25, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,198,195,222,217,201,213,190,219,244,227,211],
[258,0,233,249,258,268,248,232,237,325,264,278,285],
[303,268,0,224,213,255,194,261,268,254,230,236,286],
[306,252,277,0,258,256,285,243,224,260,256,258,251],
[279,243,288,243,0,219,267,284,249,281,214,215,241],
[284,233,246,245,282,0,240,218,215,249,241,230,250],
[300,253,307,216,234,261,0,252,211,258,242,232,237],
[288,269,240,258,217,283,249,0,231,218,289,239,240],
[311,264,233,277,252,286,290,270,0,315,285,283,242],
[282,176,247,241,220,252,243,283,186,0,199,192,261],
[257,237,271,245,287,260,259,212,216,302,0,252,282],
[274,223,265,243,286,271,269,262,218,309,249,0,263],
[290,216,215,250,260,251,264,261,259,240,219,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 26, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,240,234,263,236,248,253,225,248,251,241,260],
[253,0,254,288,243,237,253,265,232,252,252,273,254],
[261,247,0,269,256,264,267,265,244,258,233,254,260],
[267,213,232,0,228,223,235,224,220,217,240,232,234],
[238,258,245,273,0,265,269,255,265,250,251,275,297],
[265,264,237,278,236,0,223,261,255,261,257,264,271],
[253,248,234,266,232,278,0,272,242,225,251,271,254],
[248,236,236,277,246,240,229,0,215,214,241,262,217],
[276,269,257,281,236,246,259,286,0,258,254,292,304],
[253,249,243,284,251,240,276,287,243,0,252,263,262],
[250,249,268,261,250,244,250,260,247,249,0,264,264],
[260,228,247,269,226,237,230,239,209,238,237,0,239],
[241,247,241,267,204,230,247,284,197,239,237,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 27, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,250,249,342,287,295,251,215,244,214,264,230],
[208,0,210,237,285,294,198,199,163,173,142,252,235],
[251,291,0,226,247,243,215,274,177,204,152,277,227],
[252,264,275,0,247,290,210,223,238,238,198,230,218],
[159,216,254,254,0,261,175,259,227,199,160,231,195],
[214,207,258,211,240,0,128,228,152,188,169,217,221],
[206,303,286,291,326,373,0,215,315,203,247,225,268],
[250,302,227,278,242,273,286,0,230,239,223,209,225],
[286,338,324,263,274,349,186,271,0,270,282,275,245],
[257,328,297,263,302,313,298,262,231,0,257,272,257],
[287,359,349,303,341,332,254,278,219,244,0,307,294],
[237,249,224,271,270,284,276,292,226,229,194,0,245],
[271,266,274,283,306,280,233,276,256,244,207,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 28, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,233,239,240,236,164,212,213,268,202,235,218],
[302,0,249,278,284,258,305,265,222,284,234,230,281],
[268,252,0,249,214,264,250,255,241,262,226,243,245],
[262,223,252,0,212,282,235,218,250,236,208,184,229],
[261,217,287,289,0,299,260,287,264,261,244,245,271],
[265,243,237,219,202,0,221,248,223,257,236,201,197],
[337,196,251,266,241,280,0,262,215,283,225,269,273],
[289,236,246,283,214,253,239,0,252,223,200,208,216],
[288,279,260,251,237,278,286,249,0,265,235,221,245],
[233,217,239,265,240,244,218,278,236,0,218,215,189],
[299,267,275,293,257,265,276,301,266,283,0,236,277],
[266,271,258,317,256,300,232,293,280,286,265,0,233],
[283,220,256,272,230,304,228,285,256,312,224,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 29, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,163,233,198,242,211,227,201,218,188,232,232],
[283,0,219,196,163,191,195,242,166,186,210,243,269],
[338,282,0,268,202,377,270,255,261,285,320,324,291],
[268,305,233,0,260,313,278,334,270,211,233,315,293],
[303,338,299,241,0,334,231,317,300,306,295,351,343],
[259,310,124,188,167,0,184,277,186,244,176,236,249],
[290,306,231,223,270,317,0,343,228,309,286,290,312],
[274,259,246,167,184,224,158,0,253,246,266,299,302],
[300,335,240,231,201,315,273,248,0,266,246,326,318],
[283,315,216,290,195,257,192,255,235,0,234,288,296],
[313,291,181,268,206,325,215,235,255,267,0,277,325],
[269,258,177,186,150,265,211,202,175,213,224,0,237],
[269,232,210,208,158,252,189,199,183,205,176,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 30, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,261,237,239,246,253,266,243,258,247,253,272],
[242,0,245,216,235,251,238,243,231,243,236,246,262],
[240,256,0,248,235,254,261,251,257,256,250,261,256],
[264,285,253,0,253,250,271,270,255,259,250,265,271],
[262,266,266,248,0,248,259,261,248,252,269,264,270],
[255,250,247,251,253,0,242,265,238,239,240,262,281],
[248,263,240,230,242,259,0,259,247,249,246,251,242],
[235,258,250,231,240,236,242,0,216,255,225,252,250],
[258,270,244,246,253,263,254,285,0,256,256,269,255],
[243,258,245,242,249,262,252,246,245,0,256,268,259],
[254,265,251,251,232,261,255,276,245,245,0,255,273],
[248,255,240,236,237,239,250,249,232,233,246,0,250],
[229,239,245,230,231,220,259,251,246,242,228,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 31, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,248,273,235,229,232,263,221,266,247,238,252],
[261,0,277,262,262,264,252,265,257,290,257,247,276],
[253,224,0,241,235,249,214,252,240,245,237,260,258],
[228,239,260,0,231,243,227,247,231,276,228,246,230],
[266,239,266,270,0,258,264,259,229,245,248,248,262],
[272,237,252,258,243,0,237,262,230,258,248,232,265],
[269,249,287,274,237,264,0,299,269,293,239,252,269],
[238,236,249,254,242,239,202,0,219,252,241,245,234],
[280,244,261,270,272,271,232,282,0,288,255,272,273],
[235,211,256,225,256,243,208,249,213,0,229,230,253],
[254,244,264,273,253,253,262,260,246,272,0,250,262],
[263,254,241,255,253,269,249,256,229,271,251,0,245],
[249,225,243,271,239,236,232,267,228,248,239,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 32, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,239,212,226,241,240,270,257,268,194,214,205],
[281,0,226,251,304,261,288,276,266,275,255,234,250],
[262,275,0,263,290,261,270,274,270,305,217,209,230],
[289,250,238,0,281,284,299,297,266,301,237,267,224],
[275,197,211,220,0,237,242,232,197,235,198,203,182],
[260,240,240,217,264,0,261,266,238,282,216,243,201],
[261,213,231,202,259,240,0,245,201,284,200,243,189],
[231,225,227,204,269,235,256,0,240,269,191,162,184],
[244,235,231,235,304,263,300,261,0,302,249,232,224],
[233,226,196,200,266,219,217,232,199,0,204,180,205],
[307,246,284,264,303,285,301,310,252,297,0,222,258],
[287,267,292,234,298,258,258,339,269,321,279,0,251],
[296,251,271,277,319,300,312,317,277,296,243,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 33, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,197,249,202,198,239,167,199,242,225,278,228],
[279,0,252,292,276,250,316,235,238,309,277,258,275],
[304,249,0,227,248,298,310,275,262,279,253,313,288],
[252,209,274,0,228,256,272,245,244,291,280,283,286],
[299,225,253,273,0,241,240,228,274,254,237,266,287],
[303,251,203,245,260,0,316,234,256,256,228,337,278],
[262,185,191,229,261,185,0,214,192,268,188,264,244],
[334,266,226,256,273,267,287,0,275,262,246,311,289],
[302,263,239,257,227,245,309,226,0,274,276,284,282],
[259,192,222,210,247,245,233,239,227,0,215,256,242],
[276,224,248,221,264,273,313,255,225,286,0,326,270],
[223,243,188,218,235,164,237,190,217,245,175,0,225],
[273,226,213,215,214,223,257,212,219,259,231,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 34, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,234,257,264,231,236,245,222,278,244,248,236],
[223,0,218,253,237,219,228,233,209,234,234,230,187],
[267,283,0,260,287,250,276,224,243,270,240,257,262],
[244,248,241,0,313,218,227,242,245,289,246,231,208],
[237,264,214,188,0,219,229,227,205,219,229,223,180],
[270,282,251,283,282,0,246,251,244,309,321,260,259],
[265,273,225,274,272,255,0,220,241,260,229,242,231],
[256,268,277,259,274,250,281,0,235,285,244,259,249],
[279,292,258,256,296,257,260,266,0,280,264,297,234],
[223,267,231,212,282,192,241,216,221,0,211,216,198],
[257,267,261,255,272,180,272,257,237,290,0,260,248],
[253,271,244,270,278,241,259,242,204,285,241,0,218],
[265,314,239,293,321,242,270,252,267,303,253,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 35, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,257,247,254,257,258,239,253,238,251,230,264],
[264,0,283,267,259,258,256,253,274,265,247,257,275],
[244,218,0,245,259,241,253,239,250,256,238,235,253],
[254,234,256,0,259,261,270,239,249,261,251,241,261],
[247,242,242,242,0,245,238,234,238,237,224,235,256],
[244,243,260,240,256,0,226,231,246,249,241,235,264],
[243,245,248,231,263,275,0,230,255,247,239,240,266],
[262,248,262,262,267,270,271,0,267,265,252,261,269],
[248,227,251,252,263,255,246,234,0,231,226,237,242],
[263,236,245,240,264,252,254,236,270,0,249,238,262],
[250,254,263,250,277,260,262,249,275,252,0,244,275],
[271,244,266,260,266,266,261,240,264,263,257,0,274],
[237,226,248,240,245,237,235,232,259,239,226,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 36, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,243,247,228,276,269,261,285,218,278,238,275],
[272,0,255,247,233,283,290,248,291,266,297,247,265],
[258,246,0,232,233,269,249,242,273,214,269,226,257],
[254,254,269,0,229,292,274,265,276,251,307,262,278],
[273,268,268,272,0,254,278,265,281,245,282,249,272],
[225,218,232,209,247,0,249,227,245,204,242,222,233],
[232,211,252,227,223,252,0,245,276,225,266,234,239],
[240,253,259,236,236,274,256,0,270,239,273,254,261],
[216,210,228,225,220,256,225,231,0,217,261,232,230],
[283,235,287,250,256,297,276,262,284,0,281,262,257],
[223,204,232,194,219,259,235,228,240,220,0,220,223],
[263,254,275,239,252,279,267,247,269,239,281,0,268],
[226,236,244,223,229,268,262,240,271,244,278,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 37, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,312,223,299,205,273,264,296,240,343,311,272],
[220,0,226,201,178,210,166,218,246,201,323,183,161],
[189,275,0,186,207,216,211,261,255,240,288,258,160],
[278,300,315,0,350,255,247,223,332,326,371,257,284],
[202,323,294,151,0,253,258,268,221,228,363,233,258],
[296,291,285,246,248,0,192,269,248,229,351,327,270],
[228,335,290,254,243,309,0,259,239,212,350,241,286],
[237,283,240,278,233,232,242,0,323,283,301,178,260],
[205,255,246,169,280,253,262,178,0,198,292,233,216],
[261,300,261,175,273,272,289,218,303,0,240,267,257],
[158,178,213,130,138,150,151,200,209,261,0,161,135],
[190,318,243,244,268,174,260,323,268,234,340,0,315],
[229,340,341,217,243,231,215,241,285,244,366,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 38, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,252,270,265,249,269,261,260,260,267,258,249],
[236,0,225,259,232,240,244,230,242,233,235,233,216],
[249,276,0,244,246,252,230,231,248,264,275,253,240],
[231,242,257,0,260,241,230,227,241,241,250,240,225],
[236,269,255,241,0,249,228,246,251,244,260,245,216],
[252,261,249,260,252,0,249,250,282,255,287,249,240],
[232,257,271,271,273,252,0,256,273,263,267,251,251],
[240,271,270,274,255,251,245,0,259,265,258,243,244],
[241,259,253,260,250,219,228,242,0,240,251,251,231],
[241,268,237,260,257,246,238,236,261,0,272,254,239],
[234,266,226,251,241,214,234,243,250,229,0,235,241],
[243,268,248,261,256,252,250,258,250,247,266,0,257],
[252,285,261,276,285,261,250,257,270,262,260,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 39, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,279,246,260,252,241,263,231,228,272,259,246],
[251,0,283,237,224,257,308,260,258,253,271,285,240],
[222,218,0,217,229,247,228,239,219,220,245,244,230],
[255,264,284,0,271,257,287,286,237,268,280,257,244],
[241,277,272,230,0,262,278,249,266,261,283,263,254],
[249,244,254,244,239,0,254,274,226,222,267,251,251],
[260,193,273,214,223,247,0,229,228,203,252,250,224],
[238,241,262,215,252,227,272,0,222,233,246,274,212],
[270,243,282,264,235,275,273,279,0,254,266,261,237],
[273,248,281,233,240,279,298,268,247,0,273,251,255],
[229,230,256,221,218,234,249,255,235,228,0,242,217],
[242,216,257,244,238,250,251,227,240,250,259,0,218],
[255,261,271,257,247,250,277,289,264,246,284,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 40, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,242,259,262,240,237,266,228,246,236,245,229],
[258,0,255,268,273,243,253,274,245,262,259,268,249],
[259,246,0,247,269,249,241,270,238,245,242,245,249],
[242,233,254,0,250,227,239,264,222,232,247,236,235],
[239,228,232,251,0,237,230,255,234,244,245,248,238],
[261,258,252,274,264,0,243,266,245,252,254,258,259],
[264,248,260,262,271,258,0,274,251,254,258,257,246],
[235,227,231,237,246,235,227,0,220,233,227,229,226],
[273,256,263,279,267,256,250,281,0,270,262,260,259],
[255,239,256,269,257,249,247,268,231,0,265,266,245],
[265,242,259,254,256,247,243,274,239,236,0,254,254],
[256,233,256,265,253,243,244,272,241,235,247,0,252],
[272,252,252,266,263,242,255,275,242,256,247,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 41, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,249,249,234,235,245,244,243,234,255,242,261],
[251,0,248,242,254,228,255,248,245,248,245,245,260],
[252,253,0,230,238,245,253,253,237,242,236,256,256],
[252,259,271,0,262,252,261,263,257,240,254,253,254],
[267,247,263,239,0,246,266,247,234,246,260,246,257],
[266,273,256,249,255,0,257,264,248,244,256,244,261],
[256,246,248,240,235,244,0,237,233,236,245,245,235],
[257,253,248,238,254,237,264,0,228,247,240,239,251],
[258,256,264,244,267,253,268,273,0,256,256,263,278],
[267,253,259,261,255,257,265,254,245,0,259,255,268],
[246,256,265,247,241,245,256,261,245,242,0,251,253],
[259,256,245,248,255,257,256,262,238,246,250,0,250],
[240,241,245,247,244,240,266,250,223,233,248,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 42, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,208,198,239,199,166,225,228,267,261,173,280],
[273,0,210,242,178,165,216,177,233,191,243,154,223],
[293,291,0,329,305,254,216,256,269,230,311,233,277],
[303,259,172,0,189,201,248,195,235,257,291,226,246],
[262,323,196,312,0,275,187,250,257,240,321,240,225],
[302,336,247,300,226,0,278,236,254,295,303,233,316],
[335,285,285,253,314,223,0,243,255,308,285,275,282],
[276,324,245,306,251,265,258,0,265,289,328,292,307],
[273,268,232,266,244,247,246,236,0,227,286,223,238],
[234,310,271,244,261,206,193,212,274,0,275,205,269],
[240,258,190,210,180,198,216,173,215,226,0,206,227],
[328,347,268,275,261,268,226,209,278,296,295,0,282],
[221,278,224,255,276,185,219,194,263,232,274,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 43, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,272,226,292,253,257,252,229,265,252,279,254],
[206,0,275,231,279,252,192,231,214,250,211,250,194],
[229,226,0,224,281,239,205,252,234,250,234,258,226],
[275,270,277,0,318,284,227,250,255,298,269,300,271],
[209,222,220,183,0,249,186,211,217,241,206,208,190],
[248,249,262,217,252,0,225,236,230,237,235,245,206],
[244,309,296,274,315,276,0,266,282,272,274,284,244],
[249,270,249,251,290,265,235,0,210,243,257,276,260],
[272,287,267,246,284,271,219,291,0,277,251,273,237],
[236,251,251,203,260,264,229,258,224,0,259,249,199],
[249,290,267,232,295,266,227,244,250,242,0,270,255],
[222,251,243,201,293,256,217,225,228,252,231,0,206],
[247,307,275,230,311,295,257,241,264,302,246,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 44, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,252,251,237,254,263,230,241,239,265,244,255],
[258,0,239,259,244,237,246,236,237,240,254,256,247],
[249,262,0,258,260,247,279,251,234,241,258,257,257],
[250,242,243,0,242,247,248,250,235,229,247,239,250],
[264,257,241,259,0,269,266,263,239,254,266,250,246],
[247,264,254,254,232,0,265,262,227,225,258,252,260],
[238,255,222,253,235,236,0,238,226,220,235,239,239],
[271,265,250,251,238,239,263,0,242,238,249,253,257],
[260,264,267,266,262,274,275,259,0,244,274,263,275],
[262,261,260,272,247,276,281,263,257,0,277,249,256],
[236,247,243,254,235,243,266,252,227,224,0,245,227],
[257,245,244,262,251,249,262,248,238,252,256,0,256],
[246,254,244,251,255,241,262,244,226,245,274,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 45, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,254,270,278,261,219,284,251,258,252,241,228],
[244,0,232,234,248,263,250,299,250,222,211,220,233],
[247,269,0,255,252,255,212,269,234,258,268,237,247],
[231,267,246,0,248,261,214,284,230,224,224,234,242],
[223,253,249,253,0,244,234,278,231,245,233,219,227],
[240,238,246,240,257,0,238,296,243,240,231,205,225],
[282,251,289,287,267,263,0,275,252,263,265,246,237],
[217,202,232,217,223,205,226,0,215,200,207,199,207],
[250,251,267,271,270,258,249,286,0,251,248,262,252],
[243,279,243,277,256,261,238,301,250,0,228,224,233],
[249,290,233,277,268,270,236,294,253,273,0,229,243],
[260,281,264,267,282,296,255,302,239,277,272,0,228],
[273,268,254,259,274,276,264,294,249,268,258,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 46, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,225,227,248,220,245,255,259,244,236,242,243],
[251,0,238,219,233,216,237,258,229,241,220,241,241],
[276,263,0,232,258,263,271,274,268,273,267,265,276],
[274,282,269,0,261,250,280,272,273,273,251,274,258],
[253,268,243,240,0,220,259,257,247,254,252,252,253],
[281,285,238,251,281,0,277,286,272,277,248,279,271],
[256,264,230,221,242,224,0,264,249,247,229,235,239],
[246,243,227,229,244,215,237,0,245,247,236,242,239],
[242,272,233,228,254,229,252,256,0,244,238,243,250],
[257,260,228,228,247,224,254,254,257,0,248,254,249],
[265,281,234,250,249,253,272,265,263,253,0,257,266],
[259,260,236,227,249,222,266,259,258,247,244,0,254],
[258,260,225,243,248,230,262,262,251,252,235,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 47, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,244,251,261,224,250,242,230,261,239,257,231],
[279,0,280,267,270,253,269,249,273,289,238,293,260],
[257,221,0,243,243,232,255,231,251,246,231,265,238],
[250,234,258,0,264,236,251,219,260,258,244,273,246],
[240,231,258,237,0,230,249,232,250,258,239,253,238],
[277,248,269,265,271,0,277,259,271,268,257,278,272],
[251,232,246,250,252,224,0,245,244,255,241,270,253],
[259,252,270,282,269,242,256,0,267,257,247,282,261],
[271,228,250,241,251,230,257,234,0,262,229,282,253],
[240,212,255,243,243,233,246,244,239,0,241,266,253],
[262,263,270,257,262,244,260,254,272,260,0,288,276],
[244,208,236,228,248,223,231,219,219,235,213,0,247],
[270,241,263,255,263,229,248,240,248,248,225,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 48, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,267,241,291,254,259,259,253,282,248,253,237],
[245,0,240,234,278,238,245,242,242,241,240,245,253],
[234,261,0,255,277,264,237,259,243,242,241,247,247],
[260,267,246,0,291,289,263,262,278,281,272,278,260],
[210,223,224,210,0,232,210,215,213,237,225,228,212],
[247,263,237,212,269,0,247,268,238,230,259,250,242],
[242,256,264,238,291,254,0,247,238,253,259,252,265],
[242,259,242,239,286,233,254,0,220,246,243,249,246],
[248,259,258,223,288,263,263,281,0,266,281,274,266],
[219,260,259,220,264,271,248,255,235,0,256,254,229],
[253,261,260,229,276,242,242,258,220,245,0,249,245],
[248,256,254,223,273,251,249,252,227,247,252,0,232],
[264,248,254,241,289,259,236,255,235,272,256,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 49, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,254,272,276,252,272,264,291,251,236,260,265],
[230,0,263,242,258,262,235,264,285,239,237,241,239],
[247,238,0,229,258,237,266,243,271,254,281,246,268],
[229,259,272,0,280,287,276,271,288,277,284,250,257],
[225,243,243,221,0,252,249,239,259,223,226,240,261],
[249,239,264,214,249,0,244,260,273,237,222,231,217],
[229,266,235,225,252,257,0,217,304,258,266,244,253],
[237,237,258,230,262,241,284,0,288,252,226,253,260],
[210,216,230,213,242,228,197,213,0,227,233,223,230],
[250,262,247,224,278,264,243,249,274,0,238,246,250],
[265,264,220,217,275,279,235,275,268,263,0,237,256],
[241,260,255,251,261,270,257,248,278,255,264,0,266],
[236,262,233,244,240,284,248,241,271,251,245,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 50, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,242,261,259,247,274,271,246,250,268,249,250],
[279,0,281,258,249,259,265,255,260,280,245,268,259],
[259,220,0,259,280,234,251,262,250,283,251,258,244],
[240,243,242,0,252,239,247,238,244,264,246,244,249],
[242,252,221,249,0,237,249,248,231,244,234,233,257],
[254,242,267,262,264,0,263,260,259,268,254,278,263],
[227,236,250,254,252,238,0,224,216,270,258,246,247],
[230,246,239,263,253,241,277,0,247,260,248,250,269],
[255,241,251,257,270,242,285,254,0,287,255,260,257],
[251,221,218,237,257,233,231,241,214,0,233,230,221],
[233,256,250,255,267,247,243,253,246,268,0,256,266],
[252,233,243,257,268,223,255,251,241,271,245,0,276],
[251,242,257,252,244,238,254,232,244,280,235,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 51, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,224,261,242,251,251,256,263,236,262,275,238],
[251,0,231,262,243,243,252,267,245,243,238,265,245],
[277,270,0,256,264,273,258,280,272,250,261,274,254],
[240,239,245,0,248,248,232,261,249,226,250,242,231],
[259,258,237,253,0,258,245,267,267,246,264,260,250],
[250,258,228,253,243,0,241,272,230,241,267,265,253],
[250,249,243,269,256,260,0,249,244,230,246,260,243],
[245,234,221,240,234,229,252,0,242,211,233,242,226],
[238,256,229,252,234,271,257,259,0,243,267,254,240],
[265,258,251,275,255,260,271,290,258,0,277,280,245],
[239,263,240,251,237,234,255,268,234,224,0,238,231],
[226,236,227,259,241,236,241,259,247,221,263,0,235],
[263,256,247,270,251,248,258,275,261,256,270,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 52, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,241,231,255,272,245,254,236,234,241,238,241],
[247,0,274,275,274,260,255,271,266,251,239,230,269],
[260,227,0,234,258,248,235,244,245,229,236,235,251],
[270,226,267,0,241,264,243,251,250,203,222,218,235],
[246,227,243,260,0,266,258,248,260,235,247,246,249],
[229,241,253,237,235,0,252,249,214,234,235,217,268],
[256,246,266,258,243,249,0,256,267,235,248,262,228],
[247,230,257,250,253,252,245,0,225,230,228,233,258],
[265,235,256,251,241,287,234,276,0,273,247,231,239],
[267,250,272,298,266,267,266,271,228,0,263,250,261],
[260,262,265,279,254,266,253,273,254,238,0,262,246],
[263,271,266,283,255,284,239,268,270,251,239,0,247],
[260,232,250,266,252,233,273,243,262,240,255,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 53, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,267,276,256,272,261,265,286,252,267,267,251],
[259,0,248,282,283,263,255,256,269,272,285,261,280],
[234,253,0,292,257,254,258,269,275,259,277,257,240],
[225,219,209,0,246,235,258,227,243,230,223,236,229],
[245,218,244,255,0,245,261,271,218,245,248,235,221],
[229,238,247,266,256,0,251,257,264,246,272,253,251],
[240,246,243,243,240,250,0,222,259,246,272,255,220],
[236,245,232,274,230,244,279,0,259,263,239,254,252],
[215,232,226,258,283,237,242,242,0,255,263,235,215],
[249,229,242,271,256,255,255,238,246,0,249,240,220],
[234,216,224,278,253,229,229,262,238,252,0,241,214],
[234,240,244,265,266,248,246,247,266,261,260,0,237],
[250,221,261,272,280,250,281,249,286,281,287,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 54, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,222,237,211,206,243,246,202,211,227,247,219],
[268,0,259,234,239,215,249,245,226,236,245,261,215],
[279,242,0,209,231,222,228,225,190,209,232,249,222],
[264,267,292,0,238,240,226,265,239,239,249,281,230],
[290,262,270,263,0,235,273,270,220,248,238,296,230],
[295,286,279,261,266,0,262,279,255,254,264,285,247],
[258,252,273,275,228,239,0,271,242,259,239,281,229],
[255,256,276,236,231,222,230,0,194,207,241,247,210],
[299,275,311,262,281,246,259,307,0,225,273,289,252],
[290,265,292,262,253,247,242,294,276,0,272,303,244],
[274,256,269,252,263,237,262,260,228,229,0,256,233],
[254,240,252,220,205,216,220,254,212,198,245,0,202],
[282,286,279,271,271,254,272,291,249,257,268,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 55, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,237,235,271,254,271,269,249,248,266,236,236],
[259,0,244,235,266,276,287,286,272,263,260,264,260],
[264,257,0,245,279,266,259,261,248,254,269,247,255],
[266,266,256,0,269,273,280,271,271,263,282,282,228],
[230,235,222,232,0,261,263,259,230,231,275,242,235],
[247,225,235,228,240,0,260,253,263,246,252,237,252],
[230,214,242,221,238,241,0,227,266,239,252,248,243],
[232,215,240,230,242,248,274,0,252,236,251,246,227],
[252,229,253,230,271,238,235,249,0,247,243,245,247],
[253,238,247,238,270,255,262,265,254,0,276,260,248],
[235,241,232,219,226,249,249,250,258,225,0,219,229],
[265,237,254,219,259,264,253,255,256,241,282,0,227],
[265,241,246,273,266,249,258,274,254,253,272,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 56, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,279,296,245,286,303,273,271,287,267,307,267],
[218,0,257,233,257,248,237,256,258,243,242,280,248],
[222,244,0,258,227,230,243,241,237,243,245,263,229],
[205,268,243,0,232,225,261,234,229,246,239,259,240],
[256,244,274,269,0,259,257,246,245,248,242,269,244],
[215,253,271,276,242,0,243,233,251,242,259,263,246],
[198,264,258,240,244,258,0,242,244,245,253,265,251],
[228,245,260,267,255,268,259,0,242,249,246,267,236],
[230,243,264,272,256,250,257,259,0,269,233,291,240],
[214,258,258,255,253,259,256,252,232,0,250,279,220],
[234,259,256,262,259,242,248,255,268,251,0,267,246],
[194,221,238,242,232,238,236,234,210,222,234,0,211],
[234,253,272,261,257,255,250,265,261,281,255,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 57, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,219,223,247,219,212,226,221,267,234,218,242],
[243,0,200,216,208,226,216,238,244,225,226,223,247],
[282,301,0,256,256,254,273,256,255,276,271,252,249],
[278,285,245,0,280,273,255,296,273,293,266,262,275],
[254,293,245,221,0,253,238,248,240,255,267,258,260],
[282,275,247,228,248,0,255,271,229,254,270,270,275],
[289,285,228,246,263,246,0,241,215,282,259,212,250],
[275,263,245,205,253,230,260,0,266,274,243,237,251],
[280,257,246,228,261,272,286,235,0,257,280,286,263],
[234,276,225,208,246,247,219,227,244,0,234,261,247],
[267,275,230,235,234,231,242,258,221,267,0,257,275],
[283,278,249,239,243,231,289,264,215,240,244,0,236],
[259,254,252,226,241,226,251,250,238,254,226,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 58, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,298,363,365,234,191,288,303,269,379,237,306],
[230,0,301,212,392,344,203,149,307,282,248,219,415],
[203,200,0,267,322,268,217,139,286,278,313,253,269],
[138,289,234,0,316,279,193,218,284,314,294,237,369],
[136,109,179,185,0,113,139,98,224,215,238,193,236],
[267,157,233,222,388,0,225,243,288,331,371,309,361],
[310,298,284,308,362,276,0,295,253,280,333,248,377],
[213,352,362,283,403,258,206,0,381,301,303,313,381],
[198,194,215,217,277,213,248,120,0,340,286,246,254],
[232,219,223,187,286,170,221,200,161,0,328,270,297],
[122,253,188,207,263,130,168,198,215,173,0,202,274],
[264,282,248,264,308,192,253,188,255,231,299,0,364],
[195,86,232,132,265,140,124,120,247,204,227,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 59, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,241,261,257,249,252,249,245,260,254,254,255],
[247,0,231,249,256,239,227,240,233,240,251,249,257],
[260,270,0,259,296,247,256,258,262,249,256,272,281],
[240,252,242,0,272,251,247,257,258,248,254,273,261],
[244,245,205,229,0,225,230,219,214,224,232,231,248],
[252,262,254,250,276,0,234,264,260,255,240,269,253],
[249,274,245,254,271,267,0,251,246,254,271,266,270],
[252,261,243,244,282,237,250,0,241,262,248,261,264],
[256,268,239,243,287,241,255,260,0,261,259,258,264],
[241,261,252,253,277,246,247,239,240,0,262,283,260],
[247,250,245,247,269,261,230,253,242,239,0,256,259],
[247,252,229,228,270,232,235,240,243,218,245,0,264],
[246,244,220,240,253,248,231,237,237,241,242,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 60, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,240,248,271,275,317,285,239,262,235,267,278],
[243,0,248,267,254,292,307,268,237,248,250,281,238],
[261,253,0,260,281,258,305,278,259,239,247,267,256],
[253,234,241,0,278,232,313,288,240,259,237,260,244],
[230,247,220,223,0,260,274,267,221,230,236,263,224],
[226,209,243,269,241,0,293,274,221,250,230,245,268],
[184,194,196,188,227,208,0,232,181,213,232,224,226],
[216,233,223,213,234,227,269,0,206,208,212,231,220],
[262,264,242,261,280,280,320,295,0,286,265,291,271],
[239,253,262,242,271,251,288,293,215,0,249,269,248],
[266,251,254,264,265,271,269,289,236,252,0,284,262],
[234,220,234,241,238,256,277,270,210,232,217,0,247],
[223,263,245,257,277,233,275,281,230,253,239,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 61, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,196,225,232,263,249,233,247,228,247,234,235],
[284,0,197,221,252,249,237,269,269,296,267,246,271],
[305,304,0,249,290,256,296,307,285,305,302,289,271],
[276,280,252,0,271,265,279,271,274,272,256,271,243],
[269,249,211,230,0,236,238,220,249,223,234,263,248],
[238,252,245,236,265,0,263,252,249,271,280,263,258],
[252,264,205,222,263,238,0,240,250,249,274,245,272],
[268,232,194,230,281,249,261,0,266,266,296,275,255],
[254,232,216,227,252,252,251,235,0,265,252,251,268],
[273,205,196,229,278,230,252,235,236,0,233,245,246],
[254,234,199,245,267,221,227,205,249,268,0,249,250],
[267,255,212,230,238,238,256,226,250,256,252,0,244],
[266,230,230,258,253,243,229,246,233,255,251,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 62, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,266,241,229,254,246,265,251,257,253,253,256],
[244,0,244,248,256,252,249,263,273,255,251,283,263],
[235,257,0,267,245,279,244,276,274,257,246,274,257],
[260,253,234,0,259,259,229,279,257,258,247,287,259],
[272,245,256,242,0,271,227,268,254,273,257,264,251],
[247,249,222,242,230,0,232,270,249,236,235,269,263],
[255,252,257,272,274,269,0,280,282,267,240,269,257],
[236,238,225,222,233,231,221,0,249,248,212,265,245],
[250,228,227,244,247,252,219,252,0,245,235,269,250],
[244,246,244,243,228,265,234,253,256,0,239,265,251],
[248,250,255,254,244,266,261,289,266,262,0,295,256],
[248,218,227,214,237,232,232,236,232,236,206,0,225],
[245,238,244,242,250,238,244,256,251,250,245,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 63, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,223,231,229,239,251,258,249,276,256,244,237],
[248,0,226,246,243,246,232,256,257,281,268,259,244],
[278,275,0,243,257,272,254,275,271,276,256,264,254],
[270,255,258,0,272,277,249,274,276,292,261,265,249],
[272,258,244,229,0,233,257,262,257,271,250,247,233],
[262,255,229,224,268,0,241,262,261,274,254,251,235],
[250,269,247,252,244,260,0,269,247,274,237,266,257],
[243,245,226,227,239,239,232,0,272,268,240,250,237],
[252,244,230,225,244,240,254,229,0,256,242,258,238],
[225,220,225,209,230,227,227,233,245,0,222,230,240],
[245,233,245,240,251,247,264,261,259,279,0,265,264],
[257,242,237,236,254,250,235,251,243,271,236,0,243],
[264,257,247,252,268,266,244,264,263,261,237,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 64, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,273,282,261,252,251,244,243,303,285,247,270],
[226,0,223,246,226,236,232,243,222,231,245,216,240],
[228,278,0,260,231,245,244,269,233,251,240,237,245],
[219,255,241,0,242,218,244,231,231,245,249,215,247],
[240,275,270,259,0,257,253,278,232,265,293,255,246],
[249,265,256,283,244,0,268,278,255,293,298,231,280],
[250,269,257,257,248,233,0,267,234,266,283,209,251],
[257,258,232,270,223,223,234,0,240,257,260,252,256],
[258,279,268,270,269,246,267,261,0,305,290,267,272],
[198,270,250,256,236,208,235,244,196,0,247,226,241],
[216,256,261,252,208,203,218,241,211,254,0,210,278],
[254,285,264,286,246,270,292,249,234,275,291,0,286],
[231,261,256,254,255,221,250,245,229,260,223,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 65, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,255,281,259,265,269,255,250,279,267,263,264],
[222,0,231,241,221,230,239,253,240,241,231,224,248],
[246,270,0,254,260,252,255,250,226,240,251,242,243],
[220,260,247,0,248,229,237,247,239,251,232,221,233],
[242,280,241,253,0,261,229,247,233,265,243,248,255],
[236,271,249,272,240,0,249,247,260,240,256,250,261],
[232,262,246,264,272,252,0,252,232,268,230,258,249],
[246,248,251,254,254,254,249,0,220,249,254,238,253],
[251,261,275,262,268,241,269,281,0,256,265,252,239],
[222,260,261,250,236,261,233,252,245,0,248,242,238],
[234,270,250,269,258,245,271,247,236,253,0,250,261],
[238,277,259,280,253,251,243,263,249,259,251,0,248],
[237,253,258,268,246,240,252,248,262,263,240,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 66, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,266,276,268,263,281,275,244,236,307,273,270],
[220,0,254,241,221,245,237,244,238,227,238,213,252],
[235,247,0,252,254,250,264,263,236,230,266,253,249],
[225,260,249,0,239,270,225,268,254,264,256,260,264],
[233,280,247,262,0,262,229,271,232,230,264,248,261],
[238,256,251,231,239,0,227,255,270,224,243,225,268],
[220,264,237,276,272,274,0,228,240,251,271,255,268],
[226,257,238,233,230,246,273,0,241,258,266,238,247],
[257,263,265,247,269,231,261,260,0,252,270,247,274],
[265,274,271,237,271,277,250,243,249,0,283,260,287],
[194,263,235,245,237,258,230,235,231,218,0,226,258],
[228,288,248,241,253,276,246,263,254,241,275,0,260],
[231,249,252,237,240,233,233,254,227,214,243,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 67, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,251,249,262,250,264,254,251,257,248,242,250],
[247,0,248,238,245,257,248,253,259,255,255,254,242],
[250,253,0,262,256,274,254,259,257,265,256,266,254],
[252,263,239,0,247,242,250,254,251,259,249,253,250],
[239,256,245,254,0,254,258,252,241,254,248,241,248],
[251,244,227,259,247,0,251,253,252,265,248,244,245],
[237,253,247,251,243,250,0,255,249,256,240,247,240],
[247,248,242,247,249,248,246,0,241,267,247,241,251],
[250,242,244,250,260,249,252,260,0,258,246,236,250],
[244,246,236,242,247,236,245,234,243,0,259,251,247],
[253,246,245,252,253,253,261,254,255,242,0,247,242],
[259,247,235,248,260,257,254,260,265,250,254,0,258],
[251,259,247,251,253,256,261,250,251,254,259,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 68, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,245,257,260,242,242,262,247,266,252,247,231],
[236,0,221,243,234,220,219,239,237,233,231,234,232],
[256,280,0,238,248,246,232,245,242,254,238,238,242],
[244,258,263,0,254,242,238,254,258,258,249,241,232],
[241,267,253,247,0,258,251,241,247,254,251,265,253],
[259,281,255,259,243,0,241,260,248,279,266,272,254],
[259,282,269,263,250,260,0,282,260,280,275,263,263],
[239,262,256,247,260,241,219,0,236,249,242,240,232],
[254,264,259,243,254,253,241,265,0,254,239,245,228],
[235,268,247,243,247,222,221,252,247,0,236,249,232],
[249,270,263,252,250,235,226,259,262,265,0,262,247],
[254,267,263,260,236,229,238,261,256,252,239,0,240],
[270,269,259,269,248,247,238,269,273,269,254,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 69, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,237,251,258,233,232,247,218,224,238,225,215],
[255,0,228,230,239,213,229,251,212,227,208,238,224],
[264,273,0,287,269,258,277,270,246,287,261,254,284],
[250,271,214,0,250,226,238,238,227,230,208,213,238],
[243,262,232,251,0,222,240,248,220,256,225,254,241],
[268,288,243,275,279,0,237,269,257,270,240,226,264],
[269,272,224,263,261,264,0,231,241,248,226,268,247],
[254,250,231,263,253,232,270,0,231,263,220,252,254],
[283,289,255,274,281,244,260,270,0,259,257,226,250],
[277,274,214,271,245,231,253,238,242,0,234,216,236],
[263,293,240,293,276,261,275,281,244,267,0,230,283],
[276,263,247,288,247,275,233,249,275,285,271,0,273],
[286,277,217,263,260,237,254,247,251,265,218,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 70, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,243,249,253,230,236,261,234,247,257,260,261],
[244,0,249,263,250,239,248,263,248,266,262,257,247],
[258,252,0,263,263,240,245,254,267,260,273,273,257],
[252,238,238,0,241,231,249,238,250,245,258,254,258],
[248,251,238,260,0,255,240,252,240,259,262,254,255],
[271,262,261,270,246,0,261,269,269,278,285,276,283],
[265,253,256,252,261,240,0,253,253,270,269,273,241],
[240,238,247,263,249,232,248,0,255,276,271,266,256],
[267,253,234,251,261,232,248,246,0,257,263,257,257],
[254,235,241,256,242,223,231,225,244,0,260,278,254],
[244,239,228,243,239,216,232,230,238,241,0,257,229],
[241,244,228,247,247,225,228,235,244,223,244,0,237],
[240,254,244,243,246,218,260,245,244,247,272,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 71, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,305,291,210,225,284,268,242,260,243,268,255],
[246,0,279,231,233,206,242,262,219,229,222,245,230],
[196,222,0,229,191,188,239,237,243,200,210,224,195],
[210,270,272,0,211,213,240,248,241,225,255,227,247],
[291,268,310,290,0,247,266,266,270,263,280,272,294],
[276,295,313,288,254,0,311,286,271,250,252,276,287],
[217,259,262,261,235,190,0,234,248,199,224,203,233],
[233,239,264,253,235,215,267,0,243,209,247,265,263],
[259,282,258,260,231,230,253,258,0,215,214,245,272],
[241,272,301,276,238,251,302,292,286,0,273,270,270],
[258,279,291,246,221,249,277,254,287,228,0,243,277],
[233,256,277,274,229,225,298,236,256,231,258,0,254],
[246,271,306,254,207,214,268,238,229,231,224,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 72, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,254,249,264,268,252,262,250,261,258,265,253],
[232,0,238,255,241,268,248,250,236,240,264,245,254],
[247,263,0,250,257,260,262,249,249,238,253,263,237],
[252,246,251,0,248,265,251,268,236,250,267,240,242],
[237,260,244,253,0,272,241,250,246,237,256,254,231],
[233,233,241,236,229,0,235,233,208,210,230,235,217],
[249,253,239,250,260,266,0,256,247,257,256,251,244],
[239,251,252,233,251,268,245,0,243,238,254,260,246],
[251,265,252,265,255,293,254,258,0,245,250,255,249],
[240,261,263,251,264,291,244,263,256,0,263,264,249],
[243,237,248,234,245,271,245,247,251,238,0,253,243],
[236,256,238,261,247,266,250,241,246,237,248,0,234],
[248,247,264,259,270,284,257,255,252,252,258,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 73, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,233,236,266,278,261,252,289,243,334,247,206],
[291,0,287,261,268,315,273,239,260,308,356,244,225],
[268,214,0,270,300,325,271,237,315,275,330,296,254],
[265,240,231,0,232,283,251,249,248,197,295,250,204],
[235,233,201,269,0,303,277,235,269,283,293,279,232],
[223,186,176,218,198,0,215,248,234,221,255,224,170],
[240,228,230,250,224,286,0,235,273,194,281,251,201],
[249,262,264,252,266,253,266,0,292,247,310,250,244],
[212,241,186,253,232,267,228,209,0,196,252,226,191],
[258,193,226,304,218,280,307,254,305,0,305,245,246],
[167,145,171,206,208,246,220,191,249,196,0,178,197],
[254,257,205,251,222,277,250,251,275,256,323,0,208],
[295,276,247,297,269,331,300,257,310,255,304,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 74, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,273,268,275,269,278,259,264,264,245,259,286],
[236,0,262,259,262,256,254,242,249,251,240,265,270],
[228,239,0,238,231,255,236,240,227,242,239,251,272],
[233,242,263,0,250,263,254,244,241,254,249,275,264],
[226,239,270,251,0,251,262,251,259,261,250,259,268],
[232,245,246,238,250,0,247,252,243,247,247,253,274],
[223,247,265,247,239,254,0,217,246,251,246,241,262],
[242,259,261,257,250,249,284,0,257,264,251,270,273],
[237,252,274,260,242,258,255,244,0,263,247,276,277],
[237,250,259,247,240,254,250,237,238,0,235,254,277],
[256,261,262,252,251,254,255,250,254,266,0,273,279],
[242,236,250,226,242,248,260,231,225,247,228,0,253],
[215,231,229,237,233,227,239,228,224,224,222,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 75, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,261,250,252,241,271,270,271,252,273,267,238],
[261,0,266,269,243,261,256,262,269,238,279,265,244],
[240,235,0,268,235,236,265,272,273,257,295,273,250],
[251,232,233,0,210,255,260,239,246,228,285,255,216],
[249,258,266,291,0,267,258,279,278,258,317,273,256],
[260,240,265,246,234,0,254,300,288,279,285,286,265],
[230,245,236,241,243,247,0,276,247,262,295,253,241],
[231,239,229,262,222,201,225,0,273,240,286,242,220],
[230,232,228,255,223,213,254,228,0,237,251,255,213],
[249,263,244,273,243,222,239,261,264,0,275,269,226],
[228,222,206,216,184,216,206,215,250,226,0,230,198],
[234,236,228,246,228,215,248,259,246,232,271,0,230],
[263,257,251,285,245,236,260,281,288,275,303,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 76, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,248,243,249,241,262,242,219,240,235,245,248],
[246,0,249,248,244,234,244,243,228,247,254,260,235],
[253,252,0,246,229,223,256,243,238,232,239,247,230],
[258,253,255,0,255,243,257,257,237,253,239,262,243],
[252,257,272,246,0,250,265,249,242,247,268,262,245],
[260,267,278,258,251,0,261,244,239,263,264,268,248],
[239,257,245,244,236,240,0,243,237,249,244,240,242],
[259,258,258,244,252,257,258,0,251,254,266,255,238],
[282,273,263,264,259,262,264,250,0,258,262,268,260],
[261,254,269,248,254,238,252,247,243,0,247,255,249],
[266,247,262,262,233,237,257,235,239,254,0,246,239],
[256,241,254,239,239,233,261,246,233,246,255,0,245],
[253,266,271,258,256,253,259,263,241,252,262,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 77, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,235,233,228,250,224,222,244,239,208,243,259],
[288,0,275,286,248,274,260,244,279,269,266,274,274],
[266,226,0,248,268,245,245,267,241,252,250,258,259],
[268,215,253,0,239,258,234,220,243,235,220,252,244],
[273,253,233,262,0,269,266,260,277,232,245,260,251],
[251,227,256,243,232,0,223,208,260,201,222,247,205],
[277,241,256,267,235,278,0,260,257,205,229,279,248],
[279,257,234,281,241,293,241,0,283,242,258,266,282],
[257,222,260,258,224,241,244,218,0,229,252,234,239],
[262,232,249,266,269,300,296,259,272,0,254,262,277],
[293,235,251,281,256,279,272,243,249,247,0,266,253],
[258,227,243,249,241,254,222,235,267,239,235,0,232],
[242,227,242,257,250,296,253,219,262,224,248,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 78, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,188,168,249,182,237,246,110,187,191,223,255],
[256,0,153,173,315,206,228,228,148,198,182,220,267],
[313,348,0,284,369,299,301,315,254,297,281,235,363],
[333,328,217,0,297,295,254,266,143,258,241,232,279],
[252,186,132,204,0,254,202,165,111,114,232,142,218],
[319,295,202,206,247,0,286,171,222,231,188,189,250],
[264,273,200,247,299,215,0,183,169,171,268,239,233],
[255,273,186,235,336,330,318,0,176,206,153,181,251],
[391,353,247,358,390,279,332,325,0,261,284,262,359],
[314,303,204,243,387,270,330,295,240,0,289,255,292],
[310,319,220,260,269,313,233,348,217,212,0,176,231],
[278,281,266,269,359,312,262,320,239,246,325,0,256],
[246,234,138,222,283,251,268,250,142,209,270,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 79, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,241,250,239,228,249,247,248,234,246,254,251],
[264,0,260,248,252,232,260,247,256,255,254,258,254],
[260,241,0,238,241,233,254,228,234,215,228,234,232],
[251,253,263,0,259,240,247,241,248,235,233,247,240],
[262,249,260,242,0,232,257,259,245,241,250,253,244],
[273,269,268,261,269,0,268,238,260,253,272,263,262],
[252,241,247,254,244,233,0,232,237,233,242,246,255],
[254,254,273,260,242,263,269,0,242,245,252,258,256],
[253,245,267,253,256,241,264,259,0,254,251,258,255],
[267,246,286,266,260,248,268,256,247,0,262,261,258],
[255,247,273,268,251,229,259,249,250,239,0,250,252],
[247,243,267,254,248,238,255,243,243,240,251,0,239],
[250,247,269,261,257,239,246,245,246,243,249,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 80, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,243,346,205,266,236,345,352,325,313,278,288],
[192,0,241,232,174,253,168,342,347,329,243,240,180],
[258,260,0,215,168,222,223,291,334,303,200,255,264],
[155,269,286,0,206,224,199,296,311,311,168,216,266],
[296,327,333,295,0,186,239,419,365,395,259,444,290],
[235,248,279,277,315,0,172,403,371,291,223,328,297],
[265,333,278,302,262,329,0,370,364,288,237,291,250],
[156,159,210,205,82,98,131,0,175,268,68,187,165],
[149,154,167,190,136,130,137,326,0,239,150,161,246],
[176,172,198,190,106,210,213,233,262,0,122,130,174],
[188,258,301,333,242,278,264,433,351,379,0,371,260],
[223,261,246,285,57,173,210,314,340,371,130,0,254],
[213,321,237,235,211,204,251,336,255,327,241,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 81, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,212,162,192,264,224,206,133,214,277,179,262],
[267,0,198,193,265,216,192,214,261,242,229,263,228],
[289,303,0,242,295,264,269,274,289,252,267,302,255],
[339,308,259,0,321,276,262,266,250,326,318,310,258],
[309,236,206,180,0,263,303,231,165,283,257,282,264],
[237,285,237,225,238,0,203,209,198,281,248,269,232],
[277,309,232,239,198,298,0,227,225,270,252,303,206],
[295,287,227,235,270,292,274,0,208,258,217,296,271],
[368,240,212,251,336,303,276,293,0,291,291,354,302],
[287,259,249,175,218,220,231,243,210,0,231,319,233],
[224,272,234,183,244,253,249,284,210,270,0,241,248],
[322,238,199,191,219,232,198,205,147,182,260,0,229],
[239,273,246,243,237,269,295,230,199,268,253,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 82, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,260,239,256,254,254,255,247,269,255,245,260],
[246,0,249,224,263,243,257,235,242,260,256,237,251],
[241,252,0,256,250,246,253,246,243,261,248,233,242],
[262,277,245,0,266,251,248,256,247,270,257,247,251],
[245,238,251,235,0,240,250,247,239,252,247,228,240],
[247,258,255,250,261,0,260,262,258,268,255,251,248],
[247,244,248,253,251,241,0,265,240,269,253,259,260],
[246,266,255,245,254,239,236,0,246,275,261,242,254],
[254,259,258,254,262,243,261,255,0,275,273,250,263],
[232,241,240,231,249,233,232,226,226,0,243,221,238],
[246,245,253,244,254,246,248,240,228,258,0,230,245],
[256,264,268,254,273,250,242,259,251,280,271,0,262],
[241,250,259,250,261,253,241,247,238,263,256,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 83, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,250,234,243,262,247,237,227,267,252,249,260],
[246,0,239,241,222,253,274,224,224,280,246,253,260],
[251,262,0,241,224,257,250,204,231,260,247,258,245],
[267,260,260,0,258,264,258,243,242,288,257,279,272],
[258,279,277,243,0,272,273,237,226,293,257,272,259],
[239,248,244,237,229,0,257,230,249,271,240,253,244],
[254,227,251,243,228,244,0,241,237,275,238,263,263],
[264,277,297,258,264,271,260,0,241,270,267,262,275],
[274,277,270,259,275,252,264,260,0,272,262,239,257],
[234,221,241,213,208,230,226,231,229,0,232,255,257],
[249,255,254,244,244,261,263,234,239,269,0,280,251],
[252,248,243,222,229,248,238,239,262,246,221,0,237],
[241,241,256,229,242,257,238,226,244,244,250,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 84, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,242,245,232,247,260,247,241,248,217,245,225],
[264,0,250,260,258,243,272,262,257,246,232,264,236],
[259,251,0,257,259,251,270,265,260,262,239,254,254],
[256,241,244,0,240,257,249,252,254,255,253,256,228],
[269,243,242,261,0,243,272,261,257,254,241,246,221],
[254,258,250,244,258,0,268,248,254,258,236,245,236],
[241,229,231,252,229,233,0,248,226,245,225,244,222],
[254,239,236,249,240,253,253,0,228,230,237,224,215],
[260,244,241,247,244,247,275,273,0,272,261,264,235],
[253,255,239,246,247,243,256,271,229,0,223,247,235],
[284,269,262,248,260,265,276,264,240,278,0,262,232],
[256,237,247,245,255,256,257,277,237,254,239,0,243],
[276,265,247,273,280,265,279,286,266,266,269,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 85, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,225,210,242,249,230,248,227,211,231,235,273],
[221,0,223,223,221,245,215,216,249,229,211,233,233],
[276,278,0,237,255,276,241,237,258,249,252,252,276],
[291,278,264,0,245,283,266,268,290,236,241,261,280],
[259,280,246,256,0,252,226,272,260,234,219,275,265],
[252,256,225,218,249,0,238,245,254,254,229,270,277],
[271,286,260,235,275,263,0,278,278,236,245,271,287],
[253,285,264,233,229,256,223,0,258,242,236,250,270],
[274,252,243,211,241,247,223,243,0,204,200,246,270],
[290,272,252,265,267,247,265,259,297,0,258,260,282],
[270,290,249,260,282,272,256,265,301,243,0,265,292],
[266,268,249,240,226,231,230,251,255,241,236,0,259],
[228,268,225,221,236,224,214,231,231,219,209,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 86, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,275,299,263,275,278,290,268,268,252,275,233],
[203,0,238,249,233,251,241,244,259,241,239,247,212],
[226,263,0,236,250,220,258,264,252,241,263,259,224],
[202,252,265,0,254,243,268,242,234,256,252,197,232],
[238,268,251,247,0,261,268,237,239,239,226,250,232],
[226,250,281,258,240,0,243,256,258,251,247,241,229],
[223,260,243,233,233,258,0,261,244,228,235,246,224],
[211,257,237,259,264,245,240,0,229,250,233,254,234],
[233,242,249,267,262,243,257,272,0,261,248,213,234],
[233,260,260,245,262,250,273,251,240,0,278,251,235],
[249,262,238,249,275,254,266,268,253,223,0,247,254],
[226,254,242,304,251,260,255,247,288,250,254,0,234],
[268,289,277,269,269,272,277,267,267,266,247,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 87, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,256,264,265,216,259,259,247,256,232,246,275],
[249,0,241,268,262,240,271,255,264,256,232,238,259],
[245,260,0,261,236,246,253,252,254,244,231,238,239],
[237,233,240,0,244,227,213,244,230,218,222,213,258],
[236,239,265,257,0,248,269,249,251,263,251,247,245],
[285,261,255,274,253,0,278,261,262,245,246,266,273],
[242,230,248,288,232,223,0,255,252,234,234,244,265],
[242,246,249,257,252,240,246,0,231,230,237,232,240],
[254,237,247,271,250,239,249,270,0,248,259,242,256],
[245,245,257,283,238,256,267,271,253,0,248,235,270],
[269,269,270,279,250,255,267,264,242,253,0,247,273],
[255,263,263,288,254,235,257,269,259,266,254,0,248],
[226,242,262,243,256,228,236,261,245,231,228,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 88, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,243,259,249,306,247,266,256,264,266,278,252],
[255,0,212,277,237,273,228,272,249,263,246,243,247],
[258,289,0,263,241,284,266,280,287,270,264,282,261],
[242,224,238,0,243,278,242,265,256,241,232,252,220],
[252,264,260,258,0,269,258,287,283,255,253,254,249],
[195,228,217,223,232,0,212,245,243,209,199,211,235],
[254,273,235,259,243,289,0,307,288,265,245,270,252],
[235,229,221,236,214,256,194,0,262,238,238,228,206],
[245,252,214,245,218,258,213,239,0,236,227,247,229],
[237,238,231,260,246,292,236,263,265,0,241,264,269],
[235,255,237,269,248,302,256,263,274,260,0,275,234],
[223,258,219,249,247,290,231,273,254,237,226,0,213],
[249,254,240,281,252,266,249,295,272,232,267,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 89, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,262,302,277,278,240,250,275,252,246,240,271],
[212,0,253,200,241,264,245,236,235,223,213,234,241],
[239,248,0,254,249,290,247,249,271,269,244,246,274],
[199,301,247,0,239,269,219,262,251,216,239,250,252],
[224,260,252,262,0,267,239,233,272,251,253,219,220],
[223,237,211,232,234,0,227,230,242,205,198,195,212],
[261,256,254,282,262,274,0,239,282,248,240,269,258],
[251,265,252,239,268,271,262,0,284,239,234,237,259],
[226,266,230,250,229,259,219,217,0,227,235,248,241],
[249,278,232,285,250,296,253,262,274,0,234,256,267],
[255,288,257,262,248,303,261,267,266,267,0,240,275],
[261,267,255,251,282,306,232,264,253,245,261,0,268],
[230,260,227,249,281,289,243,242,260,234,226,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 90, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,235,247,274,214,280,243,299,243,252,249,265],
[246,0,237,269,276,260,292,302,260,261,297,321,309],
[266,264,0,267,285,210,271,297,286,252,225,265,239],
[254,232,234,0,251,225,255,268,263,232,225,239,254],
[227,225,216,250,0,229,248,264,250,238,226,239,268],
[287,241,291,276,272,0,328,302,306,282,271,276,274],
[221,209,230,246,253,173,0,253,246,212,220,244,255],
[258,199,204,233,237,199,248,0,250,230,212,270,257],
[202,241,215,238,251,195,255,251,0,233,199,244,229],
[258,240,249,269,263,219,289,271,268,0,261,290,282],
[249,204,276,276,275,230,281,289,302,240,0,250,256],
[252,180,236,262,262,225,257,231,257,211,251,0,255],
[236,192,262,247,233,227,246,244,272,219,245,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 91, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,253,241,247,233,269,234,213,249,236,235,249],
[252,0,254,255,264,236,283,254,236,275,260,245,260],
[248,247,0,253,255,243,260,233,229,257,234,235,238],
[260,246,248,0,269,252,276,247,235,270,262,257,261],
[254,237,246,232,0,225,244,223,241,251,228,217,230],
[268,265,258,249,276,0,257,249,234,275,240,228,250],
[232,218,241,225,257,244,0,224,218,224,229,211,226],
[267,247,268,254,278,252,277,0,249,263,251,255,264],
[288,265,272,266,260,267,283,252,0,280,273,240,286],
[252,226,244,231,250,226,277,238,221,0,229,225,229],
[265,241,267,239,273,261,272,250,228,272,0,248,244],
[266,256,266,244,284,273,290,246,261,276,253,0,290],
[252,241,263,240,271,251,275,237,215,272,257,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 92, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,257,257,256,258,274,248,254,236,255,254,245],
[260,0,218,277,285,285,268,253,265,250,270,261,257],
[244,283,0,254,270,262,265,269,273,263,267,251,241],
[244,224,247,0,254,256,243,243,262,238,268,252,230],
[245,216,231,247,0,265,254,220,259,221,228,215,226],
[243,216,239,245,236,0,230,229,226,225,241,232,232],
[227,233,236,258,247,271,0,229,261,240,235,247,235],
[253,248,232,258,281,272,272,0,271,235,278,244,253],
[247,236,228,239,242,275,240,230,0,257,250,260,230],
[265,251,238,263,280,276,261,266,244,0,264,255,252],
[246,231,234,233,273,260,266,223,251,237,0,240,251],
[247,240,250,249,286,269,254,257,241,246,261,0,250],
[256,244,260,271,275,269,266,248,271,249,250,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 93, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,281,260,239,237,270,235,278,278,234,267,254],
[230,0,249,217,222,244,230,218,228,256,214,249,257],
[220,252,0,263,220,256,247,222,236,251,208,255,243],
[241,284,238,0,249,246,263,220,259,278,220,243,268],
[262,279,281,252,0,261,238,228,264,266,258,262,255],
[264,257,245,255,240,0,257,222,254,268,217,268,237],
[231,271,254,238,263,244,0,256,276,270,255,277,253],
[266,283,279,281,273,279,245,0,255,289,243,260,267],
[223,273,265,242,237,247,225,246,0,263,221,252,245],
[223,245,250,223,235,233,231,212,238,0,229,240,221],
[267,287,293,281,243,284,246,258,280,272,0,265,270],
[234,252,246,258,239,233,224,241,249,261,236,0,236],
[247,244,258,233,246,264,248,234,256,280,231,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 94, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,255,263,242,236,266,243,256,227,249,264,252],
[257,0,252,265,248,238,247,248,254,241,257,253,259],
[246,249,0,272,248,234,270,263,263,249,259,250,253],
[238,236,229,0,240,238,256,253,248,232,252,252,244],
[259,253,253,261,0,244,261,258,258,235,254,254,259],
[265,263,267,263,257,0,280,246,272,241,265,258,254],
[235,254,231,245,240,221,0,247,249,225,254,237,233],
[258,253,238,248,243,255,254,0,256,228,256,234,247],
[245,247,238,253,243,229,252,245,0,239,253,239,241],
[274,260,252,269,266,260,276,273,262,0,263,244,279],
[252,244,242,249,247,236,247,245,248,238,0,245,250],
[237,248,251,249,247,243,264,267,262,257,256,0,256],
[249,242,248,257,242,247,268,254,260,222,251,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 95, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,236,262,254,251,263,239,248,227,253,245,258],
[261,0,233,270,249,266,264,254,260,250,255,254,260],
[265,268,0,261,261,272,280,246,267,265,248,254,262],
[239,231,240,0,243,237,251,224,237,221,225,213,248],
[247,252,240,258,0,254,262,232,248,241,254,264,249],
[250,235,229,264,247,0,263,244,242,243,241,236,252],
[238,237,221,250,239,238,0,235,237,226,243,223,234],
[262,247,255,277,269,257,266,0,249,244,254,240,262],
[253,241,234,264,253,259,264,252,0,219,254,241,251],
[274,251,236,280,260,258,275,257,282,0,253,249,272],
[248,246,253,276,247,260,258,247,247,248,0,267,261],
[256,247,247,288,237,265,278,261,260,252,234,0,255],
[243,241,239,253,252,249,267,239,250,229,240,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 96, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,229,240,244,229,247,232,260,250,230,243,238],
[245,0,215,205,248,228,230,223,248,246,225,247,241],
[272,286,0,247,252,252,263,244,269,269,238,264,255],
[261,296,254,0,269,258,267,231,273,267,235,262,262],
[257,253,249,232,0,231,239,230,259,255,220,254,253],
[272,273,249,243,270,0,262,251,261,261,247,261,265],
[254,271,238,234,262,239,0,239,275,258,235,269,234],
[269,278,257,270,271,250,262,0,277,258,253,273,265],
[241,253,232,228,242,240,226,224,0,246,217,248,245],
[251,255,232,234,246,240,243,243,255,0,231,253,251],
[271,276,263,266,281,254,266,248,284,270,0,271,267],
[258,254,237,239,247,240,232,228,253,248,230,0,257],
[263,260,246,239,248,236,267,236,256,250,234,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 97, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,347,294,207,179,294,179,347,294,473,168,347],
[28,0,196,28,207,207,322,207,375,196,375,196,196],
[154,305,0,154,207,207,322,207,347,294,473,28,168],
[207,473,347,0,207,207,473,179,347,473,473,347,347],
[294,294,294,294,0,347,294,347,168,294,473,168,294],
[322,294,294,294,154,0,294,126,294,294,294,294,294],
[207,179,179,28,207,207,0,179,179,0,179,0,179],
[322,294,294,322,154,375,322,0,168,294,294,168,294],
[154,126,154,154,333,207,322,333,0,294,333,154,126],
[207,305,207,28,207,207,501,207,207,0,333,207,179],
[28,126,28,28,28,207,322,207,168,168,0,28,0],
[333,305,473,154,333,207,501,333,347,294,473,0,473],
[154,305,333,154,207,207,322,207,375,322,501,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 98, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,212,265,248,231,266,258,248,252,236,231,225],
[247,0,253,267,258,218,233,260,239,233,246,246,238],
[289,248,0,276,257,257,247,275,232,250,254,247,234],
[236,234,225,0,232,225,198,259,211,225,237,238,233],
[253,243,244,269,0,253,248,279,251,239,232,258,240],
[270,283,244,276,248,0,247,288,250,242,237,275,237],
[235,268,254,303,253,254,0,272,252,244,240,227,231],
[243,241,226,242,222,213,229,0,206,226,205,236,213],
[253,262,269,290,250,251,249,295,0,263,248,275,277],
[249,268,251,276,262,259,257,275,238,0,262,258,224],
[265,255,247,264,269,264,261,296,253,239,0,248,240],
[270,255,254,263,243,226,274,265,226,243,253,0,261],
[276,263,267,268,261,264,270,288,224,277,261,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 99, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,262,258,268,260,227,246,244,250,246,252,254],
[247,0,273,263,260,244,238,244,232,248,261,240,248],
[239,228,0,242,255,245,227,230,228,254,245,221,230],
[243,238,259,0,261,250,230,236,226,254,239,233,243],
[233,241,246,240,0,230,218,226,212,238,232,230,226],
[241,257,256,251,271,0,244,238,224,250,245,245,241],
[274,263,274,271,283,257,0,245,246,276,251,251,247],
[255,257,271,265,275,263,256,0,253,259,262,240,247],
[257,269,273,275,289,277,255,248,0,273,271,256,271],
[251,253,247,247,263,251,225,242,228,0,236,253,243],
[255,240,256,262,269,256,250,239,230,265,0,248,258],
[249,261,280,268,271,256,250,261,245,248,253,0,258],
[247,253,271,258,275,260,254,254,230,258,243,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 100, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,263,298,289,257,218,275,282,228,228,246,202],
[229,0,274,204,276,240,215,290,243,249,214,260,201],
[238,227,0,218,235,221,194,229,167,195,136,172,211],
[203,297,283,0,239,238,189,216,273,258,185,222,182],
[212,225,266,262,0,168,229,233,210,225,204,172,160],
[244,261,280,263,333,0,282,281,238,236,242,215,194],
[283,286,307,312,272,219,0,285,277,260,229,266,263],
[226,211,272,285,268,220,216,0,219,268,205,203,246],
[219,258,334,228,291,263,224,282,0,188,223,215,198],
[273,252,306,243,276,265,241,233,313,0,271,201,197],
[273,287,365,316,297,259,272,296,278,230,0,262,246],
[255,241,329,279,329,286,235,298,286,300,239,0,258],
[299,300,290,319,341,307,238,255,303,304,255,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 101, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,243,216,246,237,236,228,280,244,208,219,224],
[281,0,242,232,246,279,256,276,253,294,213,237,240],
[258,259,0,225,240,270,250,276,244,249,200,235,235],
[285,269,276,0,261,300,231,275,285,275,257,242,241],
[255,255,261,240,0,289,226,276,256,268,255,275,231],
[264,222,231,201,212,0,191,210,251,238,193,192,243],
[265,245,251,270,275,310,0,262,295,285,260,274,249],
[273,225,225,226,225,291,239,0,268,262,214,220,263],
[221,248,257,216,245,250,206,233,0,238,245,246,238],
[257,207,252,226,233,263,216,239,263,0,221,245,217],
[293,288,301,244,246,308,241,287,256,280,0,265,256],
[282,264,266,259,226,309,227,281,255,256,236,0,244],
[277,261,266,260,270,258,252,238,263,284,245,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 102, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,269,271,253,245,244,256,238,275,249,268,257],
[264,0,281,298,277,239,248,241,262,283,265,264,257],
[232,220,0,260,274,218,218,220,223,264,249,252,235],
[230,203,241,0,241,229,238,213,210,227,249,239,238],
[248,224,227,260,0,202,210,224,233,262,241,244,235],
[256,262,283,272,299,0,254,267,259,271,250,281,269],
[257,253,283,263,291,247,0,235,240,282,257,289,254],
[245,260,281,288,277,234,266,0,249,261,274,291,254],
[263,239,278,291,268,242,261,252,0,280,274,268,282],
[226,218,237,274,239,230,219,240,221,0,250,250,232],
[252,236,252,252,260,251,244,227,227,251,0,264,255],
[233,237,249,262,257,220,212,210,233,251,237,0,232],
[244,244,266,263,266,232,247,247,219,269,246,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 103, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,306,217,305,287,240,306,224,249,276,261,218],
[205,0,251,204,240,231,175,224,192,204,224,221,187],
[195,250,0,220,244,228,208,230,200,170,223,203,198],
[284,297,281,0,264,260,239,273,265,267,289,258,207],
[196,261,257,237,0,244,205,225,235,247,220,209,205],
[214,270,273,241,257,0,253,265,262,237,269,262,229],
[261,326,293,262,296,248,0,279,292,282,277,250,229],
[195,277,271,228,276,236,222,0,276,241,258,207,171],
[277,309,301,236,266,239,209,225,0,242,252,204,216],
[252,297,331,234,254,264,219,260,259,0,277,239,214],
[225,277,278,212,281,232,224,243,249,224,0,227,206],
[240,280,298,243,292,239,251,294,297,262,274,0,259],
[283,314,303,294,296,272,272,330,285,287,295,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 104, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,268,242,233,247,259,244,295,252,272,256,233],
[213,0,259,253,283,245,279,226,283,245,249,255,283],
[233,242,0,227,262,239,261,220,270,209,218,254,254],
[259,248,274,0,263,237,288,267,295,254,280,271,234],
[268,218,239,238,0,218,290,239,256,208,220,233,266],
[254,256,262,264,283,0,292,248,269,255,249,226,284],
[242,222,240,213,211,209,0,212,257,199,251,241,252],
[257,275,281,234,262,253,289,0,303,275,268,261,254],
[206,218,231,206,245,232,244,198,0,195,227,269,241],
[249,256,292,247,293,246,302,226,306,0,251,265,295],
[229,252,283,221,281,252,250,233,274,250,0,290,267],
[245,246,247,230,268,275,260,240,232,236,211,0,282],
[268,218,247,267,235,217,249,247,260,206,234,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 105, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,205,233,212,198,226,224,219,216,199,196,202],
[284,0,261,256,277,285,265,262,248,244,260,274,245],
[296,240,0,261,271,280,239,263,253,235,251,266,257],
[268,245,240,0,255,258,255,243,235,234,240,249,221],
[289,224,230,246,0,255,255,237,252,238,249,257,250],
[303,216,221,243,246,0,271,258,240,254,218,249,235],
[275,236,262,246,246,230,0,219,249,261,232,249,234],
[277,239,238,258,264,243,282,0,246,244,264,271,231],
[282,253,248,266,249,261,252,255,0,252,254,268,246],
[285,257,266,267,263,247,240,257,249,0,255,264,239],
[302,241,250,261,252,283,269,237,247,246,0,260,252],
[305,227,235,252,244,252,252,230,233,237,241,0,228],
[299,256,244,280,251,266,267,270,255,262,249,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 106, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,262,257,259,242,251,273,249,253,257,249,243],
[258,0,258,264,260,257,260,271,248,256,266,254,245],
[239,243,0,245,250,242,255,258,235,246,237,254,249],
[244,237,256,0,259,243,247,245,237,247,252,244,238],
[242,241,251,242,0,239,242,261,239,237,250,247,232],
[259,244,259,258,262,0,268,259,248,258,273,256,257],
[250,241,246,254,259,233,0,256,228,236,242,242,241],
[228,230,243,256,240,242,245,0,253,247,260,254,232],
[252,253,266,264,262,253,273,248,0,259,254,255,244],
[248,245,255,254,264,243,265,254,242,0,256,262,240],
[244,235,264,249,251,228,259,241,247,245,0,255,236],
[252,247,247,257,254,245,259,247,246,239,246,0,242],
[258,256,252,263,269,244,260,269,257,261,265,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 107, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,274,229,245,233,249,220,242,230,251,257,258],
[245,0,265,230,237,233,244,220,242,240,259,243,248],
[227,236,0,227,236,211,242,210,213,218,236,231,238],
[272,271,274,0,248,249,289,233,249,255,272,254,277],
[256,264,265,253,0,231,259,229,252,240,270,258,273],
[268,268,290,252,270,0,278,236,273,253,287,293,275],
[252,257,259,212,242,223,0,236,251,231,269,246,259],
[281,281,291,268,272,265,265,0,267,239,283,286,285],
[259,259,288,252,249,228,250,234,0,259,260,252,256],
[271,261,283,246,261,248,270,262,242,0,269,262,283],
[250,242,265,229,231,214,232,218,241,232,0,227,239],
[244,258,270,247,243,208,255,215,249,239,274,0,268],
[243,253,263,224,228,226,242,216,245,218,262,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 108, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,324,309,182,254,319,296,247,206,124,309,223,244],
[177,0,118,167,195,204,234,161,236,122,309,178,252],
[192,383,0,305,254,360,288,304,263,204,359,164,303],
[319,334,196,0,254,327,259,248,271,214,309,302,346],
[247,306,247,247,0,233,290,124,236,93,225,290,319],
[182,297,141,174,268,0,238,174,197,140,266,238,362],
[205,267,213,242,211,263,0,320,216,197,253,62,253],
[254,340,197,253,377,327,181,0,258,158,309,228,268],
[295,265,238,230,265,304,285,243,0,148,300,280,247],
[377,379,297,287,408,361,304,343,353,0,296,219,365],
[192,192,142,192,276,235,248,192,201,205,0,223,196],
[278,323,337,199,211,263,439,273,221,282,278,0,249],
[257,249,198,155,182,139,248,233,254,136,305,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 109, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,260,237,272,259,252,255,268,260,272,261,262],
[256,0,247,251,249,243,243,244,250,241,244,250,257],
[241,254,0,249,262,241,256,245,243,248,272,248,238],
[264,250,252,0,257,246,260,261,267,252,271,264,240],
[229,252,239,244,0,232,255,257,250,244,256,246,240],
[242,258,260,255,269,0,256,261,257,248,269,250,240],
[249,258,245,241,246,245,0,257,266,237,245,244,243],
[246,257,256,240,244,240,244,0,261,234,257,248,247],
[233,251,258,234,251,244,235,240,0,249,256,251,249],
[241,260,253,249,257,253,264,267,252,0,260,266,246],
[229,257,229,230,245,232,256,244,245,241,0,243,235],
[240,251,253,237,255,251,257,253,250,235,258,0,243],
[239,244,263,261,261,261,258,254,252,255,266,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 110, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,242,221,258,272,273,269,256,259,262,250,268],
[241,0,230,229,249,270,257,255,231,252,246,253,240],
[259,271,0,255,267,294,263,272,241,285,257,277,284],
[280,272,246,0,294,260,267,253,263,260,268,244,247],
[243,252,234,207,0,260,250,240,226,245,250,250,253],
[229,231,207,241,241,0,251,219,237,238,235,213,236],
[228,244,238,234,251,250,0,252,222,218,246,248,217],
[232,246,229,248,261,282,249,0,224,260,262,262,235],
[245,270,260,238,275,264,279,277,0,247,272,275,257],
[242,249,216,241,256,263,283,241,254,0,263,259,266],
[239,255,244,233,251,266,255,239,229,238,0,267,236],
[251,248,224,257,251,288,253,239,226,242,234,0,265],
[233,261,217,254,248,265,284,266,244,235,265,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 111, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,244,248,262,260,270,247,261,247,279,244,251],
[238,0,256,264,256,265,265,245,249,253,264,250,241],
[257,245,0,253,252,266,249,247,252,236,242,233,233],
[253,237,248,0,264,259,270,240,255,231,254,253,243],
[239,245,249,237,0,235,253,231,242,239,242,233,226],
[241,236,235,242,266,0,266,240,249,250,246,250,246],
[231,236,252,231,248,235,0,235,253,227,252,240,235],
[254,256,254,261,270,261,266,0,247,249,266,259,233],
[240,252,249,246,259,252,248,254,0,243,265,249,242],
[254,248,265,270,262,251,274,252,258,0,261,249,250],
[222,237,259,247,259,255,249,235,236,240,0,245,242],
[257,251,268,248,268,251,261,242,252,252,256,0,229],
[250,260,268,258,275,255,266,268,259,251,259,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 112, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,251,243,275,252,250,255,274,251,259,243,255],
[236,0,216,238,258,253,244,242,276,237,275,262,241],
[250,285,0,269,258,283,266,248,268,254,285,254,251],
[258,263,232,0,239,258,276,255,276,252,281,250,264],
[226,243,243,262,0,249,251,241,262,232,276,230,237],
[249,248,218,243,252,0,262,240,276,244,279,250,237],
[251,257,235,225,250,239,0,247,268,240,263,243,234],
[246,259,253,246,260,261,254,0,264,236,261,244,238],
[227,225,233,225,239,225,233,237,0,229,241,223,233],
[250,264,247,249,269,257,261,265,272,0,280,237,248],
[242,226,216,220,225,222,238,240,260,221,0,245,239],
[258,239,247,251,271,251,258,257,278,264,256,0,239],
[246,260,250,237,264,264,267,263,268,253,262,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 113, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,263,264,243,260,251,262,252,260,267,265,278],
[252,0,256,264,250,263,235,267,241,254,276,258,267],
[238,245,0,254,245,268,239,235,232,227,276,255,254],
[237,237,247,0,223,244,238,249,228,210,275,251,245],
[258,251,256,278,0,248,264,259,245,258,244,266,232],
[241,238,233,257,253,0,225,234,230,229,257,243,242],
[250,266,262,263,237,276,0,270,248,257,278,273,267],
[239,234,266,252,242,267,231,0,247,235,268,243,253],
[249,260,269,273,256,271,253,254,0,260,284,254,254],
[241,247,274,291,243,272,244,266,241,0,276,270,250],
[234,225,225,226,257,244,223,233,217,225,0,244,244],
[236,243,246,250,235,258,228,258,247,231,257,0,255],
[223,234,247,256,269,259,234,248,247,251,257,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 114, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,217,175,210,249,235,157,310,221,300,279,237],
[302,0,236,250,200,270,242,232,282,243,264,323,265],
[284,265,0,207,186,271,267,222,255,243,239,277,248],
[326,251,294,0,256,294,262,307,306,290,327,224,318],
[291,301,315,245,0,325,290,283,268,262,342,271,300],
[252,231,230,207,176,0,170,176,207,203,211,207,192],
[266,259,234,239,211,331,0,189,223,287,255,245,274],
[344,269,279,194,218,325,312,0,263,279,282,307,313],
[191,219,246,195,233,294,278,238,0,201,298,255,287],
[280,258,258,211,239,298,214,222,300,0,363,299,246],
[201,237,262,174,159,290,246,219,203,138,0,232,274],
[222,178,224,277,230,294,256,194,246,202,269,0,316],
[264,236,253,183,201,309,227,188,214,255,227,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 115, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,214,222,230,222,222,208,206,218,235,239,226],
[267,0,259,267,281,244,272,241,215,264,272,264,247],
[287,242,0,263,264,249,258,250,245,253,264,256,257],
[279,234,238,0,274,238,240,238,233,245,259,243,239],
[271,220,237,227,0,220,244,228,213,221,251,249,257],
[279,257,252,263,281,0,269,250,240,256,265,267,250],
[279,229,243,261,257,232,0,223,247,253,264,250,245],
[293,260,251,263,273,251,278,0,225,268,272,283,255],
[295,286,256,268,288,261,254,276,0,247,265,268,259],
[283,237,248,256,280,245,248,233,254,0,261,269,234],
[266,229,237,242,250,236,237,229,236,240,0,254,240],
[262,237,245,258,252,234,251,218,233,232,247,0,257],
[275,254,244,262,244,251,256,246,242,267,261,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 116, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,259,254,245,240,247,264,249,251,248,236,251],
[244,0,251,247,247,242,237,249,238,244,250,229,232],
[242,250,0,233,227,224,217,247,226,229,230,232,221],
[247,254,268,0,251,235,230,237,245,236,238,231,229],
[256,254,274,250,0,240,242,259,239,246,245,240,232],
[261,259,277,266,261,0,253,273,262,269,249,258,244],
[254,264,284,271,259,248,0,260,252,270,271,247,266],
[237,252,254,264,242,228,241,0,262,239,248,237,241],
[252,263,275,256,262,239,249,239,0,241,260,246,244],
[250,257,272,265,255,232,231,262,260,0,259,229,243],
[253,251,271,263,256,252,230,253,241,242,0,229,250],
[265,272,269,270,261,243,254,264,255,272,272,0,251],
[250,269,280,272,269,257,235,260,257,258,251,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 117, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,259,297,222,247,241,250,216,243,292,259,245],
[275,0,278,296,243,215,211,263,254,229,295,230,216],
[242,223,0,251,207,214,267,231,235,216,274,220,218],
[204,205,250,0,188,171,208,200,213,201,252,173,201],
[279,258,294,313,0,280,267,250,225,252,315,216,256],
[254,286,287,330,221,0,272,245,245,234,299,232,254],
[260,290,234,293,234,229,0,232,233,234,267,268,243],
[251,238,270,301,251,256,269,0,242,266,260,231,288],
[285,247,266,288,276,256,268,259,0,229,318,270,266],
[258,272,285,300,249,267,267,235,272,0,276,184,232],
[209,206,227,249,186,202,234,241,183,225,0,211,186],
[242,271,281,328,285,269,233,270,231,317,290,0,268],
[256,285,283,300,245,247,258,213,235,269,315,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 118, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,242,257,247,245,244,265,235,245,271,260,241],
[246,0,241,240,241,257,239,244,240,244,250,242,246],
[259,260,0,277,259,254,250,270,253,259,256,263,253],
[244,261,224,0,250,224,234,254,232,237,251,249,238],
[254,260,242,251,0,235,239,255,230,261,261,246,244],
[256,244,247,277,266,0,244,264,240,263,282,255,256],
[257,262,251,267,262,257,0,265,249,277,267,257,244],
[236,257,231,247,246,237,236,0,213,248,244,232,242],
[266,261,248,269,271,261,252,288,0,268,267,256,262],
[256,257,242,264,240,238,224,253,233,0,254,239,237],
[230,251,245,250,240,219,234,257,234,247,0,243,242],
[241,259,238,252,255,246,244,269,245,262,258,0,244],
[260,255,248,263,257,245,257,259,239,264,259,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 119, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,255,253,242,250,282,261,264,263,283,257,241],
[259,0,270,256,243,243,253,227,236,239,265,246,219],
[246,231,0,255,231,245,278,240,215,235,245,233,221],
[248,245,246,0,255,240,264,240,216,236,244,274,239],
[259,258,270,246,0,267,260,245,237,240,246,281,211],
[251,258,256,261,234,0,269,225,248,258,264,262,205],
[219,248,223,237,241,232,0,214,220,241,234,244,206],
[240,274,261,261,256,276,287,0,249,275,272,261,227],
[237,265,286,285,264,253,281,252,0,262,285,268,264],
[238,262,266,265,261,243,260,226,239,0,261,246,247],
[218,236,256,257,255,237,267,229,216,240,0,248,225],
[244,255,268,227,220,239,257,240,233,255,253,0,222],
[260,282,280,262,290,296,295,274,237,254,276,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 120, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,256,268,264,261,266,251,262,256,263,239,254],
[250,0,233,266,267,260,259,258,259,257,239,255,256],
[245,268,0,259,258,262,272,257,267,253,264,266,277],
[233,235,242,0,235,266,269,237,249,251,248,230,248],
[237,234,243,266,0,243,269,243,259,254,259,241,252],
[240,241,239,235,258,0,260,240,268,261,262,238,254],
[235,242,229,232,232,241,0,230,245,248,225,226,251],
[250,243,244,264,258,261,271,0,269,268,272,228,259],
[239,242,234,252,242,233,256,232,0,255,240,233,251],
[245,244,248,250,247,240,253,233,246,0,248,226,257],
[238,262,237,253,242,239,276,229,261,253,0,252,264],
[262,246,235,271,260,263,275,273,268,275,249,0,282],
[247,245,224,253,249,247,250,242,250,244,237,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 121, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,227,212,247,200,264,230,190,228,259,215,249],
[283,0,255,253,272,223,282,257,257,275,276,268,254],
[274,246,0,252,255,241,297,266,249,250,261,287,246],
[289,248,249,0,262,217,301,261,223,247,281,236,244],
[254,229,246,239,0,237,279,249,205,252,249,254,235],
[301,278,260,284,264,0,291,262,250,273,304,284,275],
[237,219,204,200,222,210,0,225,191,220,227,210,213],
[271,244,235,240,252,239,276,0,248,259,272,250,241],
[311,244,252,278,296,251,310,253,0,269,290,277,278],
[273,226,251,254,249,228,281,242,232,0,266,233,252],
[242,225,240,220,252,197,274,229,211,235,0,215,215],
[286,233,214,265,247,217,291,251,224,268,286,0,231],
[252,247,255,257,266,226,288,260,223,249,286,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 122, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,246,231,255,242,233,226,232,250,229,240,261],
[265,0,263,249,258,254,245,253,264,249,244,251,277],
[255,238,0,246,251,245,236,224,241,240,229,250,261],
[270,252,255,0,266,241,255,241,235,244,230,259,267],
[246,243,250,235,0,223,235,236,242,232,228,234,254],
[259,247,256,260,278,0,253,239,244,260,249,246,273],
[268,256,265,246,266,248,0,248,259,260,237,259,274],
[275,248,277,260,265,262,253,0,258,255,237,257,287],
[269,237,260,266,259,257,242,243,0,250,253,269,275],
[251,252,261,257,269,241,241,246,251,0,254,242,263],
[272,257,272,271,273,252,264,264,248,247,0,253,275],
[261,250,251,242,267,255,242,244,232,259,248,0,270],
[240,224,240,234,247,228,227,214,226,238,226,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 123, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,253,227,224,225,245,260,233,231,241,245,259],
[211,0,243,216,216,226,225,213,236,233,211,233,218],
[248,258,0,232,230,247,252,258,232,235,253,238,239],
[274,285,269,0,232,245,274,225,240,237,233,221,244],
[277,285,271,269,0,251,298,238,262,241,278,237,249],
[276,275,254,256,250,0,286,274,268,249,241,254,269],
[256,276,249,227,203,215,0,236,248,215,237,259,237],
[241,288,243,276,263,227,265,0,266,243,243,244,264],
[268,265,269,261,239,233,253,235,0,249,239,231,248],
[270,268,266,264,260,252,286,258,252,0,243,244,257],
[260,290,248,268,223,260,264,258,262,258,0,252,245],
[256,268,263,280,264,247,242,257,270,257,249,0,234],
[242,283,262,257,252,232,264,237,253,244,256,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 124, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,239,247,241,243,271,257,246,252,273,257,263],
[258,0,251,258,241,238,253,255,250,266,256,258,265],
[262,250,0,244,255,251,254,267,261,269,265,271,266],
[254,243,257,0,241,251,260,252,245,261,262,262,263],
[260,260,246,260,0,245,245,253,247,273,268,254,256],
[258,263,250,250,256,0,267,245,246,277,257,255,272],
[230,248,247,241,256,234,0,240,249,247,244,263,251],
[244,246,234,249,248,256,261,0,247,248,245,256,266],
[255,251,240,256,254,255,252,254,0,257,275,255,262],
[249,235,232,240,228,224,254,253,244,0,245,237,256],
[228,245,236,239,233,244,257,256,226,256,0,249,259],
[244,243,230,239,247,246,238,245,246,264,252,0,258],
[238,236,235,238,245,229,250,235,239,245,242,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 125, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,246,247,253,255,246,241,237,229,244,256,251],
[278,0,267,279,262,275,276,241,257,260,265,269,263],
[255,234,0,268,251,259,266,246,260,242,249,255,243],
[254,222,233,0,237,236,260,237,239,237,245,239,237],
[248,239,250,264,0,255,249,252,239,245,246,253,259],
[246,226,242,265,246,0,250,239,248,228,234,228,248],
[255,225,235,241,252,251,0,246,260,231,235,226,252],
[260,260,255,264,249,262,255,0,250,239,259,256,259],
[264,244,241,262,262,253,241,251,0,245,242,245,257],
[272,241,259,264,256,273,270,262,256,0,252,259,261],
[257,236,252,256,255,267,266,242,259,249,0,240,243],
[245,232,246,262,248,273,275,245,256,242,261,0,253],
[250,238,258,264,242,253,249,242,244,240,258,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 126, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,288,300,273,273,267,251,274,280,238,252,272],
[193,0,259,266,261,250,253,195,229,266,214,233,240],
[213,242,0,251,249,238,228,215,211,251,222,231,221],
[201,235,250,0,226,264,245,223,258,275,233,251,257],
[228,240,252,275,0,265,280,242,258,287,255,272,245],
[228,251,263,237,236,0,212,206,241,244,198,246,245],
[234,248,273,256,221,289,0,207,279,265,223,266,228],
[250,306,286,278,259,295,294,0,268,262,256,296,254],
[227,272,290,243,243,260,222,233,0,260,213,234,257],
[221,235,250,226,214,257,236,239,241,0,221,205,233],
[263,287,279,268,246,303,278,245,288,280,0,263,285],
[249,268,270,250,229,255,235,205,267,296,238,0,248],
[229,261,280,244,256,256,273,247,244,268,216,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 127, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,282,299,272,264,324,240,281,281,321,256,240],
[186,0,217,264,209,251,234,199,277,241,242,191,190],
[219,284,0,269,211,280,301,263,320,290,325,270,239],
[202,237,232,0,214,286,276,246,229,259,280,209,229],
[229,292,290,287,0,277,320,272,316,296,324,271,276],
[237,250,221,215,224,0,272,306,311,263,290,258,241],
[177,267,200,225,181,229,0,256,268,226,245,234,220],
[261,302,238,255,229,195,245,0,280,244,242,256,250],
[220,224,181,272,185,190,233,221,0,248,224,250,193],
[220,260,211,242,205,238,275,257,253,0,245,215,197],
[180,259,176,221,177,211,256,259,277,256,0,234,235],
[245,310,231,292,230,243,267,245,251,286,267,0,212],
[261,311,262,272,225,260,281,251,308,304,266,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 128, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,257,257,238,245,250,268,282,240,263,243,249],
[242,0,267,258,245,254,244,282,273,250,261,233,271],
[244,234,0,229,249,243,266,285,270,254,251,252,269],
[244,243,272,0,242,250,276,275,274,268,270,257,256],
[263,256,252,259,0,262,252,285,258,270,251,238,262],
[256,247,258,251,239,0,258,275,268,251,245,240,260],
[251,257,235,225,249,243,0,270,267,252,243,255,265],
[233,219,216,226,216,226,231,0,233,235,228,221,229],
[219,228,231,227,243,233,234,268,0,233,244,224,248],
[261,251,247,233,231,250,249,266,268,0,240,230,258],
[238,240,250,231,250,256,258,273,257,261,0,248,259],
[258,268,249,244,263,261,246,280,277,271,253,0,279],
[252,230,232,245,239,241,236,272,253,243,242,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 129, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,259,238,264,199,270,226,232,255,262,246,204],
[270,0,289,238,262,263,275,315,267,288,251,242,200],
[242,212,0,228,234,213,253,271,222,222,255,217,207],
[263,263,273,0,248,209,255,267,265,276,304,256,276],
[237,239,267,253,0,222,251,296,225,248,257,203,209],
[302,238,288,292,279,0,263,272,297,276,262,296,239],
[231,226,248,246,250,238,0,248,258,248,269,220,235],
[275,186,230,234,205,229,253,0,241,209,235,237,225],
[269,234,279,236,276,204,243,260,0,188,251,220,177],
[246,213,279,225,253,225,253,292,313,0,255,241,235],
[239,250,246,197,244,239,232,266,250,246,0,276,199],
[255,259,284,245,298,205,281,264,281,260,225,0,214],
[297,301,294,225,292,262,266,276,324,266,302,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 130, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,237,228,249,254,239,239,250,226,226,237,246],
[259,0,251,247,266,251,239,241,258,223,237,252,264],
[264,250,0,245,276,246,259,250,262,231,245,255,265],
[273,254,256,0,267,260,245,244,249,256,241,248,262],
[252,235,225,234,0,236,245,239,260,237,225,241,230],
[247,250,255,241,265,0,241,234,249,216,235,242,246],
[262,262,242,256,256,260,0,239,268,242,235,238,263],
[262,260,251,257,262,267,262,0,274,250,248,257,256],
[251,243,239,252,241,252,233,227,0,230,239,244,248],
[275,278,270,245,264,285,259,251,271,0,254,249,272],
[275,264,256,260,276,266,266,253,262,247,0,247,272],
[264,249,246,253,260,259,263,244,257,252,254,0,273],
[255,237,236,239,271,255,238,245,253,229,229,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 131, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,200,275,309,252,302,227,398,308,333,434,211],
[276,0,268,335,349,228,259,242,386,334,375,358,237],
[301,233,0,327,276,222,403,285,350,308,345,379,184],
[226,166,174,0,262,228,220,150,249,170,171,296,272],
[192,152,225,239,0,229,291,227,336,273,321,358,222],
[249,273,279,273,272,0,263,163,284,216,322,395,242],
[199,242,98,281,210,238,0,159,324,258,177,323,214],
[274,259,216,351,274,338,342,0,335,306,292,393,268],
[103,115,151,252,165,217,177,166,0,201,244,261,157],
[193,167,193,331,228,285,243,195,300,0,241,306,213],
[168,126,156,330,180,179,324,209,257,260,0,314,125],
[67,143,122,205,143,106,178,108,240,195,187,0,193],
[290,264,317,229,279,259,287,233,344,288,376,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 132, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,243,242,245,246,246,249,245,242,252,247,251],
[261,0,246,254,256,232,266,248,250,247,249,233,252],
[258,255,0,218,236,237,267,255,256,235,238,265,242],
[259,247,283,0,254,264,279,266,258,251,267,258,257],
[256,245,265,247,0,250,270,245,257,232,243,253,262],
[255,269,264,237,251,0,256,253,289,266,251,271,249],
[255,235,234,222,231,245,0,241,256,225,243,248,229],
[252,253,246,235,256,248,260,0,259,268,253,248,248],
[256,251,245,243,244,212,245,242,0,233,237,256,228],
[259,254,266,250,269,235,276,233,268,0,260,253,248],
[249,252,263,234,258,250,258,248,264,241,0,254,237],
[254,268,236,243,248,230,253,253,245,248,247,0,237],
[250,249,259,244,239,252,272,253,273,253,264,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 133, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,199,251,271,245,274,275,256,219,224,250,218],
[269,0,263,272,227,240,301,316,246,254,206,272,246],
[302,238,0,224,291,285,333,352,315,244,320,309,309],
[250,229,277,0,230,266,321,280,301,281,285,285,281],
[230,274,210,271,0,240,292,284,248,278,250,208,231],
[256,261,216,235,261,0,281,270,218,220,264,232,231],
[227,200,168,180,209,220,0,246,209,177,197,232,222],
[226,185,149,221,217,231,255,0,180,194,193,199,223],
[245,255,186,200,253,283,292,321,0,228,218,278,228],
[282,247,257,220,223,281,324,307,273,0,287,216,281],
[277,295,181,216,251,237,304,308,283,214,0,296,277],
[251,229,192,216,293,269,269,302,223,285,205,0,274],
[283,255,192,220,270,270,279,278,273,220,224,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 134, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,239,241,261,263,236,258,247,243,255,260,248],
[256,0,234,238,245,262,250,255,263,243,243,258,249],
[262,267,0,246,257,272,234,261,272,251,262,261,253],
[260,263,255,0,253,259,262,262,272,246,262,248,256],
[240,256,244,248,0,256,256,251,256,239,240,259,260],
[238,239,229,242,245,0,257,262,254,231,238,246,231],
[265,251,267,239,245,244,0,266,274,244,258,249,254],
[243,246,240,239,250,239,235,0,254,227,239,230,224],
[254,238,229,229,245,247,227,247,0,217,253,260,239],
[258,258,250,255,262,270,257,274,284,0,259,263,242],
[246,258,239,239,261,263,243,262,248,242,0,268,248],
[241,243,240,253,242,255,252,271,241,238,233,0,236],
[253,252,248,245,241,270,247,277,262,259,253,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 135, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,254,249,251,258,256,260,251,266,263,259,255],
[247,0,248,247,240,255,244,250,255,233,249,246,239],
[247,253,0,254,252,256,246,264,239,258,260,266,260],
[252,254,247,0,255,252,266,264,249,260,257,258,257],
[250,261,249,246,0,259,249,268,253,261,246,247,251],
[243,246,245,249,242,0,253,247,252,246,260,247,249],
[245,257,255,235,252,248,0,258,244,256,247,255,253],
[241,251,237,237,233,254,243,0,251,253,233,250,246],
[250,246,262,252,248,249,257,250,0,251,253,259,237],
[235,268,243,241,240,255,245,248,250,0,264,255,258],
[238,252,241,244,255,241,254,268,248,237,0,254,258],
[242,255,235,243,254,254,246,251,242,246,247,0,259],
[246,262,241,244,250,252,248,255,264,243,243,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 136, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,253,255,261,248,238,243,255,242,247,263,263],
[242,0,242,236,258,241,224,245,248,244,239,248,270],
[248,259,0,245,263,245,252,238,248,260,244,250,266],
[246,265,256,0,257,242,240,241,271,248,249,264,265],
[240,243,238,244,0,247,232,229,258,250,235,244,263],
[253,260,256,259,254,0,240,255,263,260,247,262,261],
[263,277,249,261,269,261,0,236,252,248,247,263,266],
[258,256,263,260,272,246,265,0,256,266,237,274,282],
[246,253,253,230,243,238,249,245,0,247,239,244,256],
[259,257,241,253,251,241,253,235,254,0,253,253,289],
[254,262,257,252,266,254,254,264,262,248,0,256,280],
[238,253,251,237,257,239,238,227,257,248,245,0,254],
[238,231,235,236,238,240,235,219,245,212,221,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 137, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,246,252,234,247,294,255,276,266,244,265,227],
[237,0,242,235,241,251,257,225,251,229,232,220,230],
[255,259,0,232,255,234,252,198,256,236,210,267,215],
[249,266,269,0,260,270,305,283,285,293,261,248,235],
[267,260,246,241,0,231,250,232,250,226,227,258,209],
[254,250,267,231,270,0,277,261,267,268,212,251,248],
[207,244,249,196,251,224,0,254,249,249,209,207,188],
[246,276,303,218,269,240,247,0,305,266,230,256,257],
[225,250,245,216,251,234,252,196,0,247,219,247,208],
[235,272,265,208,275,233,252,235,254,0,252,247,271],
[257,269,291,240,274,289,292,271,282,249,0,266,244],
[236,281,234,253,243,250,294,245,254,254,235,0,246],
[274,271,286,266,292,253,313,244,293,230,257,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 138, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,237,270,271,224,256,272,266,260,261,241,263],
[257,0,256,263,248,233,260,257,278,245,243,244,259],
[264,245,0,269,263,252,268,261,278,253,260,266,260],
[231,238,232,0,249,206,235,252,245,214,240,244,264],
[230,253,238,252,0,223,267,277,257,233,280,243,270],
[277,268,249,295,278,0,279,279,291,262,272,276,278],
[245,241,233,266,234,222,0,244,231,238,263,233,264],
[229,244,240,249,224,222,257,0,245,227,237,216,242],
[235,223,223,256,244,210,270,256,0,245,245,247,263],
[241,256,248,287,268,239,263,274,256,0,277,265,267],
[240,258,241,261,221,229,238,264,256,224,0,238,250],
[260,257,235,257,258,225,268,285,254,236,263,0,253],
[238,242,241,237,231,223,237,259,238,234,251,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 139, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,248,233,239,246,240,240,271,245,243,238,261],
[252,0,246,231,237,251,244,245,256,236,268,263,260],
[253,255,0,240,239,244,252,245,265,233,251,246,271],
[268,270,261,0,255,261,250,251,277,241,258,255,271],
[262,264,262,246,0,264,255,253,263,250,284,255,275],
[255,250,257,240,237,0,242,243,271,235,260,249,252],
[261,257,249,251,246,259,0,255,255,249,271,264,275],
[261,256,256,250,248,258,246,0,265,251,261,262,269],
[230,245,236,224,238,230,246,236,0,243,247,257,243],
[256,265,268,260,251,266,252,250,258,0,271,263,272],
[258,233,250,243,217,241,230,240,254,230,0,250,250],
[263,238,255,246,246,252,237,239,244,238,251,0,263],
[240,241,230,230,226,249,226,232,258,229,251,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 140, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,246,264,262,265,263,255,262,258,238,249,257],
[260,0,246,256,252,256,256,230,259,231,244,243,249],
[255,255,0,265,273,275,257,253,248,260,249,243,251],
[237,245,236,0,247,254,245,238,248,249,228,229,239],
[239,249,228,254,0,257,256,228,244,239,248,233,229],
[236,245,226,247,244,0,246,243,241,236,236,235,238],
[238,245,244,256,245,255,0,225,241,239,243,241,245],
[246,271,248,263,273,258,276,0,264,254,255,261,257],
[239,242,253,253,257,260,260,237,0,248,243,251,239],
[243,270,241,252,262,265,262,247,253,0,249,245,268],
[263,257,252,273,253,265,258,246,258,252,0,263,257],
[252,258,258,272,268,266,260,240,250,256,238,0,248],
[244,252,250,262,272,263,256,244,262,233,244,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 141, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,280,267,233,294,259,323,275,278,262,266,256],
[266,0,251,287,272,272,262,285,295,231,266,301,267],
[221,250,0,252,237,285,256,301,236,224,246,279,227],
[234,214,249,0,241,271,249,285,270,290,249,298,255],
[268,229,264,260,0,281,280,329,215,236,264,266,235],
[207,229,216,230,220,0,253,274,222,223,234,274,222],
[242,239,245,252,221,248,0,276,263,256,277,252,239],
[178,216,200,216,172,227,225,0,219,188,244,224,215],
[226,206,265,231,286,279,238,282,0,224,256,247,257],
[223,270,277,211,265,278,245,313,277,0,257,246,228],
[239,235,255,252,237,267,224,257,245,244,0,284,235],
[235,200,222,203,235,227,249,277,254,255,217,0,223],
[245,234,274,246,266,279,262,286,244,273,266,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 142, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,404,89,315,233,89,0,0,0,144,260,0],
[501,0,404,186,315,233,89,0,0,89,233,260,0],
[97,97,0,97,0,144,0,97,0,97,241,0,97],
[412,315,404,0,315,233,0,171,0,0,144,404,0],
[186,186,501,186,0,330,186,186,97,186,330,186,97],
[268,268,357,268,171,0,268,268,268,97,97,268,268],
[412,412,501,501,315,233,0,268,171,97,241,501,268],
[501,501,404,330,315,233,233,0,144,330,233,404,0],
[501,501,501,501,404,233,330,357,0,330,330,501,268],
[501,412,404,501,315,404,404,171,171,0,315,404,171],
[357,268,260,357,171,404,260,268,171,186,0,260,171],
[241,241,501,97,315,233,0,97,0,97,241,0,97],
[501,501,404,501,404,233,233,501,233,330,330,404,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 143, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,243,290,295,218,282,250,275,272,279,293,283],
[222,0,252,269,268,203,222,236,262,201,287,313,316],
[258,249,0,287,293,205,306,313,285,309,280,289,307],
[211,232,214,0,271,258,252,295,261,288,336,317,227],
[206,233,208,230,0,179,202,238,215,284,305,216,252],
[283,298,296,243,322,0,222,343,269,291,300,283,305],
[219,279,195,249,299,279,0,305,308,277,265,299,307],
[251,265,188,206,263,158,196,0,244,209,250,202,262],
[226,239,216,240,286,232,193,257,0,247,280,287,265],
[229,300,192,213,217,210,224,292,254,0,277,227,303],
[222,214,221,165,196,201,236,251,221,224,0,215,272],
[208,188,212,184,285,218,202,299,214,274,286,0,230],
[218,185,194,274,249,196,194,239,236,198,229,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 144, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,259,251,263,245,245,241,265,242,272,268,254],
[231,0,246,256,262,253,242,232,249,233,252,242,244],
[242,255,0,249,251,244,247,246,237,242,262,240,248],
[250,245,252,0,243,252,244,250,256,252,269,259,250],
[238,239,250,258,0,244,248,238,253,248,270,260,236],
[256,248,257,249,257,0,253,264,264,236,271,263,242],
[256,259,254,257,253,248,0,258,275,249,248,255,237],
[260,269,255,251,263,237,243,0,257,241,263,268,241],
[236,252,264,245,248,237,226,244,0,238,261,238,234],
[259,268,259,249,253,265,252,260,263,0,261,261,260],
[229,249,239,232,231,230,253,238,240,240,0,249,221],
[233,259,261,242,241,238,246,233,263,240,252,0,246],
[247,257,253,251,265,259,264,260,267,241,280,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 145, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,241,241,256,242,264,269,236,256,264,252,252],
[275,0,272,244,253,257,266,283,254,256,267,248,273],
[260,229,0,254,253,249,265,253,248,235,271,244,249],
[260,257,247,0,254,222,267,272,248,257,271,240,266],
[245,248,248,247,0,247,258,245,241,258,254,252,257],
[259,244,252,279,254,0,281,277,247,263,248,271,269],
[237,235,236,234,243,220,0,244,222,234,231,243,240],
[232,218,248,229,256,224,257,0,236,224,250,243,239],
[265,247,253,253,260,254,279,265,0,262,261,247,245],
[245,245,266,244,243,238,267,277,239,0,264,254,267],
[237,234,230,230,247,253,270,251,240,237,0,254,251],
[249,253,257,261,249,230,258,258,254,247,247,0,251],
[249,228,252,235,244,232,261,262,256,234,250,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 146, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,241,228,251,248,244,260,235,223,241,248,210],
[269,0,243,246,228,259,259,253,248,253,228,253,232],
[260,258,0,246,251,257,275,255,246,272,247,277,294],
[273,255,255,0,259,266,274,239,231,257,239,256,232],
[250,273,250,242,0,235,250,243,246,258,220,243,228],
[253,242,244,235,266,0,247,253,207,228,251,254,240],
[257,242,226,227,251,254,0,225,219,234,225,240,245],
[241,248,246,262,258,248,276,0,263,246,227,250,238],
[266,253,255,270,255,294,282,238,0,245,257,265,263],
[278,248,229,244,243,273,267,255,256,0,245,268,250],
[260,273,254,262,281,250,276,274,244,256,0,272,258],
[253,248,224,245,258,247,261,251,236,233,229,0,233],
[291,269,207,269,273,261,256,263,238,251,243,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 147, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,246,259,258,257,244,246,253,258,264,255,272],
[248,0,254,249,242,227,238,250,253,246,256,257,250],
[255,247,0,267,255,251,245,253,270,268,251,236,266],
[242,252,234,0,248,222,229,236,261,255,233,230,245],
[243,259,246,253,0,248,226,250,248,262,257,240,256],
[244,274,250,279,253,0,252,252,263,253,266,255,257],
[257,263,256,272,275,249,0,277,259,262,243,243,274],
[255,251,248,265,251,249,224,0,251,254,254,251,257],
[248,248,231,240,253,238,242,250,0,253,270,249,257],
[243,255,233,246,239,248,239,247,248,0,238,252,244],
[237,245,250,268,244,235,258,247,231,263,0,229,252],
[246,244,265,271,261,246,258,250,252,249,272,0,273],
[229,251,235,256,245,244,227,244,244,257,249,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 148, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,251,244,240,223,235,247,243,249,258,254,242],
[257,0,230,255,237,231,252,251,253,240,267,244,248],
[250,271,0,284,250,228,254,244,274,262,257,273,247],
[257,246,217,0,255,232,242,240,270,239,262,222,254],
[261,264,251,246,0,254,238,249,268,255,269,260,281],
[278,270,273,269,247,0,243,247,272,251,263,268,256],
[266,249,247,259,263,258,0,249,263,258,282,260,253],
[254,250,257,261,252,254,252,0,263,239,260,246,246],
[258,248,227,231,233,229,238,238,0,240,241,228,229],
[252,261,239,262,246,250,243,262,261,0,260,246,244],
[243,234,244,239,232,238,219,241,260,241,0,244,252],
[247,257,228,279,241,233,241,255,273,255,257,0,239],
[259,253,254,247,220,245,248,255,272,257,249,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 149, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,256,251,253,265,244,262,258,250,246,235,252],
[270,0,277,278,267,271,241,264,269,260,271,251,262],
[245,224,0,237,248,255,237,258,258,246,245,231,251],
[250,223,264,0,254,261,245,267,268,251,238,243,260],
[248,234,253,247,0,272,253,255,252,251,249,247,253],
[236,230,246,240,229,0,241,253,245,248,251,222,254],
[257,260,264,256,248,260,0,276,259,254,256,246,252],
[239,237,243,234,246,248,225,0,249,252,241,232,232],
[243,232,243,233,249,256,242,252,0,253,243,223,257],
[251,241,255,250,250,253,247,249,248,0,245,243,246],
[255,230,256,263,252,250,245,260,258,256,0,244,246],
[266,250,270,258,254,279,255,269,278,258,257,0,264],
[249,239,250,241,248,247,249,269,244,255,255,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 150, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,237,193,261,259,264,236,270,264,264,244,254],
[271,0,283,243,269,277,292,262,260,273,265,272,279],
[264,218,0,218,249,254,256,226,269,244,259,263,259],
[308,258,283,0,265,269,266,248,260,262,262,281,278],
[240,232,252,236,0,244,264,247,258,263,246,272,261],
[242,224,247,232,257,0,258,236,260,243,222,250,271],
[237,209,245,235,237,243,0,232,237,233,228,257,247],
[265,239,275,253,254,265,269,0,259,265,245,269,284],
[231,241,232,241,243,241,264,242,0,257,240,252,246],
[237,228,257,239,238,258,268,236,244,0,241,255,253],
[237,236,242,239,255,279,273,256,261,260,0,248,281],
[257,229,238,220,229,251,244,232,249,246,253,0,237],
[247,222,242,223,240,230,254,217,255,248,220,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 151, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,258,256,259,267,243,256,249,258,259,242,257],
[237,0,239,238,235,256,238,227,246,257,244,241,247],
[243,262,0,232,265,264,255,250,245,266,265,253,265],
[245,263,269,0,263,259,266,251,258,259,269,261,264],
[242,266,236,238,0,260,238,239,242,244,250,248,251],
[234,245,237,242,241,0,247,246,245,249,242,247,256],
[258,263,246,235,263,254,0,251,240,257,264,253,259],
[245,274,251,250,262,255,250,0,267,263,267,243,257],
[252,255,256,243,259,256,261,234,0,256,260,250,254],
[243,244,235,242,257,252,244,238,245,0,251,256,250],
[242,257,236,232,251,259,237,234,241,250,0,235,239],
[259,260,248,240,253,254,248,258,251,245,266,0,265],
[244,254,236,237,250,245,242,244,247,251,262,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 152, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,261,235,261,237,255,242,257,240,253,259,251],
[262,0,265,267,268,258,272,262,272,246,281,271,276],
[240,236,0,236,258,246,243,245,253,233,250,238,248],
[266,234,265,0,266,250,249,250,269,247,256,273,255],
[240,233,243,235,0,227,241,234,255,244,243,250,245],
[264,243,255,251,274,0,260,252,252,240,269,275,249],
[246,229,258,252,260,241,0,253,260,252,253,258,247],
[259,239,256,251,267,249,248,0,257,240,257,258,249],
[244,229,248,232,246,249,241,244,0,232,258,244,261],
[261,255,268,254,257,261,249,261,269,0,266,273,239],
[248,220,251,245,258,232,248,244,243,235,0,257,244],
[242,230,263,228,251,226,243,243,257,228,244,0,238],
[250,225,253,246,256,252,254,252,240,262,257,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 153, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,298,270,240,289,228,272,303,240,306,350,262],
[227,0,323,286,267,320,259,285,376,257,231,322,355],
[203,178,0,231,175,219,254,244,278,256,205,259,265],
[231,215,270,0,221,162,246,252,263,174,264,244,294],
[261,234,326,280,0,284,280,284,304,225,270,324,333],
[212,181,282,339,217,0,230,168,236,115,236,276,293],
[273,242,247,255,221,271,0,261,258,254,219,250,339],
[229,216,257,249,217,333,240,0,296,211,280,322,232],
[198,125,223,238,197,265,243,205,0,291,187,251,218],
[261,244,245,327,276,386,247,290,210,0,252,328,237],
[195,270,296,237,231,265,282,221,314,249,0,308,291],
[151,179,242,257,177,225,251,179,250,173,193,0,224],
[239,146,236,207,168,208,162,269,283,264,210,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 154, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,243,320,253,310,248,321,259,245,290,243,239],
[295,0,254,282,189,306,224,312,219,237,252,238,259],
[258,247,0,261,241,272,269,297,250,233,258,291,233],
[181,219,240,0,207,239,205,283,217,208,224,232,201],
[248,312,260,294,0,288,259,303,224,240,287,271,270],
[191,195,229,262,213,0,202,263,191,206,216,201,225],
[253,277,232,296,242,299,0,330,252,275,291,305,260],
[180,189,204,218,198,238,171,0,173,187,204,233,207],
[242,282,251,284,277,310,249,328,0,257,324,253,256],
[256,264,268,293,261,295,226,314,244,0,271,270,272],
[211,249,243,277,214,285,210,297,177,230,0,225,258],
[258,263,210,269,230,300,196,268,248,231,276,0,238],
[262,242,268,300,231,276,241,294,245,229,243,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 155, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,262,268,255,268,251,251,250,261,247,259,268],
[250,0,263,245,265,266,261,253,249,260,232,255,262],
[239,238,0,248,230,254,240,233,243,234,212,242,218],
[233,256,253,0,240,247,247,236,247,246,247,249,265],
[246,236,271,261,0,270,252,262,240,261,243,264,258],
[233,235,247,254,231,0,238,218,230,257,245,248,235],
[250,240,261,254,249,263,0,250,223,262,229,264,249],
[250,248,268,265,239,283,251,0,267,285,268,270,264],
[251,252,258,254,261,271,278,234,0,264,237,252,244],
[240,241,267,255,240,244,239,216,237,0,229,244,251],
[254,269,289,254,258,256,272,233,264,272,0,262,255],
[242,246,259,252,237,253,237,231,249,257,239,0,251],
[233,239,283,236,243,266,252,237,257,250,246,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 156, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,258,246,224,225,263,226,228,233,236,237,240],
[254,0,259,245,236,223,256,255,234,235,224,233,245],
[243,242,0,279,239,223,268,255,237,221,235,218,250],
[255,256,222,0,225,226,259,259,230,236,240,224,248],
[277,265,262,276,0,265,272,257,267,256,245,259,253],
[276,278,278,275,236,0,288,259,261,276,246,263,262],
[238,245,233,242,229,213,0,244,237,206,228,229,226],
[275,246,246,242,244,242,257,0,244,251,248,240,265],
[273,267,264,271,234,240,264,257,0,273,264,247,275],
[268,266,280,265,245,225,295,250,228,0,257,236,260],
[265,277,266,261,256,255,273,253,237,244,0,252,268],
[264,268,283,277,242,238,272,261,254,265,249,0,276],
[261,256,251,253,248,239,275,236,226,241,233,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 157, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,228,267,217,268,213,255,218,293,268,301,235],
[242,0,242,270,235,288,235,265,242,247,270,277,221],
[273,259,0,279,238,284,198,283,272,317,292,298,250],
[234,231,222,0,226,256,193,192,261,276,206,263,201],
[284,266,263,275,0,249,266,263,353,354,271,293,257],
[233,213,217,245,252,0,206,238,251,311,283,300,217],
[288,266,303,308,235,295,0,248,278,299,297,289,277],
[246,236,218,309,238,263,253,0,304,302,296,269,250],
[283,259,229,240,148,250,223,197,0,333,258,264,227],
[208,254,184,225,147,190,202,199,168,0,211,226,191],
[233,231,209,295,230,218,204,205,243,290,0,257,184],
[200,224,203,238,208,201,212,232,237,275,244,0,227],
[266,280,251,300,244,284,224,251,274,310,317,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 158, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,257,241,258,245,248,236,250,291,242,213,224],
[232,0,246,238,276,241,263,235,251,256,261,242,210],
[244,255,0,251,267,278,258,215,253,255,236,234,221],
[260,263,250,0,274,253,251,240,236,279,241,217,227],
[243,225,234,227,0,237,235,213,224,243,233,213,226],
[256,260,223,248,264,0,231,242,256,276,192,235,223],
[253,238,243,250,266,270,0,255,264,261,232,220,218],
[265,266,286,261,288,259,246,0,253,253,242,219,220],
[251,250,248,265,277,245,237,248,0,275,249,238,236],
[210,245,246,222,258,225,240,248,226,0,237,220,231],
[259,240,265,260,268,309,269,259,252,264,0,266,236],
[288,259,267,284,288,266,281,282,263,281,235,0,268],
[277,291,280,274,275,278,283,281,265,270,265,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 159, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,208,231,280,214,287,212,232,292,262,229,184],
[213,0,202,221,276,276,304,217,172,236,302,86,224],
[293,299,0,208,310,289,356,322,242,244,305,236,254],
[270,280,293,0,325,276,408,238,227,287,331,281,238],
[221,225,191,176,0,269,296,166,170,254,247,216,221],
[287,225,212,225,232,0,257,227,156,190,175,187,159],
[214,197,145,93,205,244,0,128,169,220,180,144,148],
[289,284,179,263,335,274,373,0,262,298,364,174,214],
[269,329,259,274,331,345,332,239,0,315,337,280,316],
[209,265,257,214,247,311,281,203,186,0,302,200,285],
[239,199,196,170,254,326,321,137,164,199,0,201,165],
[272,415,265,220,285,314,357,327,221,301,300,0,231],
[317,277,247,263,280,342,353,287,185,216,336,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 160, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,261,263,262,294,308,304,314,249,269,259,290],
[188,0,265,226,254,248,306,269,286,239,242,249,264],
[240,236,0,260,279,253,286,245,265,242,250,263,235],
[238,275,241,0,244,262,294,239,295,264,283,233,234],
[239,247,222,257,0,281,279,214,252,203,256,218,260],
[207,253,248,239,220,0,247,248,264,218,226,212,242],
[193,195,215,207,222,254,0,215,247,178,227,230,203],
[197,232,256,262,287,253,286,0,289,244,267,250,232],
[187,215,236,206,249,237,254,212,0,218,230,222,220],
[252,262,259,237,298,283,323,257,283,0,257,237,269],
[232,259,251,218,245,275,274,234,271,244,0,213,262],
[242,252,238,268,283,289,271,251,279,264,288,0,269],
[211,237,266,267,241,259,298,269,281,232,239,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 161, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,251,232,251,233,253,243,257,250,225,251,257],
[260,0,251,246,253,254,269,259,268,254,247,250,262],
[250,250,0,237,239,249,264,243,267,252,243,249,257],
[269,255,264,0,258,256,255,257,258,266,243,246,271],
[250,248,262,243,0,250,259,245,267,254,251,247,260],
[268,247,252,245,251,0,264,249,266,259,241,268,264],
[248,232,237,246,242,237,0,234,256,234,236,247,251],
[258,242,258,244,256,252,267,0,257,258,246,265,265],
[244,233,234,243,234,235,245,244,0,232,239,237,251],
[251,247,249,235,247,242,267,243,269,0,243,255,257],
[276,254,258,258,250,260,265,255,262,258,0,274,260],
[250,251,252,255,254,233,254,236,264,246,227,0,260],
[244,239,244,230,241,237,250,236,250,244,241,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 162, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,269,214,243,233,236,222,183,203,276,233,235],
[302,0,324,249,287,247,298,264,260,264,304,250,253],
[232,177,0,190,231,174,229,197,195,180,223,178,191],
[287,252,311,0,267,281,256,284,232,230,263,245,223],
[258,214,270,234,0,218,224,238,198,216,259,212,210],
[268,254,327,220,283,0,282,309,247,265,268,227,257],
[265,203,272,245,277,219,0,219,180,218,246,225,240],
[279,237,304,217,263,192,282,0,196,222,261,237,262],
[318,241,306,269,303,254,321,305,0,258,287,255,262],
[298,237,321,271,285,236,283,279,243,0,289,253,230],
[225,197,278,238,242,233,255,240,214,212,0,213,238],
[268,251,323,256,289,274,276,264,246,248,288,0,244],
[266,248,310,278,291,244,261,239,239,271,263,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 163, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,270,284,269,295,268,267,263,260,240,271,262],
[238,0,254,273,275,258,252,262,281,260,255,266,247],
[231,247,0,282,268,270,256,248,241,255,254,258,251],
[217,228,219,0,226,242,228,221,239,216,227,221,236],
[232,226,233,275,0,240,230,235,246,237,220,244,239],
[206,243,231,259,261,0,230,236,207,217,232,229,209],
[233,249,245,273,271,271,0,237,265,263,238,264,251],
[234,239,253,280,266,265,264,0,239,249,238,262,239],
[238,220,260,262,255,294,236,262,0,218,253,240,270],
[241,241,246,285,264,284,238,252,283,0,238,242,266],
[261,246,247,274,281,269,263,263,248,263,0,283,253],
[230,235,243,280,257,272,237,239,261,259,218,0,250],
[239,254,250,265,262,292,250,262,231,235,248,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 164, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,271,225,267,250,245,269,296,276,254,227,253],
[243,0,286,235,286,249,233,266,243,249,260,199,245],
[230,215,0,241,266,259,238,257,235,227,275,214,250],
[276,266,260,0,280,290,249,282,303,262,285,241,256],
[234,215,235,221,0,239,209,237,239,220,247,195,220],
[251,252,242,211,262,0,218,257,243,252,250,244,241],
[256,268,263,252,292,283,0,249,318,298,300,267,286],
[232,235,244,219,264,244,252,0,238,233,235,238,219],
[205,258,266,198,262,258,183,263,0,254,269,201,224],
[225,252,274,239,281,249,203,268,247,0,254,232,224],
[247,241,226,216,254,251,201,266,232,247,0,238,263],
[274,302,287,260,306,257,234,263,300,269,263,0,249],
[248,256,251,245,281,260,215,282,277,277,238,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 165, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,230,244,215,232,227,223,206,232,228,238,220],
[270,0,267,268,257,263,259,270,250,251,251,254,245],
[271,234,0,253,237,254,260,263,244,247,252,244,236],
[257,233,248,0,238,252,244,260,231,252,251,248,235],
[286,244,264,263,0,258,259,263,256,265,256,254,247],
[269,238,247,249,243,0,263,258,246,264,269,254,245],
[274,242,241,257,242,238,0,253,236,240,245,250,230],
[278,231,238,241,238,243,248,0,247,256,244,253,232],
[295,251,257,270,245,255,265,254,0,270,259,276,256],
[269,250,254,249,236,237,261,245,231,0,240,243,228],
[273,250,249,250,245,232,256,257,242,261,0,242,238],
[263,247,257,253,247,247,251,248,225,258,259,0,245],
[281,256,265,266,254,256,271,269,245,273,263,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 166, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,242,250,251,263,232,254,262,249,225,246,235],
[289,0,257,284,262,277,248,242,281,274,259,267,270],
[259,244,0,249,261,262,232,257,249,237,241,249,239],
[251,217,252,0,266,249,244,263,267,249,237,258,248],
[250,239,240,235,0,252,231,256,261,228,234,259,240],
[238,224,239,252,249,0,232,242,264,233,219,247,241],
[269,253,269,257,270,269,0,279,278,268,242,267,278],
[247,259,244,238,245,259,222,0,264,235,226,236,248],
[239,220,252,234,240,237,223,237,0,234,223,242,246],
[252,227,264,252,273,268,233,266,267,0,235,256,246],
[276,242,260,264,267,282,259,275,278,266,0,264,265],
[255,234,252,243,242,254,234,265,259,245,237,0,234],
[266,231,262,253,261,260,223,253,255,255,236,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 167, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,242,235,229,249,256,227,243,231,235,255,207],
[264,0,278,249,239,274,274,219,254,264,274,286,267],
[259,223,0,211,256,244,261,248,252,260,279,258,217],
[266,252,290,0,236,254,300,230,282,284,281,271,241],
[272,262,245,265,0,264,291,277,278,273,280,314,252],
[252,227,257,247,237,0,293,235,264,282,273,277,237],
[245,227,240,201,210,208,0,229,248,237,240,261,190],
[274,282,253,271,224,266,272,0,262,288,268,294,237],
[258,247,249,219,223,237,253,239,0,259,251,257,227],
[270,237,241,217,228,219,264,213,242,0,232,246,215],
[266,227,222,220,221,228,261,233,250,269,0,257,206],
[246,215,243,230,187,224,240,207,244,255,244,0,206],
[294,234,284,260,249,264,311,264,274,286,295,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 168, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,208,208,244,259,210,248,208,228,182,225,295],
[187,0,146,147,148,120,155,118,143,80,120,209,267],
[293,355,0,258,254,265,304,226,217,224,294,286,404],
[293,354,243,0,225,246,309,244,249,195,288,212,348],
[257,353,247,276,0,282,311,280,202,232,278,186,331],
[242,381,236,255,219,0,303,245,225,147,208,120,265],
[291,346,197,192,190,198,0,236,206,131,247,203,330],
[253,383,275,257,221,256,265,0,278,132,268,249,416],
[293,358,284,252,299,276,295,223,0,248,307,209,321],
[273,421,277,306,269,354,370,369,253,0,295,214,409],
[319,381,207,213,223,293,254,233,194,206,0,138,364],
[276,292,215,289,315,381,298,252,292,287,363,0,355],
[206,234,97,153,170,236,171,85,180,92,137,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 169, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,339,339,339,339,0,277,277,228,339,173,277],
[224,0,335,501,339,339,224,501,173,390,335,335,339],
[162,166,0,166,166,339,162,328,0,166,111,273,277],
[162,0,335,0,0,339,162,162,0,224,273,273,277],
[162,162,335,501,0,501,162,273,273,390,335,335,277],
[162,162,162,162,0,0,162,162,162,162,273,273,0],
[501,277,339,339,339,339,0,277,277,339,339,173,277],
[224,0,173,339,228,339,224,0,0,228,173,173,277],
[224,328,501,501,228,339,224,501,0,390,335,335,277],
[273,111,335,277,111,339,162,273,111,0,273,273,277],
[162,166,390,228,166,228,162,328,166,228,0,335,166],
[328,166,228,228,166,228,328,328,166,228,166,0,166],
[224,162,224,224,224,501,224,224,224,224,335,335,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 170, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,225,240,247,250,263,248,272,237,244,263,254],
[266,0,242,302,275,273,289,267,283,310,257,283,291],
[276,259,0,260,282,262,275,245,301,305,285,279,241],
[261,199,241,0,246,239,253,240,252,254,252,241,249],
[254,226,219,255,0,243,261,241,271,245,254,256,247],
[251,228,239,262,258,0,241,233,252,277,256,247,263],
[238,212,226,248,240,260,0,200,244,251,233,207,222],
[253,234,256,261,260,268,301,0,280,285,249,249,270],
[229,218,200,249,230,249,257,221,0,258,243,223,228],
[264,191,196,247,256,224,250,216,243,0,231,234,247],
[257,244,216,249,247,245,268,252,258,270,0,247,260],
[238,218,222,260,245,254,294,252,278,267,254,0,268],
[247,210,260,252,254,238,279,231,273,254,241,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 171, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,235,252,226,244,224,247,239,239,258,251,242],
[260,0,253,252,258,262,244,269,245,263,260,271,269],
[266,248,0,242,263,248,267,256,248,275,259,262,262],
[249,249,259,0,249,253,253,256,244,239,284,248,246],
[275,243,238,252,0,254,243,254,255,262,271,260,262],
[257,239,253,248,247,0,254,251,235,265,271,250,251],
[277,257,234,248,258,247,0,260,247,246,286,264,256],
[254,232,245,245,247,250,241,0,242,256,271,261,243],
[262,256,253,257,246,266,254,259,0,244,287,269,262],
[262,238,226,262,239,236,255,245,257,0,260,262,251],
[243,241,242,217,230,230,215,230,214,241,0,252,238],
[250,230,239,253,241,251,237,240,232,239,249,0,231],
[259,232,239,255,239,250,245,258,239,250,263,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 172, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,254,250,258,270,240,237,252,240,252,253,257],
[243,0,237,253,240,262,260,250,263,243,247,239,262],
[247,264,0,255,242,259,242,253,239,248,252,255,268],
[251,248,246,0,240,245,233,235,236,231,243,247,245],
[243,261,259,261,0,259,231,259,266,250,260,272,265],
[231,239,242,256,242,0,241,264,274,248,255,236,265],
[261,241,259,268,270,260,0,255,269,253,250,257,268],
[264,251,248,266,242,237,246,0,260,270,246,246,281],
[249,238,262,265,235,227,232,241,0,251,246,246,264],
[261,258,253,270,251,253,248,231,250,0,261,250,276],
[249,254,249,258,241,246,251,255,255,240,0,259,260],
[248,262,246,254,229,265,244,255,255,251,242,0,263],
[244,239,233,256,236,236,233,220,237,225,241,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 173, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,264,263,265,254,253,256,250,261,254,270,268],
[244,0,244,252,247,244,256,250,251,257,256,252,252],
[237,257,0,255,260,258,265,253,260,256,244,263,247],
[238,249,246,0,250,244,228,250,246,236,244,255,259],
[236,254,241,251,0,237,255,265,249,247,251,258,257],
[247,257,243,257,264,0,255,245,260,252,259,277,240],
[248,245,236,273,246,246,0,260,265,258,248,241,256],
[245,251,248,251,236,256,241,0,241,244,241,254,256],
[251,250,241,255,252,241,236,260,0,245,255,257,239],
[240,244,245,265,254,249,243,257,256,0,252,256,262],
[247,245,257,257,250,242,253,260,246,249,0,263,242],
[231,249,238,246,243,224,260,247,244,245,238,0,256],
[233,249,254,242,244,261,245,245,262,239,259,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 174, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,253,239,236,244,242,252,236,229,258,231,244],
[253,0,263,247,249,249,261,246,248,259,267,238,251],
[248,238,0,254,252,238,248,237,248,250,280,235,235],
[262,254,247,0,251,243,245,243,258,253,267,228,243],
[265,252,249,250,0,266,249,250,241,254,275,227,241],
[257,252,263,258,235,0,248,255,245,261,249,226,232],
[259,240,253,256,252,253,0,247,255,252,268,246,243],
[249,255,264,258,251,246,254,0,266,254,263,250,251],
[265,253,253,243,260,256,246,235,0,239,266,230,244],
[272,242,251,248,247,240,249,247,262,0,238,235,216],
[243,234,221,234,226,252,233,238,235,263,0,223,232],
[270,263,266,273,274,275,255,251,271,266,278,0,247],
[257,250,266,258,260,269,258,250,257,285,269,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 175, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,259,256,229,259,281,261,267,256,264,272,286],
[220,0,256,224,204,237,246,241,247,212,234,245,238],
[242,245,0,234,227,219,232,264,237,253,248,236,245],
[245,277,267,0,234,258,240,272,266,270,302,266,282],
[272,297,274,267,0,226,263,269,279,243,252,258,285],
[242,264,282,243,275,0,246,260,290,282,304,280,280],
[220,255,269,261,238,255,0,232,265,259,267,242,236],
[240,260,237,229,232,241,269,0,265,251,230,215,245],
[234,254,264,235,222,211,236,236,0,245,289,236,258],
[245,289,248,231,258,219,242,250,256,0,279,259,254],
[237,267,253,199,249,197,234,271,212,222,0,267,245],
[229,256,265,235,243,221,259,286,265,242,234,0,279],
[215,263,256,219,216,221,265,256,243,247,256,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 176, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,260,265,246,265,252,239,256,234,263,244,249],
[247,0,246,254,237,253,264,234,250,240,248,249,245],
[241,255,0,247,244,238,262,235,253,249,240,254,243],
[236,247,254,0,250,254,254,249,254,240,256,248,245],
[255,264,257,251,0,258,261,243,242,248,257,246,255],
[236,248,263,247,243,0,244,243,229,230,239,220,251],
[249,237,239,247,240,257,0,233,224,239,236,226,242],
[262,267,266,252,258,258,268,0,259,244,249,256,250],
[245,251,248,247,259,272,277,242,0,247,249,242,245],
[267,261,252,261,253,271,262,257,254,0,248,242,240],
[238,253,261,245,244,262,265,252,252,253,0,250,250],
[257,252,247,253,255,281,275,245,259,259,251,0,251],
[252,256,258,256,246,250,259,251,256,261,251,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 177, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,252,237,238,233,242,253,229,237,228,211,248],
[272,0,249,247,250,253,254,254,233,273,257,226,259],
[249,252,0,255,252,246,255,249,247,275,243,240,229],
[264,254,246,0,235,251,245,245,261,269,258,238,262],
[263,251,249,266,0,244,255,263,246,264,266,240,258],
[268,248,255,250,257,0,251,258,254,268,256,242,246],
[259,247,246,256,246,250,0,258,241,280,261,246,258],
[248,247,252,256,238,243,243,0,238,255,243,223,254],
[272,268,254,240,255,247,260,263,0,266,259,251,255],
[264,228,226,232,237,233,221,246,235,0,232,231,240],
[273,244,258,243,235,245,240,258,242,269,0,248,258],
[290,275,261,263,261,259,255,278,250,270,253,0,279],
[253,242,272,239,243,255,243,247,246,261,243,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 178, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,241,252,258,244,243,249,251,233,198,213,259],
[276,0,257,248,296,271,294,268,263,243,230,271,261],
[260,244,0,243,244,245,230,229,258,239,202,228,244],
[249,253,258,0,258,266,247,262,266,268,251,277,269],
[243,205,257,243,0,221,236,237,242,247,234,228,257],
[257,230,256,235,280,0,234,265,248,240,237,256,249],
[258,207,271,254,265,267,0,260,237,231,224,230,240],
[252,233,272,239,264,236,241,0,244,260,234,249,263],
[250,238,243,235,259,253,264,257,0,248,237,240,261],
[268,258,262,233,254,261,270,241,253,0,230,239,244],
[303,271,299,250,267,264,277,267,264,271,0,254,289],
[288,230,273,224,273,245,271,252,261,262,247,0,254],
[242,240,257,232,244,252,261,238,240,257,212,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 179, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,240,258,247,248,268,253,246,260,249,270,258],
[254,0,231,236,247,233,252,244,239,227,239,260,253],
[261,270,0,269,253,270,262,256,270,268,249,260,271],
[243,265,232,0,253,258,267,260,252,261,267,263,264],
[254,254,248,248,0,244,263,258,271,247,257,266,248],
[253,268,231,243,257,0,247,237,237,245,241,263,246],
[233,249,239,234,238,254,0,243,242,218,243,237,241],
[248,257,245,241,243,264,258,0,241,240,246,260,251],
[255,262,231,249,230,264,259,260,0,238,253,265,259],
[241,274,233,240,254,256,283,261,263,0,241,275,277],
[252,262,252,234,244,260,258,255,248,260,0,248,272],
[231,241,241,238,235,238,264,241,236,226,253,0,252],
[243,248,230,237,253,255,260,250,242,224,229,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 180, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,256,243,220,260,251,250,241,249,227,245,248],
[275,0,277,276,243,252,262,254,255,275,238,259,271],
[245,224,0,252,240,234,239,216,227,246,215,262,262],
[258,225,249,0,227,246,236,253,210,270,199,266,240],
[281,258,261,274,0,264,281,255,257,270,250,267,264],
[241,249,267,255,237,0,274,248,230,275,223,271,252],
[250,239,262,265,220,227,0,278,225,253,234,259,245],
[251,247,285,248,246,253,223,0,224,268,244,269,259],
[260,246,274,291,244,271,276,277,0,279,261,293,290],
[252,226,255,231,231,226,248,233,222,0,237,257,249],
[274,263,286,302,251,278,267,257,240,264,0,304,273],
[256,242,239,235,234,230,242,232,208,244,197,0,253],
[253,230,239,261,237,249,256,242,211,252,228,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 181, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,226,236,270,238,266,223,226,236,198,220,239],
[261,0,266,253,274,233,281,238,243,266,261,237,265],
[275,235,0,236,286,226,269,257,268,257,239,241,263],
[265,248,265,0,258,252,286,234,245,251,260,259,260],
[231,227,215,243,0,209,251,217,239,225,217,241,240],
[263,268,275,249,292,0,284,247,241,294,251,273,238],
[235,220,232,215,250,217,0,211,219,220,205,214,212],
[278,263,244,267,284,254,290,0,259,258,265,253,276],
[275,258,233,256,262,260,282,242,0,261,244,266,252],
[265,235,244,250,276,207,281,243,240,0,239,215,259],
[303,240,262,241,284,250,296,236,257,262,0,241,242],
[281,264,260,242,260,228,287,248,235,286,260,0,239],
[262,236,238,241,261,263,289,225,249,242,259,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 182, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,256,256,267,262,256,267,238,263,257,252,271],
[243,0,258,252,257,238,238,252,247,255,259,251,252],
[245,243,0,249,231,239,241,250,234,242,247,239,263],
[245,249,252,0,246,243,237,244,242,244,241,244,272],
[234,244,270,255,0,256,238,256,236,256,246,249,262],
[239,263,262,258,245,0,248,268,240,253,261,253,268],
[245,263,260,264,263,253,0,251,263,257,262,259,266],
[234,249,251,257,245,233,250,0,235,252,254,251,250],
[263,254,267,259,265,261,238,266,0,257,260,263,268],
[238,246,259,257,245,248,244,249,244,0,255,253,255],
[244,242,254,260,255,240,239,247,241,246,0,243,258],
[249,250,262,257,252,248,242,250,238,248,258,0,252],
[230,249,238,229,239,233,235,251,233,246,243,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 183, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,248,237,263,244,247,258,245,254,259,269,257],
[246,0,221,235,258,232,247,248,254,270,262,262,265],
[253,280,0,232,267,260,238,252,257,287,256,269,278],
[264,266,269,0,266,254,256,249,246,280,270,274,284],
[238,243,234,235,0,235,245,242,241,251,245,231,243],
[257,269,241,247,266,0,262,265,243,267,270,264,264],
[254,254,263,245,256,239,0,249,259,259,252,268,268],
[243,253,249,252,259,236,252,0,262,242,249,264,254],
[256,247,244,255,260,258,242,239,0,261,263,277,269],
[247,231,214,221,250,234,242,259,240,0,248,257,251],
[242,239,245,231,256,231,249,252,238,253,0,271,260],
[232,239,232,227,270,237,233,237,224,244,230,0,247],
[244,236,223,217,258,237,233,247,232,250,241,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 184, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,256,261,251,250,245,255,259,253,236,250,250],
[244,0,246,229,241,233,231,225,246,241,225,232,239],
[245,255,0,267,238,233,237,236,245,259,241,250,243],
[240,272,234,0,268,242,237,239,244,251,229,249,240],
[250,260,263,233,0,255,239,231,250,262,243,241,237],
[251,268,268,259,246,0,237,225,256,247,239,254,261],
[256,270,264,264,262,264,0,239,250,252,251,273,248],
[246,276,265,262,270,276,262,0,260,259,250,259,257],
[242,255,256,257,251,245,251,241,0,239,234,242,236],
[248,260,242,250,239,254,249,242,262,0,235,263,251],
[265,276,260,272,258,262,250,251,267,266,0,249,272],
[251,269,251,252,260,247,228,242,259,238,252,0,262],
[251,262,258,261,264,240,253,244,265,250,229,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 185, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,289,292,260,218,237,222,232,256,238,251,236],
[300,0,275,259,280,254,240,276,258,273,265,263,236],
[212,226,0,223,252,238,228,249,245,245,219,241,269],
[209,242,278,0,227,243,245,234,229,246,210,243,256],
[241,221,249,274,0,269,213,232,251,282,229,229,228],
[283,247,263,258,232,0,216,210,239,263,262,250,235],
[264,261,273,256,288,285,0,250,258,266,263,247,233],
[279,225,252,267,269,291,251,0,222,281,274,247,238],
[269,243,256,272,250,262,243,279,0,266,243,233,277],
[245,228,256,255,219,238,235,220,235,0,214,221,227],
[263,236,282,291,272,239,238,227,258,287,0,237,258],
[250,238,260,258,272,251,254,254,268,280,264,0,261],
[265,265,232,245,273,266,268,263,224,274,243,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 186, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,252,240,227,256,246,235,272,272,237,238,276],
[270,0,243,245,262,279,277,256,261,284,247,263,269],
[249,258,0,277,280,290,301,254,280,250,277,255,283],
[261,256,224,0,226,276,249,246,275,254,242,218,258],
[274,239,221,275,0,278,277,260,264,263,259,257,257],
[245,222,211,225,223,0,250,238,251,262,229,216,273],
[255,224,200,252,224,251,0,214,232,229,224,223,250],
[266,245,247,255,241,263,287,0,271,285,289,227,275],
[229,240,221,226,237,250,269,230,0,261,232,227,249],
[229,217,251,247,238,239,272,216,240,0,241,252,278],
[264,254,224,259,242,272,277,212,269,260,0,240,252],
[263,238,246,283,244,285,278,274,274,249,261,0,295],
[225,232,218,243,244,228,251,226,252,223,249,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 187, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,264,268,269,262,254,240,238,239,257,275,246],
[239,0,243,248,270,236,262,226,218,244,261,250,224],
[237,258,0,238,272,259,250,239,238,260,262,255,245],
[233,253,263,0,255,257,250,243,225,247,258,258,247],
[232,231,229,246,0,244,236,222,218,239,230,246,220],
[239,265,242,244,257,0,257,226,229,245,255,260,242],
[247,239,251,251,265,244,0,212,263,255,262,241,250],
[261,275,262,258,279,275,289,0,239,255,245,267,255],
[263,283,263,276,283,272,238,262,0,274,271,282,259],
[262,257,241,254,262,256,246,246,227,0,254,256,234],
[244,240,239,243,271,246,239,256,230,247,0,261,239],
[226,251,246,243,255,241,260,234,219,245,240,0,238],
[255,277,256,254,281,259,251,246,242,267,262,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 188, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,245,229,246,233,233,239,231,228,252,250,262],
[255,0,227,234,245,233,254,250,244,225,258,251,248],
[256,274,0,255,249,264,270,263,255,238,262,259,258],
[272,267,246,0,261,258,268,264,278,252,269,267,271],
[255,256,252,240,0,248,243,245,253,212,249,242,260],
[268,268,237,243,253,0,264,271,245,241,244,252,262],
[268,247,231,233,258,237,0,252,227,222,261,243,240],
[262,251,238,237,256,230,249,0,254,237,239,249,252],
[270,257,246,223,248,256,274,247,0,226,226,254,257],
[273,276,263,249,289,260,279,264,275,0,270,285,258],
[249,243,239,232,252,257,240,262,275,231,0,255,258],
[251,250,242,234,259,249,258,252,247,216,246,0,229],
[239,253,243,230,241,239,261,249,244,243,243,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 189, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,249,255,212,266,260,233,240,276,265,255,248],
[240,0,255,264,254,246,270,230,253,250,249,222,243],
[252,246,0,251,233,244,266,232,242,258,239,224,256],
[246,237,250,0,239,227,259,228,237,262,245,233,245],
[289,247,268,262,0,281,271,258,262,255,263,256,247],
[235,255,257,274,220,0,244,242,234,283,256,241,257],
[241,231,235,242,230,257,0,229,229,260,258,237,253],
[268,271,269,273,243,259,272,0,259,257,258,232,257],
[261,248,259,264,239,267,272,242,0,235,259,214,255],
[225,251,243,239,246,218,241,244,266,0,250,238,231],
[236,252,262,256,238,245,243,243,242,251,0,226,261],
[246,279,277,268,245,260,264,269,287,263,275,0,274],
[253,258,245,256,254,244,248,244,246,270,240,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 190, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,253,220,241,257,253,245,247,268,247,247,239],
[255,0,252,232,238,267,243,247,256,272,250,259,233],
[248,249,0,230,241,252,242,246,252,280,239,273,259],
[281,269,271,0,258,269,261,249,265,272,271,263,238],
[260,263,260,243,0,254,250,255,269,270,271,267,259],
[244,234,249,232,247,0,247,229,243,276,240,248,228],
[248,258,259,240,251,254,0,240,255,276,271,268,245],
[256,254,255,252,246,272,261,0,261,270,261,264,241],
[254,245,249,236,232,258,246,240,0,254,254,250,234],
[233,229,221,229,231,225,225,231,247,0,241,233,224],
[254,251,262,230,230,261,230,240,247,260,0,250,228],
[254,242,228,238,234,253,233,237,251,268,251,0,243],
[262,268,242,263,242,273,256,260,267,277,273,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 191, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,227,197,252,255,318,257,253,381,264,270,279],
[209,0,231,242,272,265,259,271,252,311,239,271,219],
[274,270,0,222,224,209,290,269,249,319,222,298,248],
[304,259,279,0,270,274,254,250,278,297,236,267,187],
[249,229,277,231,0,269,294,230,294,329,220,231,271],
[246,236,292,227,232,0,326,308,265,302,235,262,236],
[183,242,211,247,207,175,0,182,169,221,214,201,185],
[244,230,232,251,271,193,319,0,274,339,228,216,211],
[248,249,252,223,207,236,332,227,0,295,202,236,199],
[120,190,182,204,172,199,280,162,206,0,185,175,187],
[237,262,279,265,281,266,287,273,299,316,0,235,263],
[231,230,203,234,270,239,300,285,265,326,266,0,246],
[222,282,253,314,230,265,316,290,302,314,238,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 192, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,260,247,259,257,258,252,253,252,253,230,270],
[246,0,251,255,264,258,241,238,246,267,255,264,257],
[241,250,0,240,270,236,240,245,217,264,251,248,265],
[254,246,261,0,260,239,268,251,238,263,266,256,259],
[242,237,231,241,0,230,242,231,230,254,242,229,250],
[244,243,265,262,271,0,254,249,247,283,274,247,287],
[243,260,261,233,259,247,0,236,238,253,250,246,266],
[249,263,256,250,270,252,265,0,248,266,262,256,283],
[248,255,284,263,271,254,263,253,0,265,265,265,273],
[249,234,237,238,247,218,248,235,236,0,249,240,262],
[248,246,250,235,259,227,251,239,236,252,0,251,266],
[271,237,253,245,272,254,255,245,236,261,250,0,273],
[231,244,236,242,251,214,235,218,228,239,235,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 193, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,248,252,258,280,249,257,256,242,283,266,265],
[245,0,259,234,256,269,236,250,266,245,288,275,244],
[253,242,0,243,248,256,247,254,245,236,280,248,251],
[249,267,258,0,255,277,249,260,272,245,263,278,254],
[243,245,253,246,0,275,237,254,257,251,271,245,256],
[221,232,245,224,226,0,221,237,255,235,270,241,250],
[252,265,254,252,264,280,0,263,251,248,277,265,259],
[244,251,247,241,247,264,238,0,253,250,268,262,245],
[245,235,256,229,244,246,250,248,0,239,270,265,259],
[259,256,265,256,250,266,253,251,262,0,279,269,255],
[218,213,221,238,230,231,224,233,231,222,0,247,233],
[235,226,253,223,256,260,236,239,236,232,254,0,235],
[236,257,250,247,245,251,242,256,242,246,268,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 194, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,224,246,252,240,233,230,219,263,248,258,265],
[259,0,228,256,261,244,228,240,235,261,241,253,249],
[277,273,0,250,258,252,247,259,257,256,254,270,260],
[255,245,251,0,245,224,239,258,248,236,255,259,253],
[249,240,243,256,0,248,244,249,235,253,258,265,260],
[261,257,249,277,253,0,245,253,252,265,264,268,266],
[268,273,254,262,257,256,0,245,257,262,248,270,274],
[271,261,242,243,252,248,256,0,241,254,265,262,280],
[282,266,244,253,266,249,244,260,0,276,258,280,250],
[238,240,245,265,248,236,239,247,225,0,253,268,255],
[253,260,247,246,243,237,253,236,243,248,0,258,235],
[243,248,231,242,236,233,231,239,221,233,243,0,244],
[236,252,241,248,241,235,227,221,251,246,266,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 195, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,227,279,247,276,235,254,254,263,247,253,260],
[231,0,232,260,236,264,257,248,224,239,213,210,240],
[274,269,0,289,263,270,257,263,255,278,243,225,289],
[222,241,212,0,246,248,242,231,228,257,230,233,237],
[254,265,238,255,0,266,240,272,259,282,244,242,265],
[225,237,231,253,235,0,251,250,248,266,198,228,269],
[266,244,244,259,261,250,0,265,262,262,249,218,231],
[247,253,238,270,229,251,236,0,248,265,227,239,249],
[247,277,246,273,242,253,239,253,0,269,221,236,258],
[238,262,223,244,219,235,239,236,232,0,220,230,247],
[254,288,258,271,257,303,252,274,280,281,0,250,276],
[248,291,276,268,259,273,283,262,265,271,251,0,283],
[241,261,212,264,236,232,270,252,243,254,225,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 196, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,183,237,203,228,237,205,244,233,264,212,239],
[279,0,264,277,248,266,274,221,250,275,248,270,274],
[318,237,0,245,266,264,277,263,263,260,227,246,267],
[264,224,256,0,227,293,231,210,251,258,247,223,255],
[298,253,235,274,0,272,251,287,269,249,269,310,271],
[273,235,237,208,229,0,248,243,254,305,234,256,233],
[264,227,224,270,250,253,0,247,229,262,242,264,243],
[296,280,238,291,214,258,254,0,271,274,269,255,267],
[257,251,238,250,232,247,272,230,0,236,266,233,262],
[268,226,241,243,252,196,239,227,265,0,231,244,222],
[237,253,274,254,232,267,259,232,235,270,0,234,222],
[289,231,255,278,191,245,237,246,268,257,267,0,265],
[262,227,234,246,230,268,258,234,239,279,279,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 197, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,268,260,260,257,225,270,274,281,286,310,242],
[268,0,273,239,259,266,259,260,283,281,303,273,242],
[233,228,0,230,219,236,213,238,277,254,278,263,209],
[241,262,271,0,249,270,240,250,299,289,293,294,247],
[241,242,282,252,0,254,212,250,274,295,283,246,245],
[244,235,265,231,247,0,221,232,262,305,250,258,226],
[276,242,288,261,289,280,0,265,304,293,295,279,279],
[231,241,263,251,251,269,236,0,288,288,301,253,227],
[227,218,224,202,227,239,197,213,0,234,232,257,203],
[220,220,247,212,206,196,208,213,267,0,295,231,225],
[215,198,223,208,218,251,206,200,269,206,0,223,201],
[191,228,238,207,255,243,222,248,244,270,278,0,206],
[259,259,292,254,256,275,222,274,298,276,300,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 198, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,261,256,243,265,253,260,237,254,253,256,247],
[245,0,291,264,268,272,249,271,248,262,264,275,279],
[240,210,0,230,224,221,227,250,210,235,225,228,221],
[245,237,271,0,242,257,256,256,242,254,259,252,259],
[258,233,277,259,0,275,232,256,228,254,250,260,252],
[236,229,280,244,226,0,254,251,236,242,242,261,235],
[248,252,274,245,269,247,0,264,235,238,233,269,251],
[241,230,251,245,245,250,237,0,230,243,247,248,252],
[264,253,291,259,273,265,266,271,0,258,249,281,268],
[247,239,266,247,247,259,263,258,243,0,247,254,252],
[248,237,276,242,251,259,268,254,252,254,0,264,268],
[245,226,273,249,241,240,232,253,220,247,237,0,253],
[254,222,280,242,249,266,250,249,233,249,233,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 199, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,246,208,199,247,229,213,236,241,206,260,181],
[249,0,225,208,207,280,243,267,258,259,234,264,213],
[255,276,0,227,233,283,265,237,261,272,270,279,193],
[293,293,274,0,261,299,278,283,288,284,273,295,249],
[302,294,268,240,0,287,288,289,301,318,262,283,252],
[254,221,218,202,214,0,232,240,232,266,210,256,187],
[272,258,236,223,213,269,0,240,256,274,232,243,230],
[288,234,264,218,212,261,261,0,251,263,228,261,222],
[265,243,240,213,200,269,245,250,0,286,239,277,234],
[260,242,229,217,183,235,227,238,215,0,222,243,209],
[295,267,231,228,239,291,269,273,262,279,0,293,213],
[241,237,222,206,218,245,258,240,224,258,208,0,195],
[320,288,308,252,249,314,271,279,267,292,288,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om) 
    start_time = time.time()
    d = alg.dRP(sc.ranking_to_lineal(sc.borda(om)), om)
    algorithm.best_dist = d
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 501, 200, "ME-BBRCWd", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebbrcwd/mebbrcwd_13_501.csv", index=False, header=False)
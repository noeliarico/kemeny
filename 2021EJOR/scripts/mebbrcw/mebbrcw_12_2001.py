
import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg

rep = 1
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,1060,1078,984,1055,946,1026,1053,1002,1027,1000,1032],
[941,0,1056,952,963,973,986,1020,1000,922,970,983],
[923,945,0,895,914,916,952,951,890,924,907,954],
[1017,1049,1106,0,1045,993,1100,993,981,1003,990,1024],
[946,1038,1087,956,0,900,1005,1039,942,955,956,1025],
[1055,1028,1085,1008,1101,0,1046,1025,968,1046,1041,1073],
[975,1015,1049,901,996,955,0,983,981,993,912,942],
[948,981,1050,1008,962,976,1018,0,949,1013,953,996],
[999,1001,1111,1020,1059,1033,1020,1052,0,1052,989,1041],
[974,1079,1077,998,1046,955,1008,988,949,0,916,957],
[1001,1031,1094,1011,1045,960,1089,1048,1012,1085,0,1044],
[969,1018,1047,977,976,928,1059,1005,960,1044,957,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 1, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,959,977,978,947,959,1021,1003,969,949,1059,978],
[1042,0,1025,1033,1000,1059,1056,1056,1047,956,1106,1089],
[1024,976,0,1015,980,967,1051,1009,1029,985,1028,1011],
[1023,968,986,0,1001,1099,1030,997,1002,1034,1025,1025],
[1054,1001,1021,1000,0,1056,1043,1000,982,1068,1071,1033],
[1042,942,1034,902,945,0,993,1012,1012,948,1054,995],
[980,945,950,971,958,1008,0,972,982,956,1004,1012],
[998,945,992,1004,1001,989,1029,0,1034,998,993,1049],
[1032,954,972,999,1019,989,1019,967,0,1006,987,976],
[1052,1045,1016,967,933,1053,1045,1003,995,0,999,1042],
[942,895,973,976,930,947,997,1008,1014,1002,0,1002],
[1023,912,990,976,968,1006,989,952,1025,959,999,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 2, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,993,993,1014,1002,965,996,1002,1010,957,965,1028],
[1008,0,1011,1008,1011,982,991,996,1002,985,1013,1011],
[1008,990,0,1027,1035,996,1016,1027,1008,1003,975,1041],
[987,993,974,0,1036,1000,1022,1011,995,978,999,1043],
[999,990,966,965,0,956,982,1006,1001,959,978,1033],
[1036,1019,1005,1001,1045,0,982,979,981,959,991,1028],
[1005,1010,985,979,1019,1019,0,1018,1017,990,1038,1028],
[999,1005,974,990,995,1022,983,0,1011,975,949,1002],
[991,999,993,1006,1000,1020,984,990,0,964,969,1000],
[1044,1016,998,1023,1042,1042,1011,1026,1037,0,1033,1051],
[1036,988,1026,1002,1023,1010,963,1052,1032,968,0,1026],
[973,990,960,958,968,973,973,999,1001,950,975,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 3, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,954,1005,1029,1013,985,994,991,982,1018,1024,984],
[1047,0,1018,969,1019,994,962,964,1009,982,1003,1039],
[996,983,0,941,997,934,969,988,1023,956,1054,968],
[972,1032,1060,0,1028,1050,1022,909,1032,1057,1049,1023],
[988,982,1004,973,0,1000,966,876,943,916,960,1005],
[1016,1007,1067,951,1001,0,919,947,999,957,1049,1007],
[1007,1039,1032,979,1035,1082,0,1027,1093,1021,1042,1048],
[1010,1037,1013,1092,1125,1054,974,0,1020,1029,1041,1031],
[1019,992,978,969,1058,1002,908,981,0,1030,1016,947],
[983,1019,1045,944,1085,1044,980,972,971,0,1054,944],
[977,998,947,952,1041,952,959,960,985,947,0,1016],
[1017,962,1033,978,996,994,953,970,1054,1057,985,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 4, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1111,919,1096,979,956,949,1063,1040,1005,980,970],
[890,0,915,1045,939,925,962,1021,951,884,940,926],
[1082,1086,0,1186,1005,1049,1037,1022,1161,1031,954,995],
[905,956,815,0,936,911,941,913,994,955,874,851],
[1022,1062,996,1065,0,1103,948,989,1111,968,984,917],
[1045,1076,952,1090,898,0,1046,957,1043,914,904,944],
[1052,1039,964,1060,1053,955,0,983,1013,1020,989,939],
[938,980,979,1088,1012,1044,1018,0,958,1039,871,1009],
[961,1050,840,1007,890,958,988,1043,0,996,910,888],
[996,1117,970,1046,1033,1087,981,962,1005,0,901,920],
[1021,1061,1047,1127,1017,1097,1012,1130,1091,1100,0,997],
[1031,1075,1006,1150,1084,1057,1062,992,1113,1081,1004,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 5, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,880,935,958,990,978,937,1005,960,869,939,1061],
[1121,0,980,1018,1127,1059,1073,1083,1023,1006,1004,1117],
[1066,1021,0,1023,1040,1060,1089,1032,973,991,1022,1098],
[1043,983,978,0,1061,963,988,1018,1016,922,956,1088],
[1011,874,961,940,0,964,953,994,980,940,873,1013],
[1023,942,941,1038,1037,0,963,946,948,893,962,1000],
[1064,928,912,1013,1048,1038,0,1020,1003,927,971,1042],
[996,918,969,983,1007,1055,981,0,938,873,927,1050],
[1041,978,1028,985,1021,1053,998,1063,0,939,987,1102],
[1132,995,1010,1079,1061,1108,1074,1128,1062,0,950,1147],
[1062,997,979,1045,1128,1039,1030,1074,1014,1051,0,1074],
[940,884,903,913,988,1001,959,951,899,854,927,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 6, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,992,995,967,1004,1024,1011,963,1036,983,1028,971],
[1009,0,1013,1033,997,1025,999,992,1055,1037,1042,994],
[1006,988,0,962,977,990,1035,1002,1021,978,1039,970],
[1034,968,1039,0,994,1015,998,998,1031,1010,1039,957],
[997,1004,1024,1007,0,982,1025,985,998,965,1023,945],
[977,976,1011,986,1019,0,989,946,1021,997,1016,989],
[990,1002,966,1003,976,1012,0,963,999,959,999,959],
[1038,1009,999,1003,1016,1055,1038,0,1033,995,1040,1022],
[965,946,980,970,1003,980,1002,968,0,966,1006,961],
[1018,964,1023,991,1036,1004,1042,1006,1035,0,1035,988],
[973,959,962,962,978,985,1002,961,995,966,0,951],
[1030,1007,1031,1044,1056,1012,1042,979,1040,1013,1050,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 7, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,989,977,1048,1019,1035,1023,1025,1010,1006,994,1042],
[1012,0,956,1031,999,1056,1000,992,975,1000,1001,1015],
[1024,1045,0,1048,1014,1046,1052,1022,995,1032,1042,1038],
[953,970,953,0,982,991,992,996,946,1009,977,988],
[982,1002,987,1019,0,1038,989,1016,985,1014,1000,1029],
[966,945,955,1010,963,0,965,983,973,961,930,984],
[978,1001,949,1009,1012,1036,0,1019,1000,1002,1016,973],
[976,1009,979,1005,985,1018,982,0,963,992,966,1013],
[991,1026,1006,1055,1016,1028,1001,1038,0,1022,1014,1014],
[995,1001,969,992,987,1040,999,1009,979,0,978,997],
[1007,1000,959,1024,1001,1071,985,1035,987,1023,0,1018],
[959,986,963,1013,972,1017,1028,988,987,1004,983,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 8, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1039,1006,1039,1006,1020,1034,1056,972,1012,1020,1026],
[962,0,1008,1043,976,1018,980,968,926,966,932,1000],
[995,993,0,1025,991,1043,958,1070,971,991,978,994],
[962,958,976,0,946,1050,995,968,1007,952,963,965],
[995,1025,1010,1055,0,1042,1005,1027,1005,1019,982,1009],
[981,983,958,951,959,0,938,990,926,994,941,965],
[967,1021,1043,1006,996,1063,0,1072,1006,1013,981,1019],
[945,1033,931,1033,974,1011,929,0,951,999,914,975],
[1029,1075,1030,994,996,1075,995,1050,0,1019,1002,1022],
[989,1035,1010,1049,982,1007,988,1002,982,0,960,1022],
[981,1069,1023,1038,1019,1060,1020,1087,999,1041,0,1033],
[975,1001,1007,1036,992,1036,982,1026,979,979,968,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 9, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1049,1005,1028,1019,971,1003,1013,971,1053,980,1029],
[952,0,955,950,907,920,942,951,965,1003,986,996],
[996,1046,0,992,990,981,974,998,965,1032,987,1015],
[973,1051,1009,0,993,979,1012,1013,1005,1053,971,1032],
[982,1094,1011,1008,0,997,990,1006,1013,1053,1018,997],
[1030,1081,1020,1022,1004,0,1020,1004,968,1062,1020,1041],
[998,1059,1027,989,1011,981,0,996,1011,1077,1027,990],
[988,1050,1003,988,995,997,1005,0,1025,1065,999,1017],
[1030,1036,1036,996,988,1033,990,976,0,1034,1027,1024],
[948,998,969,948,948,939,924,936,967,0,982,957],
[1021,1015,1014,1030,983,981,974,1002,974,1019,0,1004],
[972,1005,986,969,1004,960,1011,984,977,1044,997,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 10, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,981,1076,988,1036,1032,1008,1026,1060,951,1034,1012],
[1020,0,1044,1007,993,1005,1060,999,1058,979,1024,1031],
[925,957,0,960,977,978,980,955,953,939,982,981],
[1013,994,1041,0,1032,1021,1018,1047,1036,1011,1022,1018],
[965,1008,1024,969,0,1019,1018,1009,998,975,1009,1018],
[969,996,1023,980,982,0,1003,1004,1019,955,1016,996],
[993,941,1021,983,983,998,0,980,1021,883,1018,962],
[975,1002,1046,954,992,997,1021,0,1015,929,1033,1019],
[941,943,1048,965,1003,982,980,986,0,918,994,1007],
[1050,1022,1062,990,1026,1046,1118,1072,1083,0,1071,1028],
[967,977,1019,979,992,985,983,968,1007,930,0,982],
[989,970,1020,983,983,1005,1039,982,994,973,1019,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 11, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1008,989,1030,998,1008,1046,1042,1030,1060,1041,1008],
[993,0,990,972,963,974,1021,1013,1010,1022,1008,981],
[1012,1011,0,984,965,1013,1026,1035,1013,1020,1014,1028],
[971,1029,1017,0,1008,1011,1031,1034,1026,1032,1012,1007],
[1003,1038,1036,993,0,1003,1046,1047,1026,1048,1030,1032],
[993,1027,988,990,998,0,1046,1006,1033,1049,1028,990],
[955,980,975,970,955,955,0,1008,985,986,1013,984],
[959,988,966,967,954,995,993,0,1001,1006,975,964],
[971,991,988,975,975,968,1016,1000,0,1002,993,985],
[941,979,981,969,953,952,1015,995,999,0,1008,992],
[960,993,987,989,971,973,988,1026,1008,993,0,989],
[993,1020,973,994,969,1011,1017,1037,1016,1009,1012,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 12, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,904,694,857,1094,891,978,641,697,943,647,824],
[1097,0,980,910,1046,927,1157,1013,850,1047,847,1024],
[1307,1021,0,1074,1033,825,1101,902,836,932,736,1107],
[1144,1091,927,0,1110,1084,1017,840,784,941,837,769],
[907,955,968,891,0,935,1147,835,819,961,780,966],
[1110,1074,1176,917,1066,0,1186,908,884,939,995,883],
[1023,844,900,984,854,815,0,883,829,966,711,904],
[1360,988,1099,1161,1166,1093,1118,0,994,1074,952,1064],
[1304,1151,1165,1217,1182,1117,1172,1007,0,1150,952,1227],
[1058,954,1069,1060,1040,1062,1035,927,851,0,795,989],
[1354,1154,1265,1164,1221,1006,1290,1049,1049,1206,0,933],
[1177,977,894,1232,1035,1118,1097,937,774,1012,1068,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 13, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,758,1015,969,1248,1019,722,788,945,575,808,1097],
[1243,0,1094,1136,1098,905,773,1004,1381,1110,1121,1009],
[986,907,0,1117,961,1035,979,1116,1029,779,1054,741],
[1032,865,884,0,1280,949,862,841,1313,955,1126,1123],
[753,903,1040,721,0,499,792,729,1132,593,678,729],
[982,1096,966,1052,1502,0,717,887,1114,750,907,954],
[1279,1228,1022,1139,1209,1284,0,903,1162,752,1323,1125],
[1213,997,885,1160,1272,1114,1098,0,1591,1060,880,1341],
[1056,620,972,688,869,887,839,410,0,886,709,997],
[1426,891,1222,1046,1408,1251,1249,941,1115,0,1199,1236],
[1193,880,947,875,1323,1094,678,1121,1292,802,0,926],
[904,992,1260,878,1272,1047,876,660,1004,765,1075,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 14, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1049,1019,1068,1063,1034,1017,990,1048,1040,1037,1014],
[952,0,980,1005,963,986,983,1001,988,962,966,945],
[982,1021,0,1016,977,1034,982,972,1025,955,969,1006],
[933,996,985,0,1004,1002,970,980,1030,987,943,990],
[938,1038,1024,997,0,992,1011,956,1041,964,990,985],
[967,1015,967,999,1009,0,980,960,1043,971,951,991],
[984,1018,1019,1031,990,1021,0,1000,1042,1006,986,992],
[1011,1000,1029,1021,1045,1041,1001,0,1082,1028,1014,989],
[953,1013,976,971,960,958,959,919,0,966,961,968],
[961,1039,1046,1014,1037,1030,995,973,1035,0,976,997],
[964,1035,1032,1058,1011,1050,1015,987,1040,1025,0,999],
[987,1056,995,1011,1016,1010,1009,1012,1033,1004,1002,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 15, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,989,977,1031,1004,999,1061,1007,1017,993,1014,999],
[1012,0,992,1081,991,1051,1078,1040,1038,1018,997,1005],
[1024,1009,0,1033,1008,967,1106,978,1005,1026,1012,1009],
[970,920,968,0,995,983,1046,985,967,1007,967,970],
[997,1010,993,1006,0,983,1054,987,1007,1046,974,987],
[1002,950,1034,1018,1018,0,1084,1023,1036,990,996,979],
[940,923,895,955,947,917,0,961,967,962,938,917],
[994,961,1023,1016,1014,978,1040,0,964,1000,1000,1002],
[984,963,996,1034,994,965,1034,1037,0,1025,1003,948],
[1008,983,975,994,955,1011,1039,1001,976,0,978,990],
[987,1004,989,1034,1027,1005,1063,1001,998,1023,0,987],
[1002,996,992,1031,1014,1022,1084,999,1053,1011,1014,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 16, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,999,1016,998,993,1044,962,1007,975,976,994,1026],
[1002,0,1016,996,1014,1062,983,1039,1041,986,1012,994],
[985,985,0,980,965,1025,982,991,924,972,960,971],
[1003,1005,1021,0,997,1077,1028,1008,990,972,1023,997],
[1008,987,1036,1004,0,1071,1008,996,983,947,1004,986],
[957,939,976,924,930,0,944,937,925,910,933,938],
[1039,1018,1019,973,993,1057,0,965,1026,1007,1026,996],
[994,962,1010,993,1005,1064,1036,0,1004,1017,997,1054],
[1026,960,1077,1011,1018,1076,975,997,0,988,1002,987],
[1025,1015,1029,1029,1054,1091,994,984,1013,0,1020,988],
[1007,989,1041,978,997,1068,975,1004,999,981,0,984],
[975,1007,1030,1004,1015,1063,1005,947,1014,1013,1017,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 17, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,981,1011,1025,990,1018,988,1016,1025,1016,993,1049],
[1020,0,986,1034,1004,1028,1020,1017,1017,1011,1020,1020],
[990,1015,0,1037,1001,1003,997,995,1046,1010,1035,996],
[976,967,964,0,981,1004,981,993,1026,1014,1013,995],
[1011,997,1000,1020,0,1021,1021,997,1046,1025,1040,1022],
[983,973,998,997,980,0,974,1011,1015,1014,1008,1025],
[1013,981,1004,1020,980,1027,0,976,1033,1005,1028,1040],
[985,984,1006,1008,1004,990,1025,0,1039,1004,1012,1008],
[976,984,955,975,955,986,968,962,0,992,1020,979],
[985,990,991,987,976,987,996,997,1009,0,1020,1010],
[1008,981,966,988,961,993,973,989,981,981,0,981],
[952,981,1005,1006,979,976,961,993,1022,991,1020,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 18, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,956,1021,1016,977,1013,1008,953,1000,1006,1001,1024],
[1045,0,1024,1017,985,1030,1015,1016,1047,1018,1009,1025],
[980,977,0,986,930,996,978,965,985,965,981,971],
[985,984,1015,0,968,1001,992,961,963,964,971,992],
[1024,1016,1071,1033,0,1002,1015,1005,1029,982,1028,1016],
[988,971,1005,1000,999,0,957,955,996,966,976,991],
[993,986,1023,1009,986,1044,0,1004,1009,983,1020,1016],
[1048,985,1036,1040,996,1046,997,0,1049,1037,1043,1041],
[1001,954,1016,1038,972,1005,992,952,0,975,1003,1016],
[995,983,1036,1037,1019,1035,1018,964,1026,0,999,1023],
[1000,992,1020,1030,973,1025,981,958,998,1002,0,981],
[977,976,1030,1009,985,1010,985,960,985,978,1020,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 19, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,944,1034,1028,992,860,1051,883,993,960,999,975],
[1057,0,1049,1103,1057,973,1075,965,1041,997,1103,1004],
[967,952,0,1035,938,959,1023,928,923,887,1031,874],
[973,898,966,0,999,921,1100,950,1027,909,1002,934],
[1009,944,1063,1002,0,941,1041,993,1018,944,965,970],
[1141,1028,1042,1080,1060,0,1173,1029,1098,1067,1069,982],
[950,926,978,901,960,828,0,954,942,932,1003,936],
[1118,1036,1073,1051,1008,972,1047,0,1012,982,1049,946],
[1008,960,1078,974,983,903,1059,989,0,986,1049,971],
[1041,1004,1114,1092,1057,934,1069,1019,1015,0,1036,951],
[1002,898,970,999,1036,932,998,952,952,965,0,896],
[1026,997,1127,1067,1031,1019,1065,1055,1030,1050,1105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 20, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,976,1004,990,964,987,989,956,1065,1009,994,1020],
[1025,0,1003,986,984,1008,1015,944,1058,1033,1050,1064],
[997,998,0,1005,988,1007,1005,1010,1007,1048,1003,1025],
[1011,1015,996,0,948,1012,1011,979,1016,1027,1004,1045],
[1037,1017,1013,1053,0,990,1024,1034,1030,1020,1042,1065],
[1014,993,994,989,1011,0,1024,1017,1043,1046,1034,1047],
[1012,986,996,990,977,977,0,996,1044,1038,1028,1022],
[1045,1057,991,1022,967,984,1005,0,1006,1074,1041,1031],
[936,943,994,985,971,958,957,995,0,1010,1033,1031],
[992,968,953,974,981,955,963,927,991,0,960,969],
[1007,951,998,997,959,967,973,960,968,1041,0,1045],
[981,937,976,956,936,954,979,970,970,1032,956,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 21, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1043,1021,974,1068,1030,1025,993,1019,1027,1045,994],
[958,0,1016,974,1012,985,1004,948,990,993,1026,993],
[980,985,0,943,1018,961,965,934,990,999,978,921],
[1027,1027,1058,0,1096,1043,1034,975,1006,1025,1018,1053],
[933,989,983,905,0,972,932,915,923,964,942,954],
[971,1016,1040,958,1029,0,1021,988,1022,1007,1063,995],
[976,997,1036,967,1069,980,0,943,1030,996,1061,992],
[1008,1053,1067,1026,1086,1013,1058,0,1033,1041,1055,1000],
[982,1011,1011,995,1078,979,971,968,0,986,1026,1002],
[974,1008,1002,976,1037,994,1005,960,1015,0,1022,985],
[956,975,1023,983,1059,938,940,946,975,979,0,984],
[1007,1008,1080,948,1047,1006,1009,1001,999,1016,1017,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 22, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1110,855,1102,922,1108,892,951,1067,915,1054,865],
[891,0,833,1111,744,811,824,835,949,912,975,889],
[1146,1168,0,1258,1066,1116,986,1202,1078,1007,1125,1155],
[899,890,743,0,721,901,814,840,895,813,776,837],
[1079,1257,935,1280,0,994,960,1040,1128,982,1094,889],
[893,1190,885,1100,1007,0,891,954,1018,859,1211,1068],
[1109,1177,1015,1187,1041,1110,0,1056,988,856,1200,1094],
[1050,1166,799,1161,961,1047,945,0,1131,924,1172,1111],
[934,1052,923,1106,873,983,1013,870,0,944,1082,850],
[1086,1089,994,1188,1019,1142,1145,1077,1057,0,1089,1004],
[947,1026,876,1225,907,790,801,829,919,912,0,890],
[1136,1112,846,1164,1112,933,907,890,1151,997,1111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 23, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,994,961,1046,954,990,959,961,991,1034,978,1016],
[1007,0,926,952,929,985,936,928,958,993,929,951],
[1040,1075,0,1078,1032,1068,1045,995,1019,1020,1014,1019],
[955,1049,923,0,980,998,998,938,962,1067,941,994],
[1047,1072,969,1021,0,1060,1026,991,1007,1072,1007,984],
[1011,1016,933,1003,941,0,954,943,990,993,954,1004],
[1042,1065,956,1003,975,1047,0,926,995,1043,977,1004],
[1040,1073,1006,1063,1010,1058,1075,0,1032,1090,985,1067],
[1010,1043,982,1039,994,1011,1006,969,0,1021,980,1050],
[967,1008,981,934,929,1008,958,911,980,0,962,953],
[1023,1072,987,1060,994,1047,1024,1016,1021,1039,0,1034],
[985,1050,982,1007,1017,997,997,934,951,1048,967,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 24, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1013,1013,987,1013,1003,1029,990,1006,1019,994,1001],
[988,0,988,969,1007,1001,1015,979,1007,971,982,975],
[988,1013,0,997,991,1017,1002,982,1024,1007,993,975],
[1014,1032,1004,0,1017,983,1034,1034,1008,1003,1041,1011],
[988,994,1010,984,0,1011,1011,988,995,991,987,984],
[998,1000,984,1018,990,0,1005,984,984,999,984,984],
[972,986,999,967,990,996,0,1002,985,969,1002,994],
[1011,1022,1019,967,1013,1017,999,0,1007,1014,1015,1010],
[995,994,977,993,1006,1017,1016,994,0,998,979,991],
[982,1030,994,998,1010,1002,1032,987,1003,0,1009,988],
[1007,1019,1008,960,1014,1017,999,986,1022,992,0,979],
[1000,1026,1026,990,1017,1017,1007,991,1010,1013,1022,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 25, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1022,968,978,952,969,1001,988,962,969,1004,953],
[979,0,986,967,973,968,1005,1001,969,983,944,968],
[1033,1015,0,992,984,997,985,1023,987,977,1026,977],
[1023,1034,1009,0,977,1001,999,992,968,989,1032,987],
[1049,1028,1017,1024,0,986,1002,1011,1014,974,1022,955],
[1032,1033,1004,1000,1015,0,1028,997,956,974,1004,979],
[1000,996,1016,1002,999,973,0,996,978,1012,1017,976],
[1013,1000,978,1009,990,1004,1005,0,973,969,989,997],
[1039,1032,1014,1033,987,1045,1023,1028,0,1006,1045,1003],
[1032,1018,1024,1012,1027,1027,989,1032,995,0,1049,1035],
[997,1057,975,969,979,997,984,1012,956,952,0,972],
[1048,1033,1024,1014,1046,1022,1025,1004,998,966,1029,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 26, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1013,1024,1043,1019,997,994,1006,1049,1004,988,1016],
[988,0,1000,970,1014,977,981,957,976,981,949,1020],
[977,1001,0,979,989,955,956,951,994,989,993,1006],
[958,1031,1022,0,992,977,1001,953,1014,976,997,1010],
[982,987,1012,1009,0,970,957,963,1010,962,963,1024],
[1004,1024,1046,1024,1031,0,987,997,1021,1015,1002,988],
[1007,1020,1045,1000,1044,1014,0,986,1003,984,994,1048],
[995,1044,1050,1048,1038,1004,1015,0,1033,996,991,1042],
[952,1025,1007,987,991,980,998,968,0,978,988,989],
[997,1020,1012,1025,1039,986,1017,1005,1023,0,978,1065],
[1013,1052,1008,1004,1038,999,1007,1010,1013,1023,0,1035],
[985,981,995,991,977,1013,953,959,1012,936,966,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 27, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1051,837,971,702,716,950,1143,767,1060,893,798],
[950,0,897,856,956,979,1144,1290,957,922,918,1094],
[1164,1104,0,1169,859,1077,1131,1306,1306,1073,1245,1191],
[1030,1145,832,0,1018,914,976,1292,1116,1048,1147,1185],
[1299,1045,1142,983,0,891,912,1360,1047,1321,1167,1396],
[1285,1022,924,1087,1110,0,1235,1378,1180,1073,1139,1275],
[1051,857,870,1025,1089,766,0,1256,1095,967,1174,1190],
[858,711,695,709,641,623,745,0,877,945,723,804],
[1234,1044,695,885,954,821,906,1124,0,718,1173,1076],
[941,1079,928,953,680,928,1034,1056,1283,0,1262,1080],
[1108,1083,756,854,834,862,827,1278,828,739,0,1357],
[1203,907,810,816,605,726,811,1197,925,921,644,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 28, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1075,1026,1025,1001,982,925,1033,991,969,985,993],
[926,0,928,987,1094,1068,949,1028,1011,993,1004,953],
[975,1073,0,1014,1065,988,932,1085,1077,1011,1154,1006],
[976,1014,987,0,1078,947,978,1018,989,1026,964,984],
[1000,907,936,923,0,925,871,965,937,896,973,871],
[1019,933,1013,1054,1076,0,952,993,1047,990,936,968],
[1076,1052,1069,1023,1130,1049,0,1086,1042,947,1119,1008],
[968,973,916,983,1036,1008,915,0,968,977,1004,949],
[1010,990,924,1012,1064,954,959,1033,0,1066,987,1002],
[1032,1008,990,975,1105,1011,1054,1024,935,0,943,987],
[1016,997,847,1037,1028,1065,882,997,1014,1058,0,938],
[1008,1048,995,1017,1130,1033,993,1052,999,1014,1063,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 29, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,993,962,1012,1032,1021,1004,1026,994,1071,1005,1021],
[1008,0,990,1002,998,999,959,1027,997,1001,1000,1018],
[1039,1011,0,1010,1056,1033,983,1042,1007,1070,1023,1036],
[989,999,991,0,1029,982,988,1037,981,1013,996,1007],
[969,1003,945,972,0,1002,1014,1023,945,1031,993,991],
[980,1002,968,1019,999,0,976,1020,970,1001,953,987],
[997,1042,1018,1013,987,1025,0,1078,983,1023,1004,1021],
[975,974,959,964,978,981,923,0,958,972,950,971],
[1007,1004,994,1020,1056,1031,1018,1043,0,1027,995,1020],
[930,1000,931,988,970,1000,978,1029,974,0,950,974],
[996,1001,978,1005,1008,1048,997,1051,1006,1051,0,1024],
[980,983,965,994,1010,1014,980,1030,981,1027,977,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 30, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1008,1001,1018,1051,1073,967,1029,1045,1007,1024,968],
[993,0,1019,1036,1114,1068,1029,1041,1038,991,1029,1039],
[1000,982,0,984,996,1009,938,1010,955,972,975,970],
[983,965,1017,0,1010,1055,987,1035,1009,1019,1025,999],
[950,887,1005,991,0,1003,959,1023,978,936,1004,934],
[928,933,992,946,998,0,951,987,942,947,972,976],
[1034,972,1063,1014,1042,1050,0,1083,1057,1016,1034,1014],
[972,960,991,966,978,1014,918,0,959,978,970,901],
[956,963,1046,992,1023,1059,944,1042,0,984,988,984],
[994,1010,1029,982,1065,1054,985,1023,1017,0,1035,977],
[977,972,1026,976,997,1029,967,1031,1013,966,0,987],
[1033,962,1031,1002,1067,1025,987,1100,1017,1024,1014,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 31, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1024,1033,986,1044,992,980,1029,1007,1040,1008,1033],
[977,0,997,983,1017,987,985,1014,991,1016,1017,981],
[968,1004,0,969,1012,971,939,1006,975,990,1009,989],
[1015,1018,1032,0,1019,1017,994,1021,1012,1031,1009,1025],
[957,984,989,982,0,951,961,1005,969,995,962,975],
[1009,1014,1030,984,1050,0,1007,1027,1023,1044,1042,1003],
[1021,1016,1062,1007,1040,994,0,1030,1024,1054,1041,1022],
[972,987,995,980,996,974,971,0,967,1002,992,1021],
[994,1010,1026,989,1032,978,977,1034,0,1016,1013,1013],
[961,985,1011,970,1006,957,947,999,985,0,1000,959],
[993,984,992,992,1039,959,960,1009,988,1001,0,980],
[968,1020,1012,976,1026,998,979,980,988,1042,1021,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 32, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1015,1062,1039,1006,1011,993,1006,999,1015,1022,1027],
[986,0,988,981,981,986,977,993,970,991,1035,955],
[939,1013,0,932,953,952,957,919,948,952,962,940],
[962,1020,1069,0,1012,1041,1006,1002,1036,1019,1036,999],
[995,1020,1048,989,0,970,1027,976,1010,1005,979,997],
[990,1015,1049,960,1031,0,997,1006,993,984,1013,994],
[1008,1024,1044,995,974,1004,0,965,985,1012,1022,992],
[995,1008,1082,999,1025,995,1036,0,996,1010,1034,1028],
[1002,1031,1053,965,991,1008,1016,1005,0,1029,1018,989],
[986,1010,1049,982,996,1017,989,991,972,0,1014,963],
[979,966,1039,965,1022,988,979,967,983,987,0,974],
[974,1046,1061,1002,1004,1007,1009,973,1012,1038,1027,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 33, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,974,1107,1039,993,1027,960,953,1009,953,1015,993],
[1027,0,1053,964,967,995,896,949,1029,954,905,1030],
[894,948,0,874,903,943,858,924,993,867,903,845],
[962,1037,1127,0,944,1005,972,1033,1022,1027,1029,1047],
[1008,1034,1098,1057,0,963,983,990,1081,1019,1058,975],
[974,1006,1058,996,1038,0,961,967,1054,1009,965,1032],
[1041,1105,1143,1029,1018,1040,0,990,1091,1027,1022,1021],
[1048,1052,1077,968,1011,1034,1011,0,1098,997,1054,1024],
[992,972,1008,979,920,947,910,903,0,974,923,978],
[1048,1047,1134,974,982,992,974,1004,1027,0,949,961],
[986,1096,1098,972,943,1036,979,947,1078,1052,0,888],
[1008,971,1156,954,1026,969,980,977,1023,1040,1113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 34, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1031,995,1028,1011,986,1002,1003,1066,1043,972,981],
[970,0,1005,955,969,942,978,969,1000,987,995,950],
[1006,996,0,1014,994,943,1034,983,993,1030,979,983],
[973,1046,987,0,971,983,999,972,1025,983,969,1005],
[990,1032,1007,1030,0,999,1033,1002,1003,1013,1014,984],
[1015,1059,1058,1018,1002,0,1029,1025,1051,1040,1031,994],
[999,1023,967,1002,968,972,0,956,976,1017,971,954],
[998,1032,1018,1029,999,976,1045,0,1024,1058,1035,969],
[935,1001,1008,976,998,950,1025,977,0,1026,994,987],
[958,1014,971,1018,988,961,984,943,975,0,941,961],
[1029,1006,1022,1032,987,970,1030,966,1007,1060,0,972],
[1020,1051,1018,996,1017,1007,1047,1032,1014,1040,1029,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 35, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,993,990,975,1005,1005,1018,992,1029,1030,1042,1049],
[1008,0,975,992,981,991,985,1005,996,1017,1021,986],
[1011,1026,0,981,1003,1024,951,1008,1049,1030,1030,967],
[1026,1009,1020,0,1019,1020,984,1003,1028,1029,986,993],
[996,1020,998,982,0,1021,995,1024,995,1009,998,1010],
[996,1010,977,981,980,0,950,974,990,1016,1024,1017],
[983,1016,1050,1017,1006,1051,0,1031,1007,1030,1036,1012],
[1009,996,993,998,977,1027,970,0,1002,978,1037,1039],
[972,1005,952,973,1006,1011,994,999,0,1022,1002,995],
[971,984,971,972,992,985,971,1023,979,0,1002,994],
[959,980,971,1015,1003,977,965,964,999,999,0,981],
[952,1015,1034,1008,991,984,989,962,1006,1007,1020,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 36, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1004,1013,995,1031,1008,1017,1023,994,1007,1018,996],
[997,0,1040,1005,1026,1015,1025,1027,1026,1026,1017,1008],
[988,961,0,993,1025,1014,1004,995,1034,1000,1010,978],
[1006,996,1008,0,1012,1022,1035,1010,1023,1018,1039,1027],
[970,975,976,989,0,992,984,983,1007,971,989,977],
[993,986,987,979,1009,0,1005,1003,1014,1000,985,993],
[984,976,997,966,1017,996,0,998,980,989,1007,986],
[978,974,1006,991,1018,998,1003,0,987,1003,997,967],
[1007,975,967,978,994,987,1021,1014,0,992,973,965],
[994,975,1001,983,1030,1001,1012,998,1009,0,982,970],
[983,984,991,962,1012,1016,994,1004,1028,1019,0,972],
[1005,993,1023,974,1024,1008,1015,1034,1036,1031,1029,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 37, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,924,974,984,978,1004,977,987,993,996,975,1011],
[1077,0,1026,1060,1016,1042,1033,1039,1027,1031,1076,987],
[1027,975,0,996,982,1043,977,1035,1076,1015,1029,1032],
[1017,941,1005,0,1048,1019,1006,1044,1016,990,987,1026],
[1023,985,1019,953,0,1025,1013,1003,1056,1042,1037,1014],
[997,959,958,982,976,0,1002,972,1013,1000,985,1006],
[1024,968,1024,995,988,999,0,1010,1009,1015,979,1022],
[1014,962,966,957,998,1029,991,0,1029,1001,987,987],
[1008,974,925,985,945,988,992,972,0,970,970,968],
[1005,970,986,1011,959,1001,986,1000,1031,0,957,987],
[1026,925,972,1014,964,1016,1022,1014,1031,1044,0,1054],
[990,1014,969,975,987,995,979,1014,1033,1014,947,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 38, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,992,985,974,990,1016,988,988,1014,984,981,1017],
[1009,0,975,1028,1010,994,997,1014,998,990,981,1003],
[1016,1026,0,979,1044,1040,1015,1046,1029,1014,994,1012],
[1027,973,1022,0,993,1055,1025,1015,1013,991,989,1016],
[1011,991,957,1008,0,1015,1010,1013,1012,996,975,1022],
[985,1007,961,946,986,0,968,996,980,973,974,989],
[1013,1004,986,976,991,1033,0,1017,1031,990,967,1008],
[1013,987,955,986,988,1005,984,0,982,1007,975,1011],
[987,1003,972,988,989,1021,970,1019,0,981,983,993],
[1017,1011,987,1010,1005,1028,1011,994,1020,0,1002,1052],
[1020,1020,1007,1012,1026,1027,1034,1026,1018,999,0,1013],
[984,998,989,985,979,1012,993,990,1008,949,988,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 39, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1014,1002,981,1021,1002,971,945,983,1034,1006,972],
[987,0,994,990,994,1036,967,978,1018,1023,993,966],
[999,1007,0,983,1013,1028,987,948,1025,997,973,966],
[1020,1011,1018,0,1041,1029,1019,1009,995,1025,1023,988],
[980,1007,988,960,0,980,960,1006,1011,993,1010,992],
[999,965,973,972,1021,0,984,995,998,1012,981,987],
[1030,1034,1014,982,1041,1017,0,1013,1030,1026,1016,1004],
[1056,1023,1053,992,995,1006,988,0,1017,1025,976,973],
[1018,983,976,1006,990,1003,971,984,0,1021,974,970],
[967,978,1004,976,1008,989,975,976,980,0,975,977],
[995,1008,1028,978,991,1020,985,1025,1027,1026,0,1011],
[1029,1035,1035,1013,1009,1014,997,1028,1031,1024,990,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 40, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1025,1041,1016,1033,996,1028,1031,1011,1036,1016,1006],
[976,0,999,984,997,958,1007,990,994,1028,982,990],
[960,1002,0,1015,1005,972,1039,1021,989,1026,1002,1026],
[985,1017,986,0,977,1003,1001,1039,968,1014,989,996],
[968,1004,996,1024,0,1022,1019,1051,991,1029,999,1005],
[1005,1043,1029,998,979,0,993,1026,998,1027,992,1016],
[973,994,962,1000,982,1008,0,1015,980,985,987,962],
[970,1011,980,962,950,975,986,0,947,997,983,976],
[990,1007,1012,1033,1010,1003,1021,1054,0,1009,1033,1017],
[965,973,975,987,972,974,1016,1004,992,0,980,980],
[985,1019,999,1012,1002,1009,1014,1018,968,1021,0,993],
[995,1011,975,1005,996,985,1039,1025,984,1021,1008,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 41, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,978,881,942,903,1009,868,895,950,853,979,913],
[1023,0,979,992,965,1086,980,1046,1003,1082,1015,1221],
[1120,1022,0,1060,979,1143,980,962,1035,998,1042,987],
[1059,1009,941,0,981,1143,964,1024,1025,1024,1024,1078],
[1098,1036,1022,1020,0,1038,1015,1011,1057,994,1038,1112],
[992,915,858,858,963,0,843,850,892,969,934,960],
[1133,1021,1021,1037,986,1158,0,996,976,973,1062,1064],
[1106,955,1039,977,990,1151,1005,0,1039,1014,1115,1064],
[1051,998,966,976,944,1109,1025,962,0,973,1030,1022],
[1148,919,1003,977,1007,1032,1028,987,1028,0,972,1109],
[1022,986,959,977,963,1067,939,886,971,1029,0,1057],
[1088,780,1014,923,889,1041,937,937,979,892,944,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 42, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,951,976,999,963,959,1015,978,994,1015,983,1038],
[1050,0,982,1057,1040,1039,1015,1018,1018,1033,1082,1065],
[1025,1019,0,984,1039,1060,1023,988,1028,998,1034,1031],
[1002,944,1017,0,982,1000,1013,1006,978,986,989,991],
[1038,961,962,1019,0,1026,1024,1012,947,981,991,1042],
[1042,962,941,1001,975,0,1023,994,978,1014,979,979],
[986,986,978,988,977,978,0,955,1020,1017,978,989],
[1023,983,1013,995,989,1007,1046,0,1058,1032,1011,1026],
[1007,983,973,1023,1054,1023,981,943,0,1017,1021,978],
[986,968,1003,1015,1020,987,984,969,984,0,985,1012],
[1018,919,967,1012,1010,1022,1023,990,980,1016,0,1016],
[963,936,970,1010,959,1022,1012,975,1023,989,985,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 43, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,966,971,980,996,1002,944,1007,949,1002,1026,983],
[1035,0,1086,999,1066,942,964,1054,1013,1034,1043,980],
[1030,915,0,998,1034,972,946,1035,971,963,1021,996],
[1021,1002,1003,0,1053,988,895,1098,1005,1025,1039,1021],
[1005,935,967,948,0,973,916,983,914,987,1013,1008],
[999,1059,1029,1013,1028,0,1008,1087,1031,1016,1038,957],
[1057,1037,1055,1106,1085,993,0,1106,1033,1054,1056,1022],
[994,947,966,903,1018,914,895,0,917,941,970,967],
[1052,988,1030,996,1087,970,968,1084,0,1011,1090,1022],
[999,967,1038,976,1014,985,947,1060,990,0,1009,904],
[975,958,980,962,988,963,945,1031,911,992,0,999],
[1018,1021,1005,980,993,1044,979,1034,979,1097,1002,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 44, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,967,972,1004,981,995,942,974,981,1001,999,975],
[1034,0,991,969,1001,985,997,991,985,985,993,989],
[1029,1010,0,1027,1036,1015,995,994,1004,1022,1023,1026],
[997,1032,974,0,1011,1002,979,996,982,987,979,992],
[1020,1000,965,990,0,971,969,1011,964,1009,974,988],
[1006,1016,986,999,1030,0,989,1010,1011,985,1016,1001],
[1059,1004,1006,1022,1032,1012,0,1010,991,1014,1021,1013],
[1027,1010,1007,1005,990,991,991,0,974,1003,1005,998],
[1020,1016,997,1019,1037,990,1010,1027,0,1025,1018,1012],
[1000,1016,979,1014,992,1016,987,998,976,0,1008,988],
[1002,1008,978,1022,1027,985,980,996,983,993,0,960],
[1026,1012,975,1009,1013,1000,988,1003,989,1013,1041,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 45, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,987,981,966,933,1067,1143,1028,1008,967,1004,912],
[1014,0,936,838,895,955,1062,1002,968,916,979,964],
[1020,1065,0,994,1018,1078,1132,1036,969,1008,1031,971],
[1035,1163,1007,0,984,1062,1135,1075,1045,1079,1061,1001],
[1068,1106,983,1017,0,1089,1125,1047,972,958,1064,986],
[934,1046,923,939,912,0,1039,959,912,899,997,894],
[858,939,869,866,876,962,0,994,873,887,1004,933],
[973,999,965,926,954,1042,1007,0,968,934,1065,1001],
[993,1033,1032,956,1029,1089,1128,1033,0,976,1029,968],
[1034,1085,993,922,1043,1102,1114,1067,1025,0,1054,1013],
[997,1022,970,940,937,1004,997,936,972,947,0,1010],
[1089,1037,1030,1000,1015,1107,1068,1000,1033,988,991,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 46, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1009,989,980,995,982,1060,997,1060,1008,990,1048],
[992,0,945,988,1027,955,1036,989,1000,990,910,1000],
[1012,1056,0,1044,1067,1045,1007,1064,1013,1028,988,1062],
[1021,1013,957,0,1028,925,1077,979,1013,1035,889,1000],
[1006,974,934,973,0,913,973,999,1039,925,957,983],
[1019,1046,956,1076,1088,0,1051,1084,1060,1002,1071,1037],
[941,965,994,924,1028,950,0,1038,1011,924,901,1023],
[1004,1012,937,1022,1002,917,963,0,986,990,1000,1033],
[941,1001,988,988,962,941,990,1015,0,956,966,950],
[993,1011,973,966,1076,999,1077,1011,1045,0,1008,1027],
[1011,1091,1013,1112,1044,930,1100,1001,1035,993,0,1030],
[953,1001,939,1001,1018,964,978,968,1051,974,971,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 47, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,999,953,997,988,990,908,991,1007,941,940,1013],
[1002,0,968,1002,1020,1031,984,1010,981,970,987,1007],
[1048,1033,0,1002,1058,1036,981,1054,1033,979,1000,1093],
[1004,999,999,0,1001,1003,988,990,1015,998,948,1023],
[1013,981,943,1000,0,970,973,999,1000,945,978,1026],
[1011,970,965,998,1031,0,965,1022,1008,953,991,1018],
[1093,1017,1020,1013,1028,1036,0,1085,1023,980,1001,1044],
[1010,991,947,1011,1002,979,916,0,1007,958,947,984],
[994,1020,968,986,1001,993,978,994,0,963,1000,1010],
[1060,1031,1022,1003,1056,1048,1021,1043,1038,0,990,1056],
[1061,1014,1001,1053,1023,1010,1000,1054,1001,1011,0,1062],
[988,994,908,978,975,983,957,1017,991,945,939,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 48, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,981,939,934,942,1021,996,939,934,1024,970,921],
[1020,0,959,915,1008,1040,979,1039,973,973,1021,967],
[1062,1042,0,969,958,1015,1012,1020,972,1016,1023,1009],
[1067,1086,1032,0,985,1023,974,1037,1005,1090,1020,1000],
[1059,993,1043,1016,0,1097,1061,997,1040,1102,1015,1012],
[980,961,986,978,904,0,927,1016,911,1057,975,971],
[1005,1022,989,1027,940,1074,0,989,948,987,967,1050],
[1062,962,981,964,1004,985,1012,0,965,1082,973,998],
[1067,1028,1029,996,961,1090,1053,1036,0,1100,1019,1014],
[977,1028,985,911,899,944,1014,919,901,0,897,962],
[1031,980,978,981,986,1026,1034,1028,982,1104,0,1024],
[1080,1034,992,1001,989,1030,951,1003,987,1039,977,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 49, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,801,1038,862,815,1063,1056,1011,846,1041,764,842],
[1200,0,1029,1031,1011,1133,1216,1056,949,1025,886,1010],
[963,972,0,865,867,1150,1056,1060,997,1026,921,1021],
[1139,970,1136,0,920,1117,1037,1088,1020,1170,1078,954],
[1186,990,1134,1081,0,1032,1200,1098,976,1117,1041,1104],
[938,868,851,884,969,0,905,1028,877,949,860,814],
[945,785,945,964,801,1096,0,926,916,1047,893,925],
[990,945,941,913,903,973,1075,0,879,927,824,919],
[1155,1052,1004,981,1025,1124,1085,1122,0,1053,1021,1022],
[960,976,975,831,884,1052,954,1074,948,0,903,854],
[1237,1115,1080,923,960,1141,1108,1177,980,1098,0,1019],
[1159,991,980,1047,897,1187,1076,1082,979,1147,982,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 50, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1003,964,1021,1032,1037,1087,1008,1041,970,1010,1013],
[998,0,982,981,1022,1028,1042,1009,1035,1001,1021,1023],
[1037,1019,0,1011,1024,1040,1049,1007,1020,1023,982,1031],
[980,1020,990,0,1002,1022,1038,1025,1031,1013,1041,1031],
[969,979,977,999,0,1001,1019,1027,1035,989,1003,980],
[964,973,961,979,1000,0,1006,1019,1017,970,958,994],
[914,959,952,963,982,995,0,982,1010,950,996,969],
[993,992,994,976,974,982,1019,0,1003,1007,1014,1001],
[960,966,981,970,966,984,991,998,0,953,986,984],
[1031,1000,978,988,1012,1031,1051,994,1048,0,1054,1034],
[991,980,1019,960,998,1043,1005,987,1015,947,0,1029],
[988,978,970,970,1021,1007,1032,1000,1017,967,972,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 51, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,950,1000,1009,1004,962,1010,1009,1024,979,1014,983],
[1051,0,1013,1073,1021,992,1071,1085,1067,995,1050,993],
[1001,988,0,1028,1030,986,1034,1025,1013,1005,1029,989],
[992,928,973,0,983,1025,1028,983,1000,944,1001,1003],
[997,980,971,1018,0,978,1017,983,1015,995,1009,991],
[1039,1009,1015,976,1023,0,1013,1022,1041,957,1020,989],
[991,930,967,973,984,988,0,958,1000,935,1002,963],
[992,916,976,1018,1018,979,1043,0,1014,970,1038,1011],
[977,934,988,1001,986,960,1001,987,0,956,1012,943],
[1022,1006,996,1057,1006,1044,1066,1031,1045,0,1039,983],
[987,951,972,1000,992,981,999,963,989,962,0,959],
[1018,1008,1012,998,1010,1012,1038,990,1058,1018,1042,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 52, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,982,976,990,984,968,1038,954,989,975,1024,1028],
[1019,0,976,1000,993,997,1070,1007,1017,999,986,1028],
[1025,1025,0,1005,1049,1009,1059,1014,1023,995,1031,1043],
[1011,1001,996,0,1000,948,1020,982,1025,960,1027,1035],
[1017,1008,952,1001,0,979,1050,985,1025,986,1015,1026],
[1033,1004,992,1053,1022,0,1079,983,1057,1030,1034,1073],
[963,931,942,981,951,922,0,937,980,975,993,1025],
[1047,994,987,1019,1016,1018,1064,0,1033,1027,1039,1031],
[1012,984,978,976,976,944,1021,968,0,950,1040,1061],
[1026,1002,1006,1041,1015,971,1026,974,1051,0,1056,1059],
[977,1015,970,974,986,967,1008,962,961,945,0,1007],
[973,973,958,966,975,928,976,970,940,942,994,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 53, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1007,1017,1009,1096,976,1022,1022,974,998,990,1021],
[994,0,1018,990,1073,1008,1045,1026,1037,995,992,1001],
[984,983,0,975,1021,977,1025,962,993,969,979,1029],
[992,1011,1026,0,1074,983,999,991,1034,1028,1044,1020],
[905,928,980,927,0,921,936,964,960,930,965,976],
[1025,993,1024,1018,1080,0,1014,1008,1016,1011,1041,1020],
[979,956,976,1002,1065,987,0,982,991,952,1019,987],
[979,975,1039,1010,1037,993,1019,0,964,927,957,971],
[1027,964,1008,967,1041,985,1010,1037,0,990,1008,984],
[1003,1006,1032,973,1071,990,1049,1074,1011,0,1030,1008],
[1011,1009,1022,957,1036,960,982,1044,993,971,0,1000],
[980,1000,972,981,1025,981,1014,1030,1017,993,1001,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 54, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,942,1030,1010,988,935,978,986,983,940,944,921],
[1059,0,1051,1019,1006,987,1050,1028,1028,1004,1014,1004],
[971,950,0,989,977,948,973,989,977,954,947,936],
[991,982,1012,0,1003,961,989,963,1018,940,969,1002],
[1013,995,1024,998,0,1001,993,1011,1038,909,987,985],
[1066,1014,1053,1040,1000,0,1009,1025,1019,973,1007,983],
[1023,951,1028,1012,1008,992,0,1022,1015,1025,996,1017],
[1015,973,1012,1038,990,976,979,0,986,952,958,997],
[1018,973,1024,983,963,982,986,1015,0,951,968,1029],
[1061,997,1047,1061,1092,1028,976,1049,1050,0,1010,1079],
[1057,987,1054,1032,1014,994,1005,1043,1033,991,0,989],
[1080,997,1065,999,1016,1018,984,1004,972,922,1012,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 55, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1005,1000,988,963,1006,1067,1019,1031,1032,1028,1011],
[996,0,1016,991,984,1035,1035,1020,1000,1037,1007,1007],
[1001,985,0,1016,1008,1072,1031,1035,1034,1024,984,1014],
[1013,1010,985,0,1003,1018,1069,1015,1007,1021,1019,1025],
[1038,1017,993,998,0,1019,1063,1014,1009,1016,982,1034],
[995,966,929,983,982,0,979,999,985,974,969,979],
[934,966,970,932,938,1022,0,977,982,965,970,979],
[982,981,966,986,987,1002,1024,0,972,966,975,972],
[970,1001,967,994,992,1016,1019,1029,0,1028,991,947],
[969,964,977,980,985,1027,1036,1035,973,0,975,998],
[973,994,1017,982,1019,1032,1031,1026,1010,1026,0,986],
[990,994,987,976,967,1022,1022,1029,1054,1003,1015,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 56, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1018,1040,1005,1032,986,1048,977,1036,989,1037,997],
[983,0,1044,1040,1034,997,1084,994,1071,996,1036,1091],
[961,957,0,971,1011,933,993,955,1022,942,1013,1014],
[996,961,1030,0,1004,946,1011,990,1061,948,1007,970],
[969,967,990,997,0,924,1022,967,1019,947,977,1014],
[1015,1004,1068,1055,1077,0,1081,1001,1105,998,1059,1057],
[953,917,1008,990,979,920,0,965,993,971,964,963],
[1024,1007,1046,1011,1034,1000,1036,0,1076,1001,1085,1041],
[965,930,979,940,982,896,1008,925,0,915,950,981],
[1012,1005,1059,1053,1054,1003,1030,1000,1086,0,1046,1012],
[964,965,988,994,1024,942,1037,916,1051,955,0,1005],
[1004,910,987,1031,987,944,1038,960,1020,989,996,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 57, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1028,1006,1070,1006,894,1072,926,1046,958,1192,1155],
[973,0,1020,1070,987,1022,1031,1130,1071,905,1161,1082],
[995,981,0,981,962,1007,1160,1129,1052,1038,1122,1020],
[931,931,1020,0,948,882,910,944,998,979,1158,928],
[995,1014,1039,1053,0,958,1034,1019,1104,966,1084,1035],
[1107,979,994,1119,1043,0,1137,1079,1135,1017,1152,1081],
[929,970,841,1091,967,864,0,986,981,853,1086,932],
[1075,871,872,1057,982,922,1015,0,990,841,1038,1061],
[955,930,949,1003,897,866,1020,1011,0,932,1063,1016],
[1043,1096,963,1022,1035,984,1148,1160,1069,0,1068,1075],
[809,840,879,843,917,849,915,963,938,933,0,853],
[846,919,981,1073,966,920,1069,940,985,926,1148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 58, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1004,1050,989,979,1001,998,1048,1028,1028,1075,998],
[997,0,1024,1028,1021,1018,992,1015,1064,1037,1080,983],
[951,977,0,1000,974,978,961,1012,991,964,1039,1001],
[1012,973,1001,0,1000,973,1009,1002,1019,1041,1071,997],
[1022,980,1027,1001,0,1012,1002,1013,1011,995,1027,990],
[1000,983,1023,1028,989,0,1000,1016,1011,1013,1042,1004],
[1003,1009,1040,992,999,1001,0,1013,1028,1003,1049,976],
[953,986,989,999,988,985,988,0,1037,981,1031,990],
[973,937,1010,982,990,990,973,964,0,966,1043,963],
[973,964,1037,960,1006,988,998,1020,1035,0,1031,976],
[926,921,962,930,974,959,952,970,958,970,0,960],
[1003,1018,1000,1004,1011,997,1025,1011,1038,1025,1041,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 59, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,975,981,1003,982,996,958,985,1035,983,1028,996],
[1026,0,1014,996,1013,1007,1000,1012,1042,1030,1049,1015],
[1020,987,0,1014,998,1007,998,1011,1008,993,1022,1020],
[998,1005,987,0,999,1001,995,1017,1013,993,1043,1023],
[1019,988,1003,1002,0,1003,989,997,1034,1008,1050,1033],
[1005,994,994,1000,998,0,985,990,1031,1004,1042,1028],
[1043,1001,1003,1006,1012,1016,0,1020,1046,996,1062,1047],
[1016,989,990,984,1004,1011,981,0,1028,1010,1050,1012],
[966,959,993,988,967,970,955,973,0,977,1032,969],
[1018,971,1008,1008,993,997,1005,991,1024,0,1018,1026],
[973,952,979,958,951,959,939,951,969,983,0,956],
[1005,986,981,978,968,973,954,989,1032,975,1045,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 60, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1014,1014,1009,1016,1018,1023,1006,1002,1036,1005,994],
[987,0,1031,1005,984,984,1024,999,1000,1022,991,978],
[987,970,0,983,976,975,998,984,1008,987,1000,981],
[992,996,1018,0,997,1012,1033,1010,1020,1003,1010,995],
[985,1017,1025,1004,0,1017,1044,975,1020,1028,1024,978],
[983,1017,1026,989,984,0,1027,1001,1020,1014,988,999],
[978,977,1003,968,957,974,0,962,978,985,993,974],
[995,1002,1017,991,1026,1000,1039,0,1015,1021,1006,1014],
[999,1001,993,981,981,981,1023,986,0,1022,997,974],
[965,979,1014,998,973,987,1016,980,979,0,1000,992],
[996,1010,1001,991,977,1013,1008,995,1004,1001,0,982],
[1007,1023,1020,1006,1023,1002,1027,987,1027,1009,1019,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 61, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,997,1010,1007,1046,1016,986,987,1002,1029,1014,982],
[1004,0,1001,977,1000,1011,988,997,949,1023,951,958],
[991,1000,0,981,982,989,1024,986,977,968,986,972],
[994,1024,1020,0,1013,1011,1038,1010,997,1031,984,993],
[955,1001,1019,988,0,998,1016,976,957,1018,985,996],
[985,990,1012,990,1003,0,1029,976,948,984,982,1000],
[1015,1013,977,963,985,972,0,939,975,1006,945,939],
[1014,1004,1015,991,1025,1025,1062,0,969,1019,996,938],
[999,1052,1024,1004,1044,1053,1026,1032,0,1048,973,1010],
[972,978,1033,970,983,1017,995,982,953,0,948,990],
[987,1050,1015,1017,1016,1019,1056,1005,1028,1053,0,1009],
[1019,1043,1029,1008,1005,1001,1062,1063,991,1011,992,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 62, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,983,1037,1015,1037,979,1072,1027,982,977,983,998],
[1018,0,1061,998,1022,1018,1002,1027,1036,960,938,1013],
[964,940,0,1010,970,976,1038,976,1019,947,976,1072],
[986,1003,991,0,1015,963,978,1013,998,978,982,1025],
[964,979,1031,986,0,1029,1014,962,1000,987,953,977],
[1022,983,1025,1038,972,0,1016,983,958,971,911,1001],
[929,999,963,1023,987,985,0,982,986,934,928,927],
[974,974,1025,988,1039,1018,1019,0,967,975,952,984],
[1019,965,982,1003,1001,1043,1015,1034,0,976,997,1033],
[1024,1041,1054,1023,1014,1030,1067,1026,1025,0,973,1013],
[1018,1063,1025,1019,1048,1090,1073,1049,1004,1028,0,991],
[1003,988,929,976,1024,1000,1074,1017,968,988,1010,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 63, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1032,1013,998,1009,1003,1042,1016,1006,1018,1007,1018],
[969,0,961,954,979,985,958,972,987,952,962,992],
[988,1040,0,1002,1009,1037,1011,1025,1013,1009,1014,1010],
[1003,1047,999,0,997,998,1033,982,997,991,998,1023],
[992,1022,992,1004,0,1027,977,1018,1005,993,1003,987],
[998,1016,964,1003,974,0,989,987,988,947,987,1007],
[959,1043,990,968,1024,1012,0,1022,999,989,997,1006],
[985,1029,976,1019,983,1014,979,0,1020,1003,1007,1010],
[995,1014,988,1004,996,1013,1002,981,0,974,1006,997],
[983,1049,992,1010,1008,1054,1012,998,1027,0,1015,1010],
[994,1039,987,1003,998,1014,1004,994,995,986,0,983],
[983,1009,991,978,1014,994,995,991,1004,991,1018,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 64, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1039,996,1004,971,1006,960,976,991,979,979,980],
[962,0,975,1013,965,1007,960,969,985,966,998,983],
[1005,1026,0,1013,1004,1020,1012,996,1045,989,1005,1013],
[997,988,988,0,946,981,943,976,971,913,978,977],
[1030,1036,997,1055,0,1009,979,987,985,968,981,993],
[995,994,981,1020,992,0,990,982,1036,939,989,1022],
[1041,1041,989,1058,1022,1011,0,997,994,1006,976,1006],
[1025,1032,1005,1025,1014,1019,1004,0,1029,1013,995,1022],
[1010,1016,956,1030,1016,965,1007,972,0,974,1014,1008],
[1022,1035,1012,1088,1033,1062,995,988,1027,0,1026,1043],
[1022,1003,996,1023,1020,1012,1025,1006,987,975,0,1030],
[1021,1018,988,1024,1008,979,995,979,993,958,971,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 65, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,939,942,953,914,948,914,926,986,912,1025,961],
[1062,0,1018,976,1065,1014,954,977,1121,1011,1034,988],
[1059,983,0,1003,1032,1013,977,993,1118,948,1075,999],
[1048,1025,998,0,1016,998,1034,979,1097,1028,1014,1007],
[1087,936,969,985,0,1043,1016,1050,1041,993,1006,992],
[1053,987,988,1003,958,0,924,999,1051,919,984,972],
[1087,1047,1024,967,985,1077,0,1058,1061,974,1045,1035],
[1075,1024,1008,1022,951,1002,943,0,1078,923,1046,999],
[1015,880,883,904,960,950,940,923,0,825,960,875],
[1089,990,1053,973,1008,1082,1027,1078,1176,0,1065,986],
[976,967,926,987,995,1017,956,955,1041,936,0,966],
[1040,1013,1002,994,1009,1029,966,1002,1126,1015,1035,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 66, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1043,1029,1020,980,1029,982,1013,998,985,1052,992],
[958,0,1004,998,977,1010,980,948,954,977,989,948],
[972,997,0,985,976,993,955,953,976,932,959,983],
[981,1003,1016,0,962,978,1005,1005,966,998,1002,966],
[1021,1024,1025,1039,0,1039,975,982,1021,1018,1057,978],
[972,991,1008,1023,962,0,979,960,993,981,1029,960],
[1019,1021,1046,996,1026,1022,0,991,1018,999,1011,1008],
[988,1053,1048,996,1019,1041,1010,0,1020,1012,1066,1031],
[1003,1047,1025,1035,980,1008,983,981,0,1011,1012,998],
[1016,1024,1069,1003,983,1020,1002,989,990,0,1018,993],
[949,1012,1042,999,944,972,990,935,989,983,0,965],
[1009,1053,1018,1035,1023,1041,993,970,1003,1008,1036,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 67, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,928,876,881,953,905,885,1007,926,924,1058,830],
[1073,0,951,847,964,856,889,1057,1045,869,1059,880],
[1125,1050,0,1060,1031,930,999,1160,1035,1065,1236,1094],
[1120,1154,941,0,1033,1005,1100,1064,1023,1068,1176,1022],
[1048,1037,970,968,0,965,974,1046,981,885,1134,905],
[1096,1145,1071,996,1036,0,959,1098,1075,972,1057,986],
[1116,1112,1002,901,1027,1042,0,939,789,861,1056,976],
[994,944,841,937,955,903,1062,0,1097,894,1043,955],
[1075,956,966,978,1020,926,1212,904,0,1048,1081,969],
[1077,1132,936,933,1116,1029,1140,1107,953,0,1179,975],
[943,942,765,825,867,944,945,958,920,822,0,895],
[1171,1121,907,979,1096,1015,1025,1046,1032,1026,1106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 68, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,989,975,992,1032,974,1024,1018,999,1012,1032,1036],
[1012,0,1024,1005,1034,994,1042,1027,979,1017,1000,1037],
[1026,977,0,979,1031,1017,1031,1037,995,980,989,1015],
[1009,996,1022,0,1019,976,1043,1008,988,1004,1002,999],
[969,967,970,982,0,965,1019,1000,962,992,994,981],
[1027,1007,984,1025,1036,0,1027,1010,1015,1011,983,1043],
[977,959,970,958,982,974,0,979,970,981,992,990],
[983,974,964,993,1001,991,1022,0,989,1001,970,962],
[1002,1022,1006,1013,1039,986,1031,1012,0,1005,1009,1012],
[989,984,1021,997,1009,990,1020,1000,996,0,987,1010],
[969,1001,1012,999,1007,1018,1009,1031,992,1014,0,986],
[965,964,986,1002,1020,958,1011,1039,989,991,1015,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 69, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,966,933,968,953,994,959,990,958,954,956,1028],
[1035,0,945,933,997,967,952,1009,944,939,1003,1049],
[1068,1056,0,1007,1019,997,1034,1015,1027,1021,1025,1044],
[1033,1068,994,0,1001,1011,947,1046,992,982,976,1028],
[1048,1004,982,1000,0,983,988,1057,989,968,980,1029],
[1007,1034,1004,990,1018,0,1005,1014,995,995,1003,1054],
[1042,1049,967,1054,1013,996,0,1092,1047,990,1012,1058],
[1011,992,986,955,944,987,909,0,970,965,937,999],
[1043,1057,974,1009,1012,1006,954,1031,0,1002,978,1036],
[1047,1062,980,1019,1033,1006,1011,1036,999,0,998,1053],
[1045,998,976,1025,1021,998,989,1064,1023,1003,0,1023],
[973,952,957,973,972,947,943,1002,965,948,978,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 70, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,918,963,983,981,977,947,968,891,1040,949,981],
[1083,0,1038,1026,982,932,958,1004,1013,1185,919,914],
[1038,963,0,921,1053,911,917,1071,931,1104,915,1019],
[1018,975,1080,0,1003,1017,970,1019,981,1151,944,933],
[1020,1019,948,998,0,973,928,942,873,1134,961,1031],
[1024,1069,1090,984,1028,0,993,982,993,1238,997,1001],
[1054,1043,1084,1031,1073,1008,0,1047,956,1140,1028,1031],
[1033,997,930,982,1059,1019,954,0,906,1058,913,1066],
[1110,988,1070,1020,1128,1008,1045,1095,0,1120,972,1034],
[961,816,897,850,867,763,861,943,881,0,866,937],
[1052,1082,1086,1057,1040,1004,973,1088,1029,1135,0,918],
[1020,1087,982,1068,970,1000,970,935,967,1064,1083,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 71, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1023,1070,1097,996,1044,1025,1022,1013,1005,1080,1043],
[978,0,997,1001,985,1009,947,959,988,988,1061,973],
[931,1004,0,992,999,989,939,963,1013,954,1039,943],
[904,1000,1009,0,972,979,976,968,983,985,1052,982],
[1005,1016,1002,1029,0,1054,963,948,980,998,1063,944],
[957,992,1012,1022,947,0,954,985,1012,948,1021,962],
[976,1054,1062,1025,1038,1047,0,1014,985,1024,1133,1000],
[979,1042,1038,1033,1053,1016,987,0,1022,1068,1086,1002],
[988,1013,988,1018,1021,989,1016,979,0,992,1080,989],
[996,1013,1047,1016,1003,1053,977,933,1009,0,1095,945],
[921,940,962,949,938,980,868,915,921,906,0,901],
[958,1028,1058,1019,1057,1039,1001,999,1012,1056,1100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 72, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1024,999,1023,1026,989,1042,987,1002,1019,992,1014],
[977,0,998,969,984,1013,1009,982,988,1023,967,988],
[1002,1003,0,987,994,981,1021,987,974,1016,978,997],
[978,1032,1014,0,988,992,1022,1013,1002,1005,1006,1017],
[975,1017,1007,1013,0,1000,1024,988,996,1021,966,996],
[1012,988,1020,1009,1001,0,1060,987,998,997,983,1001],
[959,992,980,979,977,941,0,989,949,1010,974,971],
[1014,1019,1014,988,1013,1014,1012,0,982,1013,983,991],
[999,1013,1027,999,1005,1003,1052,1019,0,1063,998,1026],
[982,978,985,996,980,1004,991,988,938,0,976,992],
[1009,1034,1023,995,1035,1018,1027,1018,1003,1025,0,1005],
[987,1013,1004,984,1005,1000,1030,1010,975,1009,996,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 73, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,959,1003,1014,970,1053,993,1008,1042,969,1037,1027],
[1042,0,971,971,1052,1009,1006,975,1016,992,971,1075],
[998,1030,0,976,1003,1005,1028,1031,994,990,975,981],
[987,1030,1025,0,958,1027,1015,994,1019,967,1026,1020],
[1031,949,998,1043,0,1012,987,990,1025,1002,1044,1037],
[948,992,996,974,989,0,964,1002,1007,994,954,1020],
[1008,995,973,986,1014,1037,0,1008,948,954,936,1008],
[993,1026,970,1007,1011,999,993,0,1002,990,1001,1045],
[959,985,1007,982,976,994,1053,999,0,943,957,982],
[1032,1009,1011,1034,999,1007,1047,1011,1058,0,1022,1045],
[964,1030,1026,975,957,1047,1065,1000,1044,979,0,1028],
[974,926,1020,981,964,981,993,956,1019,956,973,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 74, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,944,905,928,950,955,865,984,930,956,960,900],
[1057,0,903,973,1012,919,879,1030,997,914,945,919],
[1096,1098,0,1050,1058,1061,1039,1146,1080,1110,965,988],
[1073,1028,951,0,1055,1010,901,1093,1050,1080,961,992],
[1051,989,943,946,0,1034,1043,978,993,1052,942,1002],
[1046,1082,940,991,967,0,1029,963,1051,1081,989,992],
[1136,1122,962,1100,958,972,0,1063,1096,1052,1020,1006],
[1017,971,855,908,1023,1038,938,0,1004,959,988,921],
[1071,1004,921,951,1008,950,905,997,0,966,950,949],
[1045,1087,891,921,949,920,949,1042,1035,0,999,963],
[1041,1056,1036,1040,1059,1012,981,1013,1051,1002,0,987],
[1101,1082,1013,1009,999,1009,995,1080,1052,1038,1014,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 75, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1026,969,999,952,1029,986,985,917,964,1015,1004],
[975,0,962,1022,998,1014,988,988,979,987,984,999],
[1032,1039,0,1071,1021,996,1041,1031,1019,1035,1055,1076],
[1002,979,930,0,984,1000,962,987,929,1006,1017,1008],
[1049,1003,980,1017,0,1002,1016,1009,966,1048,1036,1065],
[972,987,1005,1001,999,0,962,992,938,989,1025,1026],
[1015,1013,960,1039,985,1039,0,995,990,1009,1021,1034],
[1016,1013,970,1014,992,1009,1006,0,994,1027,1027,1033],
[1084,1022,982,1072,1035,1063,1011,1007,0,1045,1059,1059],
[1037,1014,966,995,953,1012,992,974,956,0,1012,1015],
[986,1017,946,984,965,976,980,974,942,989,0,1003],
[997,1002,925,993,936,975,967,968,942,986,998,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 76, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,960,968,945,1001,984,934,981,1014,1010,933,975],
[1041,0,1019,1028,1024,999,1052,1074,1024,1047,1000,1001],
[1033,982,0,1008,1045,1013,1017,1035,1015,1015,987,1026],
[1056,973,993,0,1041,986,1003,1028,1052,1033,992,997],
[1000,977,956,960,0,1000,993,1012,985,978,961,956],
[1017,1002,988,1015,1001,0,1017,1018,1072,1022,964,1035],
[1067,949,984,998,1008,984,0,988,1047,1022,997,1010],
[1020,927,966,973,989,983,1013,0,991,966,990,1020],
[987,977,986,949,1016,929,954,1010,0,1018,981,1003],
[991,954,986,968,1023,979,979,1035,983,0,980,1038],
[1068,1001,1014,1009,1040,1037,1004,1011,1020,1021,0,982],
[1026,1000,975,1004,1045,966,991,981,998,963,1019,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 77, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1108,1000,1026,1015,983,1053,1008,1000,1034,988,1014],
[893,0,1007,915,945,950,983,966,931,963,987,937],
[1001,994,0,971,968,969,1051,972,960,1004,992,979],
[975,1086,1030,0,988,1009,1000,957,960,991,978,962],
[986,1056,1033,1013,0,1008,1010,993,1017,1065,952,995],
[1018,1051,1032,992,993,0,1027,990,950,1022,981,1058],
[948,1018,950,1001,991,974,0,946,1007,1008,990,980],
[993,1035,1029,1044,1008,1011,1055,0,1029,1047,992,1015],
[1001,1070,1041,1041,984,1051,994,972,0,1041,1014,990],
[967,1038,997,1010,936,979,993,954,960,0,991,997],
[1013,1014,1009,1023,1049,1020,1011,1009,987,1010,0,1011],
[987,1064,1022,1039,1006,943,1021,986,1011,1004,990,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 78, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1081,1113,1042,942,1017,1087,975,1038,1101,1011,1080],
[920,0,1006,1001,913,966,981,910,938,1105,927,994],
[888,995,0,948,936,943,975,897,1028,971,991,1016],
[959,1000,1053,0,981,985,1043,924,1001,1065,998,1031],
[1059,1088,1065,1020,0,1071,1071,1053,986,1107,1021,1118],
[984,1035,1058,1016,930,0,996,965,1038,1061,971,1036],
[914,1020,1026,958,930,1005,0,997,1019,1012,1046,1051],
[1026,1091,1104,1077,948,1036,1004,0,1038,1097,1080,987],
[963,1063,973,1000,1015,963,982,963,0,1008,990,998],
[900,896,1030,936,894,940,989,904,993,0,922,984],
[990,1074,1010,1003,980,1030,955,921,1011,1079,0,1001],
[921,1007,985,970,883,965,950,1014,1003,1017,1000,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 79, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,770,962,765,1212,976,1136,852,850,969,1008,1017],
[1231,0,998,1165,1113,1183,1369,1156,1033,1276,1040,1110],
[1039,1003,0,1036,1290,1105,1224,1003,1254,1182,807,1201],
[1236,836,965,0,1222,1068,1197,1064,1101,1126,1171,1005],
[789,888,711,779,0,681,1029,821,680,881,985,896],
[1025,818,896,933,1320,0,1072,844,1064,1011,833,900],
[865,632,777,804,972,929,0,827,1074,932,898,862],
[1149,845,998,937,1180,1157,1174,0,1118,1272,1133,921],
[1151,968,747,900,1321,937,927,883,0,1239,929,1008],
[1032,725,819,875,1120,990,1069,729,762,0,866,748],
[993,961,1194,830,1016,1168,1103,868,1072,1135,0,927],
[984,891,800,996,1105,1101,1139,1080,993,1253,1074,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 80, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1019,988,1016,1013,1030,999,1031,1005,1013,1024,994],
[982,0,984,1025,967,996,988,1019,996,989,1011,978],
[1013,1017,0,1025,1017,1028,1000,1043,1016,999,1072,998],
[985,976,976,0,964,996,1023,1008,995,976,1008,970],
[988,1034,984,1037,0,1018,984,1022,1024,1006,1026,1002],
[971,1005,973,1005,983,0,966,1033,1015,988,1009,973],
[1002,1013,1001,978,1017,1035,0,1039,1013,1004,1010,992],
[970,982,958,993,979,968,962,0,989,967,976,983],
[996,1005,985,1006,977,986,988,1012,0,976,1014,969],
[988,1012,1002,1025,995,1013,997,1034,1025,0,1016,995],
[977,990,929,993,975,992,991,1025,987,985,0,963],
[1007,1023,1003,1031,999,1028,1009,1018,1032,1006,1038,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 81, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1110,1031,1099,983,929,970,1004,966,1031,945,996],
[891,0,919,955,817,917,859,913,909,923,888,922],
[970,1082,0,1101,1026,952,1013,952,1003,1015,1004,1017],
[902,1046,900,0,898,920,982,955,925,956,961,903],
[1018,1184,975,1103,0,1017,1023,1023,1028,1010,1026,973],
[1072,1084,1049,1081,984,0,956,1011,1017,1030,1050,979],
[1031,1142,988,1019,978,1045,0,975,1008,951,998,1055],
[997,1088,1049,1046,978,990,1026,0,1015,962,988,997],
[1035,1092,998,1076,973,984,993,986,0,970,1027,939],
[970,1078,986,1045,991,971,1050,1039,1031,0,971,905],
[1056,1113,997,1040,975,951,1003,1013,974,1030,0,967],
[1005,1079,984,1098,1028,1022,946,1004,1062,1096,1034,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 82, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,982,958,942,1047,967,1045,946,949,946,943,888],
[1019,0,987,927,998,1010,1025,934,984,989,953,989],
[1043,1014,0,996,1013,1039,1022,1071,1030,976,981,1014],
[1059,1074,1005,0,1068,1085,1084,1038,1022,974,1003,1034],
[954,1003,988,933,0,936,1011,1004,974,975,960,967],
[1034,991,962,916,1065,0,1059,1009,987,1009,970,941],
[956,976,979,917,990,942,0,968,900,969,969,943],
[1055,1067,930,963,997,992,1033,0,932,1041,989,1046],
[1052,1017,971,979,1027,1014,1101,1069,0,1022,974,1004],
[1055,1012,1025,1027,1026,992,1032,960,979,0,942,1032],
[1058,1048,1020,998,1041,1031,1032,1012,1027,1059,0,1033],
[1113,1012,987,967,1034,1060,1058,955,997,969,968,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 83, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,962,1015,889,1019,1025,998,1014,1108,1065,1000,957],
[1039,0,1074,1009,1008,1029,1043,1012,1119,1070,1164,996],
[986,927,0,908,1062,999,999,1035,1093,1030,1009,986],
[1112,992,1093,0,1132,1060,1069,1099,1182,1109,1119,1018],
[982,993,939,869,0,1024,1030,1055,1071,981,1024,962],
[976,972,1002,941,977,0,1035,1008,1091,1014,1063,988],
[1003,958,1002,932,971,966,0,994,1029,1026,1062,964],
[987,989,966,902,946,993,1007,0,1052,1001,964,1013],
[893,882,908,819,930,910,972,949,0,949,963,942],
[936,931,971,892,1020,987,975,1000,1052,0,984,897],
[1001,837,992,882,977,938,939,1037,1038,1017,0,976],
[1044,1005,1015,983,1039,1013,1037,988,1059,1104,1025,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 84, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1006,1017,1011,953,1019,1038,946,1007,1007,1002,964],
[995,0,997,970,945,988,1001,945,1016,960,958,938],
[984,1004,0,990,950,994,1008,943,1002,965,973,965],
[990,1031,1011,0,923,1010,1027,960,1069,960,992,971],
[1048,1056,1051,1078,0,1050,1070,994,1061,1010,1050,1019],
[982,1013,1007,991,951,0,1019,996,1026,957,1002,964],
[963,1000,993,974,931,982,0,923,992,958,960,920],
[1055,1056,1058,1041,1007,1005,1078,0,1078,1007,1052,985],
[994,985,999,932,940,975,1009,923,0,960,986,972],
[994,1041,1036,1041,991,1044,1043,994,1041,0,1038,988],
[999,1043,1028,1009,951,999,1041,949,1015,963,0,975],
[1037,1063,1036,1030,982,1037,1081,1016,1029,1013,1026,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 85, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1058,1027,999,1032,1032,991,1018,1009,1029,1009,991],
[943,0,966,975,995,996,987,994,975,973,1002,966],
[974,1035,0,1016,1021,993,1021,1030,1025,995,1011,990],
[1002,1026,985,0,1038,1014,1007,1027,1020,980,1031,998],
[969,1006,980,963,0,967,942,945,983,966,1004,973],
[969,1005,1008,987,1034,0,990,1000,995,992,995,984],
[1010,1014,980,994,1059,1011,0,1016,990,1029,1030,1007],
[983,1007,971,974,1056,1001,985,0,1006,980,1029,962],
[992,1026,976,981,1018,1006,1011,995,0,988,1008,1021],
[972,1028,1006,1021,1035,1009,972,1021,1013,0,1002,983],
[992,999,990,970,997,1006,971,972,993,999,0,991],
[1010,1035,1011,1003,1028,1017,994,1039,980,1018,1010,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 86, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1010,1014,1019,971,968,964,979,991,993,968,988],
[991,0,993,971,965,978,935,960,1046,964,1004,1007],
[987,1008,0,984,964,963,978,962,978,938,968,991],
[982,1030,1017,0,976,978,977,972,1000,932,956,979],
[1030,1036,1037,1025,0,991,973,1015,1028,1017,1008,1020],
[1033,1023,1038,1023,1010,0,1022,1009,1006,1015,994,1017],
[1037,1066,1023,1024,1028,979,0,1006,998,1012,1016,984],
[1022,1041,1039,1029,986,992,995,0,1044,1024,1020,1034],
[1010,955,1023,1001,973,995,1003,957,0,966,986,967],
[1008,1037,1063,1069,984,986,989,977,1035,0,965,1052],
[1033,997,1033,1045,993,1007,985,981,1015,1036,0,998],
[1013,994,1010,1022,981,984,1017,967,1034,949,1003,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 87, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,965,1039,1028,1016,997,990,1013,975,1013,1046,1043],
[1036,0,1023,1051,1005,993,1043,1028,1058,1014,1055,1014],
[962,978,0,968,1044,1013,993,1004,999,955,1045,986],
[973,950,1033,0,1010,1019,976,1023,1028,1022,990,998],
[985,996,957,991,0,954,983,1010,1022,1005,986,960],
[1004,1008,988,982,1047,0,1038,1031,1039,1045,1040,994],
[1011,958,1008,1025,1018,963,0,1036,936,995,990,952],
[988,973,997,978,991,970,965,0,1012,974,1048,960],
[1026,943,1002,973,979,962,1065,989,0,1017,1043,968],
[988,987,1046,979,996,956,1006,1027,984,0,1052,985],
[955,946,956,1011,1015,961,1011,953,958,949,0,935],
[958,987,1015,1003,1041,1007,1049,1041,1033,1016,1066,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 88, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1039,1011,1009,1005,978,1029,1030,1018,1021,1051,997],
[962,0,996,948,956,952,988,945,977,957,998,998],
[990,1005,0,968,947,964,987,988,975,985,1019,997],
[992,1053,1033,0,989,968,978,999,1004,1023,1045,1006],
[996,1045,1054,1012,0,966,990,996,997,1042,1060,1073],
[1023,1049,1037,1033,1035,0,1025,1006,981,1058,1049,1000],
[972,1013,1014,1023,1011,976,0,963,991,1008,1046,984],
[971,1056,1013,1002,1005,995,1038,0,1040,996,1050,1005],
[983,1024,1026,997,1004,1020,1010,961,0,1017,1014,1037],
[980,1044,1016,978,959,943,993,1005,984,0,1001,1008],
[950,1003,982,956,941,952,955,951,987,1000,0,971],
[1004,1003,1004,995,928,1001,1017,996,964,993,1030,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 89, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1042,974,991,1018,988,1009,982,951,960,967,959],
[959,0,969,921,976,983,949,935,965,992,976,996],
[1027,1032,0,1039,1037,1039,1043,996,1008,1034,1042,1021],
[1010,1080,962,0,994,1035,1020,984,1026,1031,954,1037],
[983,1025,964,1007,0,975,1051,962,972,980,963,975],
[1013,1018,962,966,1026,0,1033,975,946,1023,992,1000],
[992,1052,958,981,950,968,0,987,1002,1021,985,977],
[1019,1066,1005,1017,1039,1026,1014,0,966,1008,1004,1055],
[1050,1036,993,975,1029,1055,999,1035,0,1019,965,1057],
[1041,1009,967,970,1021,978,980,993,982,0,968,1037],
[1034,1025,959,1047,1038,1009,1016,997,1036,1033,0,1042],
[1042,1005,980,964,1026,1001,1024,946,944,964,959,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 90, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1041,1054,988,1037,1003,1035,1009,1022,1034,1029,1047],
[960,0,1027,990,994,977,983,983,991,1034,1032,1025],
[947,974,0,957,1019,969,999,961,987,1003,974,1013],
[1013,1011,1044,0,1017,1000,1004,964,1003,1012,975,1004],
[964,1007,982,984,0,982,994,953,988,1022,968,1004],
[998,1024,1032,1001,1019,0,1026,996,1020,1030,996,1003],
[966,1018,1002,997,1007,975,0,981,973,984,966,1020],
[992,1018,1040,1037,1048,1005,1020,0,993,1066,1006,1036],
[979,1010,1014,998,1013,981,1028,1008,0,1041,989,1015],
[967,967,998,989,979,971,1017,935,960,0,956,996],
[972,969,1027,1026,1033,1005,1035,995,1012,1045,0,1029],
[954,976,988,997,997,998,981,965,986,1005,972,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 91, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1032,990,936,975,1065,947,1008,964,943,978,1015],
[969,0,985,940,971,963,935,925,990,881,922,978],
[1011,1016,0,967,1036,1050,986,978,1012,955,980,1037],
[1065,1061,1034,0,975,1062,975,961,988,1006,1004,1023],
[1026,1030,965,1026,0,1022,1020,981,1047,933,997,1046],
[936,1038,951,939,979,0,966,948,970,982,969,1015],
[1054,1066,1015,1026,981,1035,0,1001,1001,967,1025,1032],
[993,1076,1023,1040,1020,1053,1000,0,1012,1002,983,1000],
[1037,1011,989,1013,954,1031,1000,989,0,987,980,977],
[1058,1120,1046,995,1068,1019,1034,999,1014,0,1004,1018],
[1023,1079,1021,997,1004,1032,976,1018,1021,997,0,1038],
[986,1023,964,978,955,986,969,1001,1024,983,963,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 92, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,896,969,938,933,876,944,929,922,919,918,920],
[1105,0,1026,1011,1040,1018,1066,1097,1009,1061,1035,989],
[1032,975,0,986,1008,927,1006,1091,938,980,1060,1002],
[1063,990,1015,0,1012,955,1008,1061,958,1005,998,985],
[1068,961,993,989,0,1029,949,1030,1017,966,1024,1039],
[1125,983,1074,1046,972,0,1090,1036,1020,1015,1053,977],
[1057,935,995,993,1052,911,0,1057,943,990,966,974],
[1072,904,910,940,971,965,944,0,990,1004,974,914],
[1079,992,1063,1043,984,981,1058,1011,0,980,1052,1022],
[1082,940,1021,996,1035,986,1011,997,1021,0,971,989],
[1083,966,941,1003,977,948,1035,1027,949,1030,0,1010],
[1081,1012,999,1016,962,1024,1027,1087,979,1012,991,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 93, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1035,1009,1004,1021,994,1021,1009,1011,1007,1007,993],
[966,0,973,996,997,996,1003,1010,1002,965,1008,987],
[992,1028,0,993,1005,1029,1012,1033,988,1005,988,1030],
[997,1005,1008,0,986,1027,1022,1011,982,1013,980,1029],
[980,1004,996,1015,0,1008,1012,1008,996,974,982,1014],
[1007,1005,972,974,993,0,1000,993,975,995,1002,974],
[980,998,989,979,989,1001,0,1010,1033,942,964,998],
[992,991,968,990,993,1008,991,0,1002,993,973,1012],
[990,999,1013,1019,1005,1026,968,999,0,993,1008,1048],
[994,1036,996,988,1027,1006,1059,1008,1008,0,984,1026],
[994,993,1013,1021,1019,999,1037,1028,993,1017,0,996],
[1008,1014,971,972,987,1027,1003,989,953,975,1005,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 94, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,971,995,1035,1007,1007,997,962,1028,988,995,1054],
[1030,0,973,998,978,1036,987,1002,1001,989,1025,1051],
[1006,1028,0,1018,986,1016,1000,1007,1012,1016,1013,1008],
[966,1003,983,0,957,955,940,978,993,957,981,984],
[994,1023,1015,1044,0,1048,1043,1018,1048,1000,1021,1068],
[994,965,985,1046,953,0,1002,972,996,993,989,1024],
[1004,1014,1001,1061,958,999,0,987,1021,994,1004,1058],
[1039,999,994,1023,983,1029,1014,0,1004,1009,1015,1058],
[973,1000,989,1008,953,1005,980,997,0,1005,1006,1032],
[1013,1012,985,1044,1001,1008,1007,992,996,0,998,1034],
[1006,976,988,1020,980,1012,997,986,995,1003,0,1002],
[947,950,993,1017,933,977,943,943,969,967,999,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 95, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,987,1027,977,1031,1034,986,1012,1013,1036,949,964],
[1014,0,994,971,1062,1004,969,1025,1021,1002,979,955],
[974,1007,0,959,1007,1006,1020,1007,1003,1033,973,941],
[1024,1030,1042,0,1054,1034,1050,1083,1003,1091,958,992],
[970,939,994,947,0,975,972,968,951,953,909,920],
[967,997,995,967,1026,0,946,1033,971,979,959,952],
[1015,1032,981,951,1029,1055,0,1005,1053,1058,1012,954],
[989,976,994,918,1033,968,996,0,999,1036,988,977],
[988,980,998,998,1050,1030,948,1002,0,1024,986,925],
[965,999,968,910,1048,1022,943,965,977,0,961,958],
[1052,1022,1028,1043,1092,1042,989,1013,1015,1040,0,1017],
[1037,1046,1060,1009,1081,1049,1047,1024,1076,1043,984,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 96, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,969,1045,966,1018,1048,944,1052,1001,1064,1042,1048],
[1032,0,1091,1016,1056,1032,1055,1031,993,1048,1068,991],
[956,910,0,972,986,1018,1000,992,957,1000,1012,974],
[1035,985,1029,0,1012,1051,1019,1001,970,1064,995,1022],
[983,945,1015,989,0,1033,989,965,982,1025,1019,1029],
[953,969,983,950,968,0,997,959,928,946,977,974],
[1057,946,1001,982,1012,1004,0,1036,1002,1068,1036,1022],
[949,970,1009,1000,1036,1042,965,0,953,1030,1000,998],
[1000,1008,1044,1031,1019,1073,999,1048,0,1067,1065,1008],
[937,953,1001,937,976,1055,933,971,934,0,990,1030],
[959,933,989,1006,982,1024,965,1001,936,1011,0,941],
[953,1010,1027,979,972,1027,979,1003,993,971,1060,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 97, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1031,1021,1004,965,1002,1021,1013,1012,1005,1015,1016],
[970,0,1009,958,994,1008,1003,964,1028,989,957,1026],
[980,992,0,962,973,982,976,996,1022,973,995,1004],
[997,1043,1039,0,999,1028,1016,1001,1066,993,1021,1039],
[1036,1007,1028,1002,0,991,1021,1040,1056,1005,1003,1034],
[999,993,1019,973,1010,0,1008,994,1025,980,1001,1047],
[980,998,1025,985,980,993,0,1000,1019,1003,996,1007],
[988,1037,1005,1000,961,1007,1001,0,1040,998,992,1030],
[989,973,979,935,945,976,982,961,0,963,965,1003],
[996,1012,1028,1008,996,1021,998,1003,1038,0,988,1046],
[986,1044,1006,980,998,1000,1005,1009,1036,1013,0,1040],
[985,975,997,962,967,954,994,971,998,955,961,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 98, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,995,1019,1008,1016,1040,1061,1057,1009,1040,1036,1019],
[1006,0,996,1005,1023,1028,1024,1026,1025,1024,1033,1036],
[982,1005,0,1006,1035,1041,1029,1020,1009,1002,1062,1041],
[993,996,995,0,1031,1006,1019,1011,1022,994,986,1010],
[985,978,966,970,0,979,1038,1018,1008,983,1031,991],
[961,973,960,995,1022,0,1025,977,980,1001,1001,1007],
[940,977,972,982,963,976,0,946,978,979,1011,961],
[944,975,981,990,983,1024,1055,0,1007,1012,1022,1030],
[992,976,992,979,993,1021,1023,994,0,1000,966,1024],
[961,977,999,1007,1018,1000,1022,989,1001,0,1029,1032],
[965,968,939,1015,970,1000,990,979,1035,972,0,972],
[982,965,960,991,1010,994,1040,971,977,969,1029,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 99, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,977,1040,1009,978,1005,988,1013,977,991,1031,988],
[1024,0,1007,1027,1005,1002,1006,1031,1004,1015,1032,991],
[961,994,0,1009,971,968,987,1031,991,987,1013,977],
[992,974,992,0,980,995,998,1016,967,968,1017,983],
[1023,996,1030,1021,0,986,1007,1030,1009,1005,1018,1005],
[996,999,1033,1006,1015,0,1038,1020,1012,976,1016,989],
[1013,995,1014,1003,994,963,0,1018,1019,991,1017,992],
[988,970,970,985,971,981,983,0,975,958,972,951],
[1024,997,1010,1034,992,989,982,1026,0,981,1008,997],
[1010,986,1014,1033,996,1025,1010,1043,1020,0,1038,991],
[970,969,988,984,983,985,984,1029,993,963,0,967],
[1013,1010,1024,1018,996,1012,1009,1050,1004,1010,1034,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 100, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,875,894,938,925,979,952,937,917,835,914,915],
[1126,0,1020,1044,1064,1066,1054,1037,1001,985,1007,1053],
[1107,981,0,988,1024,1073,1064,985,997,1004,944,1010],
[1063,957,1013,0,1003,977,1021,924,956,925,1005,1005],
[1076,937,977,998,0,1008,1014,1008,985,949,972,945],
[1022,935,928,1024,993,0,1004,983,984,935,928,951],
[1049,947,937,980,987,997,0,993,969,956,954,974],
[1064,964,1016,1077,993,1018,1008,0,967,986,974,1043],
[1084,1000,1004,1045,1016,1017,1032,1034,0,995,986,1042],
[1166,1016,997,1076,1052,1066,1045,1015,1006,0,993,1013],
[1087,994,1057,996,1029,1073,1047,1027,1015,1008,0,1037],
[1086,948,991,996,1056,1050,1027,958,959,988,964,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 101, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,945,941,976,994,973,983,931,905,943,987,967],
[1056,0,1054,1019,1013,1039,1067,936,1016,1123,1038,1082],
[1060,947,0,1005,970,970,1015,966,969,1009,1035,977],
[1025,982,996,0,965,981,1040,943,985,1018,996,983],
[1007,988,1031,1036,0,1040,1036,1005,989,1048,1074,995],
[1028,962,1031,1020,961,0,1051,946,979,1009,1033,980],
[1018,934,986,961,965,950,0,920,917,1005,981,942],
[1070,1065,1035,1058,996,1055,1081,0,968,1046,1026,1036],
[1096,985,1032,1016,1012,1022,1084,1033,0,1051,1052,1023],
[1058,878,992,983,953,992,996,955,950,0,1025,920],
[1014,963,966,1005,927,968,1020,975,949,976,0,972],
[1034,919,1024,1018,1006,1021,1059,965,978,1081,1029,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 102, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1027,1082,997,1099,1091,967,1009,1038,1018,1221,1161],
[974,0,1030,930,1043,986,1024,990,979,876,1027,1048],
[919,971,0,888,934,1040,987,947,901,988,1006,1003],
[1004,1071,1113,0,1147,1050,1077,989,1010,1006,1109,1096],
[902,958,1067,854,0,957,870,1039,847,953,1023,1031],
[910,1015,961,951,1044,0,955,1046,883,970,1059,991],
[1034,977,1014,924,1131,1046,0,990,1037,1010,1113,1129],
[992,1011,1054,1012,962,955,1011,0,953,978,1160,1072],
[963,1022,1100,991,1154,1118,964,1048,0,1043,1051,1143],
[983,1125,1013,995,1048,1031,991,1023,958,0,1108,1084],
[780,974,995,892,978,942,888,841,950,893,0,925],
[840,953,998,905,970,1010,872,929,858,917,1076,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 103, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1049,1004,1017,1020,1043,1021,1005,1013,1032,1043,981],
[952,0,1002,992,1009,1023,1054,995,997,1015,1030,1045],
[997,999,0,981,998,1015,1022,997,999,982,1016,1008],
[984,1009,1020,0,1037,1043,1057,1027,1025,1022,1055,1033],
[981,992,1003,964,0,1008,999,1001,1017,1006,1002,996],
[958,978,986,958,993,0,1000,978,991,940,1036,1024],
[980,947,979,944,1002,1001,0,975,1003,996,998,1013],
[996,1006,1004,974,1000,1023,1026,0,1014,977,1013,998],
[988,1004,1002,976,984,1010,998,987,0,958,1026,988],
[969,986,1019,979,995,1061,1005,1024,1043,0,1040,1021],
[958,971,985,946,999,965,1003,988,975,961,0,980],
[1020,956,993,968,1005,977,988,1003,1013,980,1021,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 104, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1037,1020,1051,1029,997,1021,1035,1047,1027,1061,1052],
[964,0,1028,979,971,1014,964,991,1028,977,1021,1011],
[981,973,0,1010,1032,1010,961,1022,1027,976,1031,1028],
[950,1022,991,0,1005,1007,958,998,1036,1007,988,1025],
[972,1030,969,996,0,974,932,982,1030,962,977,981],
[1004,987,991,994,1027,0,982,986,1018,987,977,997],
[980,1037,1040,1043,1069,1019,0,1042,1069,1029,1037,1036],
[966,1010,979,1003,1019,1015,959,0,1045,1012,1021,1028],
[954,973,974,965,971,983,932,956,0,931,944,980],
[974,1024,1025,994,1039,1014,972,989,1070,0,999,1051],
[940,980,970,1013,1024,1024,964,980,1057,1002,0,1041],
[949,990,973,976,1020,1004,965,973,1021,950,960,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 105, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,961,967,982,1002,969,985,1030,1023,974,991,985],
[1040,0,1012,1029,1037,989,993,1044,1037,1001,1017,1032],
[1034,989,0,1000,1030,1018,1046,1022,1064,1004,1024,1030],
[1019,972,1001,0,986,969,1002,1005,1022,977,1003,985],
[999,964,971,1015,0,977,1018,1021,1032,977,1011,1008],
[1032,1012,983,1032,1024,0,1033,1042,1061,976,1036,1007],
[1016,1008,955,999,983,968,0,999,1016,998,975,1001],
[971,957,979,996,980,959,1002,0,1005,945,1006,997],
[978,964,937,979,969,940,985,996,0,953,987,999],
[1027,1000,997,1024,1024,1025,1003,1056,1048,0,1001,1037],
[1010,984,977,998,990,965,1026,995,1014,1000,0,1002],
[1016,969,971,1016,993,994,1000,1004,1002,964,999,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 106, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,995,1009,1053,1018,943,996,1079,1051,1079,988,1022],
[1006,0,1009,1008,1068,991,960,1042,1010,1030,997,1008],
[992,992,0,974,1002,951,963,1074,1020,1072,1002,974],
[948,993,1027,0,1023,984,980,1034,1029,1053,1022,1002],
[983,933,999,978,0,998,1010,1005,990,1087,1040,994],
[1058,1010,1050,1017,1003,0,992,1065,1013,1090,1084,1066],
[1005,1041,1038,1021,991,1009,0,1083,988,1101,1021,1040],
[922,959,927,967,996,936,918,0,1004,992,964,965],
[950,991,981,972,1011,988,1013,997,0,1044,1017,1000],
[922,971,929,948,914,911,900,1009,957,0,966,945],
[1013,1004,999,979,961,917,980,1037,984,1035,0,1008],
[979,993,1027,999,1007,935,961,1036,1001,1056,993,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 107, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,951,948,1005,951,1135,995,1018,980,1014,1008,1075],
[1050,0,979,1105,1088,1100,1087,1039,1081,1127,1049,1030],
[1053,1022,0,1111,1006,1122,992,958,1083,1056,1020,1088],
[996,896,890,0,924,941,834,823,1006,1040,1042,1014],
[1050,913,995,1077,0,1038,993,979,1032,1110,1015,1058],
[866,901,879,1060,963,0,1016,915,941,1038,845,1009],
[1006,914,1009,1167,1008,985,0,959,1040,1112,963,1016],
[983,962,1043,1178,1022,1086,1042,0,1022,1104,1105,1054],
[1021,920,918,995,969,1060,961,979,0,1028,952,985],
[987,874,945,961,891,963,889,897,973,0,1016,998],
[993,952,981,959,986,1156,1038,896,1049,985,0,1099],
[926,971,913,987,943,992,985,947,1016,1003,902,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 108, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,999,945,985,1011,1002,992,986,1012,986,1003,1013],
[1002,0,1003,985,1017,987,972,995,1046,1031,1020,1036],
[1056,998,0,1046,1024,1053,1023,1005,1040,1022,1035,1062],
[1016,1016,955,0,986,1042,1013,967,991,1047,1006,1047],
[990,984,977,1015,0,1002,1000,996,1032,998,1014,1016],
[999,1014,948,959,999,0,998,962,997,1010,1003,1024],
[1009,1029,978,988,1001,1003,0,994,1041,1053,1042,1051],
[1015,1006,996,1034,1005,1039,1007,0,1040,982,1009,1016],
[989,955,961,1010,969,1004,960,961,0,1014,999,1000],
[1015,970,979,954,1003,991,948,1019,987,0,980,1032],
[998,981,966,995,987,998,959,992,1002,1021,0,1027],
[988,965,939,954,985,977,950,985,1001,969,974,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 109, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,990,988,1014,995,981,984,992,989,985,1028,998],
[1011,0,982,964,998,996,1006,972,973,966,987,994],
[1013,1019,0,1019,1037,1009,1021,995,1021,996,1036,1034],
[987,1037,982,0,994,989,1036,1037,990,993,1010,1020],
[1006,1003,964,1007,0,993,1001,994,993,983,1017,1005],
[1020,1005,992,1012,1008,0,1011,1013,1008,985,1037,1020],
[1017,995,980,965,1000,990,0,985,999,949,1018,998],
[1009,1029,1006,964,1007,988,1016,0,1003,1002,1014,1017],
[1012,1028,980,1011,1008,993,1002,998,0,970,1005,1001],
[1016,1035,1005,1008,1018,1016,1052,999,1031,0,1004,1045],
[973,1014,965,991,984,964,983,987,996,997,0,1012],
[1003,1007,967,981,996,981,1003,984,1000,956,989,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 110, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,979,993,1006,967,916,989,952,957,935,975,1004],
[1022,0,1029,1035,1061,1055,953,984,1038,964,1012,1024],
[1008,972,0,1006,996,961,1011,951,969,947,985,981],
[995,966,995,0,1015,961,998,931,982,953,970,951],
[1034,940,1005,986,0,983,942,919,949,943,981,964],
[1085,946,1040,1040,1018,0,986,1009,979,939,997,982],
[1012,1048,990,1003,1059,1015,0,961,995,984,965,956],
[1049,1017,1050,1070,1082,992,1040,0,1061,1009,1013,1053],
[1044,963,1032,1019,1052,1022,1006,940,0,976,1001,998],
[1066,1037,1054,1048,1058,1062,1017,992,1025,0,1022,1006],
[1026,989,1016,1031,1020,1004,1036,988,1000,979,0,966],
[997,977,1020,1050,1037,1019,1045,948,1003,995,1035,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 111, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,978,955,937,1000,963,1015,1001,978,960,972,946],
[1023,0,973,981,998,967,1022,999,1027,974,978,989],
[1046,1028,0,1007,1012,986,1044,1038,1008,984,1001,1019],
[1064,1020,994,0,1021,983,1040,1049,1009,1000,989,1011],
[1001,1003,989,980,0,962,1007,994,997,981,961,979],
[1038,1034,1015,1018,1039,0,1039,1038,1021,999,1011,1032],
[986,979,957,961,994,962,0,996,982,962,966,971],
[1000,1002,963,952,1007,963,1005,0,1007,958,954,978],
[1023,974,993,992,1004,980,1019,994,0,965,947,1006],
[1041,1027,1017,1001,1020,1002,1039,1043,1036,0,989,996],
[1029,1023,1000,1012,1040,990,1035,1047,1054,1012,0,1009],
[1055,1012,982,990,1022,969,1030,1023,995,1005,992,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 112, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1034,922,926,970,994,1050,1025,1031,982,1005,985],
[967,0,933,947,963,986,1021,961,1012,975,1000,988],
[1079,1068,0,1001,1050,1066,1099,1036,1067,1051,1069,999],
[1075,1054,1000,0,1009,1071,1085,1043,1028,1003,1060,1045],
[1031,1038,951,992,0,996,1044,992,1000,996,1022,981],
[1007,1015,935,930,1005,0,1009,992,1006,991,983,998],
[951,980,902,916,957,992,0,957,970,964,1007,968],
[976,1040,965,958,1009,1009,1044,0,997,1001,1023,1004],
[970,989,934,973,1001,995,1031,1004,0,981,1073,991],
[1019,1026,950,998,1005,1010,1037,1000,1020,0,1017,974],
[996,1001,932,941,979,1018,994,978,928,984,0,976],
[1016,1013,1002,956,1020,1003,1033,997,1010,1027,1025,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 113, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,945,996,967,992,1018,954,957,935,980,980,974],
[1056,0,1021,978,1048,1021,1020,1038,984,1035,1031,1009],
[1005,980,0,1004,1031,1021,981,976,968,968,1002,1005],
[1034,1023,997,0,1014,1016,1001,972,980,985,1018,982],
[1009,953,970,987,0,1030,961,951,947,992,955,964],
[983,980,980,985,971,0,986,939,906,986,944,985],
[1047,981,1020,1000,1040,1015,0,1011,961,1018,987,1014],
[1044,963,1025,1029,1050,1062,990,0,975,1014,1023,987],
[1066,1017,1033,1021,1054,1095,1040,1026,0,1039,1000,1054],
[1021,966,1033,1016,1009,1015,983,987,962,0,991,1012],
[1021,970,999,983,1046,1057,1014,978,1001,1010,0,1014],
[1027,992,996,1019,1037,1016,987,1014,947,989,987,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 114, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1047,999,1019,1019,1034,992,1008,1008,1015,1029,1004],
[954,0,1009,981,987,1020,958,966,1037,1000,985,973],
[1002,992,0,966,995,1018,935,984,1009,989,1010,1036],
[982,1020,1035,0,1003,1036,980,967,1036,1031,1002,995],
[982,1014,1006,998,0,986,932,939,994,949,979,999],
[967,981,983,965,1015,0,945,977,1010,948,999,982],
[1009,1043,1066,1021,1069,1056,0,1000,1032,999,1065,1017],
[993,1035,1017,1034,1062,1024,1001,0,1015,1033,1033,1032],
[993,964,992,965,1007,991,969,986,0,1017,952,1019],
[986,1001,1012,970,1052,1053,1002,968,984,0,1031,1009],
[972,1016,991,999,1022,1002,936,968,1049,970,0,999],
[997,1028,965,1006,1002,1019,984,969,982,992,1002,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 115, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,990,1031,1014,938,1019,907,959,1017,991,945,933],
[1011,0,1071,1001,954,1037,990,1015,1029,1011,1003,952],
[970,930,0,949,988,1015,935,950,986,974,954,929],
[987,1000,1052,0,960,1030,983,992,1016,995,947,969],
[1063,1047,1013,1041,0,1062,1071,1079,1061,1010,1000,1046],
[982,964,986,971,939,0,953,984,990,949,904,940],
[1094,1011,1066,1018,930,1048,0,1023,1017,1027,958,969],
[1042,986,1051,1009,922,1017,978,0,984,989,970,999],
[984,972,1015,985,940,1011,984,1017,0,1025,929,971],
[1010,990,1027,1006,991,1052,974,1012,976,0,975,969],
[1056,998,1047,1054,1001,1097,1043,1031,1072,1026,0,935],
[1068,1049,1072,1032,955,1061,1032,1002,1030,1032,1066,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 116, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1011,1011,982,997,1010,1021,1000,986,1006,1012,1031],
[990,0,986,977,973,965,1011,982,975,968,974,1037],
[990,1015,0,979,997,1002,1018,1008,993,991,1003,1050],
[1019,1024,1022,0,1012,1007,1027,1002,1008,1026,999,1042],
[1004,1028,1004,989,0,990,1044,1008,1018,1017,994,1042],
[991,1036,999,994,1011,0,1016,983,979,1010,1005,1046],
[980,990,983,974,957,985,0,982,978,986,1001,1017],
[1001,1019,993,999,993,1018,1019,0,987,1021,999,1051],
[1015,1026,1008,993,983,1022,1023,1014,0,992,1002,1055],
[995,1033,1010,975,984,991,1015,980,1009,0,979,1031],
[989,1027,998,1002,1007,996,1000,1002,999,1022,0,1017],
[970,964,951,959,959,955,984,950,946,970,984,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 117, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,963,964,977,977,1007,940,982,968,1017,1022,975],
[1038,0,996,974,1030,1050,980,1001,1009,1039,1013,1041],
[1037,1005,0,1048,1008,1036,998,1042,1030,1031,1078,1007],
[1024,1027,953,0,1017,1068,1003,1034,1015,999,1055,1028],
[1024,971,993,984,0,1028,975,1029,952,990,1041,981],
[994,951,965,933,973,0,953,978,958,960,987,967],
[1061,1021,1003,998,1026,1048,0,996,1039,1024,1041,1029],
[1019,1000,959,967,972,1023,1005,0,990,982,982,972],
[1033,992,971,986,1049,1043,962,1011,0,1023,1007,992],
[984,962,970,1002,1011,1041,977,1019,978,0,998,1009],
[979,988,923,946,960,1014,960,1019,994,1003,0,988],
[1026,960,994,973,1020,1034,972,1029,1009,992,1013,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 118, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,794,758,746,1014,841,657,800,897,1023,1015,728],
[1207,0,1075,984,982,1175,1170,1093,1192,1142,1268,1026],
[1243,926,0,880,1013,1077,945,1083,1133,1156,979,1017],
[1255,1017,1121,0,1045,1194,1071,1060,1018,1054,1154,845],
[987,1019,988,956,0,1070,1014,944,1142,1042,936,881],
[1160,826,924,807,931,0,767,886,1087,932,1025,659],
[1344,831,1056,930,987,1234,0,939,1032,1010,1048,1018],
[1201,908,918,941,1057,1115,1062,0,1190,1179,1118,888],
[1104,809,868,983,859,914,969,811,0,922,961,777],
[978,859,845,947,959,1069,991,822,1079,0,1112,769],
[986,733,1022,847,1065,976,953,883,1040,889,0,808],
[1273,975,984,1156,1120,1342,983,1113,1224,1232,1193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 119, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1019,969,913,1029,958,952,1021,997,929,1031,1038],
[982,0,956,1009,1062,1069,950,972,1078,1029,1102,1104],
[1032,1045,0,1017,949,1041,1027,1000,1018,978,1032,1152],
[1088,992,984,0,981,1045,934,917,1019,923,987,1066],
[972,939,1052,1020,0,973,949,1032,997,981,1076,1054],
[1043,932,960,956,1028,0,917,1090,942,1042,1045,1054],
[1049,1051,974,1067,1052,1084,0,998,1073,978,1042,1033],
[980,1029,1001,1084,969,911,1003,0,1067,988,1045,1004],
[1004,923,983,982,1004,1059,928,934,0,951,1058,1048],
[1072,972,1023,1078,1020,959,1023,1013,1050,0,1000,1048],
[970,899,969,1014,925,956,959,956,943,1001,0,1039],
[963,897,849,935,947,947,968,997,953,953,962,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 120, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,965,972,950,1020,1049,966,997,989,1009,983,985],
[1036,0,988,971,1028,1057,1015,1043,978,995,1012,991],
[1029,1013,0,1019,1019,1049,1033,1046,998,1004,1047,1035],
[1051,1030,982,0,1053,1066,1040,1084,1010,1022,1037,1037],
[981,973,982,948,0,1046,1003,1001,968,979,1009,983],
[952,944,952,935,955,0,985,1002,951,982,1006,949],
[1035,986,968,961,998,1016,0,1054,964,983,1050,1015],
[1004,958,955,917,1000,999,947,0,936,969,989,969],
[1012,1023,1003,991,1033,1050,1037,1065,0,1031,1053,1035],
[992,1006,997,979,1022,1019,1018,1032,970,0,1014,1020],
[1018,989,954,964,992,995,951,1012,948,987,0,989],
[1016,1010,966,964,1018,1052,986,1032,966,981,1012,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 121, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1010,1022,999,1118,1039,1024,1018,1076,1047,1071,1081],
[991,0,1067,1044,1044,1050,995,992,1108,1068,1089,998],
[979,934,0,997,1075,1039,1027,925,1031,977,1070,949],
[1002,957,1004,0,1027,1013,1036,992,1043,1018,1042,991],
[883,957,926,974,0,919,948,945,997,955,989,966],
[962,951,962,988,1082,0,999,989,1012,1021,1034,981],
[977,1006,974,965,1053,1002,0,996,1017,1036,1081,1041],
[983,1009,1076,1009,1056,1012,1005,0,1030,1080,1006,925],
[925,893,970,958,1004,989,984,971,0,990,1007,988],
[954,933,1024,983,1046,980,965,921,1011,0,994,1005],
[930,912,931,959,1012,967,920,995,994,1007,0,972],
[920,1003,1052,1010,1035,1020,960,1076,1013,996,1029,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 122, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1027,1051,1001,1045,1025,983,1039,1020,1002,1028,994],
[974,0,1063,909,1006,968,943,908,941,1008,993,955],
[950,938,0,872,990,950,929,912,954,963,967,956],
[1000,1092,1129,0,1062,1040,1041,1021,1047,1027,1064,1033],
[956,995,1011,939,0,991,974,933,988,969,986,984],
[976,1033,1051,961,1010,0,1019,1011,1024,1032,1028,1015],
[1018,1058,1072,960,1027,982,0,989,1015,1018,1003,1032],
[962,1093,1089,980,1068,990,1012,0,1020,1053,1017,1041],
[981,1060,1047,954,1013,977,986,981,0,1011,1031,1011],
[999,993,1038,974,1032,969,983,948,990,0,1019,999],
[973,1008,1034,937,1015,973,998,984,970,982,0,986],
[1007,1046,1045,968,1017,986,969,960,990,1002,1015,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 123, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,956,959,950,949,976,968,990,959,954,1016,986],
[1045,0,1041,992,988,1011,1013,1025,1004,1011,1036,992],
[1042,960,0,989,969,998,997,1027,975,1028,1034,1021],
[1051,1009,1012,0,996,1014,1004,1031,983,1009,1020,970],
[1052,1013,1032,1005,0,1023,991,1057,979,1010,1057,972],
[1025,990,1003,987,978,0,982,958,925,963,986,954],
[1033,988,1004,997,1010,1019,0,1063,1011,989,1057,962],
[1011,976,974,970,944,1043,938,0,965,996,966,969],
[1042,997,1026,1018,1022,1076,990,1036,0,1038,1017,994],
[1047,990,973,992,991,1038,1012,1005,963,0,981,979],
[985,965,967,981,944,1015,944,1035,984,1020,0,993],
[1015,1009,980,1031,1029,1047,1039,1032,1007,1022,1008,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 124, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1020,943,1035,1007,994,959,991,993,1003,957,982],
[981,0,961,1021,1028,996,1034,984,991,1022,965,979],
[1058,1040,0,1017,984,994,1010,1025,1013,1010,999,1011],
[966,980,984,0,965,973,948,960,947,977,943,956],
[994,973,1017,1036,0,949,972,992,1010,979,994,986],
[1007,1005,1007,1028,1052,0,1009,976,967,987,1029,1014],
[1042,967,991,1053,1029,992,0,983,1014,1001,983,985],
[1010,1017,976,1041,1009,1025,1018,0,1011,1006,1009,988],
[1008,1010,988,1054,991,1034,987,990,0,979,960,975],
[998,979,991,1024,1022,1014,1000,995,1022,0,952,998],
[1044,1036,1002,1058,1007,972,1018,992,1041,1049,0,990],
[1019,1022,990,1045,1015,987,1016,1013,1026,1003,1011,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 125, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,987,980,1003,1004,1012,1003,987,987,1010,1009,982],
[1014,0,986,996,1022,980,988,1019,989,1011,1000,983],
[1021,1015,0,1003,1026,1008,988,1012,1019,1005,1042,991],
[998,1005,998,0,981,1021,988,971,982,982,998,991],
[997,979,975,1020,0,998,983,1010,1007,1029,1011,979],
[989,1021,993,980,1003,0,1017,1013,974,1015,1019,1004],
[998,1013,1013,1013,1018,984,0,996,1021,1013,1023,980],
[1014,982,989,1030,991,988,1005,0,976,1009,1005,972],
[1014,1012,982,1019,994,1027,980,1025,0,1044,1012,1002],
[991,990,996,1019,972,986,988,992,957,0,1006,971],
[992,1001,959,1003,990,982,978,996,989,995,0,992],
[1019,1018,1010,1010,1022,997,1021,1029,999,1030,1009,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 126, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1009,1018,1034,1023,1033,1015,1011,1023,994,1039,1044],
[992,0,1020,998,1003,998,1010,1007,992,990,995,1004],
[983,981,0,1011,1021,999,1021,1002,986,1000,1000,995],
[967,1003,990,0,1028,981,1008,1010,988,958,1021,1004],
[978,998,980,973,0,1009,1007,1006,1010,972,1017,991],
[968,1003,1002,1020,992,0,1004,1007,987,970,1007,995],
[986,991,980,993,994,997,0,1011,979,1007,1009,993],
[990,994,999,991,995,994,990,0,969,976,990,1001],
[978,1009,1015,1013,991,1014,1022,1032,0,991,1011,1015],
[1007,1011,1001,1043,1029,1031,994,1025,1010,0,1030,1009],
[962,1006,1001,980,984,994,992,1011,990,971,0,996],
[957,997,1006,997,1010,1006,1008,1000,986,992,1005,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 127, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1045,980,1003,992,1008,1080,1011,1086,974,1029,1036],
[956,0,922,948,941,967,1007,950,1046,971,951,962],
[1021,1079,0,1021,977,1036,1073,1058,1097,1029,1073,1049],
[998,1053,980,0,1023,969,1046,947,1078,978,964,1033],
[1009,1060,1024,978,0,948,1058,967,1053,951,1017,1006],
[993,1034,965,1032,1053,0,1070,1007,1073,942,1005,1018],
[921,994,928,955,943,931,0,952,1028,931,1005,968],
[990,1051,943,1054,1034,994,1049,0,1083,1046,1017,1019],
[915,955,904,923,948,928,973,918,0,932,915,888],
[1027,1030,972,1023,1050,1059,1070,955,1069,0,1015,1039],
[972,1050,928,1037,984,996,996,984,1086,986,0,1085],
[965,1039,952,968,995,983,1033,982,1113,962,916,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 128, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,963,1020,1068,1001,981,1020,986,1090,985,1067,1053],
[1038,0,1036,1015,1037,1019,1011,1017,1088,997,1050,1020],
[981,965,0,990,988,988,998,1008,1008,995,1028,1003],
[933,986,1011,0,985,1004,1003,1000,1042,1002,1033,971],
[1000,964,1013,1016,0,1019,1035,1024,1034,1022,1037,1041],
[1020,982,1013,997,982,0,1036,1037,1057,974,1062,1028],
[981,990,1003,998,966,965,0,988,1036,988,1044,1002],
[1015,984,993,1001,977,964,1013,0,995,1018,1046,987],
[911,913,993,959,967,944,965,1006,0,958,1022,949],
[1016,1004,1006,999,979,1027,1013,983,1043,0,1056,991],
[934,951,973,968,964,939,957,955,979,945,0,943],
[948,981,998,1030,960,973,999,1014,1052,1010,1058,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 129, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,963,1012,1013,974,1000,1032,1080,1003,1046,1009,1018],
[1038,0,1028,1008,1002,990,998,1024,1016,1016,1047,1006],
[989,973,0,1033,929,942,966,1038,1030,984,997,979],
[988,993,968,0,963,975,1033,1025,1002,994,1043,1000],
[1027,999,1072,1038,0,1022,1026,1061,1035,1004,1035,1012],
[1001,1011,1059,1026,979,0,1009,1047,1039,1036,1028,1069],
[969,1003,1035,968,975,992,0,1012,996,972,990,962],
[921,977,963,976,940,954,989,0,988,993,978,991],
[998,985,971,999,966,962,1005,1013,0,982,1015,1020],
[955,985,1017,1007,997,965,1029,1008,1019,0,980,978],
[992,954,1004,958,966,973,1011,1023,986,1021,0,982],
[983,995,1022,1001,989,932,1039,1010,981,1023,1019,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 130, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1045,997,967,1030,1005,1057,1050,1065,1021,1042,1029],
[956,0,994,970,1005,973,1020,1010,1013,1017,1038,1008],
[1004,1007,0,992,1048,973,1062,1073,1066,989,1064,1012],
[1034,1031,1009,0,1037,1024,1079,1064,1050,1047,1019,981],
[971,996,953,964,0,973,996,1008,1034,963,983,1002],
[996,1028,1028,977,1028,0,1035,1030,1079,987,1071,1036],
[944,981,939,922,1005,966,0,996,980,921,995,973],
[951,991,928,937,993,971,1005,0,1007,960,954,967],
[936,988,935,951,967,922,1021,994,0,1023,992,973],
[980,984,1012,954,1038,1014,1080,1041,978,0,966,999],
[959,963,937,982,1018,930,1006,1047,1009,1035,0,936],
[972,993,989,1020,999,965,1028,1034,1028,1002,1065,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 131, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1012,1049,1072,1004,1013,1021,1164,1080,1178,997,1169],
[989,0,1021,1060,965,1017,1019,967,994,1021,1057,1140],
[952,980,0,1061,1014,991,1007,1095,1043,1008,941,1049],
[929,941,940,0,859,790,959,1054,941,941,1036,1104],
[997,1036,987,1142,0,1026,901,1076,964,1061,974,1110],
[988,984,1010,1211,975,0,1100,1138,940,1109,906,1082],
[980,982,994,1042,1100,901,0,1116,921,1014,958,1122],
[837,1034,906,947,925,863,885,0,945,977,952,1017],
[921,1007,958,1060,1037,1061,1080,1056,0,1121,1036,1232],
[823,980,993,1060,940,892,987,1024,880,0,940,1053],
[1004,944,1060,965,1027,1095,1043,1049,965,1061,0,1114],
[832,861,952,897,891,919,879,984,769,948,887,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 132, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1004,1023,970,976,997,1007,997,972,989,959,995],
[997,0,1051,1001,1012,1024,983,1026,962,1002,1025,1014],
[978,950,0,957,974,999,943,956,968,922,951,965],
[1031,1000,1044,0,997,1015,994,1009,1016,986,1026,991],
[1025,989,1027,1004,0,1009,994,1004,993,1002,1027,998],
[1004,977,1002,986,992,0,1001,1012,979,981,1021,985],
[994,1018,1058,1007,1007,1000,0,990,1013,998,1001,1001],
[1004,975,1045,992,997,989,1011,0,987,989,1002,963],
[1029,1039,1033,985,1008,1022,988,1014,0,1020,1007,995],
[1012,999,1079,1015,999,1020,1003,1012,981,0,1007,1010],
[1042,976,1050,975,974,980,1000,999,994,994,0,1000],
[1006,987,1036,1010,1003,1016,1000,1038,1006,991,1001,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 133, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1017,993,1052,1024,994,1015,1006,1017,1017,1006,1004],
[984,0,974,1024,994,999,953,1024,1020,1005,1003,991],
[1008,1027,0,1023,978,986,994,1022,981,1040,1032,991],
[949,977,978,0,992,991,949,1001,1020,978,1009,971],
[977,1007,1023,1009,0,1026,970,1036,996,1027,1002,1019],
[1007,1002,1015,1010,975,0,1004,1038,1001,980,1029,983],
[986,1048,1007,1052,1031,997,0,1044,1056,1018,1000,980],
[995,977,979,1000,965,963,957,0,968,981,979,990],
[984,981,1020,981,1005,1000,945,1033,0,1004,1005,999],
[984,996,961,1023,974,1021,983,1020,997,0,1004,963],
[995,998,969,992,999,972,1001,1022,996,997,0,937],
[997,1010,1010,1030,982,1018,1021,1011,1002,1038,1064,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 134, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,978,1000,991,960,972,967,998,1003,968,965,1024],
[1023,0,1010,996,991,1021,1037,1067,1070,1071,1028,1056],
[1001,991,0,966,972,982,1014,1015,1013,973,1027,966],
[1010,1005,1035,0,1016,998,965,995,1104,1055,1039,984],
[1041,1010,1029,985,0,1047,997,1034,1044,1030,1037,1025],
[1029,980,1019,1003,954,0,1022,1028,1104,1031,976,1011],
[1034,964,987,1036,1004,979,0,1039,1138,1057,1021,1095],
[1003,934,986,1006,967,973,962,0,1079,998,998,1015],
[998,931,988,897,957,897,863,922,0,957,912,930],
[1033,930,1028,946,971,970,944,1003,1044,0,995,1022],
[1036,973,974,962,964,1025,980,1003,1089,1006,0,1038],
[977,945,1035,1017,976,990,906,986,1071,979,963,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 135, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,989,977,1017,982,973,960,973,982,990,1002,997],
[1012,0,985,977,1004,980,947,992,969,1004,1017,971],
[1024,1016,0,1017,1038,976,975,1024,985,1010,981,1027],
[984,1024,984,0,1029,1012,965,984,996,997,989,1013],
[1019,997,963,972,0,926,954,971,953,987,1008,1014],
[1028,1021,1025,989,1075,0,998,1008,973,1004,1048,1014],
[1041,1054,1026,1036,1047,1003,0,996,1011,1021,1015,1061],
[1028,1009,977,1017,1030,993,1005,0,980,998,1015,1027],
[1019,1032,1016,1005,1048,1028,990,1021,0,1038,1043,1067],
[1011,997,991,1004,1014,997,980,1003,963,0,1040,1001],
[999,984,1020,1012,993,953,986,986,958,961,0,972],
[1004,1030,974,988,987,987,940,974,934,1000,1029,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 136, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1072,1018,1036,1034,961,975,1006,1011,997,1012,1001],
[929,0,998,1008,1018,976,953,978,975,963,1009,935],
[983,1003,0,1025,997,996,974,981,968,974,986,947],
[965,993,976,0,995,984,980,992,965,1010,1013,968],
[967,983,1004,1006,0,994,1019,991,975,983,1023,967],
[1040,1025,1005,1017,1007,0,1000,1019,995,1038,1013,981],
[1026,1048,1027,1021,982,1001,0,994,1021,1025,998,993],
[995,1023,1020,1009,1010,982,1007,0,1019,999,1029,953],
[990,1026,1033,1036,1026,1006,980,982,0,1020,1028,998],
[1004,1038,1027,991,1018,963,976,1002,981,0,977,991],
[989,992,1015,988,978,988,1003,972,973,1024,0,976],
[1000,1066,1054,1033,1034,1020,1008,1048,1003,1010,1025,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 137, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,976,997,1038,986,1034,1027,994,1031,1008,1009,1025],
[1025,0,976,1038,974,1009,998,1001,1007,981,1012,1004],
[1004,1025,0,1051,991,1014,982,1016,1010,986,978,996],
[963,963,950,0,961,993,960,936,1010,960,961,982],
[1015,1027,1010,1040,0,1032,1010,974,1072,1019,981,1026],
[967,992,987,1008,969,0,977,982,1008,971,980,989],
[974,1003,1019,1041,991,1024,0,978,1017,974,990,1024],
[1007,1000,985,1065,1027,1019,1023,0,1037,1011,995,998],
[970,994,991,991,929,993,984,964,0,989,973,982],
[993,1020,1015,1041,982,1030,1027,990,1012,0,987,1039],
[992,989,1023,1040,1020,1021,1011,1006,1028,1014,0,1013],
[976,997,1005,1019,975,1012,977,1003,1019,962,988,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 138, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1013,1025,963,1003,1009,984,1068,949,1082,1041,1003],
[988,0,991,989,980,1003,1036,1033,934,1048,999,991],
[976,1010,0,1047,1013,976,1047,1015,1002,1060,993,1025],
[1038,1012,954,0,993,1011,1044,1057,952,1101,1043,980],
[998,1021,988,1008,0,1023,977,1054,971,1067,991,967],
[992,998,1025,990,978,0,985,1041,923,1009,1034,973],
[1017,965,954,957,1024,1016,0,1074,935,1094,993,936],
[933,968,986,944,947,960,927,0,889,999,976,974],
[1052,1067,999,1049,1030,1078,1066,1112,0,1067,1098,1015],
[919,953,941,900,934,992,907,1002,934,0,939,904],
[960,1002,1008,958,1010,967,1008,1025,903,1062,0,945],
[998,1010,976,1021,1034,1028,1065,1027,986,1097,1056,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 139, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1484,1040,586,1468,151,605,428,1033,151,435,1014],
[517,0,889,435,1014,435,889,435,586,435,435,863],
[961,1112,0,579,579,1030,1033,879,1030,1112,879,879],
[1415,1566,1422,0,1033,1333,454,1415,1484,1415,1333,879],
[533,987,1422,968,0,533,536,533,987,533,968,968],
[1850,1566,971,668,1468,0,1122,1415,1550,1119,971,945],
[1396,1112,968,1547,1465,879,0,961,1547,1547,1314,1396],
[1573,1566,1122,586,1468,586,1040,0,1468,1119,889,1014],
[968,1415,971,517,1014,451,454,533,0,533,435,863],
[1850,1566,889,586,1468,882,454,882,1468,0,1317,863],
[1566,1566,1122,668,1033,1030,687,1112,1566,684,0,661],
[987,1138,1122,1122,1033,1056,605,987,1138,1138,1340,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 140, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1018,1028,997,1005,1008,1004,1063,1008,1029,1017,1037],
[983,0,989,979,968,963,980,1005,986,1010,984,1009],
[973,1012,0,977,984,988,990,1003,977,1005,1001,1016],
[1004,1022,1024,0,1015,973,1008,1065,1000,1031,1022,1027],
[996,1033,1017,986,0,1003,969,1015,1002,1023,1014,1026],
[993,1038,1013,1028,998,0,1008,1057,1016,1037,1007,1021],
[997,1021,1011,993,1032,993,0,1041,1007,1015,1013,1031],
[938,996,998,936,986,944,960,0,976,957,975,1004],
[993,1015,1024,1001,999,985,994,1025,0,1040,994,1000],
[972,991,996,970,978,964,986,1044,961,0,998,993],
[984,1017,1000,979,987,994,988,1026,1007,1003,0,1005],
[964,992,985,974,975,980,970,997,1001,1008,996,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 141, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,994,1028,928,1013,993,947,1044,994,1024,969,1117],
[1007,0,1023,1003,940,950,1011,1025,970,1040,1022,1066],
[973,978,0,1003,1068,1067,1032,1097,1023,963,975,1101],
[1073,998,998,0,1062,1050,1062,1097,1059,997,1066,1074],
[988,1061,933,939,0,977,1010,1033,992,1001,1024,1084],
[1008,1051,934,951,1024,0,943,1008,934,937,1011,1101],
[1054,990,969,939,991,1058,0,1043,1031,995,1039,1033],
[957,976,904,904,968,993,958,0,918,976,979,1033],
[1007,1031,978,942,1009,1067,970,1083,0,995,1070,1083],
[977,961,1038,1004,1000,1064,1006,1025,1006,0,972,1099],
[1032,979,1026,935,977,990,962,1022,931,1029,0,1059],
[884,935,900,927,917,900,968,968,918,902,942,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 142, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1062,1043,1047,985,1052,1088,1039,1056,1074,1042,1008],
[939,0,999,972,973,1017,1015,975,1039,981,987,944],
[958,1002,0,942,983,982,970,1017,991,951,1003,967],
[954,1029,1059,0,982,947,1065,1041,1029,1023,985,958],
[1016,1028,1018,1019,0,991,1014,1019,972,1058,1018,980],
[949,984,1019,1054,1010,0,1023,1026,1015,1000,999,962],
[913,986,1031,936,987,978,0,997,994,979,985,954],
[962,1026,984,960,982,975,1004,0,1021,992,1007,957],
[945,962,1010,972,1029,986,1007,980,0,983,991,967],
[927,1020,1050,978,943,1001,1022,1009,1018,0,996,974],
[959,1014,998,1016,983,1002,1016,994,1010,1005,0,964],
[993,1057,1034,1043,1021,1039,1047,1044,1034,1027,1037,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 143, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,954,1013,948,952,1002,1058,955,974,1026,978,1011],
[1047,0,1044,963,998,1031,1040,1001,1007,1038,993,1047],
[988,957,0,996,992,1020,1054,1011,969,1057,1001,1064],
[1053,1038,1005,0,1031,1049,1060,1051,999,1041,998,1029],
[1049,1003,1009,970,0,1014,1063,983,1008,1032,1012,1002],
[999,970,981,952,987,0,1024,1020,982,1035,970,1049],
[943,961,947,941,938,977,0,971,934,996,941,967],
[1046,1000,990,950,1018,981,1030,0,1002,1030,983,1010],
[1027,994,1032,1002,993,1019,1067,999,0,1051,1015,1057],
[975,963,944,960,969,966,1005,971,950,0,973,987],
[1023,1008,1000,1003,989,1031,1060,1018,986,1028,0,1068],
[990,954,937,972,999,952,1034,991,944,1014,933,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 144, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1021,1019,966,973,1029,1021,1004,1020,991,974,1020],
[980,0,986,987,992,962,994,1025,1004,981,982,1017],
[982,1015,0,1028,970,1004,1008,1029,1079,995,948,1019],
[1035,1014,973,0,982,981,1008,1002,1032,971,1011,1006],
[1028,1009,1031,1019,0,984,1012,993,1051,1012,957,1005],
[972,1039,997,1020,1017,0,1018,999,1036,986,980,1006],
[980,1007,993,993,989,983,0,988,1035,1002,968,968],
[997,976,972,999,1008,1002,1013,0,1034,1020,962,993],
[981,997,922,969,950,965,966,967,0,939,939,955],
[1010,1020,1006,1030,989,1015,999,981,1062,0,961,980],
[1027,1019,1053,990,1044,1021,1033,1039,1062,1040,0,1065],
[981,984,982,995,996,995,1033,1008,1046,1021,936,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 145, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,977,1016,1022,1032,1032,1000,988,1034,934,1040,1045],
[1024,0,1051,1029,1028,1007,1000,1025,1032,968,1052,1024],
[985,950,0,979,1007,998,995,999,981,1003,1007,1029],
[979,972,1022,0,1027,1017,992,1002,1028,976,1002,1017],
[969,973,994,974,0,956,971,979,1004,945,1007,970],
[969,994,1003,984,1045,0,970,950,1038,949,1006,996],
[1001,1001,1006,1009,1030,1031,0,980,1038,961,1022,1057],
[1013,976,1002,999,1022,1051,1021,0,1030,978,1016,1046],
[967,969,1020,973,997,963,963,971,0,929,966,1023],
[1067,1033,998,1025,1056,1052,1040,1023,1072,0,1070,1047],
[961,949,994,999,994,995,979,985,1035,931,0,1016],
[956,977,972,984,1031,1005,944,955,978,954,985,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 146, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1026,1033,1062,1120,1023,1000,1047,1079,1039,1015,1054],
[975,0,1023,1006,1056,983,992,1004,1024,1000,984,967],
[968,978,0,954,1021,898,992,922,1005,1015,974,981],
[939,995,1047,0,1053,998,1011,1027,1028,1052,972,1007],
[881,945,980,948,0,939,953,944,959,946,961,877],
[978,1018,1103,1003,1062,0,1051,1077,1012,1032,1005,988],
[1001,1009,1009,990,1048,950,0,968,1037,1018,1002,939],
[954,997,1079,974,1057,924,1033,0,1032,1024,999,999],
[922,977,996,973,1042,989,964,969,0,1028,984,1016],
[962,1001,986,949,1055,969,983,977,973,0,930,974],
[986,1017,1027,1029,1040,996,999,1002,1017,1071,0,1002],
[947,1034,1020,994,1124,1013,1062,1002,985,1027,999,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 147, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1113,985,1034,1033,1000,1115,1251,1018,1027,1113,1083],
[888,0,872,981,966,887,998,1081,910,951,983,995],
[1016,1129,0,1069,988,1089,988,1028,999,964,1108,987],
[967,1020,932,0,934,927,889,993,846,1025,1064,1051],
[968,1035,1013,1067,0,1121,1040,1159,1039,1049,1124,1129],
[1001,1114,912,1074,880,0,944,1059,1051,924,1046,1105],
[886,1003,1013,1112,961,1057,0,1105,1044,1073,1089,1032],
[750,920,973,1008,842,942,896,0,943,978,1006,1127],
[983,1091,1002,1155,962,950,957,1058,0,969,1164,1049],
[974,1050,1037,976,952,1077,928,1023,1032,0,1190,1100],
[888,1018,893,937,877,955,912,995,837,811,0,924],
[918,1006,1014,950,872,896,969,874,952,901,1077,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 148, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,960,1042,976,992,1063,1027,1042,1063,1006,991,1023],
[1041,0,1021,963,1025,1052,1042,1057,1022,1049,1061,1007],
[959,980,0,980,1013,1015,1057,993,1006,1009,1046,1007],
[1025,1038,1021,0,994,1089,1039,1059,1054,1029,1019,1022],
[1009,976,988,1007,0,1056,990,1019,997,993,1039,995],
[938,949,986,912,945,0,1031,1057,1009,957,999,973],
[974,959,944,962,1011,970,0,982,979,963,1011,945],
[959,944,1008,942,982,944,1019,0,987,954,1002,901],
[938,979,995,947,1004,992,1022,1014,0,953,1000,943],
[995,952,992,972,1008,1044,1038,1047,1048,0,1011,974],
[1010,940,955,982,962,1002,990,999,1001,990,0,965],
[978,994,994,979,1006,1028,1056,1100,1058,1027,1036,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 149, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,962,960,998,992,1040,1010,1021,977,1004,971,1001],
[1039,0,1012,988,1015,1019,1036,1031,1014,1038,979,1014],
[1041,989,0,978,998,1011,1010,997,1008,1031,977,1002],
[1003,1013,1023,0,1013,1025,1026,1044,982,1014,1004,1011],
[1009,986,1003,988,0,1047,1005,1035,1035,984,1006,1008],
[961,982,990,976,954,0,984,1000,984,970,967,992],
[991,965,991,975,996,1017,0,1005,968,1017,993,980],
[980,970,1004,957,966,1001,996,0,976,1029,983,981],
[1024,987,993,1019,966,1017,1033,1025,0,1050,1000,1008],
[997,963,970,987,1017,1031,984,972,951,0,980,996],
[1030,1022,1024,997,995,1034,1008,1018,1001,1021,0,998],
[1000,987,999,990,993,1009,1021,1020,993,1005,1003,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 150, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1011,1041,1040,1023,999,1045,1022,1053,1020,1038,1012],
[990,0,997,999,980,1018,987,1005,1008,997,1025,980],
[960,1004,0,1000,967,954,995,982,992,997,1017,990],
[961,1002,1001,0,994,963,962,1010,994,982,997,965],
[978,1021,1034,1007,0,979,1013,1018,1046,1018,1037,1020],
[1002,983,1047,1038,1022,0,1010,1022,1007,1007,1010,1015],
[956,1014,1006,1039,988,991,0,990,1001,982,994,997],
[979,996,1019,991,983,979,1011,0,1016,946,1008,978],
[948,993,1009,1007,955,994,1000,985,0,982,974,960],
[981,1004,1004,1019,983,994,1019,1055,1019,0,1018,989],
[963,976,984,1004,964,991,1007,993,1027,983,0,997],
[989,1021,1011,1036,981,986,1004,1023,1041,1012,1004,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 151, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1071,1008,1061,1069,1015,1042,1018,1053,966,1076,1033],
[930,0,983,1049,1028,936,1031,954,1043,934,1007,1030],
[993,1018,0,1023,1005,953,1047,910,1024,1029,1034,996],
[940,952,978,0,972,955,971,926,959,946,983,998],
[932,973,996,1029,0,1008,1026,988,1019,975,1014,963],
[986,1065,1048,1046,993,0,1077,995,1063,1001,1084,991],
[959,970,954,1030,975,924,0,895,955,986,1013,939],
[983,1047,1091,1075,1013,1006,1106,0,1050,1054,1076,1038],
[948,958,977,1042,982,938,1046,951,0,983,993,963],
[1035,1067,972,1055,1026,1000,1015,947,1018,0,1021,1008],
[925,994,967,1018,987,917,988,925,1008,980,0,924],
[968,971,1005,1003,1038,1010,1062,963,1038,993,1077,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 152, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1019,1029,1029,1030,1059,973,1009,1065,998,960,985],
[982,0,920,977,967,963,905,999,993,978,949,1035],
[972,1081,0,1062,1036,1031,959,1087,1060,1001,1028,1066],
[972,1024,939,0,966,948,943,986,999,957,945,974],
[971,1034,965,1035,0,991,1026,1041,1037,977,935,991],
[942,1038,970,1053,1010,0,969,952,1055,1047,930,1007],
[1028,1096,1042,1058,975,1032,0,1071,1071,1044,979,996],
[992,1002,914,1015,960,1049,930,0,1039,934,941,997],
[936,1008,941,1002,964,946,930,962,0,977,906,1033],
[1003,1023,1000,1044,1024,954,957,1067,1024,0,988,1009],
[1041,1052,973,1056,1066,1071,1022,1060,1095,1013,0,1002],
[1016,966,935,1027,1010,994,1005,1004,968,992,999,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 153, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,973,997,1022,1114,963,991,1053,1050,1038,1009,1033],
[1028,0,1013,1048,1041,998,962,990,1026,1018,1037,1029],
[1004,988,0,1021,1088,1039,965,1022,1045,993,1011,966],
[979,953,980,0,1084,974,986,993,1006,979,1001,1050],
[887,960,913,917,0,912,919,903,932,914,931,950],
[1038,1003,962,1027,1089,0,1007,1045,1007,1039,1034,1010],
[1010,1039,1036,1015,1082,994,0,1020,1010,1032,1032,1027],
[948,1011,979,1008,1098,956,981,0,989,960,1018,969],
[951,975,956,995,1069,994,991,1012,0,1031,1049,938],
[963,983,1008,1022,1087,962,969,1041,970,0,999,988],
[992,964,990,1000,1070,967,969,983,952,1002,0,983],
[968,972,1035,951,1051,991,974,1032,1063,1013,1018,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 154, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1013,981,981,986,981,990,1011,980,980,1021,997],
[988,0,980,1016,968,1003,995,1033,997,997,1011,1005],
[1020,1021,0,978,973,995,1034,1033,991,1017,997,1036],
[1020,985,1023,0,960,994,1021,997,1023,1012,1038,1010],
[1015,1033,1028,1041,0,997,1055,1038,1051,1065,1070,1040],
[1020,998,1006,1007,1004,0,1020,1006,1028,1003,1006,986],
[1011,1006,967,980,946,981,0,1000,1002,1004,992,1006],
[990,968,968,1004,963,995,1001,0,1008,1005,980,997],
[1021,1004,1010,978,950,973,999,993,0,978,985,989],
[1021,1004,984,989,936,998,997,996,1023,0,975,1012],
[980,990,1004,963,931,995,1009,1021,1016,1026,0,1037],
[1004,996,965,991,961,1015,995,1004,1012,989,964,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 155, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,997,1021,1012,993,1030,1033,984,1030,1014,1013,1018],
[1004,0,1041,1049,997,1028,1027,1025,1015,1042,1031,1049],
[980,960,0,1013,1000,978,998,973,989,992,993,1006],
[989,952,988,0,967,985,984,963,999,1004,977,1002],
[1008,1004,1001,1034,0,1005,1000,987,1028,1057,1012,1008],
[971,973,1023,1016,996,0,995,981,988,1012,1002,1027],
[968,974,1003,1017,1001,1006,0,995,1001,1025,988,999],
[1017,976,1028,1038,1014,1020,1006,0,1021,1011,980,1026],
[971,986,1012,1002,973,1013,1000,980,0,1021,1011,1014],
[987,959,1009,997,944,989,976,990,980,0,975,996],
[988,970,1008,1024,989,999,1013,1021,990,1026,0,958],
[983,952,995,999,993,974,1002,975,987,1005,1043,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 156, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1018,1017,1043,1052,1069,1016,1070,1069,961,992,1043],
[983,0,1013,985,1032,1046,952,1002,978,993,990,993],
[984,988,0,979,1044,1031,955,985,1019,924,958,1020],
[958,1016,1022,0,1059,1048,968,1038,1020,948,978,1035],
[949,969,957,942,0,1008,971,973,984,944,957,968],
[932,955,970,953,993,0,980,989,986,929,956,984],
[985,1049,1046,1033,1030,1021,0,1051,1064,1006,1005,1033],
[931,999,1016,963,1028,1012,950,0,984,949,940,992],
[932,1023,982,981,1017,1015,937,1017,0,986,951,1002],
[1040,1008,1077,1053,1057,1072,995,1052,1015,0,1034,1076],
[1009,1011,1043,1023,1044,1045,996,1061,1050,967,0,1042],
[958,1008,981,966,1033,1017,968,1009,999,925,959,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 157, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1081,1099,1054,1056,1065,992,1108,1061,1087,1029,1040],
[920,0,1010,1031,969,1075,916,941,902,1022,1002,1002],
[902,991,0,973,1005,1072,909,994,968,989,983,985],
[947,970,1028,0,946,1018,933,924,943,1053,984,941],
[945,1032,996,1055,0,1000,904,977,990,1007,980,1015],
[936,926,929,983,1001,0,951,941,924,991,1002,933],
[1009,1085,1092,1068,1097,1050,0,1071,1021,1022,1000,1050],
[893,1060,1007,1077,1024,1060,930,0,1005,1020,1024,1079],
[940,1099,1033,1058,1011,1077,980,996,0,1024,974,1002],
[914,979,1012,948,994,1010,979,981,977,0,973,999],
[972,999,1018,1017,1021,999,1001,977,1027,1028,0,1017],
[961,999,1016,1060,986,1068,951,922,999,1002,984,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 158, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,981,946,957,1025,1023,956,960,1001,948,995,1010],
[1020,0,989,975,1012,990,993,986,962,955,991,1035],
[1055,1012,0,1047,1097,1050,1029,1032,1081,994,1019,1055],
[1044,1026,954,0,1025,1011,979,964,975,956,983,1049],
[976,989,904,976,0,993,930,929,987,952,960,972],
[978,1011,951,990,1008,0,998,928,1029,965,994,1002],
[1045,1008,972,1022,1071,1003,0,937,1044,1067,1035,1056],
[1041,1015,969,1037,1072,1073,1064,0,1037,1007,1032,1068],
[1000,1039,920,1026,1014,972,957,964,0,935,988,991],
[1053,1046,1007,1045,1049,1036,934,994,1066,0,1041,1050],
[1006,1010,982,1018,1041,1007,966,969,1013,960,0,1067],
[991,966,946,952,1029,999,945,933,1010,951,934,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 159, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1005,1015,1026,1057,1021,1099,991,1012,985,1015,1015],
[996,0,1066,999,1039,1005,1066,946,983,1016,970,1039],
[986,935,0,992,1054,987,1018,935,953,980,978,1038],
[975,1002,1009,0,1020,1029,1081,952,986,985,989,1009],
[944,962,947,981,0,978,1029,955,902,941,953,991],
[980,996,1014,972,1023,0,1031,929,983,998,974,1019],
[902,935,983,920,972,970,0,907,898,957,932,1016],
[1010,1055,1066,1049,1046,1072,1094,0,983,1034,1006,1099],
[989,1018,1048,1015,1099,1018,1103,1018,0,1021,997,1096],
[1016,985,1021,1016,1060,1003,1044,967,980,0,953,1010],
[986,1031,1023,1012,1048,1027,1069,995,1004,1048,0,1027],
[986,962,963,992,1010,982,985,902,905,991,974,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 160, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,972,992,1006,1000,987,975,989,1002,1016,1032,999],
[1029,0,997,1003,999,972,1002,991,1025,1024,1022,1001],
[1009,1004,0,1029,1004,981,1016,1030,1014,1013,1034,1017],
[995,998,972,0,995,983,987,1004,1019,994,1022,969],
[1001,1002,997,1006,0,998,975,993,1025,1008,1022,1000],
[1014,1029,1020,1018,1003,0,1033,979,1019,1046,1057,998],
[1026,999,985,1014,1026,968,0,1024,1023,1023,1058,1031],
[1012,1010,971,997,1008,1022,977,0,1030,1032,1028,982],
[999,976,987,982,976,982,978,971,0,982,1022,980],
[985,977,988,1007,993,955,978,969,1019,0,1023,991],
[969,979,967,979,979,944,943,973,979,978,0,945],
[1002,1000,984,1032,1001,1003,970,1019,1021,1010,1056,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 161, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1028,967,988,1005,973,965,1010,993,994,1000,953],
[973,0,983,986,1012,979,1019,1034,970,992,1013,970],
[1034,1018,0,999,1033,998,989,1016,992,990,1032,1002],
[1013,1015,1002,0,997,1029,990,1012,988,966,1015,955],
[996,989,968,1004,0,974,958,982,972,944,984,953],
[1028,1022,1003,972,1027,0,966,1009,969,983,1030,991],
[1036,982,1012,1011,1043,1035,0,1007,965,957,1009,980],
[991,967,985,989,1019,992,994,0,957,989,983,953],
[1008,1031,1009,1013,1029,1032,1036,1044,0,1021,991,980],
[1007,1009,1011,1035,1057,1018,1044,1012,980,0,1032,993],
[1001,988,969,986,1017,971,992,1018,1010,969,0,955],
[1048,1031,999,1046,1048,1010,1021,1048,1021,1008,1046,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 162, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1005,988,1017,1013,948,992,977,965,998,1008,986],
[996,0,1016,1022,998,980,1013,981,988,1008,1015,1010],
[1013,985,0,1014,1017,990,1006,974,982,1006,1009,994],
[984,979,987,0,1003,962,999,979,988,960,988,987],
[988,1003,984,998,0,936,986,967,989,1001,1010,1011],
[1053,1021,1011,1039,1065,0,1032,1018,1016,994,1025,1017],
[1009,988,995,1002,1015,969,0,986,959,982,979,1001],
[1024,1020,1027,1022,1034,983,1015,0,997,1014,1017,1009],
[1036,1013,1019,1013,1012,985,1042,1004,0,1013,1014,1016],
[1003,993,995,1041,1000,1007,1019,987,988,0,962,1014],
[993,986,992,1013,991,976,1022,984,987,1039,0,1002],
[1015,991,1007,1014,990,984,1000,992,985,987,999,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 163, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,996,975,979,1008,1005,982,983,1022,965,1041,975],
[1005,0,985,1020,1031,1016,978,1006,1000,984,1021,985],
[1026,1016,0,1018,1035,1020,1013,984,1001,967,1016,985],
[1022,981,983,0,999,990,985,985,1017,1009,1009,995],
[993,970,966,1002,0,983,975,965,1034,952,990,983],
[996,985,981,1011,1018,0,980,992,1013,996,1028,985],
[1019,1023,988,1016,1026,1021,0,1023,1031,999,1065,1003],
[1018,995,1017,1016,1036,1009,978,0,1029,1011,1013,978],
[979,1001,1000,984,967,988,970,972,0,989,997,949],
[1036,1017,1034,992,1049,1005,1002,990,1012,0,1033,1002],
[960,980,985,992,1011,973,936,988,1004,968,0,973],
[1026,1016,1016,1006,1018,1016,998,1023,1052,999,1028,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 164, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,976,970,944,964,999,1015,974,992,977,979,978],
[1025,0,953,999,1015,979,1010,960,1038,1013,951,989],
[1031,1048,0,979,983,1030,1023,980,1045,1013,1031,975],
[1057,1002,1022,0,1018,1031,1014,1003,1023,992,999,984],
[1037,986,1018,983,0,1015,1038,1006,1057,1003,1012,990],
[1002,1022,971,970,986,0,1027,976,1012,1008,971,960],
[986,991,978,987,963,974,0,969,1019,973,1002,971],
[1027,1041,1021,998,995,1025,1032,0,1063,1040,1037,1022],
[1009,963,956,978,944,989,982,938,0,980,1002,977],
[1024,988,988,1009,998,993,1028,961,1021,0,960,972],
[1022,1050,970,1002,989,1030,999,964,999,1041,0,990],
[1023,1012,1026,1017,1011,1041,1030,979,1024,1029,1011,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 165, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1030,1015,1093,1094,995,1024,999,973,1001,1092,1053],
[971,0,997,1064,990,1015,1002,1030,1024,987,1023,1002],
[986,1004,0,1042,1030,985,1067,924,1012,969,969,951],
[908,937,959,0,1024,946,946,972,948,965,1002,912],
[907,1011,971,977,0,966,971,1013,983,933,1037,890],
[1006,986,1016,1055,1035,0,1025,963,1055,926,1043,1006],
[977,999,934,1055,1030,976,0,973,999,946,1025,946],
[1002,971,1077,1029,988,1038,1028,0,1058,959,1043,1020],
[1028,977,989,1053,1018,946,1002,943,0,994,994,1003],
[1000,1014,1032,1036,1068,1075,1055,1042,1007,0,1075,1010],
[909,978,1032,999,964,958,976,958,1007,926,0,948],
[948,999,1050,1089,1111,995,1055,981,998,991,1053,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 166, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,954,984,1092,1099,901,801,1082,938,1004,937,872],
[1047,0,1061,1013,1129,1029,967,1057,1132,1067,1010,818],
[1017,940,0,1095,1026,863,868,912,1010,866,807,826],
[909,988,906,0,1060,913,762,1034,1006,938,970,916],
[902,872,975,941,0,955,884,906,889,960,879,823],
[1100,972,1138,1088,1046,0,982,1107,1043,1055,988,930],
[1200,1034,1133,1239,1117,1019,0,1074,1169,999,995,1055],
[919,944,1089,967,1095,894,927,0,998,930,1022,828],
[1063,869,991,995,1112,958,832,1003,0,966,987,889],
[997,934,1135,1063,1041,946,1002,1071,1035,0,980,1114],
[1064,991,1194,1031,1122,1013,1006,979,1014,1021,0,848],
[1129,1183,1175,1085,1178,1071,946,1173,1112,887,1153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 167, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1012,1062,1047,949,953,995,1006,999,1022,1025,978],
[989,0,1018,1078,974,1038,903,983,1006,1010,1058,953],
[939,983,0,1016,890,946,920,925,954,969,928,930],
[954,923,985,0,902,952,899,897,941,913,941,959],
[1052,1027,1111,1099,0,1041,1046,1015,980,1061,1060,1018],
[1048,963,1055,1049,960,0,1009,1008,1015,1004,1083,990],
[1006,1098,1081,1102,955,992,0,1031,1068,1013,1160,1038],
[995,1018,1076,1104,986,993,970,0,1017,1012,1029,976],
[1002,995,1047,1060,1021,986,933,984,0,980,1018,981],
[979,991,1032,1088,940,997,988,989,1021,0,1054,997],
[976,943,1073,1060,941,918,841,972,983,947,0,952],
[1023,1048,1071,1042,983,1011,963,1025,1020,1004,1049,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 168, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,992,986,979,990,961,982,1009,1043,1009,990,1023],
[1009,0,945,1023,940,973,957,992,1001,994,1032,1007],
[1015,1056,0,1041,1028,1036,1019,962,1071,1054,1022,1034],
[1022,978,960,0,978,981,985,1001,1043,986,1007,991],
[1011,1061,973,1023,0,1004,1032,995,1027,1038,1066,1035],
[1040,1028,965,1020,997,0,1003,1008,1038,965,1003,1048],
[1019,1044,982,1016,969,998,0,958,1050,992,985,1031],
[992,1009,1039,1000,1006,993,1043,0,1019,995,1020,1010],
[958,1000,930,958,974,963,951,982,0,941,953,1034],
[992,1007,947,1015,963,1036,1009,1006,1060,0,995,995],
[1011,969,979,994,935,998,1016,981,1048,1006,0,1015],
[978,994,967,1010,966,953,970,991,967,1006,986,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 169, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,949,911,1216,926,1035,1059,917,912,998,1008,945],
[1052,0,1016,1107,1192,1034,1265,995,1026,1113,960,1250],
[1090,985,0,1123,903,1099,1138,932,1045,1169,1071,1092],
[785,894,878,0,990,925,1053,877,951,946,767,826],
[1075,809,1098,1011,0,1004,1071,1013,948,1066,1074,1000],
[966,967,902,1076,997,0,1111,939,1001,1080,1188,1020],
[942,736,863,948,930,890,0,815,898,1105,1073,907],
[1084,1006,1069,1124,988,1062,1186,0,1048,1166,1048,1154],
[1089,975,956,1050,1053,1000,1103,953,0,1175,902,1068],
[1003,888,832,1055,935,921,896,835,826,0,977,940],
[993,1041,930,1234,927,813,928,953,1099,1024,0,943],
[1056,751,909,1175,1001,981,1094,847,933,1061,1058,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 170, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1024,1084,1026,1029,1049,973,1022,1034,996,956,989],
[977,0,1077,1027,970,1039,962,1067,990,1001,1003,997],
[917,924,0,949,958,955,976,966,939,955,943,943],
[975,974,1052,0,978,1014,953,1019,976,984,911,974],
[972,1031,1043,1023,0,1032,964,1053,991,990,1006,964],
[952,962,1046,987,969,0,954,1037,935,1003,960,962],
[1028,1039,1025,1048,1037,1047,0,1034,1039,1001,1002,979],
[979,934,1035,982,948,964,967,0,958,986,988,941],
[967,1011,1062,1025,1010,1066,962,1043,0,1006,963,976],
[1005,1000,1046,1017,1011,998,1000,1015,995,0,988,964],
[1045,998,1058,1090,995,1041,999,1013,1038,1013,0,1022],
[1012,1004,1058,1027,1037,1039,1022,1060,1025,1037,979,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 171, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,945,972,973,979,969,998,965,983,963,980,991],
[1056,0,977,997,997,1001,998,1021,957,1017,1005,1014],
[1029,1024,0,1038,1018,1016,1048,1027,983,1055,1032,1025],
[1028,1004,963,0,996,1010,1019,1025,1015,1023,1000,983],
[1022,1004,983,1005,0,1080,1008,966,972,1007,1040,1026],
[1032,1000,985,991,921,0,997,950,952,1029,1019,996],
[1003,1003,953,982,993,1004,0,931,1016,1011,980,963],
[1036,980,974,976,1035,1051,1070,0,989,999,1047,1026],
[1018,1044,1018,986,1029,1049,985,1012,0,1022,1076,1004],
[1038,984,946,978,994,972,990,1002,979,0,1004,1021],
[1021,996,969,1001,961,982,1021,954,925,997,0,987],
[1010,987,976,1018,975,1005,1038,975,997,980,1014,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 172, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1045,950,997,969,1048,968,1046,1015,1008,963,1028],
[956,0,936,1004,972,1041,953,1027,972,990,952,999],
[1051,1065,0,1002,1003,1068,990,1028,1014,1009,986,1011],
[1004,997,999,0,994,1037,1017,1041,1035,990,1017,1032],
[1032,1029,998,1007,0,1055,1017,1056,1043,1037,996,1012],
[953,960,933,964,946,0,940,1012,995,963,939,1000],
[1033,1048,1011,984,984,1061,0,1066,1048,1010,1010,1022],
[955,974,973,960,945,989,935,0,983,935,987,980],
[986,1029,987,966,958,1006,953,1018,0,982,1025,1000],
[993,1011,992,1011,964,1038,991,1066,1019,0,994,1030],
[1038,1049,1015,984,1005,1062,991,1014,976,1007,0,999],
[973,1002,990,969,989,1001,979,1021,1001,971,1002,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 173, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,957,1006,944,1042,979,981,1015,982,976,1006,987],
[1044,0,990,1047,1036,979,981,980,977,1048,1030,1014],
[995,1011,0,1002,1043,991,995,1023,989,1007,997,995],
[1057,954,999,0,1007,1026,994,984,996,1014,992,967],
[959,965,958,994,0,997,968,943,962,980,950,946],
[1022,1022,1010,975,1004,0,995,996,985,1005,978,1004],
[1020,1020,1006,1007,1033,1006,0,1034,1000,1002,968,1011],
[986,1021,978,1017,1058,1005,967,0,984,991,1008,1001],
[1019,1024,1012,1005,1039,1016,1001,1017,0,1032,998,1030],
[1025,953,994,987,1021,996,999,1010,969,0,985,992],
[995,971,1004,1009,1051,1023,1033,993,1003,1016,0,991],
[1014,987,1006,1034,1055,997,990,1000,971,1009,1010,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 174, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,996,1009,1005,1012,1007,970,978,999,1012,983,1001],
[1005,0,1009,981,1012,1041,976,991,978,996,991,1007],
[992,992,0,1000,994,1024,991,1009,992,1013,969,1016],
[996,1020,1001,0,998,994,970,1012,982,1014,985,1006],
[989,989,1007,1003,0,990,953,1012,993,1021,1003,1009],
[994,960,977,1007,1011,0,973,1000,947,987,981,992],
[1031,1025,1010,1031,1048,1028,0,1035,1009,1024,990,1030],
[1023,1010,992,989,989,1001,966,0,976,981,991,1006],
[1002,1023,1009,1019,1008,1054,992,1025,0,1030,1000,1043],
[989,1005,988,987,980,1014,977,1020,971,0,969,1022],
[1018,1010,1032,1016,998,1020,1011,1010,1001,1032,0,1017],
[1000,994,985,995,992,1009,971,995,958,979,984,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 175, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1016,1076,1082,1107,1042,1097,1014,1003,990,1055,1044],
[985,0,1045,1072,1022,1073,1098,1053,1036,1025,1079,1000],
[925,956,0,1012,1005,1015,1005,971,967,925,1025,1007],
[919,929,989,0,1032,1008,1007,928,963,923,996,926],
[894,979,996,969,0,1004,1035,1002,962,951,991,936],
[959,928,986,993,997,0,1053,987,967,933,986,980],
[904,903,996,994,966,948,0,943,968,952,969,949],
[987,948,1030,1073,999,1014,1058,0,1018,1010,991,978],
[998,965,1034,1038,1039,1034,1033,983,0,961,1041,965],
[1011,976,1076,1078,1050,1068,1049,991,1040,0,1013,1039],
[946,922,976,1005,1010,1015,1032,1010,960,988,0,975],
[957,1001,994,1075,1065,1021,1052,1023,1036,962,1026,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 176, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1118,1124,1109,1029,964,1019,1042,954,1037,1183,1076],
[883,0,1004,1070,998,845,995,877,986,941,996,964],
[877,997,0,1075,1017,943,1051,905,939,954,1022,920],
[892,931,926,0,968,800,903,860,860,837,1030,956],
[972,1003,984,1033,0,894,993,1033,1030,945,1070,1030],
[1037,1156,1058,1201,1107,0,977,1135,930,1111,1104,1104],
[982,1006,950,1098,1008,1024,0,1108,1051,1030,1072,1045],
[959,1124,1096,1141,968,866,893,0,925,1055,1082,975],
[1047,1015,1062,1141,971,1071,950,1076,0,1022,1170,967],
[964,1060,1047,1164,1056,890,971,946,979,0,1146,1076],
[818,1005,979,971,931,897,929,919,831,855,0,1023],
[925,1037,1081,1045,971,897,956,1026,1034,925,978,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 177, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1033,1011,981,1023,991,1004,1042,1012,983,973,1027],
[968,0,992,973,996,989,1001,1053,981,948,986,1027],
[990,1009,0,994,1021,1019,963,1038,988,947,984,1034],
[1020,1028,1007,0,1024,1008,1024,1064,986,1015,1018,1023],
[978,1005,980,977,0,967,944,995,904,925,994,959],
[1010,1012,982,993,1034,0,1026,1042,991,968,991,980],
[997,1000,1038,977,1057,975,0,1010,984,1007,993,980],
[959,948,963,937,1006,959,991,0,968,951,1000,1012],
[989,1020,1013,1015,1097,1010,1017,1033,0,995,1035,1029],
[1018,1053,1054,986,1076,1033,994,1050,1006,0,1039,1023],
[1028,1015,1017,983,1007,1010,1008,1001,966,962,0,1000],
[974,974,967,978,1042,1021,1021,989,972,978,1001,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 178, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1037,1029,1041,1063,1000,1044,1044,1001,1014,1004,993],
[964,0,1039,1024,1010,982,1020,1029,1035,981,1034,972],
[972,962,0,1033,1018,948,1006,1018,1000,959,998,958],
[960,977,968,0,973,949,977,994,1003,921,982,968],
[938,991,983,1028,0,993,1012,1036,982,983,1000,957],
[1001,1019,1053,1052,1008,0,1031,1054,999,982,1024,1022],
[957,981,995,1024,989,970,0,1017,991,933,985,977],
[957,972,983,1007,965,947,984,0,935,907,965,956],
[1000,966,1001,998,1019,1002,1010,1066,0,960,981,986],
[987,1020,1042,1080,1018,1019,1068,1094,1041,0,1033,1014],
[997,967,1003,1019,1001,977,1016,1036,1020,968,0,959],
[1008,1029,1043,1033,1044,979,1024,1045,1015,987,1042,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 179, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,975,987,1006,986,990,972,989,996,987,1023,1029],
[1026,0,1013,993,1023,1044,1009,999,1020,985,1018,993],
[1014,988,0,983,1020,985,957,981,963,958,1007,985],
[995,1008,1018,0,1022,1044,994,1010,987,982,1025,1020],
[1015,978,981,979,0,998,943,941,1025,944,1029,964],
[1011,957,1016,957,1003,0,990,957,1035,999,1031,970],
[1029,992,1044,1007,1058,1011,0,1018,1015,1022,1014,916],
[1012,1002,1020,991,1060,1044,983,0,1011,985,1019,985],
[1005,981,1038,1014,976,966,986,990,0,947,969,945],
[1014,1016,1043,1019,1057,1002,979,1016,1054,0,997,1013],
[978,983,994,976,972,970,987,982,1032,1004,0,992],
[972,1008,1016,981,1037,1031,1085,1016,1056,988,1009,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 180, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,990,981,949,1013,998,976,967,945,982,958,976],
[1011,0,982,1003,995,1013,995,965,933,1018,949,972],
[1020,1019,0,965,1024,969,1033,1012,966,997,1016,1006],
[1052,998,1036,0,1039,1021,1006,1018,958,991,951,1009],
[988,1006,977,962,0,992,965,957,943,972,960,918],
[1003,988,1032,980,1009,0,1008,1030,992,998,1019,984],
[1025,1006,968,995,1036,993,0,1009,1010,1016,982,954],
[1034,1036,989,983,1044,971,992,0,1008,982,1014,980],
[1056,1068,1035,1043,1058,1009,991,993,0,1048,980,1042],
[1019,983,1004,1010,1029,1003,985,1019,953,0,969,956],
[1043,1052,985,1050,1041,982,1019,987,1021,1032,0,1005],
[1025,1029,995,992,1083,1017,1047,1021,959,1045,996,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 181, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,986,1048,1025,1070,996,983,1027,1032,1064,993,997],
[1015,0,1028,1033,1054,981,996,1014,1038,981,984,973],
[953,973,0,980,1042,932,987,996,953,990,993,960],
[976,968,1021,0,1061,928,999,974,1016,964,959,989],
[931,947,959,940,0,907,910,944,961,942,910,899],
[1005,1020,1069,1073,1094,0,999,1017,1044,1032,982,1030],
[1018,1005,1014,1002,1091,1002,0,997,1034,1023,1014,989],
[974,987,1005,1027,1057,984,1004,0,1008,1014,976,978],
[969,963,1048,985,1040,957,967,993,0,993,984,1001],
[937,1020,1011,1037,1059,969,978,987,1008,0,984,979],
[1008,1017,1008,1042,1091,1019,987,1025,1017,1017,0,1014],
[1004,1028,1041,1012,1102,971,1012,1023,1000,1022,987,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 182, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,895,1020,828,928,1020,902,1083,914,952,881,918],
[1106,0,947,1104,993,1103,1018,1024,878,1007,875,895],
[981,1054,0,954,934,1015,1050,1044,837,1003,899,836],
[1173,897,1047,0,999,1008,944,1130,971,851,1070,898],
[1073,1008,1067,1002,0,1175,899,1146,942,1008,1015,877],
[981,898,986,993,826,0,888,986,833,910,810,858],
[1099,983,951,1057,1102,1113,0,1165,1017,928,971,935],
[918,977,957,871,855,1015,836,0,867,775,699,758],
[1087,1123,1164,1030,1059,1168,984,1134,0,962,879,965],
[1049,994,998,1150,993,1091,1073,1226,1039,0,1002,1043],
[1120,1126,1102,931,986,1191,1030,1302,1122,999,0,1002],
[1083,1106,1165,1103,1124,1143,1066,1243,1036,958,999,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 183, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1036,1005,1006,1034,1007,1013,1004,1025,984,965,1032],
[965,0,974,995,1002,993,1015,954,1028,961,1012,977],
[996,1027,0,974,949,977,1014,966,976,953,987,953],
[995,1006,1027,0,988,1015,999,1007,1033,986,1020,1030],
[967,999,1052,1013,0,976,1010,985,1024,989,969,998],
[994,1008,1024,986,1025,0,1045,970,1025,1000,990,996],
[988,986,987,1002,991,956,0,964,995,975,997,980],
[997,1047,1035,994,1016,1031,1037,0,1038,976,1005,1068],
[976,973,1025,968,977,976,1006,963,0,951,980,1017],
[1017,1040,1048,1015,1012,1001,1026,1025,1050,0,992,1039],
[1036,989,1014,981,1032,1011,1004,996,1021,1009,0,1006],
[969,1024,1048,971,1003,1005,1021,933,984,962,995,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 184, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1005,991,989,995,998,982,1017,993,1005,1012,976],
[996,0,1020,987,990,994,991,994,979,1024,1009,992],
[1010,981,0,978,993,982,1009,1031,1011,1028,1049,991],
[1012,1014,1023,0,982,1004,1025,1016,1015,1028,1027,1032],
[1006,1011,1008,1019,0,1016,997,1005,1003,1010,1042,999],
[1003,1007,1019,997,985,0,1013,1022,995,1024,1016,975],
[1019,1010,992,976,1004,988,0,986,993,1006,1002,993],
[984,1007,970,985,996,979,1015,0,963,1006,979,978],
[1008,1022,990,986,998,1006,1008,1038,0,991,994,996],
[996,977,973,973,991,977,995,995,1010,0,998,1004],
[989,992,952,974,959,985,999,1022,1007,1003,0,976],
[1025,1009,1010,969,1002,1026,1008,1023,1005,997,1025,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 185, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1053,1009,1027,1012,1013,1012,1039,1041,992,1036,1030],
[948,0,943,971,943,969,958,976,933,918,999,984],
[992,1058,0,1038,974,1037,969,1027,1002,959,986,1013],
[974,1030,963,0,1022,994,926,1012,917,934,959,945],
[989,1058,1027,979,0,1000,996,1056,1090,1005,1008,1001],
[988,1032,964,1007,1001,0,943,982,997,979,986,978],
[989,1043,1032,1075,1005,1058,0,1048,1027,942,1048,1025],
[962,1025,974,989,945,1019,953,0,993,929,997,966],
[960,1068,999,1084,911,1004,974,1008,0,935,962,995],
[1009,1083,1042,1067,996,1022,1059,1072,1066,0,1025,1029],
[965,1002,1015,1042,993,1015,953,1004,1039,976,0,976],
[971,1017,988,1056,1000,1023,976,1035,1006,972,1025,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 186, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1030,1000,1057,967,1037,981,1059,1030,1029,1020,1045],
[971,0,965,981,911,975,1022,984,889,940,1013,1029],
[1001,1036,0,1052,977,1053,1063,938,1051,1003,1101,975],
[944,1020,949,0,945,955,986,940,912,951,948,978],
[1034,1090,1024,1056,0,1045,1103,981,1000,1056,1044,1026],
[964,1026,948,1046,956,0,1037,1014,993,1033,1073,1056],
[1020,979,938,1015,898,964,0,952,1017,975,1017,996],
[942,1017,1063,1061,1020,987,1049,0,985,1048,1080,1032],
[971,1112,950,1089,1001,1008,984,1016,0,1078,1103,1043],
[972,1061,998,1050,945,968,1026,953,923,0,990,1045],
[981,988,900,1053,957,928,984,921,898,1011,0,997],
[956,972,1026,1023,975,945,1005,969,958,956,1004,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 187, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1082,1197,973,1092,987,1060,1094,1062,1118,977,1161],
[919,0,940,920,924,838,1012,1141,1034,1150,967,1146],
[804,1061,0,859,1013,904,1091,948,1002,1019,1004,1086],
[1028,1081,1142,0,1117,1019,1060,1084,954,1141,972,1134],
[909,1077,988,884,0,857,988,1062,847,1037,953,1065],
[1014,1163,1097,982,1144,0,1113,1093,936,1204,1007,1140],
[941,989,910,941,1013,888,0,926,798,1157,969,1117],
[907,860,1053,917,939,908,1075,0,847,1053,1045,1018],
[939,967,999,1047,1154,1065,1203,1154,0,1158,989,1171],
[883,851,982,860,964,797,844,948,843,0,961,965],
[1024,1034,997,1029,1048,994,1032,956,1012,1040,0,1094],
[840,855,915,867,936,861,884,983,830,1036,907,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 188, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,941,1080,916,1044,1003,1028,972,1023,936,940,1029],
[1060,0,1042,1047,995,1037,997,1033,1056,935,988,973],
[921,959,0,961,948,999,989,1016,1001,966,883,937],
[1085,954,1040,0,1033,1019,1017,1104,1036,994,991,933],
[957,1006,1053,968,0,963,1011,1001,983,962,999,924],
[998,964,1002,982,1038,0,1034,975,1015,908,989,933],
[973,1004,1012,984,990,967,0,1013,994,938,979,907],
[1029,968,985,897,1000,1026,988,0,1040,956,954,954],
[978,945,1000,965,1018,986,1007,961,0,977,963,940],
[1065,1066,1035,1007,1039,1093,1063,1045,1024,0,1054,948],
[1061,1013,1118,1010,1002,1012,1022,1047,1038,947,0,959],
[972,1028,1064,1068,1077,1068,1094,1047,1061,1053,1042,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 189, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1016,984,978,1014,1019,1029,1080,999,1008,994,971],
[985,0,1009,1015,1026,1012,1031,1059,1022,1009,991,1015],
[1017,992,0,971,1018,1006,1040,1010,1022,983,1035,996],
[1023,986,1030,0,1024,1019,1046,1021,1024,1000,1021,986],
[987,975,983,977,0,967,997,1000,1011,991,999,986],
[982,989,995,982,1034,0,1002,979,992,983,1017,984],
[972,970,961,955,1004,999,0,965,963,968,980,968],
[921,942,991,980,1001,1022,1036,0,981,998,990,981],
[1002,979,979,977,990,1009,1038,1020,0,1007,972,963],
[993,992,1018,1001,1010,1018,1033,1003,994,0,1044,982],
[1007,1010,966,980,1002,984,1021,1011,1029,957,0,976],
[1030,986,1005,1015,1015,1017,1033,1020,1038,1019,1025,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 190, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,972,948,1019,971,934,978,1007,947,919,950,947],
[1029,0,984,1023,1031,980,980,1007,1003,961,990,993],
[1053,1017,0,1008,1014,977,981,1035,996,982,1014,993],
[982,978,993,0,983,970,976,1010,951,964,995,968],
[1030,970,987,1018,0,972,1013,1019,978,933,983,1001],
[1067,1021,1024,1031,1029,0,1022,1056,1040,1030,1015,997],
[1023,1021,1020,1025,988,979,0,1024,988,993,997,976],
[994,994,966,991,982,945,977,0,963,955,982,976],
[1054,998,1005,1050,1023,961,1013,1038,0,995,1037,997],
[1082,1040,1019,1037,1068,971,1008,1046,1006,0,1019,1019],
[1051,1011,987,1006,1018,986,1004,1019,964,982,0,988],
[1054,1008,1008,1033,1000,1004,1025,1025,1004,982,1013,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 191, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1022,984,1003,988,956,963,1008,995,952,1000,1029],
[979,0,965,981,1001,921,962,1012,969,918,972,1011],
[1017,1036,0,1073,985,961,983,1046,995,984,1023,1028],
[998,1020,928,0,985,956,932,1032,974,968,984,994],
[1013,1000,1016,1016,0,956,960,1006,949,976,978,987],
[1045,1080,1040,1045,1045,0,985,1032,1001,1005,1052,1046],
[1038,1039,1018,1069,1041,1016,0,1030,978,979,1041,1056],
[993,989,955,969,995,969,971,0,970,953,996,1026],
[1006,1032,1006,1027,1052,1000,1023,1031,0,1011,1029,1002],
[1049,1083,1017,1033,1025,996,1022,1048,990,0,1012,1016],
[1001,1029,978,1017,1023,949,960,1005,972,989,0,1009],
[972,990,973,1007,1014,955,945,975,999,985,992,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 192, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1003,1007,977,1018,1017,1005,1008,1001,983,1029,1024],
[998,0,977,999,977,982,987,990,970,957,991,974],
[994,1024,0,999,1018,1001,1006,1019,1014,968,996,996],
[1024,1002,1002,0,1010,1028,1002,1004,980,979,1032,999],
[983,1024,983,991,0,986,1003,1018,1019,995,1011,1005],
[984,1019,1000,973,1015,0,1017,969,982,965,1008,989],
[996,1014,995,999,998,984,0,993,979,1004,991,1018],
[993,1011,982,997,983,1032,1008,0,1008,991,978,1006],
[1000,1031,987,1021,982,1019,1022,993,0,971,1011,1007],
[1018,1044,1033,1022,1006,1036,997,1010,1030,0,1022,1029],
[972,1010,1005,969,990,993,1010,1023,990,979,0,997],
[977,1027,1005,1002,996,1012,983,995,994,972,1004,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 193, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1035,1095,1022,1038,994,1040,1053,986,1004,1045,1053],
[966,0,1032,1019,1012,967,969,1025,963,983,999,1003],
[906,969,0,996,1003,991,975,959,967,973,974,1020],
[979,982,1005,0,1021,967,1022,1030,967,954,1003,1008],
[963,989,998,980,0,922,993,956,941,991,935,1010],
[1007,1034,1010,1034,1079,0,991,1061,1031,1013,989,982],
[961,1032,1026,979,1008,1010,0,1049,987,988,1004,1023],
[948,976,1042,971,1045,940,952,0,948,947,994,1019],
[1015,1038,1034,1034,1060,970,1014,1053,0,999,1035,1051],
[997,1018,1028,1047,1010,988,1013,1054,1002,0,1005,1062],
[956,1002,1027,998,1066,1012,997,1007,966,996,0,1032],
[948,998,981,993,991,1019,978,982,950,939,969,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 194, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1016,981,1000,969,975,1027,1018,1009,991,980,988],
[985,0,977,993,959,978,1020,1011,996,1014,953,989],
[1020,1024,0,1058,1026,1056,1057,1024,1003,1058,980,1029],
[1001,1008,943,0,964,1047,1048,1049,950,998,980,983],
[1032,1042,975,1037,0,1026,1055,1037,988,1045,1030,1005],
[1026,1023,945,954,975,0,1033,1016,982,1032,969,982],
[974,981,944,953,946,968,0,986,950,1009,957,976],
[983,990,977,952,964,985,1015,0,983,1006,959,983],
[992,1005,998,1051,1013,1019,1051,1018,0,1035,979,1005],
[1010,987,943,1003,956,969,992,995,966,0,966,960],
[1021,1048,1021,1021,971,1032,1044,1042,1022,1035,0,1023],
[1013,1012,972,1018,996,1019,1025,1018,996,1041,978,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 195, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1032,1016,1070,983,984,1040,995,1051,1005,1014,1052],
[969,0,1043,955,1034,997,1020,1035,951,966,915,1010],
[985,958,0,1025,1063,1010,948,988,905,935,1009,1002],
[931,1046,976,0,1020,1012,966,973,906,960,1002,1033],
[1018,967,938,981,0,982,910,971,963,969,1000,1010],
[1017,1004,991,989,1019,0,1043,1022,916,986,974,1046],
[961,981,1053,1035,1091,958,0,1025,1032,962,984,1037],
[1006,966,1013,1028,1030,979,976,0,998,968,992,987],
[950,1050,1096,1095,1038,1085,969,1003,0,1005,996,1041],
[996,1035,1066,1041,1032,1015,1039,1033,996,0,1022,1024],
[987,1086,992,999,1001,1027,1017,1009,1005,979,0,1067],
[949,991,999,968,991,955,964,1014,960,977,934,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 196, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1041,994,1042,1013,984,1008,1005,1030,1012,1040,961],
[960,0,942,982,975,946,950,953,968,1016,1049,952],
[1007,1059,0,1008,1005,949,996,1044,1027,1030,1069,986],
[959,1019,993,0,972,967,995,996,1027,1029,991,997],
[988,1026,996,1029,0,1006,1036,995,1005,997,1075,1029],
[1017,1055,1052,1034,995,0,1081,1081,1029,1070,1084,1050],
[993,1051,1005,1006,965,920,0,1028,1023,1023,1042,1003],
[996,1048,957,1005,1006,920,973,0,1033,982,974,960],
[971,1033,974,974,996,972,978,968,0,1035,981,982],
[989,985,971,972,1004,931,978,1019,966,0,1003,980],
[961,952,932,1010,926,917,959,1027,1020,998,0,987],
[1040,1049,1015,1004,972,951,998,1041,1019,1021,1014,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 197, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,932,873,961,941,960,860,1028,929,1052,941,860],
[1069,0,946,1022,1118,908,969,1099,988,1107,1080,1012],
[1128,1055,0,1085,993,1036,955,1196,1028,1162,1104,1014],
[1040,979,916,0,966,881,900,945,957,1065,1042,905],
[1060,883,1008,1035,0,969,966,1047,1017,1123,1002,901],
[1041,1093,965,1120,1032,0,943,1068,1040,1192,1017,940],
[1141,1032,1046,1101,1035,1058,0,1012,981,1145,993,939],
[973,902,805,1056,954,933,989,0,987,1049,979,854],
[1072,1013,973,1044,984,961,1020,1014,0,1101,1022,1023],
[949,894,839,936,878,809,856,952,900,0,889,809],
[1060,921,897,959,999,984,1008,1022,979,1112,0,965],
[1141,989,987,1096,1100,1061,1062,1147,978,1192,1036,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 198, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,922,909,974,929,912,885,882,867,901,975,879],
[1079,0,1036,1091,1030,1017,1044,1112,1066,1070,1078,976],
[1092,965,0,1042,1002,1050,1035,977,992,1016,1049,1003],
[1027,910,959,0,930,955,1008,920,1009,975,998,1010],
[1072,971,999,1071,0,1014,1039,934,976,962,1009,1026],
[1089,984,951,1046,987,0,1036,949,1027,949,1025,991],
[1116,957,966,993,962,965,0,944,1012,981,979,999],
[1119,889,1024,1081,1067,1052,1057,0,1100,1005,1040,1076],
[1134,935,1009,992,1025,974,989,901,0,1016,953,1008],
[1100,931,985,1026,1039,1052,1020,996,985,0,1046,996],
[1026,923,952,1003,992,976,1022,961,1048,955,0,989],
[1122,1025,998,991,975,1010,1002,925,993,1005,1012,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 199, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,969,945,934,904,970,930,957,941,927,958,921],
[1032,0,976,977,953,1014,983,963,956,1002,1001,973],
[1056,1025,0,1018,965,1016,1036,991,1011,1035,1005,995],
[1067,1024,983,0,959,1002,1016,1007,968,978,1029,1013],
[1097,1048,1036,1042,0,1028,998,1016,1036,1017,1034,1039],
[1031,987,985,999,973,0,985,935,973,978,1001,1014],
[1071,1018,965,985,1003,1016,0,935,965,994,1012,989],
[1044,1038,1010,994,985,1066,1066,0,1017,1055,1041,1036],
[1060,1045,990,1033,965,1028,1036,984,0,1058,1010,1031],
[1074,999,966,1023,984,1023,1007,946,943,0,1004,994],
[1043,1000,996,972,967,1000,989,960,991,997,0,996],
[1080,1028,1006,988,962,987,1012,965,970,1007,1005,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 2001, 200, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebbrcw/mebbrcw_12_2001.csv", index=False, header=False)
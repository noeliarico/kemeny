
import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg

rep = 1
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,271,191,198,203,197,210,198,224,227,211,218],
[229,0,237,200,231,201,230,210,236,253,229,243],
[309,263,0,222,217,241,247,243,242,238,240,245],
[302,300,278,0,227,268,222,251,274,275,287,276],
[297,269,283,273,0,251,244,232,267,274,254,281],
[303,299,259,232,249,0,249,228,273,248,251,236],
[290,270,253,278,256,251,0,230,255,264,249,275],
[302,290,257,249,268,272,270,0,269,295,266,284],
[276,264,258,226,233,227,245,231,0,236,228,269],
[273,247,262,225,226,252,236,205,264,0,241,264],
[289,271,260,213,246,249,251,234,272,259,0,260],
[282,257,255,224,219,264,225,216,231,236,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 1, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,234,249,244,261,206,266,215,258,243,247],
[253,0,242,275,282,291,228,281,239,269,254,259],
[266,258,0,277,268,288,240,283,257,292,260,274],
[251,225,223,0,249,278,202,260,225,245,247,232],
[256,218,232,251,0,265,234,236,234,213,254,228],
[239,209,212,222,235,0,205,245,225,228,220,252],
[294,272,260,298,266,295,0,274,249,270,264,276],
[234,219,217,240,264,255,226,0,213,244,256,223],
[285,261,243,275,266,275,251,287,0,273,258,259],
[242,231,208,255,287,272,230,256,227,0,247,234],
[257,246,240,253,246,280,236,244,242,253,0,247],
[253,241,226,268,272,248,224,277,241,266,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 2, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,265,252,241,259,258,229,280,261,257,255],
[237,0,246,222,223,248,246,227,251,242,237,233],
[235,254,0,252,234,253,253,236,253,244,247,248],
[248,278,248,0,257,266,255,254,261,259,262,262],
[259,277,266,243,0,264,258,260,259,262,254,252],
[241,252,247,234,236,0,241,234,258,250,257,250],
[242,254,247,245,242,259,0,229,244,252,248,239],
[271,273,264,246,240,266,271,0,263,246,246,261],
[220,249,247,239,241,242,256,237,0,245,258,236],
[239,258,256,241,238,250,248,254,255,0,259,260],
[243,263,253,238,246,243,252,254,242,241,0,255],
[245,267,252,238,248,250,261,239,264,240,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 3, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,242,226,241,225,252,223,256,232,230,243],
[270,0,263,241,251,253,260,234,262,244,242,242],
[258,237,0,250,257,220,279,245,262,260,241,256],
[274,259,250,0,242,243,261,234,254,249,231,247],
[259,249,243,258,0,243,269,245,259,252,242,252],
[275,247,280,257,257,0,271,253,275,250,249,260],
[248,240,221,239,231,229,0,226,252,232,233,246],
[277,266,255,266,255,247,274,0,266,250,254,250],
[244,238,238,246,241,225,248,234,0,227,228,221],
[268,256,240,251,248,250,268,250,273,0,263,258],
[270,258,259,269,258,251,267,246,272,237,0,244],
[257,258,244,253,248,240,254,250,279,242,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 4, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,249,252,260,267,226,263,251,224,233,218],
[271,0,250,244,250,270,236,267,278,222,242,227],
[251,250,0,251,265,255,222,266,254,220,240,248],
[248,256,249,0,261,265,226,240,256,228,232,239],
[240,250,235,239,0,264,240,243,264,238,236,198],
[233,230,245,235,236,0,216,241,224,204,213,223],
[274,264,278,274,260,284,0,276,249,263,250,247],
[237,233,234,260,257,259,224,0,226,217,251,235],
[249,222,246,244,236,276,251,274,0,214,232,255],
[276,278,280,272,262,296,237,283,286,0,240,248],
[267,258,260,268,264,287,250,249,268,260,0,245],
[282,273,252,261,302,277,253,265,245,252,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 5, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,237,269,281,259,255,277,287,247,253,265],
[240,0,216,237,239,262,241,272,246,250,238,241],
[263,284,0,281,252,264,258,291,259,292,227,274],
[231,263,219,0,220,298,250,246,252,258,227,239],
[219,261,248,280,0,284,239,251,256,253,266,257],
[241,238,236,202,216,0,233,264,216,229,215,233],
[245,259,242,250,261,267,0,261,243,243,244,258],
[223,228,209,254,249,236,239,0,270,217,211,254],
[213,254,241,248,244,284,257,230,0,237,230,218],
[253,250,208,242,247,271,257,283,263,0,255,231],
[247,262,273,273,234,285,256,289,270,245,0,287],
[235,259,226,261,243,267,242,246,282,269,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 6, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,285,244,269,253,238,223,254,241,240,270],
[266,0,266,255,258,248,255,253,260,261,255,249],
[215,234,0,240,240,266,266,216,245,241,251,253],
[256,245,260,0,257,248,276,221,245,244,227,263],
[231,242,260,243,0,248,235,215,222,242,247,238],
[247,252,234,252,252,0,255,240,236,256,229,277],
[262,245,234,224,265,245,0,223,243,261,227,271],
[277,247,284,279,285,260,277,0,250,270,273,272],
[246,240,255,255,278,264,257,250,0,263,264,275],
[259,239,259,256,258,244,239,230,237,0,233,242],
[260,245,249,273,253,271,273,227,236,267,0,271],
[230,251,247,237,262,223,229,228,225,258,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 7, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,224,227,258,232,272,274,267,248,300,244],
[257,0,268,265,269,247,277,276,256,253,278,258],
[276,232,0,215,260,248,229,241,257,247,274,247],
[273,235,285,0,268,251,290,287,267,280,278,264],
[242,231,240,232,0,241,252,253,240,237,245,261],
[268,253,252,249,259,0,268,243,288,262,262,251],
[228,223,271,210,248,232,0,261,219,249,267,267],
[226,224,259,213,247,257,239,0,263,266,260,247],
[233,244,243,233,260,212,281,237,0,252,272,258],
[252,247,253,220,263,238,251,234,248,0,261,260],
[200,222,226,222,255,238,233,240,228,239,0,213],
[256,242,253,236,239,249,233,253,242,240,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 8, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,234,236,219,226,244,268,246,237,264,240],
[268,0,263,274,253,270,264,283,277,240,287,282],
[266,237,0,260,245,247,262,261,270,248,262,265],
[264,226,240,0,233,266,235,257,243,250,259,253],
[281,247,255,267,0,266,268,278,268,283,280,277],
[274,230,253,234,234,0,245,265,260,236,274,251],
[256,236,238,265,232,255,0,266,259,251,271,269],
[232,217,239,243,222,235,234,0,248,229,241,246],
[254,223,230,257,232,240,241,252,0,236,261,243],
[263,260,252,250,217,264,249,271,264,0,256,262],
[236,213,238,241,220,226,229,259,239,244,0,242],
[260,218,235,247,223,249,231,254,257,238,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 9, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,248,270,245,248,261,251,245,252,266,259],
[244,0,261,260,252,244,263,234,251,254,251,275],
[252,239,0,276,259,244,253,243,248,251,248,264],
[230,240,224,0,257,238,254,232,234,238,249,271],
[255,248,241,243,0,245,256,248,248,247,267,268],
[252,256,256,262,255,0,257,260,257,246,263,278],
[239,237,247,246,244,243,0,240,242,229,260,256],
[249,266,257,268,252,240,260,0,261,259,253,268],
[255,249,252,266,252,243,258,239,0,257,254,287],
[248,246,249,262,253,254,271,241,243,0,266,279],
[234,249,252,251,233,237,240,247,246,234,0,260],
[241,225,236,229,232,222,244,232,213,221,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 10, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,246,238,235,241,277,270,259,257,260,274],
[246,0,249,264,232,276,236,257,263,277,228,252],
[254,251,0,247,254,270,251,286,248,295,265,265],
[262,236,253,0,251,250,271,276,257,274,254,242],
[265,268,246,249,0,268,255,256,227,261,264,247],
[259,224,230,250,232,0,245,254,226,268,222,220],
[223,264,249,229,245,255,0,245,240,269,248,256],
[230,243,214,224,244,246,255,0,240,256,222,259],
[241,237,252,243,273,274,260,260,0,295,247,262],
[243,223,205,226,239,232,231,244,205,0,200,216],
[240,272,235,246,236,278,252,278,253,300,0,256],
[226,248,235,258,253,280,244,241,238,284,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 11, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,253,275,273,273,285,275,312,231,219,262],
[260,0,260,260,274,279,311,252,306,225,266,242],
[247,240,0,283,294,275,312,271,324,257,287,268],
[225,240,217,0,262,284,262,265,268,222,245,276],
[227,226,206,238,0,245,257,257,249,204,272,232],
[227,221,225,216,255,0,285,207,289,199,253,248],
[215,189,188,238,243,215,0,225,247,231,228,195],
[225,248,229,235,243,293,275,0,303,200,236,241],
[188,194,176,232,251,211,253,197,0,211,247,211],
[269,275,243,278,296,301,269,300,289,0,287,283],
[281,234,213,255,228,247,272,264,253,213,0,220],
[238,258,232,224,268,252,305,259,289,217,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 12, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,252,260,248,249,239,253,256,237,255,245],
[239,0,244,234,232,229,235,233,249,234,245,230],
[248,256,0,245,243,247,238,254,251,254,234,254],
[240,266,255,0,251,254,252,257,259,255,260,247],
[252,268,257,249,0,254,257,255,270,262,250,253],
[251,271,253,246,246,0,232,232,239,252,239,240],
[261,265,262,248,243,268,0,259,251,253,257,249],
[247,267,246,243,245,268,241,0,251,253,249,244],
[244,251,249,241,230,261,249,249,0,246,246,233],
[263,266,246,245,238,248,247,247,254,0,243,248],
[245,255,266,240,250,261,243,251,254,257,0,243],
[255,270,246,253,247,260,251,256,267,252,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 13, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,216,211,206,226,236,235,234,233,232,258],
[269,0,239,245,252,255,298,250,244,262,254,270],
[284,261,0,256,237,253,281,286,269,268,242,292],
[289,255,244,0,255,299,293,279,270,286,271,276],
[294,248,263,245,0,254,283,277,257,269,269,261],
[274,245,247,201,246,0,260,238,233,215,221,246],
[264,202,219,207,217,240,0,241,256,274,252,247],
[265,250,214,221,223,262,259,0,271,267,220,271],
[266,256,231,230,243,267,244,229,0,232,256,242],
[267,238,232,214,231,285,226,233,268,0,263,249],
[268,246,258,229,231,279,248,280,244,237,0,275],
[242,230,208,224,239,254,253,229,258,251,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 14, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,249,275,262,253,278,260,255,276,255,269],
[266,0,241,298,268,274,280,285,273,289,275,268],
[251,259,0,273,258,256,259,266,240,269,256,251],
[225,202,227,0,251,241,251,226,253,266,252,234],
[238,232,242,249,0,230,264,250,249,264,260,239],
[247,226,244,259,270,0,247,278,252,243,251,249],
[222,220,241,249,236,253,0,250,238,245,230,227],
[240,215,234,274,250,222,250,0,242,255,244,234],
[245,227,260,247,251,248,262,258,0,260,261,241],
[224,211,231,234,236,257,255,245,240,0,245,247],
[245,225,244,248,240,249,270,256,239,255,0,238],
[231,232,249,266,261,251,273,266,259,253,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 15, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,224,225,240,246,240,255,213,217,229,248,221],
[276,0,253,256,256,240,261,225,236,240,239,246],
[275,247,0,251,276,216,273,240,252,248,256,231],
[260,244,249,0,273,260,262,213,231,235,245,249],
[254,244,224,227,0,231,207,206,200,206,199,235],
[260,260,284,240,269,0,301,232,272,273,285,279],
[245,239,227,238,293,199,0,255,218,234,232,247],
[287,275,260,287,294,268,245,0,232,222,262,271],
[283,264,248,269,300,228,282,268,0,277,293,256],
[271,260,252,265,294,227,266,278,223,0,277,215],
[252,261,244,255,301,215,268,238,207,223,0,239],
[279,254,269,251,265,221,253,229,244,285,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 16, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,254,257,254,251,252,259,261,253,243,241],
[236,0,247,232,227,248,222,241,254,226,231,241],
[246,253,0,248,247,243,228,248,268,234,240,230],
[243,268,252,0,240,249,242,240,254,238,241,237],
[246,273,253,260,0,266,241,230,263,238,248,250],
[249,252,257,251,234,0,236,242,246,224,248,238],
[248,278,272,258,259,264,0,265,268,246,256,261],
[241,259,252,260,270,258,235,0,260,249,235,240],
[239,246,232,246,237,254,232,240,0,231,219,232],
[247,274,266,262,262,276,254,251,269,0,250,237],
[257,269,260,259,252,252,244,265,281,250,0,254],
[259,259,270,263,250,262,239,260,268,263,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 17, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,235,232,220,247,234,268,234,214,244,258],
[256,0,226,228,263,226,251,243,236,222,222,246],
[265,274,0,235,240,238,261,242,229,237,257,266],
[268,272,265,0,264,236,255,256,273,251,287,288],
[280,237,260,236,0,247,223,271,239,238,231,251],
[253,274,262,264,253,0,248,255,249,208,250,267],
[266,249,239,245,277,252,0,261,248,219,253,269],
[232,257,258,244,229,245,239,0,253,218,242,254],
[266,264,271,227,261,251,252,247,0,253,266,287],
[286,278,263,249,262,292,281,282,247,0,249,280],
[256,278,243,213,269,250,247,258,234,251,0,276],
[242,254,234,212,249,233,231,246,213,220,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 18, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,238,254,297,245,239,227,257,227,261,292],
[252,0,220,268,279,246,255,253,243,257,270,282],
[262,280,0,289,279,275,280,270,229,250,284,293],
[246,232,211,0,259,221,224,229,210,232,216,257],
[203,221,221,241,0,218,240,218,222,220,200,239],
[255,254,225,279,282,0,254,261,239,240,252,262],
[261,245,220,276,260,246,0,246,254,230,242,262],
[273,247,230,271,282,239,254,0,219,233,236,279],
[243,257,271,290,278,261,246,281,0,220,267,297],
[273,243,250,268,280,260,270,267,280,0,261,280],
[239,230,216,284,300,248,258,264,233,239,0,260],
[208,218,207,243,261,238,238,221,203,220,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 19, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,254,244,255,257,286,269,283,254,260,271],
[280,0,264,247,283,255,292,281,277,272,252,271],
[246,236,0,245,252,246,265,260,264,246,249,244],
[256,253,255,0,237,261,280,266,266,234,253,266],
[245,217,248,263,0,259,292,256,281,246,239,277],
[243,245,254,239,241,0,262,263,275,247,244,252],
[214,208,235,220,208,238,0,230,253,233,214,242],
[231,219,240,234,244,237,270,0,259,250,245,244],
[217,223,236,234,219,225,247,241,0,231,231,232],
[246,228,254,266,254,253,267,250,269,0,244,223],
[240,248,251,247,261,256,286,255,269,256,0,245],
[229,229,256,234,223,248,258,256,268,277,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 20, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,252,233,238,237,242,253,241,233,237,245],
[269,0,265,237,251,237,236,255,261,235,261,252],
[248,235,0,239,255,235,234,234,257,250,235,234],
[267,263,261,0,271,258,247,259,267,266,255,255],
[262,249,245,229,0,247,243,246,253,258,255,241],
[263,263,265,242,253,0,245,235,248,262,256,248],
[258,264,266,253,257,255,0,269,260,264,250,266],
[247,245,266,241,254,265,231,0,255,233,253,233],
[259,239,243,233,247,252,240,245,0,259,260,238],
[267,265,250,234,242,238,236,267,241,0,243,246],
[263,239,265,245,245,244,250,247,240,257,0,247],
[255,248,266,245,259,252,234,267,262,254,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 21, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,214,242,231,246,238,228,261,235,227,211],
[266,0,231,242,247,230,257,246,272,249,261,232],
[286,269,0,246,237,265,268,244,262,262,263,215],
[258,258,254,0,247,255,252,237,274,254,233,223],
[269,253,263,253,0,267,281,260,276,252,247,251],
[254,270,235,245,233,0,282,220,273,260,242,222],
[262,243,232,248,219,218,0,214,258,245,230,236],
[272,254,256,263,240,280,286,0,271,268,267,232],
[239,228,238,226,224,227,242,229,0,235,200,224],
[265,251,238,246,248,240,255,232,265,0,266,226],
[273,239,237,267,253,258,270,233,300,234,0,237],
[289,268,285,277,249,278,264,268,276,274,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 22, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,230,242,255,255,229,274,230,256,255,271],
[235,0,220,240,262,241,220,218,266,237,240,265],
[270,280,0,286,296,256,250,247,298,249,282,263],
[258,260,214,0,265,214,229,254,238,251,267,295],
[245,238,204,235,0,257,247,264,250,247,261,260],
[245,259,244,286,243,0,229,265,301,242,291,289],
[271,280,250,271,253,271,0,288,253,256,280,284],
[226,282,253,246,236,235,212,0,254,247,235,286],
[270,234,202,262,250,199,247,246,0,254,249,248],
[244,263,251,249,253,258,244,253,246,0,264,267],
[245,260,218,233,239,209,220,265,251,236,0,250],
[229,235,237,205,240,211,216,214,252,233,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 23, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,258,275,260,255,288,254,255,241,266,252],
[251,0,261,266,247,259,281,256,260,249,259,251],
[242,239,0,254,230,254,264,255,262,254,249,251],
[225,234,246,0,226,246,250,249,218,245,256,246],
[240,253,270,274,0,275,285,257,270,256,278,265],
[245,241,246,254,225,0,261,249,242,256,260,270],
[212,219,236,250,215,239,0,236,228,242,251,241],
[246,244,245,251,243,251,264,0,240,235,242,240],
[245,240,238,282,230,258,272,260,0,248,274,242],
[259,251,246,255,244,244,258,265,252,0,261,246],
[234,241,251,244,222,240,249,258,226,239,0,225],
[248,249,249,254,235,230,259,260,258,254,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 24, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,196,280,194,233,246,218,245,240,276,289],
[283,0,234,279,235,211,231,243,262,230,245,273],
[304,266,0,293,250,294,307,263,232,289,269,318],
[220,221,207,0,243,237,267,203,231,200,247,230],
[306,265,250,257,0,250,297,247,275,235,277,313],
[267,289,206,263,250,0,280,249,245,283,273,280],
[254,269,193,233,203,220,0,209,212,225,217,250],
[282,257,237,297,253,251,291,0,236,303,289,305],
[255,238,268,269,225,255,288,264,0,262,293,246],
[260,270,211,300,265,217,275,197,238,0,247,307],
[224,255,231,253,223,227,283,211,207,253,0,266],
[211,227,182,270,187,220,250,195,254,193,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 25, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,231,223,221,221,211,233,229,216,229,230],
[280,0,243,256,240,245,244,250,249,251,264,249],
[269,257,0,246,243,244,245,255,259,236,262,258],
[277,244,254,0,247,256,244,265,270,249,242,248],
[279,260,257,253,0,260,257,263,262,261,242,262],
[279,255,256,244,240,0,244,248,259,248,258,254],
[289,256,255,256,243,256,0,263,266,251,261,254],
[267,250,245,235,237,252,237,0,249,241,246,250],
[271,251,241,230,238,241,234,251,0,234,239,246],
[284,249,264,251,239,252,249,259,266,0,258,268],
[271,236,238,258,258,242,239,254,261,242,0,266],
[270,251,242,252,238,246,246,250,254,232,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 26, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,200,204,251,219,220,213,254,259,262,229],
[290,0,264,257,282,268,256,281,296,277,284,242],
[300,236,0,241,282,255,245,244,255,269,262,251],
[296,243,259,0,302,270,267,271,287,286,270,240],
[249,218,218,198,0,245,236,235,254,243,262,225],
[281,232,245,230,255,0,240,255,273,269,258,230],
[280,244,255,233,264,260,0,248,272,266,246,215],
[287,219,256,229,265,245,252,0,249,236,274,233],
[246,204,245,213,246,227,228,251,0,257,264,225],
[241,223,231,214,257,231,234,264,243,0,268,212],
[238,216,238,230,238,242,254,226,236,232,0,214],
[271,258,249,260,275,270,285,267,275,288,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 27, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,255,274,269,269,262,252,258,268,276,271],
[254,0,250,268,251,270,252,252,242,255,262,257],
[245,250,0,267,255,250,256,253,238,247,265,257],
[226,232,233,0,250,234,244,242,230,236,241,255],
[231,249,245,250,0,244,235,250,236,242,250,253],
[231,230,250,266,256,0,239,250,252,258,248,258],
[238,248,244,256,265,261,0,247,260,260,272,253],
[248,248,247,258,250,250,253,0,235,245,259,257],
[242,258,262,270,264,248,240,265,0,254,264,256],
[232,245,253,264,258,242,240,255,246,0,244,263],
[224,238,235,259,250,252,228,241,236,256,0,249],
[229,243,243,245,247,242,247,243,244,237,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 28, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,255,260,253,249,239,260,252,258,236,258],
[242,0,245,227,226,256,243,228,219,260,220,231],
[245,255,0,252,234,262,253,250,243,271,249,246],
[240,273,248,0,245,238,265,259,247,274,241,252],
[247,274,266,255,0,259,258,254,259,279,254,256],
[251,244,238,262,241,0,261,244,243,257,251,252],
[261,257,247,235,242,239,0,244,236,259,247,230],
[240,272,250,241,246,256,256,0,252,275,237,259],
[248,281,257,253,241,257,264,248,0,276,255,221],
[242,240,229,226,221,243,241,225,224,0,236,229],
[264,280,251,259,246,249,253,263,245,264,0,252],
[242,269,254,248,244,248,270,241,279,271,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 29, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,248,258,254,255,254,236,278,239,221,234],
[251,0,216,255,257,228,232,223,226,240,227,282],
[252,284,0,286,268,270,235,235,255,279,278,266],
[242,245,214,0,275,270,229,234,249,244,246,229],
[246,243,232,225,0,249,208,220,249,233,236,227],
[245,272,230,230,251,0,217,254,227,221,214,217],
[246,268,265,271,292,283,0,258,275,255,267,277],
[264,277,265,266,280,246,242,0,260,272,266,263],
[222,274,245,251,251,273,225,240,0,247,248,246],
[261,260,221,256,267,279,245,228,253,0,286,250],
[279,273,222,254,264,286,233,234,252,214,0,277],
[266,218,234,271,273,283,223,237,254,250,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 30, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,168,209,188,152,148,211,209,175,185,217],
[318,0,212,194,214,215,198,258,273,250,255,198],
[332,288,0,249,235,335,284,251,294,225,239,213],
[291,306,251,0,324,269,227,266,356,218,287,242],
[312,286,265,176,0,254,290,309,357,235,307,320],
[348,285,165,231,246,0,229,246,294,200,262,252],
[352,302,216,273,210,271,0,266,317,273,251,251],
[289,242,249,234,191,254,234,0,244,254,221,244],
[291,227,206,144,143,206,183,256,0,188,189,140],
[325,250,275,282,265,300,227,246,312,0,247,284],
[315,245,261,213,193,238,249,279,311,253,0,303],
[283,302,287,258,180,248,249,256,360,216,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 31, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,256,244,260,274,266,277,253,252,260,263],
[233,0,245,242,256,244,251,261,236,251,244,239],
[244,255,0,246,254,240,251,272,254,252,264,248],
[256,258,254,0,268,273,249,255,256,234,273,255],
[240,244,246,232,0,259,255,265,236,244,258,266],
[226,256,260,227,241,0,241,252,223,256,260,242],
[234,249,249,251,245,259,0,266,251,256,262,239],
[223,239,228,245,235,248,234,0,250,246,255,245],
[247,264,246,244,264,277,249,250,0,246,262,246],
[248,249,248,266,256,244,244,254,254,0,242,260],
[240,256,236,227,242,240,238,245,238,258,0,243],
[237,261,252,245,234,258,261,255,254,240,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 32, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,197,284,345,87,148,199,173,183,138,293],
[226,0,319,285,209,209,209,321,295,183,321,415],
[303,181,0,303,364,252,303,321,338,234,303,364],
[216,215,197,0,251,87,61,173,173,61,199,293],
[155,291,136,249,0,61,112,173,173,112,138,293],
[413,291,248,413,439,0,413,234,371,234,303,397],
[352,291,197,439,388,87,0,173,173,183,138,293],
[301,179,179,327,327,266,327,0,291,301,317,205],
[327,205,162,327,327,129,327,209,0,164,111,266],
[317,317,266,439,388,266,317,199,336,0,317,336],
[362,179,197,301,362,197,362,183,389,183,0,224],
[207,85,136,207,207,103,207,295,234,164,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 33, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,248,255,256,267,233,263,239,268,255,241],
[243,0,234,263,258,250,232,264,238,277,242,245],
[252,266,0,273,292,262,236,273,267,277,279,255],
[245,237,227,0,245,253,235,230,242,266,241,233],
[244,242,208,255,0,253,240,259,258,258,240,240],
[233,250,238,247,247,0,241,255,226,249,246,246],
[267,268,264,265,260,259,0,275,247,293,264,242],
[237,236,227,270,241,245,225,0,226,254,247,254],
[261,262,233,258,242,274,253,274,0,294,257,240],
[232,223,223,234,242,251,207,246,206,0,223,216],
[245,258,221,259,260,254,236,253,243,277,0,250],
[259,255,245,267,260,254,258,246,260,284,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 34, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,247,250,252,260,247,252,269,246,250,241],
[258,0,244,261,256,249,267,249,257,244,248,256],
[253,256,0,257,253,249,254,238,251,235,233,239],
[250,239,243,0,266,259,254,249,258,238,233,247],
[248,244,247,234,0,244,241,232,250,232,248,234],
[240,251,251,241,256,0,251,259,252,246,238,250],
[253,233,246,246,259,249,0,238,265,241,242,236],
[248,251,262,251,268,241,262,0,267,252,250,254],
[231,243,249,242,250,248,235,233,0,241,236,236],
[254,256,265,262,268,254,259,248,259,0,252,258],
[250,252,267,267,252,262,258,250,264,248,0,252],
[259,244,261,253,266,250,264,246,264,242,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 35, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,255,262,248,240,250,235,239,263,241,250],
[248,0,259,267,259,248,249,245,264,267,261,263],
[245,241,0,274,237,233,241,223,227,251,247,228],
[238,233,226,0,228,216,245,235,231,250,247,248],
[252,241,263,272,0,243,263,251,239,272,267,254],
[260,252,267,284,257,0,262,244,238,260,260,251],
[250,251,259,255,237,238,0,240,228,264,255,237],
[265,255,277,265,249,256,260,0,245,274,272,261],
[261,236,273,269,261,262,272,255,0,266,257,272],
[237,233,249,250,228,240,236,226,234,0,236,243],
[259,239,253,253,233,240,245,228,243,264,0,260],
[250,237,272,252,246,249,263,239,228,257,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 36, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,332,102,332,0,500,0,332,230,332,102,0],
[168,0,102,398,168,500,0,332,0,230,102,0],
[398,398,0,398,168,500,168,500,398,398,168,168],
[168,102,102,0,168,500,0,102,0,102,102,0],
[500,332,332,332,0,500,102,332,332,332,102,0],
[0,0,0,0,0,0,0,102,0,0,0,0],
[500,500,332,500,398,500,0,332,230,332,332,398],
[168,168,0,398,168,398,168,0,0,398,168,168],
[270,500,102,500,168,500,270,500,0,500,270,168],
[168,270,102,398,168,500,168,102,0,0,102,168],
[398,398,332,398,398,500,168,332,230,398,0,168],
[500,500,332,500,500,500,102,332,332,332,332,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 37, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,203,215,219,205,222,249,250,244,272,226],
[275,0,262,238,259,256,277,299,278,276,330,279],
[297,238,0,233,217,250,258,265,297,281,284,261],
[285,262,267,0,240,278,249,288,287,309,296,280],
[281,241,283,260,0,273,238,266,249,247,280,217],
[295,244,250,222,227,0,237,300,275,250,282,263],
[278,223,242,251,262,263,0,257,265,264,264,243],
[251,201,235,212,234,200,243,0,232,245,284,236],
[250,222,203,213,251,225,235,268,0,243,266,235],
[256,224,219,191,253,250,236,255,257,0,263,234],
[228,170,216,204,220,218,236,216,234,237,0,227],
[274,221,239,220,283,237,257,264,265,266,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 38, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,236,291,235,247,230,253,216,221,230,245],
[253,0,295,289,250,242,227,272,254,251,252,251],
[264,205,0,256,242,236,242,236,215,219,264,239],
[209,211,244,0,234,202,219,222,209,211,217,190],
[265,250,258,266,0,233,256,283,225,236,289,247],
[253,258,264,298,267,0,266,268,246,247,301,253],
[270,273,258,281,244,234,0,264,232,247,258,220],
[247,228,264,278,217,232,236,0,248,239,270,235],
[284,246,285,291,275,254,268,252,0,262,297,238],
[279,249,281,289,264,253,253,261,238,0,285,263],
[270,248,236,283,211,199,242,230,203,215,0,247],
[255,249,261,310,253,247,280,265,262,237,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 39, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,245,340,208,247,275,267,281,258,228,247],
[205,0,223,280,228,263,267,252,180,228,197,216],
[255,277,0,308,280,209,273,320,226,280,241,260],
[160,220,192,0,235,181,235,208,188,186,188,201],
[292,272,220,265,0,254,264,305,231,260,277,280],
[253,237,291,319,246,0,278,258,245,271,232,267],
[225,233,227,265,236,222,0,257,230,233,234,245],
[233,248,180,292,195,242,243,0,177,239,205,192],
[219,320,274,312,269,255,270,323,0,277,238,258],
[242,272,220,314,240,229,267,261,223,0,253,264],
[272,303,259,312,223,268,266,295,262,247,0,253],
[253,284,240,299,220,233,255,308,242,236,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 40, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,207,211,193,219,227,234,189,167,185,189],
[308,0,241,222,192,211,275,269,241,241,240,211],
[293,259,0,257,226,284,279,280,243,214,242,256],
[289,278,243,0,222,276,316,269,208,247,250,214],
[307,308,274,278,0,291,271,286,234,195,255,237],
[281,289,216,224,209,0,274,253,233,226,245,204],
[273,225,221,184,229,226,0,228,221,232,216,214],
[266,231,220,231,214,247,272,0,236,211,212,217],
[311,259,257,292,266,267,279,264,0,262,283,243],
[333,259,286,253,305,274,268,289,238,0,268,259],
[315,260,258,250,245,255,284,288,217,232,0,237],
[311,289,244,286,263,296,286,283,257,241,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 41, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,360,217,285,170,305,262,304,220,359,195,251],
[140,0,78,149,135,152,152,135,135,130,152,81],
[283,422,0,393,278,283,393,278,283,442,183,278],
[215,351,107,0,134,232,193,210,215,264,271,312],
[330,365,222,366,0,381,347,495,364,359,381,293],
[195,348,217,268,119,0,259,283,159,339,192,214],
[238,348,107,307,153,241,0,238,193,263,195,133],
[196,365,222,290,5,217,262,0,169,325,195,217],
[280,365,217,285,136,341,307,331,0,344,290,307],
[141,370,58,236,141,161,237,175,156,0,141,126],
[305,348,317,229,119,308,305,305,210,359,0,314],
[249,419,222,188,207,286,367,283,193,374,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 42, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,275,230,250,274,264,283,266,251,261,264],
[230,0,236,248,225,280,227,255,252,250,223,267],
[225,264,0,235,240,266,243,275,270,252,249,242],
[270,252,265,0,232,301,262,272,274,256,258,263],
[250,275,260,268,0,299,229,282,275,271,270,286],
[226,220,234,199,201,0,218,243,248,223,236,232],
[236,273,257,238,271,282,0,277,276,254,224,271],
[217,245,225,228,218,257,223,0,238,242,215,230],
[234,248,230,226,225,252,224,262,0,239,239,237],
[249,250,248,244,229,277,246,258,261,0,240,271],
[239,277,251,242,230,264,276,285,261,260,0,293],
[236,233,258,237,214,268,229,270,263,229,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 43, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,250,250,236,223,254,273,226,286,262,272],
[226,0,214,242,209,209,221,212,194,219,203,237],
[250,286,0,245,257,234,220,232,237,266,250,232],
[250,258,255,0,240,249,251,242,250,274,261,255],
[264,291,243,260,0,251,249,262,245,295,277,287],
[277,291,266,251,249,0,269,255,236,285,272,266],
[246,279,280,249,251,231,0,273,266,290,262,261],
[227,288,268,258,238,245,227,0,231,287,247,252],
[274,306,263,250,255,264,234,269,0,279,266,284],
[214,281,234,226,205,215,210,213,221,0,229,227],
[238,297,250,239,223,228,238,253,234,271,0,271],
[228,263,268,245,213,234,239,248,216,273,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 44, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,245,240,246,246,259,246,243,240,240,247],
[256,0,225,244,252,245,250,246,239,259,242,236],
[255,275,0,247,261,258,268,251,251,254,265,240],
[260,256,253,0,261,267,267,256,269,251,259,238],
[254,248,239,239,0,252,249,243,246,244,236,226],
[254,255,242,233,248,0,256,258,261,264,264,250],
[241,250,232,233,251,244,0,236,252,253,250,236],
[254,254,249,244,257,242,264,0,249,257,253,229],
[257,261,249,231,254,239,248,251,0,255,246,239],
[260,241,246,249,256,236,247,243,245,0,246,235],
[260,258,235,241,264,236,250,247,254,254,0,232],
[253,264,260,262,274,250,264,271,261,265,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 45, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,243,245,239,244,254,250,215,235,247,250],
[243,0,226,231,219,231,237,220,214,241,241,238],
[257,274,0,255,251,261,259,248,234,262,247,261],
[255,269,245,0,249,241,259,234,239,255,235,258],
[261,281,249,251,0,243,265,278,266,273,271,267],
[256,269,239,259,257,0,263,247,230,250,256,251],
[246,263,241,241,235,237,0,240,221,252,229,237],
[250,280,252,266,222,253,260,0,231,252,239,253],
[285,286,266,261,234,270,279,269,0,271,261,256],
[265,259,238,245,227,250,248,248,229,0,268,244],
[253,259,253,265,229,244,271,261,239,232,0,246],
[250,262,239,242,233,249,263,247,244,256,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 46, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,253,247,234,232,243,230,227,250,230,241],
[229,0,239,201,220,209,247,219,242,248,238,227],
[247,261,0,241,216,222,253,237,226,257,240,253],
[253,299,259,0,253,260,279,257,273,267,261,245],
[266,280,284,247,0,248,269,244,246,283,264,251],
[268,291,278,240,252,0,285,244,233,272,268,249],
[257,253,247,221,231,215,0,232,227,270,246,225],
[270,281,263,243,256,256,268,0,264,270,268,255],
[273,258,274,227,254,267,273,236,0,277,278,248],
[250,252,243,233,217,228,230,230,223,0,260,220],
[270,262,260,239,236,232,254,232,222,240,0,246],
[259,273,247,255,249,251,275,245,252,280,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 47, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,260,251,262,243,241,255,250,255,259,256],
[229,0,261,242,252,254,235,256,238,251,279,244],
[240,239,0,257,264,242,243,239,236,261,255,232],
[249,258,243,0,246,251,262,251,239,259,248,237],
[238,248,236,254,0,245,239,234,251,262,236,236],
[257,246,258,249,255,0,249,263,236,269,268,245],
[259,265,257,238,261,251,0,255,245,260,266,235],
[245,244,261,249,266,237,245,0,256,261,253,229],
[250,262,264,261,249,264,255,244,0,259,265,260],
[245,249,239,241,238,231,240,239,241,0,259,226],
[241,221,245,252,264,232,234,247,235,241,0,221],
[244,256,268,263,264,255,265,271,240,274,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 48, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,248,263,277,253,277,252,262,277,255,283],
[231,0,228,250,252,249,248,244,253,260,240,294],
[252,272,0,268,261,266,263,254,250,258,252,269],
[237,250,232,0,270,271,263,242,246,268,243,264],
[223,248,239,230,0,240,247,225,231,240,224,246],
[247,251,234,229,260,0,255,223,228,245,240,262],
[223,252,237,237,253,245,0,241,237,267,257,265],
[248,256,246,258,275,277,259,0,265,284,270,284],
[238,247,250,254,269,272,263,235,0,251,248,249],
[223,240,242,232,260,255,233,216,249,0,241,253],
[245,260,248,257,276,260,243,230,252,259,0,251],
[217,206,231,236,254,238,235,216,251,247,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 49, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,263,245,252,246,236,257,262,249,259,256],
[265,0,268,268,264,252,230,238,248,262,240,236],
[237,232,0,239,263,248,230,251,253,255,247,249],
[255,232,261,0,252,246,239,253,249,245,236,258],
[248,236,237,248,0,241,236,244,246,262,267,254],
[254,248,252,254,259,0,252,237,243,252,254,248],
[264,270,270,261,264,248,0,247,277,254,264,251],
[243,262,249,247,256,263,253,0,257,248,260,247],
[238,252,247,251,254,257,223,243,0,251,250,240],
[251,238,245,255,238,248,246,252,249,0,248,259],
[241,260,253,264,233,246,236,240,250,252,0,273],
[244,264,251,242,246,252,249,253,260,241,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 50, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,259,223,255,274,254,255,270,247,258,245],
[251,0,241,245,235,254,273,244,272,245,242,265],
[241,259,0,252,245,257,261,243,254,248,252,258],
[277,255,248,0,249,277,270,264,281,257,252,263],
[245,265,255,251,0,270,262,246,256,253,241,257],
[226,246,243,223,230,0,241,243,253,224,234,247],
[246,227,239,230,238,259,0,235,247,233,234,227],
[245,256,257,236,254,257,265,0,264,256,255,278],
[230,228,246,219,244,247,253,236,0,238,238,255],
[253,255,252,243,247,276,267,244,262,0,255,253],
[242,258,248,248,259,266,266,245,262,245,0,250],
[255,235,242,237,243,253,273,222,245,247,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 51, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,238,262,246,233,260,257,266,267,256,235],
[240,0,237,227,226,233,215,249,246,249,249,228],
[262,263,0,257,223,247,253,270,260,276,261,256],
[238,273,243,0,242,249,249,264,260,253,248,248],
[254,274,277,258,0,261,265,267,270,293,280,247],
[267,267,253,251,239,0,242,264,252,276,255,231],
[240,285,247,251,235,258,0,266,259,256,263,245],
[243,251,230,236,233,236,234,0,249,248,237,227],
[234,254,240,240,230,248,241,251,0,257,242,223],
[233,251,224,247,207,224,244,252,243,0,233,247],
[244,251,239,252,220,245,237,263,258,267,0,229],
[265,272,244,252,253,269,255,273,277,253,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 52, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,257,261,255,257,259,270,243,268,255,261],
[257,0,264,247,252,263,253,261,264,271,262,265],
[243,236,0,239,244,248,247,264,248,251,240,267],
[239,253,261,0,261,264,263,254,253,264,259,258],
[245,248,256,239,0,252,251,261,250,256,253,256],
[243,237,252,236,248,0,263,248,249,257,241,249],
[241,247,253,237,249,237,0,251,259,243,258,246],
[230,239,236,246,239,252,249,0,241,259,238,236],
[257,236,252,247,250,251,241,259,0,257,264,258],
[232,229,249,236,244,243,257,241,243,0,261,247],
[245,238,260,241,247,259,242,262,236,239,0,249],
[239,235,233,242,244,251,254,264,242,253,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 53, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,280,277,275,260,263,273,273,254,250,259],
[247,0,238,237,230,199,228,232,223,230,243,237],
[220,262,0,239,231,215,224,210,252,213,219,237],
[223,263,261,0,255,225,240,242,250,244,245,249],
[225,270,269,245,0,222,234,225,228,237,221,250],
[240,301,285,275,278,0,284,255,259,263,239,271],
[237,272,276,260,266,216,0,222,218,234,250,279],
[227,268,290,258,275,245,278,0,235,247,256,239],
[227,277,248,250,272,241,282,265,0,240,243,263],
[246,270,287,256,263,237,266,253,260,0,235,258],
[250,257,281,255,279,261,250,244,257,265,0,262],
[241,263,263,251,250,229,221,261,237,242,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 54, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,243,270,237,257,258,238,267,261,262,246],
[243,0,254,267,246,242,264,230,252,266,274,229],
[257,246,0,254,250,242,263,246,290,239,271,235],
[230,233,246,0,222,242,238,228,262,255,267,221],
[263,254,250,278,0,269,275,271,279,299,268,288],
[243,258,258,258,231,0,249,274,273,248,262,277],
[242,236,237,262,225,251,0,249,264,256,267,224],
[262,270,254,272,229,226,251,0,268,221,241,235],
[233,248,210,238,221,227,236,232,0,260,264,218],
[239,234,261,245,201,252,244,279,240,0,265,255],
[238,226,229,233,232,238,233,259,236,235,0,242],
[254,271,265,279,212,223,276,265,282,245,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 55, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,240,248,271,258,250,239,242,223,266,251],
[243,0,236,260,249,256,242,249,255,228,258,260],
[260,264,0,282,284,261,252,267,265,238,264,256],
[252,240,218,0,263,277,269,261,256,239,258,262],
[229,251,216,237,0,245,249,239,223,218,251,248],
[242,244,239,223,255,0,219,242,243,208,235,246],
[250,258,248,231,251,281,0,247,263,230,263,254],
[261,251,233,239,261,258,253,0,256,233,238,239],
[258,245,235,244,277,257,237,244,0,253,243,248],
[277,272,262,261,282,292,270,267,247,0,263,265],
[234,242,236,242,249,265,237,262,257,237,0,264],
[249,240,244,238,252,254,246,261,252,235,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 56, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,157,243,168,175,346,317,236,232,282,156],
[200,0,174,209,139,206,262,254,115,215,218,72],
[343,326,0,302,314,213,384,416,282,336,322,267],
[257,291,198,0,194,227,168,258,191,161,220,110],
[332,361,186,306,0,248,351,364,189,316,317,143],
[325,294,287,273,252,0,331,320,233,328,299,185],
[154,238,116,332,149,169,0,200,95,184,241,168],
[183,246,84,242,136,180,300,0,180,196,295,160],
[264,385,218,309,311,267,405,320,0,325,305,245],
[268,285,164,339,184,172,316,304,175,0,195,193],
[218,282,178,280,183,201,259,205,195,305,0,166],
[344,428,233,390,357,315,332,340,255,307,334,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 57, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,248,267,234,253,232,252,230,240,260,263],
[265,0,268,251,250,265,253,264,251,245,249,257],
[252,232,0,251,243,269,249,233,252,216,255,263],
[233,249,249,0,223,243,247,245,231,240,248,256],
[266,250,257,277,0,271,257,265,272,262,284,286],
[247,235,231,257,229,0,247,240,232,244,223,254],
[268,247,251,253,243,253,0,239,243,253,269,272],
[248,236,267,255,235,260,261,0,239,240,253,268],
[270,249,248,269,228,268,257,261,0,240,276,276],
[260,255,284,260,238,256,247,260,260,0,267,262],
[240,251,245,252,216,277,231,247,224,233,0,251],
[237,243,237,244,214,246,228,232,224,238,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 58, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,349,358,216,258,253,271,317,291,302,283,334],
[151,0,185,212,174,171,211,235,209,224,178,189],
[142,315,0,223,183,220,194,226,271,237,210,183],
[284,288,277,0,243,250,276,243,313,308,275,311],
[242,326,317,257,0,265,289,333,296,287,313,287],
[247,329,280,250,235,0,286,294,240,324,311,289],
[229,289,306,224,211,214,0,266,264,302,277,253],
[183,265,274,257,167,206,234,0,253,292,203,220],
[209,291,229,187,204,260,236,247,0,272,203,246],
[198,276,263,192,213,176,198,208,228,0,254,263],
[217,322,290,225,187,189,223,297,297,246,0,285],
[166,311,317,189,213,211,247,280,254,237,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 59, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,235,251,238,243,236,224,230,250,241,255],
[251,0,249,228,244,230,254,243,226,248,244,246],
[265,251,0,261,249,238,260,226,249,251,250,261],
[249,272,239,0,245,238,249,228,241,249,237,250],
[262,256,251,255,0,254,254,235,244,240,260,251],
[257,270,262,262,246,0,263,254,250,260,266,246],
[264,246,240,251,246,237,0,218,233,238,255,264],
[276,257,274,272,265,246,282,0,254,278,271,266],
[270,274,251,259,256,250,267,246,0,276,258,252],
[250,252,249,251,260,240,262,222,224,0,246,267],
[259,256,250,263,240,234,245,229,242,254,0,253],
[245,254,239,250,249,254,236,234,248,233,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 60, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,233,239,244,259,241,238,254,251,262,262],
[256,0,222,248,240,255,232,272,229,270,264,232],
[267,278,0,247,267,270,261,280,277,278,280,260],
[261,252,253,0,282,266,261,281,269,278,227,260],
[256,260,233,218,0,247,230,268,233,263,248,242],
[241,245,230,234,253,0,249,250,234,251,227,235],
[259,268,239,239,270,251,0,267,243,249,235,258],
[262,228,220,219,232,250,233,0,231,249,237,244],
[246,271,223,231,267,266,257,269,0,254,259,258],
[249,230,222,222,237,249,251,251,246,0,229,224],
[238,236,220,273,252,273,265,263,241,271,0,234],
[238,268,240,240,258,265,242,256,242,276,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 61, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,218,238,246,237,244,261,248,241,255,239],
[272,0,230,252,261,275,250,258,263,249,269,261],
[282,270,0,263,257,262,269,257,257,249,252,245],
[262,248,237,0,250,254,254,255,260,265,246,261],
[254,239,243,250,0,264,264,262,257,235,256,252],
[263,225,238,246,236,0,252,230,246,247,255,256],
[256,250,231,246,236,248,0,234,256,231,244,246],
[239,242,243,245,238,270,266,0,251,231,248,244],
[252,237,243,240,243,254,244,249,0,255,242,249],
[259,251,251,235,265,253,269,269,245,0,257,256],
[245,231,248,254,244,245,256,252,258,243,0,237],
[261,239,255,239,248,244,254,256,251,244,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 62, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,265,286,252,252,272,258,268,259,285,240],
[248,0,254,262,254,227,265,272,260,255,271,233],
[235,246,0,251,245,203,245,256,254,239,245,225],
[214,238,249,0,258,232,236,227,254,259,243,207],
[248,246,255,242,0,232,247,274,256,262,243,231],
[248,273,297,268,268,0,312,290,286,268,287,245],
[228,235,255,264,253,188,0,238,261,252,258,232],
[242,228,244,273,226,210,262,0,242,261,253,253],
[232,240,246,246,244,214,239,258,0,239,251,217],
[241,245,261,241,238,232,248,239,261,0,240,223],
[215,229,255,257,257,213,242,247,249,260,0,224],
[260,267,275,293,269,255,268,247,283,277,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 63, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,291,267,258,249,266,258,242,283,260,271],
[243,0,284,254,263,262,244,253,252,279,253,266],
[209,216,0,226,241,223,247,223,207,233,214,256],
[233,246,274,0,247,244,244,248,242,251,250,249],
[242,237,259,253,0,248,241,210,232,241,204,233],
[251,238,277,256,252,0,249,232,242,253,243,264],
[234,256,253,256,259,251,0,245,239,236,249,251],
[242,247,277,252,290,268,255,0,245,260,250,272],
[258,248,293,258,268,258,261,255,0,265,252,271],
[217,221,267,249,259,247,264,240,235,0,239,248],
[240,247,286,250,296,257,251,250,248,261,0,279],
[229,234,244,251,267,236,249,228,229,252,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 64, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,251,247,252,277,260,253,255,272,251,262],
[240,0,261,258,260,278,244,244,237,277,246,256],
[249,239,0,247,254,258,236,246,250,259,261,244],
[253,242,253,0,256,274,228,262,238,270,246,257],
[248,240,246,244,0,254,239,233,234,265,266,248],
[223,222,242,226,246,0,225,216,227,245,234,250],
[240,256,264,272,261,275,0,248,253,260,267,266],
[247,256,254,238,267,284,252,0,257,256,253,254],
[245,263,250,262,266,273,247,243,0,271,261,264],
[228,223,241,230,235,255,240,244,229,0,260,255],
[249,254,239,254,234,266,233,247,239,240,0,255],
[238,244,256,243,252,250,234,246,236,245,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 65, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,251,249,266,240,247,247,258,233,241,252],
[252,0,237,244,260,247,225,246,259,236,245,247],
[249,263,0,255,257,234,257,246,238,225,249,247],
[251,256,245,0,251,250,235,259,248,243,260,267],
[234,240,243,249,0,234,229,216,251,219,246,226],
[260,253,266,250,266,0,229,253,257,254,250,246],
[253,275,243,265,271,271,0,251,267,260,269,270],
[253,254,254,241,284,247,249,0,244,246,239,252],
[242,241,262,252,249,243,233,256,0,226,237,254],
[267,264,275,257,281,246,240,254,274,0,276,280],
[259,255,251,240,254,250,231,261,263,224,0,264],
[248,253,253,233,274,254,230,248,246,220,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 66, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,260,266,235,229,207,246,262,247,251,268],
[277,0,241,233,273,254,222,243,221,248,264,265],
[240,259,0,262,291,265,234,214,234,262,233,240],
[234,267,238,0,268,207,240,220,262,261,224,283],
[265,227,209,232,0,234,244,222,232,234,225,276],
[271,246,235,293,266,0,181,222,213,236,230,269],
[293,278,266,260,256,319,0,220,238,266,216,305],
[254,257,286,280,278,278,280,0,212,253,244,281],
[238,279,266,238,268,287,262,288,0,275,242,272],
[253,252,238,239,266,264,234,247,225,0,234,262],
[249,236,267,276,275,270,284,256,258,266,0,344],
[232,235,260,217,224,231,195,219,228,238,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 67, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,258,243,260,242,252,239,267,258,255,264],
[253,0,243,253,254,230,254,245,253,253,238,248],
[242,257,0,232,259,236,247,240,250,234,275,245],
[257,247,268,0,254,261,253,264,280,270,254,271],
[240,246,241,246,0,242,242,241,281,263,229,245],
[258,270,264,239,258,0,232,243,270,270,259,256],
[248,246,253,247,258,268,0,254,276,258,264,258],
[261,255,260,236,259,257,246,0,262,266,254,248],
[233,247,250,220,219,230,224,238,0,240,262,226],
[242,247,266,230,237,230,242,234,260,0,249,257],
[245,262,225,246,271,241,236,246,238,251,0,269],
[236,252,255,229,255,244,242,252,274,243,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 68, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,283,251,255,270,259,250,269,249,241,237],
[255,0,259,245,238,266,247,233,262,228,240,249],
[217,241,0,236,241,253,262,214,246,205,207,233],
[249,255,264,0,259,270,240,240,255,271,249,259],
[245,262,259,241,0,252,243,250,268,239,243,257],
[230,234,247,230,248,0,229,225,259,219,201,237],
[241,253,238,260,257,271,0,231,267,250,230,241],
[250,267,286,260,250,275,269,0,291,268,260,255],
[231,238,254,245,232,241,233,209,0,223,216,238],
[251,272,295,229,261,281,250,232,277,0,233,248],
[259,260,293,251,257,299,270,240,284,267,0,256],
[263,251,267,241,243,263,259,245,262,252,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 69, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,234,183,266,218,247,239,258,253,234,272],
[222,0,253,196,261,257,260,284,266,266,317,295],
[266,247,0,248,259,285,252,253,282,243,272,297],
[317,304,252,0,317,283,290,319,286,230,303,311],
[234,239,241,183,0,227,242,259,268,232,257,287],
[282,243,215,217,273,0,239,268,262,243,280,222],
[253,240,248,210,258,261,0,280,254,260,277,298],
[261,216,247,181,241,232,220,0,274,251,243,269],
[242,234,218,214,232,238,246,226,0,224,239,271],
[247,234,257,270,268,257,240,249,276,0,309,285],
[266,183,228,197,243,220,223,257,261,191,0,270],
[228,205,203,189,213,278,202,231,229,215,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 70, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,265,251,268,255,278,258,252,274,249,260],
[255,0,257,257,297,264,251,280,238,252,252,268],
[235,243,0,232,275,237,244,263,219,242,263,266],
[249,243,268,0,270,289,273,264,242,272,253,265],
[232,203,225,230,0,228,228,256,228,220,224,246],
[245,236,263,211,272,0,255,244,222,241,246,236],
[222,249,256,227,272,245,0,262,213,247,250,240],
[242,220,237,236,244,256,238,0,233,252,233,235],
[248,262,281,258,272,278,287,267,0,256,229,260],
[226,248,258,228,280,259,253,248,244,0,256,256],
[251,248,237,247,276,254,250,267,271,244,0,262],
[240,232,234,235,254,264,260,265,240,244,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 71, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,251,246,246,246,238,255,242,245,243,236],
[238,0,249,257,258,239,230,247,234,247,249,236],
[249,251,0,251,269,254,231,248,252,255,252,242],
[254,243,249,0,245,252,222,266,251,245,250,255],
[254,242,231,255,0,249,230,258,247,233,249,241],
[254,261,246,248,251,0,239,246,242,249,244,240],
[262,270,269,278,270,261,0,263,255,249,264,249],
[245,253,252,234,242,254,237,0,247,230,250,226],
[258,266,248,249,253,258,245,253,0,243,247,259],
[255,253,245,255,267,251,251,270,257,0,247,251],
[257,251,248,250,251,256,236,250,253,253,0,246],
[264,264,258,245,259,260,251,274,241,249,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 72, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,261,249,262,247,243,250,251,250,253,259],
[231,0,250,241,222,230,231,242,241,235,235,236],
[239,250,0,234,240,242,225,249,245,239,245,233],
[251,259,266,0,247,249,241,263,265,244,250,244],
[238,278,260,253,0,262,256,270,267,242,239,253],
[253,270,258,251,238,0,253,255,255,224,252,232],
[257,269,275,259,244,247,0,279,246,247,266,249],
[250,258,251,237,230,245,221,0,246,231,239,233],
[249,259,255,235,233,245,254,254,0,227,251,242],
[250,265,261,256,258,276,253,269,273,0,243,245],
[247,265,255,250,261,248,234,261,249,257,0,252],
[241,264,267,256,247,268,251,267,258,255,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 73, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,246,241,247,254,253,265,246,239,261,244],
[250,0,253,229,246,236,248,260,241,255,250,231],
[254,247,0,232,244,229,239,258,245,242,246,233],
[259,271,268,0,264,242,254,275,249,249,264,246],
[253,254,256,236,0,231,262,271,242,234,247,229],
[246,264,271,258,269,0,267,283,254,258,260,259],
[247,252,261,246,238,233,0,277,239,235,247,242],
[235,240,242,225,229,217,223,0,233,246,232,235],
[254,259,255,251,258,246,261,267,0,255,266,238],
[261,245,258,251,266,242,265,254,245,0,252,234],
[239,250,254,236,253,240,253,268,234,248,0,254],
[256,269,267,254,271,241,258,265,262,266,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 74, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,230,256,245,246,245,257,249,252,221,267],
[253,0,228,257,230,246,245,241,271,252,224,238],
[270,272,0,265,245,276,279,268,288,241,255,266],
[244,243,235,0,227,245,253,236,287,265,217,270],
[255,270,255,273,0,270,277,255,282,258,244,273],
[254,254,224,255,230,0,230,230,279,244,221,231],
[255,255,221,247,223,270,0,223,270,271,223,265],
[243,259,232,264,245,270,277,0,267,284,264,269],
[251,229,212,213,218,221,230,233,0,240,209,240],
[248,248,259,235,242,256,229,216,260,0,222,261],
[279,276,245,283,256,279,277,236,291,278,0,282],
[233,262,234,230,227,269,235,231,260,239,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 75, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,241,254,257,254,269,254,262,244,261,249],
[249,0,248,257,239,261,263,264,242,253,254,244],
[259,252,0,261,246,271,253,262,268,230,261,256],
[246,243,239,0,265,260,261,263,262,246,249,253],
[243,261,254,235,0,238,259,242,265,239,244,247],
[246,239,229,240,262,0,256,256,252,228,245,244],
[231,237,247,239,241,244,0,255,254,247,248,249],
[246,236,238,237,258,244,245,0,263,252,243,233],
[238,258,232,238,235,248,246,237,0,234,241,242],
[256,247,270,254,261,272,253,248,266,0,259,251],
[239,246,239,251,256,255,252,257,259,241,0,240],
[251,256,244,247,253,256,251,267,258,249,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 76, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,271,270,276,251,278,248,278,262,264,252],
[253,0,265,264,258,246,277,266,266,258,256,268],
[229,235,0,247,257,244,257,237,244,249,248,251],
[230,236,253,0,244,248,249,264,268,255,251,250],
[224,242,243,256,0,234,236,235,248,258,259,242],
[249,254,256,252,266,0,264,258,262,264,254,267],
[222,223,243,251,264,236,0,258,253,233,223,236],
[252,234,263,236,265,242,242,0,242,248,250,255],
[222,234,256,232,252,238,247,258,0,240,252,243],
[238,242,251,245,242,236,267,252,260,0,247,257],
[236,244,252,249,241,246,277,250,248,253,0,248],
[248,232,249,250,258,233,264,245,257,243,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 77, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,252,268,257,250,258,254,241,263,272,242],
[247,0,255,273,244,259,257,268,256,265,254,241],
[248,245,0,261,255,245,273,246,253,256,259,243],
[232,227,239,0,264,238,255,234,227,252,237,239],
[243,256,245,236,0,249,251,247,247,264,241,231],
[250,241,255,262,251,0,257,260,260,256,252,254],
[242,243,227,245,249,243,0,245,247,255,245,239],
[246,232,254,266,253,240,255,0,250,263,253,247],
[259,244,247,273,253,240,253,250,0,264,263,240],
[237,235,244,248,236,244,245,237,236,0,246,248],
[228,246,241,263,259,248,255,247,237,254,0,249],
[258,259,257,261,269,246,261,253,260,252,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 78, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,251,255,244,250,274,257,245,218,242,246],
[266,0,263,276,248,255,277,278,260,259,255,265],
[249,237,0,242,224,232,281,239,221,251,227,256],
[245,224,258,0,245,267,275,283,240,247,222,252],
[256,252,276,255,0,262,268,264,263,265,255,245],
[250,245,268,233,238,0,269,249,251,234,239,225],
[226,223,219,225,232,231,0,246,220,211,226,206],
[243,222,261,217,236,251,254,0,220,237,233,227],
[255,240,279,260,237,249,280,280,0,244,258,230],
[282,241,249,253,235,266,289,263,256,0,251,267],
[258,245,273,278,245,261,274,267,242,249,0,255],
[254,235,244,248,255,275,294,273,270,233,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 79, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,275,260,283,268,317,241,277,266,272,347],
[219,0,224,266,268,297,303,261,266,253,268,280],
[225,276,0,259,235,252,241,225,252,254,257,261],
[240,234,241,0,256,258,295,235,278,219,256,301],
[217,232,265,244,0,272,270,256,231,256,244,248],
[232,203,248,242,228,0,274,239,221,226,214,272],
[183,197,259,205,230,226,0,215,222,232,214,233],
[259,239,275,265,244,261,285,0,258,266,277,300],
[223,234,248,222,269,279,278,242,0,268,254,279],
[234,247,246,281,244,274,268,234,232,0,249,283],
[228,232,243,244,256,286,286,223,246,251,0,284],
[153,220,239,199,252,228,267,200,221,217,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 80, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,203,244,95,321,291,178,127,106,202,287],
[293,0,165,174,112,219,178,169,250,186,251,271],
[297,335,0,174,97,245,275,172,181,186,180,271],
[256,326,326,0,252,326,260,250,256,138,326,378],
[405,388,403,248,0,368,302,248,382,237,256,421],
[179,281,255,174,132,0,301,252,207,186,211,228],
[209,322,225,240,198,199,0,234,209,252,176,299],
[322,331,328,250,252,248,266,0,261,186,242,384],
[373,250,319,244,118,293,291,239,0,192,170,324],
[394,314,314,362,263,314,248,314,308,0,314,319],
[298,249,320,174,244,289,324,258,330,186,0,367],
[213,229,229,122,79,272,201,116,176,181,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 81, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,266,251,247,255,218,215,245,264,241,245],
[277,0,262,271,250,274,259,283,281,275,279,265],
[234,238,0,252,256,261,235,230,269,249,271,264],
[249,229,248,0,259,251,232,233,245,274,267,258],
[253,250,244,241,0,265,259,268,268,282,269,275],
[245,226,239,249,235,0,237,249,249,267,248,254],
[282,241,265,268,241,263,0,270,298,283,254,285],
[285,217,270,267,232,251,230,0,263,255,260,248],
[255,219,231,255,232,251,202,237,0,248,243,240],
[236,225,251,226,218,233,217,245,252,0,232,256],
[259,221,229,233,231,252,246,240,257,268,0,238],
[255,235,236,242,225,246,215,252,260,244,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 82, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,251,231,236,229,247,243,255,244,267,241],
[241,0,238,253,242,225,246,244,241,238,251,240],
[249,262,0,250,242,226,228,247,247,243,276,233],
[269,247,250,0,260,257,247,255,256,263,283,256],
[264,258,258,240,0,238,252,258,263,254,268,256],
[271,275,274,243,262,0,248,257,249,260,275,272],
[253,254,272,253,248,252,0,246,267,249,279,245],
[257,256,253,245,242,243,254,0,254,247,264,256],
[245,259,253,244,237,251,233,246,0,242,287,246],
[256,262,257,237,246,240,251,253,258,0,268,260],
[233,249,224,217,232,225,221,236,213,232,0,235],
[259,260,267,244,244,228,255,244,254,240,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 83, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,224,209,207,265,255,186,269,271,267,247,249],
[276,0,223,256,278,273,220,258,268,290,258,269],
[291,277,0,243,270,261,257,253,248,319,270,255],
[293,244,257,0,245,262,219,242,238,279,249,255],
[235,222,230,255,0,244,225,213,231,264,241,235],
[245,227,239,238,256,0,210,236,261,271,223,227],
[314,280,243,281,275,290,0,285,267,286,241,263],
[231,242,247,258,287,264,215,0,263,281,265,252],
[229,232,252,262,269,239,233,237,0,261,281,257],
[233,210,181,221,236,229,214,219,239,0,218,239],
[253,242,230,251,259,277,259,235,219,282,0,260],
[251,231,245,245,265,273,237,248,243,261,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 84, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,272,237,251,239,260,268,255,236,254,249],
[259,0,273,239,260,247,261,272,237,233,256,248],
[228,227,0,219,238,226,261,256,240,237,228,241],
[263,261,281,0,266,274,283,283,274,240,276,253],
[249,240,262,234,0,246,261,264,245,230,249,240],
[261,253,274,226,254,0,258,263,260,250,262,245],
[240,239,239,217,239,242,0,269,259,254,257,241],
[232,228,244,217,236,237,231,0,227,211,241,215],
[245,263,260,226,255,240,241,273,0,239,258,224],
[264,267,263,260,270,250,246,289,261,0,267,258],
[246,244,272,224,251,238,243,259,242,233,0,234],
[251,252,259,247,260,255,259,285,276,242,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 85, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,212,212,238,210,226,219,208,222,235,222],
[272,0,243,248,250,250,258,255,237,233,208,248],
[288,257,0,227,271,231,214,236,240,242,229,241],
[288,252,273,0,237,228,248,251,232,236,236,246],
[262,250,229,263,0,240,242,243,256,240,228,242],
[290,250,269,272,260,0,258,261,240,231,273,228],
[274,242,286,252,258,242,0,260,257,260,242,255],
[281,245,264,249,257,239,240,0,230,235,251,236],
[292,263,260,268,244,260,243,270,0,246,249,268],
[278,267,258,264,260,269,240,265,254,0,246,264],
[265,292,271,264,272,227,258,249,251,254,0,258],
[278,252,259,254,258,272,245,264,232,236,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 86, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,298,287,277,237,239,263,276,257,236,262],
[223,0,267,242,256,195,238,210,243,226,192,218],
[202,233,0,226,203,176,204,202,212,232,184,225],
[213,258,274,0,269,212,250,223,247,242,189,225],
[223,244,297,231,0,211,236,238,241,221,217,213],
[263,305,324,288,289,0,289,265,300,284,277,247],
[261,262,296,250,264,211,0,253,268,278,213,250],
[237,290,298,277,262,235,247,0,256,270,243,240],
[224,257,288,253,259,200,232,244,0,242,243,233],
[243,274,268,258,279,216,222,230,258,0,212,198],
[264,308,316,311,283,223,287,257,257,288,0,247],
[238,282,275,275,287,253,250,260,267,302,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 87, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,287,275,240,242,252,253,251,271,238,279],
[270,0,255,233,232,238,231,241,272,257,236,260],
[213,245,0,222,209,227,241,227,232,234,239,252],
[225,267,278,0,230,237,242,212,245,226,224,268],
[260,268,291,270,0,235,245,261,250,261,250,243],
[258,262,273,263,265,0,262,232,245,251,254,268],
[248,269,259,258,255,238,0,237,263,247,237,257],
[247,259,273,288,239,268,263,0,254,280,241,298],
[249,228,268,255,250,255,237,246,0,247,240,277],
[229,243,266,274,239,249,253,220,253,0,233,257],
[262,264,261,276,250,246,263,259,260,267,0,271],
[221,240,248,232,257,232,243,202,223,243,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 88, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,262,251,261,244,254,232,259,255,244,253],
[261,0,270,263,258,246,273,250,272,252,279,261],
[238,230,0,236,226,236,228,237,235,229,231,229],
[249,237,264,0,252,244,267,250,262,248,253,257],
[239,242,274,248,0,256,257,253,257,255,252,255],
[256,254,264,256,244,0,265,258,261,266,269,258],
[246,227,272,233,243,235,0,250,257,250,257,244],
[268,250,263,250,247,242,250,0,247,255,260,249],
[241,228,265,238,243,239,243,253,0,245,252,241],
[245,248,271,252,245,234,250,245,255,0,256,243],
[256,221,269,247,248,231,243,240,248,244,0,252],
[247,239,271,243,245,242,256,251,259,257,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 89, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,231,230,252,254,251,259,217,239,234,257],
[236,0,205,213,258,254,213,250,228,260,247,244],
[269,295,0,244,258,288,253,275,232,265,256,246],
[270,287,256,0,272,263,209,275,232,298,268,262],
[248,242,242,228,0,290,207,281,221,224,221,231],
[246,246,212,237,210,0,223,263,223,253,236,235],
[249,287,247,291,293,277,0,299,261,297,277,280],
[241,250,225,225,219,237,201,0,222,238,200,225],
[283,272,268,268,279,277,239,278,0,313,294,260],
[261,240,235,202,276,247,203,262,187,0,226,224],
[266,253,244,232,279,264,223,300,206,274,0,256],
[243,256,254,238,269,265,220,275,240,276,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 90, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,243,270,238,254,275,270,258,242,273,283],
[256,0,251,259,248,245,264,221,254,256,250,258],
[257,249,0,272,247,262,288,285,271,260,267,264],
[230,241,228,0,224,243,259,236,243,244,247,265],
[262,252,253,276,0,232,285,281,249,251,267,290],
[246,255,238,257,268,0,275,249,259,242,255,269],
[225,236,212,241,215,225,0,250,233,221,250,248],
[230,279,215,264,219,251,250,0,234,260,265,256],
[242,246,229,257,251,241,267,266,0,245,281,268],
[258,244,240,256,249,258,279,240,255,0,242,251],
[227,250,233,253,233,245,250,235,219,258,0,257],
[217,242,236,235,210,231,252,244,232,249,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 91, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,265,269,262,278,253,257,279,252,276,238],
[232,0,244,255,243,249,250,233,268,254,268,246],
[235,256,0,271,266,267,266,247,283,255,260,265],
[231,245,229,0,262,267,247,232,267,250,265,242],
[238,257,234,238,0,244,245,238,246,234,257,236],
[222,251,233,233,256,0,259,244,271,246,276,247],
[247,250,234,253,255,241,0,241,268,246,270,234],
[243,267,253,268,262,256,259,0,270,250,272,255],
[221,232,217,233,254,229,232,230,0,237,241,243],
[248,246,245,250,266,254,254,250,263,0,267,235],
[224,232,240,235,243,224,230,228,259,233,0,233],
[262,254,235,258,264,253,266,245,257,265,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 92, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,154,178,240,226,200,189,164,247,280,170],
[280,0,307,126,219,258,171,201,155,226,235,244],
[346,193,0,135,285,300,188,264,250,254,241,202],
[322,374,365,0,264,319,204,255,263,267,259,281],
[260,281,215,236,0,290,281,223,198,275,240,241],
[274,242,200,181,210,0,229,217,178,256,250,257],
[300,329,312,296,219,271,0,204,242,272,288,307],
[311,299,236,245,277,283,296,0,237,198,216,285],
[336,345,250,237,302,322,258,263,0,296,200,252],
[253,274,246,233,225,244,228,302,204,0,230,248],
[220,265,259,241,260,250,212,284,300,270,0,238],
[330,256,298,219,259,243,193,215,248,252,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 93, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,240,232,260,237,241,238,241,247,240,242],
[250,0,263,259,260,252,253,231,244,255,252,257],
[260,237,0,240,257,231,237,228,239,248,233,227],
[268,241,260,0,269,259,245,239,237,249,240,263],
[240,240,243,231,0,232,227,225,217,236,218,233],
[263,248,269,241,268,0,255,251,268,240,253,257],
[259,247,263,255,273,245,0,228,248,248,265,240],
[262,269,272,261,275,249,272,0,249,267,262,258],
[259,256,261,263,283,232,252,251,0,263,262,253],
[253,245,252,251,264,260,252,233,237,0,245,248],
[260,248,267,260,282,247,235,238,238,255,0,267],
[258,243,273,237,267,243,260,242,247,252,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 94, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,230,247,233,239,241,234,253,235,237,230],
[252,0,222,240,238,238,236,239,247,240,242,254],
[270,278,0,275,266,270,269,270,265,247,255,271],
[253,260,225,0,240,253,246,233,248,256,225,251],
[267,262,234,260,0,250,253,236,247,248,241,237],
[261,262,230,247,250,0,238,236,249,236,245,247],
[259,264,231,254,247,262,0,237,244,232,240,251],
[266,261,230,267,264,264,263,0,264,235,257,268],
[247,253,235,252,253,251,256,236,0,250,245,260],
[265,260,253,244,252,264,268,265,250,0,259,257],
[263,258,245,275,259,255,260,243,255,241,0,259],
[270,246,229,249,263,253,249,232,240,243,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 95, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,267,253,244,271,245,280,255,273,258,265],
[240,0,237,225,226,266,235,271,239,252,239,238],
[233,263,0,231,237,257,262,277,219,243,264,220],
[247,275,269,0,245,275,267,283,243,283,248,270],
[256,274,263,255,0,294,264,286,247,268,263,270],
[229,234,243,225,206,0,235,234,224,236,233,237],
[255,265,238,233,236,265,0,273,247,271,249,253],
[220,229,223,217,214,266,227,0,243,260,220,235],
[245,261,281,257,253,276,253,257,0,248,280,275],
[227,248,257,217,232,264,229,240,252,0,257,222],
[242,261,236,252,237,267,251,280,220,243,0,238],
[235,262,280,230,230,263,247,265,225,278,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 96, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,235,252,232,239,245,228,250,255,236,245],
[272,0,258,254,236,253,263,248,263,264,252,244],
[265,242,0,257,235,252,272,242,265,261,249,245],
[248,246,243,0,238,249,270,234,260,262,267,244],
[268,264,265,262,0,262,275,261,274,282,255,250],
[261,247,248,251,238,0,270,255,262,258,244,246],
[255,237,228,230,225,230,0,223,233,242,226,225],
[272,252,258,266,239,245,277,0,265,281,239,269],
[250,237,235,240,226,238,267,235,0,241,242,236],
[245,236,239,238,218,242,258,219,259,0,241,230],
[264,248,251,233,245,256,274,261,258,259,0,256],
[255,256,255,256,250,254,275,231,264,270,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 97, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,227,231,235,246,224,244,218,241,239,233],
[255,0,266,246,235,283,226,264,252,265,247,268],
[273,234,0,244,225,267,236,257,230,251,236,276],
[269,254,256,0,221,260,253,267,260,256,242,262],
[265,265,275,279,0,258,249,275,247,267,264,281],
[254,217,233,240,242,0,224,253,210,245,230,249],
[276,274,264,247,251,276,0,277,246,259,272,265],
[256,236,243,233,225,247,223,0,232,242,223,247],
[282,248,270,240,253,290,254,268,0,270,255,271],
[259,235,249,244,233,255,241,258,230,0,236,270],
[261,253,264,258,236,270,228,277,245,264,0,245],
[267,232,224,238,219,251,235,253,229,230,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 98, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,389,285,285,285,285,275,232,285,396,164,275],
[111,0,164,285,164,111,275,111,275,396,164,111],
[215,336,0,389,268,111,379,111,111,500,164,111],
[215,215,111,0,379,111,379,111,111,379,111,111],
[215,336,232,121,0,232,215,232,232,336,0,111],
[215,389,389,389,268,0,379,111,275,500,164,275],
[225,225,121,121,285,121,0,232,121,389,121,121],
[268,389,389,389,268,389,268,0,389,389,164,164],
[215,225,389,389,268,225,379,111,0,500,164,111],
[104,104,0,121,164,0,111,111,0,0,0,111],
[336,336,336,389,500,336,379,336,336,500,0,232],
[225,389,389,389,389,225,379,336,389,389,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 99, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,216,196,221,259,248,224,221,248,249,241],
[237,0,215,223,208,229,211,201,241,201,214,233],
[284,285,0,241,242,273,288,257,296,281,262,262],
[304,277,259,0,278,295,305,272,309,269,262,240],
[279,292,258,222,0,246,286,256,264,285,259,253],
[241,271,227,205,254,0,250,256,260,220,211,234],
[252,289,212,195,214,250,0,229,263,225,247,230],
[276,299,243,228,244,244,271,0,251,277,219,283],
[279,259,204,191,236,240,237,249,0,216,248,248],
[252,299,219,231,215,280,275,223,284,0,244,260],
[251,286,238,238,241,289,253,281,252,256,0,250],
[259,267,238,260,247,266,270,217,252,240,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 100, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,219,250,242,257,227,230,235,244,240,227],
[253,0,236,231,247,257,231,218,236,253,230,238],
[281,264,0,275,263,279,254,261,238,261,259,254],
[250,269,225,0,260,259,229,247,239,252,246,231],
[258,253,237,240,0,282,240,247,230,252,259,235],
[243,243,221,241,218,0,224,245,212,238,243,238],
[273,269,246,271,260,276,0,258,257,266,266,251],
[270,282,239,253,253,255,242,0,249,258,254,244],
[265,264,262,261,270,288,243,251,0,270,260,246],
[256,247,239,248,248,262,234,242,230,0,250,251],
[260,270,241,254,241,257,234,246,240,250,0,233],
[273,262,246,269,265,262,249,256,254,249,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 101, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,210,238,217,249,216,251,228,211,245,222],
[230,0,193,237,200,234,214,209,197,204,208,223],
[290,307,0,256,205,266,253,241,259,249,272,257],
[262,263,244,0,250,249,221,260,244,230,265,245],
[283,300,295,250,0,290,261,244,258,251,269,267],
[251,266,234,251,210,0,227,220,200,231,237,234],
[284,286,247,279,239,273,0,273,244,227,242,264],
[249,291,259,240,256,280,227,0,255,225,257,229],
[272,303,241,256,242,300,256,245,0,233,259,265],
[289,296,251,270,249,269,273,275,267,0,270,242],
[255,292,228,235,231,263,258,243,241,230,0,232],
[278,277,243,255,233,266,236,271,235,258,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 102, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,246,257,276,263,261,265,267,267,262,267],
[238,0,245,252,262,261,240,257,264,254,242,251],
[254,255,0,260,262,260,245,262,265,249,248,262],
[243,248,240,0,257,240,260,266,253,241,256,255],
[224,238,238,243,0,238,237,233,250,238,240,242],
[237,239,240,260,262,0,233,251,241,246,245,260],
[239,260,255,240,263,267,0,262,265,248,271,267],
[235,243,238,234,267,249,238,0,252,261,254,250],
[233,236,235,247,250,259,235,248,0,243,236,252],
[233,246,251,259,262,254,252,239,257,0,253,245],
[238,258,252,244,260,255,229,246,264,247,0,251],
[233,249,238,245,258,240,233,250,248,255,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 103, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,261,254,251,243,274,247,245,250,234,252],
[243,0,256,222,249,238,275,252,266,249,239,229],
[239,244,0,231,241,241,244,231,256,242,233,227],
[246,278,269,0,256,240,268,250,248,258,266,248],
[249,251,259,244,0,246,257,241,248,253,238,235],
[257,262,259,260,254,0,267,245,255,262,249,254],
[226,225,256,232,243,233,0,246,239,233,230,232],
[253,248,269,250,259,255,254,0,260,253,246,247],
[255,234,244,252,252,245,261,240,0,249,241,236],
[250,251,258,242,247,238,267,247,251,0,259,254],
[266,261,267,234,262,251,270,254,259,241,0,242],
[248,271,273,252,265,246,268,253,264,246,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 104, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,278,256,244,278,264,248,244,273,260,251],
[246,0,237,250,248,234,231,244,226,253,242,249],
[222,263,0,245,210,248,233,246,227,264,248,238],
[244,250,255,0,224,241,243,241,239,256,237,231],
[256,252,290,276,0,276,264,262,241,272,250,261],
[222,266,252,259,224,0,264,231,250,255,264,231],
[236,269,267,257,236,236,0,259,259,275,258,269],
[252,256,254,259,238,269,241,0,228,262,244,258],
[256,274,273,261,259,250,241,272,0,274,260,269],
[227,247,236,244,228,245,225,238,226,0,230,224],
[240,258,252,263,250,236,242,256,240,270,0,263],
[249,251,262,269,239,269,231,242,231,276,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 105, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,223,195,259,208,245,206,243,258,245,245],
[272,0,240,224,258,249,285,222,238,245,243,254],
[277,260,0,257,259,255,271,222,248,265,271,253],
[305,276,243,0,298,255,271,250,254,258,275,266],
[241,242,241,202,0,244,258,217,229,241,264,249],
[292,251,245,245,256,0,268,237,256,262,262,265],
[255,215,229,229,242,232,0,199,230,225,238,233],
[294,278,278,250,283,263,301,0,262,281,290,286],
[257,262,252,246,271,244,270,238,0,258,275,267],
[242,255,235,242,259,238,275,219,242,0,253,255],
[255,257,229,225,236,238,262,210,225,247,0,238],
[255,246,247,234,251,235,267,214,233,245,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 106, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,245,260,246,250,250,242,258,255,256,233],
[248,0,249,244,243,246,238,249,247,247,228,229],
[255,251,0,253,246,255,251,251,256,235,241,242],
[240,256,247,0,239,249,236,241,246,240,244,234],
[254,257,254,261,0,256,249,251,264,260,260,242],
[250,254,245,251,244,0,243,248,255,252,244,231],
[250,262,249,264,251,257,0,242,254,251,249,245],
[258,251,249,259,249,252,258,0,258,253,244,246],
[242,253,244,254,236,245,246,242,0,245,238,230],
[245,253,265,260,240,248,249,247,255,0,260,254],
[244,272,259,256,240,256,251,256,262,240,0,252],
[267,271,258,266,258,269,255,254,270,246,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 107, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,279,265,264,232,244,217,257,261,250,202],
[244,0,273,213,257,255,251,234,251,246,219,247],
[221,227,0,214,221,190,229,189,203,259,227,225],
[235,287,286,0,265,242,274,203,271,250,266,234],
[236,243,279,235,0,269,240,261,255,270,216,223],
[268,245,310,258,231,0,237,259,232,252,209,226],
[256,249,271,226,260,263,0,236,232,231,221,221],
[283,266,311,297,239,241,264,0,284,258,256,239],
[243,249,297,229,245,268,268,216,0,307,207,240],
[239,254,241,250,230,248,269,242,193,0,237,234],
[250,281,273,234,284,291,279,244,293,263,0,252],
[298,253,275,266,277,274,279,261,260,266,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 108, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,240,241,264,247,268,225,252,222,260,245],
[236,0,254,230,270,230,245,229,232,244,231,224],
[260,246,0,238,248,243,252,230,244,229,228,232],
[259,270,262,0,273,248,277,261,285,239,257,264],
[236,230,252,227,0,222,239,219,250,221,254,230],
[253,270,257,252,278,0,273,248,269,255,256,249],
[232,255,248,223,261,227,0,224,226,219,234,223],
[275,271,270,239,281,252,276,0,263,245,264,266],
[248,268,256,215,250,231,274,237,0,245,262,241],
[278,256,271,261,279,245,281,255,255,0,252,262],
[240,269,272,243,246,244,266,236,238,248,0,249],
[255,276,268,236,270,251,277,234,259,238,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 109, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,278,277,265,250,256,250,275,257,244,249],
[259,0,267,267,254,220,249,228,239,243,254,239],
[222,233,0,241,240,219,226,241,228,232,254,241],
[223,233,259,0,228,215,239,237,225,212,234,241],
[235,246,260,272,0,216,246,228,240,224,236,254],
[250,280,281,285,284,0,268,257,256,256,270,265],
[244,251,274,261,254,232,0,234,238,249,264,256],
[250,272,259,263,272,243,266,0,252,244,242,251],
[225,261,272,275,260,244,262,248,0,236,243,238],
[243,257,268,288,276,244,251,256,264,0,259,264],
[256,246,246,266,264,230,236,258,257,241,0,236],
[251,261,259,259,246,235,244,249,262,236,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 110, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,232,232,238,248,260,231,261,248,261,246],
[259,0,270,253,249,269,272,257,271,264,284,277],
[268,230,0,254,218,240,257,235,252,250,270,235],
[268,247,246,0,249,252,273,255,260,266,273,249],
[262,251,282,251,0,266,290,248,262,264,285,265],
[252,231,260,248,234,0,269,259,260,260,272,246],
[240,228,243,227,210,231,0,227,243,244,252,224],
[269,243,265,245,252,241,273,0,258,272,281,261],
[239,229,248,240,238,240,257,242,0,254,263,244],
[252,236,250,234,236,240,256,228,246,0,270,232],
[239,216,230,227,215,228,248,219,237,230,0,232],
[254,223,265,251,235,254,276,239,256,268,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 111, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,262,258,269,276,248,282,260,242,257,247],
[249,0,239,264,259,271,243,274,259,237,282,263],
[238,261,0,252,253,240,223,258,251,233,243,262],
[242,236,248,0,237,271,237,244,257,235,243,246],
[231,241,247,263,0,285,225,260,249,251,264,233],
[224,229,260,229,215,0,223,240,246,212,245,225],
[252,257,277,263,275,277,0,268,292,245,265,262],
[218,226,242,256,240,260,232,0,242,217,236,222],
[240,241,249,243,251,254,208,258,0,229,253,266],
[258,263,267,265,249,288,255,283,271,0,279,265],
[243,218,257,257,236,255,235,264,247,221,0,240],
[253,237,238,254,267,275,238,278,234,235,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 112, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,269,252,235,243,241,251,251,265,242,259],
[260,0,275,275,255,245,265,269,272,248,266,270],
[231,225,0,258,241,234,224,271,273,231,223,250],
[248,225,242,0,256,239,245,273,251,237,230,242],
[265,245,259,244,0,238,259,267,274,241,247,259],
[257,255,266,261,262,0,245,262,280,249,253,294],
[259,235,276,255,241,255,0,277,272,258,256,270],
[249,231,229,227,233,238,223,0,277,245,228,250],
[249,228,227,249,226,220,228,223,0,227,215,243],
[235,252,269,263,259,251,242,255,273,0,245,267],
[258,234,277,270,253,247,244,272,285,255,0,271],
[241,230,250,258,241,206,230,250,257,233,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 113, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,243,228,230,254,225,256,231,248,244,266],
[259,0,252,235,245,266,248,281,243,237,258,255],
[257,248,0,256,260,267,264,271,236,247,242,270],
[272,265,244,0,268,270,249,274,254,244,252,256],
[270,255,240,232,0,271,262,279,230,265,237,241],
[246,234,233,230,229,0,246,244,221,239,233,233],
[275,252,236,251,238,254,0,272,236,248,241,258],
[244,219,229,226,221,256,228,0,225,221,219,245],
[269,257,264,246,270,279,264,275,0,258,237,256],
[252,263,253,256,235,261,252,279,242,0,219,259],
[256,242,258,248,263,267,259,281,263,281,0,277],
[234,245,230,244,259,267,242,255,244,241,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 114, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,246,264,256,275,274,260,243,251,235,252],
[269,0,247,271,258,263,263,272,252,247,250,268],
[254,253,0,243,263,269,258,258,235,259,258,262],
[236,229,257,0,236,250,248,250,240,226,233,254],
[244,242,237,264,0,259,263,262,226,249,249,260],
[225,237,231,250,241,0,244,254,215,219,218,251],
[226,237,242,252,237,256,0,260,222,231,238,240],
[240,228,242,250,238,246,240,0,228,238,234,239],
[257,248,265,260,274,285,278,272,0,241,264,283],
[249,253,241,274,251,281,269,262,259,0,244,263],
[265,250,242,267,251,282,262,266,236,256,0,262],
[248,232,238,246,240,249,260,261,217,237,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 115, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,269,252,253,262,244,249,261,229,242,240],
[230,0,251,232,260,246,229,232,262,230,230,238],
[231,249,0,216,235,252,225,241,229,234,227,246],
[248,268,284,0,244,282,237,262,268,248,273,241],
[247,240,265,256,0,251,229,243,252,253,259,233],
[238,254,248,218,249,0,238,244,248,230,246,241],
[256,271,275,263,271,262,0,280,265,249,254,255],
[251,268,259,238,257,256,220,0,242,246,251,219],
[239,238,271,232,248,252,235,258,0,232,233,230],
[271,270,266,252,247,270,251,254,268,0,267,255],
[258,270,273,227,241,254,246,249,267,233,0,246],
[260,262,254,259,267,259,245,281,270,245,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 116, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,243,265,271,266,256,263,267,254,274,250],
[233,0,246,269,264,255,254,257,251,253,267,240],
[257,254,0,260,259,252,244,254,241,251,262,244],
[235,231,240,0,246,238,247,240,237,247,249,238],
[229,236,241,254,0,234,247,256,248,241,257,238],
[234,245,248,262,266,0,235,253,256,250,260,254],
[244,246,256,253,253,265,0,256,265,235,262,243],
[237,243,246,260,244,247,244,0,251,245,256,232],
[233,249,259,263,252,244,235,249,0,241,255,242],
[246,247,249,253,259,250,265,255,259,0,260,242],
[226,233,238,251,243,240,238,244,245,240,0,238],
[250,260,256,262,262,246,257,268,258,258,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 117, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,220,237,241,250,249,271,252,229,227,240],
[269,0,248,252,257,259,262,273,265,226,251,264],
[280,252,0,268,261,259,262,270,263,233,248,250],
[263,248,232,0,250,266,243,282,261,233,245,250],
[259,243,239,250,0,265,248,276,260,212,246,242],
[250,241,241,234,235,0,243,256,236,228,233,232],
[251,238,238,257,252,257,0,277,271,234,239,244],
[229,227,230,218,224,244,223,0,234,225,214,230],
[248,235,237,239,240,264,229,266,0,232,218,242],
[271,274,267,267,288,272,266,275,268,0,234,275],
[273,249,252,255,254,267,261,286,282,266,0,252],
[260,236,250,250,258,268,256,270,258,225,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 118, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,248,240,229,239,238,244,241,248,256,278],
[225,0,249,232,238,236,211,236,230,221,241,247],
[252,251,0,240,243,239,206,273,230,218,248,246],
[260,268,260,0,253,257,254,263,242,264,254,251],
[271,262,257,247,0,232,228,270,232,240,234,253],
[261,264,261,243,268,0,245,270,260,264,252,270],
[262,289,294,246,272,255,0,276,272,262,268,281],
[256,264,227,237,230,230,224,0,232,220,227,251],
[259,270,270,258,268,240,228,268,0,258,267,281],
[252,279,282,236,260,236,238,280,242,0,255,274],
[244,259,252,246,266,248,232,273,233,245,0,254],
[222,253,254,249,247,230,219,249,219,226,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 119, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,243,269,258,230,246,265,289,273,271,257],
[232,0,237,278,280,263,288,251,250,270,333,271],
[257,263,0,300,277,262,293,279,243,233,270,294],
[231,222,200,0,205,239,238,298,248,216,228,259],
[242,220,223,295,0,221,233,272,267,251,250,268],
[270,237,238,261,279,0,278,237,280,254,286,288],
[254,212,207,262,267,222,0,285,282,285,223,259],
[235,249,221,202,228,263,215,0,212,277,245,282],
[211,250,257,252,233,220,218,288,0,262,246,250],
[227,230,267,284,249,246,215,223,238,0,295,236],
[229,167,230,272,250,214,277,255,254,205,0,241],
[243,229,206,241,232,212,241,218,250,264,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 120, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,238,248,256,248,251,244,232,251,245,228],
[223,0,222,260,221,224,253,218,227,232,226,205],
[262,278,0,269,241,264,258,242,255,253,251,255],
[252,240,231,0,254,213,251,243,234,244,240,228],
[244,279,259,246,0,248,285,241,249,265,249,239],
[252,276,236,287,252,0,247,248,238,275,255,231],
[249,247,242,249,215,253,0,226,233,235,233,221],
[256,282,258,257,259,252,274,0,242,241,241,245],
[268,273,245,266,251,262,267,258,0,265,255,265],
[249,268,247,256,235,225,265,259,235,0,249,229],
[255,274,249,260,251,245,267,259,245,251,0,250],
[272,295,245,272,261,269,279,255,235,271,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 121, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,257,243,269,257,253,272,255,270,280,256],
[270,0,250,252,271,273,253,267,257,284,292,264],
[243,250,0,242,262,237,252,275,261,271,270,259],
[257,248,258,0,253,266,245,265,252,271,264,261],
[231,229,238,247,0,244,239,246,251,256,276,235],
[243,227,263,234,256,0,257,257,265,271,286,255],
[247,247,248,255,261,243,0,278,267,273,285,269],
[228,233,225,235,254,243,222,0,239,243,250,257],
[245,243,239,248,249,235,233,261,0,252,273,246],
[230,216,229,229,244,229,227,257,248,0,263,244],
[220,208,230,236,224,214,215,250,227,237,0,231],
[244,236,241,239,265,245,231,243,254,256,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 122, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,226,256,229,277,203,265,235,295,258,254],
[226,0,197,249,224,236,189,239,227,207,221,215],
[274,303,0,289,251,268,260,262,258,241,261,227],
[244,251,211,0,232,267,202,238,250,246,226,194],
[271,276,249,268,0,313,267,261,245,283,275,291],
[223,264,232,233,187,0,222,239,231,295,255,198],
[297,311,240,298,233,278,0,314,255,279,319,197],
[235,261,238,262,239,261,186,0,170,249,248,229],
[265,273,242,250,255,269,245,330,0,308,224,245],
[205,293,259,254,217,205,221,251,192,0,234,196],
[242,279,239,274,225,245,181,252,276,266,0,235],
[246,285,273,306,209,302,303,271,255,304,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 123, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,238,222,249,247,233,228,227,241,242,233],
[258,0,246,264,251,249,264,266,240,249,266,240],
[262,254,0,255,263,265,266,250,259,265,273,257],
[278,236,245,0,264,261,265,262,255,261,274,262],
[251,249,237,236,0,245,249,251,234,253,262,245],
[253,251,235,239,255,0,258,245,234,244,251,249],
[267,236,234,235,251,242,0,258,232,250,259,250],
[272,234,250,238,249,255,242,0,242,240,246,248],
[273,260,241,245,266,266,268,258,0,272,265,265],
[259,251,235,239,247,256,250,260,228,0,261,227],
[258,234,227,226,238,249,241,254,235,239,0,242],
[267,260,243,238,255,251,250,252,235,273,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 124, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,292,252,295,283,309,325,258,261,249,311],
[258,0,280,279,239,280,279,253,261,235,257,270],
[208,220,0,213,254,218,272,245,241,218,230,219],
[248,221,287,0,300,242,332,245,292,256,238,260],
[205,261,246,200,0,202,256,220,251,233,206,223],
[217,220,282,258,298,0,259,262,235,276,238,279],
[191,221,228,168,244,241,0,191,154,227,179,238],
[175,247,255,255,280,238,309,0,241,239,244,269],
[242,239,259,208,249,265,346,259,0,272,231,267],
[239,265,282,244,267,224,273,261,228,0,261,276],
[251,243,270,262,294,262,321,256,269,239,0,273],
[189,230,281,240,277,221,262,231,233,224,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 125, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,269,286,238,265,282,252,260,257,250,289],
[205,0,227,220,227,255,260,253,242,238,261,221],
[231,273,0,255,239,245,270,247,222,262,270,255],
[214,280,245,0,266,261,257,254,247,254,266,222],
[262,273,261,234,0,240,277,258,269,279,249,247],
[235,245,255,239,260,0,263,244,250,260,260,265],
[218,240,230,243,223,237,0,221,231,254,261,239],
[248,247,253,246,242,256,279,0,287,255,262,257],
[240,258,278,253,231,250,269,213,0,253,247,267],
[243,262,238,246,221,240,246,245,247,0,256,259],
[250,239,230,234,251,240,239,238,253,244,0,240],
[211,279,245,278,253,235,261,243,233,241,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 126, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,261,250,281,249,245,243,258,257,253,248],
[251,0,260,244,280,252,249,241,263,249,271,251],
[239,240,0,229,243,234,235,227,249,238,241,238],
[250,256,271,0,267,254,249,236,261,243,266,239],
[219,220,257,233,0,239,241,223,241,238,243,227],
[251,248,266,246,261,0,253,244,251,234,246,246],
[255,251,265,251,259,247,0,244,255,253,255,238],
[257,259,273,264,277,256,256,0,250,253,274,251],
[242,237,251,239,259,249,245,250,0,248,255,232],
[243,251,262,257,262,266,247,247,252,0,251,232],
[247,229,259,234,257,254,245,226,245,249,0,248],
[252,249,262,261,273,254,262,249,268,268,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 127, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,238,276,226,240,259,242,254,271,236,280],
[248,0,237,265,232,227,236,221,260,257,241,257],
[262,263,0,256,247,234,245,253,268,261,232,242],
[224,235,244,0,231,243,232,247,266,269,241,253],
[274,268,253,269,0,257,295,240,297,267,237,290],
[260,273,266,257,243,0,241,260,272,272,259,246],
[241,264,255,268,205,259,0,229,279,268,260,274],
[258,279,247,253,260,240,271,0,269,277,260,273],
[246,240,232,234,203,228,221,231,0,251,237,267],
[229,243,239,231,233,228,232,223,249,0,241,244],
[264,259,268,259,263,241,240,240,263,259,0,268],
[220,243,258,247,210,254,226,227,233,256,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 128, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,241,244,236,229,247,240,240,246,243,247],
[231,0,226,235,232,222,221,214,211,227,219,229],
[259,274,0,241,238,238,249,248,242,243,230,238],
[256,265,259,0,245,261,247,239,239,257,224,260],
[264,268,262,255,0,244,244,257,248,275,237,250],
[271,278,262,239,256,0,254,252,263,255,245,254],
[253,279,251,253,256,246,0,234,251,267,250,235],
[260,286,252,261,243,248,266,0,245,272,251,260],
[260,289,258,261,252,237,249,255,0,264,243,250],
[254,273,257,243,225,245,233,228,236,0,241,252],
[257,281,270,276,263,255,250,249,257,259,0,245],
[253,271,262,240,250,246,265,240,250,248,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 129, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,227,240,225,231,249,244,241,215,233,244],
[263,0,239,264,241,243,242,275,251,252,248,267],
[273,261,0,250,235,250,248,263,249,249,237,246],
[260,236,250,0,236,254,256,251,258,227,242,267],
[275,259,265,264,0,257,248,265,264,249,259,265],
[269,257,250,246,243,0,261,251,240,231,255,261],
[251,258,252,244,252,239,0,263,249,240,253,271],
[256,225,237,249,235,249,237,0,242,245,250,252],
[259,249,251,242,236,260,251,258,0,251,258,259],
[285,248,251,273,251,269,260,255,249,0,275,268],
[267,252,263,258,241,245,247,250,242,225,0,254],
[256,233,254,233,235,239,229,248,241,232,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 130, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,277,253,271,259,265,247,286,268,253,280],
[246,0,235,241,226,228,216,239,249,234,228,238],
[223,265,0,259,258,255,253,266,273,242,243,265],
[247,259,241,0,239,238,246,247,270,262,252,269],
[229,274,242,261,0,240,231,255,259,228,248,250],
[241,272,245,262,260,0,222,256,258,258,264,255],
[235,284,247,254,269,278,0,252,270,261,247,270],
[253,261,234,253,245,244,248,0,254,256,245,252],
[214,251,227,230,241,242,230,246,0,253,262,255],
[232,266,258,238,272,242,239,244,247,0,229,237],
[247,272,257,248,252,236,253,255,238,271,0,248],
[220,262,235,231,250,245,230,248,245,263,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 131, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,250,276,271,253,252,253,260,274,262,244],
[238,0,237,248,252,230,245,250,247,245,251,231],
[250,263,0,265,275,252,273,255,255,272,261,237],
[224,252,235,0,260,227,252,252,248,260,255,222],
[229,248,225,240,0,221,251,242,237,246,255,218],
[247,270,248,273,279,0,270,264,258,263,279,252],
[248,255,227,248,249,230,0,238,232,266,251,247],
[247,250,245,248,258,236,262,0,250,276,273,249],
[240,253,245,252,263,242,268,250,0,259,255,242],
[226,255,228,240,254,237,234,224,241,0,258,232],
[238,249,239,245,245,221,249,227,245,242,0,228],
[256,269,263,278,282,248,253,251,258,268,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 132, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,232,231,232,252,226,275,262,290,193,217],
[306,0,212,223,241,285,214,226,228,249,149,201],
[268,288,0,261,202,272,243,285,281,290,295,252],
[269,277,239,0,227,261,239,325,216,280,263,299],
[268,259,298,273,0,327,239,340,268,261,231,319],
[248,215,228,239,173,0,219,297,153,261,133,255],
[274,286,257,261,261,281,0,294,241,361,216,258],
[225,274,215,175,160,203,206,0,151,185,136,205],
[238,272,219,284,232,347,259,349,0,340,205,256],
[210,251,210,220,239,239,139,315,160,0,172,288],
[307,351,205,237,269,367,284,364,295,328,0,396],
[283,299,248,201,181,245,242,295,244,212,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 133, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,279,242,248,241,258,212,253,248,224,263],
[259,0,284,242,255,228,264,240,243,268,271,281],
[221,216,0,240,248,194,253,218,203,231,226,219],
[258,258,260,0,254,253,258,236,275,230,252,270],
[252,245,252,246,0,239,250,230,252,246,237,253],
[259,272,306,247,261,0,273,269,275,273,221,240],
[242,236,247,242,250,227,0,226,223,229,221,242],
[288,260,282,264,270,231,274,0,264,249,254,247],
[247,257,297,225,248,225,277,236,0,251,269,261],
[252,232,269,270,254,227,271,251,249,0,236,246],
[276,229,274,248,263,279,279,246,231,264,0,272],
[237,219,281,230,247,260,258,253,239,254,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 134, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,254,258,251,252,260,264,253,266,252,241],
[240,0,254,226,239,249,247,250,233,244,244,223],
[246,246,0,232,209,235,234,216,253,232,243,230],
[242,274,268,0,235,240,266,255,244,235,255,265],
[249,261,291,265,0,275,276,259,257,252,284,244],
[248,251,265,260,225,0,252,250,245,239,269,244],
[240,253,266,234,224,248,0,229,241,257,237,230],
[236,250,284,245,241,250,271,0,248,254,259,249],
[247,267,247,256,243,255,259,252,0,243,254,257],
[234,256,268,265,248,261,243,246,257,0,234,233],
[248,256,257,245,216,231,263,241,246,266,0,241],
[259,277,270,235,256,256,270,251,243,267,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 135, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,275,217,228,269,235,250,248,262,237,231],
[275,0,298,236,258,262,276,254,255,232,240,246],
[225,202,0,213,232,240,235,258,233,214,219,213],
[283,264,287,0,264,293,288,242,269,285,270,274],
[272,242,268,236,0,259,264,266,261,259,273,248],
[231,238,260,207,241,0,248,242,254,227,241,245],
[265,224,265,212,236,252,0,239,234,270,280,253],
[250,246,242,258,234,258,261,0,260,258,240,229],
[252,245,267,231,239,246,266,240,0,260,242,236],
[238,268,286,215,241,273,230,242,240,0,214,236],
[263,260,281,230,227,259,220,260,258,286,0,219],
[269,254,287,226,252,255,247,271,264,264,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 136, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,137,217,269,127,184,79,234,179,154,210],
[300,0,311,250,437,281,226,121,250,358,311,106],
[363,189,0,282,179,142,220,158,281,314,153,179],
[283,250,218,0,334,147,220,157,239,187,203,89],
[231,63,321,166,0,102,173,42,102,326,101,84],
[373,219,358,353,398,0,408,303,390,308,282,277],
[316,274,280,280,327,92,0,166,140,296,249,153],
[421,379,342,343,458,197,334,0,244,421,421,179],
[266,250,219,261,398,110,360,256,0,308,282,234],
[321,142,186,313,174,192,204,79,192,0,174,174],
[346,189,347,297,399,218,251,79,218,326,0,194],
[290,394,321,411,416,223,347,321,266,326,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 137, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,265,275,269,243,280,279,270,262,266,280],
[216,0,268,248,249,253,270,261,243,267,251,264],
[235,232,0,258,235,238,272,256,226,242,226,263],
[225,252,242,0,252,217,244,247,253,249,242,223],
[231,251,265,248,0,245,284,259,245,240,226,256],
[257,247,262,283,255,0,301,265,248,252,270,259],
[220,230,228,256,216,199,0,233,220,188,207,210],
[221,239,244,253,241,235,267,0,238,244,233,234],
[230,257,274,247,255,252,280,262,0,261,247,261],
[238,233,258,251,260,248,312,256,239,0,256,270],
[234,249,274,258,274,230,293,267,253,244,0,247],
[220,236,237,277,244,241,290,266,239,230,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 138, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,243,245,255,246,243,238,243,251,228,268],
[257,0,231,254,270,257,257,263,254,253,231,265],
[257,269,0,261,266,267,250,283,253,264,253,263],
[255,246,239,0,270,276,246,254,249,265,238,266],
[245,230,234,230,0,242,235,245,217,245,214,250],
[254,243,233,224,258,0,251,247,246,244,235,241],
[257,243,250,254,265,249,0,269,260,272,229,243],
[262,237,217,246,255,253,231,0,224,240,230,243],
[257,246,247,251,283,254,240,276,0,252,229,263],
[249,247,236,235,255,256,228,260,248,0,225,253],
[272,269,247,262,286,265,271,270,271,275,0,277],
[232,235,237,234,250,259,257,257,237,247,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 139, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,264,256,253,241,245,240,258,258,254,261],
[257,0,262,249,251,248,255,246,257,240,256,248],
[236,238,0,230,224,232,243,229,230,232,239,235],
[244,251,270,0,251,260,250,251,260,242,249,264],
[247,249,276,249,0,253,266,234,250,235,241,258],
[259,252,268,240,247,0,263,248,266,245,243,256],
[255,245,257,250,234,237,0,248,245,243,224,248],
[260,254,271,249,266,252,252,0,251,248,253,260],
[242,243,270,240,250,234,255,249,0,242,247,245],
[242,260,268,258,265,255,257,252,258,0,252,258],
[246,244,261,251,259,257,276,247,253,248,0,252],
[239,252,265,236,242,244,252,240,255,242,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 140, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,244,277,271,235,242,220,244,264,292,279],
[233,0,250,234,228,231,235,248,250,249,276,286],
[256,250,0,238,210,236,199,213,241,218,244,250],
[223,266,262,0,239,255,227,235,237,257,278,261],
[229,272,290,261,0,235,236,237,260,250,269,253],
[265,269,264,245,265,0,223,261,220,273,286,272],
[258,265,301,273,264,277,0,243,259,253,278,274],
[280,252,287,265,263,239,257,0,244,287,315,288],
[256,250,259,263,240,280,241,256,0,253,268,267],
[236,251,282,243,250,227,247,213,247,0,287,277],
[208,224,256,222,231,214,222,185,232,213,0,233],
[221,214,250,239,247,228,226,212,233,223,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 141, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,294,230,272,247,294,268,287,230,287,232],
[249,0,273,237,245,244,246,234,224,226,256,239],
[206,227,0,189,219,241,205,230,250,222,203,176],
[270,263,311,0,259,236,291,251,278,213,278,264],
[228,255,281,241,0,210,245,259,260,252,266,258],
[253,256,259,264,290,0,238,268,256,259,247,250],
[206,254,295,209,255,262,0,239,247,217,250,213],
[232,266,270,249,241,232,261,0,298,240,295,236],
[213,276,250,222,240,244,253,202,0,229,250,199],
[270,274,278,287,248,241,283,260,271,0,278,250],
[213,244,297,222,234,253,250,205,250,222,0,203],
[268,261,324,236,242,250,287,264,301,250,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 142, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,237,246,272,249,264,256,270,259,263,256],
[248,0,228,244,253,253,239,258,264,257,258,239],
[263,272,0,254,277,257,249,260,285,267,269,248],
[254,256,246,0,275,253,248,260,255,258,257,231],
[228,247,223,225,0,248,246,259,237,238,233,238],
[251,247,243,247,252,0,241,251,258,277,270,239],
[236,261,251,252,254,259,0,256,252,264,264,244],
[244,242,240,240,241,249,244,0,248,245,262,246],
[230,236,215,245,263,242,248,252,0,246,247,224],
[241,243,233,242,262,223,236,255,254,0,233,236],
[237,242,231,243,267,230,236,238,253,267,0,240],
[244,261,252,269,262,261,256,254,276,264,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 143, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,234,203,246,282,282,237,271,251,237,232],
[239,0,270,217,257,231,277,224,250,241,227,255],
[266,230,0,237,242,267,261,254,284,227,246,234],
[297,283,263,0,306,313,292,253,247,262,228,289],
[254,243,258,194,0,257,259,236,248,267,248,242],
[218,269,233,187,243,0,255,224,233,212,191,242],
[218,223,239,208,241,245,0,236,230,201,216,226],
[263,276,246,247,264,276,264,0,241,227,246,271],
[229,250,216,253,252,267,270,259,0,243,245,236],
[249,259,273,238,233,288,299,273,257,0,251,282],
[263,273,254,272,252,309,284,254,255,249,0,254],
[268,245,266,211,258,258,274,229,264,218,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 144, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,196,227,223,185,246,232,196,162,305,263],
[237,0,206,163,253,279,159,267,221,165,226,224],
[304,294,0,192,246,237,321,321,200,225,304,310],
[273,337,308,0,320,344,308,285,254,277,229,271],
[277,247,254,180,0,230,278,288,217,249,305,300],
[315,221,263,156,270,0,223,231,209,207,257,212],
[254,341,179,192,222,277,0,243,269,237,260,342],
[268,233,179,215,212,269,257,0,223,215,293,340],
[304,279,300,246,283,291,231,277,0,269,318,280],
[338,335,275,223,251,293,263,285,231,0,304,279],
[195,274,196,271,195,243,240,207,182,196,0,242],
[237,276,190,229,200,288,158,160,220,221,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 145, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,250,240,244,238,234,252,245,290,275,259],
[266,0,249,242,251,253,244,238,229,280,260,244],
[250,251,0,230,254,240,202,238,235,271,249,239],
[260,258,270,0,239,252,240,244,252,266,244,257],
[256,249,246,261,0,262,245,220,241,279,247,239],
[262,247,260,248,238,0,210,220,228,260,250,253],
[266,256,298,260,255,290,0,247,245,283,269,263],
[248,262,262,256,280,280,253,0,260,277,259,258],
[255,271,265,248,259,272,255,240,0,297,263,262],
[210,220,229,234,221,240,217,223,203,0,238,226],
[225,240,251,256,253,250,231,241,237,262,0,243],
[241,256,261,243,261,247,237,242,238,274,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 146, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,289,299,290,246,275,262,262,302,278,271],
[222,0,261,278,249,238,230,270,238,252,262,237],
[211,239,0,250,272,267,232,255,267,267,249,244],
[201,222,250,0,228,208,211,242,256,262,245,228],
[210,251,228,272,0,224,225,271,283,301,242,281],
[254,262,233,292,276,0,241,287,315,291,293,272],
[225,270,268,289,275,259,0,258,278,278,285,263],
[238,230,245,258,229,213,242,0,255,255,251,276],
[238,262,233,244,217,185,222,245,0,270,220,225],
[198,248,233,238,199,209,222,245,230,0,212,217],
[222,238,251,255,258,207,215,249,280,288,0,265],
[229,263,256,272,219,228,237,224,275,283,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 147, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,273,242,196,249,248,283,260,240,284,271],
[263,0,305,267,210,281,273,276,288,244,283,275],
[227,195,0,264,201,231,185,261,277,202,247,249],
[258,233,236,0,220,234,273,280,275,245,264,238],
[304,290,299,280,0,242,267,274,280,233,284,267],
[251,219,269,266,258,0,246,275,288,210,271,253],
[252,227,315,227,233,254,0,283,306,211,290,239],
[217,224,239,220,226,225,217,0,214,202,236,233],
[240,212,223,225,220,212,194,286,0,207,247,260],
[260,256,298,255,267,290,289,298,293,0,270,242],
[216,217,253,236,216,229,210,264,253,230,0,216],
[229,225,251,262,233,247,261,267,240,258,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 148, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,254,239,264,252,260,244,245,251,247,234],
[256,0,261,258,254,249,273,250,261,268,257,266],
[246,239,0,253,255,251,239,238,244,256,238,228],
[261,242,247,0,268,251,231,234,236,262,244,250],
[236,246,245,232,0,247,226,230,263,257,240,231],
[248,251,249,249,253,0,256,233,257,246,241,238],
[240,227,261,269,274,244,0,246,228,257,247,261],
[256,250,262,266,270,267,254,0,258,293,243,238],
[255,239,256,264,237,243,272,242,0,265,243,241],
[249,232,244,238,243,254,243,207,235,0,279,234],
[253,243,262,256,260,259,253,257,257,221,0,238],
[266,234,272,250,269,262,239,262,259,266,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 149, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,241,270,235,264,211,229,257,272,264,276],
[249,0,242,261,219,253,229,242,247,235,253,266],
[259,258,0,267,258,263,256,252,281,259,248,299],
[230,239,233,0,216,228,228,256,245,238,254,269],
[265,281,242,284,0,249,254,290,298,268,285,265],
[236,247,237,272,251,0,228,230,253,249,215,293],
[289,271,244,272,246,272,0,264,263,297,292,301],
[271,258,248,244,210,270,236,0,267,237,273,260],
[243,253,219,255,202,247,237,233,0,236,242,233],
[228,265,241,262,232,251,203,263,264,0,243,291],
[236,247,252,246,215,285,208,227,258,257,0,300],
[224,234,201,231,235,207,199,240,267,209,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 150, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,263,300,288,248,230,256,295,251,296,289],
[227,0,225,247,284,226,222,228,226,186,257,267],
[237,275,0,288,285,230,261,267,271,204,240,289],
[200,253,212,0,220,186,214,165,188,190,249,265],
[212,216,215,280,0,194,233,218,219,196,247,240],
[252,274,270,314,306,0,253,285,244,241,308,261],
[270,278,239,286,267,247,0,258,226,217,288,288],
[244,272,233,335,282,215,242,0,277,229,279,288],
[205,274,229,312,281,256,274,223,0,229,290,251],
[249,314,296,310,304,259,283,271,271,0,339,303],
[204,243,260,251,253,192,212,221,210,161,0,212],
[211,233,211,235,260,239,212,212,249,197,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 151, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,231,241,229,243,232,218,243,247,220,237],
[277,0,241,249,238,231,242,258,247,258,244,249],
[269,259,0,226,260,260,255,268,256,245,250,258],
[259,251,274,0,251,253,230,238,247,254,231,258],
[271,262,240,249,0,250,266,271,266,274,237,273],
[257,269,240,247,250,0,235,256,246,250,239,245],
[268,258,245,270,234,265,0,250,264,264,225,265],
[282,242,232,262,229,244,250,0,253,265,226,256],
[257,253,244,253,234,254,236,247,0,267,227,262],
[253,242,255,246,226,250,236,235,233,0,224,252],
[280,256,250,269,263,261,275,274,273,276,0,273],
[263,251,242,242,227,255,235,244,238,248,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 152, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,255,239,253,268,242,243,251,253,261,256],
[233,0,238,243,236,263,227,241,238,234,234,236],
[245,262,0,249,248,257,253,263,274,256,256,244],
[261,257,251,0,243,280,269,249,267,265,263,241],
[247,264,252,257,0,277,253,240,263,247,253,262],
[232,237,243,220,223,0,231,230,238,229,250,224],
[258,273,247,231,247,269,0,238,266,244,255,253],
[257,259,237,251,260,270,262,0,253,254,255,247],
[249,262,226,233,237,262,234,247,0,244,248,236],
[247,266,244,235,253,271,256,246,256,0,255,258],
[239,266,244,237,247,250,245,245,252,245,0,243],
[244,264,256,259,238,276,247,253,264,242,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 153, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,253,238,228,237,237,243,239,262,245,248],
[267,0,260,238,257,247,257,241,263,274,270,252],
[247,240,0,240,257,233,253,238,248,270,252,244],
[262,262,260,0,262,253,252,251,258,274,262,249],
[272,243,243,238,0,238,253,240,254,267,248,246],
[263,253,267,247,262,0,266,243,249,278,257,253],
[263,243,247,248,247,234,0,241,261,274,245,240],
[257,259,262,249,260,257,259,0,261,269,250,255],
[261,237,252,242,246,251,239,239,0,278,249,236],
[238,226,230,226,233,222,226,231,222,0,241,229],
[255,230,248,238,252,243,255,250,251,259,0,255],
[252,248,256,251,254,247,260,245,264,271,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 154, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,250,244,253,271,245,248,234,254,274,243],
[239,0,214,230,217,249,221,242,231,231,266,235],
[250,286,0,249,243,296,262,266,241,264,265,268],
[256,270,251,0,281,279,259,268,243,264,293,268],
[247,283,257,219,0,269,234,271,227,258,291,257],
[229,251,204,221,231,0,218,256,230,237,255,248],
[255,279,238,241,266,282,0,259,256,251,272,273],
[252,258,234,232,229,244,241,0,235,245,261,246],
[266,269,259,257,273,270,244,265,0,254,289,277],
[246,269,236,236,242,263,249,255,246,0,262,268],
[226,234,235,207,209,245,228,239,211,238,0,235],
[257,265,232,232,243,252,227,254,223,232,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 155, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,268,258,217,210,222,221,193,203,208,271],
[290,0,303,245,260,234,254,254,227,212,291,290],
[232,197,0,230,235,163,204,214,192,202,209,243],
[242,255,270,0,247,231,252,193,206,210,263,256],
[283,240,265,253,0,237,229,279,254,223,259,307],
[290,266,337,269,263,0,228,259,269,222,301,325],
[278,246,296,248,271,272,0,272,243,231,318,304],
[279,246,286,307,221,241,228,0,251,245,210,284],
[307,273,308,294,246,231,257,249,0,256,289,328],
[297,288,298,290,277,278,269,255,244,0,292,312],
[292,209,291,237,241,199,182,290,211,208,0,259],
[229,210,257,244,193,175,196,216,172,188,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 156, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,250,235,251,266,249,245,251,241,254,263],
[237,0,238,237,242,251,235,238,241,252,232,252],
[250,262,0,245,256,261,258,261,256,243,236,268],
[265,263,255,0,255,279,274,265,250,261,249,272],
[249,258,244,245,0,273,263,252,267,260,242,264],
[234,249,239,221,227,0,235,234,249,233,235,251],
[251,265,242,226,237,265,0,252,256,250,231,251],
[255,262,239,235,248,266,248,0,260,248,241,265],
[249,259,244,250,233,251,244,240,0,239,233,248],
[259,248,257,239,240,267,250,252,261,0,236,253],
[246,268,264,251,258,265,269,259,267,264,0,269],
[237,248,232,228,236,249,249,235,252,247,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 157, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,250,260,260,239,245,254,268,251,232,258],
[251,0,225,244,248,225,265,236,258,249,242,251],
[250,275,0,276,250,253,262,257,270,263,267,269],
[240,256,224,0,239,244,239,260,246,252,235,246],
[240,252,250,261,0,244,245,261,253,248,237,248],
[261,275,247,256,256,0,250,247,262,255,246,255],
[255,235,238,261,255,250,0,247,257,235,244,256],
[246,264,243,240,239,253,253,0,249,245,242,248],
[232,242,230,254,247,238,243,251,0,238,264,253],
[249,251,237,248,252,245,265,255,262,0,254,256],
[268,258,233,265,263,254,256,258,236,246,0,254],
[242,249,231,254,252,245,244,252,247,244,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 158, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,282,284,265,248,266,254,256,280,271,261],
[232,0,282,241,264,244,245,231,243,247,249,247],
[218,218,0,223,260,233,229,220,231,245,246,237],
[216,259,277,0,255,244,244,267,279,249,284,263],
[235,236,240,245,0,256,259,239,264,255,274,243],
[252,256,267,256,244,0,241,254,242,241,233,266],
[234,255,271,256,241,259,0,275,244,261,277,249],
[246,269,280,233,261,246,225,0,243,254,238,246],
[244,257,269,221,236,258,256,257,0,254,252,241],
[220,253,255,251,245,259,239,246,246,0,266,261],
[229,251,254,216,226,267,223,262,248,234,0,232],
[239,253,263,237,257,234,251,254,259,239,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 159, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,223,227,220,229,233,222,224,225,238,235],
[264,0,233,264,255,251,241,260,247,243,275,268],
[277,267,0,241,266,262,261,241,254,235,259,269],
[273,236,259,0,255,258,255,269,241,242,270,254],
[280,245,234,245,0,254,247,246,235,240,253,265],
[271,249,238,242,246,0,243,246,243,239,253,252],
[267,259,239,245,253,257,0,234,254,253,261,265],
[278,240,259,231,254,254,266,0,252,245,253,259],
[276,253,246,259,265,257,246,248,0,247,252,257],
[275,257,265,258,260,261,247,255,253,0,275,267],
[262,225,241,230,247,247,239,247,248,225,0,257],
[265,232,231,246,235,248,235,241,243,233,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 160, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,263,238,255,236,259,260,244,244,240,258],
[250,0,261,244,252,252,254,256,254,252,266,259],
[237,239,0,232,245,257,235,242,227,242,250,235],
[262,256,268,0,248,255,233,255,254,244,243,245],
[245,248,255,252,0,252,265,260,252,246,254,260],
[264,248,243,245,248,0,251,268,247,241,244,250],
[241,246,265,267,235,249,0,250,250,252,241,239],
[240,244,258,245,240,232,250,0,255,256,239,241],
[256,246,273,246,248,253,250,245,0,254,260,255],
[256,248,258,256,254,259,248,244,246,0,239,255],
[260,234,250,257,246,256,259,261,240,261,0,248],
[242,241,265,255,240,250,261,259,245,245,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 161, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,237,221,230,252,244,259,244,253,263,229],
[258,0,256,239,275,240,238,253,252,262,260,215],
[263,244,0,236,250,253,252,257,244,243,273,249],
[279,261,264,0,276,273,249,288,276,276,283,255],
[270,225,250,224,0,244,240,246,232,217,242,236],
[248,260,247,227,256,0,248,245,235,252,262,216],
[256,262,248,251,260,252,0,265,260,267,270,248],
[241,247,243,212,254,255,235,0,226,244,273,232],
[256,248,256,224,268,265,240,274,0,253,272,242],
[247,238,257,224,283,248,233,256,247,0,269,225],
[237,240,227,217,258,238,230,227,228,231,0,223],
[271,285,251,245,264,284,252,268,258,275,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 162, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,269,246,257,251,244,260,243,258,275,252],
[261,0,275,240,263,242,252,282,256,258,271,261],
[231,225,0,249,267,230,230,264,245,240,249,241],
[254,260,251,0,270,245,240,290,258,265,275,272],
[243,237,233,230,0,233,234,251,231,247,259,251],
[249,258,270,255,267,0,258,285,266,255,280,266],
[256,248,270,260,266,242,0,284,248,260,265,248],
[240,218,236,210,249,215,216,0,227,237,250,232],
[257,244,255,242,269,234,252,273,0,263,279,262],
[242,242,260,235,253,245,240,263,237,0,257,227],
[225,229,251,225,241,220,235,250,221,243,0,245],
[248,239,259,228,249,234,252,268,238,273,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 163, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,235,235,254,238,253,234,269,257,243,269],
[261,0,259,245,237,255,263,260,275,274,254,258],
[265,241,0,247,249,251,259,252,257,266,241,251],
[265,255,253,0,250,258,266,258,283,264,270,244],
[246,263,251,250,0,257,269,252,274,274,245,259],
[262,245,249,242,243,0,274,256,258,249,262,250],
[247,237,241,234,231,226,0,255,246,253,240,241],
[266,240,248,242,248,244,245,0,252,264,259,259],
[231,225,243,217,226,242,254,248,0,256,244,243],
[243,226,234,236,226,251,247,236,244,0,250,237],
[257,246,259,230,255,238,260,241,256,250,0,254],
[231,242,249,256,241,250,259,241,257,263,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 164, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,208,274,225,240,213,237,254,237,261,233],
[257,0,240,235,243,251,232,271,241,236,276,235],
[292,260,0,249,246,264,240,267,257,254,299,260],
[226,265,251,0,240,223,229,249,244,244,277,235],
[275,257,254,260,0,255,249,273,249,250,259,232],
[260,249,236,277,245,0,254,266,239,227,300,246],
[287,268,260,271,251,246,0,248,243,252,257,254],
[263,229,233,251,227,234,252,0,220,222,268,246],
[246,259,243,256,251,261,257,280,0,249,270,240],
[263,264,246,256,250,273,248,278,251,0,273,250],
[239,224,201,223,241,200,243,232,230,227,0,199],
[267,265,240,265,268,254,246,254,260,250,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 165, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,269,250,239,262,268,245,254,250,249,259],
[259,0,246,236,253,233,269,247,246,247,248,249],
[231,254,0,250,250,246,262,251,256,251,243,265],
[250,264,250,0,258,253,265,264,237,256,238,274],
[261,247,250,242,0,249,255,267,248,262,255,244],
[238,267,254,247,251,0,280,245,264,244,257,237],
[232,231,238,235,245,220,0,236,224,235,225,259],
[255,253,249,236,233,255,264,0,245,256,223,257],
[246,254,244,263,252,236,276,255,0,256,254,250],
[250,253,249,244,238,256,265,244,244,0,253,250],
[251,252,257,262,245,243,275,277,246,247,0,259],
[241,251,235,226,256,263,241,243,250,250,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 166, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,231,233,218,200,216,227,206,242,239,262],
[304,0,288,319,253,258,253,282,220,242,300,292],
[269,212,0,259,255,207,224,248,210,232,317,295],
[267,181,241,0,220,210,216,225,204,206,298,244],
[282,247,245,280,0,232,213,269,234,272,291,281],
[300,242,293,290,268,0,271,292,252,256,281,301],
[284,247,276,284,287,229,0,281,240,281,291,272],
[273,218,252,275,231,208,219,0,212,247,297,277],
[294,280,290,296,266,248,260,288,0,295,324,315],
[258,258,268,294,228,244,219,253,205,0,312,284],
[261,200,183,202,209,219,209,203,176,188,0,243],
[238,208,205,256,219,199,228,223,185,216,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 167, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,294,228,229,246,250,270,239,235,238,287],
[316,0,283,253,270,255,247,254,263,280,262,305],
[206,217,0,254,227,247,202,255,211,247,224,265],
[272,247,246,0,266,253,250,266,263,237,234,263],
[271,230,273,234,0,279,216,258,211,251,265,253],
[254,245,253,247,221,0,238,273,253,241,210,267],
[250,253,298,250,284,262,0,253,235,272,255,242],
[230,246,245,234,242,227,247,0,246,257,234,236],
[261,237,289,237,289,247,265,254,0,271,242,248],
[265,220,253,263,249,259,228,243,229,0,216,267],
[262,238,276,266,235,290,245,266,258,284,0,296],
[213,195,235,237,247,233,258,264,252,233,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 168, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,274,191,364,199,284,228,266,301,332,266],
[205,0,229,144,182,152,269,181,208,307,296,208],
[226,271,0,95,261,85,336,175,170,194,264,283],
[309,356,405,0,393,145,381,320,145,365,272,244],
[136,318,239,107,0,115,239,186,175,319,239,274],
[301,348,415,355,385,0,476,299,219,319,381,379],
[216,231,164,119,261,24,0,186,131,167,258,110],
[272,319,325,180,314,201,314,0,187,251,325,360],
[234,292,330,355,325,281,369,313,0,274,370,350],
[199,193,306,135,181,181,333,249,226,0,290,286],
[168,204,236,228,261,119,242,175,130,210,0,235],
[234,292,217,256,226,121,390,140,150,214,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 169, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,253,237,234,245,266,253,249,236,277,273],
[245,0,223,240,238,239,252,227,239,254,249,260],
[247,277,0,243,241,235,257,216,239,238,251,254],
[263,260,257,0,266,247,250,240,260,286,253,277],
[266,262,259,234,0,240,274,234,261,262,266,272],
[255,261,265,253,260,0,276,251,266,248,270,290],
[234,248,243,250,226,224,0,219,268,247,231,266],
[247,273,284,260,266,249,281,0,273,255,273,271],
[251,261,261,240,239,234,232,227,0,241,270,263],
[264,246,262,214,238,252,253,245,259,0,266,250],
[223,251,249,247,234,230,269,227,230,234,0,266],
[227,240,246,223,228,210,234,229,237,250,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 170, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,272,245,259,276,249,247,245,248,260,234],
[234,0,281,252,250,267,239,255,237,248,229,234],
[228,219,0,247,241,214,244,209,221,220,237,198],
[255,248,253,0,242,240,236,224,213,252,264,223],
[241,250,259,258,0,230,250,235,227,217,244,233],
[224,233,286,260,270,0,274,251,240,247,221,215],
[251,261,256,264,250,226,0,233,242,260,233,238],
[253,245,291,276,265,249,267,0,252,277,272,254],
[255,263,279,287,273,260,258,248,0,246,250,234],
[252,252,280,248,283,253,240,223,254,0,258,235],
[240,271,263,236,256,279,267,228,250,242,0,218],
[266,266,302,277,267,285,262,246,266,265,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 171, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,239,235,244,232,232,241,246,243,260,228],
[258,0,269,268,258,258,239,250,240,267,254,249],
[261,231,0,247,245,230,239,246,230,270,238,221],
[265,232,253,0,261,239,242,263,249,265,239,270],
[256,242,255,239,0,242,242,259,244,256,247,244],
[268,242,270,261,258,0,241,252,253,256,250,247],
[268,261,261,258,258,259,0,260,243,273,268,255],
[259,250,254,237,241,248,240,0,253,274,254,246],
[254,260,270,251,256,247,257,247,0,264,246,264],
[257,233,230,235,244,244,227,226,236,0,239,246],
[240,246,262,261,253,250,232,246,254,261,0,246],
[272,251,279,230,256,253,245,254,236,254,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 172, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,245,272,260,268,290,277,255,276,213,219],
[264,0,255,294,258,285,303,272,240,172,223,200],
[255,245,0,255,335,280,271,251,221,240,252,199],
[228,206,245,0,275,284,258,251,203,220,189,228],
[240,242,165,225,0,239,277,209,172,223,235,167],
[232,215,220,216,261,0,232,221,201,203,210,208],
[210,197,229,242,223,268,0,228,172,195,194,218],
[223,228,249,249,291,279,272,0,230,274,247,216],
[245,260,279,297,328,299,328,270,0,270,256,291],
[224,328,260,280,277,297,305,226,230,0,247,234],
[287,277,248,311,265,290,306,253,244,253,0,231],
[281,300,301,272,333,292,282,284,209,266,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 173, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,247,229,238,228,225,253,264,243,245,253],
[262,0,252,252,257,250,244,252,251,263,256,260],
[253,248,0,245,245,218,216,265,255,239,251,260],
[271,248,255,0,254,249,252,265,254,252,241,259],
[262,243,255,246,0,240,233,262,250,251,259,262],
[272,250,282,251,260,0,244,267,258,261,271,257],
[275,256,284,248,267,256,0,284,271,249,262,268],
[247,248,235,235,238,233,216,0,248,236,237,254],
[236,249,245,246,250,242,229,252,0,242,252,254],
[257,237,261,248,249,239,251,264,258,0,252,262],
[255,244,249,259,241,229,238,263,248,248,0,242],
[247,240,240,241,238,243,232,246,246,238,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 174, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,205,229,236,218,217,212,219,219,232,226],
[275,0,282,244,284,269,259,265,272,260,261,257],
[295,218,0,235,261,263,221,239,226,228,265,262],
[271,256,265,0,283,241,244,232,228,234,252,233],
[264,216,239,217,0,251,238,263,212,243,243,259],
[282,231,237,259,249,0,253,251,230,244,260,257],
[283,241,279,256,262,247,0,245,226,272,253,260],
[288,235,261,268,237,249,255,0,220,256,291,225],
[281,228,274,272,288,270,274,280,0,261,286,287],
[281,240,272,266,257,256,228,244,239,0,256,272],
[268,239,235,248,257,240,247,209,214,244,0,244],
[274,243,238,267,241,243,240,275,213,228,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 175, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,240,248,251,262,247,290,279,287,273,288],
[222,0,226,249,287,292,253,292,270,299,293,267],
[260,274,0,239,289,311,267,304,298,301,308,294],
[252,251,261,0,288,257,244,290,249,292,278,260],
[249,213,211,212,0,208,229,253,254,246,257,243],
[238,208,189,243,292,0,242,230,267,251,233,244],
[253,247,233,256,271,258,0,276,274,257,264,253],
[210,208,196,210,247,270,224,0,245,259,210,214],
[221,230,202,251,246,233,226,255,0,238,233,259],
[213,201,199,208,254,249,243,241,262,0,253,262],
[227,207,192,222,243,267,236,290,267,247,0,247],
[212,233,206,240,257,256,247,286,241,238,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 176, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,272,252,236,228,241,254,267,241,259,237],
[270,0,284,275,277,270,250,252,279,240,270,277],
[228,216,0,252,216,245,236,238,234,242,225,243],
[248,225,248,0,220,238,222,238,247,227,239,240],
[264,223,284,280,0,265,241,238,276,268,256,247],
[272,230,255,262,235,0,239,253,260,232,262,233],
[259,250,264,278,259,261,0,257,267,261,283,245],
[246,248,262,262,262,247,243,0,264,238,254,265],
[233,221,266,253,224,240,233,236,0,245,241,237],
[259,260,258,273,232,268,239,262,255,0,260,256],
[241,230,275,261,244,238,217,246,259,240,0,234],
[263,223,257,260,253,267,255,235,263,244,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 177, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,268,276,304,302,261,307,290,249,314,344],
[206,0,254,264,259,313,225,293,245,271,217,345],
[232,246,0,280,310,277,258,312,245,238,247,268],
[224,236,220,0,297,285,249,286,196,279,217,302],
[196,241,190,203,0,240,217,208,203,197,231,293],
[198,187,223,215,260,0,158,255,177,203,161,244],
[239,275,242,251,283,342,0,303,253,233,249,298],
[193,207,188,214,292,245,197,0,224,228,161,276],
[210,255,255,304,297,323,247,276,0,244,284,322],
[251,229,262,221,303,297,267,272,256,0,247,277],
[186,283,253,283,269,339,251,339,216,253,0,323],
[156,155,232,198,207,256,202,224,178,223,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 178, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,256,233,255,250,233,253,247,244,254,252],
[257,0,248,249,254,282,229,231,246,257,247,261],
[244,252,0,235,248,279,233,226,251,259,244,262],
[267,251,265,0,252,279,249,258,239,257,274,262],
[245,246,252,248,0,270,240,246,246,262,244,255],
[250,218,221,221,230,0,224,235,232,234,229,250],
[267,271,267,251,260,276,0,249,264,265,261,266],
[247,269,274,242,254,265,251,0,244,259,252,261],
[253,254,249,261,254,268,236,256,0,258,262,255],
[256,243,241,243,238,266,235,241,242,0,246,253],
[246,253,256,226,256,271,239,248,238,254,0,277],
[248,239,238,238,245,250,234,239,245,247,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 179, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,245,270,238,252,235,236,241,246,251,233],
[262,0,259,266,247,248,246,251,237,254,252,247],
[255,241,0,262,233,246,246,218,240,240,249,214],
[230,234,238,0,226,231,231,223,219,234,220,225],
[262,253,267,274,0,265,261,250,252,249,258,264],
[248,252,254,269,235,0,242,239,240,233,240,237],
[265,254,254,269,239,258,0,238,246,261,267,255],
[264,249,282,277,250,261,262,0,252,250,255,262],
[259,263,260,281,248,260,254,248,0,252,255,258],
[254,246,260,266,251,267,239,250,248,0,261,245],
[249,248,251,280,242,260,233,245,245,239,0,249],
[267,253,286,275,236,263,245,238,242,255,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 180, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,269,300,353,270,295,287,352,257,232,283],
[244,0,222,258,307,223,316,276,307,209,259,272],
[231,278,0,271,354,226,268,305,309,217,249,218],
[200,242,229,0,289,182,226,211,270,184,199,212],
[147,193,146,211,0,174,193,206,232,160,176,155],
[230,277,274,318,326,0,312,289,335,254,292,285],
[205,184,232,274,307,188,0,248,241,228,212,212],
[213,224,195,289,294,211,252,0,282,238,237,287],
[148,193,191,230,268,165,259,218,0,162,144,204],
[243,291,283,316,340,246,272,262,338,0,238,270],
[268,241,251,301,324,208,288,263,356,262,0,279],
[217,228,282,288,345,215,288,213,296,230,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 181, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,235,232,252,232,250,227,267,241,226,248],
[265,0,257,251,248,243,251,250,265,254,240,247],
[265,243,0,260,251,248,272,256,275,248,253,262],
[268,249,240,0,262,244,267,254,269,250,251,261],
[248,252,249,238,0,247,252,260,260,251,236,261],
[268,257,252,256,253,0,256,249,272,245,251,266],
[250,249,228,233,248,244,0,244,257,244,234,244],
[273,250,244,246,240,251,256,0,268,240,249,255],
[233,235,225,231,240,228,243,232,0,231,242,253],
[259,246,252,250,249,255,256,260,269,0,246,256],
[274,260,247,249,264,249,266,251,258,254,0,251],
[252,253,238,239,239,234,256,245,247,244,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 182, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,232,223,235,219,242,247,262,245,256,244],
[249,0,241,231,211,213,223,230,239,222,223,231],
[268,259,0,264,249,241,276,244,280,259,265,272],
[277,269,236,0,270,237,266,247,294,250,283,255],
[265,289,251,230,0,247,246,268,251,254,274,275],
[281,287,259,263,253,0,231,293,261,246,260,265],
[258,277,224,234,254,269,0,251,268,249,242,268],
[253,270,256,253,232,207,249,0,276,252,248,281],
[238,261,220,206,249,239,232,224,0,227,212,236],
[255,278,241,250,246,254,251,248,273,0,266,258],
[244,277,235,217,226,240,258,252,288,234,0,265],
[256,269,228,245,225,235,232,219,264,242,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 183, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,278,253,251,219,380,234,296,286,263,334],
[247,0,276,212,269,255,294,242,261,237,273,302],
[222,224,0,189,209,277,273,191,208,287,275,219],
[247,288,311,0,259,269,316,332,276,313,319,250],
[249,231,291,241,0,283,366,224,282,343,311,298],
[281,245,223,231,217,0,316,189,249,303,302,213],
[120,206,227,184,134,184,0,129,224,233,219,212],
[266,258,309,168,276,311,371,0,337,308,344,195],
[204,239,292,224,218,251,276,163,0,216,262,276],
[214,263,213,187,157,197,267,192,284,0,203,248],
[237,227,225,181,189,198,281,156,238,297,0,255],
[166,198,281,250,202,287,288,305,224,252,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 184, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,310,304,317,320,285,270,305,280,278,248],
[231,0,270,273,285,307,230,252,274,265,273,246],
[190,230,0,258,255,295,220,257,207,285,226,224],
[196,227,242,0,234,305,205,219,268,255,259,247],
[183,215,245,266,0,241,208,209,186,258,216,226],
[180,193,205,195,259,0,176,172,224,214,208,175],
[215,270,280,295,292,324,0,265,265,284,290,272],
[230,248,243,281,291,328,235,0,272,285,246,217],
[195,226,293,232,314,276,235,228,0,237,287,244],
[220,235,215,245,242,286,216,215,263,0,221,231],
[222,227,274,241,284,292,210,254,213,279,0,212],
[252,254,276,253,274,325,228,283,256,269,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 185, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,294,288,271,248,237,289,302,311,275,290],
[210,0,285,232,248,231,224,289,257,274,266,287],
[206,215,0,201,244,201,227,216,228,272,237,236],
[212,268,299,0,278,245,249,298,294,300,275,274],
[229,252,256,222,0,220,274,276,266,273,268,291],
[252,269,299,255,280,0,262,275,260,309,268,246],
[263,276,273,251,226,238,0,269,277,289,261,286],
[211,211,284,202,224,225,231,0,250,259,234,281],
[198,243,272,206,234,240,223,250,0,271,253,279],
[189,226,228,200,227,191,211,241,229,0,231,253],
[225,234,263,225,232,232,239,266,247,269,0,253],
[210,213,264,226,209,254,214,219,221,247,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 186, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,218,238,225,265,244,251,238,235,256,226],
[252,0,213,245,249,261,237,262,240,228,245,250],
[282,287,0,248,247,276,259,283,257,259,281,276],
[262,255,252,0,253,252,237,267,237,256,263,251],
[275,251,253,247,0,281,256,261,270,258,257,252],
[235,239,224,248,219,0,220,247,223,240,235,245],
[256,263,241,263,244,280,0,262,261,256,247,263],
[249,238,217,233,239,253,238,0,236,237,225,247],
[262,260,243,263,230,277,239,264,0,248,255,244],
[265,272,241,244,242,260,244,263,252,0,233,251],
[244,255,219,237,243,265,253,275,245,267,0,253],
[274,250,224,249,248,255,237,253,256,249,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 187, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,248,229,265,248,248,259,246,236,250,263],
[262,0,243,256,279,254,245,288,257,261,258,267],
[252,257,0,237,262,252,245,274,249,249,253,256],
[271,244,263,0,276,266,246,268,267,232,285,262],
[235,221,238,224,0,236,255,251,240,232,246,247],
[252,246,248,234,264,0,255,277,252,242,257,250],
[252,255,255,254,245,245,0,261,257,249,249,260],
[241,212,226,232,249,223,239,0,247,217,242,251],
[254,243,251,233,260,248,243,253,0,241,259,251],
[264,239,251,268,268,258,251,283,259,0,271,260],
[250,242,247,215,254,243,251,258,241,229,0,249],
[237,233,244,238,253,250,240,249,249,240,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 188, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,253,259,254,250,276,215,288,277,286,242],
[249,0,273,263,262,249,276,240,276,274,272,258],
[247,227,0,256,248,229,282,224,253,248,259,223],
[241,237,244,0,247,226,266,218,262,258,248,236],
[246,238,252,253,0,246,267,256,253,269,246,255],
[250,251,271,274,254,0,272,244,262,259,248,254],
[224,224,218,234,233,228,0,197,242,257,228,211],
[285,260,276,282,244,256,303,0,275,270,273,257],
[212,224,247,238,247,238,258,225,0,254,241,246],
[223,226,252,242,231,241,243,230,246,0,230,234],
[214,228,241,252,254,252,272,227,259,270,0,233],
[258,242,277,264,245,246,289,243,254,266,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 189, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,239,260,261,249,270,245,251,265,250,260],
[256,0,252,248,248,273,250,260,242,271,274,260],
[261,248,0,252,253,252,253,260,241,275,243,280],
[240,252,248,0,246,233,228,262,252,260,251,279],
[239,252,247,254,0,241,246,261,250,259,258,260],
[251,227,248,267,259,0,243,261,248,265,253,265],
[230,250,247,272,254,257,0,257,252,237,250,258],
[255,240,240,238,239,239,243,0,243,263,253,261],
[249,258,259,248,250,252,248,257,0,257,262,274],
[235,229,225,240,241,235,263,237,243,0,254,270],
[250,226,257,249,242,247,250,247,238,246,0,267],
[240,240,220,221,240,235,242,239,226,230,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 190, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,249,257,271,275,265,261,255,251,275,263],
[246,0,252,250,264,282,260,259,254,247,267,278],
[251,248,0,248,265,287,258,247,256,252,263,260],
[243,250,252,0,258,262,259,260,258,252,279,256],
[229,236,235,242,0,265,246,261,255,232,251,252],
[225,218,213,238,235,0,232,241,230,238,243,239],
[235,240,242,241,254,268,0,248,248,250,261,258],
[239,241,253,240,239,259,252,0,238,239,260,233],
[245,246,244,242,245,270,252,262,0,240,278,260],
[249,253,248,248,268,262,250,261,260,0,269,256],
[225,233,237,221,249,257,239,240,222,231,0,257],
[237,222,240,244,248,261,242,267,240,244,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 191, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,186,197,198,188,202,201,201,242,235,216],
[274,0,231,270,224,248,250,235,190,258,236,232],
[314,269,0,255,229,251,244,263,249,297,266,264],
[303,230,245,0,279,245,274,256,193,256,240,258],
[302,276,271,221,0,248,244,239,231,279,280,260],
[312,252,249,255,252,0,238,270,235,265,275,260],
[298,250,256,226,256,262,0,247,277,266,260,237],
[299,265,237,244,261,230,253,0,216,281,283,283],
[299,310,251,307,269,265,223,284,0,254,249,297],
[258,242,203,244,221,235,234,219,246,0,253,276],
[265,264,234,260,220,225,240,217,251,247,0,290],
[284,268,236,242,240,240,263,217,203,224,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 192, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,245,237,221,250,242,257,231,241,245,245],
[264,0,260,270,252,251,268,275,246,255,258,254],
[255,240,0,261,237,235,255,268,237,255,241,253],
[263,230,239,0,227,250,250,255,233,250,239,239],
[279,248,263,273,0,256,277,272,250,288,264,270],
[250,249,265,250,244,0,264,270,250,260,261,269],
[258,232,245,250,223,236,0,260,215,235,236,238],
[243,225,232,245,228,230,240,0,226,253,229,233],
[269,254,263,267,250,250,285,274,0,261,257,243],
[259,245,245,250,212,240,265,247,239,0,237,245],
[255,242,259,261,236,239,264,271,243,263,0,257],
[255,246,247,261,230,231,262,267,257,255,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 193, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,277,295,257,275,276,273,274,250,238,237],
[266,0,255,270,260,275,253,281,269,218,245,279],
[223,245,0,251,250,255,232,253,255,206,238,260],
[205,230,249,0,236,276,241,269,283,237,216,247],
[243,240,250,264,0,282,250,285,280,228,252,257],
[225,225,245,224,218,0,241,291,239,230,238,238],
[224,247,268,259,250,259,0,278,263,219,236,249],
[227,219,247,231,215,209,222,0,225,194,250,236],
[226,231,245,217,220,261,237,275,0,234,215,242],
[250,282,294,263,272,270,281,306,266,0,263,289],
[262,255,262,284,248,262,264,250,285,237,0,261],
[263,221,240,253,243,262,251,264,258,211,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 194, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,249,242,258,245,245,247,256,239,260,245],
[256,0,251,272,256,262,265,268,277,242,267,234],
[251,249,0,255,263,250,262,253,266,252,267,245],
[258,228,245,0,256,255,268,249,262,245,265,246],
[242,244,237,244,0,247,249,246,264,240,261,238],
[255,238,250,245,253,0,253,256,264,238,252,236],
[255,235,238,232,251,247,0,237,260,245,260,243],
[253,232,247,251,254,244,263,0,265,241,264,251],
[244,223,234,238,236,236,240,235,0,227,247,230],
[261,258,248,255,260,262,255,259,273,0,265,246],
[240,233,233,235,239,248,240,236,253,235,0,224],
[255,266,255,254,262,264,257,249,270,254,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 195, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,230,275,228,218,255,231,229,249,244,272],
[280,0,252,275,250,239,280,260,257,262,234,273],
[270,248,0,274,241,260,266,264,254,261,256,300],
[225,225,226,0,228,205,239,229,226,238,238,262],
[272,250,259,272,0,245,265,238,245,260,249,269],
[282,261,240,295,255,0,282,262,253,279,245,290],
[245,220,234,261,235,218,0,238,249,242,250,262],
[269,240,236,271,262,238,262,0,247,260,244,288],
[271,243,246,274,255,247,251,253,0,247,261,284],
[251,238,239,262,240,221,258,240,253,0,245,274],
[256,266,244,262,251,255,250,256,239,255,0,287],
[228,227,200,238,231,210,238,212,216,226,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 196, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,270,246,310,273,295,263,293,252,263,287],
[226,0,265,225,268,239,279,250,285,236,273,272],
[230,235,0,235,269,232,257,276,253,239,240,263],
[254,275,265,0,276,245,285,258,282,245,264,269],
[190,232,231,224,0,224,255,235,243,195,226,229],
[227,261,268,255,276,0,269,236,282,240,270,270],
[205,221,243,215,245,231,0,229,230,233,229,267],
[237,250,224,242,265,264,271,0,293,278,270,242],
[207,215,247,218,257,218,270,207,0,207,249,255],
[248,264,261,255,305,260,267,222,293,0,266,279],
[237,227,260,236,274,230,271,230,251,234,0,242],
[213,228,237,231,271,230,233,258,245,221,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 197, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,261,247,250,268,246,247,255,259,262,236],
[275,0,267,261,263,271,278,267,272,252,264,242],
[239,233,0,231,259,260,258,254,252,249,258,222],
[253,239,269,0,239,256,275,284,280,260,257,252],
[250,237,241,261,0,244,267,251,267,260,246,248],
[232,229,240,244,256,0,260,240,274,247,244,229],
[254,222,242,225,233,240,0,254,234,266,254,252],
[253,233,246,216,249,260,246,0,271,243,243,225],
[245,228,248,220,233,226,266,229,0,231,237,244],
[241,248,251,240,240,253,234,257,269,0,257,243],
[238,236,242,243,254,256,246,257,263,243,0,247],
[264,258,278,248,252,271,248,275,256,257,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 198, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,232,228,223,248,231,217,235,231,255,241],
[258,0,256,248,237,272,257,249,246,261,251,262],
[268,244,0,240,239,262,252,235,254,246,240,262],
[272,252,260,0,253,276,258,252,248,255,262,264],
[277,263,261,247,0,278,275,266,258,267,272,268],
[252,228,238,224,222,0,228,223,233,262,246,241],
[269,243,248,242,225,272,0,243,250,255,253,256],
[283,251,265,248,234,277,257,0,251,264,274,263],
[265,254,246,252,242,267,250,249,0,255,269,260],
[269,239,254,245,233,238,245,236,245,0,256,250],
[245,249,260,238,228,254,247,226,231,244,0,247],
[259,238,238,236,232,259,244,237,240,250,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 199, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,248,246,253,256,263,261,266,258,259,246],
[240,0,245,247,260,250,263,261,259,255,256,238],
[252,255,0,255,276,265,247,263,265,266,265,257],
[254,253,245,0,264,254,262,260,260,260,271,245],
[247,240,224,236,0,244,226,237,246,241,244,220],
[244,250,235,246,256,0,256,246,250,244,264,238],
[237,237,253,238,274,244,0,263,256,255,256,241],
[239,239,237,240,263,254,237,0,245,245,253,224],
[234,241,235,240,254,250,244,255,0,239,245,224],
[242,245,234,240,259,256,245,255,261,0,255,236],
[241,244,235,229,256,236,244,247,255,245,0,245],
[254,262,243,255,280,262,259,276,276,264,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([12, 500, 200, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebbrcw/mebbrcw_12_500.csv", index=False, header=False)
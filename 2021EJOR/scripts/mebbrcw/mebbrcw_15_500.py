
import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg

rep = 1
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,249,245,259,269,257,261,257,250,254,238,256,264,273,252],
[251,0,258,253,254,253,263,246,234,249,245,251,268,262,236],
[255,242,0,246,257,266,248,261,235,280,262,254,285,260,253],
[241,247,254,0,250,256,260,254,242,262,249,259,267,250,260],
[231,246,243,250,0,250,249,245,245,240,240,246,255,247,244],
[243,247,234,244,250,0,247,248,232,247,242,256,274,236,253],
[239,237,252,240,251,253,0,240,239,255,233,246,264,231,243],
[243,254,239,246,255,252,260,0,238,263,242,258,269,249,240],
[250,266,265,258,255,268,261,262,0,268,262,271,290,269,259],
[246,251,220,238,260,253,245,237,232,0,236,248,267,242,221],
[262,255,238,251,260,258,267,258,238,264,0,263,280,262,261],
[244,249,246,241,254,244,254,242,229,252,237,0,266,231,237],
[236,232,215,233,245,226,236,231,210,233,220,234,0,239,237],
[227,238,240,250,253,264,269,251,231,258,238,269,261,0,230],
[248,264,247,240,256,247,257,260,241,279,239,263,263,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 1, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,262,272,283,240,258,268,275,256,250,261,263,273,265],
[235,0,237,258,268,245,231,254,250,247,249,244,254,264,255],
[238,263,0,240,263,246,232,262,232,258,233,252,257,261,249],
[228,242,260,0,263,243,248,252,253,238,250,243,256,254,261],
[217,232,237,237,0,232,237,247,247,264,221,234,251,251,228],
[260,255,254,257,268,0,246,260,248,255,249,269,254,278,264],
[242,269,268,252,263,254,0,261,270,267,263,264,278,276,265],
[232,246,238,248,253,240,239,0,253,238,254,236,256,261,253],
[225,250,268,247,253,252,230,247,0,233,215,230,261,249,239],
[244,253,242,262,236,245,233,262,267,0,241,266,256,264,260],
[250,251,267,250,279,251,237,246,285,259,0,262,258,276,244],
[239,256,248,257,266,231,236,264,270,234,238,0,256,258,266],
[237,246,243,244,249,246,222,244,239,244,242,244,0,244,249],
[227,236,239,246,249,222,224,239,251,236,224,242,256,0,231],
[235,245,251,239,272,236,235,247,261,240,256,234,251,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 2, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,264,265,261,231,238,259,256,256,255,244,258,255,246],
[248,0,267,258,234,233,236,257,246,238,256,247,248,237,249],
[236,233,0,247,244,222,227,235,257,232,239,250,244,243,241],
[235,242,253,0,252,228,237,248,241,237,241,244,240,241,226],
[239,266,256,248,0,225,241,250,245,252,255,234,240,252,230],
[269,267,278,272,275,0,255,261,266,257,266,247,272,264,253],
[262,264,273,263,259,245,0,269,265,252,254,238,248,271,253],
[241,243,265,252,250,239,231,0,248,233,242,245,260,253,243],
[244,254,243,259,255,234,235,252,0,251,240,245,252,255,255],
[244,262,268,263,248,243,248,267,249,0,259,261,261,259,252],
[245,244,261,259,245,234,246,258,260,241,0,251,258,256,252],
[256,253,250,256,266,253,262,255,255,239,249,0,232,247,248],
[242,252,256,260,260,228,252,240,248,239,242,268,0,250,242],
[245,263,257,259,248,236,229,247,245,241,244,253,250,0,240],
[254,251,259,274,270,247,247,257,245,248,248,252,258,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 3, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,263,239,246,236,235,277,280,256,214,272,241,272,253],
[269,0,260,269,262,246,276,308,297,249,271,236,271,282,277],
[237,240,0,218,233,264,235,264,269,240,226,256,248,254,277],
[261,231,282,0,271,254,259,296,257,240,246,280,262,264,261],
[254,238,267,229,0,256,224,276,263,221,244,258,248,244,258],
[264,254,236,246,244,0,256,295,274,238,280,269,225,270,270],
[265,224,265,241,276,244,0,283,261,235,282,248,264,273,262],
[223,192,236,204,224,205,217,0,223,216,242,218,215,218,255],
[220,203,231,243,237,226,239,277,0,227,225,244,251,263,259],
[244,251,260,260,279,262,265,284,273,0,237,271,247,262,246],
[286,229,274,254,256,220,218,258,275,263,0,240,259,282,282],
[228,264,244,220,242,231,252,282,256,229,260,0,227,253,259],
[259,229,252,238,252,275,236,285,249,253,241,273,0,269,263],
[228,218,246,236,256,230,227,282,237,238,218,247,231,0,234],
[247,223,223,239,242,230,238,245,241,254,218,241,237,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 4, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,239,255,250,249,228,229,262,253,236,251,248,263,240],
[252,0,236,250,228,252,254,239,245,245,243,259,248,257,244],
[261,264,0,253,251,257,250,240,245,267,262,256,259,249,263],
[245,250,247,0,237,250,246,242,269,264,239,244,247,259,254],
[250,272,249,263,0,242,254,253,264,271,244,244,264,251,258],
[251,248,243,250,258,0,258,247,251,247,234,244,251,249,257],
[272,246,250,254,246,242,0,253,268,261,241,260,260,261,254],
[271,261,260,258,247,253,247,0,253,261,241,261,260,267,258],
[238,255,255,231,236,249,232,247,0,253,224,248,241,246,234],
[247,255,233,236,229,253,239,239,247,0,230,239,250,252,243],
[264,257,238,261,256,266,259,259,276,270,0,254,261,265,259],
[249,241,244,256,256,256,240,239,252,261,246,0,244,257,246],
[252,252,241,253,236,249,240,240,259,250,239,256,0,256,238],
[237,243,251,241,249,251,239,233,254,248,235,243,244,0,249],
[260,256,237,246,242,243,246,242,266,257,241,254,262,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 5, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,246,267,248,225,244,256,271,274,261,255,249,272,268],
[256,0,233,248,263,248,246,248,256,276,258,250,251,269,256],
[254,267,0,263,257,227,276,270,273,269,262,254,253,261,264],
[233,252,237,0,249,242,248,263,254,270,240,255,261,257,262],
[252,237,243,251,0,249,246,253,240,260,241,239,266,254,255],
[275,252,273,258,251,0,266,262,273,284,248,297,285,270,280],
[256,254,224,252,254,234,0,266,260,249,234,253,233,270,262],
[244,252,230,237,247,238,234,0,262,250,244,237,257,257,256],
[229,244,227,246,260,227,240,238,0,257,243,250,252,250,256],
[226,224,231,230,240,216,251,250,243,0,221,267,236,252,227],
[239,242,238,260,259,252,266,256,257,279,0,272,247,255,266],
[245,250,246,245,261,203,247,263,250,233,228,0,260,260,244],
[251,249,247,239,234,215,267,243,248,264,253,240,0,270,260],
[228,231,239,243,246,230,230,243,250,248,245,240,230,0,282],
[232,244,236,238,245,220,238,244,244,273,234,256,240,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 6, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,245,251,238,280,267,251,248,263,273,248,267,271,234],
[235,0,242,269,265,276,244,270,254,239,250,258,269,268,272],
[255,258,0,268,264,276,247,277,270,236,279,243,268,253,261],
[249,231,232,0,242,279,256,262,253,257,276,264,259,243,264],
[262,235,236,258,0,274,243,263,255,249,269,247,249,251,253],
[220,224,224,221,226,0,227,233,239,227,253,238,238,234,245],
[233,256,253,244,257,273,0,272,253,245,265,258,264,258,272],
[249,230,223,238,237,267,228,0,235,225,255,234,254,241,249],
[252,246,230,247,245,261,247,265,0,240,280,242,262,259,261],
[237,261,264,243,251,273,255,275,260,0,287,266,266,252,270],
[227,250,221,224,231,247,235,245,220,213,0,226,234,247,241],
[252,242,257,236,253,262,242,266,258,234,274,0,262,265,263],
[233,231,232,241,251,262,236,246,238,234,266,238,0,268,249],
[229,232,247,257,249,266,242,259,241,248,253,235,232,0,249],
[266,228,239,236,247,255,228,251,239,230,259,237,251,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 7, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,244,294,251,236,255,232,232,270,270,233,276,247,267],
[256,0,230,271,240,246,264,248,232,241,258,242,292,239,269],
[256,270,0,283,287,278,258,251,231,260,282,235,269,251,262],
[206,229,217,0,216,202,241,213,206,231,236,222,253,205,228],
[249,260,213,284,0,262,246,255,230,234,254,247,293,227,263],
[264,254,222,298,238,0,262,251,228,273,279,241,283,234,262],
[245,236,242,259,254,238,0,231,214,232,258,247,227,218,246],
[268,252,249,287,245,249,269,0,232,245,262,245,269,267,269],
[268,268,269,294,270,272,286,268,0,245,289,271,266,258,274],
[230,259,240,269,266,227,268,255,255,0,286,257,261,256,277],
[230,242,218,264,246,221,242,238,211,214,0,244,241,239,226],
[267,258,265,278,253,259,253,255,229,243,256,0,266,241,274],
[224,208,231,247,207,217,273,231,234,239,259,234,0,207,252],
[253,261,249,295,273,266,282,233,242,244,261,259,293,0,273],
[233,231,238,272,237,238,254,231,226,223,274,226,248,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 8, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,237,272,258,241,249,243,250,269,255,244,255,236,263],
[255,0,250,268,253,247,237,261,258,276,261,253,244,245,261],
[263,250,0,282,258,272,250,261,257,272,270,254,255,254,254],
[228,232,218,0,234,244,243,248,247,266,244,251,244,235,246],
[242,247,242,266,0,263,239,247,247,266,240,249,236,236,270],
[259,253,228,256,237,0,220,244,253,269,240,242,239,228,247],
[251,263,250,257,261,280,0,248,251,284,266,251,261,246,248],
[257,239,239,252,253,256,252,0,250,267,253,259,240,236,253],
[250,242,243,253,253,247,249,250,0,275,275,275,253,243,246],
[231,224,228,234,234,231,216,233,225,0,226,231,213,215,235],
[245,239,230,256,260,260,234,247,225,274,0,242,244,236,233],
[256,247,246,249,251,258,249,241,225,269,258,0,237,238,250],
[245,256,245,256,264,261,239,260,247,287,256,263,0,235,250],
[264,255,246,265,264,272,254,264,257,285,264,262,265,0,257],
[237,239,246,254,230,253,252,247,254,265,267,250,250,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 9, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,235,227,240,249,240,257,215,249,220,255,249,229,221],
[275,0,255,243,235,279,255,265,222,265,254,294,282,248,249],
[265,245,0,254,261,252,260,253,248,258,254,278,264,273,254],
[273,257,246,0,273,276,252,274,251,275,229,254,283,272,231],
[260,265,239,227,0,250,250,258,221,250,239,251,259,238,234],
[251,221,248,224,250,0,233,249,215,225,223,240,245,230,223],
[260,245,240,248,250,267,0,253,226,241,238,256,260,250,253],
[243,235,247,226,242,251,247,0,232,243,213,254,256,247,207],
[285,278,252,249,279,285,274,268,0,277,249,256,262,258,253],
[251,235,242,225,250,275,259,257,223,0,219,242,275,233,232],
[280,246,246,271,261,277,262,287,251,281,0,258,259,268,256],
[245,206,222,246,249,260,244,246,244,258,242,0,266,232,223],
[251,218,236,217,241,255,240,244,238,225,241,234,0,248,221],
[271,252,227,228,262,270,250,253,242,267,232,268,252,0,241],
[279,251,246,269,266,277,247,293,247,268,244,277,279,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 10, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,245,231,222,279,272,234,280,223,226,256,234,262,271],
[266,0,259,243,272,295,277,239,287,254,245,258,264,269,248],
[255,241,0,231,236,265,260,240,258,240,243,241,239,261,246],
[269,257,269,0,267,278,293,258,281,241,230,266,253,259,276],
[278,228,264,233,0,282,278,257,292,250,257,262,261,295,261],
[221,205,235,222,218,0,230,234,261,237,229,222,216,231,231],
[228,223,240,207,222,270,0,229,254,226,233,202,236,235,238],
[266,261,260,242,243,266,271,0,293,260,268,269,270,272,264],
[220,213,242,219,208,239,246,207,0,246,237,213,218,241,214],
[277,246,260,259,250,263,274,240,254,0,251,244,259,286,270],
[274,255,257,270,243,271,267,232,263,249,0,246,254,298,244],
[244,242,259,234,238,278,298,231,287,256,254,0,281,265,275],
[266,236,261,247,239,284,264,230,282,241,246,219,0,235,245],
[238,231,239,241,205,269,265,228,259,214,202,235,265,0,212],
[229,252,254,224,239,269,262,236,286,230,256,225,255,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 11, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,250,204,227,239,245,224,230,219,258,237,246,228,210],
[237,0,248,213,253,255,234,235,222,234,252,234,242,253,230],
[250,252,0,218,225,245,228,225,218,243,226,235,238,243,220],
[296,287,282,0,260,282,261,250,234,241,261,284,299,267,240],
[273,247,275,240,0,265,248,243,253,241,245,266,271,266,240],
[261,245,255,218,235,0,260,202,221,234,217,240,249,253,227],
[255,266,272,239,252,240,0,230,209,237,247,260,239,248,236],
[276,265,275,250,257,298,270,0,261,260,287,277,286,294,258],
[270,278,282,266,247,279,291,239,0,271,282,267,279,275,241],
[281,266,257,259,259,266,263,240,229,0,259,280,260,267,265],
[242,248,274,239,255,283,253,213,218,241,0,241,241,254,229],
[263,266,265,216,234,260,240,223,233,220,259,0,250,226,242],
[254,258,262,201,229,251,261,214,221,240,259,250,0,246,228],
[272,247,257,233,234,247,252,206,225,233,246,274,254,0,253],
[290,270,280,260,260,273,264,242,259,235,271,258,272,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 12, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,233,239,238,267,236,233,224,266,212,245,254,249,214],
[289,0,276,250,290,276,263,265,275,275,228,256,294,286,251],
[267,224,0,219,236,309,250,244,227,259,225,245,283,267,231],
[261,250,281,0,275,284,234,251,224,274,264,256,288,278,232],
[262,210,264,225,0,304,249,283,247,246,218,240,287,277,241],
[233,224,191,216,196,0,230,231,212,239,204,223,257,252,200],
[264,237,250,266,251,270,0,213,224,258,239,253,272,251,216],
[267,235,256,249,217,269,287,0,268,261,214,207,278,265,244],
[276,225,273,276,253,288,276,232,0,272,239,285,297,268,256],
[234,225,241,226,254,261,242,239,228,0,219,261,275,249,205],
[288,272,275,236,282,296,261,286,261,281,0,259,280,277,264],
[255,244,255,244,260,277,247,293,215,239,241,0,274,265,240],
[246,206,217,212,213,243,228,222,203,225,220,226,0,223,211],
[251,214,233,222,223,248,249,235,232,251,223,235,277,0,232],
[286,249,269,268,259,300,284,256,244,295,236,260,289,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 13, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,268,253,254,252,249,294,238,260,266,252,235,246,240],
[261,0,286,254,255,279,237,283,243,262,254,254,247,255,249],
[232,214,0,215,232,241,236,265,226,227,255,241,217,198,244],
[247,246,285,0,268,256,229,266,260,269,273,273,252,259,245],
[246,245,268,232,0,276,238,274,251,248,261,256,245,226,256],
[248,221,259,244,224,0,234,266,237,240,219,241,242,225,233],
[251,263,264,271,262,266,0,280,249,274,252,271,250,251,226],
[206,217,235,234,226,234,220,0,227,241,218,224,188,193,217],
[262,257,274,240,249,263,251,273,0,271,251,251,212,213,223],
[240,238,273,231,252,260,226,259,229,0,261,262,233,224,216],
[234,246,245,227,239,281,248,282,249,239,0,244,237,238,216],
[248,246,259,227,244,259,229,276,249,238,256,0,233,234,268],
[265,253,283,248,255,258,250,312,288,267,263,267,0,247,242],
[254,245,302,241,274,275,249,307,287,276,262,266,253,0,247],
[260,251,256,255,244,267,274,283,277,284,284,232,258,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 14, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,268,275,257,268,244,280,268,261,261,275,296,268,270],
[206,0,221,230,238,233,236,228,237,237,230,237,239,235,252],
[232,279,0,272,262,258,229,265,260,256,254,268,268,262,248],
[225,270,228,0,273,247,224,242,274,231,238,248,265,224,243],
[243,262,238,227,0,230,238,262,248,254,251,250,247,263,246],
[232,267,242,253,270,0,233,259,262,230,244,248,266,241,253],
[256,264,271,276,262,267,0,267,262,241,254,264,268,259,271],
[220,272,235,258,238,241,233,0,248,241,236,269,254,247,236],
[232,263,240,226,252,238,238,252,0,244,231,247,245,229,256],
[239,263,244,269,246,270,259,259,256,0,263,273,274,255,275],
[239,270,246,262,249,256,246,264,269,237,0,269,263,242,259],
[225,263,232,252,250,252,236,231,253,227,231,0,238,250,236],
[204,261,232,235,253,234,232,246,255,226,237,262,0,244,257],
[232,265,238,276,237,259,241,253,271,245,258,250,256,0,257],
[230,248,252,257,254,247,229,264,244,225,241,264,243,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 15, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,239,219,242,237,241,224,219,227,226,224,247,229,234],
[274,0,225,220,235,233,246,231,210,218,214,212,245,240,234],
[261,275,0,250,257,255,263,235,250,253,268,245,283,267,246],
[281,280,250,0,243,250,245,260,232,239,257,221,267,245,246],
[258,265,243,257,0,241,262,235,242,272,253,220,256,257,245],
[263,267,245,250,259,0,244,247,253,256,245,254,264,245,252],
[259,254,237,255,238,256,0,243,252,234,236,227,262,243,239],
[276,269,265,240,265,253,257,0,249,250,256,238,268,260,264],
[281,290,250,268,258,247,248,251,0,266,248,241,274,268,252],
[273,282,247,261,228,244,266,250,234,0,248,222,272,255,246],
[274,286,232,243,247,255,264,244,252,252,0,233,273,259,243],
[276,288,255,279,280,246,273,262,259,278,267,0,280,252,268],
[253,255,217,233,244,236,238,232,226,228,227,220,0,228,237],
[271,260,233,255,243,255,257,240,232,245,241,248,272,0,254],
[266,266,254,254,255,248,261,236,248,254,257,232,263,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 16, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,262,277,240,270,245,249,268,269,264,253,256,266,251],
[248,0,257,273,254,224,272,234,258,243,264,268,266,283,251],
[238,243,0,262,269,243,247,230,241,249,277,265,270,250,244],
[223,227,238,0,247,220,232,250,227,225,276,257,232,242,246],
[260,246,231,253,0,232,261,212,236,232,246,243,252,250,238],
[230,276,257,280,268,0,255,252,263,247,248,254,260,253,265],
[255,228,253,268,239,245,0,239,234,265,268,207,253,271,237],
[251,266,270,250,288,248,261,0,259,235,261,243,252,282,256],
[232,242,259,273,264,237,266,241,0,241,266,244,270,272,252],
[231,257,251,275,268,253,235,265,259,0,293,236,274,255,262],
[236,236,223,224,254,252,232,239,234,207,0,228,251,233,238],
[247,232,235,243,257,246,293,257,256,264,272,0,267,258,277],
[244,234,230,268,248,240,247,248,230,226,249,233,0,244,243],
[234,217,250,258,250,247,229,218,228,245,267,242,256,0,246],
[249,249,256,254,262,235,263,244,248,238,262,223,257,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 17, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,279,276,266,283,274,244,229,273,240,238,253,261,285],
[226,0,255,272,253,266,260,248,227,261,242,219,240,266,272],
[221,245,0,234,250,257,221,257,216,253,226,205,251,225,264],
[224,228,266,0,254,263,241,235,231,258,245,217,243,208,268],
[234,247,250,246,0,236,254,257,227,259,250,209,233,231,236],
[217,234,243,237,264,0,236,220,226,243,219,226,223,250,232],
[226,240,279,259,246,264,0,246,225,256,259,236,257,240,257],
[256,252,243,265,243,280,254,0,234,269,242,226,258,262,251],
[271,273,284,269,273,274,275,266,0,287,268,253,246,275,283],
[227,239,247,242,241,257,244,231,213,0,235,218,254,246,255],
[260,258,274,255,250,281,241,258,232,265,0,244,273,241,265],
[262,281,295,283,291,274,264,274,247,282,256,0,265,281,290],
[247,260,249,257,267,277,243,242,254,246,227,235,0,238,278],
[239,234,275,292,269,250,260,238,225,254,259,219,262,0,274],
[215,228,236,232,264,268,243,249,217,245,235,210,222,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 18, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,234,235,239,183,225,242,216,228,221,248,239,190,240],
[277,0,230,231,287,250,265,263,217,288,267,240,265,245,283],
[266,270,0,296,300,274,277,274,224,287,270,297,285,250,268],
[265,269,204,0,284,227,253,279,202,227,253,243,249,239,234],
[261,213,200,216,0,208,255,234,224,238,202,223,229,221,262],
[317,250,226,273,292,0,297,291,240,262,271,258,279,255,265],
[275,235,223,247,245,203,0,237,199,249,219,255,254,205,247],
[258,237,226,221,266,209,263,0,220,262,220,248,225,231,243],
[284,283,276,298,276,260,301,280,0,265,251,286,266,249,270],
[272,212,213,273,262,238,251,238,235,0,245,240,247,225,239],
[279,233,230,247,298,229,281,280,249,255,0,231,232,232,255],
[252,260,203,257,277,242,245,252,214,260,269,0,246,208,260],
[261,235,215,251,271,221,246,275,234,253,268,254,0,233,281],
[310,255,250,261,279,245,295,269,251,275,268,292,267,0,275],
[260,217,232,266,238,235,253,257,230,261,245,240,219,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 19, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,244,235,242,259,254,226,248,257,236,256,254,233,248],
[257,0,266,261,251,279,260,231,238,254,264,241,249,279,261],
[256,234,0,230,248,256,256,206,237,248,244,243,231,260,232],
[265,239,270,0,237,272,262,260,258,239,249,249,223,253,254],
[258,249,252,263,0,278,260,253,248,258,247,257,238,253,252],
[241,221,244,228,222,0,231,225,238,203,237,245,245,245,218],
[246,240,244,238,240,269,0,231,235,251,250,258,245,249,243],
[274,269,294,240,247,275,269,0,267,257,261,264,248,269,243],
[252,262,263,242,252,262,265,233,0,254,246,272,248,267,274],
[243,246,252,261,242,297,249,243,246,0,254,255,254,264,236],
[264,236,256,251,253,263,250,239,254,246,0,241,247,239,262],
[244,259,257,251,243,255,242,236,228,245,259,0,241,242,223],
[246,251,269,277,262,255,255,252,252,246,253,259,0,274,272],
[267,221,240,247,247,255,251,231,233,236,261,258,226,0,251],
[252,239,268,246,248,282,257,257,226,264,238,277,228,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 20, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,256,270,267,272,252,267,248,265,256,254,250,277,270],
[229,0,249,235,249,252,230,235,227,221,221,240,231,263,256],
[244,251,0,232,250,271,243,261,236,241,235,280,253,286,256],
[230,265,268,0,268,259,251,256,255,257,236,268,252,303,280],
[233,251,250,232,0,259,235,259,231,242,246,261,232,260,267],
[228,248,229,241,241,0,240,244,223,220,231,246,227,256,254],
[248,270,257,249,265,260,0,262,227,238,253,244,254,271,264],
[233,265,239,244,241,256,238,0,237,226,243,248,226,274,235],
[252,273,264,245,269,277,273,263,0,253,238,280,256,273,261],
[235,279,259,243,258,280,262,274,247,0,258,268,259,294,271],
[244,279,265,264,254,269,247,257,262,242,0,251,241,269,282],
[246,260,220,232,239,254,256,252,220,232,249,0,230,259,247],
[250,269,247,248,268,273,246,274,244,241,259,270,0,280,253],
[223,237,214,197,240,244,229,226,227,206,231,241,220,0,231],
[230,244,244,220,233,246,236,265,239,229,218,253,247,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 21, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,287,294,298,232,258,339,217,263,262,253,262,281,300],
[243,0,259,237,256,238,255,302,260,292,279,233,226,269,288],
[213,241,0,272,208,190,259,311,249,263,246,222,271,261,269],
[206,263,228,0,239,182,272,316,228,239,250,217,248,269,235],
[202,244,292,261,0,189,269,301,280,213,249,271,242,267,266],
[268,262,310,318,311,0,242,356,260,234,293,258,310,298,252],
[242,245,241,228,231,258,0,298,216,236,256,305,251,233,243],
[161,198,189,184,199,144,202,0,158,216,180,196,240,237,195],
[283,240,251,272,220,240,284,342,0,262,282,264,272,281,275],
[237,208,237,261,287,266,264,284,238,0,282,298,226,291,261],
[238,221,254,250,251,207,244,320,218,218,0,244,218,245,295],
[247,267,278,283,229,242,195,304,236,202,256,0,241,228,263],
[238,274,229,252,258,190,249,260,228,274,282,259,0,269,231],
[219,231,239,231,233,202,267,263,219,209,255,272,231,0,239],
[200,212,231,265,234,248,257,305,225,239,205,237,269,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 22, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,234,224,216,223,231,230,215,244,260,254,223,239,240],
[243,0,173,214,244,200,200,209,239,237,245,206,239,227,216],
[266,327,0,273,273,251,261,260,272,274,272,271,237,271,275],
[276,286,227,0,222,238,238,230,225,266,255,223,229,244,225],
[284,256,227,278,0,210,231,250,213,223,248,244,226,224,229],
[277,300,249,262,290,0,250,254,237,263,301,246,252,264,253],
[269,300,239,262,269,250,0,257,266,251,307,266,263,250,241],
[270,291,240,270,250,246,243,0,253,245,291,269,214,272,261],
[285,261,228,275,287,263,234,247,0,270,294,267,263,250,228],
[256,263,226,234,277,237,249,255,230,0,288,258,240,259,245],
[240,255,228,245,252,199,193,209,206,212,0,242,227,241,211],
[246,294,229,277,256,254,234,231,233,242,258,0,272,244,244],
[277,261,263,271,274,248,237,286,237,260,273,228,0,246,255],
[261,273,229,256,276,236,250,228,250,241,259,256,254,0,251],
[260,284,225,275,271,247,259,239,272,255,289,256,245,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 23, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,273,251,280,272,276,273,266,284,265,260,240,266,238],
[242,0,245,241,266,268,276,263,253,274,265,236,228,260,241],
[227,255,0,240,278,307,287,252,263,302,288,258,263,269,266],
[249,259,260,0,264,294,278,247,262,272,278,259,261,257,252],
[220,234,222,236,0,291,272,229,210,258,252,224,240,257,229],
[228,232,193,206,209,0,233,214,230,249,231,202,227,209,234],
[224,224,213,222,228,267,0,213,221,247,224,224,225,225,250],
[227,237,248,253,271,286,287,0,259,296,276,261,219,269,259],
[234,247,237,238,290,270,279,241,0,265,249,242,247,242,249],
[216,226,198,228,242,251,253,204,235,0,233,224,234,252,236],
[235,235,212,222,248,269,276,224,251,267,0,235,210,209,220],
[240,264,242,241,276,298,276,239,258,276,265,0,265,244,273],
[260,272,237,239,260,273,275,281,253,266,290,235,0,242,257],
[234,240,231,243,243,291,275,231,258,248,291,256,258,0,285],
[262,259,234,248,271,266,250,241,251,264,280,227,243,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 24, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,252,253,240,245,238,260,240,239,256,241,240,249,237],
[254,0,264,230,244,256,240,265,264,246,247,248,251,256,230],
[248,236,0,236,233,235,237,243,235,225,235,231,228,244,218],
[247,270,264,0,251,247,251,254,242,256,244,261,240,270,258],
[260,256,267,249,0,265,269,262,261,254,268,269,261,261,241],
[255,244,265,253,235,0,251,257,239,230,250,247,242,248,241],
[262,260,263,249,231,249,0,240,234,245,248,244,238,243,239],
[240,235,257,246,238,243,260,0,236,248,238,243,250,243,248],
[260,236,265,258,239,261,266,264,0,246,270,267,267,263,234],
[261,254,275,244,246,270,255,252,254,0,247,256,250,244,264],
[244,253,265,256,232,250,252,262,230,253,0,242,256,256,241],
[259,252,269,239,231,253,256,257,233,244,258,0,243,249,237],
[260,249,272,260,239,258,262,250,233,250,244,257,0,256,254],
[251,244,256,230,239,252,257,257,237,256,244,251,244,0,234],
[263,270,282,242,259,259,261,252,266,236,259,263,246,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 25, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,254,222,254,251,242,230,243,249,245,235,246,265,270],
[249,0,278,252,260,257,272,253,263,261,259,273,269,269,269],
[246,222,0,209,237,234,228,230,233,230,236,231,227,249,246],
[278,248,291,0,264,272,276,265,264,266,265,278,273,277,295],
[246,240,263,236,0,250,251,241,252,234,243,255,254,257,262],
[249,243,266,228,250,0,256,230,246,234,247,251,249,256,267],
[258,228,272,224,249,244,0,241,242,250,244,236,262,244,252],
[270,247,270,235,259,270,259,0,280,263,261,262,249,266,282],
[257,237,267,236,248,254,258,220,0,228,250,253,262,261,263],
[251,239,270,234,266,266,250,237,272,0,267,260,268,271,269],
[255,241,264,235,257,253,256,239,250,233,0,257,249,256,257],
[265,227,269,222,245,249,264,238,247,240,243,0,259,258,267],
[254,231,273,227,246,251,238,251,238,232,251,241,0,249,250],
[235,231,251,223,243,244,256,234,239,229,244,242,251,0,262],
[230,231,254,205,238,233,248,218,237,231,243,233,250,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 26, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,235,243,241,215,288,261,226,220,239,254,216,229,208],
[282,0,274,245,232,234,277,283,286,197,327,256,206,201,253],
[265,226,0,217,232,217,257,290,287,206,269,257,180,167,252],
[257,255,283,0,242,230,243,270,248,210,223,248,207,243,262],
[259,268,268,258,0,267,288,285,261,241,289,252,207,225,224],
[285,266,283,270,233,0,297,303,287,223,276,268,247,236,239],
[212,223,243,257,212,203,0,256,239,222,233,225,225,184,208],
[239,217,210,230,215,197,244,0,233,196,228,235,184,174,214],
[274,214,213,252,239,213,261,267,0,223,272,213,201,195,226],
[280,303,294,290,259,277,278,304,277,0,281,281,278,240,294],
[261,173,231,277,211,224,267,272,228,219,0,241,225,176,226],
[246,244,243,252,248,232,275,265,287,219,259,0,226,259,269],
[284,294,320,293,293,253,275,316,299,222,275,274,0,244,262],
[271,299,333,257,275,264,316,326,305,260,324,241,256,0,274],
[292,247,248,238,276,261,292,286,274,206,274,231,238,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 27, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,243,253,244,236,252,248,255,242,240,248,248,255,244],
[252,0,245,252,245,252,237,246,260,258,246,250,270,237,253],
[257,255,0,274,249,265,257,260,259,259,259,266,254,251,282],
[247,248,226,0,246,248,253,259,243,250,254,252,254,243,259],
[256,255,251,254,0,256,254,251,263,248,256,253,253,238,265],
[264,248,235,252,244,0,248,245,269,239,250,246,258,249,264],
[248,263,243,247,246,252,0,243,250,265,262,274,259,248,259],
[252,254,240,241,249,255,257,0,248,261,249,257,250,240,253],
[245,240,241,257,237,231,250,252,0,245,252,254,244,239,250],
[258,242,241,250,252,261,235,239,255,0,256,257,247,252,243],
[260,254,241,246,244,250,238,251,248,244,0,253,246,243,245],
[252,250,234,248,247,254,226,243,246,243,247,0,257,232,242],
[252,230,246,246,247,242,241,250,256,253,254,243,0,240,265],
[245,263,249,257,262,251,252,260,261,248,257,268,260,0,263],
[256,247,218,241,235,236,241,247,250,257,255,258,235,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 28, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,237,204,224,227,224,220,188,249,252,234,224,226,231],
[236,0,238,233,226,221,198,242,234,236,229,218,253,198,202],
[263,262,0,234,273,232,200,226,252,216,262,219,222,225,254],
[296,267,266,0,264,255,230,245,276,251,286,254,262,248,277],
[276,274,227,236,0,232,167,224,215,243,230,238,259,223,205],
[273,279,268,245,268,0,264,244,229,243,278,245,277,274,248],
[276,302,300,270,333,236,0,289,263,264,290,242,305,280,304],
[280,258,274,255,276,256,211,0,257,269,278,245,242,253,241],
[312,266,248,224,285,271,237,243,0,278,294,277,265,256,286],
[251,264,284,249,257,257,236,231,222,0,272,203,240,208,239],
[248,271,238,214,270,222,210,222,206,228,0,212,266,224,224],
[266,282,281,246,262,255,258,255,223,297,288,0,257,256,279],
[276,247,278,238,241,223,195,258,235,260,234,243,0,225,214],
[274,302,275,252,277,226,220,247,244,292,276,244,275,0,262],
[269,298,246,223,295,252,196,259,214,261,276,221,286,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 29, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,250,295,287,268,241,264,274,281,243,297,278,272,266],
[215,0,232,295,248,215,236,238,236,224,254,295,239,237,253],
[250,268,0,268,249,268,265,267,271,271,219,319,234,255,270],
[205,205,232,0,221,222,241,218,189,207,210,271,215,222,237],
[213,252,251,279,0,206,231,216,247,242,239,292,259,280,284],
[232,285,232,278,294,0,280,281,253,303,231,299,269,273,310],
[259,264,235,259,269,220,0,253,231,239,209,289,260,240,241],
[236,262,233,282,284,219,247,0,257,259,235,324,266,249,272],
[226,264,229,311,253,247,269,243,0,255,245,289,236,221,241],
[219,276,229,293,258,197,261,241,245,0,229,298,249,249,296],
[257,246,281,290,261,269,291,265,255,271,0,303,275,300,269],
[203,205,181,229,208,201,211,176,211,202,197,0,240,234,222],
[222,261,266,285,241,231,240,234,264,251,225,260,0,254,258],
[228,263,245,278,220,227,260,251,279,251,200,266,246,0,282],
[234,247,230,263,216,190,259,228,259,204,231,278,242,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 30, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,223,220,233,253,238,271,255,231,234,236,229,233,219],
[244,0,244,234,228,253,230,262,224,236,256,239,259,224,231],
[277,256,0,276,252,277,262,297,235,259,283,267,263,250,223],
[280,266,224,0,229,265,242,286,246,242,248,253,257,252,250],
[267,272,248,271,0,258,259,280,260,253,271,254,274,258,250],
[247,247,223,235,242,0,218,250,233,232,237,244,247,221,224],
[262,270,238,258,241,282,0,302,247,235,273,243,278,257,222],
[229,238,203,214,220,250,198,0,218,207,241,213,216,207,185],
[245,276,265,254,240,267,253,282,0,253,270,237,260,250,232],
[269,264,241,258,247,268,265,293,247,0,257,262,274,264,241],
[266,244,217,252,229,263,227,259,230,243,0,245,234,228,205],
[264,261,233,247,246,256,257,287,263,238,255,0,267,255,238],
[271,241,237,243,226,253,222,284,240,226,266,233,0,251,230],
[267,276,250,248,242,279,243,293,250,236,272,245,249,0,239],
[281,269,277,250,250,276,278,315,268,259,295,262,270,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 31, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,243,249,241,257,224,225,250,238,244,244,254,247,253],
[261,0,251,245,264,264,235,247,257,229,252,240,255,263,275],
[257,249,0,255,264,262,224,237,245,236,254,256,248,266,263],
[251,255,245,0,256,260,243,232,233,243,261,250,269,256,269],
[259,236,236,244,0,273,230,233,252,243,254,260,262,249,253],
[243,236,238,240,227,0,228,232,251,230,237,237,238,258,262],
[276,265,276,257,270,272,0,251,272,245,264,264,267,278,268],
[275,253,263,268,267,268,249,0,248,239,266,254,262,270,276],
[250,243,255,267,248,249,228,252,0,251,260,236,261,247,269],
[262,271,264,257,257,270,255,261,249,0,281,261,278,276,285],
[256,248,246,239,246,263,236,234,240,219,0,250,270,272,281],
[256,260,244,250,240,263,236,246,264,239,250,0,253,266,261],
[246,245,252,231,238,262,233,238,239,222,230,247,0,259,265],
[253,237,234,244,251,242,222,230,253,224,228,234,241,0,258],
[247,225,237,231,247,238,232,224,231,215,219,239,235,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 32, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,251,254,260,273,261,255,279,250,258,267,260,264,258],
[234,0,243,240,255,260,261,241,258,246,249,230,251,239,250],
[249,257,0,246,257,271,256,264,278,263,259,273,248,264,244],
[246,260,254,0,260,268,257,260,273,257,254,262,242,256,249],
[240,245,243,240,0,253,249,239,259,237,239,242,249,243,231],
[227,240,229,232,247,0,230,235,247,231,246,237,238,231,230],
[239,239,244,243,251,270,0,246,274,246,247,243,250,237,236],
[245,259,236,240,261,265,254,0,273,256,259,260,255,258,269],
[221,242,222,227,241,253,226,227,0,225,245,251,238,237,234],
[250,254,237,243,263,269,254,244,275,0,261,267,253,242,256],
[242,251,241,246,261,254,253,241,255,239,0,249,259,260,245],
[233,270,227,238,258,263,257,240,249,233,251,0,247,249,236],
[240,249,252,258,251,262,250,245,262,247,241,253,0,249,250],
[236,261,236,244,257,269,263,242,263,258,240,251,251,0,249],
[242,250,256,251,269,270,264,231,266,244,255,264,250,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 33, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,248,231,279,245,214,271,229,236,294,240,247,249,303],
[246,0,236,202,259,260,227,221,218,215,243,245,216,242,222],
[252,264,0,253,262,285,203,205,208,214,217,259,200,264,221],
[269,298,247,0,264,316,260,258,255,220,268,227,231,270,283],
[221,241,238,236,0,275,254,254,251,234,264,252,237,262,223],
[255,240,215,184,225,0,183,206,193,205,246,234,175,208,206],
[286,273,297,240,246,317,0,272,228,248,280,278,237,294,234],
[229,279,295,242,246,294,228,0,206,232,258,239,234,259,279],
[271,282,292,245,249,307,272,294,0,261,248,261,253,298,289],
[264,285,286,280,266,295,252,268,239,0,265,306,223,279,266],
[206,257,283,232,236,254,220,242,252,235,0,234,185,264,267],
[260,255,241,273,248,266,222,261,239,194,266,0,200,238,244],
[253,284,300,269,263,325,263,266,247,277,315,300,0,301,272],
[251,258,236,230,238,292,206,241,202,221,236,262,199,0,221],
[197,278,279,217,277,294,266,221,211,234,233,256,228,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 34, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,231,268,280,283,374,271,223,318,330,257,241,238,341],
[230,0,271,266,359,369,370,216,279,185,329,320,267,229,251],
[269,229,0,284,209,274,409,233,218,257,378,306,381,262,329],
[232,234,216,0,232,304,371,330,243,315,430,234,282,216,261],
[220,141,291,268,0,287,398,232,209,286,361,286,286,232,291],
[217,131,226,196,213,0,248,205,132,218,217,256,195,200,253],
[126,130,91,129,102,252,0,175,118,221,255,149,185,228,202],
[229,284,267,170,268,295,325,0,230,144,401,276,281,169,188],
[277,221,282,257,291,368,382,270,0,259,400,350,342,243,287],
[182,315,243,185,214,282,279,356,241,0,317,245,320,310,310],
[170,171,122,70,139,283,245,99,100,183,0,141,208,162,135],
[243,180,194,266,214,244,351,224,150,255,359,0,284,253,203],
[259,233,119,218,214,305,315,219,158,180,292,216,0,251,243],
[262,271,238,284,268,300,272,331,257,190,338,247,249,0,248],
[159,249,171,239,209,247,298,312,213,190,365,297,257,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 35, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,284,293,285,259,229,272,295,281,265,284,205,254,287],
[260,0,261,262,239,210,215,217,250,287,214,250,232,223,243],
[216,239,0,282,271,256,226,239,271,301,267,240,264,221,266],
[207,238,218,0,235,218,204,252,253,292,238,221,171,202,255],
[215,261,229,265,0,245,240,240,257,254,250,257,266,215,264],
[241,290,244,282,255,0,230,218,249,262,266,259,267,243,295],
[271,285,274,296,260,270,0,277,272,297,302,239,275,264,306],
[228,283,261,248,260,282,223,0,251,288,230,250,239,260,304],
[205,250,229,247,243,251,228,249,0,260,276,251,240,203,267],
[219,213,199,208,246,238,203,212,240,0,236,196,205,219,230],
[235,286,233,262,250,234,198,270,224,264,0,223,219,207,245],
[216,250,260,279,243,241,261,250,249,304,277,0,241,256,293],
[295,268,236,329,234,233,225,261,260,295,281,259,0,232,290],
[246,277,279,298,285,257,236,240,297,281,293,244,268,0,306],
[213,257,234,245,236,205,194,196,233,270,255,207,210,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 36, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,243,252,245,242,280,247,278,257,255,250,244,254,238],
[280,0,269,266,257,270,284,262,279,279,279,267,246,261,286],
[257,231,0,253,272,257,275,251,271,263,239,273,223,267,250],
[248,234,247,0,244,243,255,232,260,248,260,259,246,241,247],
[255,243,228,256,0,247,271,242,247,246,268,235,241,237,238],
[258,230,243,257,253,0,273,235,254,259,244,228,232,235,232],
[220,216,225,245,229,227,0,232,259,229,252,227,213,247,246],
[253,238,249,268,258,265,268,0,271,254,273,264,251,235,267],
[222,221,229,240,253,246,241,229,0,242,257,241,233,239,242],
[243,221,237,252,254,241,271,246,258,0,253,243,232,222,255],
[245,221,261,240,232,256,248,227,243,247,0,269,239,239,237],
[250,233,227,241,265,272,273,236,259,257,231,0,235,237,247],
[256,254,277,254,259,268,287,249,267,268,261,265,0,263,262],
[246,239,233,259,263,265,253,265,261,278,261,263,237,0,243],
[262,214,250,253,262,268,254,233,258,245,263,253,238,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 37, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,245,257,246,250,238,262,251,236,267,255,265,219,250],
[250,0,252,249,253,255,248,265,251,230,273,249,261,242,234],
[255,248,0,265,264,266,256,269,263,242,284,264,277,245,254],
[243,251,235,0,254,244,234,253,255,234,254,254,254,225,244],
[254,247,236,246,0,251,231,249,233,249,261,243,265,233,234],
[250,245,234,256,249,0,227,242,234,224,266,236,252,245,233],
[262,252,244,266,269,273,0,259,258,250,278,253,279,258,251],
[238,235,231,247,251,258,241,0,238,229,258,242,259,225,234],
[249,249,237,245,267,266,242,262,0,231,259,245,252,239,238],
[264,270,258,266,251,276,250,271,269,0,284,268,274,251,267],
[233,227,216,246,239,234,222,242,241,216,0,240,248,231,241],
[245,251,236,246,257,264,247,258,255,232,260,0,265,238,239],
[235,239,223,246,235,248,221,241,248,226,252,235,0,237,233],
[281,258,255,275,267,255,242,275,261,249,269,262,263,0,256],
[250,266,246,256,266,267,249,266,262,233,259,261,267,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 38, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,233,242,255,195,214,246,250,280,271,258,262,244,258],
[275,0,258,280,266,236,274,254,280,279,299,261,261,283,258],
[267,242,0,271,258,267,241,243,241,256,260,274,223,286,285],
[258,220,229,0,238,260,192,249,226,258,273,279,266,308,260],
[245,234,242,262,0,240,191,227,240,268,232,230,245,298,261],
[305,264,233,240,260,0,229,271,247,247,286,263,227,291,274],
[286,226,259,308,309,271,0,256,253,275,299,297,287,306,267],
[254,246,257,251,273,229,244,0,269,292,250,241,294,289,260],
[250,220,259,274,260,253,247,231,0,245,305,251,244,321,250],
[220,221,244,242,232,253,225,208,255,0,238,224,247,253,247],
[229,201,240,227,268,214,201,250,195,262,0,241,238,276,235],
[242,239,226,221,270,237,203,259,249,276,259,0,204,283,232],
[238,239,277,234,255,273,213,206,256,253,262,296,0,273,279],
[256,217,214,192,202,209,194,211,179,247,224,217,227,0,200],
[242,242,215,240,239,226,233,240,250,253,265,268,221,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 39, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,252,262,260,239,273,253,275,242,259,252,257,268,257],
[227,0,247,246,258,235,253,228,253,243,250,238,239,249,227],
[248,253,0,282,257,242,273,245,256,257,251,246,236,263,227],
[238,254,218,0,244,225,269,253,255,227,244,229,218,234,231],
[240,242,243,256,0,213,275,247,251,214,247,240,226,252,214],
[261,265,258,275,287,0,281,261,260,258,256,245,243,247,256],
[227,247,227,231,225,219,0,227,263,240,240,256,223,239,216],
[247,272,255,247,253,239,273,0,274,253,238,255,230,256,241],
[225,247,244,245,249,240,237,226,0,227,215,241,223,243,209],
[258,257,243,273,286,242,260,247,273,0,258,251,236,242,238],
[241,250,249,256,253,244,260,262,285,242,0,246,234,253,228],
[248,262,254,271,260,255,244,245,259,249,254,0,218,243,250],
[243,261,264,282,274,257,277,270,277,264,266,282,0,260,268],
[232,251,237,266,248,253,261,244,257,258,247,257,240,0,226],
[243,273,273,269,286,244,284,259,291,262,272,250,232,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 40, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,299,245,252,280,238,260,248,283,296,289,226,193,228],
[226,0,305,279,233,304,266,266,269,315,281,302,228,262,235],
[201,195,0,260,231,241,227,280,198,306,249,261,203,201,213],
[255,221,240,0,182,270,236,291,243,293,262,292,230,202,234],
[248,267,269,318,0,297,226,301,285,297,303,325,265,262,240],
[220,196,259,230,203,0,181,253,213,266,250,261,231,185,150],
[262,234,273,264,274,319,0,291,268,307,314,314,262,236,258],
[240,234,220,209,199,247,209,0,224,242,230,279,223,163,189],
[252,231,302,257,215,287,232,276,0,257,246,276,225,189,185],
[217,185,194,207,203,234,193,258,243,0,227,264,254,155,184],
[204,219,251,238,197,250,186,270,254,273,0,264,210,195,193],
[211,198,239,208,175,239,186,221,224,236,236,0,214,157,165],
[274,272,297,270,235,269,238,277,275,246,290,286,0,253,224],
[307,238,299,298,238,315,264,337,311,345,305,343,247,0,276],
[272,265,287,266,260,350,242,311,315,316,307,335,276,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 41, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,263,257,265,273,276,255,302,240,243,243,245,259,235],
[266,0,267,248,273,253,276,244,269,250,219,251,239,272,240],
[237,233,0,246,249,255,242,247,250,231,224,243,244,245,268],
[243,252,254,0,235,240,273,256,277,250,233,266,239,275,259],
[235,227,251,265,0,237,277,252,263,237,228,252,241,270,255],
[227,247,245,260,263,0,266,235,279,251,257,254,264,254,249],
[224,224,258,227,223,234,0,227,254,229,247,238,207,231,223],
[245,256,253,244,248,265,273,0,269,262,263,252,276,275,265],
[198,231,250,223,237,221,246,231,0,217,215,219,220,231,241],
[260,250,269,250,263,249,271,238,283,0,237,242,250,280,265],
[257,281,276,267,272,243,253,237,285,263,0,254,241,270,254],
[257,249,257,234,248,246,262,248,281,258,246,0,252,276,264],
[255,261,256,261,259,236,293,224,280,250,259,248,0,258,254],
[241,228,255,225,230,246,269,225,269,220,230,224,242,0,248],
[265,260,232,241,245,251,277,235,259,235,246,236,246,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 42, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,268,300,236,270,255,245,248,256,246,275,263,232,229],
[266,0,276,290,266,291,271,276,268,242,267,285,279,284,251],
[232,224,0,263,222,257,212,247,224,247,210,242,254,250,247],
[200,210,237,0,210,243,233,250,223,243,223,247,218,228,231],
[264,234,278,290,0,262,254,268,231,248,246,275,281,266,223],
[230,209,243,257,238,0,227,252,229,240,226,232,217,232,236],
[245,229,288,267,246,273,0,234,263,232,220,254,247,254,242],
[255,224,253,250,232,248,266,0,232,250,210,242,246,255,218],
[252,232,276,277,269,271,237,268,0,257,220,267,261,268,245],
[244,258,253,257,252,260,268,250,243,0,231,271,253,264,235],
[254,233,290,277,254,274,280,290,280,269,0,273,270,270,271],
[225,215,258,253,225,268,246,258,233,229,227,0,226,217,221],
[237,221,246,282,219,283,253,254,239,247,230,274,0,264,238],
[268,216,250,272,234,268,246,245,232,236,230,283,236,0,231],
[271,249,253,269,277,264,258,282,255,265,229,279,262,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 43, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,244,254,255,247,242,248,263,252,249,252,250,232,259],
[256,0,258,250,244,249,267,243,252,270,248,251,251,259,255],
[256,242,0,248,241,242,258,238,246,253,253,249,249,254,257],
[246,250,252,0,244,237,249,231,251,249,254,239,238,258,256],
[245,256,259,256,0,258,256,241,254,249,255,263,260,253,263],
[253,251,258,263,242,0,262,255,253,249,248,260,254,264,258],
[258,233,242,251,244,238,0,231,252,259,251,238,258,243,256],
[252,257,262,269,259,245,269,0,271,255,263,265,258,261,283],
[237,248,254,249,246,247,248,229,0,261,242,249,241,249,256],
[248,230,247,251,251,251,241,245,239,0,255,252,244,252,257],
[251,252,247,246,245,252,249,237,258,245,0,249,244,244,247],
[248,249,251,261,237,240,262,235,251,248,251,0,244,242,250],
[250,249,251,262,240,246,242,242,259,256,256,256,0,251,266],
[268,241,246,242,247,236,257,239,251,248,256,258,249,0,254],
[241,245,243,244,237,242,244,217,244,243,253,250,234,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 44, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,272,273,267,260,266,244,257,271,261,235,255,285,270],
[231,0,253,246,235,230,233,237,251,262,236,219,242,246,237],
[228,247,0,255,252,250,244,227,238,247,243,227,229,260,238],
[227,254,245,0,238,240,242,230,232,255,248,233,238,257,241],
[233,265,248,262,0,256,257,252,244,265,281,248,258,256,256],
[240,270,250,260,244,0,253,235,253,261,265,247,234,277,263],
[234,267,256,258,243,247,0,246,237,274,254,251,257,271,258],
[256,263,273,270,248,265,254,0,256,251,261,244,250,266,267],
[243,249,262,268,256,247,263,244,0,268,257,248,246,269,263],
[229,238,253,245,235,239,226,249,232,0,252,229,226,262,232],
[239,264,257,252,219,235,246,239,243,248,0,240,228,246,242],
[265,281,273,267,252,253,249,256,252,271,260,0,258,265,268],
[245,258,271,262,242,266,243,250,254,274,272,242,0,271,261],
[215,254,240,243,244,223,229,234,231,238,254,235,229,0,237],
[230,263,262,259,244,237,242,233,237,268,258,232,239,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 45, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,226,233,257,247,246,241,264,207,246,245,207,243,212],
[261,0,245,246,277,290,270,248,290,223,242,266,234,255,244],
[274,255,0,252,275,284,255,264,301,252,249,281,262,269,242],
[267,254,248,0,274,304,263,270,296,245,252,293,247,258,234],
[243,223,225,226,0,254,244,231,253,224,242,274,229,245,231],
[253,210,216,196,246,0,253,229,263,200,232,250,221,214,206],
[254,230,245,237,256,247,0,256,258,205,237,260,225,248,224],
[259,252,236,230,269,271,244,0,267,232,237,256,238,246,236],
[236,210,199,204,247,237,242,233,0,194,219,228,225,228,215],
[293,277,248,255,276,300,295,268,306,0,254,305,274,283,255],
[254,258,251,248,258,268,263,263,281,246,0,281,230,267,249],
[255,234,219,207,226,250,240,244,272,195,219,0,215,246,224],
[293,266,238,253,271,279,275,262,275,226,270,285,0,264,272],
[257,245,231,242,255,286,252,254,272,217,233,254,236,0,230],
[288,256,258,266,269,294,276,264,285,245,251,276,228,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 46, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,265,271,254,247,269,253,257,266,255,278,257,243,268],
[240,0,247,275,229,251,276,258,246,266,257,249,283,255,267],
[235,253,0,246,247,255,264,236,235,264,247,246,250,226,283],
[229,225,254,0,240,224,243,225,227,264,250,238,261,234,253],
[246,271,253,260,0,244,267,235,245,257,234,278,254,238,265],
[253,249,245,276,256,0,265,216,238,265,235,254,252,243,266],
[231,224,236,257,233,235,0,222,242,236,232,234,251,225,258],
[247,242,264,275,265,284,278,0,261,265,264,272,284,248,277],
[243,254,265,273,255,262,258,239,0,261,270,264,281,258,275],
[234,234,236,236,243,235,264,235,239,0,241,238,242,237,240],
[245,243,253,250,266,265,268,236,230,259,0,247,270,239,239],
[222,251,254,262,222,246,266,228,236,262,253,0,240,249,241],
[243,217,250,239,246,248,249,216,219,258,230,260,0,240,265],
[257,245,274,266,262,257,275,252,242,263,261,251,260,0,275],
[232,233,217,247,235,234,242,223,225,260,261,259,235,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 47, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,265,260,248,247,247,237,284,244,225,266,256,263,253],
[247,0,248,245,241,251,248,240,245,242,232,266,256,265,242],
[235,252,0,242,213,254,254,252,253,252,248,271,247,267,236],
[240,255,258,0,218,263,252,249,247,248,243,261,261,277,240],
[252,259,287,282,0,275,264,263,259,238,244,273,257,253,247],
[253,249,246,237,225,0,245,243,252,236,253,244,244,252,261],
[253,252,246,248,236,255,0,238,267,259,248,266,227,253,260],
[263,260,248,251,237,257,262,0,268,264,259,275,256,260,271],
[216,255,247,253,241,248,233,232,0,246,252,255,261,265,227],
[256,258,248,252,262,264,241,236,254,0,246,259,234,250,244],
[275,268,252,257,256,247,252,241,248,254,0,290,242,266,248],
[234,234,229,239,227,256,234,225,245,241,210,0,229,233,238],
[244,244,253,239,243,256,273,244,239,266,258,271,0,257,263],
[237,235,233,223,247,248,247,240,235,250,234,267,243,0,228],
[247,258,264,260,253,239,240,229,273,256,252,262,237,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 48, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,260,238,239,229,254,257,243,250,253,243,271,250,229],
[236,0,250,234,233,249,245,250,245,241,254,240,253,225,238],
[240,250,0,240,225,238,257,251,259,246,262,233,260,243,245],
[262,266,260,0,247,245,253,244,237,263,272,250,253,241,241],
[261,267,275,253,0,262,263,236,265,261,283,256,285,261,256],
[271,251,262,255,238,0,255,247,248,266,266,258,292,252,252],
[246,255,243,247,237,245,0,238,237,246,271,249,281,244,230],
[243,250,249,256,264,253,262,0,250,250,271,229,276,256,243],
[257,255,241,263,235,252,263,250,0,258,267,249,274,253,244],
[250,259,254,237,239,234,254,250,242,0,263,247,269,240,238],
[247,246,238,228,217,234,229,229,233,237,0,234,252,243,221],
[257,260,267,250,244,242,251,271,251,253,266,0,260,254,260],
[229,247,240,247,215,208,219,224,226,231,248,240,0,229,243],
[250,275,257,259,239,248,256,244,247,260,257,246,271,0,246],
[271,262,255,259,244,248,270,257,256,262,279,240,257,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 49, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,236,253,249,252,263,236,231,263,235,249,227,244,252],
[254,0,250,232,241,253,256,229,233,244,227,240,235,238,219],
[264,250,0,249,257,262,271,238,256,244,235,245,241,253,234],
[247,268,251,0,255,280,261,237,245,259,229,246,235,253,248],
[251,259,243,245,0,258,253,235,253,233,231,259,230,255,241],
[248,247,238,220,242,0,236,208,222,233,207,228,207,235,224],
[237,244,229,239,247,264,0,234,246,247,228,232,218,250,246],
[264,271,262,263,265,292,266,0,248,240,255,267,240,271,253],
[269,267,244,255,247,278,254,252,0,245,250,259,267,259,251],
[237,256,256,241,267,267,253,260,255,0,252,231,243,255,265],
[265,273,265,271,269,293,272,245,250,248,0,260,241,272,261],
[251,260,255,254,241,272,268,233,241,269,240,0,240,249,253],
[273,265,259,265,270,293,282,260,233,257,259,260,0,274,254],
[256,262,247,247,245,265,250,229,241,245,228,251,226,0,235],
[248,281,266,252,259,276,254,247,249,235,239,247,246,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 50, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,267,271,252,259,267,290,225,312,254,285,274,279,290],
[229,0,265,276,230,243,225,232,231,249,211,281,233,235,234],
[233,235,0,279,227,259,232,231,226,273,282,301,237,246,256],
[229,224,221,0,215,212,255,215,234,265,257,259,211,238,214],
[248,270,273,285,0,207,282,203,236,307,253,285,231,264,273],
[241,257,241,288,293,0,253,217,255,281,264,285,230,286,284],
[233,275,268,245,218,247,0,260,218,293,250,290,270,218,252],
[210,268,269,285,297,283,240,0,255,258,249,251,244,252,279],
[275,269,274,266,264,245,282,245,0,304,287,281,239,243,247],
[188,251,227,235,193,219,207,242,196,0,208,242,226,220,261],
[246,289,218,243,247,236,250,251,213,292,0,256,259,273,272],
[215,219,199,241,215,215,210,249,219,258,244,0,208,214,250],
[226,267,263,289,269,270,230,256,261,274,241,292,0,278,246],
[221,265,254,262,236,214,282,248,257,280,227,286,222,0,231],
[210,266,244,286,227,216,248,221,253,239,228,250,254,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 51, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,265,266,235,262,211,256,257,232,266,308,270,271,242],
[219,0,228,187,216,232,240,181,192,210,226,248,208,208,196],
[235,272,0,259,249,243,230,236,257,258,269,301,236,248,272],
[234,313,241,0,277,225,271,241,262,258,290,268,256,230,233],
[265,284,251,223,0,247,243,244,257,241,250,264,250,256,246],
[238,268,257,275,253,0,253,255,273,277,247,292,253,251,233],
[289,260,270,229,257,247,0,211,224,247,289,249,263,225,199],
[244,319,264,259,256,245,289,0,277,247,271,250,242,238,235],
[243,308,243,238,243,227,276,223,0,275,225,286,214,278,232],
[268,290,242,242,259,223,253,253,225,0,243,272,214,245,228],
[234,274,231,210,250,253,211,229,275,257,0,285,243,272,222],
[192,252,199,232,236,208,251,250,214,228,215,0,195,226,222],
[230,292,264,244,250,247,237,258,286,286,257,305,0,263,257],
[229,292,252,270,244,249,275,262,222,255,228,274,237,0,241],
[258,304,228,267,254,267,301,265,268,272,278,278,243,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 52, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,267,176,245,223,231,200,152,168,171,232,212,260,251],
[261,0,262,289,221,229,260,253,201,177,267,206,253,221,239],
[233,238,0,291,259,248,297,256,190,232,265,274,260,257,254],
[324,211,209,0,264,265,224,284,218,171,226,245,235,275,292],
[255,279,241,236,0,235,279,249,253,222,249,261,230,274,275],
[277,271,252,235,265,0,237,256,174,175,266,189,271,247,204],
[269,240,203,276,221,263,0,223,240,212,234,228,186,246,269],
[300,247,244,216,251,244,277,0,222,176,249,238,208,264,315],
[348,299,310,282,247,326,260,278,0,265,307,243,227,309,250],
[332,323,268,329,278,325,288,324,235,0,316,245,304,293,346],
[329,233,235,274,251,234,266,251,193,184,0,238,235,194,286],
[268,294,226,255,239,311,272,262,257,255,262,0,233,248,247],
[288,247,240,265,270,229,314,292,273,196,265,267,0,259,263],
[240,279,243,225,226,253,254,236,191,207,306,252,241,0,290],
[249,261,246,208,225,296,231,185,250,154,214,253,237,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 53, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,240,276,266,273,260,275,269,306,275,281,248,269,271],
[258,0,252,271,242,261,262,244,278,276,273,261,253,254,241],
[260,248,0,268,240,273,251,284,276,292,240,269,252,305,274],
[224,229,232,0,239,253,238,227,265,249,241,248,243,289,273],
[234,258,260,261,0,257,263,263,259,295,248,257,247,294,288],
[227,239,227,247,243,0,241,235,253,269,253,234,195,280,242],
[240,238,249,262,237,259,0,275,252,282,288,270,223,279,251],
[225,256,216,273,237,265,225,0,266,258,278,255,221,249,254],
[231,222,224,235,241,247,248,234,0,265,259,251,228,250,243],
[194,224,208,251,205,231,218,242,235,0,245,219,215,270,240],
[225,227,260,259,252,247,212,222,241,255,0,254,209,244,246],
[219,239,231,252,243,266,230,245,249,281,246,0,233,283,260],
[252,247,248,257,253,305,277,279,272,285,291,267,0,272,261],
[231,246,195,211,206,220,221,251,250,230,256,217,228,0,255],
[229,259,226,227,212,258,249,246,257,260,254,240,239,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 54, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,280,241,303,240,244,200,286,254,199,269,248,253,284],
[259,0,312,214,273,246,215,223,296,193,248,225,257,221,247],
[220,188,0,211,256,184,208,194,284,221,198,211,204,209,229],
[259,286,289,0,317,259,277,251,330,298,284,231,298,292,284],
[197,227,244,183,0,226,200,185,265,206,175,179,199,232,244],
[260,254,316,241,274,0,226,258,305,296,233,255,280,281,279],
[256,285,292,223,300,274,0,216,302,263,201,221,231,276,282],
[300,277,306,249,315,242,284,0,326,294,252,296,336,284,276],
[214,204,216,170,235,195,198,174,0,193,189,158,199,218,186],
[246,307,279,202,294,204,237,206,307,0,222,242,258,286,296],
[301,252,302,216,325,267,299,248,311,278,0,277,270,287,274],
[231,275,289,269,321,245,279,204,342,258,223,0,264,252,292],
[252,243,296,202,301,220,269,164,301,242,230,236,0,233,299],
[247,279,291,208,268,219,224,216,282,214,213,248,267,0,283],
[216,253,271,216,256,221,218,224,314,204,226,208,201,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 55, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,238,225,261,261,249,205,292,248,255,228,242,191,239],
[304,0,257,227,252,294,270,243,254,266,267,249,257,228,227],
[262,243,0,233,245,255,238,205,251,247,215,202,266,195,250],
[275,273,267,0,265,292,283,246,300,268,252,255,271,227,282],
[239,248,255,235,0,274,224,214,265,255,256,247,248,207,258],
[239,206,245,208,226,0,241,212,256,260,248,212,266,185,228],
[251,230,262,217,276,259,0,237,266,253,259,252,254,218,268],
[295,257,295,254,286,288,263,0,299,288,283,250,284,235,269],
[208,246,249,200,235,244,234,201,0,241,194,235,234,185,228],
[252,234,253,232,245,240,247,212,259,0,231,230,267,191,254],
[245,233,285,248,244,252,241,217,306,269,0,240,257,252,235],
[272,251,298,245,253,288,248,250,265,270,260,0,280,219,247],
[258,243,234,229,252,234,246,216,266,233,243,220,0,236,262],
[309,272,305,273,293,315,282,265,315,309,248,281,264,0,297],
[261,273,250,218,242,272,232,231,272,246,265,253,238,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 56, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,250,271,235,251,264,260,253,263,245,262,262,286,240],
[235,0,240,251,254,260,252,237,243,251,246,250,240,257,222],
[250,260,0,248,247,256,261,249,259,247,258,254,269,267,227],
[229,249,252,0,237,239,248,235,232,244,229,241,231,265,233],
[265,246,253,263,0,254,251,255,232,264,257,247,262,279,240],
[249,240,244,261,246,0,235,253,231,258,231,242,246,259,227],
[236,248,239,252,249,265,0,236,244,256,240,247,243,259,251],
[240,263,251,265,245,247,264,0,240,252,253,239,258,263,239],
[247,257,241,268,268,269,256,260,0,262,246,242,269,256,247],
[237,249,253,256,236,242,244,248,238,0,238,238,269,259,227],
[255,254,242,271,243,269,260,247,254,262,0,237,263,258,241],
[238,250,246,259,253,258,253,261,258,262,263,0,251,263,243],
[238,260,231,269,238,254,257,242,231,231,237,249,0,266,232],
[214,243,233,235,221,241,241,237,244,241,242,237,234,0,225],
[260,278,273,267,260,273,249,261,253,273,259,257,268,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 57, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,250,256,251,231,248,270,245,248,225,258,235,267,247],
[248,0,244,261,266,241,244,247,256,248,252,237,233,260,237],
[250,256,0,252,251,242,251,257,262,243,253,252,256,260,242],
[244,239,248,0,276,232,244,242,235,234,230,239,235,269,229],
[249,234,249,224,0,241,245,250,229,235,230,251,222,242,226],
[269,259,258,268,259,0,258,256,240,241,265,265,226,271,224],
[252,256,249,256,255,242,0,257,227,228,237,257,238,254,243],
[230,253,243,258,250,244,243,0,230,237,248,240,236,248,228],
[255,244,238,265,271,260,273,270,0,233,257,246,242,273,242],
[252,252,257,266,265,259,272,263,267,0,250,258,241,287,254],
[275,248,247,270,270,235,263,252,243,250,0,245,242,268,231],
[242,263,248,261,249,235,243,260,254,242,255,0,230,269,234],
[265,267,244,265,278,274,262,264,258,259,258,270,0,283,265],
[233,240,240,231,258,229,246,252,227,213,232,231,217,0,214],
[253,263,258,271,274,276,257,272,258,246,269,266,235,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 58, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,249,244,239,246,235,233,239,256,243,240,246,235,226],
[262,0,264,256,258,253,256,269,262,248,265,268,257,257,254],
[251,236,0,245,232,233,232,254,245,254,254,237,251,229,226],
[256,244,255,0,258,253,245,252,262,266,265,263,258,262,247],
[261,242,268,242,0,257,244,254,251,258,262,260,262,249,238],
[254,247,267,247,243,0,249,261,254,254,260,263,263,251,238],
[265,244,268,255,256,251,0,260,250,256,268,261,274,262,233],
[267,231,246,248,246,239,240,0,241,249,250,247,253,241,240],
[261,238,255,238,249,246,250,259,0,247,258,252,254,240,248],
[244,252,246,234,242,246,244,251,253,0,257,253,254,227,237],
[257,235,246,235,238,240,232,250,242,243,0,253,255,245,251],
[260,232,263,237,240,237,239,253,248,247,247,0,235,239,236],
[254,243,249,242,238,237,226,247,246,246,245,265,0,244,230],
[265,243,271,238,251,249,238,259,260,273,255,261,256,0,254],
[274,246,274,253,262,262,267,260,252,263,249,264,270,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 59, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,240,263,241,238,249,247,263,264,218,221,260,283,246],
[280,0,301,257,285,291,265,263,280,293,239,264,272,333,283],
[260,199,0,243,239,271,248,226,251,260,228,239,267,289,274],
[237,243,257,0,240,246,244,244,264,278,253,239,264,269,241],
[259,215,261,260,0,305,266,227,259,278,231,256,252,277,269],
[262,209,229,254,195,0,246,231,245,223,215,257,238,282,241],
[251,235,252,256,234,254,0,240,261,244,240,257,254,256,243],
[253,237,274,256,273,269,260,0,277,288,251,246,274,268,242],
[237,220,249,236,241,255,239,223,0,238,230,221,229,257,238],
[236,207,240,222,222,277,256,212,262,0,224,227,233,243,253],
[282,261,272,247,269,285,260,249,270,276,0,257,285,283,255],
[279,236,261,261,244,243,243,254,279,273,243,0,253,277,251],
[240,228,233,236,248,262,246,226,271,267,215,247,0,252,260],
[217,167,211,231,223,218,244,232,243,257,217,223,248,0,207],
[254,217,226,259,231,259,257,258,262,247,245,249,240,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 60, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,236,229,237,227,226,234,233,237,226,250,223,235,240],
[274,0,257,272,257,249,242,258,254,256,264,261,274,250,258],
[264,243,0,241,246,241,233,249,248,249,244,248,265,240,252],
[271,228,259,0,259,243,242,247,243,261,256,269,242,244,252],
[263,243,254,241,0,247,251,243,233,238,253,247,236,223,245],
[273,251,259,257,253,0,235,261,247,258,265,260,248,243,253],
[274,258,267,258,249,265,0,245,264,251,254,263,257,256,269],
[266,242,251,253,257,239,255,0,242,256,253,253,262,243,242],
[267,246,252,257,267,253,236,258,0,249,262,252,260,275,251],
[263,244,251,239,262,242,249,244,251,0,256,266,255,242,248],
[274,236,256,244,247,235,246,247,238,244,0,256,250,239,250],
[250,239,252,231,253,240,237,247,248,234,244,0,256,248,247],
[277,226,235,258,264,252,243,238,240,245,250,244,0,250,237],
[265,250,260,256,277,257,244,257,225,258,261,252,250,0,259],
[260,242,248,248,255,247,231,258,249,252,250,253,263,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 61, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,242,250,257,240,252,257,249,273,243,250,263,256,247],
[250,0,237,248,242,244,248,259,239,259,248,252,269,264,250],
[258,263,0,251,263,247,265,256,243,261,260,265,273,273,255],
[250,252,249,0,254,229,255,258,248,259,248,249,267,253,265],
[243,258,237,246,0,252,261,262,246,258,248,259,267,266,253],
[260,256,253,271,248,0,267,253,251,272,255,260,281,258,254],
[248,252,235,245,239,233,0,253,244,251,231,249,260,245,245],
[243,241,244,242,238,247,247,0,238,259,246,242,264,260,259],
[251,261,257,252,254,249,256,262,0,264,247,254,258,259,251],
[227,241,239,241,242,228,249,241,236,0,240,243,253,237,245],
[257,252,240,252,252,245,269,254,253,260,0,256,260,263,256],
[250,248,235,251,241,240,251,258,246,257,244,0,259,248,241],
[237,231,227,233,233,219,240,236,242,247,240,241,0,245,243],
[244,236,227,247,234,242,255,240,241,263,237,252,255,0,238],
[253,250,245,235,247,246,255,241,249,255,244,259,257,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 62, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,247,276,266,246,242,234,259,232,237,249,256,261,241],
[282,0,266,301,283,268,275,275,278,263,242,257,301,267,262],
[253,234,0,291,255,236,239,234,256,247,254,264,300,243,242],
[224,199,209,0,225,220,209,195,239,213,196,225,233,246,218],
[234,217,245,275,0,236,208,247,280,225,222,245,269,233,229],
[254,232,264,280,264,0,226,230,251,233,248,253,269,274,272],
[258,225,261,291,292,274,0,276,275,273,240,250,271,265,256],
[266,225,266,305,253,270,224,0,286,242,217,246,250,268,254],
[241,222,244,261,220,249,225,214,0,230,203,208,240,252,251],
[268,237,253,287,275,267,227,258,270,0,239,255,274,281,264],
[263,258,246,304,278,252,260,283,297,261,0,273,283,272,258],
[251,243,236,275,255,247,250,254,292,245,227,0,265,278,245],
[244,199,200,267,231,231,229,250,260,226,217,235,0,239,232],
[239,233,257,254,267,226,235,232,248,219,228,222,261,0,251],
[259,238,258,282,271,228,244,246,249,236,242,255,268,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 63, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,209,266,278,221,244,264,216,233,252,263,251,259,208],
[228,0,196,210,267,200,235,253,194,231,218,238,262,210,239],
[291,304,0,247,306,261,275,282,252,270,250,295,275,269,279],
[234,290,253,0,289,251,260,285,221,283,248,288,280,243,266],
[222,233,194,211,0,210,253,225,192,221,215,242,239,234,230],
[279,300,239,249,290,0,289,314,260,277,257,308,315,274,280],
[256,265,225,240,247,211,0,273,249,242,221,258,278,261,224],
[236,247,218,215,275,186,227,0,212,230,211,247,241,223,232],
[284,306,248,279,308,240,251,288,0,261,228,304,287,281,250],
[267,269,230,217,279,223,258,270,239,0,270,255,283,264,268],
[248,282,250,252,285,243,279,289,272,230,0,257,252,260,266],
[237,262,205,212,258,192,242,253,196,245,243,0,250,225,233],
[249,238,225,220,261,185,222,259,213,217,248,250,0,243,223],
[241,290,231,257,266,226,239,277,219,236,240,275,257,0,236],
[292,261,221,234,270,220,276,268,250,232,234,267,277,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 64, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,238,231,233,214,228,226,257,232,248,237,225,218,235],
[270,0,265,265,253,244,255,259,261,250,251,266,265,241,253],
[262,235,0,251,238,220,238,238,238,226,238,226,241,232,232],
[269,235,249,0,250,227,255,264,252,246,247,241,248,230,247],
[267,247,262,250,0,248,239,247,254,238,246,242,253,245,248],
[286,256,280,273,252,0,249,255,261,239,258,263,259,250,248],
[272,245,262,245,261,251,0,261,244,229,252,247,263,243,259],
[274,241,262,236,253,245,239,0,251,237,237,242,250,243,219],
[243,239,262,248,246,239,256,249,0,238,248,252,239,230,239],
[268,250,274,254,262,261,271,263,262,0,255,274,258,243,257],
[252,249,262,253,254,242,248,263,252,245,0,248,252,238,243],
[263,234,274,259,258,237,253,258,248,226,252,0,252,231,253],
[275,235,259,252,247,241,237,250,261,242,248,248,0,226,236],
[282,259,268,270,255,250,257,257,270,257,262,269,274,0,270],
[265,247,268,253,252,252,241,281,261,243,257,247,264,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 65, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,242,232,251,249,238,242,239,263,252,247,260,245,244],
[258,0,256,254,245,257,255,261,238,254,265,252,267,265,244],
[258,244,0,261,249,243,246,253,241,269,258,234,250,257,244],
[268,246,239,0,235,240,254,245,239,256,250,244,260,257,234],
[249,255,251,265,0,255,256,268,261,266,263,263,268,254,248],
[251,243,257,260,245,0,251,255,244,247,240,251,253,266,239],
[262,245,254,246,244,249,0,248,242,254,247,239,253,246,245],
[258,239,247,255,232,245,252,0,233,268,242,249,250,249,237],
[261,262,259,261,239,256,258,267,0,268,258,272,256,261,259],
[237,246,231,244,234,253,246,232,232,0,241,226,249,241,228],
[248,235,242,250,237,260,253,258,242,259,0,238,264,255,232],
[253,248,266,256,237,249,261,251,228,274,262,0,259,256,240],
[240,233,250,240,232,247,247,250,244,251,236,241,0,257,240],
[255,235,243,243,246,234,254,251,239,259,245,244,243,0,250],
[256,256,256,266,252,261,255,263,241,272,268,260,260,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 66, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,249,234,273,255,231,245,272,242,250,248,250,262,265],
[240,0,250,223,274,247,245,247,258,246,237,236,256,253,256],
[251,250,0,243,295,254,267,247,275,245,256,240,253,251,259],
[266,277,257,0,294,277,256,261,288,250,279,239,269,268,276],
[227,226,205,206,0,237,214,224,224,203,226,202,227,236,230],
[245,253,246,223,263,0,233,239,253,226,230,238,241,254,254],
[269,255,233,244,286,267,0,260,283,232,255,242,245,262,263],
[255,253,253,239,276,261,240,0,272,229,258,231,243,244,250],
[228,242,225,212,276,247,217,228,0,236,244,226,227,248,243],
[258,254,255,250,297,274,268,271,264,0,264,261,258,270,267],
[250,263,244,221,274,270,245,242,256,236,0,233,238,245,255],
[252,264,260,261,298,262,258,269,274,239,267,0,261,263,252],
[250,244,247,231,273,259,255,257,273,242,262,239,0,260,284],
[238,247,249,232,264,246,238,256,252,230,255,237,240,0,265],
[235,244,241,224,270,246,237,250,257,233,245,248,216,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 67, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,184,219,207,213,196,213,229,170,257,253,200,199,249],
[293,0,204,265,243,227,237,214,193,201,290,254,222,244,272],
[316,296,0,293,276,293,269,253,248,263,318,303,227,257,305],
[281,235,207,0,193,229,218,201,245,193,253,314,247,239,267],
[293,257,224,307,0,234,199,171,210,191,263,242,197,258,243],
[287,273,207,271,266,0,244,253,219,210,279,306,229,240,276],
[304,263,231,282,301,256,0,259,280,213,267,285,239,201,298],
[287,286,247,299,329,247,241,0,280,233,241,265,254,279,300],
[271,307,252,255,290,281,220,220,0,213,268,257,227,286,249],
[330,299,237,307,309,290,287,267,287,0,268,303,281,293,293],
[243,210,182,247,237,221,233,259,232,232,0,281,201,269,249],
[247,246,197,186,258,194,215,235,243,197,219,0,210,195,221],
[300,278,273,253,303,271,261,246,273,219,299,290,0,266,322],
[301,256,243,261,242,260,299,221,214,207,231,305,234,0,285],
[251,228,195,233,257,224,202,200,251,207,251,279,178,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 68, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,236,223,230,218,218,232,222,211,241,229,232,229,217],
[269,0,243,266,269,256,256,232,271,248,276,251,237,277,235],
[264,257,0,254,270,237,247,232,262,235,271,265,241,263,258],
[277,234,246,0,277,267,243,237,243,223,273,270,251,252,252],
[270,231,230,223,0,277,217,262,249,223,247,249,246,273,251],
[282,244,263,233,223,0,229,234,251,227,258,267,219,272,253],
[282,244,253,257,283,271,0,251,267,245,256,265,259,269,265],
[268,268,268,263,238,266,249,0,286,234,281,268,252,269,244],
[278,229,238,257,251,249,233,214,0,218,264,247,253,268,251],
[289,252,265,277,277,273,255,266,282,0,281,286,251,280,248],
[259,224,229,227,253,242,244,219,236,219,0,222,245,262,213],
[271,249,235,230,251,233,235,232,253,214,278,0,225,274,235],
[268,263,259,249,254,281,241,248,247,249,255,275,0,283,241],
[271,223,237,248,227,228,231,231,232,220,238,226,217,0,217],
[283,265,242,248,249,247,235,256,249,252,287,265,259,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 69, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,232,228,229,244,248,223,240,233,234,212,236,227,244],
[286,0,233,242,247,263,262,266,269,259,252,251,256,269,263],
[268,267,0,259,256,254,261,256,265,252,271,260,265,252,237],
[272,258,241,0,236,253,250,255,260,246,267,234,252,258,250],
[271,253,244,264,0,248,238,267,255,245,249,227,239,243,249],
[256,237,246,247,252,0,244,261,246,237,247,250,251,239,244],
[252,238,239,250,262,256,0,264,253,250,253,246,235,247,248],
[277,234,244,245,233,239,236,0,267,232,265,225,238,236,237],
[260,231,235,240,245,254,247,233,0,240,256,245,263,235,236],
[267,241,248,254,255,263,250,268,260,0,265,234,246,249,255],
[266,248,229,233,251,253,247,235,244,235,0,219,231,244,237],
[288,249,240,266,273,250,254,275,255,266,281,0,264,256,246],
[264,244,235,248,261,249,265,262,237,254,269,236,0,258,263],
[273,231,248,242,257,261,253,264,265,251,256,244,242,0,255],
[256,237,263,250,251,256,252,263,264,245,263,254,237,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 70, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,325,193,213,198,241,209,232,138,231,229,205,239,178],
[289,0,304,222,251,225,256,221,282,261,263,260,260,244,246],
[175,196,0,179,225,146,200,224,248,170,208,220,201,207,181],
[307,278,321,0,279,274,220,307,309,278,307,325,323,302,253],
[287,249,275,221,0,193,240,241,287,259,235,279,233,266,182],
[302,275,354,226,307,0,241,287,326,245,303,318,272,348,263],
[259,244,300,280,260,259,0,272,304,269,250,247,217,302,189],
[291,279,276,193,259,213,228,0,289,262,280,248,268,232,247],
[268,218,252,191,213,174,196,211,0,204,206,239,187,297,170],
[362,239,330,222,241,255,231,238,296,0,321,293,255,313,249],
[269,237,292,193,265,197,250,220,294,179,0,230,239,258,239],
[271,240,280,175,221,182,253,252,261,207,270,0,231,273,206],
[295,240,299,177,267,228,283,232,313,245,261,269,0,253,247],
[261,256,293,198,234,152,198,268,203,187,242,227,247,0,220],
[322,254,319,247,318,237,311,253,330,251,261,294,253,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 71, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,252,296,251,260,276,270,268,264,265,297,243,241,254],
[261,0,248,262,286,239,290,252,285,262,203,260,251,239,228],
[248,252,0,299,237,232,263,237,272,265,246,269,235,266,225],
[204,238,201,0,208,185,221,205,221,227,182,239,213,223,199],
[249,214,263,292,0,242,282,275,252,273,238,300,239,239,234],
[240,261,268,315,258,0,266,245,270,296,243,268,248,226,259],
[224,210,237,279,218,234,0,254,238,246,228,256,236,233,240],
[230,248,263,295,225,255,246,0,250,254,225,259,241,232,238],
[232,215,228,279,248,230,262,250,0,249,218,300,218,253,243],
[236,238,235,273,227,204,254,246,251,0,244,271,237,222,224],
[235,297,254,318,262,257,272,275,282,256,0,286,258,279,262],
[203,240,231,261,200,232,244,241,200,229,214,0,225,183,220],
[257,249,265,287,261,252,264,259,282,263,242,275,0,247,240],
[259,261,234,277,261,274,267,268,247,278,221,317,253,0,236],
[246,272,275,301,266,241,260,262,257,276,238,280,260,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 72, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,271,268,258,230,258,240,247,258,243,238,225,275,233],
[244,0,233,243,235,258,228,238,213,221,255,222,216,263,218],
[229,267,0,251,260,229,231,232,239,248,238,228,246,254,215],
[232,257,249,0,253,239,226,228,204,237,246,197,228,257,227],
[242,265,240,247,0,230,259,245,238,244,256,216,240,251,243],
[270,242,271,261,270,0,234,246,246,255,266,230,239,245,234],
[242,272,269,274,241,266,0,248,248,235,259,248,253,265,245],
[260,262,268,272,255,254,252,0,241,253,271,250,266,255,261],
[253,287,261,296,262,254,252,259,0,262,269,246,239,274,251],
[242,279,252,263,256,245,265,247,238,0,283,252,247,257,271],
[257,245,262,254,244,234,241,229,231,217,0,231,232,247,248],
[262,278,272,303,284,270,252,250,254,248,269,0,254,265,262],
[275,284,254,272,260,261,247,234,261,253,268,246,0,252,255],
[225,237,246,243,249,255,235,245,226,243,253,235,248,0,248],
[267,282,285,273,257,266,255,239,249,229,252,238,245,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 73, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,263,258,258,260,262,270,267,243,262,251,250,239,256],
[235,0,252,253,235,249,251,268,240,241,268,233,250,246,257],
[237,248,0,252,261,252,251,257,250,240,254,242,257,252,255],
[242,247,248,0,245,252,243,241,249,238,269,241,233,244,246],
[242,265,239,255,0,267,256,265,244,240,247,241,252,240,239],
[240,251,248,248,233,0,255,258,246,241,252,224,246,231,249],
[238,249,249,257,244,245,0,257,243,235,266,232,253,257,245],
[230,232,243,259,235,242,243,0,239,232,253,231,230,240,248],
[233,260,250,251,256,254,257,261,0,248,259,242,251,254,248],
[257,259,260,262,260,259,265,268,252,0,259,240,248,243,257],
[238,232,246,231,253,248,234,247,241,241,0,231,241,240,233],
[249,267,258,259,259,276,268,269,258,260,269,0,260,248,248],
[250,250,243,267,248,254,247,270,249,252,259,240,0,249,249],
[261,254,248,256,260,269,243,260,246,257,260,252,251,0,247],
[244,243,245,254,261,251,255,252,252,243,267,252,251,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 74, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,268,258,257,249,276,256,254,287,251,269,265,276,269],
[234,0,247,250,256,246,251,241,252,264,249,269,249,249,241],
[232,253,0,261,258,244,229,221,244,244,229,256,239,242,254],
[242,250,239,0,244,242,258,249,232,258,243,253,249,243,261],
[243,244,242,256,0,238,243,239,237,248,227,262,233,248,254],
[251,254,256,258,262,0,254,259,255,265,261,258,252,247,247],
[224,249,271,242,257,246,0,239,254,248,240,262,271,244,240],
[244,259,279,251,261,241,261,0,245,272,257,264,252,249,251],
[246,248,256,268,263,245,246,255,0,270,246,271,261,247,246],
[213,236,256,242,252,235,252,228,230,0,233,244,228,237,241],
[249,251,271,257,273,239,260,243,254,267,0,275,255,254,267],
[231,231,244,247,238,242,238,236,229,256,225,0,231,239,231],
[235,251,261,251,267,248,229,248,239,272,245,269,0,260,259],
[224,251,258,257,252,253,256,251,253,263,246,261,240,0,247],
[231,259,246,239,246,253,260,249,254,259,233,269,241,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 75, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,269,279,280,261,280,272,271,239,260,231,250,260,257],
[260,0,309,311,271,274,229,250,281,281,264,279,286,275,247],
[231,191,0,225,255,216,220,249,186,209,243,228,213,239,187],
[221,189,275,0,268,256,242,259,233,202,260,246,237,232,217],
[220,229,245,232,0,251,201,256,197,191,256,243,240,216,212],
[239,226,284,244,249,0,209,276,211,228,257,290,255,256,231],
[220,271,280,258,299,291,0,308,249,238,264,242,264,252,270],
[228,250,251,241,244,224,192,0,174,268,230,252,236,259,215],
[229,219,314,267,303,289,251,326,0,269,293,273,259,298,313],
[261,219,291,298,309,272,262,232,231,0,231,255,264,294,240],
[240,236,257,240,244,243,236,270,207,269,0,243,259,250,243],
[269,221,272,254,257,210,258,248,227,245,257,0,275,247,236],
[250,214,287,263,260,245,236,264,241,236,241,225,0,254,217],
[240,225,261,268,284,244,248,241,202,206,250,253,246,0,253],
[243,253,313,283,288,269,230,285,187,260,257,264,283,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 76, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,251,250,294,262,288,265,263,269,252,281,272,250,247],
[238,0,231,241,255,257,260,237,218,245,246,268,262,238,235],
[249,269,0,247,269,244,298,254,252,290,240,280,275,278,257],
[250,259,253,0,248,263,260,252,253,259,242,260,270,236,253],
[206,245,231,252,0,245,264,217,245,258,235,255,250,250,218],
[238,243,256,237,255,0,265,240,232,255,231,252,265,245,243],
[212,240,202,240,236,235,0,224,236,264,244,244,234,228,228],
[235,263,246,248,283,260,276,0,249,261,250,262,253,244,237],
[237,282,248,247,255,268,264,251,0,261,243,267,253,249,249],
[231,255,210,241,242,245,236,239,239,0,234,257,233,233,242],
[248,254,260,258,265,269,256,250,257,266,0,282,266,257,278],
[219,232,220,240,245,248,256,238,233,243,218,0,238,223,218],
[228,238,225,230,250,235,266,247,247,267,234,262,0,252,218],
[250,262,222,264,250,255,272,256,251,267,243,277,248,0,248],
[253,265,243,247,282,257,272,263,251,258,222,282,282,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 77, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,262,230,270,237,246,267,269,254,264,253,232,261,262],
[228,0,252,235,247,247,245,259,253,228,245,251,217,257,267],
[238,248,0,241,249,244,220,255,247,235,245,249,241,241,256],
[270,265,259,0,254,245,245,275,280,236,252,246,249,259,263],
[230,253,251,246,0,237,226,259,260,232,263,242,227,252,272],
[263,253,256,255,263,0,253,268,259,243,251,258,236,259,277],
[254,255,280,255,274,247,0,276,278,236,265,257,250,260,280],
[233,241,245,225,241,232,224,0,263,241,229,231,226,241,265],
[231,247,253,220,240,241,222,237,0,224,248,234,243,247,254],
[246,272,265,264,268,257,264,259,276,0,275,252,248,266,272],
[236,255,255,248,237,249,235,271,252,225,0,241,233,249,268],
[247,249,251,254,258,242,243,269,266,248,259,0,244,256,265],
[268,283,259,251,273,264,250,274,257,252,267,256,0,260,271],
[239,243,259,241,248,241,240,259,253,234,251,244,240,0,255],
[238,233,244,237,228,223,220,235,246,228,232,235,229,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 78, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,249,255,258,263,262,265,235,250,238,245,268,270,261],
[247,0,253,269,295,266,242,267,270,252,250,247,278,266,294],
[251,247,0,261,233,258,245,248,256,238,245,230,272,235,269],
[245,231,239,0,253,236,247,256,245,241,242,237,268,230,252],
[242,205,267,247,0,237,238,268,239,233,242,240,266,242,253],
[237,234,242,264,263,0,236,255,241,230,228,222,249,237,269],
[238,258,255,253,262,264,0,239,226,249,227,238,276,249,261],
[235,233,252,244,232,245,261,0,242,247,227,232,256,240,265],
[265,230,244,255,261,259,274,258,0,248,232,242,277,265,265],
[250,248,262,259,267,270,251,253,252,0,240,253,268,246,264],
[262,250,255,258,258,272,273,273,268,260,0,252,268,267,270],
[255,253,270,263,260,278,262,268,258,247,248,0,267,270,283],
[232,222,228,232,234,251,224,244,223,232,232,233,0,232,252],
[230,234,265,270,258,263,251,260,235,254,233,230,268,0,256],
[239,206,231,248,247,231,239,235,235,236,230,217,248,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 79, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,264,254,272,255,255,258,272,267,261,261,266,247,252],
[239,0,254,240,253,234,238,253,244,248,252,240,241,230,245],
[236,246,0,236,256,242,237,246,243,236,244,251,245,239,226],
[246,260,264,0,251,244,241,257,245,265,252,248,241,241,234],
[228,247,244,249,0,231,244,245,243,246,240,240,234,226,240],
[245,266,258,256,269,0,248,265,268,277,260,254,247,247,271],
[245,262,263,259,256,252,0,252,254,272,251,242,251,262,245],
[242,247,254,243,255,235,248,0,247,250,248,248,237,246,240],
[228,256,257,255,257,232,246,253,0,261,280,245,237,242,232],
[233,252,264,235,254,223,228,250,239,0,239,241,225,231,235],
[239,248,256,248,260,240,249,252,220,261,0,244,233,243,245],
[239,260,249,252,260,246,258,252,255,259,256,0,251,247,245],
[234,259,255,259,266,253,249,263,263,275,267,249,0,251,245],
[253,270,261,259,274,253,238,254,258,269,257,253,249,0,248],
[248,255,274,266,260,229,255,260,268,265,255,255,255,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 80, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,249,256,247,261,265,229,243,234,259,251,241,257,236],
[245,0,233,244,244,251,243,226,255,203,237,259,285,253,232],
[251,267,0,267,240,258,264,237,288,249,237,286,288,281,253],
[244,256,233,0,222,241,266,227,257,224,240,241,254,243,220],
[253,256,260,278,0,270,264,231,271,252,283,280,264,261,249],
[239,249,242,259,230,0,260,239,244,232,240,286,253,258,237],
[235,257,236,234,236,240,0,217,262,231,234,253,237,254,207],
[271,274,263,273,269,261,283,0,266,256,264,273,270,272,247],
[257,245,212,243,229,256,238,234,0,220,239,244,253,249,216],
[266,297,251,276,248,268,269,244,280,0,264,279,275,289,247],
[241,263,263,260,217,260,266,236,261,236,0,264,261,252,229],
[249,241,214,259,220,214,247,227,256,221,236,0,253,236,206],
[259,215,212,246,236,247,263,230,247,225,239,247,0,253,214],
[243,247,219,257,239,242,246,228,251,211,248,264,247,0,243],
[264,268,247,280,251,263,293,253,284,253,271,294,286,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 81, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,228,254,242,243,252,251,244,244,253,268,257,247,246],
[254,0,241,254,250,231,242,239,242,249,256,280,253,254,258],
[272,259,0,278,250,256,273,268,258,263,259,270,275,273,272],
[246,246,222,0,238,232,251,253,250,252,246,270,252,242,269],
[258,250,250,262,0,243,260,248,258,224,251,273,268,246,259],
[257,269,244,268,257,0,265,264,263,262,272,285,283,277,275],
[248,258,227,249,240,235,0,250,243,244,233,256,250,239,251],
[249,261,232,247,252,236,250,0,250,247,250,259,246,243,255],
[256,258,242,250,242,237,257,250,0,259,251,273,275,265,265],
[256,251,237,248,276,238,256,253,241,0,243,259,270,248,242],
[247,244,241,254,249,228,267,250,249,257,0,276,252,252,261],
[232,220,230,230,227,215,244,241,227,241,224,0,228,232,239],
[243,247,225,248,232,217,250,254,225,230,248,272,0,248,257],
[253,246,227,258,254,223,261,257,235,252,248,268,252,0,250],
[254,242,228,231,241,225,249,245,235,258,239,261,243,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 82, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,158,147,248,112,214,212,140,198,260,144,146,171,205],
[310,0,324,274,340,273,334,225,335,278,375,311,283,310,321],
[342,176,0,200,301,175,230,145,269,230,292,243,168,356,233],
[353,226,300,0,285,263,312,248,348,283,340,320,282,316,324],
[252,160,199,215,0,193,116,217,291,142,310,212,136,172,198],
[388,227,325,237,307,0,251,221,314,298,398,321,189,302,303],
[286,166,270,188,384,249,0,230,244,223,301,295,258,275,347],
[288,275,355,252,283,279,270,0,267,335,388,277,217,315,305],
[360,165,231,152,209,186,256,233,0,198,239,303,202,256,277],
[302,222,270,217,358,202,277,165,302,0,361,391,154,294,329],
[240,125,208,160,190,102,199,112,261,139,0,204,221,204,209],
[356,189,257,180,288,179,205,223,197,109,296,0,171,285,170],
[354,217,332,218,364,311,242,283,298,346,279,329,0,315,283],
[329,190,144,184,328,198,225,185,244,206,296,215,185,0,277],
[295,179,267,176,302,197,153,195,223,171,291,330,217,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 83, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,264,260,234,223,301,223,242,222,218,217,231,223,235],
[295,0,278,265,263,247,307,271,288,280,252,272,223,223,246],
[236,222,0,258,245,204,273,257,275,203,232,240,228,218,230],
[240,235,242,0,226,221,282,247,266,231,231,260,232,238,210],
[266,237,255,274,0,234,298,244,265,251,237,272,236,230,227],
[277,253,296,279,266,0,298,288,271,260,249,270,267,228,275],
[199,193,227,218,202,202,0,207,239,183,214,229,194,169,216],
[277,229,243,253,256,212,293,0,273,250,262,262,225,219,259],
[258,212,225,234,235,229,261,227,0,214,245,244,227,221,240],
[278,220,297,269,249,240,317,250,286,0,220,240,201,235,244],
[282,248,268,269,263,251,286,238,255,280,0,274,265,228,249],
[283,228,260,240,228,230,271,238,256,260,226,0,239,200,237],
[269,277,272,268,264,233,306,275,273,299,235,261,0,244,256],
[277,277,282,262,270,272,331,281,279,265,272,300,256,0,225],
[265,254,270,290,273,225,284,241,260,256,251,263,244,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 84, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,241,264,268,263,282,260,263,272,244,249,291,277,257],
[251,0,253,254,258,254,256,268,267,243,245,293,288,292,259],
[259,247,0,273,276,282,286,271,268,233,257,275,276,289,242],
[236,246,227,0,272,254,252,278,264,282,263,248,271,282,247],
[232,242,224,228,0,244,248,269,233,229,223,240,248,252,227],
[237,246,218,246,256,0,258,281,255,237,201,279,283,267,265],
[218,244,214,248,252,242,0,231,231,236,218,230,249,274,248],
[240,232,229,222,231,219,269,0,239,267,232,259,281,274,234],
[237,233,232,236,267,245,269,261,0,235,207,250,279,304,245],
[228,257,267,218,271,263,264,233,265,0,236,229,261,280,245],
[256,255,243,237,277,299,282,268,293,264,0,250,275,313,254],
[251,207,225,252,260,221,270,241,250,271,250,0,248,265,216],
[209,212,224,229,252,217,251,219,221,239,225,252,0,242,223],
[223,208,211,218,248,233,226,226,196,220,187,235,258,0,205],
[243,241,258,253,273,235,252,266,255,255,246,284,277,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 85, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,293,254,243,253,288,287,251,278,257,248,259,258,255],
[259,0,268,256,232,273,262,280,266,275,261,254,260,239,253],
[207,232,0,227,186,207,232,240,206,228,212,219,237,221,205],
[246,244,273,0,227,254,252,269,240,277,259,250,255,261,240],
[257,268,314,273,0,254,266,300,261,299,263,275,271,249,268],
[247,227,293,246,246,0,247,246,225,262,264,244,243,252,228],
[212,238,268,248,234,253,0,239,225,264,229,243,252,226,216],
[213,220,260,231,200,254,261,0,219,223,234,246,225,249,241],
[249,234,294,260,239,275,275,281,0,257,241,255,262,268,268],
[222,225,272,223,201,238,236,277,243,0,241,218,253,221,232],
[243,239,288,241,237,236,271,266,259,259,0,252,250,232,254],
[252,246,281,250,225,256,257,254,245,282,248,0,273,235,251],
[241,240,263,245,229,257,248,275,238,247,250,227,0,236,237],
[242,261,279,239,251,248,274,251,232,279,268,265,264,0,257],
[245,247,295,260,232,272,284,259,232,268,246,249,263,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 86, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,282,234,253,234,295,278,256,289,274,233,260,279,266],
[245,0,243,208,223,215,284,242,243,255,228,230,258,233,245],
[218,257,0,237,237,228,277,252,250,278,240,241,254,259,260],
[266,292,263,0,252,250,301,255,265,293,259,255,283,270,294],
[247,277,263,248,0,240,275,269,260,278,252,251,252,251,252],
[266,285,272,250,260,0,298,274,296,290,252,251,264,271,270],
[205,216,223,199,225,202,0,210,223,236,201,206,215,220,216],
[222,258,248,245,231,226,290,0,258,268,238,222,259,261,256],
[244,257,250,235,240,204,277,242,0,265,249,222,248,246,258],
[211,245,222,207,222,210,264,232,235,0,205,220,240,229,222],
[226,272,260,241,248,248,299,262,251,295,0,240,258,257,255],
[267,270,259,245,249,249,294,278,278,280,260,0,287,270,256],
[240,242,246,217,248,236,285,241,252,260,242,213,0,255,259],
[221,267,241,230,249,229,280,239,254,271,243,230,245,0,257],
[234,255,240,206,248,230,284,244,242,278,245,244,241,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 87, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,226,250,287,260,289,299,250,273,248,250,268,291,245],
[204,0,200,231,250,256,250,270,214,261,238,222,249,254,222],
[274,300,0,225,268,295,287,300,249,271,236,254,274,260,268],
[250,269,275,0,281,285,299,298,268,228,252,250,280,280,268],
[213,250,232,219,0,246,253,263,243,255,231,210,256,243,208],
[240,244,205,215,254,0,250,264,233,235,219,222,244,247,242],
[211,250,213,201,247,250,0,276,231,260,237,227,245,261,226],
[201,230,200,202,237,236,224,0,251,268,239,203,244,239,216],
[250,286,251,232,257,267,269,249,0,258,235,246,268,277,279],
[227,239,229,272,245,265,240,232,242,0,238,235,264,273,225],
[252,262,264,248,269,281,263,261,265,262,0,247,274,269,249],
[250,278,246,250,290,278,273,297,254,265,253,0,260,275,277],
[232,251,226,220,244,256,255,256,232,236,226,240,0,267,215],
[209,246,240,220,257,253,239,261,223,227,231,225,233,0,243],
[255,278,232,232,292,258,274,284,221,275,251,223,285,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 88, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,263,244,265,258,240,262,256,267,262,244,270,262,250],
[242,0,251,235,239,236,230,234,246,266,248,237,248,249,237],
[237,249,0,231,256,240,229,251,246,252,254,235,246,247,245],
[256,265,269,0,276,267,245,281,263,272,265,250,263,263,254],
[235,261,244,224,0,241,228,241,249,243,258,239,249,246,240],
[242,264,260,233,259,0,236,258,253,270,253,246,259,243,239],
[260,270,271,255,272,264,0,250,264,286,271,242,267,263,264],
[238,266,249,219,259,242,250,0,260,276,275,262,233,250,255],
[244,254,254,237,251,247,236,240,0,255,244,236,250,254,229],
[233,234,248,228,257,230,214,224,245,0,250,229,242,243,236],
[238,252,246,235,242,247,229,225,256,250,0,236,239,258,242],
[256,263,265,250,261,254,258,238,264,271,264,0,263,260,254],
[230,252,254,237,251,241,233,267,250,258,261,237,0,255,252],
[238,251,253,237,254,257,237,250,246,257,242,240,245,0,242],
[250,263,255,246,260,261,236,245,271,264,258,246,248,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 89, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,257,254,272,262,242,239,255,248,248,257,241,257,233],
[242,0,260,242,239,255,221,251,259,246,239,242,234,257,232],
[243,240,0,225,260,241,217,242,240,239,248,246,239,252,243],
[246,258,275,0,265,247,258,247,249,266,261,227,255,254,254],
[228,261,240,235,0,255,231,245,239,244,233,233,250,239,246],
[238,245,259,253,245,0,268,264,256,273,246,247,237,278,255],
[258,279,283,242,269,232,0,282,260,253,258,267,269,277,259],
[261,249,258,253,255,236,218,0,234,248,252,257,244,280,242],
[245,241,260,251,261,244,240,266,0,256,267,229,265,282,255],
[252,254,261,234,256,227,247,252,244,0,265,246,263,257,234],
[252,261,252,239,267,254,242,248,233,235,0,245,255,253,245],
[243,258,254,273,267,253,233,243,271,254,255,0,263,275,252],
[259,266,261,245,250,263,231,256,235,237,245,237,0,259,253],
[243,243,248,246,261,222,223,220,218,243,247,225,241,0,222],
[267,268,257,246,254,245,241,258,245,266,255,248,247,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 90, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,241,270,256,254,252,258,250,253,255,258,248,255,268],
[244,0,233,229,241,244,222,242,252,242,234,256,250,240,240],
[259,267,0,238,243,258,236,262,259,267,252,267,243,250,257],
[230,271,262,0,250,241,233,246,248,261,244,265,258,241,255],
[244,259,257,250,0,258,250,250,256,250,247,257,252,257,264],
[246,256,242,259,242,0,228,243,255,238,247,256,240,251,252],
[248,278,264,267,250,272,0,279,260,271,270,281,246,274,271],
[242,258,238,254,250,257,221,0,252,251,255,258,248,260,254],
[250,248,241,252,244,245,240,248,0,254,258,262,249,232,243],
[247,258,233,239,250,262,229,249,246,0,242,269,232,256,249],
[245,266,248,256,253,253,230,245,242,258,0,270,253,261,262],
[242,244,233,235,243,244,219,242,238,231,230,0,240,251,244],
[252,250,257,242,248,260,254,252,251,268,247,260,0,255,240],
[245,260,250,259,243,249,226,240,268,244,239,249,245,0,252],
[232,260,243,245,236,248,229,246,257,251,238,256,260,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 91, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,238,252,245,257,245,250,288,250,219,259,261,193,308],
[256,0,235,246,212,294,254,275,244,255,240,239,267,236,288],
[262,265,0,269,226,257,226,247,226,253,259,234,227,238,273],
[248,254,231,0,266,278,230,262,230,208,216,209,239,247,272],
[255,288,274,234,0,300,252,249,253,247,238,235,248,242,303],
[243,206,243,222,200,0,225,244,235,219,237,216,235,210,270],
[255,246,274,270,248,275,0,248,238,218,238,209,227,254,292],
[250,225,253,238,251,256,252,0,271,289,267,245,220,270,296],
[212,256,274,270,247,265,262,229,0,242,208,233,237,209,227],
[250,245,247,292,253,281,282,211,258,0,255,250,219,260,280],
[281,260,241,284,262,263,262,233,292,245,0,284,210,232,245],
[241,261,266,291,265,284,291,255,267,250,216,0,275,212,293],
[239,233,273,261,252,265,273,280,263,281,290,225,0,214,270],
[307,264,262,253,258,290,246,230,291,240,268,288,286,0,294],
[192,212,227,228,197,230,208,204,273,220,255,207,230,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 92, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,260,250,263,268,262,255,255,255,267,269,254,257,271],
[239,0,247,251,247,259,255,260,242,248,261,262,266,240,253],
[240,253,0,255,260,253,248,244,241,240,247,250,263,231,248],
[250,249,245,0,269,254,255,243,256,254,257,271,262,238,257],
[237,253,240,231,0,254,258,228,250,234,251,242,249,243,248],
[232,241,247,246,246,0,246,255,254,239,237,251,273,236,247],
[238,245,252,245,242,254,0,253,265,260,258,259,240,243,256],
[245,240,256,257,272,245,247,0,241,240,259,250,248,242,247],
[245,258,259,244,250,246,235,259,0,251,254,263,258,256,260],
[245,252,260,246,266,261,240,260,249,0,257,279,259,243,262],
[233,239,253,243,249,263,242,241,246,243,0,254,259,229,262],
[231,238,250,229,258,249,241,250,237,221,246,0,251,239,261],
[246,234,237,238,251,227,260,252,242,241,241,249,0,232,241],
[243,260,269,262,257,264,257,258,244,257,271,261,268,0,253],
[229,247,252,243,252,253,244,253,240,238,238,239,259,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 93, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,301,203,235,228,269,280,323,252,269,275,326,283,266],
[259,0,269,221,248,261,293,257,295,243,295,265,316,265,287],
[199,231,0,203,199,236,275,227,249,240,245,264,278,286,239],
[297,279,297,0,195,275,279,292,271,311,242,292,321,301,283],
[265,252,301,305,0,204,259,302,293,247,269,275,312,316,332],
[272,239,264,225,296,0,280,255,242,262,267,289,352,293,303],
[231,207,225,221,241,220,0,232,256,246,193,222,295,197,204],
[220,243,273,208,198,245,268,0,243,231,264,289,299,289,260],
[177,205,251,229,207,258,244,257,0,264,218,229,243,277,262],
[248,257,260,189,253,238,254,269,236,0,276,257,279,319,243],
[231,205,255,258,231,233,307,236,282,224,0,266,279,258,281],
[225,235,236,208,225,211,278,211,271,243,234,0,264,286,250],
[174,184,222,179,188,148,205,201,257,221,221,236,0,222,233],
[217,235,214,199,184,207,303,211,223,181,242,214,278,0,293],
[234,213,261,217,168,197,296,240,238,257,219,250,267,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 94, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,209,190,208,211,162,235,175,196,222,199,187,136,232],
[302,0,212,272,259,215,210,232,221,211,187,249,249,214,217],
[291,288,0,268,234,288,243,295,209,280,251,283,230,259,249],
[310,228,232,0,231,265,237,266,158,246,242,235,226,205,203],
[292,241,266,269,0,219,241,251,218,243,235,242,254,211,230],
[289,285,212,235,281,0,224,286,215,257,245,244,240,247,245],
[338,290,257,263,259,276,0,307,278,262,258,267,237,211,267],
[265,268,205,234,249,214,193,0,155,222,218,257,193,209,250],
[325,279,291,342,282,285,222,345,0,280,300,295,278,243,236],
[304,289,220,254,257,243,238,278,220,0,227,262,273,259,261],
[278,313,249,258,265,255,242,282,200,273,0,217,235,222,277],
[301,251,217,265,258,256,233,243,205,238,283,0,248,256,259],
[313,251,270,274,246,260,263,307,222,227,265,252,0,231,249],
[364,286,241,295,289,253,289,291,257,241,278,244,269,0,231],
[268,283,251,297,270,255,233,250,264,239,223,241,251,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 95, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,263,248,284,252,266,268,274,263,259,258,264,257,268],
[243,0,272,239,265,256,262,266,264,258,245,246,240,244,250],
[237,228,0,233,256,244,252,244,249,240,237,230,233,221,248],
[252,261,267,0,275,269,257,251,276,255,250,249,253,260,266],
[216,235,244,225,0,244,243,239,229,241,225,228,232,228,229],
[248,244,256,231,256,0,249,261,264,260,243,250,259,241,257],
[234,238,248,243,257,251,0,255,256,254,236,252,240,244,260],
[232,234,256,249,261,239,245,0,254,253,234,238,250,249,260],
[226,236,251,224,271,236,244,246,0,240,233,224,246,228,258],
[237,242,260,245,259,240,246,247,260,0,242,250,252,234,246],
[241,255,263,250,275,257,264,266,267,258,0,250,251,240,259],
[242,254,270,251,272,250,248,262,276,250,250,0,238,252,264],
[236,260,267,247,268,241,260,250,254,248,249,262,0,240,251],
[243,256,279,240,272,259,256,251,272,266,260,248,260,0,260],
[232,250,252,234,271,243,240,240,242,254,241,236,249,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 96, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,236,286,271,247,206,265,265,247,217,255,247,224,270],
[240,0,257,244,275,238,193,267,259,235,230,235,243,210,269],
[264,243,0,278,220,250,224,252,266,218,244,241,253,266,268],
[214,256,222,0,240,210,207,206,215,215,171,261,252,222,220],
[229,225,280,260,0,253,207,239,262,232,219,259,241,249,261],
[253,262,250,290,247,0,204,293,279,261,221,255,275,242,248],
[294,307,276,293,293,296,0,292,276,296,225,301,315,286,272],
[235,233,248,294,261,207,208,0,266,236,203,252,247,234,270],
[235,241,234,285,238,221,224,234,0,237,246,271,263,256,254],
[253,265,282,285,268,239,204,264,263,0,272,250,289,230,252],
[283,270,256,329,281,279,275,297,254,228,0,299,278,263,247],
[245,265,259,239,241,245,199,248,229,250,201,0,261,221,234],
[253,257,247,248,259,225,185,253,237,211,222,239,0,215,253],
[276,290,234,278,251,258,214,266,244,270,237,279,285,0,275],
[230,231,232,280,239,252,228,230,246,248,253,266,247,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 97, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,269,256,254,248,263,259,250,248,271,283,265,257,266],
[237,0,275,266,273,250,259,263,263,257,271,272,256,258,274],
[231,225,0,248,241,229,236,224,212,241,228,250,238,244,244],
[244,234,252,0,263,232,253,234,239,248,248,271,253,247,262],
[246,227,259,237,0,237,241,234,239,247,256,269,245,243,244],
[252,250,271,268,263,0,262,240,262,269,259,273,256,262,247],
[237,241,264,247,259,238,0,242,241,237,258,265,246,242,249],
[241,237,276,266,266,260,258,0,252,245,254,287,267,247,255],
[250,237,288,261,261,238,259,248,0,252,265,286,266,261,278],
[252,243,259,252,253,231,263,255,248,0,271,273,259,250,273],
[229,229,272,252,244,241,242,246,235,229,0,262,235,242,242],
[217,228,250,229,231,227,235,213,214,227,238,0,233,227,252],
[235,244,262,247,255,244,254,233,234,241,265,267,0,248,259],
[243,242,256,253,257,238,258,253,239,250,258,273,252,0,273],
[234,226,256,238,256,253,251,245,222,227,258,248,241,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 98, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,277,257,243,287,289,236,294,237,312,270,247,265,294],
[209,0,233,187,212,278,229,217,253,246,268,233,223,196,231],
[223,267,0,246,224,238,260,239,239,209,242,217,239,219,244],
[243,313,254,0,252,286,279,256,288,242,308,247,272,258,269],
[257,288,276,248,0,300,281,256,272,251,298,247,310,254,308],
[213,222,262,214,200,0,239,208,208,230,256,225,214,188,257],
[211,271,240,221,219,261,0,198,271,268,285,221,220,211,248],
[264,283,261,244,244,292,302,0,295,266,278,264,223,233,238],
[206,247,261,212,228,292,229,205,0,247,265,250,245,212,246],
[263,254,291,258,249,270,232,234,253,0,279,238,265,234,249],
[188,232,258,192,202,244,215,222,235,221,0,216,206,205,234],
[230,267,283,253,253,275,279,236,250,262,284,0,270,244,251],
[253,277,261,228,190,286,280,277,255,235,294,230,0,232,248],
[235,304,281,242,246,312,289,267,288,266,295,256,268,0,281],
[206,269,256,231,192,243,252,262,254,251,266,249,252,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 99, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,262,244,283,254,295,241,245,256,234,249,287,270,248],
[212,0,242,256,246,217,251,252,257,234,257,234,227,236,255],
[238,258,0,248,289,265,260,246,222,265,245,245,264,234,270],
[256,244,252,0,255,238,259,227,273,247,259,236,255,259,251],
[217,254,211,245,0,235,253,238,250,267,245,230,238,264,270],
[246,283,235,262,265,0,270,239,271,255,246,235,251,259,268],
[205,249,240,241,247,230,0,232,263,250,241,235,261,235,254],
[259,248,254,273,262,261,268,0,277,264,262,258,272,256,283],
[255,243,278,227,250,229,237,223,0,256,241,229,224,274,276],
[244,266,235,253,233,245,250,236,244,0,242,238,225,235,245],
[266,243,255,241,255,254,259,238,259,258,0,233,251,247,262],
[251,266,255,264,270,265,265,242,271,262,267,0,245,260,269],
[213,273,236,245,262,249,239,228,276,275,249,255,0,258,249],
[230,264,266,241,236,241,265,244,226,265,253,240,242,0,264],
[252,245,230,249,230,232,246,217,224,255,238,231,251,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 100, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,238,242,238,230,247,244,235,231,259,244,249,267,263],
[273,0,253,258,249,270,240,252,224,271,270,270,274,284,254],
[262,247,0,249,246,264,251,261,249,238,271,266,247,278,245],
[258,242,251,0,241,255,242,269,214,235,254,260,272,262,249],
[262,251,254,259,0,256,240,253,243,250,255,263,243,284,264],
[270,230,236,245,244,0,244,253,236,240,256,265,247,270,250],
[253,260,249,258,260,256,0,263,242,245,270,255,261,269,233],
[256,248,239,231,247,247,237,0,222,249,270,253,237,262,238],
[265,276,251,286,257,264,258,278,0,243,294,280,261,274,265],
[269,229,262,265,250,260,255,251,257,0,293,271,258,258,259],
[241,230,229,246,245,244,230,230,206,207,0,252,229,247,236],
[256,230,234,240,237,235,245,247,220,229,248,0,245,242,241],
[251,226,253,228,257,253,239,263,239,242,271,255,0,266,231],
[233,216,222,238,216,230,231,238,226,242,253,258,234,0,234],
[237,246,255,251,236,250,267,262,235,241,264,259,269,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 101, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,249,234,243,247,239,226,217,233,215,252,222,244,237],
[255,0,257,251,228,266,253,236,256,255,248,278,255,264,249],
[251,243,0,255,247,247,249,235,247,252,237,258,249,255,249],
[266,249,245,0,247,263,241,235,248,251,240,246,238,276,231],
[257,272,253,253,0,250,256,256,241,253,245,277,243,263,250],
[253,234,253,237,250,0,255,234,244,249,243,254,245,254,250],
[261,247,251,259,244,245,0,248,278,267,252,270,244,261,267],
[274,264,265,265,244,266,252,0,238,251,250,280,260,267,247],
[283,244,253,252,259,256,222,262,0,257,252,274,249,275,266],
[267,245,248,249,247,251,233,249,243,0,232,277,239,264,265],
[285,252,263,260,255,257,248,250,248,268,0,279,242,268,251],
[248,222,242,254,223,246,230,220,226,223,221,0,222,248,221],
[278,245,251,262,257,255,256,240,251,261,258,278,0,271,252],
[256,236,245,224,237,246,239,233,225,236,232,252,229,0,232],
[263,251,251,269,250,250,233,253,234,235,249,279,248,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 102, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,253,260,264,246,259,233,260,253,230,243,245,235,246],
[251,0,259,258,260,243,264,228,229,265,216,254,276,256,241],
[247,241,0,262,245,231,258,252,250,260,230,252,271,245,245],
[240,242,238,0,276,204,245,237,253,244,216,229,252,237,214],
[236,240,255,224,0,234,241,236,247,253,220,247,260,232,226],
[254,257,269,296,266,0,249,252,245,281,236,253,272,278,248],
[241,236,242,255,259,251,0,216,259,228,252,261,281,259,251],
[267,272,248,263,264,248,284,0,256,252,243,259,267,255,254],
[240,271,250,247,253,255,241,244,0,264,236,268,267,236,217],
[247,235,240,256,247,219,272,248,236,0,223,224,277,256,220],
[270,284,270,284,280,264,248,257,264,277,0,261,280,264,254],
[257,246,248,271,253,247,239,241,232,276,239,0,269,259,249],
[255,224,229,248,240,228,219,233,233,223,220,231,0,243,244],
[265,244,255,263,268,222,241,245,264,244,236,241,257,0,216],
[254,259,255,286,274,252,249,246,283,280,246,251,256,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 103, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,251,248,279,226,240,254,239,229,232,255,236,228,232],
[256,0,226,237,240,221,240,260,260,238,234,240,224,243,245],
[249,274,0,267,280,251,237,270,260,223,259,247,247,254,250],
[252,263,233,0,260,240,253,264,264,262,251,248,255,266,243],
[221,260,220,240,0,216,248,262,245,226,210,222,238,231,241],
[274,279,249,260,284,0,248,269,292,241,269,278,243,253,252],
[260,260,263,247,252,252,0,292,270,245,254,244,233,237,252],
[246,240,230,236,238,231,208,0,243,237,219,245,215,220,207],
[261,240,240,236,255,208,230,257,0,230,243,255,233,225,236],
[271,262,277,238,274,259,255,263,270,0,265,273,248,246,252],
[268,266,241,249,290,231,246,281,257,235,0,257,248,258,257],
[245,260,253,252,278,222,256,255,245,227,243,0,240,246,276],
[264,276,253,245,262,257,267,285,267,252,252,260,0,233,256],
[272,257,246,234,269,247,263,280,275,254,242,254,267,0,255],
[268,255,250,257,259,248,248,293,264,248,243,224,244,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 104, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,257,260,234,228,234,249,250,256,251,253,241,231,254],
[246,0,244,219,237,245,208,253,237,256,246,234,236,241,230],
[243,256,0,241,241,240,218,244,248,265,236,244,242,245,238],
[240,281,259,0,239,261,234,270,243,277,254,263,265,230,243],
[266,263,259,261,0,247,251,262,262,284,235,259,250,260,248],
[272,255,260,239,253,0,269,293,266,278,253,248,237,247,263],
[266,292,282,266,249,231,0,274,252,293,268,281,287,265,257],
[251,247,256,230,238,207,226,0,230,248,236,234,224,229,252],
[250,263,252,257,238,234,248,270,0,272,256,228,270,257,245],
[244,244,235,223,216,222,207,252,228,0,235,230,251,212,220],
[249,254,264,246,265,247,232,264,244,265,0,242,241,253,243],
[247,266,256,237,241,252,219,266,272,270,258,0,254,247,247],
[259,264,258,235,250,263,213,276,230,249,259,246,0,254,254],
[269,259,255,270,240,253,235,271,243,288,247,253,246,0,248],
[246,270,262,257,252,237,243,248,255,280,257,253,246,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 105, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,236,241,253,247,240,241,254,265,235,249,226,252,244],
[249,0,242,252,237,261,242,228,247,270,234,261,228,257,243],
[264,258,0,261,251,261,247,238,272,281,225,262,242,257,247],
[259,248,239,0,251,233,231,219,247,260,250,269,221,254,235],
[247,263,249,249,0,242,237,243,264,272,228,269,221,245,245],
[253,239,239,267,258,0,241,231,258,260,229,255,228,268,232],
[260,258,253,269,263,259,0,246,257,275,243,270,238,267,241],
[259,272,262,281,257,269,254,0,274,301,275,266,242,273,234],
[246,253,228,253,236,242,243,226,0,256,236,253,247,242,245],
[235,230,219,240,228,240,225,199,244,0,214,232,226,234,223],
[265,266,275,250,272,271,257,225,264,286,0,277,252,265,246],
[251,239,238,231,231,245,230,234,247,268,223,0,226,232,236],
[274,272,258,279,279,272,262,258,253,274,248,274,0,264,278],
[248,243,243,246,255,232,233,227,258,266,235,268,236,0,242],
[256,257,253,265,255,268,259,266,255,277,254,264,222,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 106, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,251,222,259,254,254,235,257,231,271,278,228,280,245],
[251,0,278,203,251,223,253,194,239,223,255,223,187,266,241],
[249,222,0,256,261,220,251,216,239,197,211,228,198,255,232],
[278,297,244,0,309,257,272,260,272,240,251,280,261,270,299],
[241,249,239,191,0,202,220,202,230,179,226,205,192,239,226],
[246,277,280,243,298,0,266,223,272,250,282,286,250,300,259],
[246,247,249,228,280,234,0,184,246,178,270,236,221,290,215],
[265,306,284,240,298,277,316,0,264,260,317,290,298,278,259],
[243,261,261,228,270,228,254,236,0,229,267,216,238,299,215],
[269,277,303,260,321,250,322,240,271,0,302,258,314,300,276],
[229,245,289,249,274,218,230,183,233,198,0,185,213,283,239],
[222,277,272,220,295,214,264,210,284,242,315,0,233,296,204],
[272,313,302,239,308,250,279,202,262,186,287,267,0,280,263],
[220,234,245,230,261,200,210,222,201,200,217,204,220,0,217],
[255,259,268,201,274,241,285,241,285,224,261,296,237,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 107, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,249,256,283,261,248,277,287,276,263,272,249,272,225],
[251,0,241,270,286,242,220,256,267,266,250,244,234,263,222],
[251,259,0,244,274,254,233,264,267,284,253,245,264,271,246],
[244,230,256,0,273,250,213,249,271,249,246,248,238,263,222],
[217,214,226,227,0,227,214,224,243,253,228,232,237,228,197],
[239,258,246,250,273,0,229,253,270,269,234,254,247,256,237],
[252,280,267,287,286,271,0,267,275,288,257,267,250,272,236],
[223,244,236,251,276,247,233,0,272,258,248,253,240,264,234],
[213,233,233,229,257,230,225,228,0,252,256,248,220,237,211],
[224,234,216,251,247,231,212,242,248,0,243,229,218,244,223],
[237,250,247,254,272,266,243,252,244,257,0,239,243,254,230],
[228,256,255,252,268,246,233,247,252,271,261,0,227,254,228],
[251,266,236,262,263,253,250,260,280,282,257,273,0,257,251],
[228,237,229,237,272,244,228,236,263,256,246,246,243,0,218],
[275,278,254,278,303,263,264,266,289,277,270,272,249,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 108, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,270,266,274,236,267,256,248,243,221,249,268,252,244],
[245,0,273,251,259,259,271,241,226,254,244,247,251,269,238],
[230,227,0,240,246,230,257,248,225,237,217,248,252,244,223],
[234,249,260,0,248,248,260,251,240,257,223,243,260,244,224],
[226,241,254,252,0,240,260,231,232,240,233,260,275,252,243],
[264,241,270,252,260,0,270,253,246,262,233,249,262,264,243],
[233,229,243,240,240,230,0,236,221,237,212,228,248,252,233],
[244,259,252,249,269,247,264,0,247,260,229,241,286,248,263],
[252,274,275,260,268,254,279,253,0,242,254,258,260,260,260],
[257,246,263,243,260,238,263,240,258,0,240,243,269,262,235],
[279,256,283,277,267,267,288,271,246,260,0,263,289,259,256],
[251,253,252,257,240,251,272,259,242,257,237,0,278,275,247],
[232,249,248,240,225,238,252,214,240,231,211,222,0,223,226],
[248,231,256,256,248,236,248,252,240,238,241,225,277,0,239],
[256,262,277,276,257,257,267,237,240,265,244,253,274,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 109, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,252,283,252,253,270,250,251,249,264,256,260,267,270],
[256,0,256,284,248,258,255,260,247,238,263,242,254,252,246],
[248,244,0,271,239,242,264,239,234,236,257,234,262,248,242],
[217,216,229,0,242,250,247,236,214,237,236,228,249,239,259],
[248,252,261,258,0,253,267,248,231,250,261,254,258,237,265],
[247,242,258,250,247,0,246,241,238,245,261,253,262,242,249],
[230,245,236,253,233,254,0,258,227,235,245,234,239,239,218],
[250,240,261,264,252,259,242,0,232,241,250,232,249,254,250],
[249,253,266,286,269,262,273,268,0,245,256,256,265,261,261],
[251,262,264,263,250,255,265,259,255,0,249,251,265,252,261],
[236,237,243,264,239,239,255,250,244,251,0,250,247,237,243],
[244,258,266,272,246,247,266,268,244,249,250,0,263,248,261],
[240,246,238,251,242,238,261,251,235,235,253,237,0,236,236],
[233,248,252,261,263,258,261,246,239,248,263,252,264,0,267],
[230,254,258,241,235,251,282,250,239,239,257,239,264,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 110, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,253,247,254,248,253,245,249,253,249,238,243,258,249],
[247,0,259,261,255,247,261,248,267,260,242,249,236,270,244],
[247,241,0,257,248,237,243,243,249,259,249,246,251,245,244],
[253,239,243,0,249,249,235,244,261,258,237,245,256,246,238],
[246,245,252,251,0,245,259,246,270,246,254,251,245,253,248],
[252,253,263,251,255,0,249,246,257,278,242,257,247,255,260],
[247,239,257,265,241,251,0,242,244,243,255,250,248,260,266],
[255,252,257,256,254,254,258,0,258,261,257,261,261,247,246],
[251,233,251,239,230,243,256,242,0,257,241,248,238,254,230],
[247,240,241,242,254,222,257,239,243,0,253,246,245,245,256],
[251,258,251,263,246,258,245,243,259,247,0,257,256,257,246],
[262,251,254,255,249,243,250,239,252,254,243,0,258,259,245],
[257,264,249,244,255,253,252,239,262,255,244,242,0,249,257],
[242,230,255,254,247,245,240,253,246,255,243,241,251,0,250],
[251,256,256,262,252,240,234,254,270,244,254,255,243,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 111, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,256,269,277,254,234,260,273,262,271,253,241,258,256],
[247,0,244,276,283,248,236,249,256,265,269,257,249,264,239],
[244,256,0,269,286,256,231,259,262,261,264,242,250,263,249],
[231,224,231,0,253,213,227,222,241,232,232,240,228,247,236],
[223,217,214,247,0,221,215,242,244,265,226,237,215,250,235],
[246,252,244,287,279,0,244,252,249,254,254,258,269,272,243],
[266,264,269,273,285,256,0,249,278,267,255,251,236,259,240],
[240,251,241,278,258,248,251,0,272,228,254,244,267,258,240],
[227,244,238,259,256,251,222,228,0,242,255,238,238,245,244],
[238,235,239,268,235,246,233,272,258,0,251,258,238,261,238],
[229,231,236,268,274,246,245,246,245,249,0,252,249,261,248],
[247,243,258,260,263,242,249,256,262,242,248,0,259,253,252],
[259,251,250,272,285,231,264,233,262,262,251,241,0,266,246],
[242,236,237,253,250,228,241,242,255,239,239,247,234,0,239],
[244,261,251,264,265,257,260,260,256,262,252,248,254,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 112, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,265,274,254,270,272,265,270,251,260,259,259,255,250],
[230,0,233,241,247,234,247,238,257,241,224,239,241,219,236],
[235,267,0,240,228,242,249,232,266,244,237,254,244,235,248],
[226,259,260,0,231,237,247,279,243,241,241,234,252,263,238],
[246,253,272,269,0,266,270,274,267,246,262,256,260,246,247],
[230,266,258,263,234,0,244,252,261,249,236,255,249,249,239],
[228,253,251,253,230,256,0,245,247,236,233,236,266,244,248],
[235,262,268,221,226,248,255,0,240,239,255,248,242,246,243],
[230,243,234,257,233,239,253,260,0,214,239,235,240,236,234],
[249,259,256,259,254,251,264,261,286,0,246,252,262,239,240],
[240,276,263,259,238,264,267,245,261,254,0,255,266,258,250],
[241,261,246,266,244,245,264,252,265,248,245,0,250,233,240],
[241,259,256,248,240,251,234,258,260,238,234,250,0,228,257],
[245,281,265,237,254,251,256,254,264,261,242,267,272,0,245],
[250,264,252,262,253,261,252,257,266,260,250,260,243,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 113, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,258,229,270,267,282,243,242,234,235,249,261,253,244],
[256,0,255,252,248,252,274,242,244,251,259,251,265,247,248],
[242,245,0,238,278,257,257,256,241,242,238,250,255,266,261],
[271,248,262,0,263,280,256,267,255,262,255,255,247,260,260],
[230,252,222,237,0,261,258,234,225,234,248,238,244,246,233],
[233,248,243,220,239,0,239,240,243,235,241,237,241,256,247],
[218,226,243,244,242,261,0,241,249,242,228,246,236,240,221],
[257,258,244,233,266,260,259,0,240,243,238,259,250,257,248],
[258,256,259,245,275,257,251,260,0,243,251,248,263,273,256],
[266,249,258,238,266,265,258,257,257,0,244,246,267,251,247],
[265,241,262,245,252,259,272,262,249,256,0,253,266,246,270],
[251,249,250,245,262,263,254,241,252,254,247,0,287,272,261],
[239,235,245,253,256,259,264,250,237,233,234,213,0,261,248],
[247,253,234,240,254,244,260,243,227,249,254,228,239,0,233],
[256,252,239,240,267,253,279,252,244,253,230,239,252,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 114, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,244,288,243,306,254,287,218,278,248,214,254,257,226],
[242,0,262,274,215,232,198,283,204,234,260,240,262,237,228],
[256,238,0,275,205,234,206,254,225,244,188,215,243,212,250],
[212,226,225,0,185,254,176,255,197,234,171,233,230,186,241],
[257,285,295,315,0,284,228,301,253,244,284,246,320,237,280],
[194,268,266,246,216,0,193,266,193,265,206,188,236,246,235],
[246,302,294,324,272,307,0,292,265,233,268,281,302,323,274],
[213,217,246,245,199,234,208,0,230,216,268,217,233,187,242],
[282,296,275,303,247,307,235,270,0,276,213,252,309,275,312],
[222,266,256,266,256,235,267,284,224,0,274,249,240,253,240],
[252,240,312,329,216,294,232,232,287,226,0,219,297,268,280],
[286,260,285,267,254,312,219,283,248,251,281,0,322,246,285],
[246,238,257,270,180,264,198,267,191,260,203,178,0,177,215],
[243,263,288,314,263,254,177,313,225,247,232,254,323,0,282],
[274,272,250,259,220,265,226,258,188,260,220,215,285,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 115, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,244,251,245,226,220,260,230,230,235,251,256,261,231],
[263,0,248,214,252,235,237,250,222,241,229,258,243,256,222],
[256,252,0,239,244,236,242,267,241,242,240,267,254,273,256],
[249,286,261,0,248,257,247,254,244,251,244,256,264,255,238],
[255,248,256,252,0,242,240,267,236,248,241,247,231,258,251],
[274,265,264,243,258,0,253,273,258,240,244,256,273,282,248],
[280,263,258,253,260,247,0,269,258,240,246,267,263,269,245],
[240,250,233,246,233,227,231,0,238,220,231,263,246,251,215],
[270,278,259,256,264,242,242,262,0,249,245,265,262,278,249],
[270,259,258,249,252,260,260,280,251,0,253,254,251,281,248],
[265,271,260,256,259,256,254,269,255,247,0,257,264,279,259],
[249,242,233,244,253,244,233,237,235,246,243,0,244,255,234],
[244,257,246,236,269,227,237,254,238,249,236,256,0,256,256],
[239,244,227,245,242,218,231,249,222,219,221,245,244,0,239],
[269,278,244,262,249,252,255,285,251,252,241,266,244,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 116, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,270,253,255,224,268,257,242,256,249,255,259,236,285],
[217,0,283,251,245,235,246,240,248,240,246,240,230,233,272],
[230,217,0,223,232,217,223,212,211,218,234,236,220,230,260],
[247,249,277,0,235,223,256,253,213,267,250,262,247,235,282],
[245,255,268,265,0,246,254,256,235,275,256,247,267,242,273],
[276,265,283,277,254,0,259,268,255,250,258,264,268,257,283],
[232,254,277,244,246,241,0,255,238,248,235,253,241,248,252],
[243,260,288,247,244,232,245,0,253,242,244,252,252,244,287],
[258,252,289,287,265,245,262,247,0,256,258,253,259,262,280],
[244,260,282,233,225,250,252,258,244,0,219,252,243,228,279],
[251,254,266,250,244,242,265,256,242,281,0,260,255,250,295],
[245,260,264,238,253,236,247,248,247,248,240,0,251,259,270],
[241,270,280,253,233,232,259,248,241,257,245,249,0,254,273],
[264,267,270,265,258,243,252,256,238,272,250,241,246,0,259],
[215,228,240,218,227,217,248,213,220,221,205,230,227,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 117, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,229,247,240,228,226,221,208,234,266,225,210,225,248],
[255,0,204,233,209,235,242,242,220,206,243,242,241,238,243],
[271,296,0,276,221,247,231,213,259,249,227,261,227,248,267],
[253,267,224,0,234,256,222,220,251,198,211,207,238,240,229],
[260,291,279,266,0,288,261,248,259,242,256,270,279,232,295],
[272,265,253,244,212,0,234,245,233,209,252,266,223,256,252],
[274,258,269,278,239,266,0,261,270,271,242,285,241,280,259],
[279,258,287,280,252,255,239,0,266,304,255,259,253,264,262],
[292,280,241,249,241,267,230,234,0,242,246,267,214,265,257],
[266,294,251,302,258,291,229,196,258,0,246,279,263,250,268],
[234,257,273,289,244,248,258,245,254,254,0,235,197,231,259],
[275,258,239,293,230,234,215,241,233,221,265,0,204,244,269],
[290,259,273,262,221,277,259,247,286,237,303,296,0,264,269],
[275,262,252,260,268,244,220,236,235,250,269,256,236,0,247],
[252,257,233,271,205,248,241,238,243,232,241,231,231,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 118, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,172,263,213,286,292,284,157,228,244,231,199,218,205],
[288,0,233,270,243,271,291,265,239,300,262,293,193,294,268],
[328,267,0,294,260,348,268,294,268,258,284,258,223,239,278],
[237,230,206,0,208,274,263,228,182,236,201,280,188,256,289],
[287,257,240,292,0,297,311,284,216,241,280,261,195,238,293],
[214,229,152,226,203,0,228,183,199,218,222,249,201,212,239],
[208,209,232,237,189,272,0,271,197,232,265,240,201,241,230],
[216,235,206,272,216,317,229,0,254,211,272,280,225,266,251],
[343,261,232,318,284,301,303,246,0,251,263,304,253,332,287],
[272,200,242,264,259,282,268,289,249,0,255,267,212,325,325],
[256,238,216,299,220,278,235,228,237,245,0,282,236,250,219],
[269,207,242,220,239,251,260,220,196,233,218,0,229,186,176],
[301,307,277,312,305,299,299,275,247,288,264,271,0,272,282],
[282,206,261,244,262,288,259,234,168,175,250,314,228,0,253],
[295,232,222,211,207,261,270,249,213,175,281,324,218,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 119, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,262,268,285,258,242,250,275,309,235,260,277,241,289],
[230,0,196,262,271,243,254,220,272,258,223,224,230,205,210],
[238,304,0,271,299,260,250,233,258,289,236,242,239,239,232],
[232,238,229,0,260,196,225,206,245,265,221,232,213,201,238],
[215,229,201,240,0,262,227,236,228,257,222,243,236,231,229],
[242,257,240,304,238,0,279,247,301,269,238,255,240,252,258],
[258,246,250,275,273,221,0,211,249,231,228,255,219,230,264],
[250,280,267,294,264,253,289,0,279,305,252,297,237,229,269],
[225,228,242,255,272,199,251,221,0,243,240,240,251,227,238],
[191,242,211,235,243,231,269,195,257,0,192,202,207,216,235],
[265,277,264,279,278,262,272,248,260,308,0,253,264,266,273],
[240,276,258,268,257,245,245,203,260,298,247,0,225,229,237],
[223,270,261,287,264,260,281,263,249,293,236,275,0,276,265],
[259,295,261,299,269,248,270,271,273,284,234,271,224,0,289],
[211,290,268,262,271,242,236,231,262,265,227,263,235,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 120, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,236,240,244,249,253,254,242,243,252,251,240,245,238],
[262,0,235,245,266,248,261,244,244,258,251,248,238,247,260],
[264,265,0,254,260,262,275,245,256,263,274,243,248,255,251],
[260,255,246,0,267,253,270,263,253,270,280,261,266,245,259],
[256,234,240,233,0,259,259,246,245,252,256,257,242,240,237],
[251,252,238,247,241,0,269,247,246,248,265,244,250,244,245],
[247,239,225,230,241,231,0,227,230,247,254,233,240,229,242],
[246,256,255,237,254,253,273,0,255,252,260,242,247,243,252],
[258,256,244,247,255,254,270,245,0,266,267,256,249,247,250],
[257,242,237,230,248,252,253,248,234,0,258,238,245,235,240],
[248,249,226,220,244,235,246,240,233,242,0,242,248,236,241],
[249,252,257,239,243,256,267,258,244,262,258,0,242,256,250],
[260,262,252,234,258,250,260,253,251,255,252,258,0,248,250],
[255,253,245,255,260,256,271,257,253,265,264,244,252,0,251],
[262,240,249,241,263,255,258,248,250,260,259,250,250,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 121, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,251,248,252,242,246,234,241,230,245,241,246,243,238],
[252,0,261,256,253,254,257,238,251,235,257,238,249,262,248],
[249,239,0,251,259,252,255,232,268,244,249,244,261,259,244],
[252,244,249,0,275,268,253,265,254,248,260,252,250,236,246],
[248,247,241,225,0,239,234,225,238,215,240,235,235,229,233],
[258,246,248,232,261,0,255,226,246,238,251,236,243,240,247],
[254,243,245,247,266,245,0,237,248,253,252,241,266,254,242],
[266,262,268,235,275,274,263,0,258,269,261,252,257,264,248],
[259,249,232,246,262,254,252,242,0,244,262,234,238,251,255],
[270,265,256,252,285,262,247,231,256,0,257,242,254,265,259],
[255,243,251,240,260,249,248,239,238,243,0,231,249,257,250],
[259,262,256,248,265,264,259,248,266,258,269,0,265,267,260],
[254,251,239,250,265,257,234,243,262,246,251,235,0,247,236],
[257,238,241,264,271,260,246,236,249,235,243,233,253,0,261],
[262,252,256,254,267,253,258,252,245,241,250,240,264,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 122, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,224,115,181,245,279,116,198,164,117,161,141,181,178],
[257,0,275,290,216,222,213,212,273,148,233,231,249,187,276],
[276,225,0,202,221,202,230,93,174,116,240,213,223,126,196],
[385,210,298,0,294,278,311,210,320,187,275,166,268,237,297],
[319,284,279,206,0,287,253,163,223,155,258,238,318,176,326],
[255,278,298,222,213,0,304,192,266,176,254,273,284,178,280],
[221,287,270,189,247,196,0,94,178,123,175,129,194,132,272],
[384,288,407,290,337,308,406,0,379,215,298,278,335,279,352],
[302,227,326,180,277,234,322,121,0,165,246,201,301,211,257],
[336,352,384,313,345,324,377,285,335,0,321,265,353,248,380],
[383,267,260,225,242,246,325,202,254,179,0,209,332,178,185],
[339,269,287,334,262,227,371,222,299,235,291,0,317,244,288],
[359,251,277,232,182,216,306,165,199,147,168,183,0,166,228],
[319,313,374,263,324,322,368,221,289,252,322,256,334,0,348],
[322,224,304,203,174,220,228,148,243,120,315,212,272,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 123, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,220,217,226,242,227,226,223,228,229,236,233,230,239],
[261,0,226,237,242,240,230,243,250,243,256,240,231,245,255],
[280,274,0,257,243,262,249,253,251,254,258,259,263,258,260],
[283,263,243,0,251,268,257,262,251,252,262,250,251,252,263],
[274,258,257,249,0,257,261,257,256,259,248,258,259,255,273],
[258,260,238,232,243,0,230,234,230,239,235,243,249,249,250],
[273,270,251,243,239,270,0,249,243,251,252,266,265,251,257],
[274,257,247,238,243,266,251,0,243,254,253,237,254,249,255],
[277,250,249,249,244,270,257,257,0,265,260,260,257,247,257],
[272,257,246,248,241,261,249,246,235,0,255,250,254,251,271],
[271,244,242,238,252,265,248,247,240,245,0,253,264,238,242],
[264,260,241,250,242,257,234,263,240,250,247,0,256,249,261],
[267,269,237,249,241,251,235,246,243,246,236,244,0,247,260],
[270,255,242,248,245,251,249,251,253,249,262,251,253,0,257],
[261,245,240,237,227,250,243,245,243,229,258,239,240,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 124, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,257,252,261,240,250,257,260,254,255,246,256,265,244],
[226,0,241,218,244,233,259,254,234,242,248,229,246,252,237],
[243,259,0,231,240,227,255,251,241,237,244,239,261,248,249],
[248,282,269,0,264,244,265,266,247,260,275,254,280,288,271],
[239,256,260,236,0,250,249,251,236,243,250,217,252,260,263],
[260,267,273,256,250,0,284,261,267,258,257,238,258,282,256],
[250,241,245,235,251,216,0,248,212,225,238,243,251,249,217],
[243,246,249,234,249,239,252,0,234,258,246,221,236,261,236],
[240,266,259,253,264,233,288,266,0,267,264,228,259,264,232],
[246,258,263,240,257,242,275,242,233,0,268,230,260,269,255],
[245,252,256,225,250,243,262,254,236,232,0,225,237,253,246],
[254,271,261,246,283,262,257,279,272,270,275,0,267,275,258],
[244,254,239,220,248,242,249,264,241,240,263,233,0,278,243],
[235,248,252,212,240,218,251,239,236,231,247,225,222,0,225],
[256,263,251,229,237,244,283,264,268,245,254,242,257,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 125, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,242,242,246,252,233,243,242,253,241,267,244,268,269],
[242,0,240,241,248,258,230,253,238,265,228,246,250,244,261],
[258,260,0,250,250,256,255,265,258,245,229,253,251,279,240],
[258,259,250,0,256,265,244,269,257,281,262,251,250,270,261],
[254,252,250,244,0,250,257,273,241,259,260,251,251,268,270],
[248,242,244,235,250,0,239,251,245,233,240,246,246,258,240],
[267,270,245,256,243,261,0,265,249,279,252,263,263,294,259],
[257,247,235,231,227,249,235,0,240,253,241,235,248,262,251],
[258,262,242,243,259,255,251,260,0,251,243,243,241,265,269],
[247,235,255,219,241,267,221,247,249,0,231,241,234,263,253],
[259,272,271,238,240,260,248,259,257,269,0,255,256,282,275],
[233,254,247,249,249,254,237,265,257,259,245,0,248,276,254],
[256,250,249,250,249,254,237,252,259,266,244,252,0,291,252],
[232,256,221,230,232,242,206,238,235,237,218,224,209,0,226],
[231,239,260,239,230,260,241,249,231,247,225,246,248,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 126, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,245,282,267,250,259,254,268,241,258,268,275,254,269],
[228,0,234,252,247,218,234,238,249,231,246,252,243,219,232],
[255,266,0,291,266,232,241,258,270,259,259,269,259,281,266],
[218,248,209,0,229,223,233,221,232,215,242,254,246,241,239],
[233,253,234,271,0,218,245,238,241,235,245,254,243,241,255],
[250,282,268,277,282,0,247,267,272,239,253,280,274,254,266],
[241,266,259,267,255,253,0,245,259,248,241,264,277,260,255],
[246,262,242,279,262,233,255,0,252,244,250,252,250,248,241],
[232,251,230,268,259,228,241,248,0,244,231,256,250,251,256],
[259,269,241,285,265,261,252,256,256,0,241,285,255,248,267],
[242,254,241,258,255,247,259,250,269,259,0,268,272,261,277],
[232,248,231,246,246,220,236,248,244,215,232,0,227,233,249],
[225,257,241,254,257,226,223,250,250,245,228,273,0,253,256],
[246,281,219,259,259,246,240,252,249,252,239,267,247,0,269],
[231,268,234,261,245,234,245,259,244,233,223,251,244,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 127, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,238,235,254,252,252,248,251,253,248,264,222,249,237],
[264,0,254,249,258,264,252,252,248,260,243,269,250,267,252],
[262,246,0,256,257,275,265,252,260,250,251,271,243,261,256],
[265,251,244,0,253,265,259,262,261,267,272,265,243,271,260],
[246,242,243,247,0,264,248,260,266,243,249,262,229,257,251],
[248,236,225,235,236,0,244,252,246,244,231,238,226,234,233],
[248,248,235,241,252,256,0,256,251,269,258,267,236,267,243],
[252,248,248,238,240,248,244,0,242,245,253,252,223,230,221],
[249,252,240,239,234,254,249,258,0,241,247,266,240,251,247],
[247,240,250,233,257,256,231,255,259,0,268,266,227,242,243],
[252,257,249,228,251,269,242,247,253,232,0,277,249,257,229],
[236,231,229,235,238,262,233,248,234,234,223,0,227,234,220],
[278,250,257,257,271,274,264,277,260,273,251,273,0,254,247],
[251,233,239,229,243,266,233,270,249,258,243,266,246,0,244],
[263,248,244,240,249,267,257,279,253,257,271,280,253,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 128, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,254,255,267,248,246,257,256,260,240,266,258,262,247],
[245,0,227,242,249,221,250,264,240,258,251,242,246,245,245],
[246,273,0,257,271,256,260,249,267,266,253,270,285,257,253],
[245,258,243,0,252,242,236,248,235,254,252,261,262,250,251],
[233,251,229,248,0,229,228,248,221,259,225,250,239,237,239],
[252,279,244,258,271,0,258,265,240,281,255,279,276,277,271],
[254,250,240,264,272,242,0,247,253,277,267,267,267,250,261],
[243,236,251,252,252,235,253,0,235,261,244,264,262,252,261],
[244,260,233,265,279,260,247,265,0,264,263,260,258,261,254],
[240,242,234,246,241,219,223,239,236,0,242,255,266,246,232],
[260,249,247,248,275,245,233,256,237,258,0,259,253,255,251],
[234,258,230,239,250,221,233,236,240,245,241,0,257,239,241],
[242,254,215,238,261,224,233,238,242,234,247,243,0,246,238],
[238,255,243,250,263,223,250,248,239,254,245,261,254,0,248],
[253,255,247,249,261,229,239,239,246,268,249,259,262,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 129, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,236,246,249,245,253,257,277,256,263,263,265,254,264],
[250,0,249,244,250,241,247,254,250,261,260,247,261,241,251],
[264,251,0,257,251,256,244,251,254,254,248,262,252,257,266],
[254,256,243,0,263,262,245,255,268,266,258,259,258,255,257],
[251,250,249,237,0,250,233,255,250,258,264,259,245,256,260],
[255,259,244,238,250,0,245,257,250,255,254,248,259,240,264],
[247,253,256,255,267,255,0,247,289,272,264,264,269,265,252],
[243,246,249,245,245,243,253,0,254,254,248,242,251,249,238],
[223,250,246,232,250,250,211,246,0,260,248,248,241,255,247],
[244,239,246,234,242,245,228,246,240,0,243,240,237,240,246],
[237,240,252,242,236,246,236,252,252,257,0,245,253,243,252],
[237,253,238,241,241,252,236,258,252,260,255,0,244,241,245],
[235,239,248,242,255,241,231,249,259,263,247,256,0,244,249],
[246,259,243,245,244,260,235,251,245,260,257,259,256,0,261],
[236,249,234,243,240,236,248,262,253,254,248,255,251,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 130, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,230,228,263,235,246,242,237,207,267,242,262,289,245],
[257,0,279,218,270,236,279,254,242,237,269,233,277,263,246],
[270,221,0,253,257,261,256,234,237,230,261,250,254,243,259],
[272,282,247,0,285,270,251,245,271,273,287,244,279,271,283],
[237,230,243,215,0,213,236,226,213,241,294,245,272,248,257],
[265,264,239,230,287,0,249,250,225,234,254,278,280,272,244],
[254,221,244,249,264,251,0,218,213,242,273,259,278,257,228],
[258,246,266,255,274,250,282,0,253,207,277,239,253,244,246],
[263,258,263,229,287,275,287,247,0,211,254,241,277,283,261],
[293,263,270,227,259,266,258,293,289,0,266,291,311,279,254],
[233,231,239,213,206,246,227,223,246,234,0,246,248,261,247],
[258,267,250,256,255,222,241,261,259,209,254,0,260,249,239],
[238,223,246,221,228,220,222,247,223,189,252,240,0,261,231],
[211,237,257,229,252,228,243,256,217,221,239,251,239,0,234],
[255,254,241,217,243,256,272,254,239,246,253,261,269,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 131, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,281,272,332,273,307,291,250,282,266,266,284,258,273],
[245,0,250,303,299,246,257,285,239,314,285,251,253,245,283],
[219,250,0,249,292,243,246,256,234,235,257,299,274,207,284],
[228,197,251,0,326,229,259,298,236,267,321,241,223,243,274],
[168,201,208,174,0,206,198,196,164,201,213,213,197,178,270],
[227,254,257,271,294,0,248,307,215,268,264,261,256,221,307],
[193,243,254,241,302,252,0,271,210,301,230,248,274,201,260],
[209,215,244,202,304,193,229,0,196,248,238,224,210,204,258],
[250,261,266,264,336,285,290,304,0,313,296,280,294,262,318],
[218,186,265,233,299,232,199,252,187,0,221,244,221,212,257],
[234,215,243,179,287,236,270,262,204,279,0,217,207,252,219],
[234,249,201,259,287,239,252,276,220,256,283,0,247,246,314],
[216,247,226,277,303,244,226,290,206,279,293,253,0,250,332],
[242,255,293,257,322,279,299,296,238,288,248,254,250,0,318],
[227,217,216,226,230,193,240,242,182,243,281,186,168,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 132, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,307,212,342,278,230,262,232,213,262,237,309,283,318],
[179,0,212,159,244,171,220,233,191,211,192,242,246,245,277],
[193,288,0,231,265,214,242,201,170,181,161,296,219,289,246],
[288,341,269,0,303,287,250,274,300,224,223,294,329,329,330],
[158,256,235,197,0,241,196,208,186,174,200,181,213,228,215],
[222,329,286,213,259,0,216,259,237,263,191,269,282,272,285],
[270,280,258,250,304,284,0,266,251,257,237,269,313,280,319],
[238,267,299,226,292,241,234,0,285,227,155,281,253,271,258],
[268,309,330,200,314,263,249,215,0,186,229,236,292,272,277],
[287,289,319,276,326,237,243,273,314,0,287,266,375,364,382],
[238,308,339,277,300,309,263,345,271,213,0,266,320,321,319],
[263,258,204,206,319,231,231,219,264,234,234,0,274,266,262],
[191,254,281,171,287,218,187,247,208,125,180,226,0,236,251],
[217,255,211,171,272,228,220,229,228,136,179,234,264,0,244],
[182,223,254,170,285,215,181,242,223,118,181,238,249,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 133, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,184,140,162,41,44,89,186,174,225,111,73,89,206],
[338,0,326,263,401,164,263,178,287,164,292,123,152,263,196],
[316,174,0,259,336,160,218,174,230,316,310,141,205,215,117],
[360,237,241,0,316,241,338,241,259,338,316,212,227,259,285],
[338,99,164,184,0,85,241,99,230,241,219,66,57,140,44],
[459,336,340,259,415,0,364,245,186,364,456,287,304,263,263],
[456,237,282,162,259,136,0,283,186,282,357,111,152,225,228],
[411,322,326,259,401,255,217,0,230,379,401,328,312,344,263],
[314,213,270,241,270,314,314,270,0,314,270,241,270,213,215],
[326,336,184,162,259,136,218,121,186,0,310,22,95,121,139],
[275,208,190,184,281,44,143,99,230,190,0,44,57,44,44],
[389,377,359,288,434,213,389,172,259,478,456,0,345,288,117],
[427,348,295,273,443,196,348,188,230,405,443,155,0,370,133],
[411,237,285,241,360,237,275,156,287,379,456,212,130,0,263],
[294,304,383,215,456,237,272,237,285,361,456,383,367,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 134, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,250,245,255,255,260,267,262,265,275,271,246,258,242],
[223,0,244,241,238,244,259,231,259,237,264,260,228,249,248],
[250,256,0,252,231,246,248,253,244,261,262,256,212,252,252],
[255,259,248,0,235,257,270,262,255,254,281,272,229,258,253],
[245,262,269,265,0,270,276,265,271,265,265,288,254,258,256],
[245,256,254,243,230,0,244,243,253,250,271,270,243,257,255],
[240,241,252,230,224,256,0,233,244,255,251,251,235,245,252],
[233,269,247,238,235,257,267,0,252,268,259,260,229,244,251],
[238,241,256,245,229,247,256,248,0,240,257,234,244,259,237],
[235,263,239,246,235,250,245,232,260,0,259,254,246,251,252],
[225,236,238,219,235,229,249,241,243,241,0,241,232,240,242],
[229,240,244,228,212,230,249,240,266,246,259,0,241,258,263],
[254,272,288,271,246,257,265,271,256,254,268,259,0,276,266],
[242,251,248,242,242,243,255,256,241,249,260,242,224,0,254],
[258,252,248,247,244,245,248,249,263,248,258,237,234,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 135, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,286,245,255,228,253,270,237,225,253,239,247,267,274],
[248,0,268,245,249,215,251,256,232,222,250,220,231,266,286],
[214,232,0,263,245,212,248,242,200,198,243,211,253,244,246],
[255,255,237,0,236,230,249,237,239,220,226,246,242,274,226],
[245,251,255,264,0,230,255,259,222,210,224,269,250,268,289],
[272,285,288,270,270,0,271,281,248,270,265,287,280,274,290],
[247,249,252,251,245,229,0,242,204,220,246,250,232,266,297],
[230,244,258,263,241,219,258,0,217,231,219,239,246,251,293],
[263,268,300,261,278,252,296,283,0,242,278,267,266,293,290],
[275,278,302,280,290,230,280,269,258,0,245,272,265,307,302],
[247,250,257,274,276,235,254,281,222,255,0,244,248,286,289],
[261,280,289,254,231,213,250,261,233,228,256,0,228,282,267],
[253,269,247,258,250,220,268,254,234,235,252,272,0,295,297],
[233,234,256,226,232,226,234,249,207,193,214,218,205,0,270],
[226,214,254,274,211,210,203,207,210,198,211,233,203,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 136, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,241,242,217,244,254,227,231,216,228,233,222,236,230],
[283,0,261,284,256,271,276,259,263,253,259,260,242,247,254],
[259,239,0,252,237,249,268,249,230,243,241,245,256,233,243],
[258,216,248,0,233,254,256,242,260,240,248,254,245,239,264],
[283,244,263,267,0,265,279,255,257,260,255,238,246,253,261],
[256,229,251,246,235,0,245,250,249,226,248,228,239,257,239],
[246,224,232,244,221,255,0,243,234,250,213,224,232,226,219],
[273,241,251,258,245,250,257,0,243,252,228,258,251,249,259],
[269,237,270,240,243,251,266,257,0,241,255,253,228,256,231],
[284,247,257,260,240,274,250,248,259,0,266,236,256,255,259],
[272,241,259,252,245,252,287,272,245,234,0,268,239,253,256],
[267,240,255,246,262,272,276,242,247,264,232,0,231,247,260],
[278,258,244,255,254,261,268,249,272,244,261,269,0,252,253],
[264,253,267,261,247,243,274,251,244,245,247,253,248,0,243],
[270,246,257,236,239,261,281,241,269,241,244,240,247,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 137, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,246,261,266,274,253,263,236,250,251,263,238,265,243],
[230,0,249,244,252,256,229,228,221,239,246,242,231,250,241],
[254,251,0,269,251,283,241,241,243,241,256,263,236,277,252],
[239,256,231,0,244,256,242,249,247,245,236,247,238,260,255],
[234,248,249,256,0,274,240,240,240,231,237,264,239,256,254],
[226,244,217,244,226,0,236,241,221,221,226,254,224,250,239],
[247,271,259,258,260,264,0,260,253,239,259,255,247,263,271],
[237,272,259,251,260,259,240,0,219,238,241,252,227,251,236],
[264,279,257,253,260,279,247,281,0,241,271,276,269,275,261],
[250,261,259,255,269,279,261,262,259,0,260,261,257,270,255],
[249,254,244,264,263,274,241,259,229,240,0,263,231,273,257],
[237,258,237,253,236,246,245,248,224,239,237,0,250,251,259],
[262,269,264,262,261,276,253,273,231,243,269,250,0,277,270],
[235,250,223,240,244,250,237,249,225,230,227,249,223,0,245],
[257,259,248,245,246,261,229,264,239,245,243,241,230,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 138, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,248,252,273,240,258,251,260,242,252,245,236,244,241],
[246,0,250,222,261,236,262,255,256,242,251,242,243,244,246],
[252,250,0,244,248,238,261,249,242,246,237,232,243,233,248],
[248,278,256,0,279,245,261,267,270,265,267,253,268,256,257],
[227,239,252,221,0,234,237,224,235,234,247,233,224,237,233],
[260,264,262,255,266,0,266,263,261,248,263,253,260,241,264],
[242,238,239,239,263,234,0,239,248,253,251,247,251,244,255],
[249,245,251,233,276,237,261,0,252,261,257,247,236,241,258],
[240,244,258,230,265,239,252,248,0,250,244,235,233,251,247],
[258,258,254,235,266,252,247,239,250,0,254,254,238,248,250],
[248,249,263,233,253,237,249,243,256,246,0,235,239,237,238],
[255,258,268,247,267,247,253,253,265,246,265,0,260,242,260],
[264,257,257,232,276,240,249,264,267,262,261,240,0,264,250],
[256,256,267,244,263,259,256,259,249,252,263,258,236,0,257],
[259,254,252,243,267,236,245,242,253,250,262,240,250,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 139, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,208,289,224,260,232,249,279,278,213,255,240,271,225],
[299,0,245,272,256,279,250,273,291,303,299,272,296,270,259],
[292,255,0,257,246,276,249,250,288,264,260,237,287,295,274],
[211,228,243,0,227,235,220,253,273,282,260,207,275,242,226],
[276,244,254,273,0,245,250,226,301,244,239,259,248,273,243],
[240,221,224,265,255,0,208,268,280,230,270,249,257,304,244],
[268,250,251,280,250,292,0,280,303,264,234,307,306,283,246],
[251,227,250,247,274,232,220,0,275,233,277,212,272,252,241],
[221,209,212,227,199,220,197,225,0,229,224,187,277,239,234],
[222,197,236,218,256,270,236,267,271,0,208,228,276,250,229],
[287,201,240,240,261,230,266,223,276,292,0,267,264,276,243],
[245,228,263,293,241,251,193,288,313,272,233,0,284,270,253],
[260,204,213,225,252,243,194,228,223,224,236,216,0,268,222],
[229,230,205,258,227,196,217,248,261,250,224,230,232,0,222],
[275,241,226,274,257,256,254,259,266,271,257,247,278,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 140, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,241,265,248,254,256,255,258,251,258,261,246,272,272],
[245,0,202,240,235,239,251,231,231,223,235,237,225,257,249],
[259,298,0,276,257,256,261,246,278,276,276,239,252,279,272],
[235,260,224,0,229,242,238,246,246,248,254,219,243,258,257],
[252,265,243,271,0,248,268,256,260,259,261,252,250,263,257],
[246,261,244,258,252,0,252,243,258,261,254,244,236,248,256],
[244,249,239,262,232,248,0,234,249,254,259,247,250,247,270],
[245,269,254,254,244,257,266,0,270,276,256,237,261,269,265],
[242,269,222,254,240,242,251,230,0,225,248,229,226,256,248],
[249,277,224,252,241,239,246,224,275,0,256,240,227,250,264],
[242,265,224,246,239,246,241,244,252,244,0,239,243,255,257],
[239,263,261,281,248,256,253,263,271,260,261,0,250,269,288],
[254,275,248,257,250,264,250,239,274,273,257,250,0,252,270],
[228,243,221,242,237,252,253,231,244,250,245,231,248,0,257],
[228,251,228,243,243,244,230,235,252,236,243,212,230,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 141, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,238,214,242,239,273,227,293,243,257,258,208,254,253],
[266,0,237,247,252,239,294,259,255,221,278,281,227,246,225],
[262,263,0,243,269,271,291,268,293,253,277,262,239,280,224],
[286,253,257,0,259,242,292,255,273,229,264,270,257,281,250],
[258,248,231,241,0,234,267,239,274,223,290,250,237,279,251],
[261,261,229,258,266,0,286,212,273,255,291,270,237,276,256],
[227,206,209,208,233,214,0,218,251,223,232,223,213,229,209],
[273,241,232,245,261,288,282,0,283,255,268,243,254,262,250],
[207,245,207,227,226,227,249,217,0,222,267,250,203,256,250],
[257,279,247,271,277,245,277,245,278,0,271,261,225,290,211],
[243,222,223,236,210,209,268,232,233,229,0,223,225,240,227],
[242,219,238,230,250,230,277,257,250,239,277,0,223,272,242],
[292,273,261,243,263,263,287,246,297,275,275,277,0,311,267],
[246,254,220,219,221,224,271,238,244,210,260,228,189,0,222],
[247,275,276,250,249,244,291,250,250,289,273,258,233,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 142, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,257,243,265,241,250,244,249,234,240,242,253,246,264],
[246,0,241,246,253,245,257,241,241,243,245,246,240,232,243],
[243,259,0,250,260,248,256,251,241,254,235,235,249,238,251],
[257,254,250,0,245,241,246,257,243,250,230,251,255,235,252],
[235,247,240,255,0,241,250,250,246,250,237,241,249,245,248],
[259,255,252,259,259,0,256,239,249,250,247,249,263,246,256],
[250,243,244,254,250,244,0,247,249,245,245,252,261,244,259],
[256,259,249,243,250,261,253,0,252,253,253,243,259,248,264],
[251,259,259,257,254,251,251,248,0,259,258,249,263,251,269],
[266,257,246,250,250,250,255,247,241,0,245,250,258,237,250],
[260,255,265,270,263,253,255,247,242,255,0,251,281,249,265],
[258,254,265,249,259,251,248,257,251,250,249,0,275,243,254],
[247,260,251,245,251,237,239,241,237,242,219,225,0,244,247],
[254,268,262,265,255,254,256,252,249,263,251,257,256,0,276],
[236,257,249,248,252,244,241,236,231,250,235,246,253,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 143, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,270,264,262,267,259,250,261,270,261,272,239,279,268],
[242,0,262,234,257,250,247,230,256,269,244,254,242,248,274],
[230,238,0,235,245,249,222,236,243,242,243,258,232,246,262],
[236,266,265,0,257,255,250,243,243,256,268,267,239,256,259],
[238,243,255,243,0,246,271,226,245,246,245,262,240,279,248],
[233,250,251,245,254,0,247,247,246,265,247,267,232,273,268],
[241,253,278,250,229,253,0,250,243,255,254,250,226,257,277],
[250,270,264,257,274,253,250,0,247,282,251,275,268,278,290],
[239,244,257,257,255,254,257,253,0,259,260,269,249,250,275],
[230,231,258,244,254,235,245,218,241,0,247,259,227,256,252],
[239,256,257,232,255,253,246,249,240,253,0,262,233,266,256],
[228,246,242,233,238,233,250,225,231,241,238,0,239,242,247],
[261,258,268,261,260,268,274,232,251,273,267,261,0,265,270],
[221,252,254,244,221,227,243,222,250,244,234,258,235,0,267],
[232,226,238,241,252,232,223,210,225,248,244,253,230,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 144, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,261,231,241,242,247,249,247,243,231,265,269,251,253],
[234,0,244,245,238,236,253,234,251,236,221,252,245,235,232],
[239,256,0,232,240,244,266,246,245,254,230,252,259,255,241],
[269,255,268,0,237,248,256,256,265,242,237,273,242,238,261],
[259,262,260,263,0,264,266,261,250,252,237,268,259,236,269],
[258,264,256,252,236,0,271,266,256,257,253,273,246,238,252],
[253,247,234,244,234,229,0,232,244,214,229,232,228,244,238],
[251,266,254,244,239,234,268,0,259,246,233,247,247,241,257],
[253,249,255,235,250,244,256,241,0,223,228,242,234,230,258],
[257,264,246,258,248,243,286,254,277,0,256,274,242,246,256],
[269,279,270,263,263,247,271,267,272,244,0,270,281,253,259],
[235,248,248,227,232,227,268,253,258,226,230,0,234,230,239],
[231,255,241,258,241,254,272,253,266,258,219,266,0,239,272],
[249,265,245,262,264,262,256,259,270,254,247,270,261,0,258],
[247,268,259,239,231,248,262,243,242,244,241,261,228,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 145, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,231,254,229,258,240,254,253,258,246,262,233,251,237],
[262,0,259,274,251,259,259,252,248,232,252,248,249,247,238],
[269,241,0,273,257,254,270,259,255,248,273,282,254,252,257],
[246,226,227,0,242,241,249,259,242,245,274,240,244,254,254],
[271,249,243,258,0,278,259,258,264,237,272,271,247,248,260],
[242,241,246,259,222,0,242,260,234,231,242,238,244,245,225],
[260,241,230,251,241,258,0,250,272,243,273,263,254,258,238],
[246,248,241,241,242,240,250,0,248,231,256,256,231,237,259],
[247,252,245,258,236,266,228,252,0,233,265,256,249,236,250],
[242,268,252,255,263,269,257,269,267,0,275,279,253,258,253],
[254,248,227,226,228,258,227,244,235,225,0,250,235,227,243],
[238,252,218,260,229,262,237,244,244,221,250,0,237,237,238],
[267,251,246,256,253,256,246,269,251,247,265,263,0,246,251],
[249,253,248,246,252,255,242,263,264,242,273,263,254,0,252],
[263,262,243,246,240,275,262,241,250,247,257,262,249,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 146, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,252,261,254,245,255,250,234,250,235,233,266,223,242],
[246,0,271,252,249,254,226,241,214,243,251,237,261,217,261],
[248,229,0,255,270,233,239,239,223,227,230,241,257,203,239],
[239,248,245,0,272,272,265,254,253,251,261,274,260,240,219],
[246,251,230,228,0,230,239,229,226,217,222,265,274,230,255],
[255,246,267,228,270,0,252,250,234,242,253,232,291,223,254],
[245,274,261,235,261,248,0,269,206,235,268,262,281,231,269],
[250,259,261,246,271,250,231,0,229,225,250,251,249,225,253],
[266,286,277,247,274,266,294,271,0,276,283,291,295,255,266],
[250,257,273,249,283,258,265,275,224,0,264,260,288,235,264],
[265,249,270,239,278,247,232,250,217,236,0,255,261,238,229],
[267,263,259,226,235,268,238,249,209,240,245,0,279,210,240],
[234,239,243,240,226,209,219,251,205,212,239,221,0,228,231],
[277,283,297,260,270,277,269,275,245,265,262,290,272,0,257],
[258,239,261,281,245,246,231,247,234,236,271,260,269,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 147, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,235,225,236,260,237,209,227,224,230,244,231,256,226],
[264,0,245,245,274,264,246,235,237,260,248,256,252,254,250],
[265,255,0,268,264,255,232,267,229,262,253,255,265,267,245],
[275,255,232,0,237,236,227,232,230,248,224,259,229,251,225],
[264,226,236,263,0,248,265,234,257,220,238,262,215,242,243],
[240,236,245,264,252,0,253,239,221,247,215,252,222,249,245],
[263,254,268,273,235,247,0,236,259,253,248,275,256,255,240],
[291,265,233,268,266,261,264,0,246,258,279,264,255,283,267],
[273,263,271,270,243,279,241,254,0,256,269,273,238,283,229],
[276,240,238,252,280,253,247,242,244,0,244,248,243,284,259],
[270,252,247,276,262,285,252,221,231,256,0,249,231,280,234],
[256,244,245,241,238,248,225,236,227,252,251,0,251,246,242],
[269,248,235,271,285,278,244,245,262,257,269,249,0,280,230],
[244,246,233,249,258,251,245,217,217,216,220,254,220,0,243],
[274,250,255,275,257,255,260,233,271,241,266,258,270,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 148, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,256,256,255,251,264,248,250,246,257,231,260,253,249],
[247,0,227,235,238,246,233,238,231,235,240,217,233,232,234],
[244,273,0,260,253,270,266,257,256,238,249,236,248,259,239],
[244,265,240,0,239,265,263,234,256,240,250,246,245,261,252],
[245,262,247,261,0,257,254,246,236,241,244,237,241,252,238],
[249,254,230,235,243,0,238,233,245,242,254,240,248,250,243],
[236,267,234,237,246,262,0,234,233,240,253,226,252,257,239],
[252,262,243,266,254,267,266,0,255,247,269,258,254,269,248],
[250,269,244,244,264,255,267,245,0,261,253,228,254,261,245],
[254,265,262,260,259,258,260,253,239,0,257,243,263,251,257],
[243,260,251,250,256,246,247,231,247,243,0,250,245,259,249],
[269,283,264,254,263,260,274,242,272,257,250,0,258,276,257],
[240,267,252,255,259,252,248,246,246,237,255,242,0,261,236],
[247,268,241,239,248,250,243,231,239,249,241,224,239,0,241],
[251,266,261,248,262,257,261,252,255,243,251,243,264,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 149, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,208,271,219,244,277,224,251,205,218,219,284,279,254],
[278,0,223,261,297,330,250,306,344,211,283,256,320,303,294],
[292,277,0,321,321,295,304,280,312,275,305,235,327,350,368],
[229,239,179,0,214,227,263,249,248,204,267,243,267,249,266],
[281,203,179,286,0,256,275,234,301,205,242,232,267,228,258],
[256,170,205,273,244,0,275,234,275,192,240,187,243,211,197],
[223,250,196,237,225,225,0,276,338,190,317,205,245,282,232],
[276,194,220,251,266,266,224,0,309,245,268,249,282,269,265],
[249,156,188,252,199,225,162,191,0,166,221,191,227,228,231],
[295,289,225,296,295,308,310,255,334,0,275,311,286,328,333],
[282,217,195,233,258,260,183,232,279,225,0,221,274,228,276],
[281,244,265,257,268,313,295,251,309,189,279,0,252,275,311],
[216,180,173,233,233,257,255,218,273,214,226,248,0,250,267],
[221,197,150,251,272,289,218,231,272,172,272,225,250,0,225],
[246,206,132,234,242,303,268,235,269,167,224,189,233,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 150, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,285,299,197,274,256,244,243,253,212,245,244,214,233],
[302,0,338,308,247,267,298,271,309,254,222,246,230,296,235],
[215,162,0,242,220,251,268,244,254,230,183,231,195,250,195],
[201,192,258,0,241,235,223,219,250,242,185,159,223,229,175],
[303,253,280,259,0,280,279,271,262,255,252,235,231,260,261],
[226,233,249,265,220,0,250,297,275,229,237,201,216,252,225],
[244,202,232,277,221,250,0,231,277,212,202,203,197,252,241],
[256,229,256,281,229,203,269,0,245,225,207,218,226,237,271],
[257,191,246,250,238,225,223,255,0,220,234,186,217,248,226],
[247,246,270,258,245,271,288,275,280,0,229,214,212,279,246],
[288,278,317,315,248,263,298,293,266,271,0,295,236,302,257],
[255,254,269,341,265,299,297,282,314,286,205,0,274,266,264],
[256,270,305,277,269,284,303,274,283,288,264,226,0,270,255],
[286,204,250,271,240,248,248,263,252,221,198,234,230,0,209],
[267,265,305,325,239,275,259,229,274,254,243,236,245,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 151, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,222,272,265,267,243,274,270,222,275,265,254,215,245],
[234,0,246,289,283,265,256,275,260,257,295,255,282,227,249],
[278,254,0,283,300,260,276,278,287,224,296,265,294,263,271],
[228,211,217,0,263,257,246,209,252,198,245,232,265,218,237],
[235,217,200,237,0,235,214,237,236,230,258,250,256,212,212],
[233,235,240,243,265,0,249,257,260,210,243,239,244,226,222],
[257,244,224,254,286,251,0,263,263,215,277,269,274,263,244],
[226,225,222,291,263,243,237,0,246,219,278,250,264,232,223],
[230,240,213,248,264,240,237,254,0,239,282,259,256,237,261],
[278,243,276,302,270,290,285,281,261,0,299,282,258,236,266],
[225,205,204,255,242,257,223,222,218,201,0,241,238,221,216],
[235,245,235,268,250,261,231,250,241,218,259,0,275,204,243],
[246,218,206,235,244,256,226,236,244,242,262,225,0,203,209],
[285,273,237,282,288,274,237,268,263,264,279,296,297,0,252],
[255,251,229,263,288,278,256,277,239,234,284,257,291,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 152, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,227,243,257,259,232,250,249,241,246,231,253,239,230],
[263,0,238,248,252,260,227,251,257,242,246,249,252,241,237],
[273,262,0,264,268,261,236,256,253,249,250,261,255,237,256],
[257,252,236,0,264,260,230,253,267,255,249,256,240,243,255],
[243,248,232,236,0,249,225,236,247,242,225,246,235,233,241],
[241,240,239,240,251,0,237,241,261,249,241,246,246,236,229],
[268,273,264,270,275,263,0,261,274,265,266,267,247,273,263],
[250,249,244,247,264,259,239,0,260,253,251,234,255,255,242],
[251,243,247,233,253,239,226,240,0,245,234,238,235,235,240],
[259,258,251,245,258,251,235,247,255,0,244,247,255,240,248],
[254,254,250,251,275,259,234,249,266,256,0,250,260,256,268],
[269,251,239,244,254,254,233,266,262,253,250,0,257,246,258],
[247,248,245,260,265,254,253,245,265,245,240,243,0,247,245],
[261,259,263,257,267,264,227,245,265,260,244,254,253,0,246],
[270,263,244,245,259,271,237,258,260,252,232,242,255,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 153, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,242,246,249,263,266,246,245,254,239,242,254,278,270],
[270,0,265,251,264,284,252,269,259,261,251,261,242,267,266],
[258,235,0,240,230,234,237,271,249,231,205,237,227,244,266],
[254,249,260,0,242,260,269,271,251,256,233,253,239,265,254],
[251,236,270,258,0,268,278,270,271,263,252,243,263,277,267],
[237,216,266,240,232,0,254,273,251,245,246,245,228,285,256],
[234,248,263,231,222,246,0,261,262,249,238,225,256,256,253],
[254,231,229,229,230,227,239,0,246,246,214,252,260,233,266],
[255,241,251,249,229,249,238,254,0,238,230,243,256,236,259],
[246,239,269,244,237,255,251,254,262,0,236,243,260,252,263],
[261,249,295,267,248,254,262,286,270,264,0,251,263,281,258],
[258,239,263,247,257,255,275,248,257,257,249,0,249,254,269],
[246,258,273,261,237,272,244,240,244,240,237,251,0,259,253],
[222,233,256,235,223,215,244,267,264,248,219,246,241,0,255],
[230,234,234,246,233,244,247,234,241,237,242,231,247,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 154, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,247,250,287,231,267,251,294,296,217,300,237,265,293],
[191,0,226,193,264,195,255,223,241,220,190,245,220,219,257],
[253,274,0,239,265,223,246,282,239,261,244,288,239,214,288],
[250,307,261,0,255,287,285,297,269,300,237,297,276,291,292],
[213,236,235,245,0,213,251,265,211,255,228,270,203,230,234],
[269,305,277,213,287,0,275,323,297,305,267,318,283,237,291],
[233,245,254,215,249,225,0,255,261,250,237,296,232,239,274],
[249,277,218,203,235,177,245,0,247,234,197,257,206,235,240],
[206,259,261,231,289,203,239,253,0,273,221,266,228,239,263],
[204,280,239,200,245,195,250,266,227,0,233,263,254,220,280],
[283,310,256,263,272,233,263,303,279,267,0,294,276,234,283],
[200,255,212,203,230,182,204,243,234,237,206,0,167,208,260],
[263,280,261,224,297,217,268,294,272,246,224,333,0,236,300],
[235,281,286,209,270,263,261,265,261,280,266,292,264,0,326],
[207,243,212,208,266,209,226,260,237,220,217,240,200,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 155, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,288,254,310,287,298,205,328,329,265,289,199,286,322],
[237,0,203,295,297,208,213,248,274,303,209,308,242,275,334],
[212,297,0,254,256,260,213,293,345,340,246,312,292,354,248],
[246,205,246,0,300,165,233,236,244,284,220,282,269,312,296],
[190,203,244,200,0,199,176,181,251,309,227,292,207,248,255],
[213,292,240,335,301,0,312,315,277,317,264,265,200,297,314],
[202,287,287,267,324,188,0,231,332,295,266,279,241,269,348],
[295,252,207,264,319,185,269,0,258,322,230,211,227,282,334],
[172,226,155,256,249,223,168,242,0,244,228,247,177,214,245],
[171,197,160,216,191,183,205,178,256,0,165,239,168,249,254],
[235,291,254,280,273,236,234,270,272,335,0,308,268,276,286],
[211,192,188,218,208,235,221,289,253,261,192,0,238,255,251],
[301,258,208,231,293,300,259,273,323,332,232,262,0,379,303],
[214,225,146,188,252,203,231,218,286,251,224,245,121,0,285],
[178,166,252,204,245,186,152,166,255,246,214,249,197,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 156, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,272,250,245,254,260,252,265,257,271,252,252,243,272],
[241,0,243,247,255,242,241,228,256,251,251,233,247,236,269],
[228,257,0,251,245,264,259,239,251,245,249,246,249,234,253],
[250,253,249,0,258,256,248,228,279,264,267,233,251,228,275],
[255,245,255,242,0,250,260,244,263,261,253,245,254,234,258],
[246,258,236,244,250,0,260,237,266,262,244,254,264,222,240],
[240,259,241,252,240,240,0,242,252,253,258,249,249,219,263],
[248,272,261,272,256,263,258,0,261,272,266,273,254,254,275],
[235,244,249,221,237,234,248,239,0,237,237,230,269,232,269],
[243,249,255,236,239,238,247,228,263,0,228,259,256,205,252],
[229,249,251,233,247,256,242,234,263,272,0,256,249,236,247],
[248,267,254,267,255,246,251,227,270,241,244,0,257,222,273],
[248,253,251,249,246,236,251,246,231,244,251,243,0,236,264],
[257,264,266,272,266,278,281,246,268,295,264,278,264,0,281],
[228,231,247,225,242,260,237,225,231,248,253,227,236,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 157, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,275,187,218,211,265,199,223,255,304,246,270,281,244],
[222,0,214,262,257,230,305,218,198,290,285,274,234,304,270],
[225,286,0,233,264,264,282,188,245,262,278,247,233,248,269],
[313,238,267,0,281,260,314,279,227,276,336,295,266,276,230],
[282,243,236,219,0,206,256,198,232,290,232,241,265,265,251],
[289,270,236,240,294,0,254,214,301,262,317,296,301,265,262],
[235,195,218,186,244,246,0,210,194,208,248,191,241,225,205],
[301,282,312,221,302,286,290,0,261,280,320,286,256,264,260],
[277,302,255,273,268,199,306,239,0,284,309,253,271,301,268],
[245,210,238,224,210,238,292,220,216,0,246,203,309,271,229],
[196,215,222,164,268,183,252,180,191,254,0,205,242,276,252],
[254,226,253,205,259,204,309,214,247,297,295,0,250,224,249],
[230,266,267,234,235,199,259,244,229,191,258,250,0,258,201],
[219,196,252,224,235,235,275,236,199,229,224,276,242,0,218],
[256,230,231,270,249,238,295,240,232,271,248,251,299,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 158, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,251,239,255,248,243,228,247,245,248,240,259,242,253],
[258,0,241,249,236,262,242,233,256,253,239,243,249,242,231],
[249,259,0,258,253,249,244,233,240,247,239,240,266,244,234],
[261,251,242,0,250,263,234,250,248,252,246,240,257,240,250],
[245,264,247,250,0,236,232,248,255,246,228,248,253,228,254],
[252,238,251,237,264,0,227,234,244,236,235,240,246,235,224],
[257,258,256,266,268,273,0,247,258,252,257,259,254,244,253],
[272,267,267,250,252,266,253,0,259,252,261,254,268,250,241],
[253,244,260,252,245,256,242,241,0,255,257,249,254,249,231],
[255,247,253,248,254,264,248,248,245,0,239,250,252,250,248],
[252,261,261,254,272,265,243,239,243,261,0,246,265,248,249],
[260,257,260,260,252,260,241,246,251,250,254,0,264,251,259],
[241,251,234,243,247,254,246,232,246,248,235,236,0,234,240],
[258,258,256,260,272,265,256,250,251,250,252,249,266,0,246],
[247,269,266,250,246,276,247,259,269,252,251,241,260,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 159, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,237,271,221,246,251,253,276,245,213,244,201,247,288],
[240,0,237,249,253,248,252,276,243,265,267,211,223,258,263],
[263,263,0,239,270,245,272,287,259,257,212,243,251,227,285],
[229,251,261,0,266,241,296,255,260,241,254,265,236,239,286],
[279,247,230,234,0,239,242,270,234,240,204,227,234,236,247],
[254,252,255,259,261,0,274,255,273,272,242,263,226,256,288],
[249,248,228,204,258,226,0,275,244,233,214,238,222,248,258],
[247,224,213,245,230,245,225,0,248,230,233,212,232,244,284],
[224,257,241,240,266,227,256,252,0,237,226,256,240,252,269],
[255,235,243,259,260,228,267,270,263,0,240,223,220,237,275],
[287,233,288,246,296,258,286,267,274,260,0,256,225,264,299],
[256,289,257,235,273,237,262,288,244,277,244,0,234,269,296],
[299,277,249,264,266,274,278,268,260,280,275,266,0,272,313],
[253,242,273,261,264,244,252,256,248,263,236,231,228,0,298],
[212,237,215,214,253,212,242,216,231,225,201,204,187,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 160, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,254,270,275,266,272,263,254,258,235,255,245,270,240],
[261,0,263,269,268,264,265,280,272,274,255,272,242,259,255],
[246,237,0,260,266,269,254,241,248,257,271,251,242,260,257],
[230,231,240,0,255,263,268,262,248,260,256,263,249,247,264],
[225,232,234,245,0,237,261,244,239,240,243,249,239,223,239],
[234,236,231,237,263,0,246,248,237,251,238,243,229,229,245],
[228,235,246,232,239,254,0,235,236,235,248,238,228,236,227],
[237,220,259,238,256,252,265,0,235,251,244,235,250,241,246],
[246,228,252,252,261,263,264,265,0,262,265,262,240,250,256],
[242,226,243,240,260,249,265,249,238,0,251,241,240,248,256],
[265,245,229,244,257,262,252,256,235,249,0,250,260,259,243],
[245,228,249,237,251,257,262,265,238,259,250,0,233,243,256],
[255,258,258,251,261,271,272,250,260,260,240,267,0,251,259],
[230,241,240,253,277,271,264,259,250,252,241,257,249,0,257],
[260,245,243,236,261,255,273,254,244,244,257,244,241,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 161, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,261,232,245,244,244,263,241,264,250,246,250,239,263],
[252,0,256,235,270,245,257,253,244,271,261,243,254,250,253],
[239,244,0,228,236,227,238,241,233,241,260,228,239,232,248],
[268,265,272,0,262,270,263,248,254,280,272,265,262,240,286],
[255,230,264,238,0,246,249,248,245,255,237,242,238,241,252],
[256,255,273,230,254,0,247,249,252,243,255,252,252,243,257],
[256,243,262,237,251,253,0,245,247,242,259,243,264,233,252],
[237,247,259,252,252,251,255,0,254,277,252,264,251,246,266],
[259,256,267,246,255,248,253,246,0,278,249,244,265,249,275],
[236,229,259,220,245,257,258,223,222,0,249,222,248,227,260],
[250,239,240,228,263,245,241,248,251,251,0,240,240,233,252],
[254,257,272,235,258,248,257,236,256,278,260,0,271,257,277],
[250,246,261,238,262,248,236,249,235,252,260,229,0,247,272],
[261,250,268,260,259,257,267,254,251,273,267,243,253,0,271],
[237,247,252,214,248,243,248,234,225,240,248,223,228,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 162, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,268,247,262,262,241,246,221,247,240,252,258,261,259],
[222,0,239,246,241,242,229,249,213,244,221,245,232,263,231],
[232,261,0,239,250,259,251,243,236,237,228,233,246,273,252],
[253,254,261,0,279,261,265,258,243,255,245,243,260,280,265],
[238,259,250,221,0,246,261,247,247,265,231,240,248,264,232],
[238,258,241,239,254,0,252,230,248,237,236,243,249,266,258],
[259,271,249,235,239,248,0,260,241,240,231,229,245,268,259],
[254,251,257,242,253,270,240,0,256,275,244,266,254,268,267],
[279,287,264,257,253,252,259,244,0,251,225,245,250,275,256],
[253,256,263,245,235,263,260,225,249,0,252,246,255,277,258],
[260,279,272,255,269,264,269,256,275,248,0,238,263,286,274],
[248,255,267,257,260,257,271,234,255,254,262,0,267,258,252],
[242,268,254,240,252,251,255,246,250,245,237,233,0,271,260],
[239,237,227,220,236,234,232,232,225,223,214,242,229,0,240],
[241,269,248,235,268,242,241,233,244,242,226,248,240,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 163, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,238,246,259,216,215,214,230,259,231,240,249,233,229],
[275,0,244,263,267,246,242,247,260,233,244,254,261,277,249],
[262,256,0,264,269,249,256,245,265,247,238,275,253,281,272],
[254,237,236,0,258,206,241,226,226,220,249,243,247,268,226],
[241,233,231,242,0,219,239,244,255,231,256,254,253,275,247],
[284,254,251,294,281,0,244,262,256,273,279,276,263,290,267],
[285,258,244,259,261,256,0,269,257,250,248,257,257,286,266],
[286,253,255,274,256,238,231,0,260,258,257,275,283,280,250],
[270,240,235,274,245,244,243,240,0,248,258,262,253,282,268],
[241,267,253,280,269,227,250,242,252,0,249,254,262,274,261],
[269,256,262,251,244,221,252,243,242,251,0,281,269,288,261],
[260,246,225,257,246,224,243,225,238,246,219,0,247,263,228],
[251,239,247,253,247,237,243,217,247,238,231,253,0,266,248],
[267,223,219,232,225,210,214,220,218,226,212,237,234,0,237],
[271,251,228,274,253,233,234,250,232,239,239,272,252,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 164, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,269,253,253,263,273,243,250,265,266,264,266,239,271],
[239,0,268,254,247,283,259,237,259,263,251,275,258,260,270],
[231,232,0,233,250,245,249,237,253,240,234,265,248,251,268],
[247,246,267,0,263,259,259,250,278,272,240,257,249,248,249],
[247,253,250,237,0,251,247,238,255,267,237,261,234,262,271],
[237,217,255,241,249,0,247,238,248,259,231,255,235,243,268],
[227,241,251,241,253,253,0,234,242,263,248,259,229,238,255],
[257,263,263,250,262,262,266,0,271,285,242,286,261,278,276],
[250,241,247,222,245,252,258,229,0,257,243,263,236,253,259],
[235,237,260,228,233,241,237,215,243,0,230,246,233,253,265],
[234,249,266,260,263,269,252,258,257,270,0,268,248,267,268],
[236,225,235,243,239,245,241,214,237,254,232,0,220,234,244],
[234,242,252,251,266,265,271,239,264,267,252,280,0,273,262],
[261,240,249,252,238,257,262,222,247,247,233,266,227,0,261],
[229,230,232,251,229,232,245,224,241,235,232,256,238,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 165, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,272,268,262,260,177,193,202,236,260,254,298,363,270],
[216,0,175,170,173,199,100,181,181,265,230,219,231,247,220],
[228,325,0,270,275,249,200,270,254,277,320,245,299,341,274],
[232,330,230,0,200,185,120,220,163,274,289,254,261,296,201],
[238,327,225,300,0,252,146,220,158,313,268,230,278,324,316],
[240,301,251,315,248,0,175,273,209,235,287,292,311,255,220],
[323,400,300,380,354,325,0,247,287,333,327,279,329,418,312],
[307,319,230,280,280,227,253,0,198,334,321,241,291,324,247],
[298,319,246,337,342,291,213,302,0,329,361,250,299,380,264],
[264,235,223,226,187,265,167,166,171,0,228,205,266,276,241],
[240,270,180,211,232,213,173,179,139,272,0,215,330,292,218],
[246,281,255,246,270,208,221,259,250,295,285,0,287,323,240],
[202,269,201,239,222,189,171,209,201,234,170,213,0,231,225],
[137,253,159,204,176,245,82,176,120,224,208,177,269,0,254],
[230,280,226,299,184,280,188,253,236,259,282,260,275,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 166, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,244,244,243,246,242,256,250,236,264,254,249,257,275],
[266,0,255,253,249,251,269,264,272,248,275,278,274,271,283],
[256,245,0,252,255,256,248,264,249,254,260,253,254,257,262],
[256,247,248,0,254,254,246,267,262,249,264,274,251,259,274],
[257,251,245,246,0,241,247,269,242,255,259,254,272,252,266],
[254,249,244,246,259,0,275,255,259,255,265,276,276,276,280],
[258,231,252,254,253,225,0,257,245,254,260,273,256,250,267],
[244,236,236,233,231,245,243,0,246,250,235,246,251,250,263],
[250,228,251,238,258,241,255,254,0,248,255,265,255,261,265],
[264,252,246,251,245,245,246,250,252,0,262,263,261,251,261],
[236,225,240,236,241,235,240,265,245,238,0,250,264,234,254],
[246,222,247,226,246,224,227,254,235,237,250,0,241,235,263],
[251,226,246,249,228,224,244,249,245,239,236,259,0,239,266],
[243,229,243,241,248,224,250,250,239,249,266,265,261,0,268],
[225,217,238,226,234,220,233,237,235,239,246,237,234,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 167, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,261,262,261,260,270,264,282,256,258,270,272,244,256],
[239,0,239,249,256,258,266,256,258,241,274,284,260,250,265],
[239,261,0,270,261,261,252,251,267,239,283,282,246,246,269],
[238,251,230,0,252,239,249,243,251,236,247,254,259,248,246],
[239,244,239,248,0,248,234,250,244,261,250,276,247,253,242],
[240,242,239,261,252,0,244,252,274,255,275,273,244,258,263],
[230,234,248,251,266,256,0,244,239,239,251,273,255,241,262],
[236,244,249,257,250,248,256,0,254,238,254,258,248,258,272],
[218,242,233,249,256,226,261,246,0,233,254,257,251,237,257],
[244,259,261,264,239,245,261,262,267,0,261,261,240,255,262],
[242,226,217,253,250,225,249,246,246,239,0,268,252,256,241],
[230,216,218,246,224,227,227,242,243,239,232,0,237,223,218],
[228,240,254,241,253,256,245,252,249,260,248,263,0,255,250],
[256,250,254,252,247,242,259,242,263,245,244,277,245,0,260],
[244,235,231,254,258,237,238,228,243,238,259,282,250,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 168, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,242,233,243,267,245,277,245,264,262,263,245,253,249],
[252,0,246,250,259,272,257,255,249,258,282,266,258,255,260],
[258,254,0,257,246,270,257,249,258,256,268,274,273,275,273],
[267,250,243,0,243,262,259,253,252,250,260,265,255,261,241],
[257,241,254,257,0,262,253,259,235,257,273,257,245,253,262],
[233,228,230,238,238,0,246,245,220,253,260,245,243,241,238],
[255,243,243,241,247,254,0,254,248,252,262,259,248,260,249],
[223,245,251,247,241,255,246,0,224,231,256,252,245,251,232],
[255,251,242,248,265,280,252,276,0,268,274,269,274,262,263],
[236,242,244,250,243,247,248,269,232,0,258,262,256,261,266],
[238,218,232,240,227,240,238,244,226,242,0,242,230,223,235],
[237,234,226,235,243,255,241,248,231,238,258,0,244,227,231],
[255,242,227,245,255,257,252,255,226,244,270,256,0,260,245],
[247,245,225,239,247,259,240,249,238,239,277,273,240,0,232],
[251,240,227,259,238,262,251,268,237,234,265,269,255,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 169, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,217,276,271,274,284,266,278,265,277,260,233,302,256],
[262,0,235,285,281,273,298,263,292,277,289,278,258,277,293],
[283,265,0,273,308,299,261,278,291,305,275,275,242,296,290],
[224,215,227,0,276,255,287,268,248,241,290,230,237,256,243],
[229,219,192,224,0,239,251,260,269,258,287,235,230,212,237],
[226,227,201,245,261,0,263,264,234,257,289,227,225,277,257],
[216,202,239,213,249,237,0,255,267,246,252,215,210,258,247],
[234,237,222,232,240,236,245,0,253,220,258,233,241,265,243],
[222,208,209,252,231,266,233,247,0,217,245,239,212,223,215],
[235,223,195,259,242,243,254,280,283,0,279,265,205,277,250],
[223,211,225,210,213,211,248,242,255,221,0,207,200,244,216],
[240,222,225,270,265,273,285,267,261,235,293,0,233,245,248],
[267,242,258,263,270,275,290,259,288,295,300,267,0,290,267],
[198,223,204,244,288,223,242,235,277,223,256,255,210,0,238],
[244,207,210,257,263,243,253,257,285,250,284,252,233,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 170, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,252,279,230,239,247,262,233,255,252,250,246,274,265],
[236,0,261,244,191,256,238,245,268,257,225,255,245,264,275],
[248,239,0,241,230,248,264,232,234,254,192,266,251,274,271],
[221,256,259,0,207,245,254,242,251,262,211,229,252,251,250],
[270,309,270,293,0,266,270,271,291,268,217,247,286,284,292],
[261,244,252,255,234,0,265,226,254,262,226,252,228,281,269],
[253,262,236,246,230,235,0,228,267,250,204,212,226,255,245],
[238,255,268,258,229,274,272,0,240,258,205,254,245,271,276],
[267,232,266,249,209,246,233,260,0,244,234,243,256,245,278],
[245,243,246,238,232,238,250,242,256,0,205,260,235,264,266],
[248,275,308,289,283,274,296,295,266,295,0,286,287,284,281],
[250,245,234,271,253,248,288,246,257,240,214,0,242,279,232],
[254,255,249,248,214,272,274,255,244,265,213,258,0,280,268],
[226,236,226,249,216,219,245,229,255,236,216,221,220,0,215],
[235,225,229,250,208,231,255,224,222,234,219,268,232,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 171, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,256,208,260,244,224,255,265,257,238,235,230,269,243],
[257,0,242,198,237,238,243,249,261,245,211,242,234,243,247],
[244,258,0,237,237,293,246,274,275,256,255,243,264,259,251],
[292,302,263,0,276,272,296,301,314,287,243,268,281,264,301],
[240,263,263,224,0,279,253,283,274,250,242,256,272,253,273],
[256,262,207,228,221,0,247,248,270,273,217,230,233,262,257],
[276,257,254,204,247,253,0,268,278,269,233,234,242,268,277],
[245,251,226,199,217,252,232,0,248,257,239,242,240,235,259],
[235,239,225,186,226,230,222,252,0,239,203,220,243,213,239],
[243,255,244,213,250,227,231,243,261,0,231,239,252,245,242],
[262,289,245,257,258,283,267,261,297,269,0,232,287,273,269],
[265,258,257,232,244,270,266,258,280,261,268,0,243,260,266],
[270,266,236,219,228,267,258,260,257,248,213,257,0,257,265],
[231,257,241,236,247,238,232,265,287,255,227,240,243,0,246],
[257,253,249,199,227,243,223,241,261,258,231,234,235,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 172, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,207,228,255,220,246,249,248,216,234,220,239,222,230],
[271,0,234,257,231,232,253,277,244,253,251,263,233,232,243],
[293,266,0,265,275,257,252,283,276,248,254,273,254,245,230],
[272,243,235,0,234,233,243,273,277,262,251,250,257,244,225],
[245,269,225,266,0,253,253,261,247,243,247,248,247,234,222],
[280,268,243,267,247,0,261,261,261,266,242,282,252,242,246],
[254,247,248,257,247,239,0,284,255,270,238,262,237,240,254],
[251,223,217,227,239,239,216,0,225,228,222,217,221,202,199],
[252,256,224,223,253,239,245,275,0,268,243,255,236,253,241],
[284,247,252,238,257,234,230,272,232,0,255,261,254,221,234],
[266,249,246,249,253,258,262,278,257,245,0,251,265,251,237],
[280,237,227,250,252,218,238,283,245,239,249,0,255,247,216],
[261,267,246,243,253,248,263,279,264,246,235,245,0,264,257],
[278,268,255,256,266,258,260,298,247,279,249,253,236,0,227],
[270,257,270,275,278,254,246,301,259,266,263,284,243,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 173, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,247,256,242,257,254,266,255,247,251,257,271,252,231],
[272,0,265,263,260,266,263,261,261,264,273,268,266,276,246],
[253,235,0,263,263,253,240,271,259,257,276,251,262,274,249],
[244,237,237,0,243,256,232,242,253,247,253,245,246,259,233],
[258,240,237,257,0,254,238,273,252,251,261,266,245,264,227],
[243,234,247,244,246,0,236,242,255,244,248,243,243,242,226],
[246,237,260,268,262,264,0,267,264,257,264,268,271,268,250],
[234,239,229,258,227,258,233,0,242,226,240,248,254,256,230],
[245,239,241,247,248,245,236,258,0,251,269,261,247,257,228],
[253,236,243,253,249,256,243,274,249,0,262,260,261,267,252],
[249,227,224,247,239,252,236,260,231,238,0,246,253,247,233],
[243,232,249,255,234,257,232,252,239,240,254,0,248,248,232],
[229,234,238,254,255,257,229,246,253,239,247,252,0,246,226],
[248,224,226,241,236,258,232,244,243,233,253,252,254,0,213],
[269,254,251,267,273,274,250,270,272,248,267,268,274,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 174, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,244,253,252,262,230,234,243,271,249,260,233,243,264],
[242,0,232,239,227,250,221,226,233,243,243,231,246,237,255],
[256,268,0,262,268,284,249,258,268,264,268,268,246,259,273],
[247,261,238,0,228,260,239,248,243,254,238,243,241,259,255],
[248,273,232,272,0,260,244,233,245,260,245,257,245,250,262],
[238,250,216,240,240,0,229,231,219,251,221,232,223,224,251],
[270,279,251,261,256,271,0,258,272,259,247,253,246,243,261],
[266,274,242,252,267,269,242,0,256,271,265,275,242,256,271],
[257,267,232,257,255,281,228,244,0,258,246,249,256,247,266],
[229,257,236,246,240,249,241,229,242,0,240,243,237,246,247],
[251,257,232,262,255,279,253,235,254,260,0,258,236,251,272],
[240,269,232,257,243,268,247,225,251,257,242,0,245,253,249],
[267,254,254,259,255,277,254,258,244,263,264,255,0,257,271],
[257,263,241,241,250,276,257,244,253,254,249,247,243,0,264],
[236,245,227,245,238,249,239,229,234,253,228,251,229,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 175, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,268,242,265,244,272,252,255,243,244,249,251,222,263],
[263,0,261,257,263,258,269,261,275,268,251,258,266,245,264],
[232,239,0,226,247,242,248,246,268,244,248,215,248,222,244],
[258,243,274,0,261,264,262,270,269,271,279,254,257,245,274],
[235,237,253,239,0,246,249,237,256,245,254,239,231,227,261],
[256,242,258,236,254,0,250,257,256,236,263,247,240,237,268],
[228,231,252,238,251,250,0,253,243,233,258,224,224,227,257],
[248,239,254,230,263,243,247,0,249,243,263,241,243,244,270],
[245,225,232,231,244,244,257,251,0,234,262,249,246,228,271],
[257,232,256,229,255,264,267,257,266,0,244,257,258,245,266],
[256,249,252,221,246,237,242,237,238,256,0,244,248,232,261],
[251,242,285,246,261,253,276,259,251,243,256,0,257,246,262],
[249,234,252,243,269,260,276,257,254,242,252,243,0,254,279],
[278,255,278,255,273,263,273,256,272,255,268,254,246,0,270],
[237,236,256,226,239,232,243,230,229,234,239,238,221,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 176, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,275,254,238,263,263,266,243,258,251,241,247,254,274],
[242,0,257,236,217,248,234,242,236,250,234,241,231,240,224],
[225,243,0,254,225,230,249,261,223,257,233,223,228,251,238],
[246,264,246,0,220,239,233,252,230,244,240,217,233,251,231],
[262,283,275,280,0,264,261,276,261,295,271,259,243,259,267],
[237,252,270,261,236,0,249,273,233,251,268,261,252,260,252],
[237,266,251,267,239,251,0,252,237,256,248,216,231,247,237],
[234,258,239,248,224,227,248,0,208,236,225,227,210,237,242],
[257,264,277,270,239,267,263,292,0,279,294,257,250,298,270],
[242,250,243,256,205,249,244,264,221,0,255,232,228,258,252],
[249,266,267,260,229,232,252,275,206,245,0,233,235,255,233],
[259,259,277,283,241,239,284,273,243,268,267,0,219,248,258],
[253,269,272,267,257,248,269,290,250,272,265,281,0,267,269],
[246,260,249,249,241,240,253,263,202,242,245,252,233,0,237],
[226,276,262,269,233,248,263,258,230,248,267,242,231,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 177, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,247,231,258,258,245,244,271,243,222,227,239,236,269],
[240,0,229,204,248,262,241,252,270,238,232,238,228,210,240],
[253,271,0,247,268,251,258,259,267,248,241,246,243,241,269],
[269,296,253,0,269,265,284,247,279,256,253,255,259,250,267],
[242,252,232,231,0,251,254,254,231,242,221,249,243,237,258],
[242,238,249,235,249,0,265,242,267,252,235,256,246,225,270],
[255,259,242,216,246,235,0,237,240,238,234,231,248,226,249],
[256,248,241,253,246,258,263,0,269,266,248,255,247,224,271],
[229,230,233,221,269,233,260,231,0,243,229,222,217,223,243],
[257,262,252,244,258,248,262,234,257,0,222,245,251,228,237],
[278,268,259,247,279,265,266,252,271,278,0,248,255,226,278],
[273,262,254,245,251,244,269,245,278,255,252,0,243,239,254],
[261,272,257,241,257,254,252,253,283,249,245,257,0,225,263],
[264,290,259,250,263,275,274,276,277,272,274,261,275,0,272],
[231,260,231,233,242,230,251,229,257,263,222,246,237,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 178, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,217,229,228,223,235,227,218,232,206,211,216,210,222],
[280,0,215,236,225,220,247,261,255,260,231,245,220,229,229],
[283,285,0,270,251,252,272,257,269,254,258,214,245,256,257],
[271,264,230,0,259,230,251,249,249,262,233,231,258,227,243],
[272,275,249,241,0,232,244,262,260,249,278,248,254,237,255],
[277,280,248,270,268,0,283,267,269,285,254,248,257,246,256],
[265,253,228,249,256,217,0,245,237,256,248,226,223,235,239],
[273,239,243,251,238,233,255,0,239,238,234,247,242,244,259],
[282,245,231,251,240,231,263,261,0,246,241,211,243,235,249],
[268,240,246,238,251,215,244,262,254,0,247,209,213,239,240],
[294,269,242,267,222,246,252,266,259,253,0,254,231,244,258],
[289,255,286,269,252,252,274,253,289,291,246,0,245,238,268],
[284,280,255,242,246,243,277,258,257,287,269,255,0,236,283],
[290,271,244,273,263,254,265,256,265,261,256,262,264,0,281],
[278,271,243,257,245,244,261,241,251,260,242,232,217,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 179, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,222,257,253,251,256,232,256,203,243,225,220,233,245],
[268,0,282,284,298,288,286,255,269,256,270,270,270,283,248],
[278,218,0,241,275,274,264,228,271,228,256,254,242,242,247],
[243,216,259,0,267,263,265,210,248,220,234,248,228,253,219],
[247,202,225,233,0,252,252,215,237,206,224,217,204,218,224],
[249,212,226,237,248,0,262,232,233,208,232,229,218,259,227],
[244,214,236,235,248,238,0,210,253,206,225,219,224,236,231],
[268,245,272,290,285,268,290,0,261,260,274,259,257,261,262],
[244,231,229,252,263,267,247,239,0,224,242,237,233,256,240],
[297,244,272,280,294,292,294,240,276,0,284,260,276,260,252],
[257,230,244,266,276,268,275,226,258,216,0,224,233,260,224],
[275,230,246,252,283,271,281,241,263,240,276,0,250,261,249],
[280,230,258,272,296,282,276,243,267,224,267,250,0,269,271],
[267,217,258,247,282,241,264,239,244,240,240,239,231,0,234],
[255,252,253,281,276,273,269,238,260,248,276,251,229,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 180, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,250,254,238,269,260,250,268,255,232,226,225,257,227],
[261,0,238,240,249,238,264,246,265,239,246,237,235,248,239],
[250,262,0,252,265,254,255,272,271,230,253,257,265,264,239],
[246,260,248,0,265,259,257,253,272,243,252,242,235,260,242],
[262,251,235,235,0,241,264,260,253,258,252,254,249,238,254],
[231,262,246,241,259,0,257,264,264,242,250,250,243,243,229],
[240,236,245,243,236,243,0,242,256,236,227,229,254,266,221],
[250,254,228,247,240,236,258,0,243,235,242,240,232,252,250],
[232,235,229,228,247,236,244,257,0,234,237,225,220,254,225],
[245,261,270,257,242,258,264,265,266,0,268,240,249,260,259],
[268,254,247,248,248,250,273,258,263,232,0,267,238,252,257],
[274,263,243,258,246,250,271,260,275,260,233,0,237,253,245],
[275,265,235,265,251,257,246,268,280,251,262,263,0,279,261],
[243,252,236,240,262,257,234,248,246,240,248,247,221,0,236],
[273,261,261,258,246,271,279,250,275,241,243,255,239,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 181, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,236,246,260,260,248,247,253,250,236,231,251,271,229],
[251,0,238,259,237,232,248,235,236,249,244,222,271,242,230],
[264,262,0,262,254,250,248,246,263,271,254,261,259,263,255],
[254,241,238,0,230,246,229,251,263,246,263,239,237,248,244],
[240,263,246,270,0,242,248,252,251,241,258,238,261,275,258],
[240,268,250,254,258,0,267,256,258,258,239,257,259,265,253],
[252,252,252,271,252,233,0,257,253,270,250,244,251,262,247],
[253,265,254,249,248,244,243,0,258,262,249,243,248,261,249],
[247,264,237,237,249,242,247,242,0,247,239,240,248,264,243],
[250,251,229,254,259,242,230,238,253,0,233,239,243,256,244],
[264,256,246,237,242,261,250,251,261,267,0,232,247,279,257],
[269,278,239,261,262,243,256,257,260,261,268,0,268,271,266],
[249,229,241,263,239,241,249,252,252,257,253,232,0,271,250],
[229,258,237,252,225,235,238,239,236,244,221,229,229,0,246],
[271,270,245,256,242,247,253,251,257,256,243,234,250,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 182, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,264,266,270,261,236,243,244,260,247,253,254,241,253],
[226,0,255,236,258,250,240,254,252,261,245,259,251,229,251],
[236,245,0,242,263,250,240,241,238,260,227,254,238,226,252],
[234,264,258,0,263,261,230,238,245,269,254,251,257,228,261],
[230,242,237,237,0,232,216,231,232,241,229,242,230,217,226],
[239,250,250,239,268,0,242,242,259,258,240,253,241,224,242],
[264,260,260,270,284,258,0,250,268,266,259,259,266,254,263],
[257,246,259,262,269,258,250,0,244,263,264,269,259,256,264],
[256,248,262,255,268,241,232,256,0,261,254,273,259,242,256],
[240,239,240,231,259,242,234,237,239,0,229,265,237,246,241],
[253,255,273,246,271,260,241,236,246,271,0,276,265,250,250],
[247,241,246,249,258,247,241,231,227,235,224,0,228,223,235],
[246,249,262,243,270,259,234,241,241,263,235,272,0,238,264],
[259,271,274,272,283,276,246,244,258,254,250,277,262,0,273],
[247,249,248,239,274,258,237,236,244,259,250,265,236,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 183, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,258,253,251,269,249,237,235,223,229,224,216,235,247],
[273,0,270,253,256,224,258,241,219,230,231,242,218,266,239],
[242,230,0,232,243,232,255,205,228,212,229,226,220,239,243],
[247,247,268,0,232,230,275,206,212,238,233,235,220,240,241],
[249,244,257,268,0,217,250,218,246,227,231,219,237,248,230],
[231,276,268,270,283,0,271,241,236,252,249,240,237,250,253],
[251,242,245,225,250,229,0,206,222,218,221,211,212,218,230],
[263,259,295,294,282,259,294,0,238,271,261,261,243,259,252],
[265,281,272,288,254,264,278,262,0,248,245,242,244,282,269],
[277,270,288,262,273,248,282,229,252,0,257,254,255,276,258],
[271,269,271,267,269,251,279,239,255,243,0,244,239,264,259],
[276,258,274,265,281,260,289,239,258,246,256,0,241,261,256],
[284,282,280,280,263,263,288,257,256,245,261,259,0,255,265],
[265,234,261,260,252,250,282,241,218,224,236,239,245,0,247],
[253,261,257,259,270,247,270,248,231,242,241,244,235,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 184, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,255,204,291,240,260,263,251,238,262,260,235,222,245],
[253,0,290,230,278,271,256,253,262,272,275,261,247,227,242],
[245,210,0,223,272,244,237,234,250,247,238,254,223,219,237],
[296,270,277,0,273,268,247,264,256,245,255,249,242,250,261],
[209,222,228,227,0,235,220,211,230,219,243,239,209,232,237],
[260,229,256,232,265,0,208,257,248,250,241,242,243,215,244],
[240,244,263,253,280,292,0,255,257,256,237,262,251,234,265],
[237,247,266,236,289,243,245,0,242,250,260,260,232,251,251],
[249,238,250,244,270,252,243,258,0,254,238,267,240,218,251],
[262,228,253,255,281,250,244,250,246,0,239,248,243,239,253],
[238,225,262,245,257,259,263,240,262,261,0,265,239,254,248],
[240,239,246,251,261,258,238,240,233,252,235,0,240,232,232],
[265,253,277,258,291,257,249,268,260,257,261,260,0,236,266],
[278,273,281,250,268,285,266,249,282,261,246,268,264,0,257],
[255,258,263,239,263,256,235,249,249,247,252,268,234,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 185, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,253,227,255,248,253,262,241,256,241,254,256,237,251],
[245,0,257,232,253,263,250,272,258,249,234,259,241,246,228],
[247,243,0,230,261,261,256,265,233,243,243,242,239,254,253],
[273,268,270,0,270,276,259,287,256,263,234,264,262,246,261],
[245,247,239,230,0,260,245,275,240,248,231,262,265,240,254],
[252,237,239,224,240,0,239,264,253,240,237,232,257,234,244],
[247,250,244,241,255,261,0,274,241,259,246,236,257,226,244],
[238,228,235,213,225,236,226,0,222,249,215,220,228,228,236],
[259,242,267,244,260,247,259,278,0,237,255,248,256,251,259],
[244,251,257,237,252,260,241,251,263,0,240,261,245,260,248],
[259,266,257,266,269,263,254,285,245,260,0,267,262,256,259],
[246,241,258,236,238,268,264,280,252,239,233,0,251,246,243],
[244,259,261,238,235,243,243,272,244,255,238,249,0,256,241],
[263,254,246,254,260,266,274,272,249,240,244,254,244,0,265],
[249,272,247,239,246,256,256,264,241,252,241,257,259,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 186, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,282,257,259,268,255,293,251,290,275,271,284,239,268],
[233,0,232,230,235,247,245,252,228,238,243,251,245,220,261],
[218,268,0,232,211,249,254,262,227,253,251,240,234,227,252],
[243,270,268,0,244,270,260,290,251,257,262,262,275,248,263],
[241,265,289,256,0,264,246,292,252,259,270,261,258,247,256],
[232,253,251,230,236,0,245,263,239,239,244,252,241,222,260],
[245,255,246,240,254,255,0,263,235,243,252,260,245,244,262],
[207,248,238,210,208,237,237,0,224,240,232,233,227,213,224],
[249,272,273,249,248,261,265,276,0,268,270,262,258,254,287],
[210,262,247,243,241,261,257,260,232,0,254,245,254,234,250],
[225,257,249,238,230,256,248,268,230,246,0,245,247,235,264],
[229,249,260,238,239,248,240,267,238,255,255,0,251,232,258],
[216,255,266,225,242,259,255,273,242,246,253,249,0,243,257],
[261,280,273,252,253,278,256,287,246,266,265,268,257,0,272],
[232,239,248,237,244,240,238,276,213,250,236,242,243,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 187, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,239,230,257,246,247,241,229,239,243,230,251,249,247],
[248,0,244,241,244,234,226,236,220,240,250,243,237,252,238],
[261,256,0,240,242,248,240,240,235,248,254,244,237,263,237],
[270,259,260,0,265,263,245,262,254,253,252,249,257,258,249],
[243,256,258,235,0,246,243,244,243,237,256,240,243,251,256],
[254,266,252,237,254,0,231,243,243,265,260,247,257,270,245],
[253,274,260,255,257,269,0,268,248,252,263,267,259,269,247],
[259,264,260,238,256,257,232,0,233,242,255,256,254,265,242],
[271,280,265,246,257,257,252,267,0,261,277,260,261,278,264],
[261,260,252,247,263,235,248,258,239,0,257,250,251,265,245],
[257,250,246,248,244,240,237,245,223,243,0,242,240,266,247],
[270,257,256,251,260,253,233,244,240,250,258,0,247,254,244],
[249,263,263,243,257,243,241,246,239,249,260,253,0,264,249],
[251,248,237,242,249,230,231,235,222,235,234,246,236,0,242],
[253,262,263,251,244,255,253,258,236,255,253,256,251,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 188, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,253,275,268,274,243,283,253,269,290,266,256,255,266],
[257,0,254,260,255,295,241,263,238,248,282,258,248,264,264],
[247,246,0,259,244,239,248,255,228,253,246,268,251,262,257],
[225,240,241,0,245,231,235,247,224,238,233,244,252,238,258],
[232,245,256,255,0,261,237,263,241,257,243,258,236,247,240],
[226,205,261,269,239,0,234,238,219,252,256,248,269,219,258],
[257,259,252,265,263,266,0,277,250,284,262,289,246,261,276],
[217,237,245,253,237,262,223,0,217,231,262,242,254,234,251],
[247,262,272,276,259,281,250,283,0,288,255,284,264,258,282],
[231,252,247,262,243,248,216,269,212,0,284,269,253,225,272],
[210,218,254,267,257,244,238,238,245,216,0,266,239,241,226],
[234,242,232,256,242,252,211,258,216,231,234,0,245,236,253],
[244,252,249,248,264,231,254,246,236,247,261,255,0,230,267],
[245,236,238,262,253,281,239,266,242,275,259,264,270,0,244],
[234,236,243,242,260,242,224,249,218,228,274,247,233,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 189, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,273,296,269,277,293,274,298,247,278,246,312,287,261],
[200,0,249,249,222,245,224,271,264,234,231,220,237,245,245],
[227,251,0,277,259,245,273,250,260,234,278,247,272,266,267],
[204,251,223,0,231,223,236,233,246,205,260,242,238,239,222],
[231,278,241,269,0,250,235,269,245,254,251,244,280,224,218],
[223,255,255,277,250,0,228,262,235,242,263,237,278,230,250],
[207,276,227,264,265,272,0,257,247,247,240,246,282,256,236],
[226,229,250,267,231,238,243,0,244,244,233,250,237,239,229],
[202,236,240,254,255,265,253,256,0,216,252,253,271,244,257],
[253,266,266,295,246,258,253,256,284,0,246,195,262,225,241],
[222,269,222,240,249,237,260,267,248,254,0,239,271,268,283],
[254,280,253,258,256,263,254,250,247,305,261,0,275,280,252],
[188,263,228,262,220,222,218,263,229,238,229,225,0,234,207],
[213,255,234,261,276,270,244,261,256,275,232,220,266,0,229],
[239,255,233,278,282,250,264,271,243,259,217,248,293,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 190, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,238,257,236,237,244,263,246,243,246,248,257,228,248],
[252,0,222,240,236,239,227,261,255,255,260,255,250,246,250],
[262,278,0,262,247,260,251,266,257,265,271,266,265,250,285],
[243,260,238,0,239,242,250,279,251,247,256,246,262,237,254],
[264,264,253,261,0,251,246,274,270,252,262,257,268,256,252],
[263,261,240,258,249,0,238,267,262,260,258,271,257,242,259],
[256,273,249,250,254,262,0,261,262,269,259,261,269,250,259],
[237,239,234,221,226,233,239,0,244,242,253,231,261,222,246],
[254,245,243,249,230,238,238,256,0,262,251,253,277,240,246],
[257,245,235,253,248,240,231,258,238,0,240,243,262,233,248],
[254,240,229,244,238,242,241,247,249,260,0,234,249,224,246],
[252,245,234,254,243,229,239,269,247,257,266,0,277,228,239],
[243,250,235,238,232,243,231,239,223,238,251,223,0,229,236],
[272,254,250,263,244,258,250,278,260,267,276,272,271,0,257],
[252,250,215,246,248,241,241,254,254,252,254,261,264,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 191, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,255,238,260,250,246,272,247,256,292,255,276,279,271],
[217,0,226,205,240,240,237,241,211,233,241,234,246,258,229],
[245,274,0,247,261,287,240,261,236,245,269,223,278,264,266],
[262,295,253,0,250,250,238,276,247,247,264,253,286,259,238],
[240,260,239,250,0,258,228,255,249,246,272,242,265,253,233],
[250,260,213,250,242,0,233,240,238,224,250,239,260,246,234],
[254,263,260,262,272,267,0,250,232,250,284,258,287,267,242],
[228,259,239,224,245,260,250,0,249,246,250,231,264,254,248],
[253,289,264,253,251,262,268,251,0,267,277,270,278,260,250],
[244,267,255,253,254,276,250,254,233,0,261,240,252,251,248],
[208,259,231,236,228,250,216,250,223,239,0,242,257,259,250],
[245,266,277,247,258,261,242,269,230,260,258,0,282,241,254],
[224,254,222,214,235,240,213,236,222,248,243,218,0,265,251],
[221,242,236,241,247,254,233,246,240,249,241,259,235,0,254],
[229,271,234,262,267,266,258,252,250,252,250,246,249,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 192, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,341,177,378,476,476,392,430,431,359,375,371,476,391,476],
[159,0,180,277,391,318,310,273,257,292,270,206,403,222,315],
[323,320,0,375,399,375,323,375,399,292,303,245,412,369,404],
[122,223,125,0,366,256,303,202,160,254,142,186,283,186,335],
[24,109,101,134,0,189,156,166,86,212,70,199,270,129,200],
[24,182,125,244,311,0,190,283,186,154,86,210,381,121,249],
[108,190,177,197,344,310,0,310,152,232,207,240,310,210,234],
[70,227,125,298,334,217,190,0,205,245,131,189,341,205,245],
[69,243,101,340,414,314,348,295,0,318,265,244,413,198,245],
[141,208,208,246,288,346,268,255,182,0,249,224,350,158,280],
[125,230,197,358,430,414,293,369,235,251,0,282,451,198,258],
[129,294,255,314,301,290,260,311,256,276,218,0,397,216,319],
[24,97,88,217,230,119,190,159,87,150,49,103,0,140,246],
[109,278,131,314,371,379,290,295,302,342,302,284,360,0,365],
[24,185,96,165,300,251,266,255,255,220,242,181,254,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 193, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,232,246,272,257,299,247,240,227,246,261,258,215,231],
[260,0,251,269,261,255,261,275,247,246,240,274,226,224,270],
[268,249,0,240,262,262,292,266,253,248,254,273,232,221,242],
[254,231,260,0,251,265,280,269,265,224,220,249,225,222,262],
[228,239,238,249,0,247,280,262,269,232,248,290,250,223,256],
[243,245,238,235,253,0,281,244,211,236,246,230,208,211,246],
[201,239,208,220,220,219,0,259,215,211,230,248,203,193,217],
[253,225,234,231,238,256,241,0,232,214,237,238,221,229,241],
[260,253,247,235,231,289,285,268,0,223,223,273,236,232,250],
[273,254,252,276,268,264,289,286,277,0,250,251,248,238,266],
[254,260,246,280,252,254,270,263,277,250,0,264,269,263,245],
[239,226,227,251,210,270,252,262,227,249,236,0,206,214,235],
[242,274,268,275,250,292,297,279,264,252,231,294,0,233,272],
[285,276,279,278,277,289,307,271,268,262,237,286,267,0,279],
[269,230,258,238,244,254,283,259,250,234,255,265,228,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 194, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,246,250,247,266,290,294,285,237,274,291,257,258,258],
[249,0,241,259,247,252,244,276,258,249,277,291,254,256,249],
[254,259,0,252,257,250,254,278,259,248,271,270,264,256,224],
[250,241,248,0,242,244,243,277,252,242,262,250,242,245,250],
[253,253,243,258,0,244,258,266,273,258,285,266,256,265,255],
[234,248,250,256,256,0,268,282,257,251,255,269,251,269,229],
[210,256,246,257,242,232,0,255,251,238,251,278,246,247,255],
[206,224,222,223,234,218,245,0,234,224,243,241,212,215,218],
[215,242,241,248,227,243,249,266,0,225,261,250,274,252,231],
[263,251,252,258,242,249,262,276,275,0,265,269,262,255,264],
[226,223,229,238,215,245,249,257,239,235,0,248,218,250,229],
[209,209,230,250,234,231,222,259,250,231,252,0,246,228,227],
[243,246,236,258,244,249,254,288,226,238,282,254,0,258,233],
[242,244,244,255,235,231,253,285,248,245,250,272,242,0,251],
[242,251,276,250,245,271,245,282,269,236,271,273,267,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 195, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,203,198,226,249,257,232,235,177,247,275,234,283,221],
[270,0,258,241,275,235,250,233,276,217,285,253,238,281,283],
[297,242,0,264,231,267,220,272,321,257,251,288,237,278,265],
[302,259,236,0,247,279,223,273,289,233,236,322,284,301,286],
[274,225,269,253,0,270,282,269,276,267,275,280,272,267,239],
[251,265,233,221,230,0,239,233,277,235,242,294,262,275,261],
[243,250,280,277,218,261,0,208,270,237,230,257,245,286,240],
[268,267,228,227,231,267,292,0,256,238,260,289,271,284,277],
[265,224,179,211,224,223,230,244,0,227,231,259,209,259,247],
[323,283,243,267,233,265,263,262,273,0,249,297,251,302,266],
[253,215,249,264,225,258,270,240,269,251,0,293,247,281,268],
[225,247,212,178,220,206,243,211,241,203,207,0,206,271,227],
[266,262,263,216,228,238,255,229,291,249,253,294,0,270,279],
[217,219,222,199,233,225,214,216,241,198,219,229,230,0,228],
[279,217,235,214,261,239,260,223,253,234,232,273,221,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 196, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,246,255,271,240,250,252,250,271,256,240,251,254,237],
[227,0,239,210,230,239,241,240,251,231,249,238,231,246,231],
[254,261,0,219,256,246,242,262,246,251,235,254,240,253,240],
[245,290,281,0,253,268,275,270,268,283,256,277,253,262,273],
[229,270,244,247,0,247,245,264,265,240,253,257,264,274,251],
[260,261,254,232,253,0,262,270,262,253,266,268,267,274,261],
[250,259,258,225,255,238,0,264,242,245,251,257,262,263,252],
[248,260,238,230,236,230,236,0,229,251,249,233,241,256,232],
[250,249,254,232,235,238,258,271,0,250,260,250,265,251,232],
[229,269,249,217,260,247,255,249,250,0,236,255,255,247,226],
[244,251,265,244,247,234,249,251,240,264,0,246,252,251,225],
[260,262,246,223,243,232,243,267,250,245,254,0,243,283,245],
[249,269,260,247,236,233,238,259,235,245,248,257,0,264,253],
[246,254,247,238,226,226,237,244,249,253,249,217,236,0,224],
[263,269,260,227,249,239,248,268,268,274,275,255,247,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 197, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,191,316,233,222,186,303,265,240,194,211,246,280,209],
[216,0,250,226,265,225,181,236,154,244,244,181,300,121,146],
[309,250,0,263,219,246,202,330,237,316,263,206,325,240,242],
[184,274,237,0,325,251,177,304,161,317,263,170,302,170,284],
[267,235,281,175,0,269,188,243,219,229,242,145,242,216,262],
[278,275,254,249,231,0,153,285,237,266,273,164,295,239,213],
[314,319,298,323,312,347,0,360,316,391,234,318,361,290,269],
[197,264,170,196,257,215,140,0,139,225,204,147,248,178,204],
[235,346,263,339,281,263,184,361,0,294,302,202,298,347,301],
[260,256,184,183,271,234,109,275,206,0,247,140,255,208,182],
[306,256,237,237,258,227,266,296,198,253,0,215,299,210,264],
[289,319,294,330,355,336,182,353,298,360,285,0,312,289,304],
[254,200,175,198,258,205,139,252,202,245,201,188,0,233,239],
[220,379,260,330,284,261,210,322,153,292,290,211,267,0,259],
[291,354,258,216,238,287,231,296,199,318,236,196,261,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 198, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,249,237,261,269,238,245,269,249,263,272,239,260,252],
[259,0,246,255,265,245,223,222,235,236,275,259,235,256,251],
[251,254,0,246,247,280,248,231,242,260,277,248,223,237,278],
[263,245,254,0,266,271,269,259,263,295,266,279,261,262,233],
[239,235,253,234,0,253,201,227,221,246,235,238,239,227,215],
[231,255,220,229,247,0,205,194,225,230,243,240,236,217,231],
[262,277,252,231,299,295,0,247,241,261,259,270,270,233,230],
[255,278,269,241,273,306,253,0,274,251,259,256,258,271,270],
[231,265,258,237,279,275,259,226,0,252,264,261,240,228,243],
[251,264,240,205,254,270,239,249,248,0,243,240,233,224,218],
[237,225,223,234,265,257,241,241,236,257,0,246,237,227,231],
[228,241,252,221,262,260,230,244,239,260,254,0,255,243,260],
[261,265,277,239,261,264,230,242,260,267,263,245,0,270,256],
[240,244,263,238,273,283,267,229,272,276,273,257,230,0,253],
[248,249,222,267,285,269,270,230,257,282,269,240,244,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 199, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,257,248,222,226,267,244,249,246,231,254,216,216,236],
[265,0,258,276,254,252,296,269,239,251,260,268,248,261,262],
[243,242,0,251,247,210,250,246,257,250,252,282,237,232,255],
[252,224,249,0,220,210,261,257,248,238,236,269,240,233,237],
[278,246,253,280,0,251,272,278,260,245,234,275,245,221,288],
[274,248,290,290,249,0,294,267,289,266,284,258,282,257,272],
[233,204,250,239,228,206,0,233,223,227,221,248,216,227,247],
[256,231,254,243,222,233,267,0,251,227,250,268,239,239,254],
[251,261,243,252,240,211,277,249,0,225,256,262,252,247,250],
[254,249,250,262,255,234,273,273,275,0,248,295,243,220,277],
[269,240,248,264,266,216,279,250,244,252,0,270,260,242,254],
[246,232,218,231,225,242,252,232,238,205,230,0,222,231,254],
[284,252,263,260,255,218,284,261,248,257,240,278,0,236,277],
[284,239,268,267,279,243,273,261,253,280,258,269,264,0,261],
[264,238,245,263,212,228,253,246,250,223,246,246,223,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 500, 200, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebbrcw/mebbrcw_15_500.csv", index=False, header=False)

import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg

rep = 1
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,44,49,47,40,44,42,43,36,46,36,41,40,49,39],
[56,0,42,46,51,48,53,45,37,48,43,45,50,50,43],
[51,58,0,45,42,61,49,57,38,58,49,49,50,65,53],
[53,54,55,0,54,53,52,53,43,63,53,49,45,55,54],
[60,49,58,46,0,60,46,53,52,54,58,49,50,57,58],
[56,52,39,47,40,0,41,53,40,49,47,46,50,50,45],
[58,47,51,48,54,59,0,51,34,64,49,46,57,50,47],
[57,55,43,47,47,47,49,0,33,51,47,38,50,47,41],
[64,63,62,57,48,60,66,67,0,68,66,62,65,59,65],
[54,52,42,37,46,51,36,49,32,0,46,46,46,46,44],
[64,57,51,47,42,53,51,53,34,54,0,44,53,57,55],
[59,55,51,51,51,54,54,62,38,54,56,0,59,60,55],
[60,50,50,55,50,50,43,50,35,54,47,41,0,50,47],
[51,50,35,45,43,50,50,53,41,54,43,40,50,0,43],
[61,57,47,46,42,55,53,59,35,56,45,45,53,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 1, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,55,52,56,51,57,48,57,44,42,51,58,49,53],
[46,0,53,45,44,50,51,38,49,43,43,42,52,50,56],
[45,47,0,43,51,49,52,44,53,48,47,46,58,53,56],
[48,55,57,0,54,49,60,46,57,50,53,51,53,54,60],
[44,56,49,46,0,46,52,41,50,46,42,46,51,44,54],
[49,50,51,51,54,0,63,43,60,47,43,44,61,50,64],
[43,49,48,40,48,37,0,40,59,36,38,39,58,43,56],
[52,62,56,54,59,57,60,0,58,50,54,51,68,60,57],
[43,51,47,43,50,40,41,42,0,36,43,45,44,43,46],
[56,57,52,50,54,53,64,50,64,0,55,48,64,53,54],
[58,57,53,47,58,57,62,46,57,45,0,46,68,57,71],
[49,58,54,49,54,56,61,49,55,52,54,0,55,50,53],
[42,48,42,47,49,39,42,32,56,36,32,45,0,49,49],
[51,50,47,46,56,50,57,40,57,47,43,50,51,0,58],
[47,44,44,40,46,36,44,43,54,46,29,47,51,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 2, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,52,55,46,39,38,67,55,33,55,55,52,55,44],
[49,0,46,40,49,39,52,41,44,24,51,50,33,41,41],
[48,54,0,52,44,49,39,55,58,39,66,47,41,50,51],
[45,60,48,0,38,48,40,62,46,51,55,62,47,43,55],
[54,51,56,62,0,43,37,61,53,52,61,60,51,53,44],
[61,61,51,52,57,0,51,46,67,51,80,66,53,41,60],
[62,48,61,60,63,49,0,57,65,42,64,60,51,52,56],
[33,59,45,38,39,54,43,0,37,33,50,53,46,37,54],
[45,56,42,54,47,33,35,63,0,32,42,47,51,33,40],
[67,76,61,49,48,49,58,67,68,0,70,63,75,50,60],
[45,49,34,45,39,20,36,50,58,30,0,48,39,33,36],
[45,50,53,38,40,34,40,47,53,37,52,0,50,48,48],
[48,67,59,53,49,47,49,54,49,25,61,50,0,43,63],
[45,59,50,57,47,59,48,63,67,50,67,52,57,0,61],
[56,59,49,45,56,40,44,46,60,40,64,52,37,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 3, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,59,55,59,55,57,56,50,65,47,61,65,64,52],
[41,0,60,53,50,55,62,59,53,60,48,57,58,63,56],
[41,40,0,46,45,45,50,42,35,55,38,55,58,49,50],
[45,47,54,0,46,49,50,44,44,55,45,52,47,48,58],
[41,50,55,54,0,58,59,49,46,57,48,62,59,54,61],
[45,45,55,51,42,0,49,44,46,55,45,57,57,51,52],
[43,38,50,50,41,51,0,37,34,53,46,52,51,41,51],
[44,41,58,56,51,56,63,0,50,58,47,63,60,52,54],
[50,47,65,56,54,54,66,50,0,66,56,70,67,55,56],
[35,40,45,45,43,45,47,42,34,0,36,45,45,50,49],
[53,52,62,55,52,55,54,53,44,64,0,59,57,56,56],
[39,43,45,48,38,43,48,37,30,55,41,0,48,39,47],
[35,42,42,53,41,43,49,40,33,55,43,52,0,52,47],
[36,37,51,52,46,49,59,48,45,50,44,61,48,0,44],
[48,44,50,42,39,48,49,46,44,51,44,53,53,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 4, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,52,58,43,39,48,49,58,62,36,65,44,46,61],
[48,0,51,60,39,36,48,59,51,48,28,47,42,50,47],
[48,49,0,60,48,49,44,59,51,57,47,65,40,38,63],
[42,40,40,0,36,35,34,54,51,40,23,54,44,43,56],
[57,61,52,64,0,28,41,54,59,54,40,50,52,43,54],
[61,64,51,65,72,0,66,60,57,66,46,82,47,54,60],
[52,52,56,66,59,34,0,60,65,58,42,64,52,45,53],
[51,41,41,46,46,40,40,0,48,50,39,51,40,41,57],
[42,49,49,49,41,43,35,52,0,52,30,57,43,37,51],
[38,52,43,60,46,34,42,50,48,0,34,58,45,25,57],
[64,72,53,77,60,54,58,61,70,66,0,78,57,50,63],
[35,53,35,46,50,18,36,49,43,42,22,0,25,36,34],
[56,58,60,56,48,53,48,60,57,55,43,75,0,52,58],
[54,50,62,57,57,46,55,59,63,75,50,64,48,0,56],
[39,53,37,44,46,40,47,43,49,43,37,66,42,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 5, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,46,55,50,45,60,52,52,59,57,59,55,59,43],
[40,0,35,54,47,40,53,42,48,52,54,50,48,49,35],
[54,65,0,60,56,51,61,52,55,67,63,58,48,54,48],
[45,46,40,0,39,50,52,38,48,47,41,50,45,51,40],
[50,53,44,61,0,53,61,47,53,62,53,61,53,55,40],
[55,60,49,50,47,0,60,43,58,55,61,56,49,53,51],
[40,47,39,48,39,40,0,34,49,44,47,48,34,48,39],
[48,58,48,62,53,57,66,0,56,52,59,59,47,55,47],
[48,52,45,52,47,42,51,44,0,54,45,50,48,56,40],
[41,48,33,53,38,45,56,48,46,0,53,54,38,49,37],
[43,46,37,59,47,39,53,41,55,47,0,57,42,47,43],
[41,50,42,50,39,44,52,41,50,46,43,0,39,54,40],
[45,52,52,55,47,51,66,53,52,62,58,61,0,54,48],
[41,51,46,49,45,47,52,45,44,51,53,46,46,0,44],
[57,65,52,60,60,49,61,53,60,63,57,60,52,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 6, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,48,49,48,50,55,46,50,45,52,51,48,49,50],
[57,0,51,46,51,57,53,53,47,54,54,47,50,48,62],
[52,49,0,46,50,53,55,50,52,47,51,49,50,46,56],
[51,54,54,0,52,55,57,55,49,55,53,48,52,45,58],
[52,49,50,48,0,52,51,48,48,48,48,47,53,49,57],
[50,43,47,45,48,0,49,53,45,50,48,48,49,46,53],
[45,47,45,43,49,51,0,52,52,50,44,50,50,52,56],
[54,47,50,45,52,47,48,0,41,47,47,41,48,47,49],
[50,53,48,51,52,55,48,59,0,45,48,48,50,48,53],
[55,46,53,45,52,50,50,53,55,0,48,51,51,44,57],
[48,46,49,47,52,52,56,53,52,52,0,46,55,49,52],
[49,53,51,52,53,52,50,59,52,49,54,0,53,47,54],
[52,50,50,48,47,51,50,52,50,49,45,47,0,51,50],
[51,52,54,55,51,54,48,53,52,56,51,53,49,0,56],
[50,38,44,42,43,47,44,51,47,43,48,46,50,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 7, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,63,45,51,57,40,59,44,44,64,54,56,50,71],
[54,0,52,48,42,40,49,58,51,48,55,50,70,55,54],
[37,48,0,44,41,45,40,53,33,52,58,55,57,35,58],
[55,52,56,0,35,54,57,66,50,46,67,56,59,64,65],
[49,58,59,65,0,64,50,72,57,62,79,56,70,66,70],
[43,60,55,46,36,0,44,49,44,51,55,30,43,50,63],
[60,51,60,43,50,56,0,54,49,53,64,57,54,62,63],
[41,42,47,34,28,51,46,0,45,40,55,47,37,44,47],
[56,49,67,50,43,56,51,55,0,38,50,39,44,64,66],
[56,52,48,54,38,49,47,60,62,0,72,56,66,60,68],
[36,45,42,33,21,45,36,45,50,28,0,42,43,54,44],
[46,50,45,44,44,70,43,53,61,44,58,0,54,53,66],
[44,30,43,41,30,57,46,63,56,34,57,46,0,53,51],
[50,45,65,36,34,50,38,56,36,40,46,47,47,0,50],
[29,46,42,35,30,37,37,53,34,32,56,34,49,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 8, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,50,56,56,45,54,57,63,52,47,54,55,60,48],
[49,0,55,54,60,54,51,54,60,53,47,48,47,63,52],
[50,45,0,46,53,46,43,62,54,46,40,51,46,54,49],
[44,46,54,0,51,45,45,44,61,50,48,48,51,51,45],
[44,40,47,49,0,41,45,56,60,46,42,50,41,47,43],
[55,46,54,55,59,0,54,55,63,49,50,57,56,57,57],
[46,49,57,55,55,46,0,61,58,57,49,52,52,59,54],
[43,46,38,56,44,45,39,0,52,47,43,39,44,58,44],
[37,40,46,39,40,37,42,48,0,39,32,42,36,46,34],
[48,47,54,50,54,51,43,53,61,0,46,52,47,61,53],
[53,53,60,52,58,50,51,57,68,54,0,50,46,62,44],
[46,52,49,52,50,43,48,61,58,48,50,0,50,64,56],
[45,53,54,49,59,44,48,56,64,53,54,50,0,55,48],
[40,37,46,49,53,43,41,42,54,39,38,36,45,0,41],
[52,48,51,55,57,43,46,56,66,47,56,44,52,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 9, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,24,49,32,45,44,57,29,25,40,37,31,54,35],
[54,0,28,44,41,40,45,34,28,27,36,34,29,47,37],
[76,72,0,71,51,66,70,66,52,57,68,49,64,78,60],
[51,56,29,0,34,52,66,46,26,26,49,23,43,47,46],
[68,59,49,66,0,57,63,55,36,46,52,40,53,58,49],
[55,60,34,48,43,0,55,52,28,33,40,32,57,56,42],
[56,55,30,34,37,45,0,58,22,28,42,35,37,46,44],
[43,66,34,54,45,48,42,0,37,27,53,44,55,42,35],
[71,72,48,74,64,72,78,63,0,63,52,56,48,59,54],
[75,73,43,74,54,67,72,73,37,0,55,58,62,55,53],
[60,64,32,51,48,60,58,47,48,45,0,38,44,58,51],
[63,66,51,77,60,68,65,56,44,42,62,0,54,64,52],
[69,71,36,57,47,43,63,45,52,38,56,46,0,57,43],
[46,53,22,53,42,44,54,58,41,45,42,36,43,0,50],
[65,63,40,54,51,58,56,65,46,47,49,48,57,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 10, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,54,41,44,18,27,47,43,46,66,41,40,24,33],
[59,0,63,53,59,43,69,68,52,62,64,52,53,55,47],
[46,37,0,43,64,27,37,50,29,37,66,53,33,37,31],
[59,47,57,0,56,44,61,58,50,48,84,57,46,53,51],
[56,41,36,44,0,49,47,59,52,55,55,49,51,34,32],
[82,57,73,56,51,0,42,52,51,50,78,50,39,51,48],
[73,31,63,39,53,58,0,48,54,65,68,53,44,63,49],
[53,32,50,42,41,48,52,0,53,59,57,46,49,54,43],
[57,48,71,50,48,49,46,47,0,46,76,57,32,34,53],
[54,38,63,52,45,50,35,41,54,0,60,48,36,37,42],
[34,36,34,16,45,22,32,43,24,40,0,40,42,39,20],
[59,48,47,43,51,50,47,54,43,52,60,0,36,54,39],
[60,47,67,54,49,61,56,51,68,64,58,64,0,43,58],
[76,45,63,47,66,49,37,46,66,63,61,46,57,0,43],
[67,53,69,49,68,52,51,57,47,58,80,61,42,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 11, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,55,43,54,47,50,49,48,49,41,44,48,50,50],
[46,0,47,43,52,46,48,53,48,45,48,42,45,51,50],
[45,53,0,40,47,48,46,47,49,48,46,47,47,51,43],
[57,57,60,0,61,47,52,62,50,55,48,54,54,62,52],
[46,48,53,39,0,44,48,43,50,47,39,45,49,54,49],
[53,54,52,53,56,0,53,51,45,54,53,55,48,61,50],
[50,52,54,48,52,47,0,52,52,47,52,50,50,50,55],
[51,47,53,38,57,49,48,0,43,42,48,43,55,53,53],
[52,52,51,50,50,55,48,57,0,45,48,48,55,55,50],
[51,55,52,45,53,46,53,58,55,0,45,54,52,54,55],
[59,52,54,52,61,47,48,52,52,55,0,51,53,57,54],
[56,58,53,46,55,45,50,57,52,46,49,0,46,46,55],
[52,55,53,46,51,52,50,45,45,48,47,54,0,55,49],
[50,49,49,38,46,39,50,47,45,46,43,54,45,0,44],
[50,50,57,48,51,50,45,47,50,45,46,45,51,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 12, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,67,55,54,51,57,56,60,47,63,53,54,52,63],
[41,0,49,47,42,48,49,52,50,39,54,55,50,55,62],
[33,51,0,47,41,34,43,42,46,35,39,43,38,48,52],
[45,53,53,0,51,46,46,44,52,40,49,52,57,54,58],
[46,58,59,49,0,50,49,58,57,49,53,51,54,61,65],
[49,52,66,54,50,0,59,55,59,54,61,56,61,51,67],
[43,51,57,54,51,41,0,46,45,46,47,56,47,61,61],
[44,48,58,56,42,45,54,0,48,45,49,50,52,54,63],
[40,50,54,48,43,41,55,52,0,48,44,51,46,49,66],
[53,61,65,60,51,46,54,55,52,0,59,52,64,63,60],
[37,46,61,51,47,39,53,51,56,41,0,54,49,56,56],
[47,45,57,48,49,44,44,50,49,48,46,0,48,54,56],
[46,50,62,43,46,39,53,48,54,36,51,52,0,49,56],
[48,45,52,46,39,49,39,46,51,37,44,46,51,0,57],
[37,38,48,42,35,33,39,37,34,40,44,44,44,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 13, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,41,49,61,43,53,46,53,56,44,55,45,58,55],
[49,0,50,47,46,44,42,45,48,57,46,52,50,51,52],
[59,50,0,46,53,49,52,51,54,54,49,53,50,57,48],
[51,53,54,0,51,53,51,49,50,51,41,53,52,50,47],
[39,54,47,49,0,52,48,52,53,57,46,50,42,61,46],
[57,56,51,47,48,0,42,54,52,51,53,54,40,59,55],
[47,58,48,49,52,58,0,51,48,47,48,46,44,47,47],
[54,55,49,51,48,46,49,0,52,48,50,57,50,58,48],
[47,52,46,50,47,48,52,48,0,56,49,56,46,53,53],
[44,43,46,49,43,49,53,52,44,0,45,51,42,50,42],
[56,54,51,59,54,47,52,50,51,55,0,58,56,46,55],
[45,48,47,47,50,46,54,43,44,49,42,0,40,53,49],
[55,50,50,48,58,60,56,50,54,58,44,60,0,54,52],
[42,49,43,50,39,41,53,42,47,50,54,47,46,0,48],
[45,48,52,53,54,45,53,52,47,58,45,51,48,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 14, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,51,55,27,6,34,51,6,17,71,35,30,6,65],
[50,0,68,29,35,29,34,54,9,9,64,61,53,12,56],
[49,32,0,49,47,46,52,32,32,17,73,35,44,32,52],
[45,71,51,0,42,24,52,51,24,6,71,32,30,6,65],
[73,65,53,58,0,8,46,59,14,17,77,41,30,41,73],
[94,71,54,76,92,0,70,54,14,17,77,41,30,41,79],
[66,66,48,48,54,30,0,54,30,15,80,62,54,36,48],
[49,46,68,49,41,46,46,0,26,11,67,31,20,34,46],
[94,91,68,76,86,86,70,74,0,61,97,61,50,71,83],
[83,91,83,94,83,83,85,89,39,0,97,94,89,89,83],
[29,36,27,29,23,23,20,33,3,3,0,21,53,6,41],
[65,39,65,68,59,59,38,69,39,6,79,0,50,33,65],
[70,47,56,70,70,70,46,80,50,11,47,50,0,35,67],
[94,88,68,94,59,59,64,66,29,11,94,67,65,0,62],
[35,44,48,35,27,21,52,54,17,17,59,35,33,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 15, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,58,52,50,50,48,46,53,52,50,43,51,58,39],
[52,0,61,54,44,48,43,49,55,48,53,46,43,49,48],
[42,39,0,45,46,42,36,43,50,43,45,38,40,46,40],
[48,46,55,0,44,46,48,47,48,54,46,37,40,46,38],
[50,56,54,56,0,48,51,49,55,56,50,45,48,50,38],
[50,52,58,54,52,0,46,40,49,52,50,42,48,48,41],
[52,57,64,52,49,54,0,55,56,57,49,44,48,61,48],
[54,51,57,53,51,60,45,0,60,52,51,48,50,55,45],
[47,45,50,52,45,51,44,40,0,47,44,40,44,50,43],
[48,52,57,46,44,48,43,48,53,0,51,44,47,54,46],
[50,47,55,54,50,50,51,49,56,49,0,48,47,53,45],
[57,54,62,63,55,58,56,52,60,56,52,0,42,59,54],
[49,57,60,60,52,52,52,50,56,53,53,58,0,57,48],
[42,51,54,54,50,52,39,45,50,46,47,41,43,0,41],
[61,52,60,62,62,59,52,55,57,54,55,46,52,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 16, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,53,61,58,45,50,60,55,43,46,54,57,46,39],
[55,0,48,56,58,52,62,59,56,49,46,63,48,51,46],
[47,52,0,60,51,45,54,51,59,49,53,56,40,52,53],
[39,44,40,0,51,35,42,51,54,41,34,58,43,47,45],
[42,42,49,49,0,39,53,48,47,37,41,53,38,48,46],
[55,48,55,65,61,0,61,67,69,49,54,58,53,61,55],
[50,38,46,58,47,39,0,50,49,48,43,42,42,44,39],
[40,41,49,49,52,33,50,0,55,52,38,52,47,50,41],
[45,44,41,46,53,31,51,45,0,42,39,53,41,43,42],
[57,51,51,59,63,51,52,48,58,0,48,61,54,50,57],
[54,54,47,66,59,46,57,62,61,52,0,59,54,56,51],
[46,37,44,42,47,42,58,48,47,39,41,0,39,44,42],
[43,52,60,57,62,47,58,53,59,46,46,61,0,54,55],
[54,49,48,53,52,39,56,50,57,50,44,56,46,0,54],
[61,54,47,55,54,45,61,59,58,43,49,58,45,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 17, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,46,49,38,49,51,49,46,45,41,46,35,46,49],
[61,0,55,57,45,63,61,53,54,50,54,49,56,59,53],
[54,45,0,41,45,62,52,51,60,56,50,48,51,53,54],
[51,43,59,0,42,61,53,44,59,49,46,57,47,55,52],
[62,55,55,58,0,60,66,54,64,47,56,54,60,62,59],
[51,37,38,39,40,0,53,46,48,43,47,39,37,55,44],
[49,39,48,47,34,47,0,41,51,42,54,40,45,53,39],
[51,47,49,56,46,54,59,0,54,52,54,44,47,54,46],
[54,46,40,41,36,52,49,46,0,53,48,44,51,58,54],
[55,50,44,51,53,57,58,48,47,0,58,49,43,53,50],
[59,46,50,54,44,53,46,46,52,42,0,52,46,54,51],
[54,51,52,43,46,61,60,56,56,51,48,0,44,58,54],
[65,44,49,53,40,63,55,53,49,57,54,56,0,62,57],
[54,41,47,45,38,45,47,46,42,47,46,42,38,0,51],
[51,47,46,48,41,56,61,54,46,50,49,46,43,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 18, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,60,45,49,44,48,55,49,54,49,63,54,42,56],
[49,0,53,39,60,33,50,60,50,48,56,45,48,46,51],
[40,47,0,40,48,36,50,52,46,43,49,47,57,40,49],
[55,61,60,0,59,52,59,60,50,48,57,67,59,46,51],
[51,40,52,41,0,49,42,61,50,42,52,55,51,32,49],
[56,67,64,48,51,0,58,64,51,50,61,61,52,55,56],
[52,50,50,41,58,42,0,52,48,44,57,51,47,37,45],
[45,40,48,40,39,36,48,0,46,35,47,48,42,29,39],
[51,50,54,50,50,49,52,54,0,42,46,55,51,56,50],
[46,52,57,52,58,50,56,65,58,0,43,64,56,44,52],
[51,44,51,43,48,39,43,53,54,57,0,42,54,49,50],
[37,55,53,33,45,39,49,52,45,36,58,0,51,41,40],
[46,52,43,41,49,48,53,58,49,44,46,49,0,42,44],
[58,54,60,54,68,45,63,71,44,56,51,59,58,0,51],
[44,49,51,49,51,44,55,61,50,48,50,60,56,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 19, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,63,67,72,61,50,46,50,60,65,62,69,76,51],
[52,0,48,44,59,38,44,52,41,62,64,47,59,47,52],
[37,52,0,29,70,59,46,36,71,58,54,58,55,49,60],
[33,56,71,0,57,70,45,51,55,72,70,62,75,78,47],
[28,41,30,43,0,37,41,38,43,52,49,57,57,40,48],
[39,62,41,30,63,0,39,51,51,54,56,47,60,37,53],
[50,56,54,55,59,61,0,60,69,69,60,73,79,65,62],
[54,48,64,49,62,49,40,0,52,73,66,48,74,69,58],
[50,59,29,45,57,49,31,48,0,51,66,47,45,48,50],
[40,38,42,28,48,46,31,27,49,0,50,33,49,34,33],
[35,36,46,30,51,44,40,34,34,50,0,62,67,43,51],
[38,53,42,38,43,53,27,52,53,67,38,0,55,58,59],
[31,41,45,25,43,40,21,26,55,51,33,45,0,39,43],
[24,53,51,22,60,63,35,31,52,66,57,42,61,0,44],
[49,48,40,53,52,47,38,42,50,67,49,41,57,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 20, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,39,42,45,42,58,42,55,46,53,44,44,51,53],
[54,0,43,54,40,50,58,51,56,53,42,44,46,50,45],
[61,57,0,53,49,54,63,59,61,66,49,47,46,60,52],
[58,46,47,0,49,48,59,54,60,55,53,49,44,55,42],
[55,60,51,51,0,51,60,62,58,55,52,53,50,56,43],
[58,50,46,52,49,0,63,50,57,56,55,48,46,63,47],
[42,42,37,41,40,37,0,34,41,39,44,35,38,47,36],
[58,49,41,46,38,50,66,0,61,47,50,45,44,54,45],
[45,44,39,40,42,43,59,39,0,51,50,39,42,50,41],
[54,47,34,45,45,44,61,53,49,0,48,47,41,51,43],
[47,58,51,47,48,45,56,50,50,52,0,47,42,41,43],
[56,56,53,51,47,52,65,55,61,53,53,0,51,57,54],
[56,54,54,56,50,54,62,56,58,59,58,49,0,53,49],
[49,50,40,45,44,37,53,46,50,49,59,43,47,0,50],
[47,55,48,58,57,53,64,55,59,57,57,46,51,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 21, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,52,67,50,36,61,61,54,54,50,48,45,50,46],
[37,0,39,40,43,26,42,43,35,50,30,42,43,41,43],
[48,61,0,59,60,37,61,51,57,60,55,54,55,53,41],
[33,60,41,0,46,30,52,49,45,47,43,42,46,45,51],
[50,57,40,54,0,47,42,49,60,49,46,50,56,47,46],
[64,74,63,70,53,0,61,62,63,61,58,46,51,54,47],
[39,58,39,48,58,39,0,51,44,44,42,39,37,38,48],
[39,57,49,51,51,38,49,0,50,50,46,37,47,47,50],
[46,65,43,55,40,37,56,50,0,49,51,51,48,52,44],
[46,50,40,53,51,39,56,50,51,0,35,31,43,49,43],
[50,70,45,57,54,42,58,54,49,65,0,48,50,56,49],
[52,58,46,58,50,54,61,63,49,69,52,0,52,56,50],
[55,57,45,54,44,49,63,53,52,57,50,48,0,48,51],
[50,59,47,55,53,46,62,53,48,51,44,44,52,0,54],
[54,57,59,49,54,53,52,50,56,57,51,50,49,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 22, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,44,44,49,46,51,46,46,46,51,52,42,49,46],
[50,0,45,49,60,55,44,52,50,54,55,58,46,53,55],
[56,55,0,53,55,54,52,48,56,61,62,56,53,62,56],
[56,51,47,0,52,49,50,51,49,58,63,57,51,55,52],
[51,40,45,48,0,39,45,40,44,49,54,47,43,51,39],
[54,45,46,51,61,0,54,46,45,50,61,51,47,60,49],
[49,56,48,50,55,46,0,48,51,49,60,53,48,52,46],
[54,48,52,49,60,54,52,0,49,61,62,59,49,58,61],
[54,50,44,51,56,55,49,51,0,54,59,53,48,55,47],
[54,46,39,42,51,50,51,39,46,0,53,56,42,52,46],
[49,45,38,37,46,39,40,38,41,47,0,39,43,48,39],
[48,42,44,43,53,49,47,41,47,44,61,0,41,45,47],
[58,54,47,49,57,53,52,51,52,58,57,59,0,56,57],
[51,47,38,45,49,40,48,42,45,48,52,55,44,0,48],
[54,45,44,48,61,51,54,39,53,54,61,53,43,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 23, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,41,39,46,38,50,45,36,44,38,38,52,32,32],
[55,0,34,39,46,39,46,40,39,57,35,38,39,28,38],
[59,66,0,63,67,54,63,56,59,71,55,61,57,56,50],
[61,61,37,0,62,48,67,56,61,65,50,58,60,55,52],
[54,54,33,38,0,36,46,53,40,43,36,46,42,38,38],
[62,61,46,52,64,0,50,54,40,49,47,49,53,51,42],
[50,54,37,33,54,50,0,43,47,62,42,50,44,41,42],
[55,60,44,44,47,46,57,0,51,48,43,55,46,43,37],
[64,61,41,39,60,60,53,49,0,59,42,56,52,54,46],
[56,43,29,35,57,51,38,52,41,0,40,59,44,36,39],
[62,65,45,50,64,53,58,57,58,60,0,59,63,51,48],
[62,62,39,42,54,51,50,45,44,41,41,0,49,44,41],
[48,61,43,40,58,47,56,54,48,56,37,51,0,49,37],
[68,72,44,45,62,49,59,57,46,64,49,56,51,0,53],
[68,62,50,48,62,58,58,63,54,61,52,59,63,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 24, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,51,45,53,52,51,55,59,53,49,50,54,50,55],
[50,0,49,42,48,49,45,49,48,49,42,52,51,56,54],
[49,51,0,47,50,39,47,51,51,49,48,53,53,48,49],
[55,58,53,0,54,49,50,57,53,58,59,54,57,57,61],
[47,52,50,46,0,46,50,52,56,54,50,49,49,48,54],
[48,51,61,51,54,0,53,55,55,58,59,51,56,54,57],
[49,55,53,50,50,47,0,61,55,49,50,57,55,55,60],
[45,51,49,43,48,45,39,0,46,40,46,43,51,55,50],
[41,52,49,47,44,45,45,54,0,50,49,53,50,54,54],
[47,51,51,42,46,42,51,60,50,0,51,48,50,46,50],
[51,58,52,41,50,41,50,54,51,49,0,49,49,50,48],
[50,48,47,46,51,49,43,57,47,52,51,0,56,52,49],
[46,49,47,43,51,44,45,49,50,50,51,44,0,52,55],
[50,44,52,43,52,46,45,45,46,54,50,48,48,0,52],
[45,46,51,39,46,43,40,50,46,50,52,51,45,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 25, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,48,58,55,48,49,49,50,51,42,56,52,49,50],
[54,0,57,59,54,56,58,49,55,56,48,60,56,56,60],
[52,43,0,46,64,53,46,50,42,57,48,54,42,41,49],
[42,41,54,0,52,52,47,36,38,49,46,51,51,52,35],
[45,46,36,48,0,50,60,46,32,46,35,50,38,44,44],
[52,44,47,48,50,0,43,36,44,49,43,53,53,53,55],
[51,42,54,53,40,57,0,52,40,42,43,54,48,53,44],
[51,51,50,64,54,64,48,0,41,51,41,48,44,52,48],
[50,45,58,62,68,56,60,59,0,58,56,50,55,57,52],
[49,44,43,51,54,51,58,49,42,0,44,53,50,50,43],
[58,52,52,54,65,57,57,59,44,56,0,45,56,51,51],
[44,40,46,49,50,47,46,52,50,47,55,0,44,47,39],
[48,44,58,49,62,47,52,56,45,50,44,56,0,45,44],
[51,44,59,48,56,47,47,48,43,50,49,53,55,0,44],
[50,40,51,65,56,45,56,52,48,57,49,61,56,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 26, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,46,44,48,48,55,53,51,41,47,42,46,43,42],
[44,0,53,48,39,47,51,51,46,42,49,49,47,49,51],
[54,47,0,54,46,52,53,54,49,48,56,52,44,49,44],
[56,52,46,0,45,47,53,51,43,44,46,51,46,48,46],
[52,61,54,55,0,58,58,55,53,48,57,54,52,49,50],
[52,53,48,53,42,0,53,53,57,46,48,53,52,52,55],
[45,49,47,47,42,47,0,53,48,42,50,50,49,48,47],
[47,49,46,49,45,47,47,0,45,42,49,54,44,43,44],
[49,54,51,57,47,43,52,55,0,49,49,50,45,46,44],
[59,58,52,56,52,54,58,58,51,0,50,57,49,52,53],
[53,51,44,54,43,52,50,51,51,50,0,55,51,52,51],
[58,51,48,49,46,47,50,46,50,43,45,0,47,48,46],
[54,53,56,54,48,48,51,56,55,51,49,53,0,49,48],
[57,51,51,52,51,48,52,57,54,48,48,52,51,0,54],
[58,49,56,54,50,45,53,56,56,47,49,54,52,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 27, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,40,52,44,46,41,51,43,55,44,49,41,43,40],
[55,0,42,47,50,48,45,59,38,52,50,47,54,43,46],
[60,58,0,47,48,48,39,57,53,55,53,51,58,51,55],
[48,53,53,0,54,52,51,60,52,51,53,54,49,49,55],
[56,50,52,46,0,63,53,55,52,58,47,60,49,46,57],
[54,52,52,48,37,0,42,51,43,59,49,50,43,53,50],
[59,55,61,49,47,58,0,60,59,60,50,60,56,50,57],
[49,41,43,40,45,49,40,0,46,44,50,43,53,51,45],
[57,62,47,48,48,57,41,54,0,57,48,47,47,46,51],
[45,48,45,49,42,41,40,56,43,0,52,50,47,45,45],
[56,50,47,47,53,51,50,50,52,48,0,53,42,46,53],
[51,53,49,46,40,50,40,57,53,50,47,0,53,52,46],
[59,46,42,51,51,57,44,47,53,53,58,47,0,47,41],
[57,57,49,51,54,47,50,49,54,55,54,48,53,0,51],
[60,54,45,45,43,50,43,55,49,55,47,54,59,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 28, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,49,46,53,44,43,45,59,48,53,40,51,51,49],
[48,0,39,44,50,38,48,41,56,52,52,39,45,49,44],
[51,61,0,56,56,48,58,47,58,55,52,45,57,55,50],
[54,56,44,0,46,45,52,44,60,50,53,44,48,55,48],
[47,50,44,54,0,43,51,41,57,57,49,41,51,51,43],
[56,62,52,55,57,0,63,49,63,62,61,55,55,60,56],
[57,52,42,48,49,37,0,44,58,48,53,42,49,49,44],
[55,59,53,56,59,51,56,0,59,58,59,44,51,55,54],
[41,44,42,40,43,37,42,41,0,42,46,33,40,40,40],
[52,48,45,50,43,38,52,42,58,0,51,42,42,53,44],
[47,48,48,47,51,39,47,41,54,49,0,34,45,52,43],
[60,61,55,56,59,45,58,56,67,58,66,0,55,62,53],
[49,55,43,52,49,45,51,49,60,58,55,45,0,50,46],
[49,51,45,45,49,40,51,45,60,47,48,38,50,0,44],
[51,56,50,52,57,44,56,46,60,56,57,47,54,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 29, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,50,49,47,53,53,47,51,58,38,51,49,57,55],
[44,0,51,51,44,50,52,48,48,55,43,43,50,50,41],
[50,49,0,48,50,47,50,42,42,57,51,45,51,51,49],
[51,49,52,0,47,51,54,51,53,58,47,46,55,59,48],
[53,56,50,53,0,52,59,50,50,58,46,48,55,53,59],
[47,50,53,49,48,0,55,48,51,57,36,44,53,49,54],
[47,48,50,46,41,45,0,50,46,55,39,46,53,52,55],
[53,52,58,49,50,52,50,0,45,61,45,52,53,57,49],
[49,52,58,47,50,49,54,55,0,54,46,55,56,50,51],
[42,45,43,42,42,43,45,39,46,0,42,34,48,49,50],
[62,57,49,53,54,64,61,55,54,58,0,54,67,62,58],
[49,57,55,54,52,56,54,48,45,66,46,0,58,53,60],
[51,50,49,45,45,47,47,47,44,52,33,42,0,49,46],
[43,50,49,41,47,51,48,43,50,51,38,47,51,0,49],
[45,59,51,52,41,46,45,51,49,50,42,40,54,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 30, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,34,40,43,32,42,44,41,48,39,44,40,42,36],
[55,0,42,47,42,42,54,48,35,52,43,45,42,45,48],
[66,58,0,57,50,46,55,54,51,62,53,53,59,60,66],
[60,53,43,0,51,47,43,51,51,54,47,47,39,45,55],
[57,58,50,49,0,36,47,57,45,56,48,44,47,48,56],
[68,58,54,53,64,0,56,56,54,58,55,53,50,54,51],
[58,46,45,57,53,44,0,58,53,64,44,55,53,47,51],
[56,52,46,49,43,44,42,0,37,49,42,46,36,45,50],
[59,65,49,49,55,46,47,63,0,61,52,57,49,46,53],
[52,48,38,46,44,42,36,51,39,0,42,49,42,47,50],
[61,57,47,53,52,45,56,58,48,58,0,50,45,62,55],
[56,55,47,53,56,47,45,54,43,51,50,0,42,51,50],
[60,58,41,61,53,50,47,64,51,58,55,58,0,58,53],
[58,55,40,55,52,46,53,55,54,53,38,49,42,0,59],
[64,52,34,45,44,49,49,50,47,50,45,50,47,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 31, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,47,46,41,57,41,47,41,47,59,42,47,53,54],
[45,0,41,46,43,53,43,55,43,50,54,53,41,46,54],
[53,59,0,53,52,57,47,57,44,57,67,49,46,54,57],
[54,54,47,0,42,57,42,51,46,46,62,47,41,46,62],
[59,57,48,58,0,63,53,65,49,55,59,45,49,58,58],
[43,47,43,43,37,0,42,47,35,53,50,43,43,49,50],
[59,57,53,58,47,58,0,66,54,64,69,55,53,57,60],
[53,45,43,49,35,53,34,0,42,44,54,39,41,46,51],
[59,57,56,54,51,65,46,58,0,63,64,51,52,52,56],
[53,50,43,54,45,47,36,56,37,0,54,45,36,45,52],
[41,46,33,38,41,50,31,46,36,46,0,42,28,39,40],
[58,47,51,53,55,57,45,61,49,55,58,0,48,58,56],
[53,59,54,59,51,57,47,59,48,64,72,52,0,59,54],
[47,54,46,54,42,51,43,54,48,55,61,42,41,0,50],
[46,46,43,38,42,50,40,49,44,48,60,44,46,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 32, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,50,53,47,53,53,53,51,59,55,55,57,52,55],
[53,0,54,50,48,59,53,53,56,60,54,59,58,56,58],
[50,46,0,52,48,53,54,58,53,59,54,53,55,60,53],
[47,50,48,0,47,56,48,49,48,55,49,56,58,51,54],
[53,52,52,53,0,59,54,56,50,59,52,53,55,54,53],
[47,41,47,44,41,0,55,51,47,55,47,58,53,49,53],
[47,47,46,52,46,45,0,48,52,52,48,52,48,48,49],
[47,47,42,51,44,49,52,0,50,53,52,55,56,54,54],
[49,44,47,52,50,53,48,50,0,61,50,54,59,57,51],
[41,40,41,45,41,45,48,47,39,0,42,51,47,47,47],
[45,46,46,51,48,53,52,48,50,58,0,52,56,49,53],
[45,41,47,44,47,42,48,45,46,49,48,0,50,56,49],
[43,42,45,42,45,47,52,44,41,53,44,50,0,53,50],
[48,44,40,49,46,51,52,46,43,53,51,44,47,0,58],
[45,42,47,46,47,47,51,46,49,53,47,51,50,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 33, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,39,61,49,38,47,54,57,58,48,58,51,55,53],
[53,0,47,58,55,47,45,52,53,58,55,57,54,52,56],
[61,53,0,58,59,42,50,60,57,54,53,55,51,47,51],
[39,42,42,0,50,38,41,48,52,48,48,53,51,51,45],
[51,45,41,50,0,48,40,53,49,51,50,47,50,48,51],
[62,53,58,62,52,0,46,56,58,57,54,61,61,59,64],
[53,55,50,59,60,54,0,56,56,55,52,55,56,57,54],
[46,48,40,52,47,44,44,0,53,50,50,50,57,46,50],
[43,47,43,48,51,42,44,47,0,48,48,54,47,44,53],
[42,42,46,52,49,43,45,50,52,0,53,57,52,46,42],
[52,45,47,52,50,46,48,50,52,47,0,52,48,49,50],
[42,43,45,47,53,39,45,50,46,43,48,0,51,37,45],
[49,46,49,49,50,39,44,43,53,48,52,49,0,49,46],
[45,48,53,49,52,41,43,54,56,54,51,63,51,0,56],
[47,44,49,55,49,36,46,50,47,58,50,55,54,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 34, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,51,44,52,45,35,71,54,48,39,25,65,62,58],
[22,0,16,10,18,32,28,24,18,41,10,24,50,24,29],
[49,84,0,53,52,54,35,77,57,58,43,58,72,58,70],
[56,90,47,0,64,56,25,51,69,66,41,47,62,60,90],
[48,82,48,36,0,54,27,54,34,80,22,55,60,62,62],
[55,68,46,44,46,0,11,43,51,76,52,62,49,46,46],
[65,72,65,75,73,89,0,77,69,84,45,78,72,78,72],
[29,76,23,49,46,57,23,0,48,60,19,29,55,46,52],
[46,82,43,31,66,49,31,52,0,76,43,39,81,60,72],
[52,59,42,34,20,24,16,40,24,0,36,53,58,31,30],
[61,90,57,59,78,48,55,81,57,64,0,64,80,72,68],
[75,76,42,53,45,38,22,71,61,47,36,0,60,53,57],
[35,50,28,38,40,51,28,45,19,42,20,40,0,30,28],
[38,76,42,40,38,54,22,54,40,69,28,47,70,0,55],
[42,71,30,10,38,54,28,48,28,70,32,43,72,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 35, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,49,54,43,40,42,46,56,60,54,43,51,52,53],
[46,0,48,57,55,49,45,46,50,53,48,52,52,54,52],
[51,52,0,57,51,54,47,45,55,58,54,52,52,53,52],
[46,43,43,0,44,36,43,44,56,49,44,52,46,49,49],
[57,45,49,56,0,43,42,50,63,52,53,50,55,54,51],
[60,51,46,64,57,0,53,51,56,58,59,64,54,55,55],
[58,55,53,57,58,47,0,50,60,56,49,49,49,56,58],
[54,54,55,56,50,49,50,0,61,65,54,56,53,48,53],
[44,50,45,44,37,44,40,39,0,45,49,47,37,47,43],
[40,47,42,51,48,42,44,35,55,0,45,55,50,45,45],
[46,52,46,56,47,41,51,46,51,55,0,51,43,52,47],
[57,48,48,48,50,36,51,44,53,45,49,0,49,49,47],
[49,48,48,54,45,46,51,47,63,50,57,51,0,57,53],
[48,46,47,51,46,45,44,52,53,55,48,51,43,0,52],
[47,48,48,51,49,45,42,47,57,55,53,53,47,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 36, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,53,63,58,56,72,56,36,52,73,67,52,57,62],
[37,0,46,63,45,59,54,68,37,52,62,70,48,44,63],
[47,54,0,56,62,50,47,69,45,39,63,48,62,47,53],
[37,37,44,0,52,42,51,51,38,47,59,53,41,31,51],
[42,55,38,48,0,50,50,60,36,44,56,57,58,30,50],
[44,41,50,58,50,0,53,64,30,60,67,57,56,50,58],
[28,46,53,49,50,47,0,58,38,44,56,61,50,39,60],
[44,32,31,49,40,36,42,0,33,28,44,48,41,29,42],
[64,63,55,62,64,70,62,67,0,48,74,66,66,66,64],
[48,48,61,53,56,40,56,72,52,0,63,70,59,47,66],
[27,38,37,41,44,33,44,56,26,37,0,42,43,40,35],
[33,30,52,47,43,43,39,52,34,30,58,0,47,35,36],
[48,52,38,59,42,44,50,59,34,41,57,53,0,55,48],
[43,56,53,69,70,50,61,71,34,53,60,65,45,0,52],
[38,37,47,49,50,42,40,58,36,34,65,64,52,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 37, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,57,49,45,57,51,47,49,45,49,41,43,46,52],
[51,0,61,49,51,48,39,47,45,42,43,47,51,49,48],
[43,39,0,43,57,43,41,43,49,37,50,37,42,39,41],
[51,51,57,0,58,54,56,45,53,51,52,57,44,40,54],
[55,49,43,42,0,55,44,45,45,46,52,49,47,49,42],
[43,52,57,46,45,0,38,36,44,43,48,42,44,39,47],
[49,61,59,44,56,62,0,57,54,55,55,46,51,54,50],
[53,53,57,55,55,64,43,0,50,43,53,46,48,55,51],
[51,55,51,47,55,56,46,50,0,45,52,48,51,46,54],
[55,58,63,49,54,57,45,57,55,0,63,53,51,50,51],
[51,57,50,48,48,52,45,47,48,37,0,44,49,47,37],
[59,53,63,43,51,58,54,54,52,47,56,0,56,52,58],
[57,49,58,56,53,56,49,52,49,49,51,44,0,57,50],
[54,51,61,60,51,61,46,45,54,50,53,48,43,0,52],
[48,52,59,46,58,53,50,49,46,49,63,42,50,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 38, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,40,51,45,50,46,53,53,51,55,43,61,49,50],
[51,0,40,54,50,48,50,52,53,49,47,54,53,55,51],
[60,60,0,57,53,54,48,63,55,55,61,51,60,55,61],
[49,46,43,0,50,44,48,56,53,53,51,53,58,48,53],
[55,50,47,50,0,49,49,48,46,55,59,44,54,51,51],
[50,52,46,56,51,0,53,54,57,52,57,52,58,53,56],
[54,50,52,52,51,47,0,59,48,56,54,51,59,52,61],
[47,48,37,44,52,46,41,0,46,50,48,39,50,46,53],
[47,47,45,47,54,43,52,54,0,50,56,48,54,51,54],
[49,51,45,47,45,48,44,50,50,0,49,48,52,50,52],
[45,53,39,49,41,43,46,52,44,51,0,43,50,41,50],
[57,46,49,47,56,48,49,61,52,52,57,0,57,50,63],
[39,47,40,42,46,42,41,50,46,48,50,43,0,49,43],
[51,45,45,52,49,47,48,54,49,50,59,50,51,0,56],
[50,49,39,47,49,44,39,47,46,48,50,37,57,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 39, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,55,57,55,50,45,53,47,44,47,41,46,50,50],
[56,0,53,52,55,56,49,57,55,57,49,49,48,47,55],
[45,47,0,48,49,53,41,55,50,48,48,40,50,56,53],
[43,48,52,0,48,52,51,53,45,52,47,45,44,54,47],
[45,45,51,52,0,46,46,55,43,46,45,47,40,49,54],
[50,44,47,48,54,0,50,56,51,44,52,47,47,45,49],
[55,51,59,49,54,50,0,50,41,41,49,46,44,49,48],
[47,43,45,47,45,44,50,0,50,45,47,42,40,52,55],
[53,45,50,55,57,49,59,50,0,52,52,44,51,53,55],
[56,43,52,48,54,56,59,55,48,0,51,46,52,50,58],
[53,51,52,53,55,48,51,53,48,49,0,46,52,55,54],
[59,51,60,55,53,53,54,58,56,54,54,0,46,56,57],
[54,52,50,56,60,53,56,60,49,48,48,54,0,55,59],
[50,53,44,46,51,55,51,48,47,50,45,44,45,0,52],
[50,45,47,53,46,51,52,45,45,42,46,43,41,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 40, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,62,63,60,50,55,54,61,66,56,59,62,58,63],
[41,0,41,49,49,43,52,41,52,46,51,46,53,48,54],
[38,59,0,51,52,43,42,45,47,50,53,47,50,49,47],
[37,51,49,0,56,43,51,45,52,48,52,50,53,47,53],
[40,51,48,44,0,42,37,42,43,40,45,48,56,42,53],
[50,57,57,57,58,0,53,52,53,58,60,57,57,55,57],
[45,48,58,49,63,47,0,48,52,53,57,53,53,50,59],
[46,59,55,55,58,48,52,0,55,52,57,56,56,59,61],
[39,48,53,48,57,47,48,45,0,46,51,53,51,47,53],
[34,54,50,52,60,42,47,48,54,0,56,56,57,52,61],
[44,49,47,48,55,40,43,43,49,44,0,47,46,46,47],
[41,54,53,50,52,43,47,44,47,44,53,0,45,39,53],
[38,47,50,47,44,43,47,44,49,43,54,55,0,46,51],
[42,52,51,53,58,45,50,41,53,48,54,61,54,0,56],
[37,46,53,47,47,43,41,39,47,39,53,47,49,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 41, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,42,50,55,45,51,56,38,45,55,34,50,55,61],
[50,0,30,49,41,51,48,53,41,30,54,43,46,46,54],
[58,70,0,73,70,65,62,67,47,58,60,53,58,70,61],
[50,51,27,0,51,29,47,54,29,35,62,38,44,46,47],
[45,59,30,49,0,50,54,57,42,42,58,44,53,47,59],
[55,49,35,71,50,0,54,56,51,49,68,57,59,47,54],
[49,52,38,53,46,46,0,55,40,46,53,57,38,44,51],
[44,47,33,46,43,44,45,0,39,33,47,39,44,48,49],
[62,59,53,71,58,49,60,61,0,42,63,56,41,50,48],
[55,70,42,65,58,51,54,67,58,0,67,49,50,63,60],
[45,46,40,38,42,32,47,53,37,33,0,41,28,43,51],
[66,57,47,62,56,43,43,61,44,51,59,0,56,66,68],
[50,54,42,56,47,41,62,56,59,50,72,44,0,48,56],
[45,54,30,54,53,53,56,52,50,37,57,34,52,0,61],
[39,46,39,53,41,46,49,51,52,40,49,32,44,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 42, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,0,70,0,0,21,6,30,21,51,6,27,27,21],
[79,0,36,49,49,79,36,36,36,79,79,79,36,79,6],
[100,64,0,70,70,79,27,36,36,70,100,79,57,70,27],
[30,51,30,0,0,30,30,30,30,30,30,30,30,30,21],
[100,51,30,100,0,79,57,36,36,57,57,36,57,57,57],
[100,21,21,70,21,0,21,36,30,21,51,6,57,27,21],
[79,64,73,70,43,79,0,79,79,100,100,79,100,100,21],
[94,64,64,70,64,64,21,0,73,64,94,43,51,64,21],
[70,64,64,70,64,70,21,27,0,70,70,70,27,70,21],
[79,21,30,70,43,79,0,36,30,0,36,36,36,6,21],
[49,21,0,70,43,49,0,6,30,64,0,6,27,27,21],
[94,21,21,70,64,94,21,57,30,64,94,0,51,21,21],
[73,64,43,70,43,43,0,49,73,64,73,49,0,64,21],
[73,21,30,70,43,73,0,36,30,94,73,79,36,0,21],
[79,94,73,79,43,79,79,79,79,79,79,79,79,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 43, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,43,53,31,34,32,20,31,57,41,7,27,47,58],
[48,0,61,82,61,55,38,28,56,70,68,31,20,64,82],
[57,39,0,69,28,48,38,24,38,59,57,24,34,57,75],
[47,18,31,0,38,38,39,13,38,35,45,31,31,71,31],
[69,39,72,62,0,59,50,39,74,53,86,42,38,100,68],
[66,45,52,62,41,0,25,21,49,93,57,14,14,75,76],
[68,62,62,61,50,75,0,39,89,75,85,61,57,92,61],
[80,72,76,87,61,79,61,0,77,73,86,36,82,93,85],
[69,44,62,62,26,51,11,23,0,69,75,16,57,75,61],
[43,30,41,65,47,7,25,27,31,0,63,13,20,60,71],
[59,32,43,55,14,43,15,14,25,37,0,18,27,78,72],
[93,69,76,69,58,86,39,64,84,87,82,0,79,89,100],
[73,80,66,69,62,86,43,18,43,80,73,21,0,93,72],
[53,36,43,29,0,25,8,7,25,40,22,11,7,0,36],
[42,18,25,69,32,24,39,15,39,29,28,0,28,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 44, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,56,55,59,57,61,64,62,63,65,60,49,54,56],
[46,0,49,53,55,53,47,60,58,52,56,59,44,47,55],
[44,51,0,50,54,53,51,60,54,55,51,56,48,45,52],
[45,47,50,0,55,54,51,54,52,48,48,54,37,45,51],
[41,45,46,45,0,42,47,45,52,47,50,48,35,39,51],
[43,47,47,46,58,0,42,50,47,49,46,49,41,40,43],
[39,53,49,49,53,58,0,51,59,55,56,54,45,43,47],
[36,40,40,46,55,50,49,0,55,54,56,52,41,43,44],
[38,42,46,48,48,53,41,45,0,49,57,58,45,43,44],
[37,48,45,52,53,51,45,46,51,0,48,57,43,40,41],
[35,44,49,52,50,54,44,44,43,52,0,51,42,43,46],
[40,41,44,46,52,51,46,48,42,43,49,0,35,35,41],
[51,56,52,63,65,59,55,59,55,57,58,65,0,43,56],
[46,53,55,55,61,60,57,57,57,60,57,65,57,0,50],
[44,45,48,49,49,57,53,56,56,59,54,59,44,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 45, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,45,45,50,41,45,55,50,45,39,44,49,45,51],
[56,0,50,51,46,47,45,47,55,48,48,53,53,48,55],
[55,50,0,52,52,54,48,56,58,49,49,49,57,47,56],
[55,49,48,0,46,49,55,53,54,52,49,57,55,45,58],
[50,54,48,54,0,48,55,56,58,46,45,49,47,52,58],
[59,53,46,51,52,0,48,51,60,42,48,44,53,49,56],
[55,55,52,45,45,52,0,53,57,48,51,52,57,48,57],
[45,53,44,47,44,49,47,0,58,42,47,50,52,40,48],
[50,45,42,46,42,40,43,42,0,45,45,46,46,47,53],
[55,52,51,48,54,58,52,58,55,0,49,49,53,51,63],
[61,52,51,51,55,52,49,53,55,51,0,53,56,51,56],
[56,47,51,43,51,56,48,50,54,51,47,0,51,51,57],
[51,47,43,45,53,47,43,48,54,47,44,49,0,48,55],
[55,52,53,55,48,51,52,60,53,49,49,49,52,0,58],
[49,45,44,42,42,44,43,52,47,37,44,43,45,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 46, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,66,69,66,70,66,39,65,58,56,52,57,64,62],
[46,0,62,58,77,61,49,58,56,45,63,53,64,63,62],
[34,38,0,55,76,42,49,47,38,63,39,41,54,54,35],
[31,42,45,0,46,48,55,58,40,54,42,53,57,55,64],
[34,23,24,54,0,38,44,50,37,27,48,36,42,37,30],
[30,39,58,52,62,0,51,41,30,49,44,38,62,51,47],
[34,51,51,45,56,49,0,67,52,56,45,52,61,55,61],
[61,42,53,42,50,59,33,0,45,36,56,52,65,42,36],
[35,44,62,60,63,70,48,55,0,49,45,60,62,50,50],
[42,55,37,46,73,51,44,64,51,0,47,53,60,63,56],
[44,37,61,58,52,56,55,44,55,53,0,42,60,66,51],
[48,47,59,47,64,62,48,48,40,47,58,0,60,56,41],
[43,36,46,43,58,38,39,35,38,40,40,40,0,50,38],
[36,37,46,45,63,49,45,58,50,37,34,44,50,0,50],
[38,38,65,36,70,53,39,64,50,44,49,59,62,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 47, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,22,49,79,50,43,30,51,50,79,51,30,20,50],
[29,0,22,70,100,30,43,51,50,49,100,22,29,20,28],
[78,78,0,78,100,100,21,100,78,49,100,72,58,49,78],
[51,30,22,0,71,30,43,51,22,71,71,22,51,42,50],
[21,0,0,29,0,0,21,29,0,41,41,0,0,20,20],
[50,70,0,70,100,0,21,51,50,49,78,72,21,20,20],
[57,57,79,57,79,79,0,79,57,28,79,59,37,57,57],
[70,49,0,49,71,49,21,0,29,20,49,51,29,20,20],
[49,50,22,78,100,50,43,71,0,49,71,22,29,28,28],
[50,51,51,29,59,51,72,80,51,0,59,51,29,49,49],
[21,0,0,29,59,22,21,51,29,41,0,22,0,20,20],
[49,78,28,78,100,28,41,49,78,49,78,0,29,28,28],
[70,71,42,49,100,79,63,71,71,71,100,71,0,20,28],
[80,80,51,58,80,80,43,80,72,51,80,72,80,0,59],
[50,72,22,50,80,80,43,80,72,51,80,72,72,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 48, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,46,50,53,53,42,43,34,52,49,40,55,58,45],
[49,0,54,51,43,52,35,42,43,48,50,48,44,43,40],
[54,46,0,50,45,60,38,37,43,54,56,38,46,52,42],
[50,49,50,0,48,50,43,45,37,53,53,36,51,51,46],
[47,57,55,52,0,51,46,47,53,55,61,56,57,52,57],
[47,48,40,50,49,0,26,41,37,48,51,31,51,50,39],
[58,65,62,57,54,74,0,47,56,65,49,56,66,59,50],
[57,58,63,55,53,59,53,0,53,56,48,60,64,62,58],
[66,57,57,63,47,63,44,47,0,63,57,53,52,63,61],
[48,52,46,47,45,52,35,44,37,0,46,38,42,53,40],
[51,50,44,47,39,49,51,52,43,54,0,42,45,50,47],
[60,52,62,64,44,69,44,40,47,62,58,0,61,58,57],
[45,56,54,49,43,49,34,36,48,58,55,39,0,53,38],
[42,57,48,49,48,50,41,38,37,47,50,42,47,0,47],
[55,60,58,54,43,61,50,42,39,60,53,43,62,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 49, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,44,48,34,36,13,50,36,41,47,40,59,56,46],
[68,0,62,50,57,60,52,51,56,68,50,58,69,51,36],
[56,38,0,59,60,51,50,66,50,57,62,60,72,60,45],
[52,50,41,0,50,42,22,46,45,35,49,38,54,52,45],
[66,43,40,50,0,36,28,49,40,40,49,50,61,54,35],
[64,40,49,58,64,0,51,62,53,63,60,57,68,57,38],
[87,48,50,78,72,49,0,70,69,64,58,65,79,65,49],
[50,49,34,54,51,38,30,0,53,40,61,31,59,58,59],
[64,44,50,55,60,47,31,47,0,54,45,61,64,42,37],
[59,32,43,65,60,37,36,60,46,0,54,49,78,53,44],
[53,50,38,51,51,40,42,39,55,46,0,44,66,56,47],
[60,42,40,62,50,43,35,69,39,51,56,0,72,48,43],
[41,31,28,46,39,32,21,41,36,22,34,28,0,26,27],
[44,49,40,48,46,43,35,42,58,47,44,52,74,0,56],
[54,64,55,55,65,62,51,41,63,56,53,57,73,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 50, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,45,38,46,39,36,47,37,49,42,40,53,36,34],
[60,0,55,39,53,62,48,52,41,48,50,51,56,46,44],
[55,45,0,44,47,39,51,50,47,52,38,58,49,45,46],
[62,61,56,0,56,59,50,61,58,66,47,53,62,61,43],
[54,47,53,44,0,53,43,49,47,48,41,45,46,43,43],
[61,38,61,41,47,0,44,55,42,50,37,51,53,44,43],
[64,52,49,50,57,56,0,59,54,50,47,46,56,48,45],
[53,48,50,39,51,45,41,0,45,41,35,45,50,47,36],
[63,59,53,42,53,58,46,55,0,53,45,47,51,51,42],
[51,52,48,34,52,50,50,59,47,0,46,44,57,49,38],
[58,50,62,53,59,63,53,65,55,54,0,52,59,51,55],
[60,49,42,47,55,49,54,55,53,56,48,0,59,49,46],
[47,44,51,38,54,47,44,50,49,43,41,41,0,45,37],
[64,54,55,39,57,56,52,53,49,51,49,51,55,0,44],
[66,56,54,57,57,57,55,64,58,62,45,54,63,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 51, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,11,51,32,86,32,51,57,42,21,32,57,32,11],
[43,0,40,61,61,61,61,61,61,75,50,75,42,61,40],
[89,60,0,76,76,75,76,65,65,70,46,79,56,57,25],
[49,39,24,0,31,75,31,50,46,45,21,45,56,46,10],
[68,39,24,69,0,54,39,44,46,70,25,49,35,25,25],
[14,39,25,25,46,0,46,30,46,46,14,25,71,46,25],
[68,39,24,69,61,54,0,44,65,45,0,43,35,36,0],
[49,39,35,50,56,70,56,0,71,56,35,56,81,71,24],
[43,39,35,54,54,54,35,29,0,35,14,35,60,25,24],
[58,25,30,55,30,54,55,44,65,0,0,55,36,36,25],
[79,50,54,79,75,86,100,65,86,100,0,100,67,71,65],
[68,25,21,55,51,75,57,44,65,45,0,0,56,57,0],
[43,58,44,44,65,29,65,19,40,64,33,44,0,44,19],
[68,39,43,54,75,54,64,29,75,64,29,43,56,0,29],
[89,60,75,90,75,75,100,76,76,75,35,100,81,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 52, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,41,50,43,52,42,50,46,43,47,58,53,42,58],
[59,0,50,52,55,54,60,51,50,49,49,54,57,50,59],
[59,50,0,47,53,52,54,50,39,57,53,60,53,47,65],
[50,48,53,0,54,47,59,49,45,47,44,53,48,39,54],
[57,45,47,46,0,52,56,50,49,62,50,59,52,52,60],
[48,46,48,53,48,0,52,44,39,58,45,55,46,42,58],
[58,40,46,41,44,48,0,52,42,55,45,58,42,45,53],
[50,49,50,51,50,56,48,0,53,59,56,51,57,51,58],
[54,50,61,55,51,61,58,47,0,58,55,51,58,48,56],
[57,51,43,53,38,42,45,41,42,0,44,53,56,47,58],
[53,51,47,56,50,55,55,44,45,56,0,53,53,48,56],
[42,46,40,47,41,45,42,49,49,47,47,0,52,39,49],
[47,43,47,52,48,54,58,43,42,44,47,48,0,36,53],
[58,50,53,61,48,58,55,49,52,53,52,61,64,0,65],
[42,41,35,46,40,42,47,42,44,42,44,51,47,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 53, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,54,44,55,58,58,57,59,43,48,54,56,66,51],
[55,0,61,54,63,64,50,60,68,50,50,61,57,59,47],
[46,39,0,41,51,48,45,47,57,45,42,40,45,49,36],
[56,46,59,0,60,62,56,59,59,49,47,54,51,52,56],
[45,37,49,40,0,46,45,48,48,36,47,48,44,48,44],
[42,36,52,38,54,0,42,47,58,46,51,41,49,48,42],
[42,50,55,44,55,58,0,53,50,39,42,34,56,55,48],
[43,40,53,41,52,53,47,0,51,43,48,40,53,50,41],
[41,32,43,41,52,42,50,49,0,44,46,44,47,47,44],
[57,50,55,51,64,54,61,57,56,0,52,55,57,63,51],
[52,50,58,53,53,49,58,52,54,48,0,51,55,64,49],
[46,39,60,46,52,59,66,60,56,45,49,0,60,51,57],
[44,43,55,49,56,51,44,47,53,43,45,40,0,51,46],
[34,41,51,48,52,52,45,50,53,37,36,49,49,0,36],
[49,53,64,44,56,58,52,59,56,49,51,43,54,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 54, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,47,53,43,61,43,55,67,54,43,40,54,37,43],
[51,0,47,49,42,48,47,37,66,44,52,63,45,49,52],
[53,53,0,47,39,56,60,51,65,52,56,44,54,52,57],
[47,51,53,0,49,68,42,59,66,59,50,55,58,48,59],
[57,58,61,51,0,57,63,64,63,56,53,59,62,49,54],
[39,52,44,32,43,0,40,35,72,49,37,48,39,48,40],
[57,53,40,58,37,60,0,41,62,55,52,45,48,53,51],
[45,63,49,41,36,65,59,0,72,53,51,43,57,45,54],
[33,34,35,34,37,28,38,28,0,30,23,37,37,23,31],
[46,56,48,41,44,51,45,47,70,0,50,51,53,40,46],
[57,48,44,50,47,63,48,49,77,50,0,66,53,46,44],
[60,37,56,45,41,52,55,57,63,49,34,0,47,35,44],
[46,55,46,42,38,61,52,43,63,47,47,53,0,48,59],
[63,51,48,52,51,52,47,55,77,60,54,65,52,0,47],
[57,48,43,41,46,60,49,46,69,54,56,56,41,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 55, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,46,48,43,49,54,45,43,41,48,42,44,60,49],
[56,0,59,62,55,56,53,59,48,46,59,49,52,67,58],
[54,41,0,42,42,50,41,50,44,50,45,43,49,60,44],
[52,38,58,0,44,47,48,51,44,41,49,51,45,52,50],
[57,45,58,56,0,46,49,51,41,47,55,55,53,66,52],
[51,44,50,53,54,0,53,53,48,53,63,49,44,55,53],
[46,47,59,52,51,47,0,58,51,37,51,47,50,56,52],
[55,41,50,49,49,47,42,0,38,50,58,49,50,58,54],
[57,52,56,56,59,52,49,62,0,44,62,55,50,56,54],
[59,54,50,59,53,47,63,50,56,0,64,56,59,65,65],
[52,41,55,51,45,37,49,42,38,36,0,47,43,53,52],
[58,51,57,49,45,51,53,51,45,44,53,0,57,60,52],
[56,48,51,55,47,56,50,50,50,41,57,43,0,64,59],
[40,33,40,48,34,45,44,42,44,35,47,40,36,0,41],
[51,42,56,50,48,47,48,46,46,35,48,48,41,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 56, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,56,46,47,48,49,52,52,51,49,53,49,40,50],
[51,0,53,46,49,46,53,49,47,49,43,46,48,41,51],
[44,47,0,45,45,41,43,42,41,52,43,46,38,43,47],
[54,54,55,0,51,53,55,50,52,55,48,54,49,47,54],
[53,51,55,49,0,49,54,51,53,53,50,48,50,47,51],
[52,54,59,47,51,0,59,51,47,57,46,51,46,50,55],
[51,47,57,45,46,41,0,44,41,47,40,45,37,41,52],
[48,51,58,50,49,49,56,0,48,56,51,47,45,47,52],
[48,53,59,48,47,53,59,52,0,54,44,44,52,46,58],
[49,51,48,45,47,43,53,44,46,0,46,47,43,38,54],
[51,57,57,52,50,54,60,49,56,54,0,45,52,44,58],
[47,54,54,46,52,49,55,53,56,53,55,0,49,42,49],
[51,52,62,51,50,54,63,55,48,57,48,51,0,46,53],
[60,59,57,53,53,50,59,53,54,62,56,58,54,0,62],
[50,49,53,46,49,45,48,48,42,46,42,51,47,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 57, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,51,45,47,42,42,43,42,52,51,55,36,47,49],
[44,0,44,31,44,47,34,36,39,41,45,51,35,44,40],
[49,56,0,50,48,52,48,48,47,47,49,53,41,48,48],
[55,69,50,0,52,59,47,59,60,55,57,56,51,61,51],
[53,56,52,48,0,54,41,48,48,48,56,52,42,52,42],
[58,53,48,41,46,0,46,45,55,51,54,52,46,52,51],
[58,66,52,53,59,54,0,60,52,55,56,59,56,46,47],
[57,64,52,41,52,55,40,0,45,42,48,59,50,48,46],
[58,61,53,40,52,45,48,55,0,55,53,58,50,55,48],
[48,59,53,45,52,49,45,58,45,0,44,53,42,51,47],
[49,55,51,43,44,46,44,52,47,56,0,52,42,45,47],
[45,49,47,44,48,48,41,41,42,47,48,0,40,36,41],
[64,65,59,49,58,54,44,50,50,58,58,60,0,50,46],
[53,56,52,39,48,48,54,52,45,49,55,64,50,0,47],
[51,60,52,49,58,49,53,54,52,53,53,59,54,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 58, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,27,41,41,49,59,41,41,14,41,22,41,41,41],
[59,0,22,63,100,59,59,73,73,59,59,59,73,73,73],
[73,78,0,41,78,86,59,78,78,51,78,59,78,78,78],
[59,37,59,0,51,59,59,59,73,37,59,59,59,73,51],
[59,0,22,49,0,59,59,59,59,59,59,22,22,59,59],
[51,41,14,41,41,0,37,51,51,51,51,0,14,14,78],
[41,41,41,41,41,63,0,41,41,41,41,27,41,41,41],
[59,27,22,41,41,49,59,0,41,37,64,22,49,41,41],
[59,27,22,27,41,49,59,59,0,37,86,22,49,49,64],
[86,41,49,63,41,49,59,63,63,0,63,49,63,63,63],
[59,41,22,41,41,49,59,36,14,37,0,22,63,14,41],
[78,41,41,41,78,100,73,78,78,51,78,0,78,78,78],
[59,27,22,41,78,86,59,51,51,37,37,22,0,51,78],
[59,27,22,27,41,86,59,59,51,37,86,22,49,0,78],
[59,27,22,49,41,22,59,59,36,37,59,22,22,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 59, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,29,52,61,56,53,76,61,65,43,57,60,52,17],
[55,0,26,63,36,55,71,43,52,57,51,50,37,68,16],
[71,74,0,61,70,49,49,84,59,84,73,72,78,65,62],
[48,37,39,0,46,74,40,51,71,45,57,39,66,69,28],
[39,64,30,54,0,54,52,59,48,51,27,55,61,58,27],
[44,45,51,26,46,0,50,57,49,55,37,36,47,45,27],
[47,29,51,60,48,50,0,55,68,58,63,47,61,72,25],
[24,57,16,49,41,43,45,0,33,36,41,44,47,58,19],
[39,48,41,29,52,51,32,67,0,58,56,48,43,50,30],
[35,43,16,55,49,45,42,64,42,0,52,42,49,51,26],
[57,49,27,43,73,63,37,59,44,48,0,60,50,49,23],
[43,50,28,61,45,64,53,56,52,58,40,0,66,56,40],
[40,63,22,34,39,53,39,53,57,51,50,34,0,33,27],
[48,32,35,31,42,55,28,42,50,49,51,44,67,0,17],
[83,84,38,72,73,73,75,81,70,74,77,60,73,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 60, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,53,57,57,62,52,62,51,52,45,39,48,52,50],
[47,0,43,50,34,52,58,52,42,33,38,31,44,42,43],
[47,57,0,61,61,54,52,54,46,50,53,49,44,61,47],
[43,50,39,0,37,50,48,57,40,38,42,37,35,47,53],
[43,66,39,63,0,59,55,60,45,44,41,43,37,47,46],
[38,48,46,50,41,0,33,54,40,29,44,42,34,38,48],
[48,42,48,52,45,67,0,57,48,36,49,42,40,42,46],
[38,48,46,43,40,46,43,0,44,39,40,48,44,45,48],
[49,58,54,60,55,60,52,56,0,45,45,44,48,45,58],
[48,67,50,62,56,71,64,61,55,0,55,53,53,55,53],
[55,62,47,58,59,56,51,60,55,45,0,45,52,49,47],
[61,69,51,63,57,58,58,52,56,47,55,0,53,60,59],
[52,56,56,65,63,66,60,56,52,47,48,47,0,63,56],
[48,58,39,53,53,62,58,55,55,45,51,40,37,0,41],
[50,57,53,47,54,52,54,52,42,47,53,41,44,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 61, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,45,31,48,47,38,37,46,41,37,38,48,38],
[56,0,50,51,44,54,47,47,46,55,40,40,39,50,49],
[58,50,0,51,47,51,48,50,45,52,49,45,45,51,46],
[55,49,49,0,50,53,48,39,38,49,40,34,49,49,44],
[69,56,53,50,0,46,46,46,44,57,45,42,50,56,49],
[52,46,49,47,54,0,45,44,44,52,47,47,46,48,44],
[53,53,52,52,54,55,0,48,39,57,51,50,48,46,49],
[62,53,50,61,54,56,52,0,42,62,49,46,50,43,49],
[63,54,55,62,56,56,61,58,0,57,56,44,51,51,54],
[54,45,48,51,43,48,43,38,43,0,45,39,48,39,43],
[59,60,51,60,55,53,49,51,44,55,0,49,41,54,50],
[63,60,55,66,58,53,50,54,56,61,51,0,53,53,52],
[62,61,55,51,50,54,52,50,49,52,59,47,0,52,49],
[52,50,49,51,44,52,54,57,49,61,46,47,48,0,52],
[62,51,54,56,51,56,51,51,46,57,50,48,51,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 62, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,66,67,36,50,64,55,67,26,54,60,53,68,52],
[50,0,60,56,43,67,50,42,51,44,59,61,50,56,38],
[34,40,0,54,55,50,42,47,50,48,44,66,45,58,27],
[33,44,46,0,32,45,40,54,50,36,62,41,41,52,31],
[64,57,45,68,0,62,54,47,66,40,60,64,52,63,50],
[50,33,50,55,38,0,53,44,68,30,70,59,50,55,33],
[36,50,58,60,46,47,0,47,42,37,50,60,53,71,37],
[45,58,53,46,53,56,53,0,50,52,51,63,54,69,37],
[33,49,50,50,34,32,58,50,0,31,53,43,50,44,32],
[74,56,52,64,60,70,63,48,69,0,65,71,70,65,52],
[46,41,56,38,40,30,50,49,47,35,0,49,47,45,28],
[40,39,34,59,36,41,40,37,57,29,51,0,45,35,32],
[47,50,55,59,48,50,47,46,50,30,53,55,0,44,26],
[32,44,42,48,37,45,29,31,56,35,55,65,56,0,31],
[48,62,73,69,50,67,63,63,68,48,72,68,74,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 63, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,53,53,62,51,70,70,56,63,53,72,53,42,50],
[49,0,33,46,50,55,56,71,49,61,55,50,62,47,48],
[47,67,0,49,53,50,69,74,61,52,59,72,53,50,52],
[47,54,51,0,73,46,72,63,56,63,65,70,59,50,46],
[38,50,47,27,0,41,56,55,41,44,52,54,38,33,43],
[49,45,50,54,59,0,61,57,52,50,56,56,55,49,52],
[30,44,31,28,44,39,0,49,41,29,44,50,38,33,28],
[30,29,26,37,45,43,51,0,35,45,49,54,48,25,28],
[44,51,39,44,59,48,59,65,0,49,58,51,54,42,46],
[37,39,48,37,56,50,71,55,51,0,42,53,39,49,45],
[47,45,41,35,48,44,56,51,42,58,0,46,49,40,31],
[28,50,28,30,46,44,50,46,49,47,54,0,34,29,38],
[47,38,47,41,62,45,62,52,46,61,51,66,0,42,38],
[58,53,50,50,67,51,67,75,58,51,60,71,58,0,48],
[50,52,48,54,57,48,72,72,54,55,69,62,62,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 64, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,41,46,55,56,52,53,44,54,50,48,57,36,50],
[42,0,43,41,49,54,48,46,42,51,42,41,47,47,43],
[59,57,0,46,58,61,53,60,51,56,50,55,52,55,60],
[54,59,54,0,53,57,62,46,53,59,48,44,52,50,42],
[45,51,42,47,0,58,41,45,52,45,46,38,45,44,34],
[44,46,39,43,42,0,45,43,35,44,41,38,50,39,41],
[48,52,47,38,59,55,0,45,46,56,48,43,52,46,53],
[47,54,40,54,55,57,55,0,51,50,46,46,60,40,53],
[56,58,49,47,48,65,54,49,0,56,54,46,54,49,45],
[46,49,44,41,55,56,44,50,44,0,48,42,48,52,52],
[50,58,50,52,54,59,52,54,46,52,0,46,48,52,46],
[52,59,45,56,62,62,57,54,54,58,54,0,61,46,57],
[43,53,48,48,55,50,48,40,46,52,52,39,0,38,40],
[64,53,45,50,56,61,54,60,51,48,48,54,62,0,61],
[50,57,40,58,66,59,47,47,55,48,54,43,60,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 65, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,42,63,63,63,72,63,24,63,63,33,33,33,63],
[67,0,76,30,82,39,48,48,61,39,76,61,72,63,82],
[58,24,0,30,54,54,39,30,24,54,54,24,24,54,54],
[37,70,70,0,52,33,46,76,61,33,100,61,70,33,82],
[37,18,46,48,0,9,18,48,61,18,76,42,18,18,91],
[37,61,46,67,91,0,46,76,61,63,100,70,70,61,82],
[28,52,61,54,82,54,0,58,52,54,91,61,52,24,82],
[37,52,70,24,52,24,42,0,52,24,100,61,24,24,82],
[76,39,76,39,39,39,48,48,0,48,48,9,39,48,67],
[37,61,46,67,82,37,46,76,52,0,76,61,61,52,82],
[37,24,46,0,24,0,9,0,52,24,0,24,24,24,52],
[67,39,76,39,58,30,39,39,91,39,76,0,39,39,82],
[67,28,76,30,82,30,48,76,61,39,76,61,0,63,82],
[67,37,46,67,82,39,76,76,52,48,76,61,37,0,91],
[37,18,46,18,9,18,18,18,33,18,48,18,18,9,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 66, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,43,50,51,42,47,41,38,45,49,45,42,38,43],
[53,0,52,48,52,50,49,43,50,51,51,41,48,46,41],
[57,48,0,46,56,50,49,41,50,56,50,47,45,43,49],
[50,52,54,0,53,48,48,41,53,51,52,57,54,49,43],
[49,48,44,47,0,46,42,47,40,41,46,48,40,47,38],
[58,50,50,52,54,0,52,46,48,53,52,52,49,52,45],
[53,51,51,52,58,48,0,42,50,45,46,49,53,43,49],
[59,57,59,59,53,54,58,0,57,54,58,52,55,52,49],
[62,50,50,47,60,52,50,43,0,49,54,48,49,47,46],
[55,49,44,49,59,47,55,46,51,0,46,48,47,49,47],
[51,49,50,48,54,48,54,42,46,54,0,51,43,47,44],
[55,59,53,43,52,48,51,48,52,52,49,0,53,50,40],
[58,52,55,46,60,51,47,45,51,53,57,47,0,49,52],
[62,54,57,51,53,48,57,48,53,51,53,50,51,0,45],
[57,59,51,57,62,55,51,51,54,53,56,60,48,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 67, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,48,39,37,40,46,45,41,36,43,44,54,42,47],
[56,0,51,47,50,53,46,56,49,49,53,46,53,57,51],
[52,49,0,38,45,49,48,44,43,46,47,47,54,48,45],
[61,53,62,0,50,55,59,55,46,51,59,56,63,52,55],
[63,50,55,50,0,59,50,56,51,48,53,52,58,59,51],
[60,47,51,45,41,0,53,44,40,45,41,51,58,49,54],
[54,54,52,41,50,47,0,52,42,44,41,44,52,52,43],
[55,44,56,45,44,56,48,0,46,50,52,52,57,53,54],
[59,51,57,54,49,60,58,54,0,48,55,54,55,53,49],
[64,51,54,49,52,55,56,50,52,0,49,56,58,52,53],
[57,47,53,41,47,59,59,48,45,51,0,49,49,48,53],
[56,54,53,44,48,49,56,48,46,44,51,0,60,44,50],
[46,47,46,37,42,42,48,43,45,42,51,40,0,42,45],
[58,43,52,48,41,51,48,47,47,48,52,56,58,0,51],
[53,49,55,45,49,46,57,46,51,47,47,50,55,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 68, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,56,55,55,55,50,50,57,55,63,56,60,55,51],
[43,0,43,47,53,52,48,45,48,51,51,47,47,46,54],
[44,57,0,44,43,48,42,43,46,51,47,48,49,44,50],
[45,53,56,0,58,52,44,44,54,52,57,56,54,52,50],
[45,47,57,42,0,48,51,44,51,43,54,48,48,47,49],
[45,48,52,48,52,0,46,36,49,54,45,45,51,51,47],
[50,52,58,56,49,54,0,45,46,54,56,53,52,50,55],
[50,55,57,56,56,64,55,0,54,50,61,57,52,60,61],
[43,52,54,46,49,51,54,46,0,53,53,45,46,50,50],
[45,49,49,48,57,46,46,50,47,0,50,53,50,58,55],
[37,49,53,43,46,55,44,39,47,50,0,44,44,52,45],
[44,53,52,44,52,55,47,43,55,47,56,0,47,53,59],
[40,53,51,46,52,49,48,48,54,50,56,53,0,54,51],
[45,54,56,48,53,49,50,40,50,42,48,47,46,0,56],
[49,46,50,50,51,53,45,39,50,45,55,41,49,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 69, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,45,42,50,53,48,46,45,50,45,48,51,53,45],
[48,0,50,42,54,52,51,48,47,49,44,48,51,52,50],
[55,50,0,47,48,58,49,49,45,52,48,50,60,53,49],
[58,58,53,0,58,60,49,56,50,57,58,55,59,60,55],
[50,46,52,42,0,52,45,51,44,46,43,46,56,51,44],
[47,48,42,40,48,0,47,52,45,47,47,49,51,51,48],
[52,49,51,51,55,53,0,42,49,49,48,51,54,52,54],
[54,52,51,44,49,48,58,0,51,54,48,43,59,52,49],
[55,53,55,50,56,55,51,49,0,56,55,57,58,55,53],
[50,51,48,43,54,53,51,46,44,0,47,50,56,50,44],
[55,56,52,42,57,53,52,52,45,53,0,54,51,52,53],
[52,52,50,45,54,51,49,57,43,50,46,0,59,53,52],
[49,49,40,41,44,49,46,41,42,44,49,41,0,43,42],
[47,48,47,40,49,49,48,48,45,50,48,47,57,0,50],
[55,50,51,45,56,52,46,51,47,56,47,48,58,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 70, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,49,59,57,59,59,54,43,52,58,52,49,50,48],
[41,0,62,57,52,54,53,55,49,47,57,51,60,48,45],
[51,38,0,49,56,51,46,51,52,43,51,44,56,51,44],
[41,43,51,0,44,45,44,47,42,39,46,42,43,43,35],
[43,48,44,56,0,52,51,57,42,42,55,46,51,45,48],
[41,46,49,55,48,0,52,54,42,43,53,53,52,46,49],
[41,47,54,56,49,48,0,52,44,47,53,54,47,47,43],
[46,45,49,53,43,46,48,0,44,45,43,39,43,39,46],
[57,51,48,58,58,58,56,56,0,50,59,46,50,48,49],
[48,53,57,61,58,57,53,55,50,0,59,56,51,55,47],
[42,43,49,54,45,47,47,57,41,41,0,48,54,47,46],
[48,49,56,58,54,47,46,61,54,44,52,0,53,52,55],
[51,40,44,57,49,48,53,57,50,49,46,47,0,41,53],
[50,52,49,57,55,54,53,61,52,45,53,48,59,0,51],
[52,55,56,65,52,51,57,54,51,53,54,45,47,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 71, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,74,74,74,90,74,97,93,90,50,59,73,76,66],
[24,0,74,64,34,66,31,67,53,56,53,56,43,38,53],
[26,26,0,43,40,56,47,26,36,37,38,35,45,23,40],
[26,36,57,0,50,73,47,26,57,63,36,35,26,36,57],
[26,66,60,50,0,66,53,50,60,66,26,66,42,66,42],
[10,34,44,27,34,0,55,34,44,45,39,62,10,44,10],
[26,69,53,53,47,45,0,69,69,69,29,69,45,50,45],
[3,33,74,74,50,66,31,0,53,66,53,35,73,33,69],
[7,47,64,43,40,56,31,47,0,61,19,59,42,23,37],
[10,44,63,37,34,55,31,34,39,0,39,62,39,20,20],
[50,47,62,64,74,61,71,47,81,61,0,40,47,47,71],
[41,44,65,65,34,38,31,65,41,38,60,0,41,41,41],
[27,57,55,74,58,90,55,27,58,61,53,59,0,57,50],
[24,62,77,64,34,56,50,67,77,80,53,59,43,0,59],
[34,47,60,43,58,90,55,31,63,80,29,59,50,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 72, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,52,37,41,61,23,53,56,60,51,53,85,54,66],
[9,0,33,11,24,32,20,29,44,43,44,32,25,34,30],
[48,67,0,37,54,49,42,46,73,53,60,44,67,64,58],
[63,89,63,0,55,68,45,63,83,75,59,63,78,70,73],
[59,76,46,45,0,74,44,47,62,57,73,61,62,72,70],
[39,68,51,32,26,0,49,42,60,51,63,59,66,58,58],
[77,80,58,55,56,51,0,75,71,69,54,59,67,76,50],
[47,71,54,37,53,58,25,0,50,60,52,60,52,43,51],
[44,56,27,17,38,40,29,50,0,56,36,29,46,70,52],
[40,57,47,25,43,49,31,40,44,0,40,54,61,50,51],
[49,56,40,41,27,37,46,48,64,60,0,47,58,67,38],
[47,68,56,37,39,41,41,40,71,46,53,0,57,64,70],
[15,75,33,22,38,34,33,48,54,39,42,43,0,56,51],
[46,66,36,30,28,42,24,57,30,50,33,36,44,0,47],
[34,70,42,27,30,42,50,49,48,49,62,30,49,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 73, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,48,70,56,83,69,58,73,59,62,76,52,50,67],
[36,0,43,43,41,42,59,43,42,31,42,35,41,27,60],
[52,57,0,62,50,75,74,50,57,58,63,77,56,52,75],
[30,57,38,0,46,67,61,45,52,39,46,77,38,48,69],
[44,59,50,54,0,80,74,51,79,54,76,73,60,55,72],
[17,58,25,33,20,0,51,27,27,16,40,51,24,35,62],
[31,41,26,39,26,49,0,28,44,24,39,38,33,18,49],
[42,57,50,55,49,73,72,0,45,44,60,73,47,44,77],
[27,58,43,48,21,73,56,55,0,47,62,80,26,41,69],
[41,69,42,61,46,84,76,56,53,0,64,66,67,59,67],
[38,58,37,54,24,60,61,40,38,36,0,66,31,34,85],
[24,65,23,23,27,49,62,27,20,34,34,0,29,34,68],
[48,59,44,62,40,76,67,53,74,33,69,71,0,47,66],
[50,73,48,52,45,65,82,56,59,41,66,66,53,0,79],
[33,40,25,31,28,38,51,23,31,33,15,32,34,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 74, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,46,48,48,49,55,53,46,46,50,46,58,55,54],
[47,0,40,46,42,46,56,49,46,48,50,40,47,47,53],
[54,60,0,48,56,54,50,57,49,48,50,48,57,52,58],
[52,54,52,0,53,51,55,55,55,49,53,48,57,52,57],
[52,58,44,47,0,41,53,55,45,54,47,50,53,57,54],
[51,54,46,49,59,0,53,54,47,48,55,54,56,51,60],
[45,44,50,45,47,47,0,53,43,45,47,45,53,51,56],
[47,51,43,45,45,46,47,0,49,42,45,47,48,53,46],
[54,54,51,45,55,53,57,51,0,49,50,53,62,50,58],
[54,52,52,51,46,52,55,58,51,0,53,50,59,49,56],
[50,50,50,47,53,45,53,55,50,47,0,42,58,53,58],
[54,60,52,52,50,46,55,53,47,50,58,0,60,50,54],
[42,53,43,43,47,44,47,52,38,41,42,40,0,52,53],
[45,53,48,48,43,49,49,47,50,51,47,50,48,0,53],
[46,47,42,43,46,40,44,54,42,44,42,46,47,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 75, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,48,52,47,51,37,45,60,53,48,52,44,53,49],
[46,0,50,55,49,53,46,54,67,56,50,55,52,53,53],
[52,50,0,54,50,57,50,60,62,65,63,60,47,64,55],
[48,45,46,0,50,46,36,49,61,47,40,47,49,50,56],
[53,51,50,50,0,52,41,51,51,54,52,42,46,56,57],
[49,47,43,54,48,0,38,45,69,54,43,56,45,55,51],
[63,54,50,64,59,62,0,57,64,58,55,65,51,54,61],
[55,46,40,51,49,55,43,0,51,53,48,51,42,54,45],
[40,33,38,39,49,31,36,49,0,41,42,45,32,35,39],
[47,44,35,53,46,46,42,47,59,0,42,56,38,49,55],
[52,50,37,60,48,57,45,52,58,58,0,59,44,54,56],
[48,45,40,53,58,44,35,49,55,44,41,0,38,48,51],
[56,48,53,51,54,55,49,58,68,62,56,62,0,52,63],
[47,47,36,50,44,45,46,46,65,51,46,52,48,0,53],
[51,47,45,44,43,49,39,55,61,45,44,49,37,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 76, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,56,52,57,64,58,54,55,56,43,53,55,53,58],
[41,0,48,44,51,47,48,39,47,51,42,35,51,47,52],
[44,52,0,41,52,50,46,45,47,52,52,42,44,55,54],
[48,56,59,0,58,54,57,47,56,43,44,57,49,57,58],
[43,49,48,42,0,48,56,23,52,50,39,47,52,54,49],
[36,53,50,46,52,0,44,43,42,49,39,34,47,44,50],
[42,52,54,43,44,56,0,37,43,46,42,48,51,47,49],
[46,61,55,53,77,57,63,0,58,55,50,59,61,62,60],
[45,53,53,44,48,58,57,42,0,53,40,52,56,56,51],
[44,49,48,57,50,51,54,45,47,0,33,47,49,45,53],
[57,58,48,56,61,61,58,50,60,67,0,55,59,59,64],
[47,65,58,43,53,66,52,41,48,53,45,0,56,53,58],
[45,49,56,51,48,53,49,39,44,51,41,44,0,51,42],
[47,53,45,43,46,56,53,38,44,55,41,47,49,0,60],
[42,48,46,42,51,50,51,40,49,47,36,42,58,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 77, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,52,49,45,54,47,44,38,52,42,41,48,50,42],
[61,0,47,50,49,54,47,52,44,45,48,44,52,46,51],
[48,53,0,50,51,50,44,51,45,34,52,41,56,49,43],
[51,50,50,0,50,50,43,50,48,42,50,47,54,43,46],
[55,51,49,50,0,51,54,46,49,55,57,44,49,54,50],
[46,46,50,50,49,0,44,48,47,47,44,45,49,50,46],
[53,53,56,57,46,56,0,53,56,54,53,43,51,60,51],
[56,48,49,50,54,52,47,0,48,51,46,33,50,50,44],
[62,56,55,52,51,53,44,52,0,53,50,43,48,55,44],
[48,55,66,58,45,53,46,49,47,0,49,37,46,58,48],
[58,52,48,50,43,56,47,54,50,51,0,51,55,50,55],
[59,56,59,53,56,55,57,67,57,63,49,0,49,65,60],
[52,48,44,46,51,51,49,50,52,54,45,51,0,54,54],
[50,54,51,57,46,50,40,50,45,42,50,35,46,0,46],
[58,49,57,54,50,54,49,56,56,52,45,40,46,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 78, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,55,46,54,53,41,48,48,44,39,46,46,47,45],
[57,0,50,53,49,50,53,46,51,49,39,45,57,48,50],
[45,50,0,49,51,46,47,41,59,54,46,48,61,48,44],
[54,47,51,0,47,50,44,55,46,50,40,41,57,53,39],
[46,51,49,53,0,48,48,43,50,54,43,44,57,59,40],
[47,50,54,50,52,0,44,51,53,51,39,53,59,48,46],
[59,47,53,56,52,56,0,53,56,58,49,55,62,53,53],
[52,54,59,45,57,49,47,0,55,51,43,48,54,53,49],
[52,49,41,54,50,47,44,45,0,53,40,39,60,53,46],
[56,51,46,50,46,49,42,49,47,0,39,47,54,48,41],
[61,61,54,60,57,61,51,57,60,61,0,59,65,63,46],
[54,55,52,59,56,47,45,52,61,53,41,0,57,54,48],
[54,43,39,43,43,41,38,46,40,46,35,43,0,52,39],
[53,52,52,47,41,52,47,47,47,52,37,46,48,0,45],
[55,50,56,61,60,54,47,51,54,59,54,52,61,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 79, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,54,41,55,41,31,12,49,30,43,48,23,40,64],
[64,0,82,50,76,60,57,43,35,49,57,68,58,64,70],
[46,18,0,47,52,30,44,8,39,20,35,58,34,37,55],
[59,50,53,0,53,50,23,34,33,36,69,49,47,33,70],
[45,24,48,47,0,30,15,26,26,16,52,25,7,24,31],
[59,40,70,50,70,0,45,50,48,35,85,57,63,46,58],
[69,43,56,77,85,55,0,37,51,57,61,72,50,59,64],
[88,57,92,66,74,50,63,0,62,48,48,74,49,45,73],
[51,65,61,67,74,52,49,38,0,63,69,77,52,66,68],
[70,51,80,64,84,65,43,52,37,0,77,54,64,50,74],
[57,43,65,31,48,15,39,52,31,23,0,49,54,40,66],
[52,32,42,51,75,43,28,26,23,46,51,0,49,48,76],
[77,42,66,53,93,37,50,51,48,36,46,51,0,43,72],
[60,36,63,67,76,54,41,55,34,50,60,52,57,0,71],
[36,30,45,30,69,42,36,27,32,26,34,24,28,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 80, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,41,45,39,22,50,31,46,40,44,38,40,31,61],
[40,0,64,59,46,30,65,21,50,39,45,22,47,26,70],
[59,36,0,40,40,33,53,27,37,36,47,36,53,28,56],
[55,41,60,0,52,43,64,45,25,46,42,33,44,33,71],
[61,54,60,48,0,34,59,34,29,51,45,27,50,29,65],
[78,70,67,57,66,0,73,21,41,41,57,30,67,28,77],
[50,35,47,36,41,27,0,22,21,46,25,21,47,26,52],
[69,79,73,55,66,79,78,0,50,53,65,55,75,66,71],
[54,50,63,75,71,59,79,50,0,53,51,50,69,63,76],
[60,61,64,54,49,59,54,47,47,0,49,33,38,44,59],
[56,55,53,58,55,43,75,35,49,51,0,47,61,51,86],
[62,78,64,67,73,70,79,45,50,67,53,0,69,57,83],
[60,53,47,56,50,33,53,25,31,62,39,31,0,28,50],
[69,74,72,67,71,72,74,34,37,56,49,43,72,0,76],
[39,30,44,29,35,23,48,29,24,41,14,17,50,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 81, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,52,44,58,46,49,49,58,57,48,48,48,55,44],
[51,0,59,58,55,49,55,58,61,56,61,54,48,48,48],
[48,41,0,42,50,40,40,41,48,50,56,41,43,42,40],
[56,42,58,0,57,41,53,50,54,57,62,42,48,56,50],
[42,45,50,43,0,49,53,48,40,54,50,52,47,42,38],
[54,51,60,59,51,0,53,53,55,57,62,48,58,49,49],
[51,45,60,47,47,47,0,49,52,54,62,46,43,50,55],
[51,42,59,50,52,47,51,0,51,53,54,49,49,43,48],
[42,39,52,46,60,45,48,49,0,50,60,43,52,42,45],
[43,44,50,43,46,43,46,47,50,0,63,40,42,45,46],
[52,39,44,38,50,38,38,46,40,37,0,40,48,38,44],
[52,46,59,58,48,52,54,51,57,60,60,0,53,50,57],
[52,52,57,52,53,42,57,51,48,58,52,47,0,51,44],
[45,52,58,44,58,51,50,57,58,55,62,50,49,0,51],
[56,52,60,50,62,51,45,52,55,54,56,43,56,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 82, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,52,38,56,60,73,37,52,59,65,58,66,56,51],
[46,0,41,41,44,49,58,41,43,52,50,57,56,75,45],
[48,59,0,53,55,75,70,54,51,66,62,50,62,61,46],
[62,59,47,0,48,64,72,47,53,61,59,65,66,61,34],
[44,56,45,52,0,58,60,49,50,61,56,57,53,63,49],
[40,51,25,36,42,0,48,38,49,53,60,50,59,53,46],
[27,42,30,28,40,52,0,32,42,57,54,53,47,47,39],
[63,59,46,53,51,62,68,0,61,53,71,69,66,66,37],
[48,57,49,47,50,51,58,39,0,69,55,65,62,59,44],
[41,48,34,39,39,47,43,47,31,0,50,58,40,48,35],
[35,50,38,41,44,40,46,29,45,50,0,66,58,57,38],
[42,43,50,35,43,50,47,31,35,42,34,0,46,48,26],
[34,44,38,34,47,41,53,34,38,60,42,54,0,50,36],
[44,25,39,39,37,47,53,34,41,52,43,52,50,0,30],
[49,55,54,66,51,54,61,63,56,65,62,74,64,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 83, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,41,57,37,45,53,47,39,52,52,58,53,51,46],
[41,0,37,55,46,49,44,52,39,46,54,38,48,54,52],
[59,63,0,57,48,45,55,60,49,49,54,53,51,43,67],
[43,45,43,0,49,41,41,46,46,37,45,48,48,48,53],
[63,54,52,51,0,54,47,63,57,53,65,58,63,49,55],
[55,51,55,59,46,0,49,59,55,47,62,55,52,51,54],
[47,56,45,59,53,51,0,63,44,52,50,63,61,55,48],
[53,48,40,54,37,41,37,0,36,40,47,43,46,40,46],
[61,61,51,54,43,45,56,64,0,44,51,58,67,46,52],
[48,54,51,63,47,53,48,60,56,0,52,47,50,59,52],
[48,46,46,55,35,38,50,53,49,48,0,45,46,45,43],
[42,62,47,52,42,45,37,57,42,53,55,0,47,59,52],
[47,52,49,52,37,48,39,54,33,50,54,53,0,47,48],
[49,46,57,52,51,49,45,60,54,41,55,41,53,0,55],
[54,48,33,47,45,46,52,54,48,48,57,48,52,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 84, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,51,41,39,40,48,52,52,35,41,47,43,48,43],
[53,0,52,51,43,47,48,54,60,49,43,60,47,53,49],
[49,48,0,45,49,48,55,49,58,45,46,52,53,52,54],
[59,49,55,0,43,46,50,54,67,42,47,53,55,55,51],
[61,57,51,57,0,54,61,55,56,53,48,54,49,54,53],
[60,53,52,54,46,0,51,49,55,48,36,49,52,56,55],
[52,52,45,50,39,49,0,44,66,52,44,48,54,58,50],
[48,46,51,46,45,51,56,0,56,45,45,47,45,51,53],
[48,40,42,33,44,45,34,44,0,33,44,43,43,43,40],
[65,51,55,58,47,52,48,55,67,0,56,53,58,50,47],
[59,57,54,53,52,64,56,55,56,44,0,57,55,54,51],
[53,40,48,47,46,51,52,53,57,47,43,0,50,46,49],
[57,53,47,45,51,48,46,55,57,42,45,50,0,48,49],
[52,47,48,45,46,44,42,49,57,50,46,54,52,0,56],
[57,51,46,49,47,45,50,47,60,53,49,51,51,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 85, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,52,53,66,52,52,58,57,52,52,55,55,52,59],
[50,0,52,52,58,47,50,61,55,48,49,51,58,54,54],
[48,48,0,44,58,56,48,51,56,46,59,59,56,47,55],
[47,48,56,0,54,58,47,55,45,56,58,51,55,47,49],
[34,42,42,46,0,41,34,56,36,45,47,45,41,40,40],
[48,53,44,42,59,0,44,47,43,48,51,54,46,53,53],
[48,50,52,53,66,56,0,58,55,59,61,55,59,54,60],
[42,39,49,45,44,53,42,0,42,57,48,48,53,50,56],
[43,45,44,55,64,57,45,58,0,55,56,57,50,55,58],
[48,52,54,44,55,52,41,43,45,0,47,51,52,52,61],
[48,51,41,42,53,49,39,52,44,53,0,55,46,49,55],
[45,49,41,49,55,46,45,52,43,49,45,0,48,42,47],
[45,42,44,45,59,54,41,47,50,48,54,52,0,41,51],
[48,46,53,53,60,47,46,50,45,48,51,58,59,0,52],
[41,46,45,51,60,47,40,44,42,39,45,53,49,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 86, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,63,56,45,60,57,35,43,50,40,63,56,49,54],
[43,0,57,45,46,46,43,41,41,42,42,63,54,42,50],
[37,43,0,41,48,37,24,46,33,31,40,54,44,34,48],
[44,55,59,0,45,51,42,41,47,51,40,55,53,50,47],
[55,54,52,55,0,45,40,42,42,46,44,62,47,47,38],
[40,54,63,49,55,0,51,37,44,50,43,55,54,42,43],
[43,57,76,58,60,49,0,48,41,48,50,66,57,45,55],
[65,59,54,59,58,63,52,0,56,58,48,64,56,54,51],
[57,59,67,53,58,56,59,44,0,57,47,71,57,52,50],
[50,58,69,49,54,50,52,42,43,0,43,65,57,39,57],
[60,58,60,60,56,57,50,52,53,57,0,62,64,55,46],
[37,37,46,45,38,45,34,36,29,35,38,0,40,38,42],
[44,46,56,47,53,46,43,44,43,43,36,60,0,41,45],
[51,58,66,50,53,58,55,46,48,61,45,62,59,0,50],
[46,50,52,53,62,57,45,49,50,43,54,58,55,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 87, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,71,71,81,53,62,28,50,46,68,36,53,53,84],
[19,0,40,54,74,27,49,47,43,40,46,35,36,53,47],
[29,60,0,46,68,28,49,28,53,28,44,34,54,48,46],
[29,46,54,0,87,41,46,47,40,36,61,39,48,48,56],
[19,26,32,13,0,17,32,20,33,23,50,26,41,51,26],
[47,73,72,59,83,0,60,32,52,32,67,44,69,50,66],
[38,51,51,54,68,40,0,30,49,56,39,38,52,59,60],
[72,53,72,53,80,68,70,0,80,50,64,59,62,94,72],
[50,57,47,60,67,48,51,20,0,29,47,29,33,40,64],
[54,60,72,64,77,68,44,50,71,0,48,44,77,94,66],
[32,54,56,39,50,33,61,36,53,52,0,29,57,61,48],
[64,65,66,61,74,56,62,41,71,56,71,0,70,82,66],
[47,64,46,52,59,31,48,38,67,23,43,30,0,52,68],
[47,47,52,52,49,50,41,6,60,6,39,18,48,0,65],
[16,53,54,44,74,34,40,28,36,34,52,34,32,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 88, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,61,43,48,50,35,46,68,35,52,32,28,36,39],
[54,0,49,53,61,62,52,45,63,40,49,49,40,44,40],
[39,51,0,56,53,62,49,46,55,48,46,45,42,40,41],
[57,47,44,0,63,49,59,29,63,42,37,59,51,49,42],
[52,39,47,37,0,49,30,43,53,48,47,23,34,42,23],
[50,38,38,51,51,0,49,17,68,48,45,56,37,49,42],
[65,48,51,41,70,51,0,35,55,57,39,51,43,41,48],
[54,55,54,71,57,83,65,0,81,47,52,62,52,53,54],
[32,37,45,37,47,32,45,19,0,29,32,37,28,29,41],
[65,60,52,58,52,52,43,53,71,0,53,40,45,35,36],
[48,51,54,63,53,55,61,48,68,47,0,61,44,40,35],
[68,51,55,41,77,44,49,38,63,60,39,0,44,66,56],
[72,60,58,49,66,63,57,48,72,55,56,56,0,40,34],
[64,56,60,51,58,51,59,47,71,65,60,34,60,0,38],
[61,60,59,58,77,58,52,46,59,64,65,44,66,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 89, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,54,34,53,40,31,53,41,42,33,51,60,46,48],
[47,0,53,30,62,49,52,48,52,38,48,50,66,56,50],
[46,47,0,36,47,24,37,36,39,36,37,42,51,33,42],
[66,70,64,0,72,57,44,55,54,55,65,70,67,52,54],
[47,38,53,28,0,28,43,50,39,35,32,46,54,19,44],
[60,51,76,43,72,0,53,51,63,37,48,81,58,50,55],
[69,48,63,56,57,47,0,47,55,52,51,63,64,53,38],
[47,52,64,45,50,49,53,0,49,34,47,59,67,37,39],
[59,48,61,46,61,37,45,51,0,40,47,41,58,47,43],
[58,62,64,45,65,63,48,66,60,0,54,73,62,46,55],
[67,52,63,35,68,52,49,53,53,46,0,63,56,34,48],
[49,50,58,30,54,19,37,41,59,27,37,0,49,43,37],
[40,34,49,33,46,42,36,33,42,38,44,51,0,25,40],
[54,44,67,48,81,50,47,63,53,54,66,57,75,0,60],
[52,50,58,46,56,45,62,61,57,45,52,63,60,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 90, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,43,41,37,53,48,45,49,55,41,51,53,47,42],
[56,0,41,43,42,48,56,48,46,59,46,47,36,47,54],
[57,59,0,52,52,56,59,49,50,54,52,63,53,56,49],
[59,57,48,0,50,54,52,59,58,54,48,59,44,63,50],
[63,58,48,50,0,58,60,51,49,55,39,55,48,57,51],
[47,52,44,46,42,0,51,45,43,48,42,47,41,51,43],
[52,44,41,48,40,49,0,44,48,61,50,60,44,51,47],
[55,52,51,41,49,55,56,0,43,45,49,54,47,56,43],
[51,54,50,42,51,57,52,57,0,56,45,58,47,54,56],
[45,41,46,46,45,52,39,55,44,0,40,50,45,52,36],
[59,54,48,52,61,58,50,51,55,60,0,53,56,50,53],
[49,53,37,41,45,53,40,46,42,50,47,0,44,54,37],
[47,64,47,56,52,59,56,53,53,55,44,56,0,64,53],
[53,53,44,37,43,49,49,44,46,48,50,46,36,0,52],
[58,46,51,50,49,57,53,57,44,64,47,63,47,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 91, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,41,53,54,40,56,44,40,50,41,51,52,50,46],
[49,0,36,54,43,45,44,40,32,32,48,40,40,55,36],
[59,64,0,57,52,51,61,47,49,57,61,57,54,68,47],
[47,46,43,0,46,47,55,44,38,45,41,41,43,55,41],
[46,57,48,54,0,51,47,48,42,44,47,49,47,65,46],
[60,55,49,53,49,0,52,55,50,43,49,46,50,66,44],
[44,56,39,45,53,48,0,43,42,47,44,42,40,52,42],
[56,60,53,56,52,45,57,0,61,55,56,57,52,61,57],
[60,68,51,62,58,50,58,39,0,50,57,57,52,70,52],
[50,68,43,55,56,57,53,45,50,0,53,57,55,65,52],
[59,52,39,59,53,51,56,44,43,47,0,46,51,47,48],
[49,60,43,59,51,54,58,43,43,43,54,0,47,54,47],
[48,60,46,57,53,50,60,48,48,45,49,53,0,59,51],
[50,45,32,45,35,34,48,39,30,35,53,46,41,0,44],
[54,64,53,59,54,56,58,43,48,48,52,53,49,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 92, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,47,40,69,46,58,61,78,54,51,57,68,55,62],
[46,0,43,54,61,51,55,64,58,62,60,46,58,68,60],
[53,57,0,41,61,59,44,62,62,53,54,49,65,56,55],
[60,46,59,0,65,55,52,59,74,58,53,55,54,56,62],
[31,39,39,35,0,35,44,60,63,48,45,48,53,49,54],
[54,49,41,45,65,0,46,55,58,48,51,55,53,59,56],
[42,45,56,48,56,54,0,43,60,47,53,55,52,54,44],
[39,36,38,41,40,45,57,0,42,48,47,45,51,51,43],
[22,42,38,26,37,42,40,58,0,42,46,43,39,40,51],
[46,38,47,42,52,52,53,52,58,0,55,40,51,56,34],
[49,40,46,47,55,49,47,53,54,45,0,41,60,46,51],
[43,54,51,45,52,45,45,55,57,60,59,0,51,55,53],
[32,42,35,46,47,47,48,49,61,49,40,49,0,53,41],
[45,32,44,44,51,41,46,49,60,44,54,45,47,0,43],
[38,40,45,38,46,44,56,57,49,66,49,47,59,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 93, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,57,49,44,49,54,50,52,41,50,44,39,41,40],
[52,0,64,57,52,56,53,59,49,53,52,44,55,57,56],
[43,36,0,48,36,41,49,36,45,35,35,26,41,41,37],
[51,43,52,0,43,58,53,56,50,44,54,41,40,42,48],
[56,48,64,57,0,57,59,53,52,50,58,42,50,44,55],
[51,44,59,42,43,0,56,49,49,34,49,47,54,34,48],
[46,47,51,47,41,44,0,43,37,38,42,43,53,42,44],
[50,41,64,44,47,51,57,0,42,41,45,44,45,45,37],
[48,51,55,50,48,51,63,58,0,44,44,45,48,41,47],
[59,47,65,56,50,66,62,59,56,0,55,47,51,53,48],
[50,48,65,46,42,51,58,55,56,45,0,44,46,42,53],
[56,56,74,59,58,53,57,56,55,53,56,0,53,53,49],
[61,45,59,60,50,46,47,55,52,49,54,47,0,51,54],
[59,43,59,58,56,66,58,55,59,47,58,47,49,0,55],
[60,44,63,52,45,52,56,63,53,52,47,51,46,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 94, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,60,46,54,55,60,61,47,44,58,56,50,51,49],
[41,0,53,40,44,53,38,50,42,45,52,53,44,51,38],
[40,47,0,41,48,46,41,45,42,32,49,53,34,55,33],
[54,60,59,0,54,59,58,58,62,50,61,59,51,65,50],
[46,56,52,46,0,59,60,56,52,47,52,58,47,53,43],
[45,47,54,41,41,0,50,48,37,36,51,47,44,44,37],
[40,62,59,42,40,50,0,53,48,45,45,50,40,59,49],
[39,50,55,42,44,52,47,0,37,37,48,51,42,47,42],
[53,58,58,38,48,63,52,63,0,47,52,57,47,50,43],
[56,55,68,50,53,64,55,63,53,0,67,61,55,61,51],
[42,48,51,39,48,49,55,52,48,33,0,47,44,52,46],
[44,47,47,41,42,53,50,49,43,39,53,0,44,47,36],
[50,56,66,49,53,56,60,58,53,45,56,56,0,56,52],
[49,49,45,35,47,56,41,53,50,39,48,53,44,0,36],
[51,62,67,50,57,63,51,58,57,49,54,64,48,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 95, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,42,44,42,47,39,54,34,50,38,36,48,35,40],
[56,0,40,37,52,56,48,49,40,55,52,35,59,57,54],
[58,60,0,57,47,57,66,52,41,47,50,47,60,49,44],
[56,63,43,0,57,58,57,77,51,62,57,54,63,56,60],
[58,48,53,43,0,50,50,54,47,48,57,47,62,54,54],
[53,44,43,42,50,0,36,61,42,43,42,46,66,51,29],
[61,52,34,43,50,64,0,57,45,42,48,43,67,48,44],
[46,51,48,23,46,39,43,0,42,33,35,39,54,43,29],
[66,60,59,49,53,58,55,58,0,65,56,46,58,60,58],
[50,45,53,38,52,57,58,67,35,0,60,59,64,50,52],
[62,48,50,43,43,58,52,65,44,40,0,46,61,60,54],
[64,65,53,46,53,54,57,61,54,41,54,0,70,52,47],
[52,41,40,37,38,34,33,46,42,36,39,30,0,34,35],
[65,43,51,44,46,49,52,57,40,50,40,48,66,0,35],
[60,46,56,40,46,71,56,71,42,48,46,53,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 96, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,48,48,42,44,43,48,46,47,59,46,45,46,53],
[52,0,37,46,43,44,48,50,48,39,48,40,47,49,47],
[52,63,0,56,50,50,53,52,53,51,60,49,45,53,58],
[52,54,44,0,46,46,45,49,44,53,56,47,38,48,49],
[58,57,50,54,0,47,52,61,48,46,57,50,46,49,54],
[56,56,50,54,53,0,48,51,47,52,63,48,49,49,53],
[57,52,47,55,48,52,0,53,47,48,61,54,50,54,50],
[52,50,48,51,39,49,47,0,49,45,57,53,44,47,55],
[54,52,47,56,52,53,53,51,0,51,61,51,57,53,52],
[53,61,49,47,54,48,52,55,49,0,62,50,48,52,50],
[41,52,40,44,43,37,39,43,39,38,0,39,44,45,43],
[54,60,51,53,50,52,46,47,49,50,61,0,49,49,55],
[55,53,55,62,54,51,50,56,43,52,56,51,0,55,56],
[54,51,47,52,51,51,46,53,47,48,55,51,45,0,51],
[47,53,42,51,46,47,50,45,48,50,57,45,44,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 97, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,46,54,48,52,60,55,51,51,48,45,49,52,48],
[52,0,52,48,49,53,60,50,53,57,52,47,45,49,51],
[54,48,0,51,55,60,60,54,50,60,56,55,50,54,54],
[46,52,49,0,43,56,60,51,48,52,47,46,51,51,53],
[52,51,45,57,0,59,61,51,46,55,53,44,47,53,50],
[48,47,40,44,41,0,51,49,46,47,45,46,41,46,52],
[40,40,40,40,39,49,0,44,44,42,40,37,40,41,48],
[45,50,46,49,49,51,56,0,54,59,55,50,44,49,53],
[49,47,50,52,54,54,56,46,0,49,47,51,44,52,48],
[49,43,40,48,45,53,58,41,51,0,45,45,42,53,54],
[52,48,44,53,47,55,60,45,53,55,0,49,40,49,46],
[55,53,45,54,56,54,63,50,49,55,51,0,47,48,59],
[51,55,50,49,53,59,60,56,56,58,60,53,0,52,58],
[48,51,46,49,47,54,59,51,48,47,51,52,48,0,50],
[52,49,46,47,50,48,52,47,52,46,54,41,42,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 98, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,52,36,53,38,49,47,44,48,56,43,48,39,47],
[60,0,56,41,52,49,60,51,51,53,60,51,58,62,65],
[48,44,0,44,47,54,72,31,48,67,57,52,49,46,61],
[64,59,56,0,54,61,74,48,62,48,55,63,57,55,60],
[47,48,53,46,0,46,56,44,45,45,57,45,54,44,38],
[62,51,46,39,54,0,63,48,36,42,50,41,65,49,55],
[51,40,28,26,44,37,0,40,30,43,37,38,49,40,49],
[53,49,69,52,56,52,60,0,53,46,57,54,56,61,59],
[56,49,52,38,55,64,70,47,0,56,57,47,61,47,70],
[52,47,33,52,55,58,57,54,44,0,36,52,54,42,54],
[44,40,43,45,43,50,63,43,43,64,0,41,44,24,39],
[57,49,48,37,55,59,62,46,53,48,59,0,49,47,56],
[52,42,51,43,46,35,51,44,39,46,56,51,0,36,48],
[61,38,54,45,56,51,60,39,53,58,76,53,64,0,67],
[53,35,39,40,62,45,51,41,30,46,61,44,52,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 99, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,55,44,48,50,53,53,56,53,60,58,60,54,43],
[52,0,53,45,46,55,53,56,54,48,56,46,50,51,44],
[45,47,0,43,45,44,47,43,47,44,48,43,45,41,43],
[56,55,57,0,46,55,58,52,62,50,52,53,53,55,49],
[52,54,55,54,0,58,58,51,55,55,63,51,60,54,45],
[50,45,56,45,42,0,59,50,56,48,55,45,48,52,49],
[47,47,53,42,42,41,0,37,49,48,50,46,49,54,44],
[47,44,57,48,49,50,63,0,52,52,53,51,52,54,50],
[44,46,53,38,45,44,51,48,0,45,51,46,55,51,48],
[47,52,56,50,45,52,52,48,55,0,55,48,53,50,52],
[40,44,52,48,37,45,50,47,49,45,0,41,53,48,41],
[42,54,57,47,49,55,54,49,54,52,59,0,56,47,49],
[40,50,55,47,40,52,51,48,45,47,47,44,0,50,46],
[46,49,59,45,46,48,46,46,49,50,52,53,50,0,51],
[57,56,57,51,55,51,56,50,52,48,59,51,54,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 100, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,46,38,55,42,42,50,29,46,48,53,55,46,49],
[42,0,46,46,56,38,42,49,33,51,33,35,64,50,59],
[54,54,0,45,61,29,53,44,36,58,47,40,54,61,42],
[62,54,55,0,63,43,53,66,51,53,66,47,66,71,63],
[45,44,39,37,0,40,60,60,28,53,44,49,48,50,46],
[58,62,71,57,60,0,58,57,47,60,61,77,76,59,58],
[58,58,47,47,40,42,0,53,28,56,37,38,52,45,36],
[50,51,56,34,40,43,47,0,33,41,45,36,55,39,38],
[71,67,64,49,72,53,72,67,0,62,53,62,72,57,63],
[54,49,42,47,47,40,44,59,38,0,42,44,39,59,54],
[52,67,53,34,56,39,63,55,47,58,0,49,70,57,56],
[47,65,60,53,51,23,62,64,38,56,51,0,67,59,54],
[45,36,46,34,52,24,48,45,28,61,30,33,0,48,50],
[54,50,39,29,50,41,55,61,43,41,43,41,52,0,60],
[51,41,58,37,54,42,64,62,37,46,44,46,50,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 101, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,66,71,59,60,49,30,54,56,56,62,48,48,51],
[54,0,82,70,72,78,54,37,66,50,79,75,60,74,55],
[34,18,0,31,34,50,29,25,21,40,30,30,20,32,20],
[29,30,69,0,54,57,23,38,29,37,44,58,35,52,34],
[41,28,66,46,0,55,39,36,43,40,46,58,42,57,29],
[40,22,50,43,45,0,15,35,20,27,41,41,26,44,35],
[51,46,71,77,61,85,0,53,66,57,62,65,49,51,57],
[70,63,75,62,64,65,47,0,60,61,62,62,58,62,52],
[46,34,79,71,57,80,34,40,0,43,60,62,55,67,31],
[44,50,60,63,60,73,43,39,57,0,50,63,40,46,48],
[44,21,70,56,54,59,38,38,40,50,0,58,30,44,36],
[38,25,70,42,42,59,35,38,38,37,42,0,24,37,30],
[52,40,80,65,58,74,51,42,45,60,70,76,0,68,37],
[52,26,68,48,43,56,49,38,33,54,56,63,32,0,40],
[49,45,80,66,71,65,43,48,69,52,64,70,63,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 102, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,43,40,52,45,37,32,50,42,36,38,46,42,41],
[54,0,45,41,49,38,49,35,44,44,43,36,41,45,45],
[57,55,0,55,51,43,58,40,60,60,47,55,55,49,43],
[60,59,45,0,56,37,58,31,41,55,44,40,42,40,39],
[48,51,49,44,0,37,51,42,47,61,41,51,42,48,54],
[55,62,57,63,63,0,59,50,57,59,52,51,48,54,55],
[63,51,42,42,49,41,0,37,50,51,46,50,43,45,49],
[68,65,60,69,58,50,63,0,63,71,59,64,57,53,59],
[50,56,40,59,53,43,50,37,0,60,44,56,40,47,34],
[58,56,40,45,39,41,49,29,40,0,47,34,31,42,51],
[64,57,53,56,59,48,54,41,56,53,0,52,57,54,54],
[62,64,45,60,49,49,50,36,44,66,48,0,48,52,46],
[54,59,45,58,58,52,57,43,60,69,43,52,0,48,50],
[58,55,51,60,52,46,55,47,53,58,46,48,52,0,48],
[59,55,57,61,46,45,51,41,66,49,46,54,50,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 103, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,55,60,54,46,52,56,43,52,52,51,52,52,59],
[51,0,52,48,48,48,51,53,47,50,45,51,52,48,52],
[45,48,0,48,55,44,52,43,42,44,47,47,48,50,48],
[40,52,52,0,52,50,45,51,45,46,51,53,45,50,60],
[46,52,45,48,0,48,52,52,49,41,55,54,50,46,52],
[54,52,56,50,52,0,49,52,50,42,54,48,54,47,51],
[48,49,48,55,48,51,0,49,43,48,48,49,51,40,46],
[44,47,57,49,48,48,51,0,45,46,48,51,48,49,55],
[57,53,58,55,51,50,57,55,0,50,59,60,52,47,51],
[48,50,56,54,59,58,52,54,50,0,53,52,53,48,55],
[48,55,53,49,45,46,52,52,41,47,0,47,47,41,51],
[49,49,53,47,46,52,51,49,40,48,53,0,43,45,55],
[48,48,52,55,50,46,49,52,48,47,53,57,0,45,57],
[48,52,50,50,54,53,60,51,53,52,59,55,55,0,53],
[41,48,52,40,48,49,54,45,49,45,49,45,43,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 104, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,64,50,59,51,52,63,52,54,47,50,46,55,45],
[59,0,64,58,63,56,54,44,70,49,43,46,42,66,56],
[36,36,0,46,43,44,34,41,43,34,26,26,28,47,39],
[50,42,54,0,68,50,44,44,65,46,38,43,36,47,57],
[41,37,57,32,0,51,47,42,51,46,27,40,31,58,45],
[49,44,56,50,49,0,57,45,54,42,54,34,48,59,50],
[48,46,66,56,53,43,0,53,59,42,48,49,47,55,47],
[37,56,59,56,58,55,47,0,69,58,49,46,52,47,54],
[48,30,57,35,49,46,41,31,0,40,43,33,34,57,49],
[46,51,66,54,54,58,58,42,60,0,46,44,33,53,53],
[53,57,74,62,73,46,52,51,57,54,0,45,41,65,57],
[50,54,74,57,60,66,51,54,67,56,55,0,45,63,57],
[54,58,72,64,69,52,53,48,66,67,59,55,0,51,58],
[45,34,53,53,42,41,45,53,43,47,35,37,49,0,45],
[55,44,61,43,55,50,53,46,51,47,43,43,42,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 105, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,48,44,54,67,41,55,57,40,49,50,43,59,49],
[51,0,61,47,57,63,44,56,63,48,58,57,50,61,51],
[52,39,0,47,52,58,41,48,53,37,43,50,46,47,50],
[56,53,53,0,56,59,52,50,56,52,49,63,43,54,59],
[46,43,48,44,0,65,50,56,60,43,53,58,44,47,51],
[33,37,42,41,35,0,44,51,40,40,38,45,32,38,37],
[59,56,59,48,50,56,0,52,57,51,45,48,42,55,61],
[45,44,52,50,44,49,48,0,48,38,42,43,36,46,50],
[43,37,47,44,40,60,43,52,0,39,45,52,44,47,41],
[60,52,63,48,57,60,49,62,61,0,51,62,44,58,56],
[51,42,57,51,47,62,55,58,55,49,0,54,50,57,52],
[50,43,50,37,42,55,52,57,48,38,46,0,40,48,46],
[57,50,54,57,56,68,58,64,56,56,50,60,0,50,58],
[41,39,53,46,53,62,45,54,53,42,43,52,50,0,43],
[51,49,50,41,49,63,39,50,59,44,48,54,42,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 106, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,53,51,47,46,45,47,51,54,48,60,45,47,50],
[47,0,53,48,54,57,58,56,52,59,48,59,47,44,53],
[47,47,0,42,40,54,46,48,46,46,38,53,46,45,51],
[49,52,58,0,48,50,54,55,56,59,45,61,55,49,51],
[53,46,60,52,0,43,55,47,53,48,47,58,52,55,50],
[54,43,46,50,57,0,51,50,58,52,48,50,49,46,52],
[55,42,54,46,45,49,0,45,54,46,42,56,43,48,54],
[53,44,52,45,53,50,55,0,51,53,50,53,51,48,51],
[49,48,54,44,47,42,46,49,0,50,38,55,44,43,51],
[46,41,54,41,52,48,54,47,50,0,46,46,48,52,47],
[52,52,62,55,53,52,58,50,62,54,0,60,54,44,49],
[40,41,47,39,42,50,44,47,45,54,40,0,47,37,43],
[55,53,54,45,48,51,57,49,56,52,46,53,0,48,49],
[53,56,55,51,45,54,52,52,57,48,56,63,52,0,46],
[50,47,49,49,50,48,46,49,49,53,51,57,51,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 107, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,54,52,64,62,54,50,58,56,55,57,56,47,59],
[40,0,51,55,59,51,46,49,52,44,46,49,56,46,42],
[46,49,0,44,53,51,53,47,50,44,50,53,50,45,47],
[48,45,56,0,51,50,54,47,51,49,52,60,57,46,46],
[36,41,47,49,0,46,41,45,45,36,37,53,43,37,44],
[38,49,49,50,54,0,49,43,47,40,43,54,46,36,50],
[46,54,47,46,59,51,0,52,54,46,52,48,51,44,48],
[50,51,53,53,55,57,48,0,59,52,52,53,43,48,53],
[42,48,50,49,55,53,46,41,0,42,52,54,51,38,46],
[44,56,56,51,64,60,54,48,58,0,55,59,50,52,56],
[45,54,50,48,63,57,48,48,48,45,0,55,51,51,55],
[43,51,47,40,47,46,52,47,46,41,45,0,49,37,44],
[44,44,50,43,57,54,49,57,49,50,49,51,0,45,44],
[53,54,55,54,63,64,56,52,62,48,49,63,55,0,60],
[41,58,53,54,56,50,52,47,54,44,45,56,56,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 108, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,54,46,46,49,48,44,47,46,44,45,56,53,57],
[46,0,63,50,48,49,57,45,49,54,54,56,55,54,53],
[46,37,0,39,38,37,39,31,41,41,39,45,46,49,48],
[54,50,61,0,55,50,60,56,53,49,47,52,57,57,59],
[54,52,62,45,0,41,58,39,53,52,46,49,54,48,55],
[51,51,63,50,59,0,57,49,56,55,51,53,62,61,58],
[52,43,61,40,42,43,0,41,48,49,39,41,51,49,54],
[56,55,69,44,61,51,59,0,59,57,51,63,63,55,62],
[53,51,59,47,47,44,52,41,0,46,50,54,53,48,59],
[54,46,59,51,48,45,51,43,54,0,47,56,60,54,54],
[56,46,61,53,54,49,61,49,50,53,0,53,51,55,57],
[55,44,55,48,51,47,59,37,46,44,47,0,57,48,61],
[44,45,54,43,46,38,49,37,47,40,49,43,0,44,52],
[47,46,51,43,52,39,51,45,52,46,45,52,56,0,58],
[43,47,52,41,45,42,46,38,41,46,43,39,48,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 109, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,64,49,49,37,48,42,52,49,58,47,48,59,59],
[44,0,60,49,44,47,52,47,49,47,48,54,37,45,52],
[36,40,0,33,56,35,42,33,40,34,48,41,36,43,49],
[51,51,67,0,50,55,60,35,54,54,55,50,51,48,58],
[51,56,44,50,0,44,58,41,49,42,68,54,52,37,64],
[63,53,65,45,56,0,53,40,56,43,59,57,41,56,69],
[52,48,58,40,42,47,0,48,42,45,61,47,52,59,52],
[58,53,67,65,59,60,52,0,68,44,69,54,62,71,72],
[48,51,60,46,51,44,58,32,0,42,54,42,45,48,61],
[51,53,66,46,58,57,55,56,58,0,60,52,50,56,64],
[42,52,52,45,32,41,39,31,46,40,0,60,46,45,54],
[53,46,59,50,46,43,53,46,58,48,40,0,38,64,60],
[52,63,64,49,48,59,48,38,55,50,54,62,0,62,60],
[41,55,57,52,63,44,41,29,52,44,55,36,38,0,67],
[41,48,51,42,36,31,48,28,39,36,46,40,40,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 110, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,44,40,53,46,44,52,55,38,44,56,47,49,50],
[52,0,50,50,50,62,56,60,57,45,56,63,55,43,60],
[56,50,0,46,53,50,39,53,49,43,43,59,50,44,68],
[60,50,54,0,49,59,46,65,57,48,53,62,59,48,69],
[47,50,47,51,0,51,50,61,54,41,48,51,48,54,64],
[54,38,50,41,49,0,54,54,48,45,52,60,45,41,67],
[56,44,61,54,50,46,0,56,56,54,52,61,55,43,53],
[48,40,47,35,39,46,44,0,55,42,52,53,42,46,52],
[45,43,51,43,46,52,44,45,0,32,48,56,48,44,51],
[62,55,57,52,59,55,46,58,68,0,57,69,60,50,62],
[56,44,57,47,52,48,48,48,52,43,0,51,44,44,50],
[44,37,41,38,49,40,39,47,44,31,49,0,38,48,48],
[53,45,50,41,52,55,45,58,52,40,56,62,0,44,63],
[51,57,56,52,46,59,57,54,56,50,56,52,56,0,52],
[50,40,32,31,36,33,47,48,49,38,50,52,37,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 111, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,21,35,48,40,13,34,36,51,40,31,33,25,51],
[66,0,28,43,43,43,33,47,43,56,50,40,31,38,53],
[79,72,0,57,67,61,53,51,71,71,62,59,49,65,62],
[65,57,43,0,56,45,36,47,57,54,50,45,32,56,65],
[52,57,33,44,0,46,38,41,51,71,41,45,54,43,60],
[60,57,39,55,54,0,39,49,50,61,51,46,37,53,47],
[87,67,47,64,62,61,0,61,58,70,65,61,40,68,76],
[66,53,49,53,59,51,39,0,44,60,55,46,43,47,74],
[64,57,29,43,49,50,42,56,0,55,57,47,31,50,65],
[49,44,29,46,29,39,30,40,45,0,40,35,33,43,59],
[60,50,38,50,59,49,35,45,43,60,0,49,45,52,57],
[69,60,41,55,55,54,39,54,53,65,51,0,29,61,64],
[67,69,51,68,46,63,60,57,69,67,55,71,0,65,58],
[75,62,35,44,57,47,32,53,50,57,48,39,35,0,63],
[49,47,38,35,40,53,24,26,35,41,43,36,42,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 112, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,54,54,55,51,58,56,52,46,50,54,54,51,46],
[53,0,57,50,51,55,57,58,55,42,59,55,47,44,54],
[46,43,0,44,46,43,45,52,50,45,46,52,36,37,43],
[46,50,56,0,49,45,48,51,44,43,43,53,41,44,51],
[45,49,54,51,0,48,50,54,48,50,51,52,42,46,45],
[49,45,57,55,52,0,57,57,54,45,50,56,50,49,48],
[42,43,55,52,50,43,0,50,53,45,47,47,47,42,45],
[44,42,48,49,46,43,50,0,45,44,48,48,41,42,48],
[48,45,50,56,52,46,47,55,0,49,51,49,45,42,43],
[54,58,55,57,50,55,55,56,51,0,53,61,55,48,57],
[50,41,54,57,49,50,53,52,49,47,0,56,54,41,50],
[46,45,48,47,48,44,53,52,51,39,44,0,41,50,47],
[46,53,64,59,58,50,53,59,55,45,46,59,0,46,52],
[49,56,63,56,54,51,58,58,58,52,59,50,54,0,57],
[54,46,57,49,55,52,55,52,57,43,50,53,48,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 113, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,47,40,46,42,44,41,48,50,47,43,44,43,45],
[55,0,55,48,52,46,58,52,54,54,58,45,51,51,55],
[53,45,0,42,43,42,44,40,46,55,47,41,38,45,51],
[60,52,58,0,57,50,56,57,56,62,57,51,50,51,58],
[54,48,57,43,0,51,54,47,51,50,56,38,51,47,52],
[58,54,58,50,49,0,57,52,48,50,58,43,52,52,54],
[56,42,56,44,46,43,0,43,42,51,50,37,51,44,52],
[59,48,60,43,53,48,57,0,50,52,53,44,47,47,50],
[52,46,54,44,49,52,58,50,0,55,52,41,42,42,50],
[50,46,45,38,50,50,49,48,45,0,49,39,48,43,50],
[53,42,53,43,44,42,50,47,48,51,0,34,45,42,51],
[57,55,59,49,62,57,63,56,59,61,66,0,54,55,57],
[56,49,62,50,49,48,49,53,58,52,55,46,0,52,57],
[57,49,55,49,53,48,56,53,58,57,58,45,48,0,57],
[55,45,49,42,48,46,48,50,50,50,49,43,43,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 114, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,46,44,44,47,43,57,41,56,47,50,49,48,39],
[60,0,49,48,68,60,68,65,58,50,47,49,50,36,52],
[54,51,0,56,61,67,57,73,68,55,57,51,46,72,54],
[56,52,44,0,47,58,71,64,54,56,53,46,61,41,40],
[56,32,39,53,0,35,53,48,49,43,40,37,45,43,37],
[53,40,33,42,65,0,55,46,58,45,51,43,52,62,50],
[57,32,43,29,47,45,0,49,60,45,39,44,43,42,35],
[43,35,27,36,52,54,51,0,49,41,38,38,35,35,40],
[59,42,32,46,51,42,40,51,0,56,47,47,44,45,52],
[44,50,45,44,57,55,55,59,44,0,41,41,33,40,52],
[53,53,43,47,60,49,61,62,53,59,0,45,46,48,46],
[50,51,49,54,63,57,56,62,53,59,55,0,62,50,52],
[51,50,54,39,55,48,57,65,56,67,54,38,0,51,43],
[52,64,28,59,57,38,58,65,55,60,52,50,49,0,60],
[61,48,46,60,63,50,65,60,48,48,54,48,57,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 115, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,49,50,52,51,41,64,58,58,60,54,49,65,62],
[55,0,56,47,46,51,47,51,54,58,59,60,49,53,43],
[51,44,0,42,49,49,46,59,55,51,59,52,44,57,61],
[50,53,58,0,49,57,50,64,58,61,67,63,55,56,54],
[48,54,51,51,0,58,40,51,59,52,58,58,52,58,55],
[49,49,51,43,42,0,45,54,59,53,45,48,47,57,47],
[59,53,54,50,60,55,0,53,60,63,64,64,57,49,60],
[36,49,41,36,49,46,47,0,58,51,50,40,34,59,50],
[42,46,45,42,41,41,40,42,0,40,46,44,33,49,51],
[42,42,49,39,48,47,37,49,60,0,48,60,44,55,50],
[40,41,41,33,42,55,36,50,54,52,0,51,42,44,42],
[46,40,48,37,42,52,36,60,56,40,49,0,32,55,50],
[51,51,56,45,48,53,43,66,67,56,58,68,0,61,63],
[35,47,43,44,42,43,51,41,51,45,56,45,39,0,56],
[38,57,39,46,45,53,40,50,49,50,58,50,37,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 116, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,37,54,43,61,51,45,48,47,38,38,31,42,45],
[58,0,52,55,47,59,53,54,52,47,50,48,48,55,46],
[63,48,0,59,58,68,60,61,54,55,47,53,42,57,57],
[46,45,41,0,50,59,45,52,47,50,46,45,47,48,47],
[57,53,42,50,0,60,50,54,48,57,40,41,38,49,54],
[39,41,32,41,40,0,46,41,35,39,37,42,39,43,37],
[49,47,40,55,50,54,0,63,53,62,38,47,39,45,50],
[55,46,39,48,46,59,37,0,40,42,30,31,33,41,33],
[52,48,46,53,52,65,47,60,0,47,41,51,52,54,45],
[53,53,45,50,43,61,38,58,53,0,42,46,43,50,53],
[62,50,53,54,60,63,62,70,59,58,0,56,45,59,62],
[62,52,47,55,59,58,53,69,49,54,44,0,49,55,59],
[69,52,58,53,62,61,61,67,48,57,55,51,0,58,58],
[58,45,43,52,51,57,55,59,46,50,41,45,42,0,43],
[55,54,43,53,46,63,50,67,55,47,38,41,42,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 117, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,52,48,51,45,42,48,63,48,52,47,47,43,53],
[51,0,48,47,57,48,42,51,56,47,50,43,50,42,51],
[48,52,0,45,51,47,41,48,56,48,53,43,47,43,52],
[52,53,55,0,42,50,48,49,55,48,56,46,47,46,50],
[49,43,49,58,0,53,47,51,60,47,54,46,47,44,53],
[55,52,53,50,47,0,49,54,52,45,53,46,46,44,52],
[58,58,59,52,53,51,0,55,60,50,61,51,52,53,60],
[52,49,52,51,49,46,45,0,54,46,51,46,45,50,51],
[37,44,44,45,40,48,40,46,0,38,48,36,44,38,41],
[52,53,52,52,53,55,50,54,62,0,57,50,50,54,57],
[48,50,47,44,46,47,39,49,52,43,0,47,49,43,47],
[53,57,57,54,54,54,49,54,64,50,53,0,53,50,56],
[53,50,53,53,53,54,48,55,56,50,51,47,0,50,54],
[57,58,57,54,56,56,47,50,62,46,57,50,50,0,52],
[47,49,48,50,47,48,40,49,59,43,53,44,46,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 118, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,50,57,43,39,59,65,45,38,63,48,63,67,45],
[48,0,46,48,34,35,57,58,54,46,59,48,56,56,62],
[50,54,0,67,39,60,60,58,36,42,66,66,71,65,67],
[43,52,33,0,38,44,55,51,39,41,49,51,58,52,51],
[57,66,61,62,0,56,62,68,54,48,54,56,75,60,65],
[61,65,40,56,44,0,52,58,56,53,65,44,66,65,55],
[41,43,40,45,38,48,0,55,42,33,51,47,60,65,54],
[35,42,42,49,32,42,45,0,44,40,59,43,47,55,55],
[55,46,64,61,46,44,58,56,0,44,45,55,64,60,60],
[62,54,58,59,52,47,67,60,56,0,77,62,59,72,59],
[37,41,34,51,46,35,49,41,55,23,0,42,56,50,44],
[52,52,34,49,44,56,53,57,45,38,58,0,66,74,53],
[37,44,29,42,25,34,40,53,36,41,44,34,0,47,41],
[33,44,35,48,40,35,35,45,40,28,50,26,53,0,40],
[55,38,33,49,35,45,46,45,40,41,56,47,59,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 119, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,50,55,46,54,60,37,42,43,48,42,57,50,57],
[50,0,54,55,51,61,63,39,52,57,43,48,55,56,62],
[50,46,0,50,61,58,65,37,59,48,56,51,47,54,56],
[45,45,50,0,46,49,55,39,41,46,52,37,51,42,53],
[54,49,39,54,0,55,68,42,42,42,45,46,47,56,52],
[46,39,42,51,45,0,57,46,49,48,53,33,57,53,52],
[40,37,35,45,32,43,0,35,37,38,48,47,40,49,40],
[63,61,63,61,58,54,65,0,56,56,61,49,54,61,61],
[58,48,41,59,58,51,63,44,0,50,57,52,50,56,64],
[57,43,52,54,58,52,62,44,50,0,61,52,56,59,44],
[52,57,44,48,55,47,52,39,43,39,0,44,47,49,53],
[58,52,49,63,54,67,53,51,48,48,56,0,52,45,50],
[43,45,53,49,53,43,60,46,50,44,53,48,0,48,47],
[50,44,46,58,44,47,51,39,44,41,51,55,52,0,47],
[43,38,44,47,48,48,60,39,36,56,47,50,53,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 120, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,46,51,45,43,52,56,54,53,40,46,43,51,48],
[53,0,36,44,42,51,44,50,52,51,42,46,44,42,36],
[54,64,0,57,49,50,55,55,60,57,53,49,45,54,59],
[49,56,43,0,51,48,59,56,50,56,50,48,50,44,56],
[55,58,51,49,0,55,50,57,59,52,56,51,48,50,55],
[57,49,50,52,45,0,47,50,60,52,51,43,47,48,47],
[48,56,45,41,50,53,0,52,58,64,50,51,50,52,48],
[44,50,45,44,43,50,48,0,52,51,42,48,42,45,45],
[46,48,40,50,41,40,42,48,0,45,49,45,38,41,41],
[47,49,43,44,48,48,36,49,55,0,46,45,36,42,42],
[60,58,47,50,44,49,50,58,51,54,0,51,46,48,44],
[54,54,51,52,49,57,49,52,55,55,49,0,50,45,42],
[57,56,55,50,52,53,50,58,62,64,54,50,0,52,50],
[49,58,46,56,50,52,48,55,59,58,52,55,48,0,48],
[52,64,41,44,45,53,52,55,59,58,56,58,50,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 121, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,41,42,44,44,42,39,64,41,28,49,41,55,41],
[41,0,37,45,40,50,29,49,56,32,29,52,54,45,49],
[59,63,0,49,46,55,47,59,65,52,42,62,62,63,49],
[58,55,51,0,52,48,55,66,60,60,51,66,55,62,56],
[56,60,54,48,0,40,43,62,53,43,35,65,55,47,48],
[56,50,45,52,60,0,49,56,62,47,36,60,47,60,46],
[58,71,53,45,57,51,0,62,60,56,43,66,60,60,66],
[61,51,41,34,38,44,38,0,56,51,33,60,49,41,36],
[36,44,35,40,47,38,40,44,0,34,32,56,48,52,42],
[59,68,48,40,57,53,44,49,66,0,30,60,57,58,46],
[72,71,58,49,65,64,57,67,68,70,0,73,73,66,48],
[51,48,38,34,35,40,34,40,44,40,27,0,61,41,28],
[59,46,38,45,45,53,40,51,52,43,27,39,0,48,39],
[45,55,37,38,53,40,40,59,48,42,34,59,52,0,39],
[59,51,51,44,52,54,34,64,58,54,52,72,61,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 122, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,43,55,57,42,45,55,48,52,45,48,35,56,54],
[58,0,47,57,63,35,51,55,51,49,51,63,44,53,57],
[57,53,0,51,60,57,46,65,58,57,62,60,48,49,56],
[45,43,49,0,53,52,34,59,51,44,42,54,46,50,50],
[43,37,40,47,0,35,38,36,49,39,41,45,49,34,52],
[58,65,43,48,65,0,47,67,59,45,54,58,45,56,61],
[55,49,54,66,62,53,0,59,59,50,52,59,58,60,64],
[45,45,35,41,64,33,41,0,54,42,38,42,44,50,44],
[52,49,42,49,51,41,41,46,0,45,43,46,42,55,50],
[48,51,43,56,61,55,50,58,55,0,49,60,57,58,53],
[55,49,38,58,59,46,48,62,57,51,0,61,45,60,54],
[52,37,40,46,55,42,41,58,54,40,39,0,50,48,53],
[65,56,52,54,51,55,42,56,58,43,55,50,0,57,50],
[44,47,51,50,66,44,40,50,45,42,40,52,43,0,56],
[46,43,44,50,48,39,36,56,50,47,46,47,50,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 123, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,47,53,66,54,68,54,65,73,48,54,72,48],
[32,0,53,46,35,51,34,31,41,42,53,48,63,30,27],
[30,47,0,40,46,53,42,34,54,49,54,65,62,43,42],
[53,54,60,0,48,78,61,53,49,52,72,50,68,56,49],
[47,65,54,52,0,64,50,53,60,49,74,66,69,49,33],
[34,49,47,22,36,0,21,41,47,33,43,42,50,46,38],
[46,66,58,39,50,79,0,43,44,58,67,58,73,53,44],
[32,69,66,47,47,59,57,0,45,38,61,48,56,55,56],
[46,59,46,51,40,53,56,55,0,49,58,63,57,64,45],
[35,58,51,48,51,67,42,62,51,0,58,57,58,42,42],
[27,47,46,28,26,57,33,39,42,42,0,51,49,43,21],
[52,52,35,50,34,58,42,52,37,43,49,0,43,57,28],
[46,37,38,32,31,50,27,44,43,42,51,57,0,51,41],
[28,70,57,44,51,54,47,45,36,58,57,43,49,0,32],
[52,73,58,51,67,62,56,44,55,58,79,72,59,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 124, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,48,49,47,43,37,54,40,41,39,49,43,46,41],
[49,0,50,41,48,46,32,46,38,51,44,48,43,47,41],
[52,50,0,60,55,56,40,52,36,54,43,56,47,42,49],
[51,59,40,0,42,43,37,51,38,42,46,48,41,40,42],
[53,52,45,58,0,56,47,58,44,55,44,57,47,51,53],
[57,54,44,57,44,0,40,51,37,44,42,58,52,46,50],
[63,68,60,63,53,60,0,63,47,62,61,70,55,49,55],
[46,54,48,49,42,49,37,0,36,50,45,53,40,39,40],
[60,62,64,62,56,63,53,64,0,62,53,63,50,56,52],
[59,49,46,58,45,56,38,50,38,0,38,48,41,49,43],
[61,56,57,54,56,58,39,55,47,62,0,63,50,53,50],
[51,52,44,52,43,42,30,47,37,52,37,0,43,45,46],
[57,57,53,59,53,48,45,60,50,59,50,57,0,55,53],
[54,53,58,60,49,54,51,61,44,51,47,55,45,0,58],
[59,59,51,58,47,50,45,60,48,57,50,54,47,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 125, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,77,62,49,60,49,47,64,55,61,62,63,47,57],
[34,0,51,46,45,51,48,35,52,30,48,55,50,33,52],
[23,49,0,46,42,36,35,37,63,41,49,57,43,34,51],
[38,54,54,0,49,27,44,57,59,52,39,63,54,42,53],
[51,55,58,51,0,38,54,59,56,40,53,48,48,34,58],
[40,49,64,73,62,0,51,50,75,54,60,67,60,46,63],
[51,52,65,56,46,49,0,50,66,41,73,53,47,53,44],
[53,65,63,43,41,50,50,0,57,43,57,58,61,51,55],
[36,48,37,41,44,25,34,43,0,35,43,61,50,30,39],
[45,70,59,48,60,46,59,57,65,0,57,63,67,56,67],
[39,52,51,61,47,40,27,43,57,43,0,57,41,45,45],
[38,45,43,37,52,33,47,42,39,37,43,0,36,27,44],
[37,50,57,46,52,40,53,39,50,33,59,64,0,32,58],
[53,67,66,58,66,54,47,49,70,44,55,73,68,0,66],
[43,48,49,47,42,37,56,45,61,33,55,56,42,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 126, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,50,54,57,48,53,46,44,49,52,45,56,47,55],
[54,0,49,53,48,50,58,55,58,53,57,46,64,50,57],
[50,51,0,55,49,52,59,56,53,44,48,46,60,41,68],
[46,47,45,0,56,53,62,44,49,45,47,47,56,45,54],
[43,52,51,44,0,49,55,43,51,39,42,43,49,38,55],
[52,50,48,47,51,0,57,51,55,44,52,50,55,52,51],
[47,42,41,38,45,43,0,39,40,42,42,42,47,46,49],
[54,45,44,56,57,49,61,0,53,53,56,53,53,46,58],
[56,42,47,51,49,45,60,47,0,43,48,45,53,41,54],
[51,47,56,55,61,56,58,47,57,0,61,50,61,52,59],
[48,43,52,53,58,48,58,44,52,39,0,37,52,44,63],
[55,54,54,53,57,50,58,47,55,50,63,0,56,41,59],
[44,36,40,44,51,45,53,47,47,39,48,44,0,43,60],
[53,50,59,55,62,48,54,54,59,48,56,59,57,0,58],
[45,43,32,46,45,49,51,42,46,41,37,41,40,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 127, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,58,49,61,41,49,57,61,35,53,40,63,45,36],
[69,0,66,51,65,56,51,50,61,52,62,52,67,54,45],
[42,34,0,32,47,46,42,37,35,43,46,37,55,42,42],
[51,49,68,0,65,62,61,56,64,55,56,48,77,54,42],
[39,35,53,35,0,44,42,55,43,38,47,35,55,34,38],
[59,44,54,38,56,0,56,52,66,45,58,61,55,53,44],
[51,49,58,39,58,44,0,52,63,40,61,44,57,56,50],
[43,50,63,44,45,48,48,0,47,56,51,45,69,48,43],
[39,39,65,36,57,34,37,53,0,48,49,50,65,39,38],
[65,48,57,45,62,55,60,44,52,0,65,59,67,59,42],
[47,38,54,44,53,42,39,49,51,35,0,44,59,45,43],
[60,48,63,52,65,39,56,55,50,41,56,0,59,42,36],
[37,33,45,23,45,45,43,31,35,33,41,41,0,37,31],
[55,46,58,46,66,47,44,52,61,41,55,58,63,0,39],
[64,55,58,58,62,56,50,57,62,58,57,64,69,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 128, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,43,54,15,34,24,15,2,10,0,19,48,19,34],
[85,0,58,64,15,61,83,25,26,25,50,19,48,59,44],
[57,42,0,57,32,52,81,42,27,67,55,27,81,67,52],
[46,36,43,0,9,21,43,34,21,19,19,19,43,19,34],
[85,85,68,91,0,46,83,76,61,59,50,68,98,44,83],
[66,39,48,79,54,0,39,39,26,39,40,49,54,50,64],
[76,17,19,57,17,61,0,27,2,10,50,21,50,59,61],
[85,75,58,66,24,61,73,0,35,34,49,43,73,59,83],
[98,74,73,79,39,74,98,65,0,74,74,49,88,74,74],
[90,75,33,81,41,61,90,66,26,0,49,45,90,76,85],
[100,50,45,81,50,60,50,51,26,51,0,45,50,36,85],
[81,81,73,81,32,51,79,57,51,55,55,0,81,64,66],
[52,52,19,57,2,46,50,27,12,10,50,19,0,44,61],
[81,41,33,81,56,50,41,41,26,24,64,36,56,0,75],
[66,56,48,66,17,36,39,17,26,15,15,34,39,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 129, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,50,71,100,71,71,34,34,71,37,34,100,34,87],
[29,0,29,50,63,87,34,34,63,47,29,50,63,50,50],
[50,71,0,71,84,71,71,71,47,84,50,34,84,34,71],
[29,50,29,0,29,50,13,13,29,13,13,16,29,29,29],
[0,37,16,71,0,37,34,0,34,34,0,34,50,34,50],
[29,13,29,50,63,0,47,0,63,47,29,50,29,63,50],
[29,66,29,87,66,53,0,0,29,13,29,50,66,16,53],
[66,66,29,87,100,100,100,0,63,100,66,50,100,63,100],
[66,37,53,71,66,37,71,37,0,71,37,87,66,71,53],
[29,53,16,87,66,53,87,0,29,0,66,50,66,16,53],
[63,71,50,87,100,71,71,34,63,34,0,50,100,50,87],
[66,50,66,84,66,50,50,50,13,50,50,0,66,50,66],
[0,37,16,71,50,71,34,0,34,34,0,34,0,34,50],
[66,50,66,71,66,37,84,37,29,84,50,50,66,0,53],
[13,50,29,71,50,50,47,0,47,47,13,34,50,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 130, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,43,40,31,44,46,40,49,63,42,49,45,47,42],
[50,0,56,37,42,44,36,43,47,65,40,56,41,50,45],
[57,44,0,40,45,31,41,31,50,69,53,47,44,49,41],
[60,63,60,0,59,49,51,56,62,70,72,70,51,71,58],
[69,58,55,41,0,54,66,61,65,56,53,59,51,55,55],
[56,56,69,51,46,0,50,58,57,67,58,64,47,61,55],
[54,64,59,49,34,50,0,52,46,61,65,59,42,57,37],
[60,57,69,44,39,42,48,0,52,65,69,70,53,59,51],
[51,53,50,38,35,43,54,48,0,60,54,58,42,51,31],
[37,35,31,30,44,33,39,35,40,0,41,53,25,44,40],
[58,60,47,28,47,42,35,31,46,59,0,55,51,45,43],
[51,44,53,30,41,36,41,30,42,47,45,0,40,46,34],
[55,59,56,49,49,53,58,47,58,75,49,60,0,60,48],
[53,50,51,29,45,39,43,41,49,56,55,54,40,0,37],
[58,55,59,42,45,45,63,49,69,60,57,66,52,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 131, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,46,44,52,60,59,56,53,50,50,49,48,55,39],
[46,0,47,35,47,48,53,46,45,45,51,54,47,49,41],
[54,53,0,38,53,60,56,54,56,48,46,52,49,50,46],
[56,65,62,0,63,59,66,64,57,63,58,66,51,61,48],
[48,53,47,37,0,53,55,53,52,55,45,53,42,52,41],
[40,52,40,41,47,0,42,42,43,44,44,47,40,45,40],
[41,47,44,34,45,58,0,50,41,48,39,47,37,51,40],
[44,54,46,36,47,58,50,0,52,45,46,47,38,51,40],
[47,55,44,43,48,57,59,48,0,46,46,44,44,51,43],
[50,55,52,37,45,56,52,55,54,0,47,52,43,48,44],
[50,49,54,42,55,56,61,54,54,53,0,56,43,50,48],
[51,46,48,34,47,53,53,53,56,48,44,0,42,44,42],
[52,53,51,49,58,60,63,62,56,57,57,58,0,60,51],
[45,51,50,39,48,55,49,49,49,52,50,56,40,0,47],
[61,59,54,52,59,60,60,60,57,56,52,58,49,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 132, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,49,59,42,58,48,45,49,55,52,48,48,58,54],
[60,0,46,67,51,59,52,54,50,41,54,49,68,53,61],
[51,54,0,55,46,49,48,48,51,39,54,52,66,62,53],
[41,33,45,0,40,45,45,28,37,40,37,42,54,48,47],
[58,49,54,60,0,63,60,56,56,53,55,67,64,51,61],
[42,41,51,55,37,0,52,36,43,47,40,46,49,43,52],
[52,48,52,55,40,48,0,45,37,44,43,44,51,51,52],
[55,46,52,72,44,64,55,0,53,53,46,56,58,55,61],
[51,50,49,63,44,57,63,47,0,49,46,55,62,58,51],
[45,59,61,60,47,53,56,47,51,0,49,49,63,56,49],
[48,46,46,63,45,60,57,54,54,51,0,41,59,50,55],
[52,51,48,58,33,54,56,44,45,51,59,0,55,51,61],
[52,32,34,46,36,51,49,42,38,37,41,45,0,42,49],
[42,47,38,52,49,57,49,45,42,44,50,49,58,0,54],
[46,39,47,53,39,48,48,39,49,51,45,39,51,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 133, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,48,49,53,49,55,50,58,48,48,62,54,56,47],
[45,0,46,45,62,46,52,51,59,50,52,65,51,56,48],
[52,54,0,42,57,48,55,56,61,46,45,59,52,59,48],
[51,55,58,0,62,51,58,55,67,59,47,64,58,63,49],
[47,38,43,38,0,40,51,37,54,47,45,53,45,55,49],
[51,54,52,49,60,0,54,52,63,54,53,62,51,58,46],
[45,48,45,42,49,46,0,42,51,42,39,53,41,45,47],
[50,49,44,45,63,48,58,0,61,51,53,59,53,58,51],
[42,41,39,33,46,37,49,39,0,46,47,55,39,50,36],
[52,50,54,41,53,46,58,49,54,0,48,53,50,59,37],
[52,48,55,53,55,47,61,47,53,52,0,62,46,55,45],
[38,35,41,36,47,38,47,41,45,47,38,0,39,52,37],
[46,49,48,42,55,49,59,47,61,50,54,61,0,58,47],
[44,44,41,37,45,42,55,42,50,41,45,48,42,0,37],
[53,52,52,51,51,54,53,49,64,63,55,63,53,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 134, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,39,38,45,34,27,34,46,62,40,58,41,31,40],
[74,0,34,59,61,57,48,56,53,63,42,72,42,68,43],
[61,66,0,64,66,74,59,54,72,68,58,80,61,61,48],
[62,41,36,0,49,48,33,34,66,56,41,48,48,42,34],
[55,39,34,51,0,39,34,32,58,42,41,58,43,40,27],
[66,43,26,52,61,0,39,32,63,60,52,51,67,38,46],
[73,52,41,67,66,61,0,61,60,62,54,92,49,72,33],
[66,44,46,66,68,68,39,0,52,56,41,58,56,59,41],
[54,47,28,34,42,37,40,48,0,49,40,47,43,40,42],
[38,37,32,44,58,40,38,44,51,0,65,56,34,50,45],
[60,58,42,59,59,48,46,59,60,35,0,73,42,47,52],
[42,28,20,52,42,49,8,42,53,44,27,0,35,30,27],
[59,58,39,52,57,33,51,44,57,66,58,65,0,51,19],
[69,32,39,58,60,62,28,41,60,50,53,70,49,0,41],
[60,57,52,66,73,54,67,59,58,55,48,73,81,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 135, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,52,52,42,64,52,59,54,54,55,60,56,58,68],
[48,0,35,46,44,56,38,46,50,69,42,57,52,60,69],
[48,65,0,49,34,66,41,53,50,64,53,60,49,57,61],
[48,54,51,0,42,56,49,42,51,51,42,53,56,49,60],
[58,56,66,58,0,71,40,60,45,46,56,48,63,74,59],
[36,44,34,44,29,0,45,36,39,55,25,44,45,45,40],
[48,62,59,51,60,55,0,52,45,60,47,54,61,64,62],
[41,54,47,58,40,64,48,0,44,59,46,47,42,47,50],
[46,50,50,49,55,61,55,56,0,68,49,57,44,63,60],
[46,31,36,49,54,45,40,41,32,0,40,39,54,68,57],
[45,58,47,58,44,75,53,54,51,60,0,45,59,65,60],
[40,43,40,47,52,56,46,53,43,61,55,0,57,60,63],
[44,48,51,44,37,55,39,58,56,46,41,43,0,73,64],
[42,40,43,51,26,55,36,53,37,32,35,40,27,0,44],
[32,31,39,40,41,60,38,50,40,43,40,37,36,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 136, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,49,52,54,42,47,47,44,50,57,58,52,60,52],
[50,0,55,58,56,48,56,47,54,52,57,62,54,54,54],
[51,45,0,51,57,51,53,44,50,52,54,52,54,52,41],
[48,42,49,0,50,42,47,44,42,50,46,46,56,55,51],
[46,44,43,50,0,39,47,44,39,46,52,52,52,59,44],
[58,52,49,58,61,0,58,49,48,55,57,54,62,61,51],
[53,44,47,53,53,42,0,47,47,50,46,58,55,54,43],
[53,53,56,56,56,51,53,0,54,56,49,52,58,56,51],
[56,46,50,58,61,52,53,46,0,51,56,60,51,56,50],
[50,48,48,50,54,45,50,44,49,0,47,49,50,58,45],
[43,43,46,54,48,43,54,51,44,53,0,51,48,51,46],
[42,38,48,54,48,46,42,48,40,51,49,0,46,53,42],
[48,46,46,44,48,38,45,42,49,50,52,54,0,55,53],
[40,46,48,45,41,39,46,44,44,42,49,47,45,0,45],
[48,46,59,49,56,49,57,49,50,55,54,58,47,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 137, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,52,49,51,56,51,59,56,55,48,46,54,52,54],
[44,0,45,40,36,53,46,57,39,56,51,44,50,47,46],
[48,55,0,46,47,51,50,60,43,44,51,42,49,37,47],
[51,60,54,0,48,51,52,60,52,50,44,49,51,48,52],
[49,64,53,52,0,52,58,58,60,56,54,44,58,50,55],
[44,47,49,49,48,0,42,50,42,47,46,49,46,43,44],
[49,54,50,48,42,58,0,56,48,45,52,45,55,49,50],
[41,43,40,40,42,50,44,0,47,41,49,34,48,38,42],
[44,61,57,48,40,58,52,53,0,56,51,43,44,46,54],
[45,44,56,50,44,53,55,59,44,0,54,52,45,46,53],
[52,49,49,56,46,54,48,51,49,46,0,43,46,43,45],
[54,56,58,51,56,51,55,66,57,48,57,0,53,52,51],
[46,50,51,49,42,54,45,52,56,55,54,47,0,46,50],
[48,53,63,52,50,57,51,62,54,54,57,48,54,0,52],
[46,54,53,48,45,56,50,58,46,47,55,49,50,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 138, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,41,39,47,37,41,46,56,53,43,40,42,51,47],
[52,0,50,58,59,50,40,48,57,61,56,46,50,54,59],
[59,50,0,53,51,54,46,48,52,52,53,48,50,56,60],
[61,42,47,0,42,39,45,51,56,54,40,50,52,51,58],
[53,41,49,58,0,50,51,64,58,57,49,50,51,61,57],
[63,50,46,61,50,0,53,51,62,54,53,51,54,60,56],
[59,60,54,55,49,47,0,69,67,64,54,55,58,55,52],
[54,52,52,49,36,49,31,0,48,61,39,39,40,48,49],
[44,43,48,44,42,38,33,52,0,59,49,34,34,47,36],
[47,39,48,46,43,46,36,39,41,0,34,32,44,54,43],
[57,44,47,60,51,47,46,61,51,66,0,44,46,54,45],
[60,54,52,50,50,49,45,61,66,68,56,0,62,57,47],
[58,50,50,48,49,46,42,60,66,56,54,38,0,50,43],
[49,46,44,49,39,40,45,52,53,46,46,43,50,0,46],
[53,41,40,42,43,44,48,51,64,57,55,53,57,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 139, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,50,49,39,52,53,53,49,40,52,55,39,45,45],
[51,0,60,62,42,55,57,52,43,41,48,54,54,40,44],
[50,40,0,57,42,45,52,50,40,53,48,52,56,42,35],
[51,38,43,0,36,48,43,48,39,37,46,53,38,41,39],
[61,58,58,64,0,47,57,62,51,61,60,56,63,54,54],
[48,45,55,52,53,0,49,52,50,49,46,57,51,45,46],
[47,43,48,57,43,51,0,57,41,43,56,48,46,38,41],
[47,48,50,52,38,48,43,0,44,42,50,52,43,37,36],
[51,57,60,61,49,50,59,56,0,48,60,54,58,47,49],
[60,59,47,63,39,51,57,58,52,0,55,64,57,50,48],
[48,52,52,54,40,54,44,50,40,45,0,55,44,36,41],
[45,46,48,47,44,43,52,48,46,36,45,0,49,43,40],
[61,46,44,62,37,49,54,57,42,43,56,51,0,47,50],
[55,60,58,59,46,55,62,63,53,50,64,57,53,0,55],
[55,56,65,61,46,54,59,64,51,52,59,60,50,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 140, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,32,47,18,36,69,9,38,37,41,44,33,52,24],
[63,0,43,58,37,38,54,56,54,55,43,61,61,40,44],
[68,57,0,74,36,38,57,31,40,63,42,68,49,52,55],
[53,42,26,0,16,29,68,35,49,49,49,39,42,54,45],
[82,63,64,84,0,50,64,58,58,58,58,58,71,58,57],
[64,62,62,71,50,0,80,49,76,80,54,69,73,60,50],
[31,46,43,32,36,20,0,13,53,20,26,37,19,54,36],
[91,44,69,65,42,51,87,0,54,72,60,53,58,67,64],
[62,46,60,51,42,24,47,46,0,54,47,54,46,36,48],
[63,45,37,51,42,20,80,28,46,0,46,65,46,66,49],
[59,57,58,51,42,46,74,40,53,54,0,57,42,67,61],
[56,39,32,61,42,31,63,47,46,35,43,0,50,46,42],
[67,39,51,58,29,27,81,42,54,54,58,50,0,53,64],
[48,60,48,46,42,40,46,33,64,34,33,54,47,0,42],
[76,56,45,55,43,50,64,36,52,51,39,58,36,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 141, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,61,68,63,65,52,43,65,72,80,66,75,74,46],
[46,0,50,51,58,55,45,46,49,62,70,60,63,69,50],
[39,50,0,50,52,55,47,42,45,53,67,68,58,57,49],
[32,49,50,0,36,52,60,49,44,46,64,39,44,76,34],
[37,42,48,64,0,75,44,48,44,62,71,57,74,67,35],
[35,45,45,48,25,0,43,50,50,55,61,63,41,68,31],
[48,55,53,40,56,57,0,56,46,60,59,56,57,74,48],
[57,54,58,51,52,50,44,0,42,51,70,58,54,72,36],
[35,51,55,56,56,50,54,58,0,69,78,62,69,76,54],
[28,38,47,54,38,45,40,49,31,0,79,63,56,78,27],
[20,30,33,36,29,39,41,30,22,21,0,48,28,70,20],
[34,40,32,61,43,37,44,42,38,37,52,0,53,61,40],
[25,37,42,56,26,59,43,46,31,44,72,47,0,70,22],
[26,31,43,24,33,32,26,28,24,22,30,39,30,0,27],
[54,50,51,66,65,69,52,64,46,73,80,60,78,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 142, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,40,51,51,56,54,48,56,55,49,59,43,47,53],
[53,0,51,58,60,57,51,54,45,53,51,60,49,55,56],
[60,49,0,54,57,57,55,57,48,53,43,55,47,46,49],
[49,42,46,0,49,54,45,49,39,51,44,54,52,51,47],
[49,40,43,51,0,49,49,39,50,49,47,53,42,41,39],
[44,43,43,46,51,0,48,51,51,44,43,52,40,38,41],
[46,49,45,55,51,52,0,44,48,50,43,52,51,41,45],
[52,46,43,51,61,49,56,0,46,50,41,49,52,51,53],
[44,55,52,61,50,49,52,54,0,56,43,58,52,58,47],
[45,47,47,49,51,56,50,50,44,0,45,54,43,46,54],
[51,49,57,56,53,57,57,59,57,55,0,55,60,57,50],
[41,40,45,46,47,48,48,51,42,46,45,0,40,47,44],
[57,51,53,48,58,60,49,48,48,57,40,60,0,59,56],
[53,45,54,49,59,62,59,49,42,54,43,53,41,0,48],
[47,44,51,53,61,59,55,47,53,46,50,56,44,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 143, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,53,57,56,55,53,59,49,47,47,53,67,60,65],
[44,0,56,52,56,47,47,51,46,50,45,32,64,54,58],
[47,44,0,52,52,44,50,46,45,49,52,44,55,62,59],
[43,48,48,0,48,44,46,46,39,44,44,31,49,43,52],
[44,44,48,52,0,47,41,52,50,56,51,45,54,44,61],
[45,53,56,56,53,0,54,56,59,56,53,48,57,61,67],
[47,53,50,54,59,46,0,51,53,53,52,49,61,57,61],
[41,49,54,54,48,44,49,0,46,42,50,41,53,55,60],
[51,54,55,61,50,41,47,54,0,54,60,50,64,52,67],
[53,50,51,56,44,44,47,58,46,0,49,54,64,55,71],
[53,55,48,56,49,47,48,50,40,51,0,42,60,55,71],
[47,68,56,69,55,52,51,59,50,46,58,0,61,51,72],
[33,36,45,51,46,43,39,47,36,36,40,39,0,41,45],
[40,46,38,57,56,39,43,45,48,45,45,49,59,0,60],
[35,42,41,48,39,33,39,40,33,29,29,28,55,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 144, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,57,50,47,48,50,48,40,48,51,52,45,46,51],
[54,0,50,49,54,55,51,47,42,53,53,58,56,50,59],
[43,50,0,56,49,51,46,52,42,48,53,49,55,45,49],
[50,51,44,0,47,46,44,47,46,49,48,51,46,51,56],
[53,46,51,53,0,46,48,49,42,51,58,58,50,52,56],
[52,45,49,54,54,0,56,47,43,47,51,55,49,59,53],
[50,49,54,56,52,44,0,45,43,51,52,44,52,45,55],
[52,53,48,53,51,53,55,0,40,53,60,54,55,47,56],
[60,58,58,54,58,57,57,60,0,60,57,60,49,52,59],
[52,47,52,51,49,53,49,47,40,0,49,50,46,48,51],
[49,47,47,52,42,49,48,40,43,51,0,41,46,48,55],
[48,42,51,49,42,45,56,46,40,50,59,0,44,49,53],
[55,44,45,54,50,51,48,45,51,54,54,56,0,53,54],
[54,50,55,49,48,41,55,53,48,52,52,51,47,0,52],
[49,41,51,44,44,47,45,44,41,49,45,47,46,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 145, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,39,0,39,30,54,29,0,46,0,21,40,8,32],
[38,0,60,21,60,60,43,21,21,46,21,38,78,29,21],
[61,40,0,61,0,83,61,61,61,61,40,29,61,61,53],
[100,79,39,0,39,100,75,78,21,78,0,38,57,40,70],
[61,40,100,61,0,83,61,61,61,61,40,61,61,61,61],
[70,40,17,0,17,0,53,53,21,78,0,21,40,40,32],
[46,57,39,25,39,47,0,46,46,46,25,38,57,8,17],
[71,79,39,22,39,47,54,0,0,100,0,17,79,62,54],
[100,79,39,79,39,79,54,100,0,100,54,60,79,62,71],
[54,54,39,22,39,22,54,0,0,0,0,0,40,0,32],
[100,79,60,100,60,100,75,100,46,100,0,60,100,83,92],
[79,62,71,62,39,79,62,83,40,100,40,0,62,62,54],
[60,22,39,43,39,60,43,21,21,60,0,38,0,21,43],
[92,71,39,60,39,60,92,38,38,100,17,38,79,0,92],
[68,79,47,30,39,68,83,46,29,68,8,46,57,8,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 146, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,53,49,46,48,31,42,50,49,42,39,46,47,47],
[53,0,55,52,45,55,47,44,53,51,47,49,54,50,51],
[47,45,0,54,45,53,35,36,39,50,37,40,47,47,52],
[51,48,46,0,38,45,37,44,44,52,47,42,43,52,50],
[54,55,55,62,0,48,47,55,52,50,42,43,56,47,57],
[52,45,47,55,52,0,39,45,49,52,36,40,54,38,47],
[69,53,65,63,53,61,0,37,56,62,42,48,57,45,58],
[58,56,64,56,45,55,63,0,69,59,45,47,58,50,51],
[50,47,61,56,48,51,44,31,0,50,44,40,45,49,49],
[51,49,50,48,50,48,38,41,50,0,36,37,52,41,52],
[58,53,63,53,58,64,58,55,56,64,0,50,61,56,60],
[61,51,60,58,57,60,52,53,60,63,50,0,59,61,64],
[54,46,53,57,44,46,43,42,55,48,39,41,0,42,47],
[53,50,53,48,53,62,55,50,51,59,44,39,58,0,57],
[53,49,48,50,43,53,42,49,51,48,40,36,53,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 147, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,48,53,56,44,46,54,48,55,54,45,50,55,56],
[46,0,36,44,40,30,36,44,38,41,44,32,46,45,47],
[52,64,0,51,48,39,40,54,55,57,58,48,46,50,63],
[47,56,49,0,48,44,50,50,45,52,50,44,51,47,51],
[44,60,52,52,0,42,45,51,44,60,51,45,50,51,53],
[56,70,61,56,58,0,55,59,60,76,63,47,57,55,63],
[54,64,60,50,55,45,0,63,57,59,60,47,61,51,70],
[46,56,46,50,49,41,37,0,42,54,54,39,46,52,55],
[52,62,45,55,56,40,43,58,0,53,51,41,47,50,60],
[45,59,43,48,40,24,41,46,47,0,50,32,48,47,50],
[46,56,42,50,49,37,40,46,49,50,0,40,54,51,55],
[55,68,52,56,55,53,53,61,59,68,60,0,54,50,57],
[50,54,54,49,50,43,39,54,53,52,46,46,0,47,53],
[45,55,50,53,49,45,49,48,50,53,49,50,53,0,56],
[44,53,37,49,47,37,30,45,40,50,45,43,47,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 148, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,48,43,53,45,56,52,45,49,46,48,50,56,53],
[48,0,56,50,52,50,50,51,57,53,46,53,55,52,61],
[52,44,0,43,51,46,48,47,43,49,44,47,49,52,53],
[57,50,57,0,53,46,56,54,49,59,45,57,62,51,59],
[47,48,49,47,0,48,49,46,50,54,48,52,47,51,56],
[55,50,54,54,52,0,53,62,52,59,50,57,57,55,57],
[44,50,52,44,51,47,0,49,51,48,45,48,54,49,56],
[48,49,53,46,54,38,51,0,59,53,43,54,51,50,56],
[55,43,57,51,50,48,49,41,0,45,48,51,53,54,54],
[51,47,51,41,46,41,52,47,55,0,41,48,51,48,50],
[54,54,56,55,52,50,55,57,52,59,0,54,56,55,61],
[52,47,53,43,48,43,52,46,49,52,46,0,46,47,49],
[50,45,51,38,53,43,46,49,47,49,44,54,0,51,52],
[44,48,48,49,49,45,51,50,46,52,45,53,49,0,51],
[47,39,47,41,44,43,44,44,46,50,39,51,48,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 149, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,64,59,50,52,63,66,57,54,67,51,64,49,53],
[31,0,38,22,33,30,41,35,36,25,27,19,40,25,29],
[36,62,0,47,55,50,57,63,51,40,50,53,64,45,46],
[41,78,53,0,49,47,58,54,54,43,56,39,66,41,42],
[50,67,45,51,0,40,59,61,58,38,53,48,65,44,50],
[48,70,50,53,60,0,62,63,42,40,61,47,65,41,51],
[37,59,43,42,41,38,0,65,57,39,41,40,43,40,54],
[34,65,37,46,39,37,35,0,41,29,50,48,35,48,32],
[43,64,49,46,42,58,43,59,0,36,49,46,55,45,48],
[46,75,60,57,62,60,61,71,64,0,65,53,65,49,53],
[33,73,50,44,47,39,59,50,51,35,0,49,66,47,50],
[49,81,47,61,52,53,60,52,54,47,51,0,59,54,57],
[36,60,36,34,35,35,57,65,45,35,34,41,0,35,51],
[51,75,55,59,56,59,60,52,55,51,53,46,65,0,63],
[47,71,54,58,50,49,46,68,52,47,50,43,49,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 150, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,35,39,36,42,46,36,36,39,40,40,46,37,40],
[56,0,50,51,51,49,53,37,53,44,44,52,53,50,44],
[65,50,0,51,57,52,60,54,60,51,60,62,51,55,53],
[61,49,49,0,55,49,56,50,51,49,51,52,54,51,49],
[64,49,43,45,0,54,49,49,52,45,48,59,52,50,47],
[58,51,48,51,46,0,46,45,52,49,51,55,48,49,44],
[54,47,40,44,51,54,0,46,49,43,43,49,43,47,49],
[64,63,46,50,51,55,54,0,48,55,52,51,58,53,58],
[64,47,40,49,48,48,51,52,0,48,50,56,46,52,48],
[61,56,49,51,55,51,57,45,52,0,49,54,51,56,52],
[60,56,40,49,52,49,57,48,50,51,0,54,55,52,51],
[60,48,38,48,41,45,51,49,44,46,46,0,54,46,47],
[54,47,49,46,48,52,57,42,54,49,45,46,0,49,51],
[63,50,45,49,50,51,53,47,48,44,48,54,51,0,51],
[60,56,47,51,53,56,51,42,52,48,49,53,49,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 151, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,35,76,43,43,43,40,67,37,48,47,46,42,41],
[51,0,45,59,34,45,42,37,70,46,42,59,37,29,37],
[65,55,0,78,44,45,60,57,70,50,70,51,55,54,52],
[24,41,22,0,37,23,28,16,46,33,30,33,41,21,41],
[57,66,56,63,0,51,49,50,78,55,52,52,47,42,39],
[57,55,55,77,49,0,64,56,59,46,61,60,52,53,56],
[57,58,40,72,51,36,0,38,63,59,54,51,40,36,55],
[60,63,43,84,50,44,62,0,62,57,70,58,51,50,55],
[33,30,30,54,22,41,37,38,0,42,37,39,33,30,35],
[63,54,50,67,45,54,41,43,58,0,52,61,45,40,57],
[52,58,30,70,48,39,46,30,63,48,0,57,60,30,56],
[53,41,49,67,48,40,49,42,61,39,43,0,49,40,49],
[54,63,45,59,53,48,60,49,67,55,40,51,0,42,56],
[58,71,46,79,58,47,64,50,70,60,70,60,58,0,58],
[59,63,48,59,61,44,45,45,65,43,44,51,44,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 152, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,48,47,51,45,57,47,46,46,49,53,44,52,50],
[50,0,47,48,44,45,49,48,53,47,43,53,43,46,50],
[52,53,0,58,53,52,53,54,62,56,56,56,49,56,59],
[53,52,42,0,47,43,51,47,52,50,44,60,42,47,52],
[49,56,47,53,0,52,53,50,57,51,48,56,46,51,52],
[55,55,48,57,48,0,58,45,53,52,53,55,49,47,51],
[43,51,47,49,47,42,0,44,49,50,42,57,42,52,52],
[53,52,46,53,50,55,56,0,54,55,51,64,53,56,54],
[54,47,38,48,43,47,51,46,0,48,48,54,43,49,52],
[54,53,44,50,49,48,50,45,52,0,53,53,46,49,52],
[51,57,44,56,52,47,58,49,52,47,0,56,47,53,58],
[47,47,44,40,44,45,43,36,46,47,44,0,40,49,53],
[56,57,51,58,54,51,58,47,57,54,53,60,0,55,57],
[48,54,44,53,49,53,48,44,51,51,47,51,45,0,50],
[50,50,41,48,48,49,48,46,48,48,42,47,43,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 153, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,44,53,47,47,64,45,49,48,53,54,51,52,50],
[46,0,53,43,46,53,60,47,51,46,51,51,47,31,42],
[56,47,0,51,45,50,61,59,61,52,49,57,53,48,40],
[47,57,49,0,55,54,63,55,52,57,56,52,51,47,49],
[53,54,55,45,0,51,64,55,57,54,60,58,56,55,47],
[53,47,50,46,49,0,52,48,52,45,50,57,49,47,48],
[36,40,39,37,36,48,0,38,38,36,45,43,43,37,36],
[55,53,41,45,45,52,62,0,48,54,47,54,56,45,40],
[51,49,39,48,43,48,62,52,0,39,43,52,53,49,41],
[52,54,48,43,46,55,64,46,61,0,53,58,48,56,57],
[47,49,51,44,40,50,55,53,57,47,0,51,58,41,44],
[46,49,43,48,42,43,57,46,48,42,49,0,47,43,43],
[49,53,47,49,44,51,57,44,47,52,42,53,0,43,44],
[48,69,52,53,45,53,63,55,51,44,59,57,57,0,59],
[50,58,60,51,53,52,64,60,59,43,56,57,56,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 154, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,52,45,53,43,57,43,49,50,52,55,49,52,51],
[49,0,60,60,54,60,56,56,54,51,52,60,60,59,58],
[48,40,0,52,55,63,52,43,55,53,49,58,46,47,53],
[55,40,48,0,57,54,57,45,61,49,46,63,46,55,47],
[47,46,45,43,0,49,46,44,53,43,39,52,44,50,44],
[57,40,37,46,51,0,51,40,55,47,46,53,42,43,48],
[43,44,48,43,54,49,0,35,55,49,49,56,48,44,43],
[57,44,57,55,56,60,65,0,66,51,52,65,51,59,59],
[51,46,45,39,47,45,45,34,0,45,47,55,45,48,39],
[50,49,47,51,57,53,51,49,55,0,56,66,51,53,55],
[48,48,51,54,61,54,51,48,53,44,0,55,48,54,43],
[45,40,42,37,48,47,44,35,45,34,45,0,44,44,45],
[51,40,54,54,56,58,52,49,55,49,52,56,0,59,51],
[48,41,53,45,50,57,56,41,52,47,46,56,41,0,49],
[49,42,47,53,56,52,57,41,61,45,57,55,49,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 155, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,27,31,0,19,20,0,68,0,1,22,42,20,31],
[80,0,60,38,49,41,61,33,69,79,28,49,33,48,80],
[73,40,0,32,19,40,39,31,89,31,1,62,53,40,50],
[69,62,68,0,68,41,61,41,69,68,69,41,22,67,99],
[100,51,81,32,0,40,39,51,89,78,48,73,53,59,50],
[81,59,60,59,60,0,69,34,69,39,28,61,53,59,58],
[80,39,61,39,61,31,0,12,69,39,28,61,33,39,59],
[100,67,69,59,49,66,88,0,89,67,28,70,80,48,58],
[32,31,11,31,11,31,31,11,0,11,12,53,53,31,31],
[100,21,69,32,22,61,61,33,89,0,28,43,53,48,31],
[99,72,99,31,52,72,72,72,88,72,0,72,53,77,72],
[78,51,38,59,27,39,39,30,47,57,28,0,53,59,77],
[58,67,47,78,47,47,67,20,47,47,47,47,0,67,78],
[80,52,60,33,41,41,61,52,69,52,23,41,33,0,72],
[69,20,50,1,50,42,41,42,69,69,28,23,22,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 156, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,49,42,48,52,43,50,57,53,45,53,32,60,50],
[52,0,48,44,52,45,48,43,52,51,48,52,45,55,51],
[51,52,0,44,52,54,44,47,56,53,53,54,41,59,41],
[58,56,56,0,51,56,53,53,66,54,56,60,44,56,52],
[52,48,48,49,0,49,53,38,58,55,54,55,53,52,45],
[48,55,46,44,51,0,50,50,54,50,58,59,38,51,41],
[57,52,56,47,47,50,0,47,51,52,53,51,48,58,38],
[50,57,53,47,62,50,53,0,62,63,50,55,50,58,48],
[43,48,44,34,42,46,49,38,0,53,55,45,49,56,48],
[47,49,47,46,45,50,48,37,47,0,52,57,45,53,43],
[55,52,47,44,46,42,47,50,45,48,0,54,41,67,44],
[47,48,46,40,45,41,49,45,55,43,46,0,41,50,33],
[68,55,59,56,47,62,52,50,51,55,59,59,0,60,54],
[40,45,41,44,48,49,42,42,44,47,33,50,40,0,42],
[50,49,59,48,55,59,62,52,52,57,56,67,46,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 157, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,46,52,49,54,44,43,51,56,47,55,58,42,48],
[49,0,48,55,52,53,50,48,47,55,53,51,53,40,53],
[54,52,0,60,47,59,53,55,45,57,64,59,51,49,56],
[48,45,40,0,39,47,45,50,43,54,53,48,49,38,47],
[51,48,53,61,0,53,53,51,50,60,57,53,54,46,51],
[46,47,41,53,47,0,49,47,42,52,47,48,52,45,49],
[56,50,47,55,47,51,0,56,48,57,59,53,54,40,48],
[57,52,45,50,49,53,44,0,53,53,53,57,52,44,53],
[49,53,55,57,50,58,52,47,0,54,56,55,56,49,54],
[44,45,43,46,40,48,43,47,46,0,45,45,46,36,42],
[53,47,36,47,43,53,41,47,44,55,0,42,47,39,42],
[45,49,41,52,47,52,47,43,45,55,58,0,51,46,42],
[42,47,49,51,46,48,46,48,44,54,53,49,0,47,50],
[58,60,51,62,54,55,60,56,51,64,61,54,53,0,50],
[52,47,44,53,49,51,52,47,46,58,58,58,50,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 158, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,45,43,56,51,64,53,35,53,52,44,51,42,57],
[46,0,53,42,53,54,59,56,40,54,53,43,58,46,45],
[55,47,0,45,61,59,57,59,46,55,55,60,56,49,53],
[57,58,55,0,62,51,50,53,41,51,53,56,46,45,49],
[44,47,39,38,0,44,47,50,38,42,45,49,49,40,44],
[49,46,41,49,56,0,51,54,35,35,48,39,53,39,49],
[36,41,43,50,53,49,0,46,40,46,47,41,42,40,48],
[47,44,41,47,50,46,54,0,41,42,57,43,53,44,53],
[65,60,54,59,62,65,60,59,0,57,50,59,63,55,54],
[47,46,45,49,58,65,54,58,43,0,61,60,54,45,62],
[48,47,45,47,55,52,53,43,50,39,0,51,51,43,55],
[56,57,40,44,51,61,59,57,41,40,49,0,54,43,52],
[49,42,44,54,51,47,58,47,37,46,49,46,0,37,54],
[58,54,51,55,60,61,60,56,45,55,57,57,63,0,57],
[43,55,47,51,56,51,52,47,46,38,45,48,46,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 159, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,56,57,55,53,49,55,60,51,52,56,53,47,48],
[43,0,47,43,47,41,46,51,60,51,48,40,49,43,51],
[44,53,0,50,41,50,51,50,57,49,47,49,56,42,42],
[43,57,50,0,51,53,47,56,63,49,52,47,51,49,49],
[45,53,59,49,0,52,47,57,56,47,52,51,56,46,47],
[47,59,50,47,48,0,44,52,57,48,52,40,49,45,45],
[51,54,49,53,53,56,0,62,66,51,53,52,55,47,47],
[45,49,50,44,43,48,38,0,52,48,43,44,49,43,47],
[40,40,43,37,44,43,34,48,0,37,46,45,41,34,39],
[49,49,51,51,53,52,49,52,63,0,48,51,52,44,53],
[48,52,53,48,48,48,47,57,54,52,0,51,55,47,48],
[44,60,51,53,49,60,48,56,55,49,49,0,56,47,46],
[47,51,44,49,44,51,45,51,59,48,45,44,0,45,47],
[53,57,58,51,54,55,53,57,66,56,53,53,55,0,50],
[52,49,58,51,53,55,53,53,61,47,52,54,53,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 160, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,52,48,48,53,56,63,59,52,48,48,59,51,59],
[52,0,51,47,52,52,57,59,59,55,53,48,49,52,56],
[48,49,0,35,42,47,51,50,51,53,41,48,52,50,54],
[52,53,65,0,54,59,59,65,61,57,53,50,65,55,62],
[52,48,58,46,0,50,57,56,62,55,53,51,59,54,55],
[47,48,53,41,50,0,51,59,50,57,45,51,53,48,51],
[44,43,49,41,43,49,0,48,50,50,40,44,48,48,47],
[37,41,50,35,44,41,52,0,49,48,42,41,49,45,51],
[41,41,49,39,38,50,50,51,0,52,45,39,50,44,52],
[48,45,47,43,45,43,50,52,48,0,35,52,50,46,53],
[52,47,59,47,47,55,60,58,55,65,0,48,60,53,58],
[52,52,52,50,49,49,56,59,61,48,52,0,62,53,52],
[41,51,48,35,41,47,52,51,50,50,40,38,0,48,51],
[49,48,50,45,46,52,52,55,56,54,47,47,52,0,51],
[41,44,46,38,45,49,53,49,48,47,42,48,49,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 161, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,52,38,43,38,63,65,77,53,62,37,49,47,62],
[60,0,45,57,35,51,54,57,51,70,51,57,69,52,57],
[48,55,0,50,39,58,66,57,59,47,47,54,54,56,73],
[62,43,50,0,59,53,53,78,94,78,75,65,69,65,63],
[57,65,61,41,0,53,91,89,89,80,62,65,65,65,71],
[62,49,42,47,47,0,53,55,83,68,52,55,58,68,55],
[37,46,34,47,9,47,0,47,41,44,25,40,43,50,62],
[35,43,43,22,11,45,53,0,71,44,43,30,54,56,68],
[23,49,41,6,11,17,59,29,0,25,22,29,38,44,66],
[47,30,53,22,20,32,56,56,75,0,52,50,35,52,50],
[38,49,53,25,38,48,75,57,78,48,0,75,72,52,66],
[63,43,46,35,35,45,60,70,71,50,25,0,42,56,62],
[51,31,46,31,35,42,57,46,62,65,28,58,0,53,56],
[53,48,44,35,35,32,50,44,56,48,48,44,47,0,56],
[38,43,27,37,29,45,38,32,34,50,34,38,44,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 162, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,38,43,60,32,44,45,29,53,58,29,34,38,51],
[59,0,26,33,50,26,55,47,36,45,48,39,54,24,56],
[62,74,0,72,80,50,77,70,60,63,79,49,53,70,80],
[57,67,28,0,73,28,59,64,34,57,52,53,59,44,57],
[40,50,20,27,0,38,41,51,20,46,55,32,60,31,52],
[68,74,50,72,62,0,70,80,58,64,65,50,50,61,66],
[56,45,23,41,59,30,0,63,32,52,62,43,57,29,41],
[55,53,30,36,49,20,37,0,37,42,52,32,64,43,42],
[71,64,40,66,80,42,68,63,0,73,73,58,58,56,69],
[47,55,37,43,54,36,48,58,27,0,57,40,62,50,59],
[42,52,21,48,45,35,38,48,27,43,0,34,41,38,46],
[71,61,51,47,68,50,57,68,42,60,66,0,65,51,73],
[66,46,47,41,40,50,43,36,42,38,59,35,0,43,60],
[62,76,30,56,69,39,71,57,44,50,62,49,57,0,49],
[49,44,20,43,48,34,59,58,31,41,54,27,40,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 163, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,54,45,58,55,51,51,57,54,50,55,47,45,47],
[46,0,50,48,57,56,52,50,51,55,47,54,46,50,50],
[46,50,0,46,58,56,52,48,52,55,52,59,49,45,51],
[55,52,54,0,62,51,56,56,58,55,56,52,52,47,50],
[42,43,42,38,0,48,44,41,52,50,49,52,45,48,42],
[45,44,44,49,52,0,49,46,53,52,42,53,42,40,42],
[49,48,48,44,56,51,0,46,54,48,47,49,47,40,41],
[49,50,52,44,59,54,54,0,54,50,49,53,51,51,49],
[43,49,48,42,48,47,46,46,0,50,46,49,44,43,38],
[46,45,45,45,50,48,52,50,50,0,50,48,38,42,45],
[50,53,48,44,51,58,53,51,54,50,0,52,46,46,44],
[45,46,41,48,48,47,51,47,51,52,48,0,50,42,45],
[53,54,51,48,55,58,53,49,56,62,54,50,0,47,49],
[55,50,55,53,52,60,60,49,57,58,54,58,53,0,49],
[53,50,49,50,58,58,59,51,62,55,56,55,51,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 164, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,58,42,57,52,49,59,60,55,50,52,49,51,47],
[54,0,53,48,55,46,38,49,54,58,41,45,52,46,47],
[42,47,0,44,53,52,48,55,58,50,41,57,62,51,47],
[58,52,56,0,53,50,50,53,59,58,50,48,52,49,53],
[43,45,47,47,0,35,59,46,50,47,46,59,55,44,51],
[48,54,48,50,65,0,53,55,62,53,50,60,61,58,61],
[51,62,52,50,41,47,0,56,57,56,51,55,60,46,51],
[41,51,45,47,54,45,44,0,51,47,35,51,54,48,51],
[40,46,42,41,50,38,43,49,0,55,51,50,55,40,46],
[45,42,50,42,53,47,44,53,45,0,47,40,51,48,41],
[50,59,59,50,54,50,49,65,49,53,0,57,63,55,58],
[48,55,43,52,41,40,45,49,50,60,43,0,61,51,46],
[51,48,38,48,45,39,40,46,45,49,37,39,0,39,47],
[49,54,49,51,56,42,54,52,60,52,45,49,61,0,45],
[53,53,53,47,49,39,49,49,54,59,42,54,53,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 165, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,62,52,48,56,60,59,64,51,59,53,61,51,52],
[52,0,57,52,44,53,52,59,55,57,58,53,57,54,53],
[38,43,0,46,43,51,41,59,55,49,41,54,46,51,43],
[48,48,54,0,44,53,48,56,58,54,53,54,48,44,48],
[52,56,57,56,0,58,58,60,53,55,55,54,61,52,50],
[44,47,49,47,42,0,50,51,44,44,40,43,45,38,41],
[40,48,59,52,42,50,0,57,52,48,51,46,53,51,44],
[41,41,41,44,40,49,43,0,54,38,41,48,51,37,44],
[36,45,45,42,47,56,48,46,0,44,52,46,44,48,44],
[49,43,51,46,45,56,52,62,56,0,53,43,58,44,49],
[41,42,59,47,45,60,49,59,48,47,0,47,55,42,42],
[47,47,46,46,46,57,54,52,54,57,53,0,53,49,56],
[39,43,54,52,39,55,47,49,56,42,45,47,0,50,45],
[49,46,49,56,48,62,49,63,52,56,58,51,50,0,52],
[48,47,57,52,50,59,56,56,56,51,58,44,55,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 166, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,59,47,49,52,61,57,51,64,53,49,50,57,54],
[49,0,57,49,42,49,56,58,45,56,50,48,60,55,52],
[41,43,0,43,40,42,42,47,45,43,50,46,46,50,41],
[53,51,57,0,47,52,60,59,53,58,50,54,55,55,56],
[51,58,60,53,0,54,53,60,48,61,51,57,53,53,51],
[48,51,58,48,46,0,52,56,45,52,48,54,55,55,48],
[39,44,58,40,47,48,0,54,46,52,47,45,55,53,54],
[43,42,53,41,40,44,46,0,40,50,45,42,49,46,54],
[49,55,55,47,52,55,54,60,0,55,53,47,58,54,53],
[36,44,57,42,39,48,48,50,45,0,46,49,50,55,53],
[47,50,50,50,49,52,53,55,47,54,0,51,53,59,51],
[51,52,54,46,43,46,55,58,53,51,49,0,58,55,53],
[50,40,54,45,47,45,45,51,42,50,47,42,0,44,49],
[43,45,50,45,47,45,47,54,46,45,41,45,56,0,54],
[46,48,59,44,49,52,46,46,47,47,49,47,51,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 167, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,44,56,57,60,54,42,57,62,37,59,59,57,53],
[61,0,53,55,60,51,38,41,50,42,39,39,53,52,53],
[56,47,0,55,60,50,53,54,47,60,50,57,57,34,59],
[44,45,45,0,35,49,37,36,44,47,42,49,51,42,42],
[43,40,40,65,0,48,47,46,55,58,41,57,63,49,57],
[40,49,50,51,52,0,53,36,54,43,46,49,51,36,42],
[46,62,47,63,53,47,0,39,52,48,44,58,54,43,52],
[58,59,46,64,54,64,61,0,58,64,51,57,62,49,61],
[43,50,53,56,45,46,48,42,0,50,55,57,47,33,47],
[38,58,40,53,42,57,52,36,50,0,54,53,56,31,58],
[63,61,50,58,59,54,56,49,45,46,0,52,67,49,58],
[41,61,43,51,43,51,42,43,43,47,48,0,60,44,42],
[41,47,43,49,37,49,46,38,53,44,33,40,0,37,47],
[43,48,66,58,51,64,57,51,67,69,51,56,63,0,58],
[47,47,41,58,43,58,48,39,53,42,42,58,53,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 168, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,38,30,55,46,31,60,27,47,22,45,45,21,38],
[72,0,58,79,79,60,55,55,45,46,61,69,53,50,59],
[62,42,0,72,63,55,23,54,41,63,40,62,46,42,52],
[70,21,28,0,49,45,31,44,35,44,13,52,50,27,36],
[45,21,37,51,0,29,15,53,26,46,13,45,28,20,28],
[54,40,45,55,71,0,38,63,27,55,29,16,52,27,32],
[69,45,77,69,85,62,0,52,44,69,60,68,65,49,58],
[40,45,46,56,47,37,48,0,44,25,30,52,53,38,44],
[73,55,59,65,74,73,56,56,0,48,70,71,53,51,61],
[53,54,37,56,54,45,31,75,52,0,59,45,35,35,29],
[78,39,60,87,87,71,40,70,30,41,0,61,60,52,60],
[55,31,38,48,55,84,32,48,29,55,39,0,54,37,53],
[55,47,54,50,72,48,35,47,47,65,40,46,0,29,55],
[79,50,58,73,80,73,51,62,49,65,48,63,71,0,70],
[62,41,48,64,72,68,42,56,39,71,40,47,45,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 169, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,50,47,56,57,56,42,52,50,42,44,52,60,44],
[53,0,63,45,52,63,59,50,61,51,57,56,60,63,49],
[50,37,0,31,52,56,48,44,55,48,37,45,48,50,40],
[53,55,69,0,60,61,51,56,71,64,48,54,63,65,52],
[44,48,48,40,0,46,47,43,48,46,52,48,57,44,46],
[43,37,44,39,54,0,43,47,57,44,42,41,50,58,40],
[44,41,52,49,53,57,0,44,51,57,52,45,54,50,42],
[58,50,56,44,57,53,56,0,60,56,56,51,59,57,47],
[48,39,45,29,52,43,49,40,0,49,43,40,47,57,42],
[50,49,52,36,54,56,43,44,51,0,45,49,61,51,38],
[58,43,63,52,48,58,48,44,57,55,0,51,57,61,45],
[56,44,55,46,52,59,55,49,60,51,49,0,55,57,50],
[48,40,52,37,43,50,46,41,53,39,43,45,0,49,37],
[40,37,50,35,56,42,50,43,43,49,39,43,51,0,28],
[56,51,60,48,54,60,58,53,58,62,55,50,63,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 170, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,55,33,56,55,46,45,45,60,52,52,44,54,39],
[44,0,53,30,47,54,48,54,43,48,50,45,46,53,47],
[45,47,0,38,51,64,56,41,38,54,41,43,51,48,43],
[67,70,62,0,70,73,67,56,62,64,48,56,68,60,56],
[44,53,49,30,0,55,54,42,47,51,50,35,52,40,42],
[45,46,36,27,45,0,55,49,33,37,35,41,56,40,32],
[54,52,44,33,46,45,0,53,42,54,47,55,50,55,38],
[55,46,59,44,58,51,47,0,45,52,42,41,49,47,46],
[55,57,62,38,53,67,58,55,0,61,45,43,60,50,47],
[40,52,46,36,49,63,46,48,39,0,42,32,47,61,41],
[48,50,59,52,50,65,53,58,55,58,0,46,58,60,40],
[48,55,57,44,65,59,45,59,57,68,54,0,49,59,52],
[56,54,49,32,48,44,50,51,40,53,42,51,0,54,39],
[46,47,52,40,60,60,45,53,50,39,40,41,46,0,44],
[61,53,57,44,58,68,62,54,53,59,60,48,61,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 171, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,33,51,45,52,36,39,43,46,45,44,41,30,42],
[62,0,33,62,40,61,60,40,57,66,59,41,52,46,69],
[67,67,0,57,55,58,56,54,72,53,67,50,57,58,57],
[49,38,43,0,48,42,48,42,58,49,51,55,40,29,38],
[55,60,45,52,0,57,60,36,53,57,61,56,61,60,55],
[48,39,42,58,43,0,44,42,47,51,54,52,49,43,44],
[64,40,44,52,40,56,0,29,63,43,37,66,44,36,38],
[61,60,46,58,64,58,71,0,80,61,71,66,64,56,61],
[57,43,28,42,47,53,37,20,0,28,43,48,50,41,49],
[54,34,47,51,43,49,57,39,72,0,47,42,40,41,40],
[55,41,33,49,39,46,63,29,57,53,0,59,51,43,32],
[56,59,50,45,44,48,34,34,52,58,41,0,50,42,37],
[59,48,43,60,39,51,56,36,50,60,49,50,0,41,52],
[70,54,42,71,40,57,64,44,59,59,57,58,59,0,37],
[58,31,43,62,45,56,62,39,51,60,68,63,48,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 172, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,45,48,55,47,39,47,35,46,54,40,48,47,30],
[50,0,59,46,53,54,46,50,45,50,45,45,54,51,42],
[55,41,0,43,54,46,44,49,39,53,45,41,47,48,46],
[52,54,57,0,54,55,51,59,50,50,54,54,49,55,41],
[45,47,46,46,0,41,47,49,47,51,43,37,49,51,44],
[53,46,54,45,59,0,61,56,34,51,57,51,51,40,45],
[61,54,56,49,53,39,0,55,53,56,63,56,53,62,44],
[53,50,51,41,51,44,45,0,44,46,38,51,48,39,54],
[65,55,61,50,53,66,47,56,0,53,51,57,53,52,44],
[54,50,47,50,49,49,44,54,47,0,57,38,55,52,44],
[46,55,55,46,57,43,37,62,49,43,0,43,58,45,39],
[60,55,59,46,63,49,44,49,43,62,57,0,59,53,50],
[52,46,53,51,51,49,47,52,47,45,42,41,0,40,37],
[53,49,52,45,49,60,38,61,48,48,55,47,60,0,39],
[70,58,54,59,56,55,56,46,56,56,61,50,63,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 173, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,67,83,78,67,53,87,67,67,74,70,53,67,73],
[54,0,47,77,49,54,46,52,47,82,52,45,26,51,61],
[33,53,0,54,47,60,35,61,50,79,47,52,32,62,57],
[17,23,46,0,46,52,34,42,24,74,43,35,27,42,40],
[22,51,53,54,0,54,47,57,43,58,50,50,41,36,72],
[33,46,40,48,46,0,22,51,50,76,44,50,25,59,57],
[47,54,65,66,53,78,0,57,59,87,63,68,47,75,69],
[13,48,39,58,43,49,43,0,43,62,58,54,37,53,66],
[33,53,50,76,57,50,41,57,0,57,56,56,34,55,49],
[33,18,21,26,42,24,13,38,43,0,38,22,14,32,45],
[26,48,53,57,50,56,37,42,44,62,0,45,33,55,46],
[30,55,48,65,50,50,32,46,44,78,55,0,39,51,51],
[47,74,68,73,59,75,53,63,66,86,67,61,0,61,68],
[33,49,38,58,64,41,25,47,45,68,45,49,39,0,68],
[27,39,43,60,28,43,31,34,51,55,54,49,32,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 174, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,58,60,59,65,48,57,55,48,53,62,47,51,48],
[48,0,44,52,42,48,34,38,36,34,47,37,45,41,45],
[42,56,0,56,49,54,40,49,48,44,49,45,51,33,43],
[40,48,44,0,41,55,36,36,39,38,45,48,51,39,39],
[41,58,51,59,0,55,45,49,47,34,51,54,48,43,42],
[35,52,46,45,45,0,53,38,51,33,52,42,51,36,34],
[52,66,60,64,55,47,0,48,51,42,57,50,53,46,43],
[43,62,51,64,51,62,52,0,51,49,50,55,53,36,48],
[45,64,52,61,53,49,49,49,0,50,63,55,52,46,48],
[52,66,56,62,66,67,58,51,50,0,56,56,50,55,51],
[47,53,51,55,49,48,43,50,37,44,0,43,49,44,44],
[38,63,55,52,46,58,50,45,45,44,57,0,55,41,54],
[53,55,49,49,52,49,47,47,48,50,51,45,0,50,43],
[49,59,67,61,57,64,54,64,54,45,56,59,50,0,49],
[52,55,57,61,58,66,57,52,52,49,56,46,57,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 175, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,49,46,43,40,51,37,45,57,53,46,44,46,48],
[50,0,48,45,52,51,51,53,46,52,51,43,45,50,44],
[51,52,0,48,52,43,52,39,44,50,56,46,46,49,41],
[54,55,52,0,53,54,54,49,49,53,59,53,54,50,48],
[57,48,48,47,0,48,48,41,44,53,56,51,51,50,45],
[60,49,57,46,52,0,50,49,46,50,54,49,50,56,42],
[49,49,48,46,52,50,0,44,49,61,59,50,46,54,40],
[63,47,61,51,59,51,56,0,52,60,60,60,54,62,47],
[55,54,56,51,56,54,51,48,0,53,57,54,55,56,55],
[43,48,50,47,47,50,39,40,47,0,49,45,45,56,47],
[47,49,44,41,44,46,41,40,43,51,0,43,49,46,43],
[54,57,54,47,49,51,50,40,46,55,57,0,44,55,47],
[56,55,54,46,49,50,54,46,45,55,51,56,0,52,50],
[54,50,51,50,50,44,46,38,44,44,54,45,48,0,39],
[52,56,59,52,55,58,60,53,45,53,57,53,50,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 176, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,46,56,55,55,45,54,52,53,49,47,52,43,53],
[47,0,49,53,53,49,42,51,37,53,45,48,51,45,44],
[54,51,0,55,53,53,46,50,54,48,52,50,58,49,50],
[44,47,45,0,51,48,48,49,41,48,49,46,55,38,50],
[45,47,47,49,0,51,49,49,44,48,48,47,57,43,53],
[45,51,47,52,49,0,46,52,44,50,45,54,54,48,51],
[55,58,54,52,51,54,0,52,48,53,51,53,53,55,52],
[46,49,50,51,51,48,48,0,46,53,51,51,51,47,50],
[48,63,46,59,56,56,52,54,0,54,51,52,60,49,53],
[47,47,52,52,52,50,47,47,46,0,47,51,52,46,53],
[51,55,48,51,52,55,49,49,49,53,0,52,60,52,54],
[53,52,50,54,53,46,47,49,48,49,48,0,54,49,47],
[48,49,42,45,43,46,47,49,40,48,40,46,0,41,44],
[57,55,51,62,57,52,45,53,51,54,48,51,59,0,50],
[47,56,50,50,47,49,48,50,47,47,46,53,56,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 177, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,47,47,45,44,51,53,48,45,59,50,54,44,50],
[47,0,46,45,46,45,45,42,48,39,56,49,43,42,41],
[53,54,0,51,42,46,53,50,51,43,64,55,54,47,49],
[53,55,49,0,49,50,47,49,49,51,54,54,47,46,49],
[55,54,58,51,0,52,53,53,56,53,68,58,57,50,53],
[56,55,54,50,48,0,50,51,46,49,58,51,53,50,49],
[49,55,47,53,47,50,0,49,51,47,59,53,53,49,48],
[47,58,50,51,47,49,51,0,55,45,58,49,50,49,46],
[52,52,49,51,44,54,49,45,0,40,54,52,47,49,42],
[55,61,57,49,47,51,53,55,60,0,58,56,51,49,49],
[41,44,36,46,32,42,41,42,46,42,0,45,41,38,46],
[50,51,45,46,42,49,47,51,48,44,55,0,49,50,41],
[46,57,46,53,43,47,47,50,53,49,59,51,0,42,53],
[56,58,53,54,50,50,51,51,51,51,62,50,58,0,51],
[50,59,51,51,47,51,52,54,58,51,54,59,47,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 178, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,52,51,65,58,42,55,44,58,32,54,47,43,61],
[33,0,39,35,39,54,39,60,47,45,30,29,39,44,41],
[48,61,0,58,67,53,40,69,56,43,50,55,39,47,59],
[49,65,42,0,52,65,50,55,52,56,50,58,40,45,56],
[35,61,33,48,0,52,42,61,43,42,41,54,35,29,55],
[42,46,47,35,48,0,35,43,41,26,34,37,21,43,43],
[58,61,60,50,58,65,0,66,53,57,42,51,54,54,46],
[45,40,31,45,39,57,34,0,45,51,30,38,42,47,43],
[56,53,44,48,57,59,47,55,0,46,48,35,35,51,43],
[42,55,57,44,58,74,43,49,54,0,32,60,43,50,48],
[68,70,50,50,59,66,58,70,52,68,0,58,42,57,54],
[46,71,45,42,46,63,49,62,65,40,42,0,42,57,52],
[53,61,61,60,65,79,46,58,65,57,58,58,0,57,59],
[57,56,53,55,71,57,46,53,49,50,43,43,43,0,60],
[39,59,41,44,45,57,54,57,57,52,46,48,41,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 179, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,55,44,48,33,41,42,31,29,41,48,42,44,39],
[66,0,56,52,57,47,51,54,43,39,63,48,50,50,43],
[45,44,0,50,54,41,45,45,42,40,48,52,45,55,49],
[56,48,50,0,57,37,35,46,45,34,40,49,47,51,36],
[52,43,46,43,0,39,38,35,34,29,44,56,48,48,32],
[67,53,59,63,61,0,44,58,45,47,52,47,52,60,43],
[59,49,55,65,62,56,0,54,43,42,60,61,53,65,51],
[58,46,55,54,65,42,46,0,32,39,55,60,45,57,43],
[69,57,58,55,66,55,57,68,0,43,64,54,49,61,54],
[71,61,60,66,71,53,58,61,57,0,63,56,48,60,58],
[59,37,52,60,56,48,40,45,36,37,0,48,45,48,31],
[52,52,48,51,44,53,39,40,46,44,52,0,48,51,35],
[58,50,55,53,52,48,47,55,51,52,55,52,0,56,42],
[56,50,45,49,52,40,35,43,39,40,52,49,44,0,34],
[61,57,51,64,68,57,49,57,46,42,69,65,58,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 180, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,52,46,49,52,46,43,49,58,51,49,49,55,54],
[51,0,53,51,54,54,46,42,55,54,61,43,55,58,56],
[48,47,0,51,52,56,54,40,55,48,50,55,49,56,56],
[54,49,49,0,55,60,47,45,54,52,56,53,56,61,57],
[51,46,48,45,0,49,45,40,52,54,48,45,48,58,51],
[48,46,44,40,51,0,44,40,47,45,49,45,44,57,49],
[54,54,46,53,55,56,0,45,56,51,54,52,53,60,53],
[57,58,60,55,60,60,55,0,62,62,56,49,58,69,60],
[51,45,45,46,48,53,44,38,0,47,52,47,44,58,51],
[42,46,52,48,46,55,49,38,53,0,42,42,45,54,48],
[49,39,50,44,52,51,46,44,48,58,0,48,46,61,48],
[51,57,45,47,55,55,48,51,53,58,52,0,46,65,52],
[51,45,51,44,52,56,47,42,56,55,54,54,0,57,59],
[45,42,44,39,42,43,40,31,42,46,39,35,43,0,36],
[46,44,44,43,49,51,47,40,49,52,52,48,41,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 181, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,51,55,54,54,59,51,57,49,47,51,55,52,46],
[40,0,37,42,46,43,49,47,45,43,48,47,39,46,39],
[49,63,0,55,55,51,60,58,55,55,50,58,50,59,46],
[45,58,45,0,51,50,56,55,48,49,48,55,50,43,41],
[46,54,45,49,0,51,51,56,49,38,50,42,41,45,37],
[46,57,49,50,49,0,58,56,49,52,47,48,48,50,47],
[41,51,40,44,49,42,0,58,48,45,46,54,40,46,42],
[49,53,42,45,44,44,42,0,50,40,43,47,44,48,40],
[43,55,45,52,51,51,52,50,0,49,47,55,47,49,43],
[51,57,45,51,62,48,55,60,51,0,54,53,48,58,47],
[53,52,50,52,50,53,54,57,53,46,0,51,45,50,44],
[49,53,42,45,58,52,46,53,45,47,49,0,38,49,42],
[45,61,50,50,59,52,60,56,53,52,55,62,0,59,50],
[48,54,41,57,55,50,54,52,51,42,50,51,41,0,35],
[54,61,54,59,63,53,58,60,57,53,56,58,50,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 182, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,46,44,52,40,56,42,54,53,42,48,48,47,56],
[47,0,46,48,52,45,57,41,53,53,44,44,47,48,50],
[54,54,0,56,55,51,58,42,52,55,49,49,53,49,50],
[56,52,44,0,54,41,58,49,51,53,44,46,46,44,47],
[48,48,45,46,0,41,52,44,56,54,47,55,45,49,47],
[60,55,49,59,59,0,65,50,60,50,50,54,52,47,62],
[44,43,42,42,48,35,0,33,52,47,38,54,39,48,45],
[58,59,58,51,56,50,67,0,62,65,53,61,55,57,55],
[46,47,48,49,44,40,48,38,0,47,38,50,40,50,50],
[47,47,45,47,46,50,53,35,53,0,44,47,46,42,43],
[58,56,51,56,53,50,62,47,62,56,0,54,56,50,57],
[52,56,51,54,45,46,46,39,50,53,46,0,48,50,57],
[52,53,47,54,55,48,61,45,60,54,44,52,0,45,53],
[53,52,51,56,51,53,52,43,50,58,50,50,55,0,52],
[44,50,50,53,53,38,55,45,50,57,43,43,47,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 183, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,50,57,52,68,52,64,62,52,71,55,68,59,54],
[43,0,45,53,41,54,38,54,43,45,57,43,53,39,48],
[50,55,0,56,48,59,49,57,46,50,53,43,46,45,55],
[43,47,44,0,47,47,58,55,62,42,67,40,50,50,51],
[48,59,52,53,0,50,61,59,52,46,56,47,49,49,53],
[32,46,41,53,50,0,53,56,54,47,54,48,48,48,41],
[48,62,51,42,39,47,0,51,58,54,59,36,49,38,52],
[36,46,43,45,41,44,49,0,42,47,46,31,46,53,57],
[38,57,54,38,48,46,42,58,0,44,49,47,47,50,47],
[48,55,50,58,54,53,46,53,56,0,64,45,54,55,60],
[29,43,47,33,44,46,41,54,51,36,0,30,48,48,35],
[45,57,57,60,53,52,64,69,53,55,70,0,58,57,56],
[32,47,54,50,51,52,51,54,53,46,52,42,0,46,54],
[41,61,55,50,51,52,62,47,50,45,52,43,54,0,51],
[46,52,45,49,47,59,48,43,53,40,65,44,46,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 184, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,53,56,59,56,59,54,65,47,68,54,48,48,56],
[49,0,47,47,44,46,40,45,54,42,55,35,54,37,36],
[47,53,0,53,53,45,43,46,53,44,45,47,56,47,40],
[44,53,47,0,53,44,35,41,56,41,48,45,55,34,37],
[41,56,47,47,0,43,38,44,64,39,49,46,48,40,50],
[44,54,55,56,57,0,36,45,57,48,52,49,56,53,48],
[41,60,57,65,62,64,0,61,66,43,67,47,62,46,51],
[46,55,54,59,56,55,39,0,57,46,60,57,52,54,43],
[35,46,47,44,36,43,34,43,0,40,45,31,36,28,40],
[53,58,56,59,61,52,57,54,60,0,60,56,54,40,49],
[32,45,55,52,51,48,33,40,55,40,0,49,44,46,37],
[46,65,53,55,54,51,53,43,69,44,51,0,54,39,43],
[52,46,44,45,52,44,38,48,64,46,56,46,0,44,46],
[52,63,53,66,60,47,54,46,72,60,54,61,56,0,53],
[44,64,60,63,50,52,49,57,60,51,63,57,54,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 185, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,62,54,52,39,54,54,47,36,50,50,48,33,44],
[36,0,45,41,36,41,31,45,38,31,27,41,19,29,40],
[38,55,0,51,42,36,40,38,41,39,35,42,28,45,55],
[46,59,49,0,33,42,47,37,34,31,35,54,37,43,43],
[48,64,58,67,0,43,47,51,44,34,48,66,45,42,53],
[61,59,64,58,57,0,45,56,50,42,35,50,39,35,47],
[46,69,60,53,53,55,0,63,54,39,37,73,53,34,44],
[46,55,62,63,49,44,37,0,46,33,41,56,49,28,46],
[53,62,59,66,56,50,46,54,0,48,61,63,57,50,52],
[64,69,61,69,66,58,61,67,52,0,41,68,51,61,67],
[50,73,65,65,52,65,63,59,39,59,0,49,43,53,60],
[50,59,58,46,34,50,27,44,37,32,51,0,42,36,49],
[52,81,72,63,55,61,47,51,43,49,57,58,0,43,65],
[67,71,55,57,58,65,66,72,50,39,47,64,57,0,38],
[56,60,45,57,47,53,56,54,48,33,40,51,35,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 186, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,55,57,49,66,50,59,55,47,52,49,57,53,55],
[40,0,52,51,46,55,48,43,47,50,53,48,51,48,51],
[45,48,0,47,45,47,41,52,39,38,47,44,55,44,48],
[43,49,53,0,48,53,44,61,45,47,48,46,53,53,47],
[51,54,55,52,0,62,60,54,50,50,48,55,64,56,52],
[34,45,53,47,38,0,47,57,40,36,52,49,52,55,46],
[50,52,59,56,40,53,0,58,50,49,49,52,51,43,53],
[41,57,48,39,46,43,42,0,46,37,47,45,55,36,48],
[45,53,61,55,50,60,50,54,0,41,46,48,48,48,61],
[53,50,62,53,50,64,51,63,59,0,55,54,64,60,59],
[48,47,53,52,52,48,51,53,54,45,0,47,53,46,53],
[51,52,56,54,45,51,48,55,52,46,53,0,58,57,55],
[43,49,45,47,36,48,49,45,52,36,47,42,0,42,49],
[47,52,56,47,44,45,57,64,52,40,54,43,58,0,55],
[45,49,52,53,48,54,47,52,39,41,47,45,51,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 187, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,66,53,58,59,49,44,52,45,64,50,48,68,52],
[24,0,43,48,40,26,27,26,23,30,50,42,38,37,41],
[34,57,0,49,41,23,25,33,33,29,42,43,42,24,38],
[47,52,51,0,52,45,43,40,40,53,57,43,37,59,46],
[42,60,59,48,0,53,50,35,36,44,80,35,45,53,51],
[41,74,77,55,47,0,32,43,31,54,61,41,52,50,59],
[51,73,75,57,50,68,0,46,48,63,72,58,53,58,67],
[56,74,67,60,65,57,54,0,54,55,62,49,70,58,57],
[48,77,67,60,64,69,52,46,0,50,69,51,45,60,58],
[55,70,71,47,56,46,37,45,50,0,67,46,61,59,58],
[36,50,58,43,20,39,28,38,31,33,0,46,33,45,32],
[50,58,57,57,65,59,42,51,49,54,54,0,60,57,51],
[52,62,58,63,55,48,47,30,55,39,67,40,0,55,63],
[32,63,76,41,47,50,42,42,40,41,55,43,45,0,43],
[48,59,62,54,49,41,33,43,42,42,68,49,37,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 188, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,49,47,52,51,52,49,50,44,54,45,50,52,48],
[45,0,55,52,44,53,47,42,51,43,47,45,52,40,42],
[51,45,0,57,48,52,54,43,51,46,55,48,50,49,44],
[53,48,43,0,44,50,51,42,46,38,49,48,51,43,48],
[48,56,52,56,0,45,48,50,59,42,51,47,52,52,46],
[49,47,48,50,55,0,47,49,51,48,46,50,55,47,41],
[48,53,46,49,52,53,0,51,49,44,45,51,48,52,44],
[51,58,57,58,50,51,49,0,53,49,54,50,57,44,48],
[50,49,49,54,41,49,51,47,0,45,50,44,50,44,45],
[56,57,54,62,58,52,56,51,55,0,61,56,58,55,49],
[46,53,45,51,49,54,55,46,50,39,0,50,52,44,42],
[55,55,52,52,53,50,49,50,56,44,50,0,52,48,48],
[50,48,50,49,48,45,52,43,50,42,48,48,0,51,45],
[48,60,51,57,48,53,48,56,56,45,56,52,49,0,50],
[52,58,56,52,54,59,56,52,55,51,58,52,55,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 189, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,59,47,45,47,42,59,59,56,47,48,56,48,47],
[49,0,54,50,52,49,45,53,49,49,46,53,48,46,43],
[41,46,0,41,47,44,44,50,44,47,44,48,51,46,37],
[53,50,59,0,48,48,46,62,51,51,47,53,52,47,44],
[55,48,53,52,0,39,52,57,54,53,47,50,50,50,44],
[53,51,56,52,61,0,55,60,53,50,52,55,53,46,48],
[58,55,56,54,48,45,0,63,53,53,53,59,57,48,52],
[41,47,50,38,43,40,37,0,45,53,43,42,43,45,42],
[41,51,56,49,46,47,47,55,0,49,43,43,48,45,42],
[44,51,53,49,47,50,47,47,51,0,48,46,49,38,49],
[53,54,56,53,53,48,47,57,57,52,0,54,49,40,46],
[52,47,52,47,50,45,41,58,57,54,46,0,48,47,46],
[44,52,49,48,50,47,43,57,52,51,51,52,0,47,44],
[52,54,54,53,50,54,52,55,55,62,60,53,53,0,52],
[53,57,63,56,56,52,48,58,58,51,54,54,56,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 190, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,36,45,56,50,53,42,52,33,44,43,55,45,45],
[56,0,41,45,50,48,58,40,43,35,39,43,35,54,44],
[64,59,0,50,48,55,57,51,60,49,53,49,57,57,63],
[55,55,50,0,47,45,66,53,48,49,50,50,48,57,53],
[44,50,52,53,0,54,57,50,48,47,48,59,51,53,56],
[50,52,45,55,46,0,62,43,49,54,42,47,56,47,55],
[47,42,43,34,43,38,0,37,47,36,40,44,38,36,38],
[58,60,49,47,50,57,63,0,52,50,67,59,60,58,60],
[48,57,40,52,52,51,53,48,0,50,48,46,48,47,62],
[67,65,51,51,53,46,64,50,50,0,61,49,56,58,55],
[56,61,47,50,52,58,60,33,52,39,0,45,46,59,51],
[57,57,51,50,41,53,56,41,54,51,55,0,55,55,60],
[45,65,43,52,49,44,62,40,52,44,54,45,0,54,41],
[55,46,43,43,47,53,64,42,53,42,41,45,46,0,50],
[55,56,37,47,44,45,62,40,38,45,49,40,59,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 191, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,56,58,50,47,63,55,42,59,45,37,56,40,64],
[63,0,46,55,50,45,48,60,51,70,48,53,61,50,62],
[44,54,0,63,60,69,48,61,60,63,34,45,59,44,64],
[42,45,37,0,39,50,49,54,51,49,21,38,61,36,55],
[50,50,40,61,0,58,44,65,54,66,41,57,58,42,53],
[53,55,31,50,42,0,35,72,59,64,26,53,52,44,54],
[37,52,52,51,56,65,0,68,50,38,21,44,57,35,54],
[45,40,39,46,35,28,32,0,40,38,27,35,50,35,46],
[58,49,40,49,46,41,50,60,0,66,35,33,42,24,52],
[41,30,37,51,34,36,62,62,34,0,25,31,55,29,60],
[55,52,66,79,59,74,79,73,65,75,0,53,58,49,60],
[63,47,55,62,43,47,56,65,67,69,47,0,57,44,62],
[44,39,41,39,42,48,43,50,58,45,42,43,0,29,62],
[60,50,56,64,58,56,65,65,76,71,51,56,71,0,49],
[36,38,36,45,47,46,46,54,48,40,40,38,38,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 192, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,52,56,69,64,50,58,59,51,59,54,48,66,49],
[54,0,55,55,49,48,47,46,53,53,51,52,49,60,42],
[48,45,0,48,51,48,47,51,49,44,42,50,53,55,57],
[44,45,52,0,39,39,46,46,53,44,50,48,46,62,49],
[31,51,49,61,0,46,52,53,37,43,48,46,53,56,50],
[36,52,52,61,54,0,50,54,53,47,63,54,65,65,54],
[50,53,53,54,48,50,0,71,63,46,44,53,56,57,61],
[42,54,49,54,47,46,29,0,37,38,50,37,47,55,44],
[41,47,51,47,63,47,37,63,0,42,47,39,51,52,45],
[49,47,56,56,57,53,54,62,58,0,48,55,63,62,48],
[41,49,58,50,52,37,56,50,53,52,0,59,47,52,43],
[46,48,50,52,54,46,47,63,61,45,41,0,57,61,49],
[52,51,47,54,47,35,44,53,49,37,53,43,0,48,46],
[34,40,45,38,44,35,43,45,48,38,48,39,52,0,49],
[51,58,43,51,50,46,39,56,55,52,57,51,54,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 193, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,42,41,46,45,51,39,56,46,41,43,48,42,41],
[65,0,56,49,53,49,57,45,61,57,46,56,50,48,48],
[58,44,0,55,50,48,52,48,52,50,45,56,48,43,49],
[59,51,45,0,47,47,53,48,63,59,48,55,47,47,51],
[54,47,50,53,0,48,63,54,62,52,45,49,53,52,49],
[55,51,52,53,52,0,62,49,64,56,54,59,59,49,47],
[49,43,48,47,37,38,0,33,45,45,43,49,42,39,37],
[61,55,52,52,46,51,67,0,64,60,52,55,60,55,57],
[44,39,48,37,38,36,55,36,0,43,42,47,42,42,43],
[54,43,50,41,48,44,55,40,57,0,44,44,52,46,51],
[59,54,55,52,55,46,57,48,58,56,0,53,56,55,52],
[57,44,44,45,51,41,51,45,53,56,47,0,45,49,45],
[52,50,52,53,47,41,58,40,58,48,44,55,0,42,47],
[58,52,57,53,48,51,61,45,58,54,45,51,58,0,47],
[59,52,51,49,51,53,63,43,57,49,48,55,53,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 194, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,75,50,49,50,62,61,60,67,74,61,54,68,62],
[29,0,72,62,61,51,66,52,58,52,53,53,47,68,66],
[25,28,0,34,41,48,28,34,39,38,39,32,34,36,47],
[50,38,66,0,43,54,58,59,61,51,50,52,40,64,67],
[51,39,59,57,0,45,46,56,52,49,53,54,36,46,55],
[50,49,52,46,55,0,40,49,64,59,54,40,30,44,58],
[38,34,72,42,54,60,0,33,55,53,53,46,37,44,58],
[39,48,66,41,44,51,67,0,58,56,53,49,40,63,49],
[40,42,61,39,48,36,45,42,0,43,50,45,28,44,57],
[33,48,62,49,51,41,47,44,57,0,59,51,36,66,60],
[26,47,61,50,47,46,47,47,50,41,0,52,43,38,47],
[39,47,68,48,46,60,54,51,55,49,48,0,39,70,64],
[46,53,66,60,64,70,63,60,72,64,57,61,0,69,75],
[32,32,64,36,54,56,56,37,56,34,62,30,31,0,51],
[38,34,53,33,45,42,42,51,43,40,53,36,25,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 195, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,61,70,52,59,50,54,53,59,52,63,59,52,52],
[45,0,48,61,52,45,53,50,46,46,55,49,51,54,51],
[39,52,0,63,42,54,47,52,46,51,45,48,53,49,54],
[30,39,37,0,36,41,41,47,40,42,38,48,43,44,42],
[48,48,58,64,0,55,50,53,48,51,54,53,59,56,45],
[41,55,46,59,45,0,45,50,45,49,44,43,43,51,47],
[50,47,53,59,50,55,0,44,49,45,47,49,49,52,48],
[46,50,48,53,47,50,56,0,49,54,36,48,52,52,45],
[47,54,54,60,52,55,51,51,0,53,45,56,51,52,53],
[41,54,49,58,49,51,55,46,47,0,46,55,49,53,44],
[48,45,55,62,46,56,53,64,55,54,0,53,52,56,60],
[37,51,52,52,47,57,51,52,44,45,47,0,50,45,50],
[41,49,47,57,41,57,51,48,49,51,48,50,0,51,49],
[48,46,51,56,44,49,48,48,48,47,44,55,49,0,51],
[48,49,46,58,55,53,52,55,47,56,40,50,51,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 196, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,56,66,65,44,51,67,39,62,51,61,44,60,59],
[41,0,44,45,52,44,48,64,31,57,56,64,62,50,57],
[44,56,0,32,47,70,50,51,55,54,59,54,37,53,55],
[34,55,68,0,54,63,46,59,45,50,58,70,62,60,56],
[35,48,53,46,0,48,38,59,49,59,39,63,52,47,52],
[56,56,30,37,52,0,37,51,52,45,41,56,59,34,43],
[49,52,50,54,62,63,0,59,49,52,56,63,51,49,77],
[33,36,49,41,41,49,41,0,30,42,52,51,43,45,47],
[61,69,45,55,51,48,51,70,0,56,74,65,61,46,70],
[38,43,46,50,41,55,48,58,44,0,51,44,47,49,49],
[49,44,41,42,61,59,44,48,26,49,0,46,39,46,44],
[39,36,46,30,37,44,37,49,35,56,54,0,43,51,43],
[56,38,63,38,48,41,49,57,39,53,61,57,0,52,55],
[40,50,47,40,53,66,51,55,54,51,54,49,48,0,63],
[41,43,45,44,48,57,23,53,30,51,56,57,45,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 197, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,43,56,64,58,58,58,51,52,52,53,47,45,59],
[54,0,54,48,60,54,57,56,51,59,53,53,47,52,63],
[57,46,0,50,56,61,54,51,48,55,51,59,50,54,63],
[44,52,50,0,58,48,50,51,46,54,45,52,41,55,62],
[36,40,44,42,0,46,49,47,49,45,39,49,45,45,53],
[42,46,39,52,54,0,55,55,38,47,47,41,46,57,61],
[42,43,46,50,51,45,0,47,52,46,49,53,42,44,55],
[42,44,49,49,53,45,53,0,44,53,57,56,47,44,59],
[49,49,52,54,51,62,48,56,0,56,52,49,43,50,60],
[48,41,45,46,55,53,54,47,44,0,54,55,41,41,51],
[48,47,49,55,61,53,51,43,48,46,0,53,48,48,57],
[47,47,41,48,51,59,47,44,51,45,47,0,57,40,60],
[53,53,50,59,55,54,58,53,57,59,52,43,0,52,62],
[55,48,46,45,55,43,56,56,50,59,52,60,48,0,55],
[41,37,37,38,47,39,45,41,40,49,43,40,38,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 198, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,66,66,62,62,49,76,66,64,67,75,67,74,68],
[18,0,23,39,24,32,41,33,29,39,28,33,27,50,35],
[34,77,0,60,47,47,46,69,63,49,65,59,58,61,62],
[34,61,40,0,46,51,45,54,48,58,60,62,44,61,48],
[38,76,53,54,0,68,49,67,49,50,60,59,57,62,52],
[38,68,53,49,32,0,53,69,70,59,53,67,51,61,63],
[51,59,54,55,51,47,0,63,63,47,60,51,56,70,54],
[24,67,31,46,33,31,37,0,38,39,44,33,36,60,46],
[34,71,37,52,51,30,37,62,0,45,49,67,44,64,50],
[36,61,51,42,50,41,53,61,55,0,61,57,49,74,58],
[33,72,35,40,40,47,40,56,51,39,0,52,46,51,43],
[25,67,41,38,41,33,49,67,33,43,48,0,37,51,60],
[33,73,42,56,43,49,44,64,56,51,54,63,0,73,48],
[26,50,39,39,38,39,30,40,36,26,49,49,27,0,30],
[32,65,38,52,48,37,46,54,50,42,57,40,52,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 199, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,46,50,45,53,54,51,53,46,44,56,47,49,53],
[48,0,53,44,47,48,56,48,50,53,48,55,50,47,45],
[54,47,0,47,46,50,56,51,54,50,55,58,50,54,48],
[50,56,53,0,48,48,54,53,58,45,54,52,49,49,51],
[55,53,54,52,0,56,54,51,57,45,49,62,53,48,58],
[47,52,50,52,44,0,52,53,49,43,48,57,45,51,49],
[46,44,44,46,46,48,0,44,48,43,43,55,53,41,50],
[49,52,49,47,49,47,56,0,53,41,45,54,52,53,48],
[47,50,46,42,43,51,52,47,0,46,48,50,46,46,46],
[54,47,50,55,55,57,57,59,54,0,53,63,55,57,57],
[56,52,45,46,51,52,57,55,52,47,0,54,51,46,48],
[44,45,42,48,38,43,45,46,50,37,46,0,42,40,41],
[53,50,50,51,47,55,47,48,54,45,49,58,0,44,54],
[51,53,46,51,52,49,59,47,54,43,54,60,56,0,50],
[47,55,52,49,42,51,50,52,54,43,52,59,46,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 100, 200, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebbrcw/mebbrcw_15_100.csv", index=False, header=False)

import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg

rep = 1
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,1008,985,934,955,947,946,1060,937,1008,1040,954,877],
[992,0,952,963,953,1000,974,1045,938,917,1033,978,908],
[1015,1048,0,982,987,1008,989,1071,955,979,1012,1005,967],
[1066,1037,1018,0,1059,992,1097,1089,1040,979,1081,988,984],
[1045,1047,1013,941,0,968,991,1078,998,917,1101,954,985],
[1053,1000,992,1008,1032,0,994,1099,1052,956,1099,1035,975],
[1054,1026,1011,903,1009,1006,0,1036,918,1022,1081,1012,989],
[940,955,929,911,922,901,964,0,941,888,1033,942,921],
[1063,1062,1045,960,1002,948,1082,1059,0,953,1120,999,992],
[992,1083,1021,1021,1083,1044,978,1112,1047,0,1125,1050,1032],
[960,967,988,919,899,901,919,967,880,875,0,889,853],
[1046,1022,995,1012,1046,965,988,1058,1001,950,1111,0,1011],
[1123,1092,1033,1016,1015,1025,1011,1079,1008,968,1147,989,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 1, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1013,970,987,1004,1019,999,965,1040,990,1052,1003,959],
[987,0,998,992,981,1006,953,1025,983,986,1015,982,961],
[1030,1002,0,981,993,1054,1035,988,1005,1006,1033,974,984],
[1013,1008,1019,0,1024,1020,986,971,1019,1009,1049,999,993],
[996,1019,1007,976,0,1032,1016,1001,946,986,1021,975,960],
[981,994,946,980,968,0,962,983,985,949,1010,986,954],
[1001,1047,965,1014,984,1038,0,985,1030,1004,1060,1000,1001],
[1035,975,1012,1029,999,1017,1015,0,1032,1003,1056,972,980],
[960,1017,995,981,1054,1015,970,968,0,982,1030,984,982],
[1010,1014,994,991,1014,1051,996,997,1018,0,1084,1011,974],
[948,985,967,951,979,990,940,944,970,916,0,987,943],
[997,1018,1026,1001,1025,1014,1000,1028,1016,989,1013,0,994],
[1041,1039,1016,1007,1040,1046,999,1020,1018,1026,1057,1006,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 2, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,930,953,956,1002,974,950,985,974,953,970,970,974],
[1070,0,994,998,1028,1046,1016,999,1027,1016,1026,1027,1050],
[1047,1006,0,1005,1044,1044,982,1014,1001,1026,992,1025,1050],
[1044,1002,995,0,1042,1030,964,1029,1005,996,991,1006,1046],
[998,972,956,958,0,993,950,980,994,980,983,988,1011],
[1026,954,956,970,1007,0,960,956,972,976,1004,993,1013],
[1050,984,1018,1036,1050,1040,0,1028,1041,1033,999,998,1037],
[1015,1001,986,971,1020,1044,972,0,1005,965,983,971,1022],
[1026,973,999,995,1006,1028,959,995,0,989,966,991,1045],
[1047,984,974,1004,1020,1024,967,1035,1011,0,978,1027,1043],
[1030,974,1008,1009,1017,996,1001,1017,1034,1022,0,1005,1037],
[1030,973,975,994,1012,1007,1002,1029,1009,973,995,0,1061],
[1026,950,950,954,989,987,963,978,955,957,963,939,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 3, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1070,1024,1061,985,1043,1026,1027,989,1062,1035,963,1036],
[930,0,986,977,941,979,1011,985,971,1030,919,945,962],
[976,1014,0,983,937,1071,953,987,933,999,973,942,1040],
[939,1023,1017,0,949,1070,1027,930,985,986,1022,999,987],
[1015,1059,1063,1051,0,1100,1082,1015,1000,1129,1063,1070,1092],
[957,1021,929,930,900,0,979,966,881,1042,1004,923,1001],
[974,989,1047,973,918,1021,0,1043,912,1055,962,958,1058],
[973,1015,1013,1070,985,1034,957,0,936,1028,977,950,1033],
[1011,1029,1067,1015,1000,1119,1088,1064,0,1049,1016,1005,1024],
[938,970,1001,1014,871,958,945,972,951,0,955,918,1023],
[965,1081,1027,978,937,996,1038,1023,984,1045,0,963,1026],
[1037,1055,1058,1001,930,1077,1042,1050,995,1082,1037,0,1023],
[964,1038,960,1013,908,999,942,967,976,977,974,977,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 4, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,981,969,1106,977,1035,1011,916,1031,1005,988,1029,930],
[1019,0,968,1117,981,993,990,931,1029,968,1052,963,948],
[1031,1032,0,1072,980,962,1013,970,1036,987,1011,957,1000],
[894,883,928,0,935,879,899,860,949,916,989,886,869],
[1023,1019,1020,1065,0,983,1021,940,998,1015,993,999,960],
[965,1007,1038,1121,1017,0,1038,970,1059,1009,1076,1008,1062],
[989,1010,987,1101,979,962,0,1014,1110,1024,1068,963,1027],
[1084,1069,1030,1140,1060,1030,986,0,1002,1106,1075,1069,1043],
[969,971,964,1051,1002,941,890,998,0,947,998,942,953],
[995,1032,1013,1084,985,991,976,894,1053,0,1023,953,994],
[1012,948,989,1011,1007,924,932,925,1002,977,0,922,964],
[971,1037,1043,1114,1001,992,1037,931,1058,1047,1078,0,984],
[1070,1052,1000,1131,1040,938,973,957,1047,1006,1036,1016,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 5, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,986,1007,984,1000,1000,991,979,986,970,1014,986,987],
[1014,0,1006,977,1006,1004,1017,966,986,1026,1013,978,1002],
[993,994,0,979,1023,1007,1004,1002,977,1033,1005,988,1004],
[1016,1023,1021,0,1018,1028,996,1010,983,1006,1011,986,1038],
[1000,994,977,982,0,983,955,993,954,974,1004,970,982],
[1000,996,993,972,1017,0,1008,988,969,986,992,978,1020],
[1009,983,996,1004,1045,992,0,1020,963,977,1033,989,1015],
[1021,1034,998,990,1007,1012,980,0,1002,1003,1014,1018,1004],
[1014,1014,1023,1017,1046,1031,1037,998,0,1014,1006,1007,1013],
[1030,974,967,994,1026,1014,1023,997,986,0,1021,975,997],
[986,987,995,989,996,1008,967,986,994,979,0,975,989],
[1014,1022,1012,1014,1030,1022,1011,982,993,1025,1025,0,1017],
[1013,998,996,962,1018,980,985,996,987,1003,1011,983,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 6, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1034,1050,1042,1046,1045,1005,1116,1014,1050,1017,992,1116],
[966,0,1008,1014,987,946,994,1030,1010,1047,974,976,1013],
[950,992,0,1015,961,953,1015,1001,921,1031,1016,965,1022],
[958,986,985,0,966,949,1002,1052,959,1003,918,988,1093],
[954,1013,1039,1034,0,998,1044,1036,973,991,955,953,1067],
[955,1054,1047,1051,1002,0,1008,1087,979,1056,1009,1018,1078],
[995,1006,985,998,956,992,0,1030,949,1004,910,916,1026],
[884,970,999,948,964,913,970,0,903,993,897,928,992],
[986,990,1079,1041,1027,1021,1051,1097,0,1031,967,1010,1082],
[950,953,969,997,1009,944,996,1007,969,0,879,941,1029],
[983,1026,984,1082,1045,991,1090,1103,1033,1121,0,1012,1119],
[1008,1024,1035,1012,1047,982,1084,1072,990,1059,988,0,1079],
[884,987,978,907,933,922,974,1008,918,971,881,921,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 7, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,967,991,974,969,963,993,965,980,968,988,970,979],
[1033,0,995,1022,992,1024,1063,1037,1002,1024,1044,1005,992],
[1009,1005,0,984,968,1013,1025,984,952,1003,992,964,1021],
[1026,978,1016,0,968,1012,1009,1001,966,978,1007,963,1015],
[1031,1008,1032,1032,0,1031,1057,1043,1015,1017,1037,1001,993],
[1037,976,987,988,969,0,1001,976,958,974,1004,946,969],
[1007,937,975,991,943,999,0,982,933,958,999,944,953],
[1035,963,1016,999,957,1024,1018,0,957,968,1014,970,960],
[1020,998,1048,1034,985,1042,1067,1043,0,995,1040,1005,1009],
[1032,976,997,1022,983,1026,1042,1032,1005,0,1000,967,1004],
[1012,956,1008,993,963,996,1001,986,960,1000,0,958,1012],
[1030,995,1036,1037,999,1054,1056,1030,995,1033,1042,0,1012],
[1021,1008,979,985,1007,1031,1047,1040,991,996,988,988,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 8, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,917,933,925,952,960,876,927,880,934,889,928,912],
[1083,0,1023,983,1036,972,919,1005,1036,1087,945,981,986],
[1067,977,0,986,1017,1004,959,962,976,1020,950,1001,965],
[1075,1017,1014,0,1031,1017,988,1011,1001,1065,924,1031,985],
[1048,964,983,969,0,958,972,973,950,988,941,968,931],
[1040,1028,996,983,1042,0,955,989,931,1032,989,972,988],
[1124,1081,1041,1012,1028,1045,0,1063,1027,1033,982,1019,1030],
[1073,995,1038,989,1027,1011,937,0,965,972,969,1003,983],
[1120,964,1024,999,1050,1069,973,1035,0,1059,1006,1041,1049],
[1066,913,980,935,1012,968,967,1028,941,0,953,1015,995],
[1111,1055,1050,1076,1059,1011,1018,1031,994,1047,0,1017,977],
[1072,1019,999,969,1032,1028,981,997,959,985,983,0,955],
[1088,1014,1035,1015,1069,1012,970,1017,951,1005,1023,1045,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 9, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,878,989,914,1011,910,961,907,985,886,864,858,991],
[1122,0,1084,1035,1060,1015,1076,993,1125,1106,1029,980,1073],
[1011,916,0,1030,995,942,989,997,1017,947,918,937,997],
[1086,965,970,0,1012,960,1050,968,1003,977,908,995,976],
[989,940,1005,988,0,937,992,953,1025,961,880,969,1032],
[1090,985,1058,1040,1063,0,987,964,1002,934,962,962,1041],
[1039,924,1011,950,1008,1013,0,895,966,964,919,1003,1008],
[1093,1007,1003,1032,1047,1036,1105,0,1085,1014,998,980,1081],
[1015,875,983,997,975,998,1034,915,0,937,864,976,984],
[1114,894,1053,1023,1039,1066,1036,986,1063,0,912,990,1078],
[1136,971,1082,1092,1120,1038,1081,1002,1136,1088,0,966,1128],
[1142,1020,1063,1005,1031,1038,997,1020,1024,1010,1034,0,997],
[1009,927,1003,1024,968,959,992,919,1016,922,872,1003,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 10, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1002,1067,1022,1069,1062,1094,1048,1110,948,1108,1038,1052],
[998,0,1075,1072,1019,1056,1079,988,1063,1008,1043,1013,1069],
[933,925,0,973,974,1017,995,950,1031,922,984,973,1012],
[978,928,1027,0,1014,1014,1036,949,1019,956,1047,1039,1017],
[931,981,1026,986,0,953,1030,965,1046,899,1011,977,1048],
[938,944,983,986,1047,0,1020,964,1011,969,982,990,1026],
[906,921,1005,964,970,980,0,918,1050,902,989,946,1012],
[952,1012,1050,1051,1035,1036,1082,0,1077,956,1063,1077,1033],
[890,937,969,981,954,989,950,923,0,863,996,981,954],
[1052,992,1078,1044,1101,1031,1098,1044,1137,0,1064,1039,1092],
[892,957,1016,953,989,1018,1011,937,1004,936,0,953,997],
[962,987,1027,961,1023,1010,1054,923,1019,961,1047,0,1027],
[948,931,988,983,952,974,988,967,1046,908,1003,973,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 11, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1028,1014,1009,976,1009,1011,963,945,971,987,1030,985],
[972,0,1007,1006,1001,1025,950,964,1008,1007,1010,990,1039],
[986,993,0,1007,997,1019,974,987,1001,972,964,1003,996],
[991,994,993,0,998,1008,962,959,999,955,965,976,981],
[1024,999,1003,1002,0,1015,959,989,1021,994,1004,1030,930],
[991,975,981,992,985,0,984,971,1006,960,999,997,960],
[989,1050,1026,1038,1041,1016,0,1001,997,973,1053,1064,1039],
[1037,1036,1013,1041,1011,1029,999,0,979,1020,970,1001,992],
[1055,992,999,1001,979,994,1003,1021,0,969,989,972,967],
[1029,993,1028,1045,1006,1040,1027,980,1031,0,1024,1037,1014],
[1013,990,1036,1035,996,1001,947,1030,1011,976,0,1017,989],
[970,1010,997,1024,970,1003,936,999,1028,963,983,0,977],
[1015,961,1004,1019,1070,1040,961,1008,1033,986,1011,1023,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 12, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1006,1014,1030,1000,977,964,1014,967,973,988,969,995],
[994,0,1026,995,1025,940,1038,1012,977,1018,987,1014,1015],
[986,974,0,956,993,971,992,1005,951,961,937,978,1007],
[970,1005,1044,0,1002,936,1012,1024,951,945,991,942,1011],
[1000,975,1007,998,0,966,1020,995,960,1007,1009,982,1017],
[1023,1060,1029,1064,1034,0,1001,1047,1017,1014,998,1002,1039],
[1036,962,1008,988,980,999,0,1000,976,964,992,987,971],
[986,988,995,976,1005,953,1000,0,931,971,940,953,963],
[1033,1023,1049,1049,1040,983,1024,1069,0,1044,1034,1028,1058],
[1027,982,1039,1055,993,986,1036,1029,956,0,1005,994,988],
[1012,1013,1063,1009,991,1002,1008,1060,966,995,0,992,1026],
[1031,986,1022,1058,1018,998,1013,1047,972,1006,1008,0,1045],
[1005,985,993,989,983,961,1029,1037,942,1012,974,955,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 13, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1006,969,883,1056,989,919,961,947,1002,1072,941,981],
[994,0,1007,986,1045,1100,782,957,1022,884,1017,979,930],
[1031,993,0,1080,1118,1109,914,1047,1034,916,1185,949,985],
[1117,1014,920,0,1108,1091,943,998,1029,1019,1104,1013,1040],
[944,955,882,892,0,932,917,962,1049,856,1062,894,898],
[1011,900,891,909,1068,0,887,963,900,819,1048,903,928],
[1081,1218,1086,1057,1083,1113,0,1054,1031,976,1158,1005,1022],
[1039,1043,953,1002,1038,1037,946,0,1045,883,1088,953,1004],
[1053,978,966,971,951,1100,969,955,0,887,1097,991,972],
[998,1116,1084,981,1144,1181,1024,1117,1113,0,1127,1064,1087],
[928,983,815,896,938,952,842,912,903,873,0,877,920],
[1059,1021,1051,987,1106,1097,995,1047,1009,936,1123,0,981],
[1019,1070,1015,960,1102,1072,978,996,1028,913,1080,1019,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 14, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,978,952,985,955,976,977,1022,1025,1027,1020,1010,992],
[1022,0,944,982,984,968,997,1017,1040,981,1000,986,955],
[1048,1056,0,973,974,1035,1028,1107,1046,1049,1065,1006,999],
[1015,1018,1027,0,964,1010,1031,1073,1034,1026,1005,1057,1043],
[1045,1016,1026,1036,0,1044,1007,1044,1049,1026,1070,1010,980],
[1024,1032,965,990,956,0,978,1046,1008,1036,1033,1013,967],
[1023,1003,972,969,993,1022,0,1071,1026,1006,1002,1024,997],
[978,983,893,927,956,954,929,0,963,965,953,975,951],
[975,960,954,966,951,992,974,1037,0,991,978,997,980],
[973,1019,951,974,974,964,994,1035,1009,0,1008,999,985],
[980,1000,935,995,930,967,998,1047,1022,992,0,991,985],
[990,1014,994,943,990,987,976,1025,1003,1001,1009,0,984],
[1008,1045,1001,957,1020,1033,1003,1049,1020,1015,1015,1016,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 15, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1068,825,855,913,1023,974,933,998,933,967,950,1022],
[932,0,1005,889,1008,936,1029,902,1038,891,818,962,1007],
[1175,995,0,910,950,1062,1101,987,1108,993,921,1018,1043],
[1145,1111,1090,0,1110,1127,1060,998,1116,1047,1072,1094,1131],
[1087,992,1050,890,0,1077,1057,978,1174,1073,1023,1081,1218],
[977,1064,938,873,923,0,1100,885,906,835,876,926,998],
[1026,971,899,940,943,900,0,1038,1016,892,978,906,1043],
[1067,1098,1013,1002,1022,1115,962,0,1108,1066,1051,1054,1106],
[1002,962,892,884,826,1094,984,892,0,944,908,858,1055],
[1067,1109,1007,953,927,1165,1108,934,1056,0,950,936,1093],
[1033,1182,1079,928,977,1124,1022,949,1092,1050,0,1083,1111],
[1050,1038,982,906,919,1074,1094,946,1142,1064,917,0,1144],
[978,993,957,869,782,1002,957,894,945,907,889,856,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 16, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,968,1015,1015,1024,980,1000,994,1005,1035,998,1007,976],
[1032,0,1039,1016,1017,1026,1000,1004,1037,1076,966,1073,1035],
[985,961,0,983,1001,980,994,993,988,1013,996,995,971],
[985,984,1017,0,1038,1044,1005,970,1030,1080,1023,1022,1008],
[976,983,999,962,0,1012,971,971,979,998,976,985,995],
[1020,974,1020,956,988,0,984,1005,999,1004,986,1009,982],
[1000,1000,1006,995,1029,1016,0,962,994,1064,1015,1029,1040],
[1006,996,1007,1030,1029,995,1038,0,1017,1046,1000,1043,1054],
[995,963,1012,970,1021,1001,1006,983,0,1073,996,1059,1017],
[965,924,987,920,1002,996,936,954,927,0,972,1005,968],
[1002,1034,1004,977,1024,1014,985,1000,1004,1028,0,1015,1030],
[993,927,1005,978,1015,991,971,957,941,995,985,0,1028],
[1024,965,1029,992,1005,1018,960,946,983,1032,970,972,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 17, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,992,967,1004,980,1009,1025,1026,991,991,1034,1030,979],
[1008,0,1000,1002,1013,1001,1039,1040,1000,1013,1012,1016,1019],
[1033,1000,0,985,1009,985,1004,1036,995,981,1011,1025,995],
[996,998,1015,0,1009,1024,1032,1037,997,958,1000,1014,957],
[1020,987,991,991,0,989,1053,1041,983,988,1028,1029,978],
[991,999,1015,976,1011,0,1018,1028,988,989,1002,1017,1028],
[975,961,996,968,947,982,0,970,968,951,962,1022,940],
[974,960,964,963,959,972,1030,0,943,951,958,982,965],
[1009,1000,1005,1003,1017,1012,1032,1057,0,1009,1034,1003,998],
[1009,987,1019,1042,1012,1011,1049,1049,991,0,1052,1042,977],
[966,988,989,1000,972,998,1038,1042,966,948,0,990,973],
[970,984,975,986,971,983,978,1018,997,958,1010,0,952],
[1021,981,1005,1043,1022,972,1060,1035,1002,1023,1027,1048,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 18, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1039,1010,1043,1032,999,1011,1019,1030,1007,1033,1001,1005],
[961,0,955,972,963,968,931,980,1013,975,954,974,962],
[990,1045,0,1006,1020,1002,987,1000,984,982,992,997,976],
[957,1028,994,0,1010,963,962,999,1011,993,1007,984,986],
[968,1037,980,990,0,1007,994,1008,970,1004,1015,992,991],
[1001,1032,998,1037,993,0,983,1033,1016,1030,1006,991,1012],
[989,1069,1013,1038,1006,1017,0,1010,1006,1041,1025,1009,1006],
[981,1020,1000,1001,992,967,990,0,997,1010,1008,964,977],
[970,987,1016,989,1030,984,994,1003,0,1001,981,978,965],
[993,1025,1018,1007,996,970,959,990,999,0,1023,1011,973],
[967,1046,1008,993,985,994,975,992,1019,977,0,976,982],
[999,1026,1003,1016,1008,1009,991,1036,1022,989,1024,0,1002],
[995,1038,1024,1014,1009,988,994,1023,1035,1027,1018,998,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 19, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1123,1134,1035,1085,968,1105,1054,1107,1047,1072,1118,1036],
[877,0,983,996,964,862,938,997,955,940,991,993,930],
[866,1017,0,1032,1067,954,1039,1032,980,924,1075,1126,1017],
[965,1004,968,0,987,988,982,895,1090,977,1001,1153,1047],
[915,1036,933,1013,0,945,1050,1033,987,1083,1210,1105,973],
[1032,1138,1046,1012,1055,0,1132,1065,1058,998,1071,1110,1013],
[895,1062,961,1018,950,868,0,963,1043,971,991,1039,1004],
[946,1003,968,1105,967,935,1037,0,999,1115,1084,1060,1036],
[893,1045,1020,910,1013,942,957,1001,0,982,1043,1092,906],
[953,1060,1076,1023,917,1002,1029,885,1018,0,1119,1049,1083],
[928,1009,925,999,790,929,1009,916,957,881,0,1080,973],
[882,1007,874,847,895,890,961,940,908,951,920,0,910],
[964,1070,983,953,1027,987,996,964,1094,917,1027,1090,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 20, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1031,955,997,1070,950,1023,1017,1057,1075,1185,921,1068],
[969,0,938,1037,1100,1045,1055,1036,1098,954,1136,978,1084],
[1045,1062,0,1050,985,956,1056,1080,973,934,1107,971,1078],
[1003,963,950,0,1026,983,974,948,1001,954,1048,996,979],
[930,900,1015,974,0,871,920,897,1011,932,1066,972,984],
[1050,955,1044,1017,1129,0,1010,1094,1074,992,1183,965,1027],
[977,945,944,1026,1080,990,0,1011,953,861,1062,951,1009],
[983,964,920,1052,1103,906,989,0,933,954,1061,883,1028],
[943,902,1027,999,989,926,1047,1067,0,1011,1183,1034,1156],
[925,1046,1066,1046,1068,1008,1139,1046,989,0,1197,1016,1096],
[815,864,893,952,934,817,938,939,817,803,0,918,966],
[1079,1022,1029,1004,1028,1035,1049,1117,966,984,1082,0,947],
[932,916,922,1021,1016,973,991,972,844,904,1034,1053,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 21, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,994,1032,1012,1026,1038,1046,1015,1048,1027,1022,994,994],
[1006,0,994,1034,991,1036,1020,1010,1029,1018,1020,1021,1010],
[968,1006,0,1004,979,1005,1009,1028,996,994,1026,1021,1000],
[988,966,996,0,970,996,995,978,997,996,1008,1025,959],
[974,1009,1021,1030,0,1046,1025,1046,1019,1036,1033,1030,1014],
[962,964,995,1004,954,0,1008,997,997,1002,1017,992,984],
[954,980,991,1005,975,992,0,966,1017,997,1046,962,994],
[985,990,972,1022,954,1003,1034,0,1016,994,1019,999,976],
[952,971,1004,1003,981,1003,983,984,0,977,992,1013,976],
[973,982,1006,1004,964,998,1003,1006,1023,0,1014,1038,1013],
[978,980,974,992,967,983,954,981,1008,986,0,980,993],
[1006,979,979,975,970,1008,1038,1001,987,962,1020,0,999],
[1006,990,1000,1041,986,1016,1006,1024,1024,987,1007,1001,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 22, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1014,1040,996,1022,995,1020,1007,1007,1015,1013,996,1025],
[986,0,1038,1012,1016,965,1008,1009,1024,1029,1036,1000,992],
[960,962,0,984,988,946,988,952,977,957,953,952,968],
[1004,988,1016,0,995,1007,989,992,1019,1013,1001,992,993],
[978,984,1012,1005,0,990,1018,1022,999,1004,998,1001,987],
[1005,1035,1054,993,1010,0,1035,1024,993,1004,1047,998,996],
[980,992,1012,1011,982,965,0,968,992,1002,1020,993,1004],
[993,991,1048,1008,978,976,1032,0,992,1002,1001,1005,989],
[993,976,1023,981,1001,1007,1008,1008,0,1014,1006,982,993],
[985,971,1043,987,996,996,998,998,986,0,1009,976,991],
[987,964,1047,999,1002,953,980,999,994,991,0,953,979],
[1004,1000,1048,1008,999,1002,1007,995,1018,1024,1047,0,1002],
[975,1008,1032,1007,1013,1004,996,1011,1007,1009,1021,998,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 23, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1012,1007,933,960,1036,1009,970,968,1003,964,975,972],
[988,0,1003,966,973,962,1015,935,955,997,977,988,993],
[993,997,0,956,986,974,997,960,1001,994,991,990,991],
[1067,1034,1044,0,1034,1045,1033,1015,988,1089,1056,1040,1018],
[1040,1027,1014,966,0,1023,1044,987,991,1040,1033,1011,992],
[964,1038,1026,955,977,0,1010,991,983,1018,967,970,972],
[991,985,1003,967,956,990,0,977,939,1011,978,999,983],
[1030,1065,1040,985,1013,1009,1023,0,975,1013,1061,970,977],
[1032,1045,999,1012,1009,1017,1061,1025,0,1062,1080,1021,982],
[997,1003,1006,911,960,982,989,987,938,0,999,993,951],
[1036,1023,1009,944,967,1033,1022,939,920,1001,0,995,980],
[1025,1012,1010,960,989,1030,1001,1030,979,1007,1005,0,1001],
[1028,1007,1009,982,1008,1028,1017,1023,1018,1049,1020,999,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 24, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,969,1002,980,942,961,986,967,1011,1031,973,1039,981],
[1031,0,1035,966,1002,980,974,970,1013,968,979,1049,1011],
[998,965,0,969,934,986,959,974,991,942,982,1017,982],
[1020,1034,1031,0,997,1021,1032,1026,1017,1026,997,1000,1009],
[1058,998,1066,1003,0,1052,979,989,1085,972,1020,1085,1021],
[1039,1020,1014,979,948,0,1004,979,1021,1015,984,1037,992],
[1014,1026,1041,968,1021,996,0,1010,1052,1027,1016,1053,1007],
[1033,1030,1026,974,1011,1021,990,0,1012,990,968,1008,1003],
[989,987,1009,983,915,979,948,988,0,969,982,1031,996],
[969,1032,1058,974,1028,985,973,1010,1031,0,1037,1045,1076],
[1027,1021,1018,1003,980,1016,984,1032,1018,963,0,1028,1032],
[961,951,983,1000,915,963,947,992,969,955,972,0,979],
[1019,989,1018,991,979,1008,993,997,1004,924,968,1021,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 25, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,967,994,1047,1018,978,1058,982,1053,957,1041,1035,1023],
[1033,0,1013,1077,986,1011,993,1019,1081,975,1013,1013,1059],
[1006,987,0,1106,1033,1007,1036,1046,1108,992,995,990,1043],
[953,923,894,0,952,956,962,1010,1021,914,997,1015,985],
[982,1014,967,1048,0,1038,1003,1029,1029,925,965,1000,1002],
[1022,989,993,1044,962,0,1031,973,1095,925,1004,998,995],
[942,1007,964,1038,997,969,0,1025,1068,918,970,957,1020],
[1018,981,954,990,971,1027,975,0,1064,898,974,969,1022],
[947,919,892,979,971,905,932,936,0,911,958,915,991],
[1043,1025,1008,1086,1075,1075,1082,1102,1089,0,1057,985,1095],
[959,987,1005,1003,1035,996,1030,1026,1042,943,0,957,1036],
[965,987,1010,985,1000,1002,1043,1031,1085,1015,1043,0,1045],
[977,941,957,1015,998,1005,980,978,1009,905,964,955,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 26, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1011,1012,957,1026,979,987,984,1002,996,998,1005,999],
[989,0,989,962,983,967,958,955,985,990,969,991,994],
[988,1011,0,982,998,980,981,983,978,1014,1012,1015,1016],
[1043,1038,1018,0,1018,999,1018,973,1030,1016,1027,1008,1016],
[974,1017,1002,982,0,977,966,983,1000,976,1008,1002,978],
[1021,1033,1020,1001,1023,0,1012,997,1016,1013,1033,1047,1009],
[1013,1042,1019,982,1034,988,0,1016,1023,997,999,1006,1019],
[1016,1045,1017,1027,1017,1003,984,0,1039,1020,1012,1039,1008],
[998,1015,1022,970,1000,984,977,961,0,991,1005,1010,998],
[1004,1010,986,984,1024,987,1003,980,1009,0,1008,1029,1009],
[1002,1031,988,973,992,967,1001,988,995,992,0,1003,984],
[995,1009,985,992,998,953,994,961,990,971,997,0,978],
[1001,1006,984,984,1022,991,981,992,1002,991,1016,1022,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 27, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1006,1041,986,1028,987,1002,1061,1053,1028,969,1043,1033],
[994,0,1043,955,1024,1007,1009,1036,1036,1016,991,1048,1005],
[959,957,0,925,982,974,944,980,988,978,956,1032,982],
[1014,1045,1075,0,1023,996,1036,1066,1048,1053,1009,1079,1034],
[972,976,1018,977,0,978,1000,1039,1031,979,967,1051,1012],
[1013,993,1026,1004,1022,0,991,1071,1048,1047,994,1050,990],
[998,991,1056,964,1000,1009,0,1045,1023,981,966,1042,1018],
[939,964,1020,934,961,929,955,0,974,995,952,1040,987],
[947,964,1012,952,969,952,977,1026,0,993,959,1024,975],
[972,984,1022,947,1021,953,1019,1005,1007,0,966,1034,1012],
[1031,1009,1044,991,1033,1006,1034,1048,1041,1034,0,1073,1003],
[957,952,968,921,949,950,958,960,976,966,927,0,958],
[967,995,1018,966,988,1010,982,1013,1025,988,997,1042,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 28, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1033,991,949,1000,991,996,963,1047,1018,991,1062,1038],
[967,0,926,1009,982,1077,999,960,1019,990,992,1017,1015],
[1009,1074,0,1013,1000,1051,1010,1034,1028,1041,983,1005,1033],
[1051,991,987,0,1015,1109,1054,938,1048,1011,990,1066,1027],
[1000,1018,1000,985,0,1005,1043,966,1030,1001,973,1016,1022],
[1009,923,949,891,995,0,998,977,992,979,965,1019,1043],
[1004,1001,990,946,957,1002,0,960,993,1024,1000,1000,958],
[1037,1040,966,1062,1034,1023,1040,0,1014,1025,981,1041,1040],
[953,981,972,952,970,1008,1007,986,0,975,977,988,977],
[982,1010,959,989,999,1021,976,975,1025,0,992,998,943],
[1009,1008,1017,1010,1027,1035,1000,1019,1023,1008,0,1076,1020],
[938,983,995,934,984,981,1000,959,1012,1002,924,0,940],
[962,985,967,973,978,957,1042,960,1023,1057,980,1060,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 29, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1002,1036,995,1018,1020,1032,1000,1028,1019,1105,1055,1002],
[998,0,980,1014,1083,1046,1023,997,1005,978,1116,1093,1033],
[964,1020,0,1047,1046,1121,998,984,993,963,1085,1047,967],
[1005,986,953,0,1006,992,1030,970,970,946,1128,1051,995],
[982,917,954,994,0,987,1001,973,963,941,1036,987,902],
[980,954,879,1008,1013,0,976,951,965,942,1080,987,915],
[968,977,1002,970,999,1024,0,1001,979,1007,1062,1055,959],
[1000,1003,1016,1030,1027,1049,999,0,988,961,1083,1016,997],
[972,995,1007,1030,1037,1035,1021,1012,0,987,1075,1016,992],
[981,1022,1037,1054,1059,1058,993,1039,1013,0,1113,1058,1007],
[895,884,915,872,964,920,938,917,925,887,0,1002,929],
[945,907,953,949,1013,1013,945,984,984,942,998,0,940],
[998,967,1033,1005,1098,1085,1041,1003,1008,993,1071,1060,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 30, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1021,1002,998,1013,993,993,1048,1005,988,999,1008,990],
[979,0,996,987,980,981,954,971,980,958,979,975,942],
[998,1004,0,993,1001,977,998,1003,1012,965,978,1000,968],
[1002,1013,1007,0,997,978,995,1011,1018,961,1012,1006,955],
[987,1020,999,1003,0,973,1017,1016,1010,1000,980,983,958],
[1007,1019,1023,1022,1027,0,996,1028,1020,989,995,1017,1000],
[1007,1046,1002,1005,983,1004,0,1021,1004,1004,1018,999,983],
[952,1029,997,989,984,972,979,0,985,970,974,979,978],
[995,1020,988,982,990,980,996,1015,0,994,988,1016,1000],
[1012,1042,1035,1039,1000,1011,996,1030,1006,0,1011,1009,997],
[1001,1021,1022,988,1020,1005,982,1026,1012,989,0,1000,983],
[992,1025,1000,994,1017,983,1001,1021,984,991,1000,0,983],
[1010,1058,1032,1045,1042,1000,1017,1022,1000,1003,1017,1017,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 31, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1005,975,960,987,959,1016,1034,953,989,961,967,1041],
[995,0,1010,964,953,956,956,992,1003,1005,920,934,1009],
[1025,990,0,974,1000,990,973,960,1004,955,933,946,1008],
[1040,1036,1026,0,974,960,1036,1003,964,963,988,964,1004],
[1013,1047,1000,1026,0,943,1058,997,991,998,1007,969,1031],
[1041,1044,1010,1040,1057,0,1059,1070,1034,999,988,985,1099],
[984,1044,1027,964,942,941,0,1008,1019,929,976,982,1038],
[966,1008,1040,997,1003,930,992,0,982,944,948,958,1049],
[1047,997,996,1036,1009,966,981,1018,0,1004,972,964,1012],
[1011,995,1045,1037,1002,1001,1071,1056,996,0,1016,1003,1061],
[1039,1080,1067,1012,993,1012,1024,1052,1028,984,0,958,1052],
[1033,1066,1054,1036,1031,1015,1018,1042,1036,997,1042,0,1046],
[959,991,992,996,969,901,962,951,988,939,948,954,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 32, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1032,994,996,1045,1050,1035,1053,1011,1029,1041,1050,1063],
[968,0,1007,964,982,976,1011,970,1002,987,1007,985,1009],
[1006,993,0,986,975,999,958,987,1038,971,1001,982,1003],
[1004,1036,1014,0,1003,993,1024,1032,1040,1064,1036,1007,1028],
[955,1018,1025,997,0,988,1005,1008,1001,1015,1066,1013,993],
[950,1024,1001,1007,1012,0,1036,1012,1038,1052,1010,998,998],
[965,989,1042,976,995,964,0,965,1006,981,999,1016,1030],
[947,1030,1013,968,992,988,1035,0,1017,988,1005,1035,1000],
[989,998,962,960,999,962,994,983,0,964,988,1001,1021],
[971,1013,1029,936,985,948,1019,1012,1036,0,985,993,1013],
[959,993,999,964,934,990,1001,995,1012,1015,0,1005,970],
[950,1015,1018,993,987,1002,984,965,999,1007,995,0,1030],
[937,991,997,972,1007,1002,970,1000,979,987,1030,970,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 33, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,944,944,979,962,911,947,1045,968,958,971,1042,822],
[1056,0,1032,1022,1033,1028,1009,1038,1023,1073,1070,1148,938],
[1056,968,0,1046,1090,996,1004,1038,1053,1031,1070,1123,977],
[1021,978,954,0,955,1006,989,992,986,1053,1081,990,976],
[1038,967,910,1045,0,962,938,956,961,975,1016,1047,909],
[1089,972,1004,994,1038,0,970,1050,1041,1080,1118,1067,1014],
[1053,991,996,1011,1062,1030,0,1057,1080,1091,1164,1089,967],
[955,962,962,1008,1044,950,943,0,964,978,1010,1010,971],
[1032,977,947,1014,1039,959,920,1036,0,982,1010,1018,981],
[1042,927,969,947,1025,920,909,1022,1018,0,979,1022,958],
[1029,930,930,919,984,882,836,990,990,1021,0,1021,993],
[958,852,877,1010,953,933,911,990,982,978,979,0,881],
[1178,1062,1023,1024,1091,986,1033,1029,1019,1042,1007,1119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 34, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1016,1016,989,1000,1003,993,972,990,952,980,1016,995],
[984,0,1012,984,1017,988,1014,973,998,957,973,973,971],
[984,988,0,948,1005,1007,1034,984,986,960,976,1011,1007],
[1011,1016,1052,0,1001,1035,1030,977,1005,993,1020,1009,1017],
[1000,983,995,999,0,983,1049,978,1009,973,971,989,990],
[997,1012,993,965,1017,0,997,955,1010,956,969,1006,974],
[1007,986,966,970,951,1003,0,956,1002,942,966,984,984],
[1028,1027,1016,1023,1022,1045,1044,0,1026,1022,995,1024,1045],
[1010,1002,1014,995,991,990,998,974,0,966,966,1006,993],
[1048,1043,1040,1007,1027,1044,1058,978,1034,0,990,1003,1021],
[1020,1027,1024,980,1029,1031,1034,1005,1034,1010,0,1016,1022],
[984,1027,989,991,1011,994,1016,976,994,997,984,0,1010],
[1005,1029,993,983,1010,1026,1016,955,1007,979,978,990,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 35, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1008,978,998,1069,1023,986,1018,1037,1026,1000,1007,1036],
[992,0,948,990,1038,1021,992,971,993,922,969,996,965],
[1022,1052,0,1087,1112,1073,1039,1059,985,1083,982,1098,1056],
[1002,1010,913,0,1076,1004,966,1005,1028,1037,1008,1030,1016],
[931,962,888,924,0,1006,957,980,984,998,950,958,951],
[977,979,927,996,994,0,988,972,974,978,1001,983,973],
[1014,1008,961,1034,1043,1012,0,1011,1009,986,1015,1040,1032],
[982,1029,941,995,1020,1028,989,0,1054,1021,986,1031,1019],
[963,1007,1015,972,1016,1026,991,946,0,985,966,1008,966],
[974,1078,917,963,1002,1022,1014,979,1015,0,1016,1042,1023],
[1000,1031,1018,992,1050,999,985,1014,1034,984,0,1052,1053],
[993,1004,902,970,1042,1017,960,969,992,958,948,0,1038],
[964,1035,944,984,1049,1027,968,981,1034,977,947,962,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 36, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1033,1009,1008,1052,977,931,979,1024,964,989,981,992],
[967,0,961,994,1002,966,868,978,990,977,971,924,1007],
[991,1039,0,1015,1082,1030,981,990,1013,1038,995,963,1056],
[992,1006,985,0,1027,985,963,969,1052,988,1037,978,1033],
[948,998,918,973,0,961,932,905,991,966,944,901,1016],
[1023,1034,970,1015,1039,0,926,1009,1029,1016,1003,974,1015],
[1069,1132,1019,1037,1068,1074,0,1024,1049,1015,1041,996,1038],
[1021,1022,1010,1031,1095,991,976,0,1041,1012,972,1012,1084],
[976,1010,987,948,1009,971,951,959,0,976,1032,947,1005],
[1036,1023,962,1012,1034,984,985,988,1024,0,1015,926,1096],
[1011,1029,1005,963,1056,997,959,1028,968,985,0,936,1044],
[1019,1076,1037,1022,1099,1026,1004,988,1053,1074,1064,0,1038],
[1008,993,944,967,984,985,962,916,995,904,956,962,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 37, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1021,993,1032,1035,996,1009,1025,1027,1026,997,1031,1001],
[979,0,993,968,1027,975,1003,978,994,1004,984,962,1000],
[1007,1007,0,983,1045,965,1002,969,992,1012,985,1013,996],
[968,1032,1017,0,1075,963,1006,1031,999,1060,1022,997,1038],
[965,973,955,925,0,945,981,954,976,1014,956,970,973],
[1004,1025,1035,1037,1055,0,1017,1029,1041,1061,997,1043,1020],
[991,997,998,994,1019,983,0,986,1020,1039,999,991,998],
[975,1022,1031,969,1046,971,1014,0,1032,1056,1003,1047,1022],
[973,1006,1008,1001,1024,959,980,968,0,1049,1002,981,995],
[974,996,988,940,986,939,961,944,951,0,979,972,977],
[1003,1016,1015,978,1044,1003,1001,997,998,1021,0,1014,1030],
[969,1038,987,1003,1030,957,1009,953,1019,1028,986,0,1019],
[999,1000,1004,962,1027,980,1002,978,1005,1023,970,981,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 38, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1269,977,1054,909,1092,1001,948,1219,925,1237,1034,987],
[731,0,980,760,1077,1175,1082,965,1369,1190,1256,1037,946],
[1023,1020,0,1073,883,1128,1014,980,1221,896,1181,1136,836],
[946,1240,927,0,898,1059,1039,1391,1224,927,1028,1149,1011],
[1091,923,1117,1102,0,1198,1254,1152,1561,1050,1407,1088,880],
[908,825,872,941,802,0,1013,1282,1361,1010,837,902,908],
[999,918,986,961,746,987,0,851,1244,898,1141,947,895],
[1052,1035,1020,609,848,718,1149,0,1241,727,1059,799,938],
[781,631,779,776,439,639,756,759,0,484,822,692,535],
[1075,810,1104,1073,950,990,1102,1273,1516,0,981,1057,1033],
[763,744,819,972,593,1163,859,941,1178,1019,0,1170,728],
[966,963,864,851,912,1098,1053,1201,1308,943,830,0,678],
[1013,1054,1164,989,1120,1092,1105,1062,1465,967,1272,1322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 39, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,978,941,1005,972,976,1001,1006,985,990,982,983,997],
[1022,0,985,1048,1000,1004,1009,1002,1007,1035,998,1033,1016],
[1059,1015,0,1048,1026,1030,1037,1023,1024,1032,991,1022,1055],
[995,952,952,0,1003,943,950,987,962,962,966,978,1007],
[1028,1000,974,997,0,982,1014,995,1000,1011,1001,1033,989],
[1024,996,970,1057,1018,0,999,1003,1013,1018,1018,1031,988],
[999,991,963,1050,986,1001,0,994,1003,1016,978,1012,1001],
[994,998,977,1013,1005,997,1006,0,1032,1002,977,1040,989],
[1015,993,976,1038,1000,987,997,968,0,1012,962,1017,1021],
[1010,965,968,1038,989,982,984,998,988,0,990,1019,993],
[1018,1002,1009,1034,999,982,1022,1023,1038,1010,0,1032,1012],
[1017,967,978,1022,967,969,988,960,983,981,968,0,993],
[1003,984,945,993,1011,1012,999,1011,979,1007,988,1007,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 40, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1141,988,926,982,967,1090,897,945,862,1066,874,1017],
[859,0,963,943,1065,1061,1048,876,969,914,1004,918,946],
[1012,1037,0,920,969,1021,988,954,950,880,1095,905,953],
[1074,1057,1080,0,1010,1118,1083,1014,1122,970,1173,972,1084],
[1018,935,1031,990,0,1074,1073,999,908,1047,1112,922,1010],
[1033,939,979,882,926,0,1027,928,986,961,1128,847,911],
[910,952,1012,917,927,973,0,908,997,895,1109,846,996],
[1103,1124,1046,986,1001,1072,1092,0,1021,1005,1193,1000,993],
[1055,1031,1050,878,1092,1014,1003,979,0,961,1141,936,1085],
[1138,1086,1120,1030,953,1039,1105,995,1039,0,1123,952,1005],
[934,996,905,827,888,872,891,807,859,877,0,832,989],
[1126,1082,1095,1028,1078,1153,1154,1000,1064,1048,1168,0,1097],
[983,1054,1047,916,990,1089,1004,1007,915,995,1011,903,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 41, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,975,981,1016,1005,1033,1036,997,1009,979,967,1020,975],
[1025,0,1009,1017,1046,1046,1034,1002,1040,940,985,1006,1029],
[1019,991,0,1033,1056,1052,995,1011,981,993,974,970,994],
[984,983,967,0,999,1012,958,986,992,988,976,990,968],
[995,954,944,1001,0,1025,987,973,969,976,999,975,969],
[967,954,948,988,975,0,965,980,978,925,966,969,976],
[964,966,1005,1042,1013,1035,0,980,1009,1005,981,1025,998],
[1003,998,989,1014,1027,1020,1020,0,1007,983,1014,1029,1030],
[991,960,1019,1008,1031,1022,991,993,0,953,995,1021,979],
[1021,1060,1007,1012,1024,1075,995,1017,1047,0,989,1018,1029],
[1033,1015,1026,1024,1001,1034,1019,986,1005,1011,0,1018,1019],
[980,994,1030,1010,1025,1031,975,971,979,982,982,0,953],
[1025,971,1006,1032,1031,1024,1002,970,1021,971,981,1047,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 42, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,955,989,1006,973,1010,1011,1078,998,1018,1016,991,1005],
[1045,0,1037,1018,992,1026,1058,1062,1019,995,1004,1032,1013],
[1011,963,0,958,977,1009,999,1036,956,983,1016,979,1008],
[994,982,1042,0,958,973,1023,1069,1016,971,1027,989,1053],
[1027,1008,1023,1042,0,1002,1028,1062,996,985,1017,1008,987],
[990,974,991,1027,998,0,992,1031,982,978,965,985,1016],
[989,942,1001,977,972,1008,0,1010,961,940,974,985,1002],
[922,938,964,931,938,969,990,0,964,890,955,934,947],
[1002,981,1044,984,1004,1018,1039,1036,0,975,980,971,980],
[982,1005,1017,1029,1015,1022,1060,1110,1025,0,1057,995,1029],
[984,996,984,973,983,1035,1026,1045,1020,943,0,985,1015],
[1009,968,1021,1011,992,1015,1015,1066,1029,1005,1015,0,1043],
[995,987,992,947,1013,984,998,1053,1020,971,985,957,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 43, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,985,1003,963,1023,1000,954,965,970,939,1030,999,986],
[1015,0,1020,986,954,964,951,975,994,948,974,1043,943],
[997,980,0,959,955,998,982,982,1001,1006,976,954,1001],
[1037,1014,1041,0,1010,997,991,980,999,1009,968,981,993],
[977,1046,1045,990,0,967,949,1019,996,1031,965,1002,990],
[1000,1036,1002,1003,1033,0,1003,1010,951,942,1038,997,1017],
[1046,1049,1018,1009,1051,997,0,1063,1017,995,980,966,1041],
[1035,1025,1018,1020,981,990,937,0,991,964,992,1004,996],
[1030,1006,999,1001,1004,1049,983,1009,0,1001,1036,1048,1038],
[1061,1052,994,991,969,1058,1005,1036,999,0,960,1034,990],
[970,1026,1024,1032,1035,962,1020,1008,964,1040,0,990,1040],
[1001,957,1046,1019,998,1003,1034,996,952,966,1010,0,997],
[1014,1057,999,1007,1010,983,959,1004,962,1010,960,1003,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 44, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,968,1018,971,988,998,956,1026,1008,995,1002,981,975],
[1032,0,1021,1001,1006,993,1007,1021,1023,1017,994,1000,989],
[982,979,0,978,972,982,967,984,1020,984,1006,988,944],
[1029,999,1022,0,1017,975,1010,1048,1029,971,1034,1002,983],
[1012,994,1028,983,0,978,975,1024,1031,999,998,1001,998],
[1002,1007,1018,1025,1022,0,1009,1023,1018,1007,1026,1005,993],
[1044,993,1033,990,1025,991,0,1055,1014,988,1017,1022,1002],
[974,979,1016,952,976,977,945,0,1001,952,976,970,945],
[992,977,980,971,969,982,986,999,0,990,1008,983,983],
[1005,983,1016,1029,1001,993,1012,1048,1010,0,1028,1013,1018],
[998,1006,994,966,1002,974,983,1024,992,972,0,981,1015],
[1019,1000,1012,998,999,995,978,1030,1017,987,1019,0,1000],
[1025,1011,1056,1017,1002,1007,998,1055,1017,982,985,1000,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 45, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1025,1027,1013,1026,1003,1018,1025,1008,1003,1011,1017,999],
[975,0,1022,982,1038,993,983,1000,1004,1012,1009,983,986],
[973,978,0,970,1018,1004,997,989,1017,978,1004,996,964],
[987,1018,1030,0,1014,1002,1025,998,1035,997,1003,1007,986],
[974,962,982,986,0,991,997,967,997,976,1009,973,990],
[997,1007,996,998,1009,0,1014,996,1021,993,970,1032,977],
[982,1017,1003,975,1003,986,0,978,1005,973,999,989,949],
[975,1000,1011,1002,1033,1004,1022,0,1013,1004,1012,985,969],
[992,996,983,965,1003,979,995,987,0,1001,1012,966,975],
[997,988,1022,1003,1024,1007,1027,996,999,0,1002,991,1012],
[989,991,996,997,991,1030,1001,988,988,998,0,1006,985],
[983,1017,1004,993,1027,968,1011,1015,1034,1009,994,0,1018],
[1001,1014,1036,1014,1010,1023,1051,1031,1025,988,1015,982,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 46, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,952,1022,1014,998,1011,974,1003,1008,987,958,992,969],
[1048,0,1044,1047,1041,1056,1028,997,1053,1058,1022,1036,1056],
[978,956,0,987,975,993,965,959,1003,960,987,963,972],
[986,953,1013,0,1002,996,986,1010,1014,994,999,991,995],
[1002,959,1025,998,0,998,1013,1031,989,975,1016,1013,1005],
[989,944,1007,1004,1002,0,1011,986,1037,997,979,1002,1004],
[1026,972,1035,1014,987,989,0,1028,1031,998,1009,996,1017],
[997,1003,1041,990,969,1014,972,0,1018,983,999,1007,996],
[992,947,997,986,1011,963,969,982,0,976,966,999,986],
[1013,942,1040,1006,1025,1003,1002,1017,1024,0,1017,1002,1006],
[1042,978,1013,1001,984,1021,991,1001,1034,983,0,994,988],
[1008,964,1037,1009,987,998,1004,993,1001,998,1006,0,993],
[1031,944,1028,1005,995,996,983,1004,1014,994,1012,1007,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 47, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1013,1000,1014,997,1017,1006,1032,981,1021,997,1030,1003],
[987,0,975,983,961,1020,1010,1032,989,1011,979,1025,1008],
[1000,1025,0,1000,1002,1015,1051,1037,986,1031,993,1037,1013],
[986,1017,1000,0,965,1010,968,1035,979,993,1016,1016,1029],
[1003,1039,998,1035,0,1036,1031,1079,1017,1016,1025,1062,1053],
[983,980,985,990,964,0,1020,1018,1006,994,996,1017,997],
[994,990,949,1032,969,980,0,1031,1010,1032,997,999,1002],
[968,968,963,965,921,982,969,0,970,1008,957,1002,1004],
[1019,1011,1014,1021,983,994,990,1030,0,999,1036,1029,1022],
[979,989,969,1007,984,1006,968,992,1001,0,986,1004,1046],
[1003,1021,1007,984,975,1004,1003,1043,964,1014,0,1045,1017],
[970,975,963,984,938,983,1001,998,971,996,955,0,996],
[997,992,987,971,947,1003,998,996,978,954,983,1004,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 48, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,907,863,919,999,805,873,905,1051,905,1041,1010,881],
[1093,0,1025,1101,998,1016,972,952,1099,1028,1204,1010,1028],
[1137,975,0,1045,979,1009,916,925,999,935,1125,1031,950],
[1081,899,955,0,889,952,817,831,1010,983,1153,964,966],
[1001,1002,1021,1111,0,900,861,999,980,1014,1161,972,1054],
[1195,984,991,1048,1100,0,1038,969,1134,1082,1198,1069,1048],
[1127,1028,1084,1183,1139,962,0,1010,1091,1166,1211,1153,1139],
[1095,1048,1075,1169,1001,1031,990,0,1073,1137,1178,1081,1074],
[949,901,1001,990,1020,866,909,927,0,852,1112,872,956],
[1095,972,1065,1017,986,918,834,863,1148,0,1111,1028,915],
[959,796,875,847,839,802,789,822,888,889,0,896,823],
[990,990,969,1036,1028,931,847,919,1128,972,1104,0,882],
[1119,972,1050,1034,946,952,861,926,1044,1085,1177,1118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 49, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,964,1011,980,940,1000,964,969,940,914,1000,928,992],
[1036,0,965,965,961,1018,999,955,959,963,1015,959,965],
[989,1035,0,1004,991,975,1021,968,987,999,1005,965,942],
[1020,1035,996,0,993,1014,988,1000,1031,974,1053,970,1015],
[1060,1039,1009,1007,0,1026,995,1006,977,987,1048,933,1003],
[1000,982,1025,986,974,0,966,976,985,971,997,932,948],
[1036,1001,979,1012,1005,1034,0,1002,972,1024,1066,959,1010],
[1031,1045,1032,1000,994,1024,998,0,991,957,985,969,1010],
[1060,1041,1013,969,1023,1015,1028,1009,0,980,1038,989,992],
[1086,1037,1001,1026,1013,1029,976,1043,1020,0,1015,1013,969],
[1000,985,995,947,952,1003,934,1015,962,985,0,957,986],
[1072,1041,1035,1030,1067,1068,1041,1031,1011,987,1043,0,1029],
[1008,1035,1058,985,997,1052,990,990,1008,1031,1014,971,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 50, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1024,995,1038,1034,1016,1033,1004,994,1028,980,987,1031],
[976,0,950,984,1035,944,985,975,983,990,985,993,1010],
[1005,1050,0,1040,1023,1003,999,1011,1008,1036,977,1009,1044],
[962,1016,960,0,1012,970,984,997,994,1004,986,1035,1010],
[966,965,977,988,0,936,962,945,979,1019,973,1018,1000],
[984,1056,997,1030,1064,0,1012,1017,988,1041,1001,1058,1017],
[967,1015,1001,1016,1038,988,0,1006,982,986,1002,997,1001],
[996,1025,989,1003,1055,983,994,0,990,1014,1005,1038,1002],
[1006,1017,992,1006,1021,1012,1018,1010,0,1029,1011,1026,1036],
[972,1010,964,996,981,959,1014,986,971,0,977,1002,999],
[1020,1015,1023,1014,1027,999,998,995,989,1023,0,1012,1030],
[1013,1007,991,965,982,942,1003,962,974,998,988,0,1009],
[969,990,956,990,1000,983,999,998,964,1001,970,991,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 51, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1061,1019,1060,1078,1063,976,1068,1060,1071,1006,993,1116],
[939,0,983,986,974,1000,915,985,972,1011,925,946,991],
[981,1017,0,1008,1054,1023,954,1037,1006,1049,986,976,1026],
[940,1014,992,0,1032,1021,960,1031,1056,1042,943,1006,1069],
[922,1026,946,968,0,998,958,975,991,975,949,1020,1041],
[937,1000,977,979,1002,0,958,1006,1014,1031,942,881,987],
[1024,1085,1046,1040,1042,1042,0,1067,1035,1060,973,1019,1088],
[932,1015,963,969,1025,994,933,0,1017,987,927,965,1022],
[940,1028,994,944,1009,986,965,983,0,1025,929,948,1034],
[929,989,951,958,1025,969,940,1013,975,0,953,956,1027],
[994,1075,1014,1057,1051,1058,1027,1073,1071,1047,0,1016,1074],
[1007,1054,1024,994,980,1119,981,1035,1052,1044,984,0,1045],
[884,1009,974,931,959,1013,912,978,966,973,926,955,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 52, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1007,1029,1011,977,1016,1013,1032,997,1008,988,1025,1010],
[993,0,1008,1010,993,1008,1005,1017,994,999,998,972,1009],
[971,992,0,1018,988,1019,996,1041,997,1007,986,994,993],
[989,990,982,0,975,1010,980,1031,995,976,967,975,984],
[1023,1007,1012,1025,0,1052,1033,1030,1004,991,1015,982,989],
[984,992,981,990,948,0,976,1043,1006,972,979,956,972],
[987,995,1004,1020,967,1024,0,1027,1003,997,993,977,998],
[968,983,959,969,970,957,973,0,962,923,962,931,963],
[1003,1006,1003,1005,996,994,997,1038,0,987,996,972,988],
[992,1001,993,1024,1009,1028,1003,1077,1013,0,1002,1004,1005],
[1012,1002,1014,1033,985,1021,1007,1038,1004,998,0,1001,1019],
[975,1028,1006,1025,1018,1044,1023,1069,1028,996,999,0,1004],
[990,991,1007,1016,1011,1028,1002,1037,1012,995,981,996,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 53, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,988,1031,1003,1003,975,977,976,948,966,991,1016,972],
[1012,0,1025,1014,1041,994,1036,1001,988,986,1012,1033,973],
[969,975,0,993,1002,967,996,983,977,950,988,1013,949],
[997,986,1007,0,1012,996,979,994,962,978,996,1013,975],
[997,959,998,988,0,1004,982,979,975,950,978,1012,953],
[1025,1006,1033,1004,996,0,989,1011,985,995,1017,1003,1005],
[1023,964,1004,1021,1018,1011,0,975,978,963,990,1011,974],
[1024,999,1017,1006,1021,989,1025,0,975,979,995,1006,996],
[1052,1012,1023,1038,1025,1015,1022,1025,0,997,996,1030,1017],
[1034,1014,1050,1022,1050,1005,1037,1021,1003,0,1030,1053,982],
[1009,988,1012,1004,1022,983,1010,1005,1004,970,0,1009,1004],
[984,967,987,987,988,997,989,994,970,947,991,0,971],
[1028,1027,1051,1025,1047,995,1026,1004,983,1018,996,1029,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 54, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1006,966,944,947,1021,980,981,957,1033,975,1015,956],
[994,0,984,996,951,1022,992,984,995,968,980,989,967],
[1034,1016,0,962,1004,1032,1012,970,1001,1027,990,1049,1041],
[1056,1004,1038,0,982,1030,1016,970,1020,1027,1002,1023,994],
[1053,1049,996,1018,0,1030,1005,1009,1035,1005,1024,1049,1020],
[979,978,968,970,970,0,969,945,973,1018,979,980,947],
[1020,1008,988,984,995,1031,0,980,990,1030,1027,1033,977],
[1019,1016,1030,1030,991,1055,1020,0,1015,1020,988,996,993],
[1043,1005,999,980,965,1027,1010,985,0,1002,1013,966,978],
[967,1032,973,973,995,982,970,980,998,0,1013,982,984],
[1025,1020,1010,998,976,1021,973,1012,987,987,0,979,1012],
[985,1011,951,977,951,1020,967,1004,1034,1018,1021,0,992],
[1044,1033,959,1006,980,1053,1023,1007,1022,1016,988,1008,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 55, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,996,982,1001,995,1019,1015,996,993,970,990,968,1016],
[1004,0,1001,992,1004,1014,988,991,1015,1010,1017,1016,989],
[1018,999,0,1015,1017,991,1020,995,991,1013,1019,1004,1016],
[999,1008,985,0,1012,1001,1012,995,995,1004,1004,997,986],
[1005,996,983,988,0,994,1005,1000,987,1004,980,999,1006],
[981,986,1009,999,1006,0,980,974,1033,1006,1004,998,1033],
[985,1012,980,988,995,1020,0,992,1011,1009,974,989,998],
[1004,1009,1005,1005,1000,1026,1008,0,993,1027,1011,995,1016],
[1007,985,1009,1005,1013,967,989,1007,0,984,978,993,1004],
[1030,990,987,996,996,994,991,973,1016,0,990,1015,990],
[1010,983,981,996,1020,996,1026,989,1022,1010,0,1030,1015],
[1032,984,996,1003,1001,1002,1011,1005,1007,985,970,0,1027],
[984,1011,984,1014,994,967,1002,984,996,1010,985,973,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 56, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,993,948,1014,1057,1084,985,1015,937,1120,1006,1062,1064],
[1007,0,879,984,1051,973,914,960,916,1037,937,977,981],
[1052,1121,0,995,1011,1086,982,1051,1021,1080,1005,1074,1076],
[986,1016,1005,0,1035,985,962,1037,1000,993,1013,1006,1027],
[943,949,989,965,0,1006,957,982,909,999,1033,1036,1028],
[916,1027,914,1015,994,0,959,927,974,1027,936,1014,968],
[1015,1086,1018,1038,1043,1041,0,950,993,1000,951,1078,1046],
[985,1040,949,963,1018,1073,1050,0,951,1032,989,1041,1055],
[1063,1084,979,1000,1091,1026,1007,1049,0,1133,1020,1058,1005],
[880,963,920,1007,1001,973,1000,968,867,0,977,1027,1014],
[994,1063,995,987,967,1064,1049,1011,980,1023,0,1055,1022],
[938,1023,926,994,964,986,922,959,942,973,945,0,988],
[936,1019,924,973,972,1032,954,945,995,986,978,1012,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 57, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1034,992,1047,969,1030,964,986,1018,1012,989,987,1004],
[966,0,995,1040,990,1033,989,924,943,948,937,966,980],
[1008,1005,0,1032,1006,1013,938,974,1017,1015,947,956,998],
[953,960,968,0,945,1007,922,904,960,984,935,956,994],
[1031,1010,994,1055,0,1031,921,1016,1018,1047,958,1045,990],
[970,967,987,993,969,0,931,958,971,1005,973,938,979],
[1036,1011,1062,1078,1079,1069,0,985,1043,1073,1004,1042,1019],
[1014,1076,1026,1096,984,1042,1015,0,1049,1092,992,1031,1045],
[982,1057,983,1040,982,1029,957,951,0,1074,945,994,1043],
[988,1052,985,1016,953,995,927,908,926,0,936,971,982],
[1011,1063,1053,1065,1042,1027,996,1008,1055,1064,0,1001,1046],
[1013,1034,1044,1044,955,1062,958,969,1006,1029,999,0,1027],
[996,1020,1002,1006,1010,1021,981,955,957,1018,954,973,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 58, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1004,1001,1017,1007,1026,1037,989,988,1010,996,1016,984],
[996,0,1036,990,1002,1005,1044,1015,1018,1020,1010,1040,1006],
[999,964,0,1003,958,976,1010,991,1008,985,974,987,959],
[983,1010,997,0,1008,1011,1029,1005,1011,1004,1026,1009,1012],
[993,998,1042,992,0,1040,1023,1002,1015,1028,1002,1048,1021],
[974,995,1024,989,960,0,1014,1001,985,967,986,1018,929],
[963,956,990,971,977,986,0,975,979,957,967,990,979],
[1011,985,1009,995,998,999,1025,0,1011,990,978,1008,987],
[1012,982,992,989,985,1015,1021,989,0,998,991,1015,986],
[990,980,1015,996,972,1033,1043,1010,1002,0,988,995,976],
[1004,990,1026,974,998,1014,1033,1022,1009,1012,0,1025,1008],
[984,960,1013,991,952,982,1010,992,985,1005,975,0,963],
[1016,994,1041,988,979,1071,1021,1013,1014,1024,992,1037,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 59, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1132,1054,692,893,780,904,878,1023,1076,982,933,972],
[868,0,892,743,1205,898,919,932,1092,1068,762,866,844],
[946,1108,0,923,1319,1100,1097,918,1182,1040,1147,1062,950],
[1308,1257,1077,0,1297,1042,1232,1112,1381,1197,979,1140,1229],
[1107,795,681,703,0,951,752,683,1067,1086,818,944,741],
[1220,1102,900,958,1049,0,902,1104,1066,1132,1008,1059,928],
[1096,1081,903,768,1248,1098,0,1099,1242,1073,1069,924,864],
[1122,1068,1082,888,1317,896,901,0,1219,1212,1059,973,935],
[977,908,818,619,933,934,758,781,0,1184,714,678,843],
[924,932,960,803,914,868,927,788,816,0,909,813,911],
[1018,1238,853,1021,1182,992,931,941,1286,1091,0,812,954],
[1067,1134,938,860,1056,941,1076,1027,1322,1187,1188,0,893],
[1028,1156,1050,771,1259,1072,1136,1065,1157,1089,1046,1107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 60, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1087,973,975,1077,1017,979,1058,976,1009,947,889,991],
[913,0,905,998,1003,930,962,975,908,992,947,815,945],
[1027,1095,0,1047,1092,1120,1004,1089,1047,1063,1040,1015,1000],
[1025,1002,953,0,1080,1039,1033,1030,994,1052,1021,969,1034],
[923,997,908,920,0,1020,949,933,980,1004,952,878,996],
[983,1070,880,961,980,0,943,1000,939,1023,950,926,998],
[1021,1038,996,967,1051,1057,0,1019,992,1111,972,930,957],
[942,1025,911,970,1067,1000,981,0,996,1058,1005,909,963],
[1024,1092,953,1006,1020,1061,1008,1004,0,1123,997,959,1012],
[991,1008,937,948,996,977,889,942,877,0,969,873,990],
[1053,1053,960,979,1048,1050,1028,995,1003,1031,0,927,965],
[1111,1185,985,1031,1122,1074,1070,1091,1041,1127,1073,0,1104],
[1009,1055,1000,966,1004,1002,1043,1037,988,1010,1035,896,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 61, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1008,1001,942,984,993,991,1073,948,957,905,955,995],
[992,0,965,915,1008,1005,947,997,892,978,956,899,1035],
[999,1035,0,940,1036,976,998,1037,946,1039,877,940,1029],
[1058,1085,1060,0,1053,1050,1075,1065,1045,1013,994,1026,1037],
[1016,992,964,947,0,1040,1011,1005,1013,1013,969,957,1017],
[1007,995,1024,950,960,0,989,1054,982,990,900,975,1056],
[1009,1053,1002,925,989,1011,0,1085,995,983,1007,988,996],
[927,1003,963,935,995,946,915,0,957,967,959,897,1017],
[1052,1108,1054,955,987,1018,1005,1043,0,1055,1001,976,1030],
[1043,1022,961,987,987,1010,1017,1033,945,0,973,913,991],
[1095,1044,1123,1006,1031,1100,993,1041,999,1027,0,940,1030],
[1045,1101,1060,974,1043,1025,1012,1103,1024,1087,1060,0,1033],
[1005,965,971,963,983,944,1004,983,970,1009,970,967,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 62, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,995,1001,997,983,995,949,1029,1013,958,985,1037,1024],
[1005,0,1026,1016,985,1030,1002,1008,1018,994,1013,1028,1061],
[999,974,0,1000,951,967,982,1011,962,979,984,1040,1007],
[1003,984,1000,0,1007,1014,982,976,1002,1016,1014,1014,1010],
[1017,1015,1049,993,0,1004,1003,1043,1017,1010,1016,1036,1044],
[1005,970,1033,986,996,0,981,1018,984,1008,962,1040,1028],
[1051,998,1018,1018,997,1019,0,1030,1007,1017,1020,1011,1022],
[971,992,989,1024,957,982,970,0,951,978,972,978,987],
[987,982,1038,998,983,1016,993,1049,0,1028,972,1023,1036],
[1042,1006,1021,984,990,992,983,1022,972,0,959,1051,998],
[1015,987,1016,986,984,1038,980,1028,1028,1041,0,1033,1060],
[963,972,960,986,964,960,989,1022,977,949,967,0,1014],
[976,939,993,990,956,972,978,1013,964,1002,940,986,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 63, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,954,985,1007,970,984,977,971,970,991,963,965,995],
[1046,0,1031,1015,977,1005,1020,996,998,988,1008,1031,1028],
[1015,969,0,1013,983,1001,971,970,975,982,955,962,970],
[993,985,987,0,990,987,993,975,954,981,956,994,949],
[1030,1023,1017,1010,0,1006,1022,1005,994,1019,994,1017,1009],
[1016,995,999,1013,994,0,1004,975,986,980,987,968,971],
[1023,980,1029,1007,978,996,0,985,1004,999,985,981,989],
[1029,1004,1030,1025,995,1025,1015,0,991,1003,986,1009,1012],
[1030,1002,1025,1046,1006,1014,996,1009,0,985,985,1002,988],
[1009,1012,1018,1019,981,1020,1001,997,1015,0,999,965,980],
[1037,992,1045,1044,1006,1013,1015,1014,1015,1001,0,1017,1013],
[1035,969,1038,1006,983,1032,1019,991,998,1035,983,0,1016],
[1005,972,1030,1051,991,1029,1011,988,1012,1020,987,984,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 64, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1009,993,965,1007,1000,1039,1040,1048,1008,1048,1023,978],
[991,0,985,982,997,961,1048,1015,1007,959,1039,1034,975],
[1007,1015,0,984,1062,998,1026,1023,1057,1049,1037,1033,1025],
[1035,1018,1016,0,1027,994,1034,985,1008,993,1046,1021,1009],
[993,1003,938,973,0,1006,1037,989,1009,974,1016,976,988],
[1000,1039,1002,1006,994,0,982,1006,1052,992,1046,1022,1000],
[961,952,974,966,963,1018,0,988,974,971,1005,996,986],
[960,985,977,1015,1011,994,1012,0,961,991,968,997,969],
[952,993,943,992,991,948,1026,1039,0,925,1024,994,963],
[992,1041,951,1007,1026,1008,1029,1009,1075,0,1035,1010,995],
[952,961,963,954,984,954,995,1032,976,965,0,972,958],
[977,966,967,979,1024,978,1004,1003,1006,990,1028,0,950],
[1022,1025,975,991,1012,1000,1014,1031,1037,1005,1042,1050,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 65, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1012,1054,977,994,942,1011,997,1081,1020,999,1004,1010],
[988,0,1048,947,984,1007,1030,987,1008,1007,996,1035,953],
[946,952,0,979,949,977,972,1004,1084,963,924,875,1022],
[1023,1053,1021,0,958,1002,1053,1059,1066,1020,1065,924,1053],
[1006,1016,1051,1042,0,1065,1076,1012,1038,1019,972,1062,960],
[1058,993,1023,998,935,0,997,976,1124,1015,1018,999,1035],
[989,970,1028,947,924,1003,0,1073,1059,930,996,993,914],
[1003,1013,996,941,988,1024,927,0,1122,1021,990,1052,1025],
[919,992,916,934,962,876,941,878,0,993,955,947,945],
[980,993,1037,980,981,985,1070,979,1007,0,955,966,1010],
[1001,1004,1076,935,1028,982,1004,1010,1045,1045,0,1007,1029],
[996,965,1125,1076,938,1001,1007,948,1053,1034,993,0,990],
[990,1047,978,947,1040,965,1086,975,1055,990,971,1010,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 66, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,994,1010,1034,1032,1015,1008,959,1052,1001,1009,1029,987],
[1006,0,1004,1011,968,987,993,961,1011,955,1019,999,1019],
[990,996,0,1028,1004,980,1004,984,1018,954,1020,1026,980],
[966,989,972,0,954,966,998,942,1019,947,1015,984,991],
[968,1032,996,1046,0,977,996,992,1025,1007,1013,1019,971],
[985,1013,1020,1034,1023,0,996,984,1028,990,1021,1005,1002],
[992,1007,996,1002,1004,1004,0,988,978,958,1046,1019,997],
[1041,1039,1016,1058,1008,1016,1012,0,1050,997,1027,1009,1008],
[948,989,982,981,975,972,1022,950,0,981,1012,1003,992],
[999,1045,1046,1053,993,1010,1042,1003,1019,0,1040,1024,1030],
[991,981,980,985,987,979,954,973,988,960,0,977,1014],
[971,1001,974,1016,981,995,981,991,997,976,1023,0,964],
[1013,981,1020,1009,1029,998,1003,992,1008,970,986,1036,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 67, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1002,979,1010,953,967,1027,971,993,970,971,983,965],
[998,0,947,993,990,974,981,941,957,932,967,972,954],
[1021,1053,0,1019,998,1005,1009,963,979,1006,1028,1007,991],
[990,1007,981,0,968,971,1012,949,978,973,990,971,985],
[1047,1010,1002,1032,0,998,1002,969,986,1019,1026,995,967],
[1033,1026,995,1029,1002,0,1005,960,972,1005,982,1002,960],
[973,1019,991,988,998,995,0,971,971,971,986,1001,947],
[1029,1059,1037,1051,1031,1040,1029,0,1003,1005,1000,992,985],
[1007,1043,1021,1022,1014,1028,1029,997,0,1014,1025,1017,1010],
[1030,1068,994,1027,981,995,1029,995,986,0,1039,1003,968],
[1029,1033,972,1010,974,1018,1014,1000,975,961,0,997,973],
[1017,1028,993,1029,1005,998,999,1008,983,997,1003,0,990],
[1035,1046,1009,1015,1033,1040,1053,1015,990,1032,1027,1010,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 68, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1007,1050,1047,1009,1025,1015,1005,977,1018,1008,1011,1045],
[993,0,1007,983,1001,990,984,1014,980,999,978,975,1012],
[950,993,0,998,969,985,956,977,997,972,984,966,1000],
[953,1017,1002,0,956,990,980,965,949,977,966,944,960],
[991,999,1031,1044,0,992,987,993,1049,1001,1003,1017,999],
[975,1010,1015,1010,1008,0,970,976,1000,996,992,989,1015],
[985,1016,1044,1020,1013,1030,0,992,1016,1020,1015,967,1037],
[995,986,1023,1035,1007,1024,1008,0,1023,1027,996,989,1031],
[1023,1020,1003,1051,951,1000,984,977,0,994,986,1022,1009],
[982,1001,1028,1023,999,1004,980,973,1006,0,999,1002,967],
[992,1022,1016,1034,997,1008,985,1004,1014,1001,0,1008,1064],
[989,1025,1034,1056,983,1011,1033,1011,978,998,992,0,1014],
[955,988,1000,1040,1001,985,963,969,991,1033,936,986,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 69, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,986,1004,990,1020,979,979,985,970,986,1029,974,1013],
[1014,0,1038,1017,1034,996,1001,1036,1008,978,997,987,1022],
[996,962,0,1014,1031,992,965,983,946,971,957,1011,1011],
[1010,983,986,0,1007,997,1018,999,953,960,986,969,1023],
[980,966,969,993,0,960,959,969,958,943,975,996,950],
[1021,1004,1008,1003,1040,0,972,999,964,952,1022,1010,1022],
[1021,999,1035,982,1041,1028,0,1029,1006,1030,1061,1031,1065],
[1015,964,1017,1001,1031,1001,971,0,977,1003,1001,997,1028],
[1030,992,1054,1047,1042,1036,994,1023,0,992,1033,1033,1072],
[1014,1022,1029,1040,1057,1048,970,997,1008,0,1013,1023,1059],
[971,1003,1043,1014,1025,978,939,999,967,987,0,993,1014],
[1026,1013,989,1031,1004,990,969,1003,967,977,1007,0,1041],
[987,978,989,977,1050,978,935,972,928,941,986,959,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 70, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1106,1073,1016,1041,985,1119,1067,1057,1060,1118,1004,1045],
[894,0,1052,1000,1014,945,1044,984,884,1079,1056,916,988],
[927,948,0,895,949,924,952,947,940,983,992,971,922],
[984,1000,1105,0,1059,963,1037,979,1005,1065,1037,950,982],
[959,986,1051,941,0,891,1010,912,908,960,920,907,1084],
[1015,1055,1076,1037,1109,0,1033,1003,989,1079,1066,1049,1042],
[881,956,1048,963,990,967,0,952,973,1006,971,902,968],
[933,1016,1053,1021,1088,997,1048,0,973,1035,990,947,1001],
[943,1116,1060,995,1092,1011,1027,1027,0,1040,987,941,1014],
[940,921,1017,935,1040,921,994,965,960,0,963,957,1039],
[882,944,1008,963,1080,934,1029,1010,1013,1037,0,978,968],
[996,1084,1029,1050,1093,951,1098,1053,1059,1043,1022,0,959],
[955,1012,1078,1018,916,958,1032,999,986,961,1032,1041,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 71, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,981,996,968,970,1021,998,1009,946,981,988,1003,1025],
[1019,0,1004,981,994,1032,1017,999,983,981,1002,1060,1013],
[1004,996,0,966,998,1004,989,980,976,961,973,1005,1018],
[1032,1019,1034,0,988,1027,1016,1000,1004,995,1016,1022,1001],
[1030,1006,1002,1012,0,1054,1027,983,993,987,1026,1036,1033],
[979,968,996,973,946,0,1006,982,966,1002,965,982,1009],
[1002,983,1011,984,973,994,0,997,999,944,1019,983,990],
[991,1001,1020,1000,1017,1018,1003,0,1003,997,1006,1019,1033],
[1054,1017,1024,996,1007,1034,1001,997,0,992,986,1017,1031],
[1019,1019,1039,1005,1013,998,1056,1003,1008,0,983,1019,1058],
[1012,998,1027,984,974,1035,981,994,1014,1017,0,1002,1003],
[997,940,995,978,964,1018,1017,981,983,981,998,0,986],
[975,987,982,999,967,991,1010,967,969,942,997,1014,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 72, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1029,1005,1054,1063,1072,1043,1049,1024,1045,1071,1012,980],
[971,0,984,966,913,1026,1040,994,964,968,1009,940,968],
[995,1016,0,1051,957,1102,1036,1052,1040,1066,1027,909,1046],
[946,1034,949,0,994,1044,1079,1050,971,945,1023,971,938],
[937,1087,1043,1006,0,1021,1017,1071,989,1033,990,968,978],
[928,974,898,956,979,0,995,951,1006,984,950,947,949],
[957,960,964,921,983,1005,0,1024,993,1008,1049,987,994],
[951,1006,948,950,929,1049,976,0,974,955,1011,893,992],
[976,1036,960,1029,1011,994,1007,1026,0,1005,1022,909,1008],
[955,1032,934,1055,967,1016,992,1045,995,0,1028,972,970],
[929,991,973,977,1010,1050,951,989,978,972,0,921,980],
[988,1060,1091,1029,1032,1053,1013,1107,1091,1028,1079,0,1032],
[1020,1032,954,1062,1022,1051,1006,1008,992,1030,1020,968,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 73, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,985,995,966,960,987,1024,997,989,1013,1004,1036,1070],
[1015,0,1055,1004,1059,986,1001,1015,1011,1001,984,989,1085],
[1005,945,0,967,1004,984,1010,944,938,964,961,988,1030],
[1034,996,1033,0,977,1013,1014,993,1026,1011,1041,1019,1061],
[1040,941,996,1023,0,974,1029,1006,971,1007,983,1015,1037],
[1013,1014,1016,987,1026,0,1002,980,989,1021,1022,1019,1059],
[976,999,990,986,971,998,0,970,1000,944,1005,953,966],
[1003,985,1056,1007,994,1020,1030,0,987,1028,1010,982,1024],
[1011,989,1062,974,1029,1011,1000,1013,0,1000,1024,1038,1044],
[987,999,1036,989,993,979,1056,972,1000,0,1026,1021,1056],
[996,1016,1039,959,1017,978,995,990,976,974,0,1052,1015],
[964,1011,1012,981,985,981,1047,1018,962,979,948,0,974],
[930,915,970,939,963,941,1034,976,956,944,985,1026,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 74, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1030,1030,1039,974,1029,1015,1069,1030,1010,981,1016,1019],
[970,0,1024,994,1006,971,981,1022,986,1003,982,998,1001],
[970,976,0,986,1021,986,970,1023,980,990,993,985,979],
[961,1006,1014,0,1034,1002,1048,1052,992,1006,1005,1017,983],
[1026,994,979,966,0,1011,990,1078,1002,1019,988,1013,1006],
[971,1029,1014,998,989,0,1031,1066,1019,1010,1026,1009,976],
[985,1019,1030,952,1010,969,0,1020,1007,1008,972,1008,1003],
[931,978,977,948,922,934,980,0,960,942,965,981,954],
[970,1014,1020,1008,998,981,993,1040,0,1025,976,1001,988],
[990,997,1010,994,981,990,992,1058,975,0,983,1016,990],
[1019,1018,1007,995,1012,974,1028,1035,1024,1017,0,994,1002],
[984,1002,1015,983,987,991,992,1019,999,984,1006,0,984],
[981,999,1021,1017,994,1024,997,1046,1012,1010,998,1016,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 75, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,952,989,962,976,968,963,999,987,1002,1003,1000,974],
[1048,0,1056,1016,1013,1064,1050,1035,1016,1052,999,1042,1022],
[1011,944,0,969,984,989,934,991,971,977,964,997,964],
[1038,984,1031,0,1011,999,999,976,991,1013,999,953,978],
[1024,987,1016,989,0,996,1007,989,994,1011,965,1029,996],
[1032,936,1011,1001,1004,0,985,978,1002,1019,967,980,975],
[1037,950,1066,1001,993,1015,0,999,1009,995,975,1038,1041],
[1001,965,1009,1024,1011,1022,1001,0,995,1026,1004,1007,1005],
[1013,984,1029,1009,1006,998,991,1005,0,982,977,993,993],
[998,948,1023,987,989,981,1005,974,1018,0,981,1014,954],
[997,1001,1036,1001,1035,1033,1025,996,1023,1019,0,1036,960],
[1000,958,1003,1047,971,1020,962,993,1007,986,964,0,1014],
[1026,978,1036,1022,1004,1025,959,995,1007,1046,1040,986,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 76, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1033,1034,1049,1069,1012,1066,1023,1022,1049,1095,990,1010],
[967,0,1044,1029,1061,1068,1063,1025,1013,1028,1067,1045,1020],
[966,956,0,1015,1004,957,1008,982,992,1023,994,1005,969],
[951,971,985,0,1033,1009,994,1008,969,977,1010,1022,1021],
[931,939,996,967,0,918,1024,956,946,962,1001,998,975],
[988,932,1043,991,1082,0,996,1018,1024,982,1001,1014,993],
[934,937,992,1006,976,1004,0,1008,988,1030,1020,999,999],
[977,975,1018,992,1044,982,992,0,1032,976,1040,1034,1027],
[978,987,1008,1031,1054,976,1012,968,0,1003,1002,1005,1036],
[951,972,977,1023,1038,1018,970,1024,997,0,993,1034,998],
[905,933,1006,990,999,999,980,960,998,1007,0,961,994],
[1010,955,995,978,1002,986,1001,966,995,966,1039,0,995],
[990,980,1031,979,1025,1007,1001,973,964,1002,1006,1005,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 77, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,990,1049,980,1046,927,992,932,1058,1036,931,1062,1024],
[1010,0,986,1045,1001,1057,994,962,1011,1057,944,1015,973],
[951,1014,0,878,937,927,1095,917,898,1016,974,999,884],
[1020,955,1122,0,1046,1008,1034,1046,986,1046,988,1090,927],
[954,999,1063,954,0,1038,1099,1016,1060,1034,993,996,960],
[1073,943,1073,992,962,0,1016,957,964,1028,1067,1091,967],
[1008,1006,905,966,901,984,0,958,926,958,942,958,978],
[1068,1038,1083,954,984,1043,1042,0,979,1073,1124,1072,937],
[942,989,1102,1014,940,1036,1074,1021,0,1040,1049,1024,1021],
[964,943,984,954,966,972,1042,927,960,0,931,923,902],
[1069,1056,1026,1012,1007,933,1058,876,951,1069,0,1046,955],
[938,985,1001,910,1004,909,1042,928,976,1077,954,0,909],
[976,1027,1116,1073,1040,1033,1022,1063,979,1098,1045,1091,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 78, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1003,935,965,982,950,988,990,989,1017,1014,985,999],
[997,0,997,974,1004,979,991,961,980,1038,1016,1019,1007],
[1065,1003,0,1005,1016,972,1045,981,984,1020,1018,977,1018],
[1035,1026,995,0,1037,1024,1061,1013,997,1035,1017,990,1014],
[1018,996,984,963,0,982,965,960,983,1012,984,987,986],
[1050,1021,1028,976,1018,0,1032,996,1008,1004,997,978,1009],
[1012,1009,955,939,1035,968,0,971,1000,964,1008,938,980],
[1010,1039,1019,987,1040,1004,1029,0,1027,1006,1056,1019,1014],
[1011,1020,1016,1003,1017,992,1000,973,0,1017,1049,999,1001],
[983,962,980,965,988,996,1036,994,983,0,1005,1017,1015],
[986,984,982,983,1016,1003,992,944,951,995,0,967,1026],
[1015,981,1023,1010,1013,1022,1062,981,1001,983,1033,0,1002],
[1001,993,982,986,1014,991,1020,986,999,985,974,998,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 79, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1018,982,1022,981,1005,1042,994,1032,1022,968,1056,1019],
[982,0,974,965,984,976,992,1005,954,994,987,1048,1009],
[1018,1026,0,1044,1061,976,1016,1010,992,1022,1010,1041,1006],
[978,1035,956,0,993,1004,1027,990,989,1011,995,1032,1015],
[1019,1016,939,1007,0,943,964,976,951,1021,1025,993,997],
[995,1024,1024,996,1057,0,1050,1030,1032,1013,1042,1040,1055],
[958,1008,984,973,1036,950,0,993,1001,1011,977,997,977],
[1006,995,990,1010,1024,970,1007,0,986,1030,999,1023,984],
[968,1046,1008,1011,1049,968,999,1014,0,1007,1004,1013,1027],
[978,1006,978,989,979,987,989,970,993,0,991,1022,1015],
[1032,1013,990,1005,975,958,1023,1001,996,1009,0,977,993],
[944,952,959,968,1007,960,1003,977,987,978,1023,0,974],
[981,991,994,985,1003,945,1023,1016,973,985,1007,1026,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 80, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1041,991,953,1020,985,975,997,1011,1005,1010,1017,1002],
[959,0,994,961,998,974,978,910,949,964,965,1009,949],
[1009,1006,0,997,1053,957,998,988,989,967,994,982,983],
[1047,1039,1003,0,1058,980,980,1021,999,999,1012,990,978],
[980,1002,947,942,0,1023,974,958,1005,964,980,962,989],
[1015,1026,1043,1020,977,0,1008,1027,999,1006,958,1006,1006],
[1025,1022,1002,1020,1026,992,0,1045,990,983,1025,1019,959],
[1003,1090,1012,979,1042,973,955,0,1003,978,984,954,995],
[989,1051,1011,1001,995,1001,1010,997,0,1010,1023,996,970],
[995,1036,1033,1001,1036,994,1017,1022,990,0,996,988,1042],
[990,1035,1006,988,1020,1042,975,1016,977,1004,0,984,979],
[983,991,1018,1010,1038,994,981,1046,1004,1012,1016,0,993],
[998,1051,1017,1022,1011,994,1041,1005,1030,958,1021,1007,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 81, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1052,1002,1021,1017,1010,1031,1023,1042,994,990,1001,1038],
[948,0,960,967,965,989,966,1008,1008,957,970,983,982],
[998,1040,0,1031,1031,1000,1004,999,1023,1001,993,995,1001],
[979,1033,969,0,990,999,990,964,997,959,955,973,1013],
[983,1035,969,1010,0,988,1011,941,985,982,980,978,1014],
[990,1011,1000,1001,1012,0,1021,1002,998,982,1023,995,981],
[969,1034,996,1010,989,979,0,1000,1009,1004,1004,1014,1011],
[977,992,1001,1036,1059,998,1000,0,1032,985,1005,992,1014],
[958,992,977,1003,1015,1002,991,968,0,968,985,966,1008],
[1006,1043,999,1041,1018,1018,996,1015,1032,0,1030,992,1001],
[1010,1030,1007,1045,1020,977,996,995,1015,970,0,989,997],
[999,1017,1005,1027,1022,1005,986,1008,1034,1008,1011,0,1014],
[962,1018,999,987,986,1019,989,986,992,999,1003,986,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 82, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,949,992,986,1000,908,978,947,993,905,948,900,997],
[1051,0,1031,1045,1071,966,1040,1044,1054,960,999,1046,969],
[1008,969,0,1009,982,916,1049,950,1032,951,957,917,1002],
[1014,955,991,0,1026,904,955,1013,1032,941,1013,915,1043],
[1000,929,1018,974,0,951,989,954,1018,917,914,981,1004],
[1092,1034,1084,1096,1049,0,1156,1056,1124,1054,1014,940,1012],
[1022,960,951,1045,1011,844,0,938,1074,971,961,964,1023],
[1053,956,1050,987,1046,944,1062,0,1074,924,962,941,1022],
[1007,946,968,968,982,876,926,926,0,920,916,902,951],
[1095,1040,1049,1059,1083,946,1029,1076,1080,0,1005,981,1022],
[1052,1001,1043,987,1086,986,1039,1038,1084,995,0,984,1031],
[1100,954,1083,1085,1019,1060,1036,1059,1098,1019,1016,0,1010],
[1003,1031,998,957,996,988,977,978,1049,978,969,990,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 83, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1031,1028,1026,967,986,1005,1027,1046,1018,1026,1019,1017],
[969,0,967,988,947,977,986,999,952,1022,992,999,974],
[972,1033,0,1014,1008,993,1020,989,1028,1034,968,1004,1024],
[974,1012,986,0,970,1019,996,1018,1001,981,1013,989,1003],
[1033,1053,992,1030,0,1032,1016,1046,1020,1011,985,1005,1013],
[1014,1023,1007,981,968,0,1031,995,982,1035,995,990,1013],
[995,1014,980,1004,984,969,0,990,996,1004,1004,1023,981],
[973,1001,1011,982,954,1005,1010,0,997,1024,1004,1003,978],
[954,1048,972,999,980,1018,1004,1003,0,1047,990,991,998],
[982,978,966,1019,989,965,996,976,953,0,974,981,978],
[974,1008,1032,987,1015,1005,996,996,1010,1026,0,991,1000],
[981,1001,996,1011,995,1010,977,997,1009,1019,1009,0,984],
[983,1026,976,997,987,987,1019,1022,1002,1022,1000,1016,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 84, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,680,1671,724,650,1477,817,919,853,587,1190,877,1055],
[1320,0,1671,1124,762,1448,1073,748,1192,1281,1006,1397,1277],
[329,329,0,988,388,723,757,635,817,608,717,537,1009],
[1276,876,1012,0,649,846,729,743,537,560,1043,1054,630],
[1350,1238,1612,1351,0,1769,907,1126,1162,1109,1558,1359,1123],
[523,552,1277,1154,231,0,383,503,868,609,921,707,549],
[1183,927,1243,1271,1093,1617,0,1003,1125,1117,1361,837,788],
[1081,1252,1365,1257,874,1497,997,0,1005,1271,1372,1112,1137],
[1147,808,1183,1463,838,1132,875,995,0,1194,992,1226,1421],
[1413,719,1392,1440,891,1391,883,729,806,0,1182,1140,779],
[810,994,1283,957,442,1079,639,628,1008,818,0,720,1112],
[1123,603,1463,946,641,1293,1163,888,774,860,1280,0,850],
[945,723,991,1370,877,1451,1212,863,579,1221,888,1150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 85, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,958,929,1002,1062,1017,1025,979,969,937,940,938,958],
[1042,0,1018,1100,1086,1033,1078,1058,1042,1012,1083,978,1073],
[1071,982,0,1062,1048,1099,1046,1017,998,1080,1092,1004,1055],
[998,900,938,0,987,950,957,947,980,991,980,960,1024],
[938,914,952,1013,0,1011,975,950,945,957,948,940,942],
[983,967,901,1050,989,0,993,984,979,978,982,912,997],
[975,922,954,1043,1025,1007,0,976,993,1026,976,956,1019],
[1021,942,983,1053,1050,1016,1024,0,999,991,996,983,1040],
[1031,958,1002,1020,1055,1021,1007,1001,0,1003,1078,1004,982],
[1063,988,920,1009,1043,1022,974,1009,997,0,1079,983,994],
[1060,917,908,1020,1052,1018,1024,1004,922,921,0,968,998],
[1062,1022,996,1040,1060,1088,1044,1017,996,1017,1032,0,1008],
[1042,927,945,976,1058,1003,981,960,1018,1006,1002,992,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 86, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1001,1015,1005,1048,1026,1017,1016,1028,1059,996,1003,975],
[999,0,1057,1013,1052,1048,1025,1040,1040,1033,1007,1024,959],
[985,943,0,944,1009,994,1019,1027,1008,985,974,991,990],
[995,987,1056,0,1046,998,1036,1029,1023,1020,990,1028,992],
[952,948,991,954,0,969,947,961,949,965,950,968,943],
[974,952,1006,1002,1031,0,983,989,972,990,964,990,977],
[983,975,981,964,1053,1017,0,1018,1020,1013,954,1009,960],
[984,960,973,971,1039,1011,982,0,979,993,966,1018,975],
[972,960,992,977,1051,1028,980,1021,0,1006,969,989,963],
[941,967,1015,980,1035,1010,987,1007,994,0,995,1009,970],
[1004,993,1026,1010,1050,1036,1046,1034,1031,1005,0,1020,1007],
[997,976,1009,972,1032,1010,991,982,1011,991,980,0,966],
[1025,1041,1010,1008,1057,1023,1040,1025,1037,1030,993,1034,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 87, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,984,1012,1030,969,982,1028,995,1027,1042,997,1021,976],
[1016,0,1026,1023,999,1059,995,965,1044,998,1024,1010,982],
[988,974,0,1019,956,1005,1006,975,1044,1002,968,991,984],
[970,977,981,0,978,994,1004,932,999,974,976,965,969],
[1031,1001,1044,1022,0,968,996,983,1022,996,1006,1014,985],
[1018,941,995,1006,1032,0,1019,1006,1026,1020,1000,1002,995],
[972,1005,994,996,1004,981,0,958,1021,995,955,1005,992],
[1005,1035,1025,1068,1017,994,1042,0,1074,981,982,1025,985],
[973,956,956,1001,978,974,979,926,0,992,1000,952,935],
[958,1002,998,1026,1004,980,1005,1019,1008,0,977,971,967],
[1003,976,1032,1024,994,1000,1045,1018,1000,1023,0,1007,1011],
[979,990,1009,1035,986,998,995,975,1048,1029,993,0,984],
[1024,1018,1016,1031,1015,1005,1008,1015,1065,1033,989,1016,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 88, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,996,1034,1001,1049,1005,1036,1018,1013,1022,1025,1032,976],
[1004,0,984,1015,983,991,977,1001,980,1008,1012,994,949],
[966,1016,0,1020,999,978,1031,1026,926,987,1034,986,956],
[999,985,980,0,993,961,1002,1024,969,1034,1028,996,929],
[951,1017,1001,1007,0,970,1001,1010,988,1021,999,995,966],
[995,1009,1022,1039,1030,0,1020,1032,984,1038,1061,1021,1004],
[964,1023,969,998,999,980,0,1051,966,971,1033,975,961],
[982,999,974,976,990,968,949,0,977,979,1021,1012,969],
[987,1020,1074,1031,1012,1016,1034,1023,0,1010,1031,1042,1006],
[978,992,1013,966,979,962,1029,1021,990,0,1029,1009,987],
[975,988,966,972,1001,939,967,979,969,971,0,995,937],
[968,1006,1014,1004,1005,979,1025,988,958,991,1005,0,986],
[1024,1051,1044,1071,1034,996,1039,1031,994,1013,1063,1014,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 89, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1006,987,974,1010,1012,992,1006,993,979,970,972,981],
[994,0,992,1022,1049,996,1040,1000,979,1019,997,1012,973],
[1013,1008,0,1010,998,1040,1022,1012,1014,1043,1019,1003,984],
[1026,978,990,0,995,999,939,981,983,1002,1018,999,983],
[990,951,1002,1005,0,1005,984,987,983,1043,999,1006,1008],
[988,1004,960,1001,995,0,1015,1011,978,1010,1027,982,960],
[1008,960,978,1061,1016,985,0,1001,1008,1052,1008,1026,1004],
[994,1000,988,1019,1013,989,999,0,972,1037,1048,982,981],
[1007,1021,986,1017,1017,1022,992,1028,0,1045,1014,985,1025],
[1021,981,957,998,957,990,948,963,955,0,976,1022,960],
[1030,1003,981,982,1001,973,992,952,986,1024,0,979,996],
[1028,988,997,1001,994,1018,974,1018,1015,978,1021,0,983],
[1019,1027,1016,1017,992,1040,996,1019,975,1040,1004,1017,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 90, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,988,952,957,899,953,1016,971,929,938,946,888,995],
[1012,0,1047,932,851,1001,988,1031,939,1014,868,880,988],
[1048,953,0,1115,996,1018,991,1055,1053,916,1007,937,1028],
[1043,1068,885,0,875,963,892,946,892,904,838,822,964],
[1101,1149,1004,1125,0,1134,1062,991,1111,1019,1049,987,1044],
[1047,999,982,1037,866,0,928,1016,958,935,930,849,1107],
[984,1012,1009,1108,938,1072,0,1014,943,977,910,977,942],
[1029,969,945,1054,1009,984,986,0,913,1003,1071,914,1022],
[1071,1061,947,1108,889,1042,1057,1087,0,1028,1034,1010,1031],
[1062,986,1084,1096,981,1065,1023,997,972,0,927,933,1019],
[1054,1132,993,1162,951,1070,1090,929,966,1073,0,961,1012],
[1112,1120,1063,1178,1013,1151,1023,1086,990,1067,1039,0,1062],
[1005,1012,972,1036,956,893,1058,978,969,981,988,938,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 91, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1012,945,965,985,960,1002,895,1039,1025,995,1056,1004],
[988,0,936,875,952,1008,921,854,932,961,921,961,944],
[1055,1064,0,1019,1063,1017,1008,993,1004,1065,1036,1079,1041],
[1035,1125,981,0,1048,1020,1018,1005,1035,1030,1057,1034,1006],
[1015,1048,937,952,0,1007,960,992,1054,993,1043,1016,990],
[1040,992,983,980,993,0,968,956,999,970,1011,1014,1044],
[998,1079,992,982,1040,1032,0,1035,1069,996,1032,1055,1024],
[1105,1146,1007,995,1008,1044,965,0,1084,1035,1032,1070,1020],
[961,1068,996,965,946,1001,931,916,0,964,945,1059,967],
[975,1039,935,970,1007,1030,1004,965,1036,0,1019,1016,1020],
[1005,1079,964,943,957,989,968,968,1055,981,0,1045,995],
[944,1039,921,966,984,986,945,930,941,984,955,0,972],
[996,1056,959,994,1010,956,976,980,1033,980,1005,1028,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 92, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1071,1118,957,1044,1017,983,1035,1033,985,1004,1027,940],
[929,0,1017,899,924,972,956,960,965,799,988,876,1051],
[882,983,0,862,1019,922,1019,1020,909,887,928,939,1028],
[1043,1101,1138,0,972,1006,1012,1043,1014,1005,1083,1021,1008],
[956,1076,981,1028,0,1008,1034,1006,1020,996,948,1044,932],
[983,1028,1078,994,992,0,981,978,1040,858,988,973,959],
[1017,1044,981,988,966,1019,0,1093,966,915,1082,925,1065],
[965,1040,980,957,994,1022,907,0,1019,819,970,975,1033],
[967,1035,1091,986,980,960,1034,981,0,1028,999,1075,942],
[1015,1201,1113,995,1004,1142,1085,1181,972,0,1030,1146,1107],
[996,1012,1072,917,1052,1012,918,1030,1001,970,0,1044,1025],
[973,1124,1061,979,956,1027,1075,1025,925,854,956,0,1123],
[1060,949,972,992,1068,1041,935,967,1058,893,975,877,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 93, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1052,1097,1050,1000,1023,1077,1021,1068,994,1037,1053,1013],
[948,0,1005,958,1032,966,1040,1019,973,1030,1030,1027,983],
[903,995,0,1047,1016,1015,1086,998,1032,985,1074,1036,1014],
[950,1042,953,0,989,1023,1004,1015,1005,974,1004,1009,1009],
[1000,968,984,1011,0,976,943,1006,1013,972,972,1011,986],
[977,1034,985,977,1024,0,1008,1008,979,1014,988,942,1017],
[923,960,914,996,1057,992,0,975,933,982,987,937,982],
[979,981,1002,985,994,992,1025,0,999,1001,1034,1028,962],
[932,1027,968,995,987,1021,1067,1001,0,1024,1017,992,968],
[1006,970,1015,1026,1028,986,1018,999,976,0,984,950,967],
[963,970,926,996,1028,1012,1013,966,983,1016,0,998,969],
[947,973,964,991,989,1058,1063,972,1008,1050,1002,0,992],
[987,1017,986,991,1014,983,1018,1038,1032,1033,1031,1008,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 94, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1045,1030,1051,1065,1051,1034,1027,1033,1000,1002,1037,1027],
[955,0,1000,1002,1005,1054,968,1039,1031,967,1000,1004,1043],
[970,1000,0,1027,1025,1001,970,1019,1003,968,985,1020,1052],
[949,998,973,0,980,979,977,988,921,947,1014,980,1005],
[935,995,975,1020,0,991,956,1031,964,986,970,1045,1072],
[949,946,999,1021,1009,0,1028,992,919,921,1001,970,1041],
[966,1032,1030,1023,1044,972,0,1057,950,931,1043,991,1091],
[973,961,981,1012,969,1008,943,0,951,938,950,999,984],
[967,969,997,1079,1036,1081,1050,1049,0,959,1015,1071,1053],
[1000,1033,1032,1053,1014,1079,1069,1062,1041,0,1058,1042,1069],
[998,1000,1015,986,1030,999,957,1050,985,942,0,997,1020],
[963,996,980,1020,955,1030,1009,1001,929,958,1003,0,1005],
[973,957,948,995,928,959,909,1016,947,931,980,995,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 95, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1084,1010,1062,996,1025,996,998,1091,979,1075,1083,1008],
[916,0,938,935,997,991,972,945,997,943,942,1036,975],
[990,1062,0,1034,1002,1062,1043,1033,1046,986,1107,1009,953],
[938,1065,966,0,1010,1001,946,998,993,932,971,1019,930],
[1004,1003,998,990,0,1002,974,944,1031,987,1044,1046,933],
[975,1009,938,999,998,0,950,877,973,935,1038,1024,936],
[1004,1028,957,1054,1026,1050,0,1017,1074,944,1019,1034,999],
[1002,1055,967,1002,1056,1123,983,0,1043,1015,1099,1069,976],
[909,1003,954,1007,969,1027,926,957,0,889,958,1042,901],
[1021,1057,1014,1068,1013,1065,1056,985,1111,0,1121,1060,987],
[925,1058,893,1029,956,962,981,901,1042,879,0,984,915],
[917,964,991,981,954,976,966,931,958,940,1016,0,891],
[992,1025,1047,1070,1067,1064,1001,1024,1099,1013,1085,1109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 96, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1000,1023,972,1007,968,985,1020,950,973,997,976,917],
[1000,0,1075,1057,1025,943,1013,1019,999,1030,1036,1043,1041],
[977,925,0,999,960,935,978,1007,1003,1020,1028,991,999],
[1028,943,1001,0,1031,968,968,998,997,1007,990,982,965],
[993,975,1040,969,0,973,997,1011,1011,979,1040,1058,964],
[1032,1057,1065,1032,1027,0,1047,999,1003,1048,1041,1034,1017],
[1015,987,1022,1032,1003,953,0,1025,1013,1018,979,989,964],
[980,981,993,1002,989,1001,975,0,1017,984,986,1003,975],
[1050,1001,997,1003,989,997,987,983,0,932,985,1047,947],
[1027,970,980,993,1021,952,982,1016,1068,0,1000,1030,967],
[1003,964,972,1010,960,959,1021,1014,1015,1000,0,1031,987],
[1024,957,1009,1018,942,966,1011,997,953,970,969,0,963],
[1083,959,1001,1035,1036,983,1036,1025,1053,1033,1013,1037,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 97, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1041,1040,1061,1031,1037,982,1058,1046,997,1004,998,1026],
[959,0,1012,974,1021,956,1000,986,996,944,993,1003,939],
[960,988,0,1030,1048,973,1007,1024,1030,1031,997,929,948],
[939,1026,970,0,1037,926,984,1034,1032,1003,934,977,980],
[969,979,952,963,0,1039,1000,984,1024,1052,1033,990,978],
[963,1044,1027,1074,961,0,1027,1073,1059,1042,1017,984,983],
[1018,1000,993,1016,1000,973,0,1021,1051,938,1032,995,979],
[942,1014,976,966,1016,927,979,0,983,996,977,972,928],
[954,1004,970,968,976,941,949,1017,0,961,1006,965,966],
[1003,1056,969,997,948,958,1062,1004,1039,0,1003,959,992],
[996,1007,1003,1066,967,983,968,1023,994,997,0,1003,960],
[1002,997,1071,1023,1010,1016,1005,1028,1035,1041,997,0,914],
[974,1061,1052,1020,1022,1017,1021,1072,1034,1008,1040,1086,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 98, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,980,936,955,986,987,1028,973,998,992,975,945,960],
[1020,0,948,977,1037,998,1052,1017,997,1049,964,997,999],
[1064,1052,0,1017,1051,1047,1053,1031,1041,1055,998,1015,1029],
[1045,1023,983,0,1039,1031,1069,1012,1031,1048,986,1016,1005],
[1014,963,949,961,0,971,1043,980,982,992,926,954,920],
[1013,1002,953,969,1029,0,1064,986,1048,1026,967,969,1009],
[972,948,947,931,957,936,0,950,965,986,908,919,974],
[1027,983,969,988,1020,1014,1050,0,1003,1026,945,970,992],
[1002,1003,959,969,1018,952,1035,997,0,1009,954,946,966],
[1008,951,945,952,1008,974,1014,974,991,0,925,964,977],
[1025,1036,1002,1014,1074,1033,1092,1055,1046,1075,0,974,1022],
[1055,1003,985,984,1046,1031,1081,1030,1054,1036,1026,0,1027],
[1040,1001,971,995,1080,991,1026,1008,1034,1023,978,973,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 99, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1017,1015,1014,974,1029,931,1033,995,972,944,971,977],
[983,0,1044,978,1009,1056,939,996,984,1036,1045,961,925],
[985,956,0,979,992,1020,937,1025,931,971,1023,949,955],
[986,1022,1021,0,1059,1069,984,1022,1007,1011,1046,1012,1007],
[1026,991,1008,941,0,1029,964,1001,944,978,1011,953,933],
[971,944,980,931,971,0,882,966,929,990,971,940,934],
[1069,1061,1063,1016,1036,1118,0,1110,1041,1038,1040,1052,976],
[967,1004,975,978,999,1034,890,0,959,962,989,1008,946],
[1005,1016,1069,993,1056,1071,959,1041,0,1025,986,1020,976],
[1028,964,1029,989,1022,1010,962,1038,975,0,1013,983,996],
[1056,955,977,954,989,1029,960,1011,1014,987,0,990,1039],
[1029,1039,1051,988,1047,1060,948,992,980,1017,1010,0,987],
[1023,1075,1045,993,1067,1066,1024,1054,1024,1004,961,1013,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 100, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,987,1022,973,994,966,1032,1032,1038,1002,956,975,1049],
[1013,0,1021,1028,975,950,972,1012,1000,980,975,1058,1044],
[978,979,0,1030,968,947,926,992,955,951,937,1000,994],
[1027,972,970,0,1011,977,1018,1001,1002,944,975,1027,1035],
[1006,1025,1032,989,0,1007,985,1059,1011,1015,1005,1039,1037],
[1034,1050,1053,1023,993,0,1044,1034,1020,998,999,1079,1031],
[968,1028,1074,982,1015,956,0,1048,1039,1015,1020,1002,1104],
[968,988,1008,999,941,966,952,0,954,953,985,994,982],
[962,1000,1045,998,989,980,961,1046,0,949,978,1055,1062],
[998,1020,1049,1056,985,1002,985,1047,1051,0,977,1058,1039],
[1044,1025,1063,1025,995,1001,980,1015,1022,1023,0,1071,1053],
[1025,942,1000,973,961,921,998,1006,945,942,929,0,975],
[951,956,1006,965,963,969,896,1018,938,961,947,1025,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 101, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1000,995,994,989,980,979,1022,1006,1001,1000,1010,993],
[1000,0,1014,1004,987,979,999,1001,978,992,992,1004,988],
[1005,986,0,1010,967,1012,993,1002,994,965,989,1025,1002],
[1006,996,990,0,966,982,999,973,985,999,987,992,1020],
[1011,1013,1033,1034,0,1010,1034,1010,998,1000,1041,1014,1026],
[1020,1021,988,1018,990,0,1001,1017,1010,971,1044,1031,1004],
[1021,1001,1007,1001,966,999,0,1007,991,976,987,1029,1023],
[978,999,998,1027,990,983,993,0,978,996,1046,1037,990],
[994,1022,1006,1015,1002,990,1009,1022,0,996,988,999,1002],
[999,1008,1035,1001,1000,1029,1024,1004,1004,0,1007,1019,1008],
[1000,1008,1011,1013,959,956,1013,954,1012,993,0,1012,1013],
[990,996,975,1008,986,969,971,963,1001,981,988,0,982],
[1007,1012,998,980,974,996,977,1010,998,992,987,1018,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 102, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,975,938,1029,955,978,935,967,939,1018,949,1004,987],
[1025,0,1012,1023,972,1026,958,995,990,1015,959,1013,998],
[1062,988,0,1066,977,1017,1002,1015,1001,1016,961,1008,1048],
[971,977,934,0,951,998,933,971,963,989,957,961,989],
[1045,1028,1023,1049,0,1029,976,1025,987,1027,970,1040,1007],
[1022,974,983,1002,971,0,976,995,976,1029,976,995,996],
[1065,1042,998,1067,1024,1024,0,1044,1022,1046,1035,1011,1039],
[1033,1005,985,1029,975,1005,956,0,1007,1038,995,986,983],
[1061,1010,999,1037,1013,1024,978,993,0,1023,988,1039,1020],
[982,985,984,1011,973,971,954,962,977,0,981,973,994],
[1051,1041,1039,1043,1030,1024,965,1005,1012,1019,0,1035,1075],
[996,987,992,1039,960,1005,989,1014,961,1027,965,0,985],
[1013,1002,952,1011,993,1004,961,1017,980,1006,925,1015,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 103, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,978,988,1004,1030,1006,1006,1020,1013,1020,1032,1013,1008],
[1022,0,986,1012,1047,1002,1026,995,1066,1044,1013,997,1037],
[1012,1014,0,982,1036,1053,1042,1054,1018,1041,1014,988,1045],
[996,988,1018,0,1037,1044,1003,1011,1029,1039,1039,1027,1052],
[970,953,964,963,0,1001,974,997,973,989,973,988,991],
[994,998,947,956,999,0,972,1016,965,991,986,972,1001],
[994,974,958,997,1026,1028,0,1004,1050,1040,999,982,1018],
[980,1005,946,989,1003,984,996,0,992,988,992,969,993],
[987,934,982,971,1027,1035,950,1008,0,1023,987,978,999],
[980,956,959,961,1011,1009,960,1012,977,0,972,978,997],
[968,987,986,961,1027,1014,1001,1008,1013,1028,0,1019,994],
[987,1003,1012,973,1012,1028,1018,1031,1022,1022,981,0,1006],
[992,963,955,948,1009,999,982,1007,1001,1003,1006,994,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 104, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1021,1007,958,991,1060,1008,930,989,956,979,1015,1029],
[979,0,998,979,1068,1036,992,958,966,1044,922,960,1037],
[993,1002,0,988,1042,1079,973,930,984,986,946,948,979],
[1042,1021,1012,0,1077,1090,1026,1009,1003,1023,971,1035,1036],
[1009,932,958,923,0,1039,998,908,975,1041,985,899,981],
[940,964,921,910,961,0,956,927,939,1000,950,935,965],
[992,1008,1027,974,1002,1044,0,976,947,1016,984,974,1007],
[1070,1042,1070,991,1092,1073,1024,0,1014,1057,978,992,1078],
[1011,1034,1016,997,1025,1061,1053,986,0,1075,1002,983,1022],
[1044,956,1014,977,959,1000,984,943,925,0,981,981,1007],
[1021,1078,1054,1029,1015,1050,1016,1022,998,1019,0,1040,1016],
[985,1040,1052,965,1101,1065,1026,1008,1017,1019,960,0,1106],
[971,963,1021,964,1019,1035,993,922,978,993,984,894,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 105, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1030,1055,1042,1050,1025,1033,1022,973,1037,1054,1010,1043],
[970,0,1034,992,1037,1007,980,993,1022,998,1021,989,1019],
[945,966,0,948,994,1006,996,981,991,970,995,956,990],
[958,1008,1052,0,1025,1039,1006,1004,1016,1026,1027,1008,1014],
[950,963,1006,975,0,990,957,947,984,974,998,962,976],
[975,993,994,961,1010,0,986,972,981,985,953,982,974],
[967,1020,1004,994,1043,1014,0,992,965,1021,995,982,1042],
[978,1007,1019,996,1053,1028,1008,0,1019,981,1052,992,1059],
[1027,978,1009,984,1016,1019,1035,981,0,1005,1005,1013,1000],
[963,1002,1030,974,1026,1015,979,1019,995,0,988,1004,998],
[946,979,1005,973,1002,1047,1005,948,995,1012,0,1002,1024],
[990,1011,1044,992,1038,1018,1018,1008,987,996,998,0,1015],
[957,981,1010,986,1024,1026,958,941,1000,1002,976,985,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 106, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1005,973,1051,1009,1031,1020,990,992,960,966,1005,988],
[995,0,976,1013,974,1053,1014,1005,1004,989,998,1003,1001],
[1027,1024,0,1060,1013,1027,1055,1054,1036,1032,1019,999,1024],
[949,987,940,0,979,1007,967,1004,967,952,978,938,991],
[991,1026,987,1021,0,1017,991,1021,1012,972,989,985,1058],
[969,947,973,993,983,0,1011,975,994,993,990,978,1000],
[980,986,945,1033,1009,989,0,1026,997,1007,984,987,1013],
[1010,995,946,996,979,1025,974,0,983,975,969,977,944],
[1008,996,964,1033,988,1006,1003,1017,0,981,978,952,1017],
[1040,1011,968,1048,1028,1007,993,1025,1019,0,1050,1011,999],
[1034,1002,981,1022,1011,1010,1016,1031,1022,950,0,966,1013],
[995,997,1001,1062,1015,1022,1013,1023,1048,989,1034,0,1024],
[1012,999,976,1009,942,1000,987,1056,983,1001,987,976,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 107, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,994,998,967,932,883,946,965,942,1016,961,1002,902],
[1006,0,1026,995,1012,985,996,1054,1014,1023,1038,1071,992],
[1002,974,0,974,944,937,947,965,964,988,981,1003,972],
[1033,1005,1026,0,971,948,979,1009,991,1020,1047,1049,1024],
[1068,988,1056,1029,0,1000,1031,1050,1042,1034,1089,1047,1024],
[1117,1015,1063,1052,1000,0,1040,990,1066,1037,1039,1043,1066],
[1054,1004,1053,1021,969,960,0,1013,1010,1007,1063,1020,1032],
[1035,946,1035,991,950,1010,987,0,994,991,1001,1017,984],
[1058,986,1036,1009,958,934,990,1006,0,1040,991,1066,1007],
[984,977,1012,980,966,963,993,1009,960,0,997,1011,1011],
[1039,962,1019,953,911,961,937,999,1009,1003,0,1006,1032],
[998,929,997,951,953,957,980,983,934,989,994,0,963],
[1098,1008,1028,976,976,934,968,1016,993,989,968,1037,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 108, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,999,1064,985,1002,954,998,918,975,995,970,1033,1000],
[1001,0,955,944,964,962,982,917,951,963,994,1000,948],
[936,1045,0,987,990,960,1001,922,906,952,897,1005,976],
[1015,1056,1013,0,1059,985,1008,926,1011,1026,944,984,973],
[998,1036,1010,941,0,1011,1019,982,1030,1031,1023,1052,1029],
[1046,1038,1040,1015,989,0,1027,973,1001,1046,986,1052,1032],
[1002,1018,999,992,981,973,0,961,974,992,975,955,1011],
[1082,1083,1078,1074,1018,1027,1039,0,998,1010,978,1109,1066],
[1025,1049,1094,989,970,999,1026,1002,0,1028,1003,1085,1033],
[1005,1037,1048,974,969,954,1008,990,972,0,1029,1050,1013],
[1030,1006,1103,1056,977,1014,1025,1022,997,971,0,1051,1026],
[967,1000,995,1016,948,948,1045,891,915,950,949,0,1011],
[1000,1052,1024,1027,971,968,989,934,967,987,974,989,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 109, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1008,1021,952,993,1023,1022,987,996,1017,989,1016,994],
[992,0,1021,981,975,1019,1021,980,988,1024,981,985,1014],
[979,979,0,987,996,995,995,989,995,1026,1006,1014,988],
[1048,1019,1013,0,1052,1005,1005,996,994,1030,1012,1012,1008],
[1007,1025,1004,948,0,1006,968,991,970,1046,956,994,988],
[977,981,1005,995,994,0,974,985,984,1008,1019,1021,995],
[978,979,1005,995,1032,1026,0,976,989,1023,1026,1005,972],
[1013,1020,1011,1004,1009,1015,1024,0,1000,1032,995,1006,1012],
[1004,1012,1005,1006,1030,1016,1011,1000,0,997,1018,1000,988],
[983,976,974,970,954,992,977,968,1003,0,931,967,956],
[1011,1019,994,988,1044,981,974,1005,982,1069,0,1011,997],
[984,1015,986,988,1006,979,995,994,1000,1033,989,0,1002],
[1006,986,1012,992,1012,1005,1028,988,1012,1044,1003,998,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 110, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1003,962,949,968,951,958,1004,986,989,963,994,999],
[997,0,976,974,966,975,1004,988,981,954,1015,976,976],
[1038,1024,0,1013,991,1014,1004,1011,1032,1017,985,1028,1022],
[1051,1026,987,0,973,971,977,979,1012,997,977,1019,984],
[1032,1034,1009,1027,0,999,1010,1006,950,1000,976,997,1046],
[1049,1025,986,1029,1001,0,1021,1027,1029,1006,1016,1018,1044],
[1042,996,996,1023,990,979,0,1021,998,1038,999,1001,995],
[996,1012,989,1021,994,973,979,0,1005,1006,1029,958,995],
[1014,1019,968,988,1050,971,1002,995,0,974,975,1007,969],
[1011,1046,983,1003,1000,994,962,994,1026,0,1023,987,1021],
[1037,985,1015,1023,1024,984,1001,971,1025,977,0,993,1038],
[1006,1024,972,981,1003,982,999,1042,993,1013,1007,0,1029],
[1001,1024,978,1016,954,956,1005,1005,1031,979,962,971,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 111, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1142,1225,908,1011,1182,1091,1129,922,1006,1169,1069,919],
[858,0,1040,864,829,1010,953,1140,916,782,1024,841,870],
[775,960,0,822,956,914,920,1160,905,967,1006,892,787],
[1092,1136,1178,0,1096,1320,1157,1372,1053,1170,1254,1068,968],
[989,1171,1044,904,0,1164,1093,1093,1068,1027,1053,998,826],
[818,990,1086,680,836,0,981,887,881,874,1150,936,776],
[909,1047,1080,843,907,1019,0,1082,886,941,1051,848,1015],
[871,860,840,628,907,1113,918,0,913,971,1022,924,812],
[1078,1084,1095,947,932,1119,1114,1087,0,979,1086,991,827],
[994,1218,1033,830,973,1126,1059,1029,1021,0,1255,1136,1024],
[831,976,994,746,947,850,949,978,914,745,0,826,710],
[931,1159,1108,932,1002,1064,1152,1076,1009,864,1174,0,915],
[1081,1130,1213,1032,1174,1224,985,1188,1173,976,1290,1085,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 112, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,973,1002,1006,989,984,1011,1021,1007,990,1008,985,976],
[1027,0,975,989,979,970,981,1007,972,999,1011,965,959],
[998,1025,0,1023,1001,991,993,998,968,994,1026,1003,960],
[994,1011,977,0,968,987,966,984,963,980,996,1010,980],
[1011,1021,999,1032,0,1018,1007,1004,1007,1016,1030,1033,1011],
[1016,1030,1009,1013,982,0,1002,1024,1001,1027,1023,1016,997],
[989,1019,1007,1034,993,998,0,981,1013,996,1016,1016,990],
[979,993,1002,1016,996,976,1019,0,1008,991,1010,1013,976],
[993,1028,1032,1037,993,999,987,992,0,1006,992,1016,1002],
[1010,1001,1006,1020,984,973,1004,1009,994,0,1020,992,982],
[992,989,974,1004,970,977,984,990,1008,980,0,991,958],
[1015,1035,997,990,967,984,984,987,984,1008,1009,0,992],
[1024,1041,1040,1020,989,1003,1010,1024,998,1018,1042,1008,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 113, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1024,977,1004,988,988,1014,1010,1022,1018,1024,1020,965],
[976,0,977,959,979,994,1010,999,980,987,996,997,968],
[1023,1023,0,992,1007,993,1014,1007,1031,1055,1040,998,1053],
[996,1041,1008,0,1033,1042,1046,1041,1039,1059,1038,1022,1019],
[1012,1021,993,967,0,1017,1001,1018,1005,1019,1029,965,1008],
[1012,1006,1007,958,983,0,988,992,1003,994,997,990,1003],
[986,990,986,954,999,1012,0,1011,1041,1018,1009,982,985],
[990,1001,993,959,982,1008,989,0,975,1023,974,952,994],
[978,1020,969,961,995,997,959,1025,0,1005,958,969,984],
[982,1013,945,941,981,1006,982,977,995,0,1007,965,996],
[976,1004,960,962,971,1003,991,1026,1042,993,0,953,1008],
[980,1003,1002,978,1035,1010,1018,1048,1031,1035,1047,0,1021],
[1035,1032,947,981,992,997,1015,1006,1016,1004,992,979,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 114, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,878,911,932,1021,893,1007,997,1063,923,851,864,1022],
[1122,0,973,1023,1072,1050,1018,1094,1164,1008,948,1018,1054],
[1089,1027,0,928,1081,989,1040,1028,1164,997,1030,1051,1030],
[1068,977,1072,0,1107,1039,1095,1096,1226,1080,1062,1090,1118],
[979,928,919,893,0,834,956,969,1074,932,885,949,956],
[1107,950,1011,961,1166,0,1068,1044,1184,1004,1011,1058,1060],
[993,982,960,905,1044,932,0,1014,1078,953,859,983,991],
[1003,906,972,904,1031,956,986,0,1112,894,926,1031,1010],
[937,836,836,774,926,816,922,888,0,892,862,879,936],
[1077,992,1003,920,1068,996,1047,1106,1108,0,944,995,989],
[1149,1052,970,938,1115,989,1141,1074,1138,1056,0,1073,1037],
[1136,982,949,910,1051,942,1017,969,1121,1005,927,0,1015],
[978,946,970,882,1044,940,1009,990,1064,1011,963,985,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 115, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1017,1018,993,995,1007,964,972,1024,1022,1015,994,996],
[983,0,974,994,1010,1021,958,1011,1026,1017,999,1007,1006],
[982,1026,0,1001,994,1013,948,985,1009,1015,1028,998,992],
[1007,1006,999,0,997,1000,969,1037,1005,1020,992,963,989],
[1005,990,1006,1003,0,1018,1002,999,1012,1022,1017,988,1029],
[993,979,987,1000,982,0,963,990,991,1017,975,968,980],
[1036,1042,1052,1031,998,1037,0,1007,1035,1048,1030,989,1023],
[1028,989,1015,963,1001,1010,993,0,1020,1016,1022,985,977],
[976,974,991,995,988,1009,965,980,0,1006,1016,967,1022],
[978,983,985,980,978,983,952,984,994,0,1013,977,997],
[985,1001,972,1008,983,1025,970,978,984,987,0,981,1008],
[1006,993,1002,1037,1012,1032,1011,1015,1033,1023,1019,0,1013],
[1004,994,1008,1011,971,1020,977,1023,978,1003,992,987,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 116, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1029,1028,1003,999,987,1027,1006,994,996,1009,1027,1017],
[971,0,960,958,950,955,962,975,924,959,949,979,1005],
[972,1040,0,987,1021,1014,1006,1002,993,1021,986,1014,1067],
[997,1042,1013,0,1024,1003,1012,1007,1000,977,998,1020,1024],
[1001,1050,979,976,0,994,994,996,990,943,978,1007,1037],
[1013,1045,986,997,1006,0,1002,1019,1000,991,1007,1031,1010],
[973,1038,994,988,1006,998,0,999,972,1009,1007,1017,1049],
[994,1025,998,993,1004,981,1001,0,981,969,997,1031,1036],
[1006,1076,1007,1000,1010,1000,1028,1019,0,1017,992,1037,1066],
[1004,1041,979,1023,1057,1009,991,1031,983,0,994,1034,1041],
[991,1051,1014,1002,1022,993,993,1003,1008,1006,0,1039,1060],
[973,1021,986,980,993,969,983,969,963,966,961,0,1007],
[983,995,933,976,963,990,951,964,934,959,940,993,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 117, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,972,990,1007,1021,1001,1027,977,973,987,1016,963,1002],
[1028,0,983,1005,1008,1014,1050,1000,1035,1015,1025,995,1048],
[1010,1017,0,1031,1033,1017,1004,982,1002,991,992,990,1036],
[993,995,969,0,1000,975,1006,1017,999,1007,988,978,1044],
[979,992,967,1000,0,967,1023,971,970,991,992,969,1004],
[999,986,983,1025,1033,0,1040,1021,984,995,1013,972,1043],
[973,950,996,994,977,960,0,961,985,997,944,982,1004],
[1023,1000,1018,983,1029,979,1039,0,1016,1003,992,1001,1048],
[1027,965,998,1001,1030,1016,1015,984,0,987,1005,978,1018],
[1013,985,1009,993,1009,1005,1003,997,1013,0,1027,994,1021],
[984,975,1008,1012,1008,987,1056,1008,995,973,0,972,1055],
[1037,1005,1010,1022,1031,1028,1018,999,1022,1006,1028,0,1023],
[998,952,964,956,996,957,996,952,982,979,945,977,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 118, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,985,997,1028,1028,998,1025,978,1014,1001,1064,1023,988],
[1015,0,1009,1049,1023,1007,1049,1006,1009,1027,1020,1030,966],
[1003,991,0,1018,1029,979,1006,1002,981,1005,1000,994,990],
[972,951,982,0,1033,1009,1013,983,985,998,1005,992,946],
[972,977,971,967,0,959,978,966,963,986,1024,1019,958],
[1002,993,1021,991,1041,0,1027,1043,1022,1014,1033,997,1003],
[975,951,994,987,1022,973,0,962,952,986,990,985,987],
[1022,994,998,1017,1034,957,1038,0,998,1024,1009,1020,989],
[986,991,1019,1015,1037,978,1048,1002,0,1015,1047,1037,934],
[999,973,995,1002,1014,986,1014,976,985,0,1015,995,963],
[936,980,1000,995,976,967,1010,991,953,985,0,983,940],
[977,970,1006,1008,981,1003,1015,980,963,1005,1017,0,982],
[1012,1034,1010,1054,1042,997,1013,1011,1066,1037,1060,1018,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 119, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1006,973,1027,983,1045,1039,1025,1048,1041,1043,1024,1034],
[994,0,986,979,995,1016,1021,1003,1011,1006,1019,1013,1026],
[1027,1014,0,1015,1008,1056,1041,999,1040,1018,1028,1065,1034],
[973,1021,985,0,981,1035,1043,1005,1049,1029,1003,1063,1017],
[1017,1005,992,1019,0,1028,1012,1002,1016,1008,1029,1021,1042],
[955,984,944,965,972,0,1034,984,999,1036,1007,1036,999],
[961,979,959,957,988,966,0,951,979,1000,965,1017,1014],
[975,997,1001,995,998,1016,1049,0,1048,1025,1029,1053,1062],
[952,989,960,951,984,1001,1021,952,0,998,992,1022,988],
[959,994,982,971,992,964,1000,975,1002,0,1003,1014,1008],
[957,981,972,997,971,993,1035,971,1008,997,0,1054,1019],
[976,987,935,937,979,964,983,947,978,986,946,0,993],
[966,974,966,983,958,1001,986,938,1012,992,981,1007,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 120, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,975,1011,957,1010,952,949,960,962,1015,961,951,963],
[1025,0,996,969,1043,955,977,995,1017,1001,979,997,983],
[989,1004,0,945,993,936,927,988,979,988,969,979,985],
[1043,1031,1055,0,1023,1001,997,998,1012,1046,1044,1018,966],
[990,957,1007,977,0,945,947,936,992,1000,985,932,946],
[1048,1045,1064,999,1055,0,1019,1020,1032,1010,1025,997,1007],
[1051,1023,1073,1003,1053,981,0,1011,1039,1009,1037,1017,1031],
[1040,1005,1012,1002,1064,980,989,0,1015,1012,1036,1012,997],
[1038,983,1021,988,1008,968,961,985,0,1013,999,963,975],
[985,999,1012,954,1000,990,991,988,987,0,1002,999,988],
[1039,1021,1031,956,1015,975,963,964,1001,998,0,963,975],
[1049,1003,1021,982,1068,1003,983,988,1037,1001,1037,0,1009],
[1037,1017,1015,1034,1054,993,969,1003,1025,1012,1025,991,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 121, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,979,1026,977,1122,998,1049,1006,1063,1008,1069,1029,1073],
[1021,0,1014,1000,1078,1027,1023,1000,1020,1062,1035,1010,1030],
[974,986,0,1053,999,991,1053,1040,1047,1065,1086,980,1042],
[1023,1000,947,0,1035,1007,995,996,1011,1004,1014,963,1072],
[878,922,1001,965,0,970,999,949,974,977,1068,986,962],
[1002,973,1009,993,1030,0,1039,1055,971,1034,1095,1002,1047],
[951,977,947,1005,1001,961,0,1005,994,976,1061,928,955],
[994,1000,960,1004,1051,945,995,0,1025,1021,944,964,1019],
[937,980,953,989,1026,1029,1006,975,0,947,1060,951,1006],
[992,938,935,996,1023,966,1024,979,1053,0,1027,949,969],
[931,965,914,986,932,905,939,1056,940,973,0,953,1030],
[971,990,1020,1037,1014,998,1072,1036,1049,1051,1047,0,967],
[927,970,958,928,1038,953,1045,981,994,1031,970,1033,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 122, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,994,913,992,939,1002,943,967,1024,961,1014,998,948],
[1006,0,965,1002,977,1054,1014,1035,1026,989,1011,1020,1021],
[1087,1035,0,1052,946,1068,1030,986,1045,998,1007,1025,1037],
[1008,998,948,0,969,1014,1058,1050,1018,1008,1006,1054,1048],
[1061,1023,1054,1031,0,1065,1061,1060,1048,987,1065,1046,988],
[998,946,932,986,935,0,948,943,982,951,965,954,943],
[1057,986,970,942,939,1052,0,986,963,923,1026,1007,1005],
[1033,965,1014,950,940,1057,1014,0,1010,967,1004,1003,997],
[976,974,955,982,952,1018,1037,990,0,989,1007,1011,978],
[1039,1011,1002,992,1013,1049,1077,1033,1011,0,1006,1007,1009],
[986,989,993,994,935,1035,974,996,993,994,0,969,975],
[1002,980,975,946,954,1046,993,997,989,993,1031,0,1002],
[1052,979,963,952,1012,1057,995,1003,1022,991,1025,998,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 123, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1043,1032,994,1067,1064,978,941,1009,1033,1049,1065,1110],
[957,0,1063,937,1025,1001,884,1012,1014,1006,1001,943,1018],
[968,937,0,997,1023,968,912,943,973,964,981,1013,995],
[1006,1063,1003,0,996,1035,1002,1061,1046,1029,1036,1085,1045],
[933,975,977,1004,0,961,973,985,969,991,967,983,1019],
[936,999,1032,965,1039,0,1043,1047,1032,1003,1010,1054,1072],
[1022,1116,1088,998,1027,957,0,1020,1078,1073,1026,1092,1094],
[1059,988,1057,939,1015,953,980,0,985,1050,1083,1058,1061],
[991,986,1027,954,1031,968,922,1015,0,972,1003,1008,1041],
[967,994,1036,971,1009,997,927,950,1028,0,1011,1023,1013],
[951,999,1019,964,1033,990,974,917,997,989,0,1023,1037],
[935,1057,987,915,1017,946,908,942,992,977,977,0,1022],
[890,982,1005,955,981,928,906,939,959,987,963,978,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 124, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,954,940,994,975,995,970,1023,953,943,1008,975,998],
[1046,0,1003,1017,1018,1017,993,1033,1016,1001,1035,1013,1034],
[1060,997,0,1041,1050,1030,1012,1025,1012,1008,1038,1031,1050],
[1006,983,959,0,954,977,979,988,970,964,1003,992,958],
[1025,982,950,1046,0,999,1004,1031,978,973,1008,1038,1064],
[1005,983,970,1023,1001,0,977,1026,1002,1004,1025,1030,1014],
[1030,1007,988,1021,996,1023,0,1040,1004,1005,1022,1038,1037],
[977,967,975,1012,969,974,960,0,979,987,972,954,1015],
[1047,984,988,1030,1022,998,996,1021,0,974,1011,1022,1034],
[1057,999,992,1036,1027,996,995,1013,1026,0,1044,1038,1048],
[992,965,962,997,992,975,978,1028,989,956,0,1034,1036],
[1025,987,969,1008,962,970,962,1046,978,962,966,0,1003],
[1002,966,950,1042,936,986,963,985,966,952,964,997,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 125, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,996,1006,962,946,997,1005,990,1017,995,942,983,1006],
[1004,0,999,973,1013,1021,1022,1029,990,1061,986,1013,989],
[994,1001,0,953,989,1014,1020,1062,1050,1031,999,961,988],
[1038,1027,1047,0,987,1075,1087,1055,1043,1081,1024,1025,1010],
[1054,987,1011,1013,0,1009,1022,1033,1006,1066,953,971,985],
[1003,979,986,925,991,0,1039,971,984,1046,971,927,979],
[995,978,980,913,978,961,0,1046,968,999,934,944,969],
[1010,971,938,945,967,1029,954,0,998,1020,942,962,982],
[983,1010,950,957,994,1016,1032,1002,0,1004,978,964,990],
[1005,939,969,919,934,954,1001,980,996,0,920,957,945],
[1058,1014,1001,976,1047,1029,1066,1058,1022,1080,0,1007,992],
[1017,987,1039,975,1029,1073,1056,1038,1036,1043,993,0,1030],
[994,1011,1012,990,1015,1021,1031,1018,1010,1055,1008,970,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 126, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1031,984,957,1082,1058,1026,984,1049,1026,1065,1054,1085],
[969,0,926,944,953,953,916,970,992,954,971,987,915],
[1016,1074,0,1055,1039,1046,1019,1071,1030,994,1045,1080,1074],
[1043,1056,945,0,1026,1023,957,1037,1034,1041,1070,1037,998],
[918,1047,961,974,0,1011,980,1053,996,1001,1036,1020,999],
[942,1047,954,977,989,0,970,1068,984,942,992,1039,980],
[974,1084,981,1043,1020,1030,0,1059,1059,1015,1063,1036,1039],
[1016,1030,929,963,947,932,941,0,993,956,949,981,913],
[951,1008,970,966,1004,1016,941,1007,0,944,988,1014,939],
[974,1046,1006,959,999,1058,985,1044,1056,0,1005,1065,1009],
[935,1029,955,930,964,1008,937,1051,1012,995,0,966,996],
[946,1013,920,963,980,961,964,1019,986,935,1034,0,918],
[915,1085,926,1002,1001,1020,961,1087,1061,991,1004,1082,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 127, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,992,964,937,981,978,930,920,980,949,993,976,972],
[1008,0,967,978,1018,1002,965,948,986,985,959,997,969],
[1036,1033,0,982,1029,1003,988,956,1012,1002,1003,990,1026],
[1063,1022,1018,0,1018,1018,989,958,1012,994,1035,1007,998],
[1019,982,971,982,0,1000,955,948,987,976,969,979,977],
[1022,998,997,982,1000,0,966,953,989,997,1017,970,1006],
[1070,1035,1012,1011,1045,1034,0,1018,993,1001,1030,1026,1021],
[1080,1052,1044,1042,1052,1047,982,0,1077,1027,1068,1036,1049],
[1020,1014,988,988,1013,1011,1007,923,0,996,1027,1016,1001],
[1051,1015,998,1006,1024,1003,999,973,1004,0,1029,1018,1040],
[1007,1041,997,965,1031,983,970,932,973,971,0,1011,985],
[1024,1003,1010,993,1021,1030,974,964,984,982,989,0,991],
[1028,1031,974,1002,1023,994,979,951,999,960,1015,1009,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 128, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,958,991,927,895,1019,916,891,1019,927,1123,891,914],
[1042,0,993,877,1000,978,841,962,1015,943,1005,986,932],
[1009,1007,0,838,1009,1007,880,959,1114,1002,1073,985,1022],
[1073,1123,1162,0,1111,1097,956,1042,1216,1017,1200,1061,1096],
[1105,1000,991,889,0,1037,1029,965,1111,967,1125,1063,1066],
[981,1022,993,903,963,0,975,933,1073,975,1104,915,1016],
[1084,1159,1120,1044,971,1025,0,969,1157,1080,1139,1031,1113],
[1109,1038,1041,958,1035,1067,1031,0,1150,1011,1067,1032,1056],
[981,985,886,784,889,927,843,850,0,894,1007,869,866],
[1073,1057,998,983,1033,1025,920,989,1106,0,1051,1025,941],
[877,995,927,800,875,896,861,933,993,949,0,863,848],
[1109,1014,1015,939,937,1085,969,968,1131,975,1137,0,927],
[1086,1068,978,904,934,984,887,944,1134,1059,1152,1073,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 129, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1024,997,978,1002,973,1038,991,1017,1022,1004,991,1018],
[976,0,975,968,948,958,1003,978,981,956,979,985,994],
[1003,1025,0,972,1004,981,1026,975,1013,999,1011,1001,1011],
[1022,1032,1028,0,1000,1025,1049,1001,1002,1000,1003,1019,1031],
[998,1052,996,1000,0,985,1027,985,1032,1024,1023,1013,1041],
[1027,1042,1019,975,1015,0,1055,978,1038,1020,1024,1003,1054],
[962,997,974,951,973,945,0,946,996,943,987,942,986],
[1009,1022,1025,999,1015,1022,1054,0,1044,1022,1026,1008,1042],
[983,1019,987,998,968,962,1004,956,0,983,977,971,980],
[978,1044,1001,1000,976,980,1057,978,1017,0,1008,1004,1013],
[996,1021,989,997,977,976,1013,974,1023,992,0,973,1033],
[1009,1015,999,981,987,997,1058,992,1029,996,1027,0,1019],
[982,1006,989,969,959,946,1014,958,1020,987,967,981,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 130, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,904,959,958,965,1071,952,970,1044,1005,865,1042,896],
[1096,0,982,1031,1051,974,958,996,1003,943,1044,1009,997],
[1041,1018,0,1015,1016,1100,1000,981,1043,1077,965,1047,935],
[1042,969,985,0,1076,1032,983,1036,1032,973,1030,969,986],
[1035,949,984,924,0,1013,1098,1065,964,946,968,1014,920],
[929,1026,900,968,987,0,965,1019,957,956,960,966,942],
[1048,1042,1000,1017,902,1035,0,1000,1139,1010,938,1015,934],
[1030,1004,1019,964,935,981,1000,0,1001,902,956,1008,921],
[956,997,957,968,1036,1043,861,999,0,1000,1036,1015,925],
[995,1057,923,1027,1054,1044,990,1098,1000,0,966,972,947],
[1135,956,1035,970,1032,1040,1062,1044,964,1034,0,1017,1006],
[958,991,953,1031,986,1034,985,992,985,1028,983,0,952],
[1104,1003,1065,1014,1080,1058,1066,1079,1075,1053,994,1048,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 131, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,960,934,931,930,908,964,980,970,917,974,964,942],
[1040,0,999,1006,1005,1004,1041,985,1030,975,1051,1021,1026],
[1066,1001,0,1000,1006,989,1013,1000,1043,984,1034,1022,996],
[1069,994,1000,0,1033,953,1023,1005,1020,974,1027,1000,992],
[1070,995,994,967,0,992,995,1007,981,978,998,963,992],
[1092,996,1011,1047,1008,0,1055,1021,1022,1020,997,1036,1015],
[1036,959,987,977,1005,945,0,994,1010,994,1007,1005,1025],
[1020,1015,1000,995,993,979,1006,0,998,974,1023,975,1012],
[1030,970,957,980,1019,978,990,1002,0,947,989,970,1005],
[1083,1025,1016,1026,1022,980,1006,1026,1053,0,1014,1016,1048],
[1026,949,966,973,1002,1003,993,977,1011,986,0,998,987],
[1036,979,978,1000,1037,964,995,1025,1030,984,1002,0,1019],
[1058,974,1004,1008,1008,985,975,988,995,952,1013,981,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 132, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,999,1019,1028,952,1025,1024,972,967,973,994,1049,1008],
[1001,0,943,978,929,991,964,915,957,967,956,982,980],
[981,1057,0,1022,941,1094,1024,1013,1053,968,1037,1015,1008],
[972,1022,978,0,882,1070,1006,979,1031,958,1019,1001,999],
[1048,1071,1059,1118,0,1076,1025,1012,1055,951,1038,1052,1005],
[975,1009,906,930,924,0,987,953,1002,896,953,982,962],
[976,1036,976,994,975,1013,0,951,1041,1005,989,1017,1009],
[1028,1085,987,1021,988,1047,1049,0,1051,998,1056,1064,996],
[1033,1043,947,969,945,998,959,949,0,944,1028,1001,983],
[1027,1033,1032,1042,1049,1104,995,1002,1056,0,1019,1032,1029],
[1006,1044,963,981,962,1047,1011,944,972,981,0,998,951],
[951,1018,985,999,948,1018,983,936,999,968,1002,0,945],
[992,1020,992,1001,995,1038,991,1004,1017,971,1049,1055,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 133, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,951,991,1002,986,963,975,975,1033,1014,842,1021,1014],
[1049,0,1090,1128,994,1046,1083,1079,1056,1003,999,1063,919],
[1009,910,0,1016,957,935,970,957,926,990,916,923,918],
[998,872,984,0,983,976,980,886,963,978,944,1035,1022],
[1014,1006,1043,1017,0,1068,1070,994,922,952,909,1031,1036],
[1037,954,1065,1024,932,0,934,966,968,938,958,903,1018],
[1025,917,1030,1020,930,1066,0,990,938,897,1021,956,843],
[1025,921,1043,1114,1006,1034,1010,0,1051,958,917,1026,930],
[967,944,1074,1037,1078,1032,1062,949,0,958,1035,1037,1004],
[986,997,1010,1022,1048,1062,1103,1042,1042,0,1077,1072,991],
[1158,1001,1084,1056,1091,1042,979,1083,965,923,0,1036,1062],
[979,937,1077,965,969,1097,1044,974,963,928,964,0,992],
[986,1081,1082,978,964,982,1157,1070,996,1009,938,1008,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 134, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1072,1024,1017,1065,1052,1035,1031,1038,1035,1001,1033,988],
[928,0,917,1036,986,1013,1000,960,991,999,1000,999,980],
[976,1083,0,1028,1048,988,1066,1016,1038,1054,1003,1021,974],
[983,964,972,0,985,978,994,967,1057,1001,980,988,951],
[935,1014,952,1015,0,993,966,968,978,1004,959,1015,945],
[948,987,1012,1022,1007,0,1013,991,1021,1011,981,985,954],
[965,1000,934,1006,1034,987,0,974,1013,1019,999,992,962],
[969,1040,984,1033,1032,1009,1026,0,1064,1032,1005,1030,987],
[962,1009,962,943,1022,979,987,936,0,959,947,974,949],
[965,1001,946,999,996,989,981,968,1041,0,944,1033,923],
[999,1000,997,1020,1041,1019,1001,995,1053,1056,0,1016,1024],
[967,1001,979,1012,985,1015,1008,970,1026,967,984,0,929],
[1012,1020,1026,1049,1055,1046,1038,1013,1051,1077,976,1071,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 135, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1049,1026,1033,983,1022,990,1002,978,1031,970,1022,990],
[951,0,1021,1002,1005,1032,984,999,1001,974,987,1035,1014],
[974,979,0,990,1020,1034,980,1010,956,987,941,1045,991],
[967,998,1010,0,983,992,1025,1066,974,991,955,1026,977],
[1017,995,980,1017,0,1019,1007,1014,1039,1004,969,1058,1019],
[978,968,966,1008,981,0,1027,1038,965,1007,1000,1082,1016],
[1010,1016,1020,975,993,973,0,976,984,973,988,1027,1005],
[998,1001,990,934,986,962,1024,0,968,998,977,1041,987],
[1022,999,1044,1026,961,1035,1016,1032,0,1029,998,1093,1026],
[969,1026,1013,1009,996,993,1027,1002,971,0,1009,1035,1022],
[1030,1013,1059,1045,1031,1000,1012,1023,1002,991,0,1034,1020],
[978,965,955,974,942,918,973,959,907,965,966,0,926],
[1010,986,1009,1023,981,984,995,1013,974,978,980,1074,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 136, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1085,1021,987,1071,1038,1031,983,1104,1091,1206,1025,1029],
[915,0,1067,989,1072,1034,961,1044,1035,1016,1129,1056,1063],
[979,933,0,908,1028,944,886,966,1020,958,1091,1041,946],
[1013,1011,1092,0,1048,1002,1065,937,1013,1009,1232,1147,1012],
[929,928,972,952,0,938,939,1065,1056,873,1091,987,1026],
[962,966,1056,998,1062,0,905,1005,961,1008,1142,1055,982],
[969,1039,1114,935,1061,1095,0,1025,966,1071,1157,1004,1066],
[1017,956,1034,1063,935,995,975,0,1001,953,1182,1045,1014],
[896,965,980,987,944,1039,1034,999,0,1007,1151,997,1027],
[909,984,1042,991,1127,992,929,1047,993,0,1133,1081,993],
[794,871,909,768,909,858,843,818,849,867,0,936,862],
[975,944,959,853,1013,945,996,955,1003,919,1064,0,928],
[971,937,1054,988,974,1018,934,986,973,1007,1138,1072,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 137, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,906,962,923,968,964,999,995,943,916,893,964,918],
[1094,0,1009,972,977,997,1086,988,961,999,1035,1002,1020],
[1038,991,0,952,958,956,1028,1031,983,967,997,981,953],
[1077,1028,1048,0,984,1001,1081,1116,1003,1081,1078,1043,1028],
[1032,1023,1042,1016,0,1013,1106,1095,1046,1059,985,1039,1018],
[1036,1003,1044,999,987,0,1080,1097,1003,1044,1039,1039,1025],
[1001,914,972,919,894,920,0,1005,941,910,980,927,896],
[1005,1012,969,884,905,903,995,0,925,941,932,935,950],
[1057,1039,1017,997,954,997,1059,1075,0,1001,981,1005,990],
[1084,1001,1033,919,941,956,1090,1059,999,0,1019,990,1011],
[1107,965,1003,922,1015,961,1020,1068,1019,981,0,979,1002],
[1036,998,1019,957,961,961,1073,1065,995,1010,1021,0,998],
[1082,980,1047,972,982,975,1104,1050,1010,989,998,1002,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 138, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,894,990,980,912,988,944,879,1022,1026,919,1050,972],
[1106,0,1057,1070,1127,1057,993,950,1097,1086,1082,1061,993],
[1010,943,0,1013,958,1024,906,945,974,1026,972,1027,989],
[1020,930,987,0,1006,1043,911,928,1060,1086,945,975,991],
[1088,873,1042,994,0,1037,961,913,1026,1044,926,1052,943],
[1012,943,976,957,963,0,934,848,1018,1051,944,990,979],
[1056,1007,1094,1089,1039,1066,0,1036,1116,1105,982,1055,1050],
[1121,1050,1055,1072,1087,1152,964,0,1151,1055,1019,1059,1023],
[978,903,1026,940,974,982,884,849,0,1032,907,1000,920],
[974,914,974,914,956,949,895,945,968,0,944,988,931],
[1081,918,1028,1055,1074,1056,1018,981,1093,1056,0,1006,1030],
[950,939,973,1025,948,1010,945,941,1000,1012,994,0,902],
[1028,1007,1011,1009,1057,1021,950,977,1080,1069,970,1098,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 139, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1012,971,1003,1008,969,1041,1036,989,1006,989,985,971],
[988,0,952,957,994,963,1013,939,981,985,955,960,1007],
[1029,1048,0,1016,1031,1005,1077,1050,1029,1007,998,992,983],
[997,1043,984,0,1007,971,1079,1019,1040,1046,1032,985,990],
[992,1006,969,993,0,977,1023,982,1007,1017,991,988,988],
[1031,1037,995,1029,1023,0,1068,1061,1054,1035,999,975,1013],
[959,987,923,921,977,932,0,961,1003,950,941,906,940],
[964,1061,950,981,1018,939,1039,0,988,988,986,966,994],
[1011,1019,971,960,993,946,997,1012,0,980,961,947,990],
[994,1015,993,954,983,965,1050,1012,1020,0,974,982,984],
[1011,1045,1002,968,1009,1001,1059,1014,1039,1026,0,971,990],
[1015,1040,1008,1015,1012,1025,1094,1034,1053,1018,1029,0,999],
[1029,993,1017,1010,1012,987,1060,1006,1010,1016,1010,1001,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 140, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1012,850,917,694,893,898,927,885,1013,1061,956,999],
[988,0,871,948,967,763,920,867,965,819,1028,942,1019],
[1150,1129,0,999,975,1085,964,1091,980,1133,1173,1048,1054],
[1083,1052,1001,0,925,907,1034,1009,974,1027,1226,967,1117],
[1306,1033,1025,1075,0,965,1016,1084,1018,1010,1177,1108,1236],
[1107,1237,915,1093,1035,0,1181,1025,1081,1145,1196,1035,1067],
[1102,1080,1036,966,984,819,0,911,1042,1091,1211,1045,1182],
[1073,1133,909,991,916,975,1089,0,954,1003,1119,1053,1058],
[1115,1035,1020,1026,982,919,958,1046,0,1013,1143,1026,1013],
[987,1181,867,973,990,855,909,997,987,0,1086,976,953],
[939,972,827,774,823,804,789,881,857,914,0,858,940],
[1044,1058,952,1033,892,965,955,947,974,1024,1142,0,1043],
[1001,981,946,883,764,933,818,942,987,1047,1060,957,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 141, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,773,834,1212,996,845,1054,784,1071,1052,886,968,817],
[1227,0,1056,1115,985,1062,1182,1068,1248,1104,797,1015,980],
[1166,944,0,1123,1113,848,1138,1086,1229,1288,787,998,854],
[788,885,877,0,926,776,918,832,924,1112,842,868,837],
[1004,1015,887,1074,0,987,1013,940,1152,1097,821,878,936],
[1155,938,1152,1224,1013,0,1245,959,1099,1118,1005,1040,1018],
[946,818,862,1082,987,755,0,873,827,1068,742,868,538],
[1216,932,914,1168,1060,1041,1127,0,1184,1244,1012,1068,1121],
[929,752,771,1076,848,901,1173,816,0,1132,646,999,671],
[948,896,712,888,903,882,932,756,868,0,738,933,665],
[1114,1203,1213,1158,1179,995,1258,988,1354,1262,0,1093,988],
[1032,985,1002,1132,1122,960,1132,932,1001,1067,907,0,1032],
[1183,1020,1146,1163,1064,982,1462,879,1329,1335,1012,968,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 142, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1037,1217,1030,1197,1150,1031,1116,974,1102,1116,1062,1157],
[963,0,1065,935,965,986,919,863,825,980,977,976,1004],
[783,935,0,735,879,915,797,753,793,954,864,825,1071],
[970,1065,1265,0,1069,1105,1016,993,1054,1132,1179,1094,1172],
[803,1035,1121,931,0,848,964,716,886,934,921,946,1009],
[850,1014,1085,895,1152,0,1096,1049,1061,941,1054,1061,1080],
[969,1081,1203,984,1036,904,0,985,919,1029,884,1056,1057],
[884,1137,1247,1007,1284,951,1015,0,966,991,1030,1104,1153],
[1026,1175,1207,946,1114,939,1081,1034,0,1030,1120,1133,1150],
[898,1020,1046,868,1066,1059,971,1009,970,0,955,1074,969],
[884,1023,1136,821,1079,946,1116,970,880,1045,0,1112,1089],
[938,1024,1175,906,1054,939,944,896,867,926,888,0,1076],
[843,996,929,828,991,920,943,847,850,1031,911,924,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 143, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,977,1007,1008,1026,947,1008,939,984,931,1058,976,955],
[1023,0,894,946,1014,898,974,913,948,949,1028,1010,920],
[993,1106,0,1089,1030,1010,1022,977,1039,1024,1089,1078,972],
[992,1054,911,0,1015,964,1012,886,984,1012,1088,1017,973],
[974,986,970,985,0,977,1015,937,988,950,992,969,954],
[1053,1102,990,1036,1023,0,1054,937,942,992,1032,1052,991],
[992,1026,978,988,985,946,0,930,988,971,1043,1004,893],
[1061,1087,1023,1114,1063,1063,1070,0,980,1037,1107,1044,1048],
[1016,1052,961,1016,1012,1058,1012,1020,0,968,1042,1014,968],
[1069,1051,976,988,1050,1008,1029,963,1032,0,1077,1031,939],
[942,972,911,912,1008,968,957,893,958,923,0,958,901],
[1024,990,922,983,1031,948,996,956,986,969,1042,0,933],
[1045,1080,1028,1027,1046,1009,1107,952,1032,1061,1099,1067,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 144, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1049,974,981,1016,1049,1065,1048,1016,1003,1011,1069,1047],
[951,0,983,968,977,989,1014,938,941,952,951,976,1049],
[1026,1017,0,1003,983,993,1009,984,956,1020,984,1034,1008],
[1019,1032,997,0,1003,1060,1084,1038,1020,998,997,1040,1078],
[984,1023,1017,997,0,982,1014,968,969,1013,971,997,1041],
[951,1011,1007,940,1018,0,1010,930,945,1011,982,981,1028],
[935,986,991,916,986,990,0,982,952,982,917,936,1016],
[952,1062,1016,962,1032,1070,1018,0,991,984,1036,969,1052],
[984,1059,1044,980,1031,1055,1048,1009,0,1064,1045,1064,1069],
[997,1048,980,1002,987,989,1018,1016,936,0,955,1028,1038],
[989,1049,1016,1003,1029,1018,1083,964,955,1045,0,1017,1017],
[931,1024,966,960,1003,1019,1064,1031,936,972,983,0,1002],
[953,951,992,922,959,972,984,948,931,962,983,998,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 145, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1011,967,1037,1036,1018,1022,1004,1015,1006,967,940,1019],
[989,0,987,1042,1064,1050,1039,998,978,996,952,962,1022],
[1033,1013,0,1055,1065,1009,1067,1028,992,991,970,985,1043],
[963,958,945,0,1025,1007,1020,1002,952,966,949,939,991],
[964,936,935,975,0,975,983,965,955,969,915,969,973],
[982,950,991,993,1025,0,1019,1014,989,998,967,953,978],
[978,961,933,980,1017,981,0,986,964,966,896,959,985],
[996,1002,972,998,1035,986,1014,0,976,998,984,997,993],
[985,1022,1008,1048,1045,1011,1036,1024,0,1028,966,1015,1032],
[994,1004,1009,1034,1031,1002,1034,1002,972,0,952,977,1017],
[1033,1048,1030,1051,1085,1033,1104,1016,1034,1048,0,997,1055],
[1060,1038,1015,1061,1031,1047,1041,1003,985,1023,1003,0,1039],
[981,978,957,1009,1027,1022,1015,1007,968,983,945,961,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 146, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1063,1185,1067,1091,1077,1060,1152,923,1003,1091,1027,1073],
[937,0,1124,978,995,1025,980,1204,1040,1066,1086,1027,1096],
[815,876,0,872,942,963,930,989,954,909,896,1014,972],
[933,1022,1128,0,1059,1013,1067,1102,1019,989,1081,996,1104],
[909,1005,1058,941,0,1018,968,1060,965,966,1028,1017,1042],
[923,975,1037,987,982,0,1011,1086,976,933,999,1047,1019],
[940,1020,1070,933,1032,989,0,1008,976,1006,1033,986,994],
[848,796,1011,898,940,914,992,0,902,924,911,904,923],
[1077,960,1046,981,1035,1024,1024,1098,0,1000,1067,1085,1115],
[997,934,1091,1011,1034,1067,994,1076,1000,0,1015,1041,1003],
[909,914,1104,919,972,1001,967,1089,933,985,0,988,991],
[973,973,986,1004,983,953,1014,1096,915,959,1012,0,1004],
[927,904,1028,896,958,981,1006,1077,885,997,1009,996,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 147, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,909,899,927,933,938,949,962,933,941,949,854,974],
[1091,0,1010,937,1009,954,938,990,952,1034,1003,1024,977],
[1101,990,0,950,1028,988,1019,920,1004,1074,1000,978,1041],
[1073,1063,1050,0,1088,1037,985,1008,1018,1008,1015,1056,1040],
[1067,991,972,912,0,1037,950,991,940,1009,964,971,1011],
[1062,1046,1012,963,963,0,952,975,974,1039,956,977,1026],
[1051,1062,981,1015,1050,1048,0,1018,1002,1030,1020,983,1054],
[1038,1010,1080,992,1009,1025,982,0,968,1048,1007,1020,1007],
[1067,1048,996,982,1060,1026,998,1032,0,1073,967,1026,1026],
[1059,966,926,992,991,961,970,952,927,0,939,929,971],
[1051,997,1000,985,1036,1044,980,993,1033,1061,0,1053,1028],
[1146,976,1022,944,1029,1023,1017,980,974,1071,947,0,1001],
[1026,1023,959,960,989,974,946,993,974,1029,972,999,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 148, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1013,1046,1085,1091,1006,1049,1096,988,1118,1030,1029,1095],
[987,0,1050,984,1065,1000,1023,1077,985,1032,1067,1003,1030],
[954,950,0,1020,1011,926,944,1009,950,1060,982,1037,997],
[915,1016,980,0,949,968,976,1053,898,945,986,1015,1032],
[909,935,989,1051,0,939,1010,1052,1010,1010,1055,933,1056],
[994,1000,1074,1032,1061,0,979,1073,996,1033,1045,934,1108],
[951,977,1056,1024,990,1021,0,1018,951,968,988,1021,1068],
[904,923,991,947,948,927,982,0,926,973,906,907,990],
[1012,1015,1050,1102,990,1004,1049,1074,0,1037,1031,987,1139],
[882,968,940,1055,990,967,1032,1027,963,0,1054,971,1090],
[970,933,1018,1014,945,955,1012,1094,969,946,0,971,1011],
[971,997,963,985,1067,1066,979,1093,1013,1029,1029,0,1063],
[905,970,1003,968,944,892,932,1010,861,910,989,937,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 149, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1037,1040,1079,1046,983,987,1023,1019,1011,981,1041,1024],
[963,0,1058,1006,1043,1018,995,1003,1020,942,941,1010,983],
[960,942,0,996,990,947,973,974,951,976,931,967,950],
[921,994,1004,0,983,968,977,965,975,948,985,1007,962],
[954,957,1010,1017,0,951,1012,1018,989,976,969,978,987],
[1017,982,1053,1032,1049,0,1032,1023,1023,1020,1008,1038,1028],
[1013,1005,1027,1023,988,968,0,1003,960,980,981,1014,998],
[977,997,1026,1035,982,977,997,0,988,942,976,1010,990],
[981,980,1049,1025,1011,977,1040,1012,0,957,975,1033,1028],
[989,1058,1024,1052,1024,980,1020,1058,1043,0,987,1025,1008],
[1019,1059,1069,1015,1031,992,1019,1024,1025,1013,0,1044,1042],
[959,990,1033,993,1022,962,986,990,967,975,956,0,952],
[976,1017,1050,1038,1013,972,1002,1010,972,992,958,1048,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 150, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,945,1012,1035,987,1033,1000,1002,944,915,1105,958,919],
[1055,0,1084,1011,1010,998,1009,1005,1052,975,1008,1054,1000],
[988,916,0,961,1033,1021,981,1045,1019,1021,999,932,1062],
[965,989,1039,0,1007,993,920,1065,948,947,978,1045,942],
[1013,990,967,993,0,936,963,962,1023,936,973,956,967],
[967,1002,979,1007,1064,0,972,957,978,905,996,932,958],
[1000,991,1019,1080,1037,1028,0,1004,1037,910,977,978,960],
[998,995,955,935,1038,1043,996,0,1007,987,967,1006,942],
[1056,948,981,1052,977,1022,963,993,0,950,973,920,963],
[1085,1025,979,1053,1064,1095,1090,1013,1050,0,1041,1119,1034],
[895,992,1001,1022,1027,1004,1023,1033,1027,959,0,1023,974],
[1042,946,1068,955,1044,1068,1022,994,1080,881,977,0,1031],
[1081,1000,938,1058,1033,1042,1040,1058,1037,966,1026,969,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 151, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,998,994,1027,968,995,994,961,1027,991,965,1035,1046],
[1002,0,990,1001,1042,980,997,968,1015,1012,998,1030,1018],
[1006,1010,0,997,996,1011,992,982,965,981,977,1000,1007],
[973,999,1003,0,1011,994,1001,941,1007,976,968,984,988],
[1032,958,1004,989,0,976,945,962,1027,973,961,1027,994],
[1005,1020,989,1006,1024,0,990,981,1006,1006,1004,995,1026],
[1006,1003,1008,999,1055,1010,0,1028,1030,991,1007,1010,1037],
[1039,1032,1018,1059,1038,1019,972,0,1041,974,991,1050,1049],
[973,985,1035,993,973,994,970,959,0,1009,970,1013,1046],
[1009,988,1019,1024,1027,994,1009,1026,991,0,1026,1015,1053],
[1035,1002,1023,1032,1039,996,993,1009,1030,974,0,983,1026],
[965,970,1000,1016,973,1005,990,950,987,985,1017,0,1017],
[954,982,993,1012,1006,974,963,951,954,947,974,983,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 152, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1037,970,1006,1041,950,967,1064,1071,1117,967,1009,1096],
[963,0,918,1019,1004,1021,936,1026,970,1016,986,1026,957],
[1030,1082,0,1072,1050,935,1042,1139,1030,1082,983,1057,1112],
[994,981,928,0,985,991,971,1025,926,1011,995,1010,1016],
[959,996,950,1015,0,972,1008,1066,939,1032,962,1025,1051],
[1050,979,1065,1009,1028,0,1005,1135,1066,1104,1076,1107,1102],
[1033,1064,958,1029,992,995,0,1100,1005,1040,956,1017,1019],
[936,974,861,975,934,865,900,0,950,971,919,955,991],
[929,1030,970,1074,1061,934,995,1050,0,1034,965,1033,1074],
[883,984,918,989,968,896,960,1029,966,0,911,941,1027],
[1033,1014,1017,1005,1038,924,1044,1081,1035,1089,0,1013,1011],
[991,974,943,990,975,893,983,1045,967,1059,987,0,1045],
[904,1043,888,984,949,898,981,1009,926,973,989,955,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 153, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1012,1027,1001,987,959,956,1019,929,991,1029,944,926],
[988,0,994,952,946,970,959,1025,970,1023,1012,922,985],
[973,1006,0,927,943,915,955,988,930,1004,1022,983,953],
[999,1048,1073,0,1029,977,1039,1070,1043,1083,1030,1030,1004],
[1013,1054,1057,971,0,894,912,1022,936,1011,1051,926,1020],
[1041,1030,1085,1023,1106,0,1023,1074,956,1038,1055,1010,1030],
[1044,1041,1045,961,1088,977,0,1027,992,996,1041,953,1034],
[981,975,1012,930,978,926,973,0,920,984,969,910,939],
[1071,1030,1070,957,1064,1044,1008,1080,0,1038,1083,1005,1027],
[1009,977,996,917,989,962,1004,1016,962,0,1053,930,965],
[971,988,978,970,949,945,959,1031,917,947,0,888,970],
[1056,1078,1017,970,1074,990,1047,1090,995,1070,1112,0,1032],
[1074,1015,1047,996,980,970,966,1061,973,1035,1030,968,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 154, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1029,920,999,969,983,953,1057,991,983,919,1088,1037],
[971,0,955,1038,990,993,957,1033,1017,961,985,1019,1013],
[1080,1045,0,1044,1054,1057,1026,1057,1083,1086,990,1105,1100],
[1001,962,956,0,1049,1029,979,1011,1038,1020,991,1077,1016],
[1031,1010,946,951,0,917,1003,987,1043,1018,977,1036,991],
[1017,1007,943,971,1083,0,1016,1046,1003,1089,1002,1077,963],
[1047,1043,974,1021,997,984,0,1042,1074,1013,963,1076,1043],
[943,967,943,989,1013,954,958,0,1010,1009,939,1016,1004],
[1009,983,917,962,957,997,926,990,0,998,938,1010,1031],
[1017,1039,914,980,982,911,987,991,1002,0,949,1037,997],
[1081,1015,1010,1009,1023,998,1037,1061,1062,1051,0,1113,1004],
[912,981,895,923,964,923,924,984,990,963,887,0,943],
[963,987,900,984,1009,1037,957,996,969,1003,996,1057,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 155, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,983,996,987,1009,1019,993,966,1020,1002,1011,990,1015],
[1017,0,1036,999,1014,1015,996,1013,1036,992,1007,1017,1000],
[1004,964,0,966,1046,992,980,948,994,975,995,994,993],
[1013,1001,1034,0,1033,1004,1012,976,1011,959,1009,976,996],
[991,986,954,967,0,997,989,964,962,956,962,971,974],
[981,985,1008,996,1003,0,978,979,1033,987,990,989,994],
[1007,1004,1020,988,1011,1022,0,1000,1008,1010,990,991,1005],
[1034,987,1052,1024,1036,1021,1000,0,1038,991,1013,1007,990],
[980,964,1006,989,1038,967,992,962,0,989,990,986,995],
[998,1008,1025,1041,1044,1013,990,1009,1011,0,985,1016,992],
[989,993,1005,991,1038,1010,1010,987,1010,1015,0,1000,1013],
[1010,983,1006,1024,1029,1011,1009,993,1014,984,1000,0,1012],
[985,1000,1007,1004,1026,1006,995,1010,1005,1008,987,988,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 156, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,980,961,995,981,991,983,1014,975,943,1018,985,960],
[1020,0,1005,1008,1018,988,986,1022,997,985,1092,1030,1007],
[1039,995,0,997,1018,997,984,971,1017,987,1023,1002,1001],
[1005,992,1003,0,993,1006,958,1032,947,1034,1034,998,1012],
[1019,982,982,1007,0,976,967,1011,949,982,1037,1004,989],
[1009,1012,1003,994,1024,0,967,1024,961,976,1016,1025,1022],
[1017,1014,1016,1042,1033,1033,0,1055,990,1068,1029,1019,1015],
[986,978,1029,968,989,976,945,0,978,987,1055,1052,983],
[1025,1003,983,1053,1051,1039,1010,1022,0,1006,1071,1072,1006],
[1057,1015,1013,966,1018,1024,932,1013,994,0,1033,1059,983],
[982,908,977,966,963,984,971,945,929,967,0,1026,933],
[1015,970,998,1002,996,975,981,948,928,941,974,0,962],
[1040,993,999,988,1011,978,985,1017,994,1017,1067,1038,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 157, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,992,986,997,1012,1017,1003,997,1003,974,958,1016,994],
[1008,0,1011,975,996,1000,991,965,1016,983,972,997,998],
[1014,989,0,993,1009,1003,989,1019,1013,990,990,1010,1034],
[1003,1025,1007,0,1029,1035,989,1007,1058,980,1013,1012,1012],
[988,1004,991,971,0,1008,990,997,995,986,977,1028,1005],
[983,1000,997,965,992,0,1001,999,1035,951,989,1003,1017],
[997,1009,1011,1011,1010,999,0,1013,1032,1007,1006,1010,1031],
[1003,1035,981,993,1003,1001,987,0,1019,947,1007,1004,1006],
[997,984,987,942,1005,965,968,981,0,939,950,996,982],
[1026,1017,1010,1020,1014,1049,993,1053,1061,0,1008,1017,1054],
[1042,1028,1010,987,1023,1011,994,993,1050,992,0,1005,1001],
[984,1003,990,988,972,997,990,996,1004,983,995,0,1003],
[1006,1002,966,988,995,983,969,994,1018,946,999,997,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 158, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1070,963,960,1024,1060,923,1074,1060,1049,1017,1054,998],
[930,0,997,976,979,1057,963,1159,1050,963,1008,1028,980],
[1037,1003,0,1062,981,1177,907,1067,1077,1028,1061,1136,1075],
[1040,1024,938,0,1000,1092,1015,1118,1191,1054,1141,1123,1096],
[976,1021,1019,1000,0,1021,903,1159,1103,1071,988,1033,1121],
[940,943,823,908,979,0,773,1078,939,1129,1000,920,1063],
[1077,1037,1093,985,1097,1227,0,1098,1090,949,1093,1099,1098],
[926,841,933,882,841,922,902,0,985,870,833,957,989],
[940,950,923,809,897,1061,910,1015,0,888,896,942,943],
[951,1037,972,946,929,871,1051,1130,1112,0,1084,1103,1063],
[983,992,939,859,1012,1000,907,1167,1104,916,0,987,1006],
[946,972,864,877,967,1080,901,1043,1058,897,1013,0,864],
[1002,1020,925,904,879,937,902,1011,1057,937,994,1136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 159, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,939,1039,1008,961,986,973,999,980,905,1034,982,949],
[1061,0,1000,1111,1077,1062,1004,1016,1025,1016,1018,1005,1032],
[961,1000,0,1057,956,934,891,965,984,969,974,989,963],
[992,889,943,0,995,953,918,946,936,940,977,954,987],
[1039,923,1044,1005,0,1054,930,950,990,980,991,998,978],
[1014,938,1066,1047,946,0,938,1008,960,874,1015,976,958],
[1027,996,1109,1082,1070,1062,0,1064,1019,1050,1029,1023,1043],
[1001,984,1035,1054,1050,992,936,0,1010,950,1041,969,1028],
[1020,975,1016,1064,1010,1040,981,990,0,1028,1055,1005,993],
[1095,984,1031,1060,1020,1126,950,1050,972,0,1072,1035,1028],
[966,982,1026,1023,1009,985,971,959,945,928,0,988,1006],
[1018,995,1011,1046,1002,1024,977,1031,995,965,1012,0,1067],
[1051,968,1037,1013,1022,1042,957,972,1007,972,994,933,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 160, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,977,980,972,995,995,968,992,991,982,1001,982,989],
[1023,0,1035,1025,1003,1034,1012,988,1052,1005,1041,999,1042],
[1020,965,0,1000,984,999,1012,1005,1018,986,1014,1011,991],
[1028,975,1000,0,988,997,1012,998,1005,1010,1029,1018,1016],
[1005,997,1016,1012,0,989,999,1005,989,957,1018,998,1012],
[1005,966,1001,1003,1011,0,1017,969,992,1002,1023,990,1010],
[1032,988,988,988,1001,983,0,987,981,982,993,1014,989],
[1008,1012,995,1002,995,1031,1013,0,1007,990,1044,1011,1038],
[1009,948,982,995,1011,1008,1019,993,0,975,1015,990,1017],
[1018,995,1014,990,1043,998,1018,1010,1025,0,1043,1042,1036],
[999,959,986,971,982,977,1007,956,985,957,0,981,1009],
[1018,1001,989,982,1002,1010,986,989,1010,958,1019,0,1011],
[1011,958,1009,984,988,990,1011,962,983,964,991,989,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 161, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1037,967,1005,1102,1091,1082,1026,1031,1118,1013,1119,1058],
[963,0,977,1050,994,1097,945,947,966,1075,962,1045,1012],
[1033,1023,0,1096,1133,1091,1055,1026,1068,1115,997,1148,1101],
[995,950,904,0,1036,1072,945,929,982,1066,1024,1105,998],
[898,1006,867,964,0,1040,982,911,967,1048,1026,1038,1008],
[909,903,909,928,960,0,964,916,963,1048,967,986,898],
[918,1055,945,1055,1018,1036,0,871,945,1042,934,1080,995],
[974,1053,974,1071,1089,1084,1129,0,1011,1076,1029,1076,993],
[969,1034,932,1018,1033,1037,1055,989,0,1027,1013,1077,1029],
[882,925,885,934,952,952,958,924,973,0,938,935,915],
[987,1038,1003,976,974,1033,1066,971,987,1062,0,1020,1072],
[881,955,852,895,962,1014,920,924,923,1065,980,0,952],
[942,988,899,1002,992,1102,1005,1007,971,1085,928,1048,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 162, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1048,1019,1034,1037,1036,980,985,1022,971,1009,1038,1063],
[952,0,959,1005,977,959,941,959,975,964,993,984,1014],
[981,1041,0,1055,1021,1019,987,1017,991,984,1009,1037,1036],
[966,995,945,0,986,983,946,973,985,988,974,999,998],
[963,1023,979,1014,0,989,974,959,977,985,985,1008,1013],
[964,1041,981,1017,1011,0,988,979,984,1009,1000,1019,1019],
[1020,1059,1013,1054,1026,1012,0,998,999,989,999,1050,1027],
[1015,1041,983,1027,1041,1021,1002,0,994,1007,1006,1024,1045],
[978,1025,1009,1015,1023,1016,1001,1006,0,996,1002,1022,1027],
[1029,1036,1016,1012,1015,991,1011,993,1004,0,1013,1012,1046],
[991,1007,991,1026,1015,1000,1001,994,998,987,0,1003,1026],
[962,1016,963,1001,992,981,950,976,978,988,997,0,1020],
[937,986,964,1002,987,981,973,955,973,954,974,980,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 163, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1006,1001,980,1023,1026,1029,992,1013,1028,1076,1038,1009],
[994,0,983,991,961,995,985,983,1015,985,1008,998,982],
[999,1017,0,985,1032,1007,977,1013,1035,998,1001,1003,1005],
[1020,1009,1015,0,1015,1039,1014,1025,996,985,1027,1010,998],
[977,1039,968,985,0,986,999,1007,984,974,1003,1007,981],
[974,1005,993,961,1014,0,1001,984,999,976,1045,1024,985],
[971,1015,1023,986,1001,999,0,1046,985,1024,1034,1015,979],
[1008,1017,987,975,993,1016,954,0,993,1000,1006,1013,1023],
[987,985,965,1004,1016,1001,1015,1007,0,1019,1037,992,1001],
[972,1015,1002,1015,1026,1024,976,1000,981,0,987,1026,970],
[924,992,999,973,997,955,966,994,963,1013,0,997,952],
[962,1002,997,990,993,976,985,987,1008,974,1003,0,993],
[991,1018,995,1002,1019,1015,1021,977,999,1030,1048,1007,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 164, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,947,961,941,951,1061,951,1042,904,1052,966,962,1012],
[1053,0,972,1090,1060,1056,1078,1021,984,1062,1037,981,1039],
[1039,1028,0,1074,1054,1088,1046,1101,990,1076,1076,1013,1144],
[1059,910,926,0,1033,1041,1005,1081,990,1023,1048,1010,1038],
[1049,940,946,967,0,1032,981,1071,949,1053,1037,963,1022],
[939,944,912,959,968,0,1044,980,975,990,978,974,1047],
[1049,922,954,995,1019,956,0,1025,952,978,963,957,1033],
[958,979,899,919,929,1020,975,0,955,954,935,942,1008],
[1096,1016,1010,1010,1051,1025,1048,1045,0,1035,1014,973,1053],
[948,938,924,977,947,1010,1022,1046,965,0,989,964,1060],
[1034,963,924,952,963,1022,1037,1065,986,1011,0,910,1039],
[1038,1019,987,990,1037,1026,1043,1058,1027,1036,1090,0,1065],
[988,961,856,962,978,953,967,992,947,940,961,935,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 165, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,965,952,956,936,995,1026,955,971,978,1022,983,1046],
[1035,0,1030,1016,1000,1030,1075,980,1008,997,1011,1008,1059],
[1048,970,0,1000,998,1051,1047,992,984,1002,1047,1066,1027],
[1044,984,1000,0,960,1044,1037,951,990,967,1024,1019,1025],
[1064,1000,1002,1040,0,1021,1082,1020,1007,1023,1053,1011,1055],
[1005,970,949,956,979,0,1032,966,972,957,1021,1018,1028],
[974,925,953,963,918,968,0,937,922,977,1011,975,1011],
[1045,1020,1008,1049,980,1034,1063,0,1021,1008,1050,1027,1056],
[1029,992,1016,1010,993,1028,1078,979,0,967,1039,1030,1035],
[1022,1003,998,1033,977,1043,1023,992,1033,0,1072,1044,1020],
[978,989,953,976,947,979,989,950,961,928,0,979,1010],
[1017,992,934,981,989,982,1025,973,970,956,1021,0,1032],
[954,941,973,975,945,972,989,944,965,980,990,968,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 166, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1000,1017,979,1044,1044,1021,1006,979,1020,990,1008,1006],
[1000,0,978,966,1022,973,971,1002,946,992,1014,1005,1038],
[983,1022,0,1031,1049,1064,1082,1045,1021,997,1035,1037,1019],
[1021,1034,969,0,1008,995,1010,1014,1002,996,976,1028,1015],
[956,978,951,992,0,1004,968,1023,950,965,948,989,996],
[956,1027,936,1005,996,0,1025,1015,973,989,1002,1011,1050],
[979,1029,918,990,1032,975,0,1006,965,976,990,1007,999],
[994,998,955,986,977,985,994,0,983,979,984,972,1023],
[1021,1054,979,998,1050,1027,1035,1017,0,1015,1013,1035,1026],
[980,1008,1003,1004,1035,1011,1024,1021,985,0,1042,1060,984],
[1010,986,965,1024,1052,998,1010,1016,987,958,0,996,1013],
[992,995,963,972,1011,989,993,1028,965,940,1004,0,1005],
[994,962,981,985,1004,950,1001,977,974,1016,987,995,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 167, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1075,982,1005,1023,1018,1020,1020,966,992,1003,1000,1020],
[925,0,900,997,945,931,991,933,940,930,950,980,947],
[1018,1100,0,1047,1062,1060,1047,1047,1006,1029,1027,1021,995],
[995,1003,953,0,959,1000,978,1023,913,979,973,1005,1002],
[977,1055,938,1041,0,1014,1025,1013,973,958,937,1036,1002],
[982,1069,940,1000,986,0,1012,994,975,992,1006,1005,966],
[980,1009,953,1022,975,988,0,961,972,990,994,989,984],
[980,1067,953,977,987,1006,1039,0,976,985,990,1000,1035],
[1034,1060,994,1087,1027,1025,1028,1024,0,993,1040,993,1004],
[1008,1070,971,1021,1042,1008,1010,1015,1007,0,1022,1024,987],
[997,1050,973,1027,1063,994,1006,1010,960,978,0,1021,991],
[1000,1020,979,995,964,995,1011,1000,1007,976,979,0,933],
[980,1053,1005,998,998,1034,1016,965,996,1013,1009,1067,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 168, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1029,1033,1000,1031,1034,1025,1008,994,1013,1021,986,1007],
[971,0,1020,975,994,1022,974,1002,1003,993,990,971,987],
[967,980,0,1001,1012,1006,1016,983,970,948,971,975,991],
[1000,1025,999,0,1028,1034,996,1020,992,983,991,981,1001],
[969,1006,988,972,0,998,986,996,971,992,961,963,1007],
[966,978,994,966,1002,0,993,975,968,975,1016,960,963],
[975,1026,984,1004,1014,1007,0,1013,1007,979,991,977,990],
[992,998,1017,980,1004,1025,987,0,998,985,1001,983,980],
[1006,997,1030,1008,1029,1032,993,1002,0,960,984,999,996],
[987,1007,1052,1017,1008,1025,1021,1015,1040,0,1006,1001,1037],
[979,1010,1029,1009,1039,984,1009,999,1016,994,0,982,996],
[1014,1029,1025,1019,1037,1040,1023,1017,1001,999,1018,0,1000],
[993,1013,1009,999,993,1037,1010,1020,1004,963,1004,1000,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 169, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,952,884,896,982,912,957,954,940,901,972,930,962],
[1048,0,911,949,975,956,955,1031,927,972,912,950,990],
[1116,1089,0,1009,1089,1026,1048,995,991,1021,1040,1061,1000],
[1104,1051,991,0,1042,1000,1086,1029,973,1026,985,1002,1025],
[1018,1025,911,958,0,976,962,942,943,946,946,977,963],
[1088,1044,974,1000,1024,0,997,979,974,947,947,1049,1040],
[1043,1045,952,914,1038,1003,0,957,967,1012,944,1009,998],
[1046,969,1005,971,1058,1021,1043,0,977,1030,987,1019,1069],
[1060,1073,1009,1027,1057,1026,1033,1023,0,1023,970,1058,1042],
[1099,1028,979,974,1054,1053,988,970,977,0,1003,1031,1014],
[1028,1088,960,1015,1054,1053,1056,1013,1030,997,0,1007,1001],
[1070,1050,939,998,1023,951,991,981,942,969,993,0,1006],
[1038,1010,1000,975,1037,960,1002,931,958,986,999,994,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 170, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1006,1008,1030,983,1063,979,985,1066,1003,1035,1011,1013],
[994,0,1044,1039,1033,1004,1032,1011,1004,1019,1025,1028,1002],
[992,956,0,1041,982,1019,1029,961,1021,1020,997,1013,1016],
[970,961,959,0,992,992,983,992,1022,1011,968,1016,979],
[1017,967,1018,1008,0,1025,984,1023,1001,995,999,993,1047],
[937,996,981,1008,975,0,1000,988,1000,1007,988,982,1015],
[1021,968,971,1017,1016,1000,0,991,1019,1000,998,1021,987],
[1015,989,1039,1008,977,1012,1009,0,1027,1023,968,1023,1014],
[934,996,979,978,999,1000,981,973,0,992,992,1016,977],
[997,981,980,989,1005,993,1000,977,1008,0,985,1024,981],
[965,975,1003,1032,1001,1012,1002,1032,1008,1015,0,1007,1028],
[989,972,987,984,1007,1018,979,977,984,976,993,0,1020],
[987,998,984,1021,953,985,1013,986,1023,1019,972,980,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 171, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1003,993,1063,979,994,993,1014,1047,1013,983,1022,1005],
[997,0,1013,1029,1001,1023,996,1024,1026,1014,1041,1017,1011],
[1007,987,0,1042,992,980,994,995,1006,1029,1006,1007,1001],
[937,971,958,0,956,955,961,977,1021,989,988,980,968],
[1021,999,1008,1044,0,1004,1018,1029,1013,1012,996,1027,1017],
[1006,977,1020,1045,996,0,1018,1013,1023,1046,1017,1018,1009],
[1007,1004,1006,1039,982,982,0,1005,1012,1010,1012,1017,1008],
[986,976,1005,1023,971,987,995,0,1022,993,997,1014,1005],
[953,974,994,979,987,977,988,978,0,980,978,984,974],
[987,986,971,1011,988,954,990,1007,1020,0,983,1005,981],
[1017,959,994,1012,1004,983,988,1003,1022,1017,0,1002,994],
[978,983,993,1020,973,982,983,986,1016,995,998,0,980],
[995,989,999,1032,983,991,992,995,1026,1019,1006,1020,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 172, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1015,993,995,1029,961,974,1038,1009,1027,998,1001,991],
[985,0,971,998,983,977,1005,1019,977,991,968,973,979],
[1007,1029,0,1009,981,983,1015,1024,1020,1024,980,996,984],
[1005,1002,991,0,1033,984,998,1050,1012,1016,983,1007,994],
[971,1017,1019,967,0,991,1029,1052,985,1023,971,990,993],
[1039,1023,1017,1016,1009,0,1024,1059,1023,1010,1007,977,1001],
[1026,995,985,1002,971,976,0,1028,989,998,974,978,1015],
[962,981,976,950,948,941,972,0,983,975,937,956,967],
[991,1023,980,988,1015,977,1011,1017,0,1006,988,995,983],
[973,1009,976,984,977,990,1002,1025,994,0,971,962,991],
[1002,1032,1020,1017,1029,993,1026,1063,1012,1029,0,1024,1022],
[999,1027,1004,993,1010,1023,1022,1044,1005,1038,976,0,1005],
[1009,1021,1016,1006,1007,999,985,1033,1017,1009,978,995,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 173, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1021,1035,1013,1028,1019,996,998,1012,991,1020,1027,998],
[979,0,1028,1014,985,986,987,969,1008,974,977,1014,945],
[965,972,0,975,971,978,944,959,975,974,972,991,937],
[987,986,1025,0,964,981,964,963,982,996,991,1016,979],
[972,1015,1029,1036,0,1002,1015,1005,1051,1054,1013,1026,996],
[981,1014,1022,1019,998,0,1009,1007,1033,985,1001,1045,970],
[1004,1013,1056,1036,985,991,0,983,1003,979,1022,1029,979],
[1002,1031,1041,1037,995,993,1017,0,1001,1006,1012,1003,1005],
[988,992,1025,1018,949,967,997,999,0,996,1017,969,976],
[1009,1026,1026,1004,946,1015,1021,994,1004,0,1018,1008,979],
[980,1023,1028,1009,987,999,978,988,983,982,0,1004,941],
[973,986,1009,984,974,955,971,997,1031,992,996,0,959],
[1002,1055,1063,1021,1004,1030,1021,995,1024,1021,1059,1041,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 174, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,999,1003,966,969,953,967,1012,1015,984,993,972,948],
[1001,0,977,990,963,964,973,980,996,935,990,936,942],
[997,1023,0,969,953,951,1005,984,1019,992,980,967,941],
[1034,1010,1031,0,1059,1021,982,977,1046,1010,1015,983,953],
[1031,1037,1047,941,0,987,983,1007,1014,983,1014,974,996],
[1047,1036,1049,979,1013,0,1008,981,998,1000,1034,969,949],
[1033,1027,995,1018,1017,992,0,1008,994,1031,1018,960,1002],
[988,1020,1016,1023,993,1019,992,0,1015,1003,1020,1006,973],
[985,1004,981,954,986,1002,1006,985,0,1006,966,979,936],
[1016,1065,1008,990,1017,1000,969,997,994,0,1027,929,947],
[1007,1010,1020,985,986,966,982,980,1034,973,0,975,934],
[1028,1064,1033,1017,1026,1031,1040,994,1021,1071,1025,0,996],
[1052,1058,1059,1047,1004,1051,998,1027,1064,1053,1066,1004,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 175, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,964,1012,1008,1000,1018,990,962,992,1028,1016,989,958],
[1036,0,1014,1028,994,1028,1016,1001,997,1023,1038,978,1013],
[988,986,0,987,1012,997,983,987,985,1015,1004,996,974],
[992,972,1013,0,997,982,965,990,975,1000,1012,996,1024],
[1000,1006,988,1003,0,1006,981,973,1010,1005,996,970,1008],
[982,972,1003,1018,994,0,972,963,1001,1001,989,987,973],
[1010,984,1017,1035,1019,1028,0,960,1011,1006,995,995,1025],
[1038,999,1013,1010,1027,1037,1040,0,1034,1035,1015,1039,1023],
[1008,1003,1015,1025,990,999,989,966,0,1012,992,1006,1003],
[972,977,985,1000,995,999,994,965,988,0,980,958,964],
[984,962,996,988,1004,1011,1005,985,1008,1020,0,1034,1002],
[1011,1022,1004,1004,1030,1013,1005,961,994,1042,966,0,1017],
[1042,987,1026,976,992,1027,975,977,997,1036,998,983,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 176, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1012,979,1003,972,963,982,969,1013,981,947,1022,970],
[988,0,997,989,968,976,1000,970,973,956,979,1010,960],
[1021,1003,0,1022,1008,990,1031,1005,976,998,995,1063,1005],
[997,1011,978,0,985,986,999,970,995,979,964,1025,959],
[1028,1032,992,1015,0,995,967,979,1010,955,1007,1071,951],
[1037,1024,1010,1014,1005,0,990,995,1043,994,997,1032,994],
[1018,1000,969,1001,1033,1010,0,1010,982,984,995,1050,998],
[1031,1030,995,1030,1021,1005,990,0,994,991,996,1037,1008],
[987,1027,1024,1005,990,957,1018,1006,0,981,978,1034,970],
[1019,1044,1002,1021,1045,1006,1016,1009,1019,0,998,1050,1014],
[1053,1021,1005,1036,993,1003,1005,1004,1022,1002,0,1047,990],
[978,990,937,975,929,968,950,963,966,950,953,0,933],
[1030,1040,995,1041,1049,1006,1002,992,1030,986,1010,1067,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 177, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,963,1006,968,1013,988,961,1024,956,991,979,948,1069],
[1037,0,1010,975,933,958,988,993,942,1017,983,986,1042],
[994,990,0,973,938,940,955,939,966,1014,967,946,996],
[1032,1025,1027,0,969,1077,958,1003,991,1030,985,1020,1037],
[987,1067,1062,1031,0,1003,1022,993,1004,1027,1031,1012,1072],
[1012,1042,1060,923,997,0,996,1041,961,1006,1010,1026,1050],
[1039,1012,1045,1042,978,1004,0,1010,922,1019,988,1029,1042],
[976,1007,1061,997,1007,959,990,0,971,1017,1033,990,1087],
[1044,1058,1034,1009,996,1039,1078,1029,0,1076,1053,1036,1092],
[1009,983,986,970,973,994,981,983,924,0,962,949,957],
[1021,1017,1033,1015,969,990,1012,967,947,1038,0,936,989],
[1052,1014,1054,980,988,974,971,1010,964,1051,1064,0,1061],
[931,958,1004,963,928,950,958,913,908,1043,1011,939,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 178, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,981,988,1007,1017,1055,1001,985,1029,1010,1031,989,998],
[1019,0,982,1006,1010,1029,998,982,1015,999,1054,992,977],
[1012,1018,0,1006,1005,1029,1020,980,1010,1038,1041,979,967],
[993,994,994,0,942,1029,964,977,965,1004,1024,985,973],
[983,990,995,1058,0,1028,1027,968,996,1008,1035,997,997],
[945,971,971,971,972,0,965,975,997,979,1013,996,927],
[999,1002,980,1036,973,1035,0,989,1012,1001,1016,1012,965],
[1015,1018,1020,1023,1032,1025,1011,0,1003,1000,1014,1000,1001],
[971,985,990,1035,1004,1003,988,997,0,1004,1025,979,986],
[990,1001,962,996,992,1021,999,1000,996,0,1002,984,978],
[969,946,959,976,965,987,984,986,975,998,0,936,969],
[1011,1008,1021,1015,1003,1004,988,1000,1021,1016,1064,0,972],
[1002,1023,1033,1027,1003,1073,1035,999,1014,1022,1031,1028,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 179, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,919,1002,1100,979,913,1037,988,998,968,885,970,943],
[1081,0,1111,1069,1075,985,1118,1058,1123,1070,1006,1025,1046],
[998,889,0,1011,899,910,1039,983,1010,895,867,945,980],
[900,931,989,0,865,839,961,924,919,897,836,841,855],
[1021,925,1101,1135,0,930,1016,1054,1027,888,975,973,928],
[1087,1015,1090,1161,1070,0,1045,1047,1075,1038,1014,1000,1087],
[963,882,961,1039,984,955,0,968,976,909,976,918,948],
[1012,942,1017,1076,946,953,1032,0,1009,975,958,980,891],
[1002,877,990,1081,973,925,1024,991,0,923,899,919,973],
[1032,930,1105,1103,1112,962,1091,1025,1077,0,970,1018,992],
[1115,994,1133,1164,1025,986,1024,1042,1101,1030,0,1066,1011],
[1030,975,1055,1159,1027,1000,1082,1020,1081,982,934,0,957],
[1057,954,1020,1145,1072,913,1052,1109,1027,1008,989,1043,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 180, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1017,952,997,1001,1028,981,1033,995,1017,1011,983,1049],
[983,0,982,1036,1027,990,1013,1057,942,984,974,935,984],
[1048,1018,0,1041,1061,1105,991,1066,978,1020,1044,1010,1002],
[1003,964,959,0,962,992,970,973,960,1005,971,924,990],
[999,973,939,1038,0,1047,1014,1013,962,1025,958,977,1009],
[972,1010,895,1008,953,0,973,975,955,993,940,933,968],
[1019,987,1009,1030,986,1027,0,1061,986,1035,1014,1015,1065],
[967,943,934,1027,987,1025,939,0,983,995,954,1014,972],
[1005,1058,1022,1040,1038,1045,1014,1017,0,1008,1025,992,1047],
[983,1016,980,995,975,1007,965,1005,992,0,960,958,974],
[989,1026,956,1029,1042,1060,986,1046,975,1040,0,1012,1018],
[1017,1065,990,1076,1023,1067,985,986,1008,1042,988,0,1033],
[951,1016,998,1010,991,1032,935,1028,953,1026,982,967,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 181, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1010,970,973,993,1005,998,982,966,979,982,935,1021],
[990,0,972,1023,1006,1014,1022,1046,1038,1004,1014,1018,1042],
[1030,1028,0,1002,1020,998,1020,1026,994,997,1003,998,1088],
[1027,977,998,0,1002,1007,1013,1023,995,980,999,969,1050],
[1007,994,980,998,0,976,1001,1000,963,994,983,985,1004],
[995,986,1002,993,1024,0,996,1034,994,994,962,962,1011],
[1002,978,980,987,999,1004,0,1007,984,971,979,974,1026],
[1018,954,974,977,1000,966,993,0,947,990,1004,965,1014],
[1034,962,1006,1005,1037,1006,1016,1053,0,1010,1035,1017,1047],
[1021,996,1003,1020,1006,1006,1029,1010,990,0,998,985,1058],
[1018,986,997,1001,1017,1038,1021,996,965,1002,0,976,1032],
[1065,982,1002,1031,1015,1038,1026,1035,983,1015,1024,0,1032],
[979,958,912,950,996,989,974,986,953,942,968,968,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 182, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1104,1024,1032,1123,1097,1082,1104,1059,941,1108,1046,1091],
[896,0,907,983,950,985,1000,1124,1079,832,1018,1046,1016],
[976,1093,0,1082,1099,1089,1090,1137,1098,1002,1159,1038,1168],
[968,1017,918,0,950,1017,1062,1019,1071,975,1013,941,1043],
[877,1050,901,1050,0,975,973,1104,960,871,973,1054,1028],
[903,1015,911,983,1025,0,1052,1025,1050,887,1026,993,1001],
[918,1000,910,938,1027,948,0,1066,1066,885,959,983,1053],
[896,876,863,981,896,975,934,0,1019,866,928,995,927],
[941,921,902,929,1040,950,934,981,0,891,1022,985,1045],
[1059,1168,998,1025,1129,1113,1115,1134,1109,0,1082,1113,1014],
[892,982,841,987,1027,974,1041,1072,978,918,0,1014,961],
[954,954,962,1059,946,1007,1017,1005,1015,887,986,0,989],
[909,984,832,957,972,999,947,1073,955,986,1039,1011,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 183, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,933,920,988,888,953,924,890,1028,914,934,876,954],
[1067,0,943,951,956,992,920,915,965,851,914,926,972],
[1080,1057,0,1066,995,1100,1029,1001,1100,1042,1032,1024,1069],
[1012,1049,934,0,920,1044,945,912,1017,901,894,942,943],
[1112,1044,1005,1080,0,1091,1057,945,1021,996,1005,992,1113],
[1047,1008,900,956,909,0,892,854,1003,966,898,926,904],
[1076,1080,971,1055,943,1108,0,995,1060,979,1025,1039,1012],
[1110,1085,999,1088,1055,1146,1005,0,1082,1000,1049,1034,1027],
[972,1035,900,983,979,997,940,918,0,971,913,933,897],
[1086,1149,958,1099,1004,1034,1021,1000,1029,0,1046,951,1053],
[1066,1086,968,1106,995,1102,975,951,1087,954,0,1048,1106],
[1124,1074,976,1058,1008,1074,961,966,1067,1049,952,0,1033],
[1046,1028,931,1057,887,1096,988,973,1103,947,894,967,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 184, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,922,996,956,987,992,1013,953,961,974,998,958,972],
[1078,0,1020,1015,1053,1001,1048,982,1006,1039,1038,1023,1023],
[1004,980,0,974,1025,966,996,970,983,966,1044,1012,1019],
[1044,985,1026,0,1039,999,1051,998,991,985,1014,1026,1023],
[1013,947,975,961,0,984,988,1000,962,984,974,1017,997],
[1008,999,1034,1001,1016,0,1018,993,1015,1015,1053,1017,1010],
[987,952,1004,949,1012,982,0,931,960,997,987,946,1022],
[1047,1018,1030,1002,1000,1007,1069,0,985,998,1054,1022,1015],
[1039,994,1017,1009,1038,985,1040,1015,0,1001,1032,988,1008],
[1026,961,1034,1015,1016,985,1003,1002,999,0,1056,1003,1062],
[1002,962,956,986,1026,947,1013,946,968,944,0,953,1004],
[1042,977,988,974,983,983,1054,978,1012,997,1047,0,1057],
[1028,977,981,977,1003,990,978,985,992,938,996,943,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 185, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,846,1020,871,943,993,961,1041,1052,974,983,922,948],
[1154,0,1131,920,1027,992,1032,1113,1060,992,1082,981,1063],
[980,869,0,902,910,944,977,981,971,954,996,872,830],
[1129,1080,1098,0,976,1044,1078,1059,1065,1069,1125,1008,1018],
[1057,973,1090,1024,0,1038,986,1063,1030,949,1107,980,1036],
[1007,1008,1056,956,962,0,1022,1107,1055,1007,1017,971,1017],
[1039,968,1023,922,1014,978,0,963,990,945,990,925,999],
[959,887,1019,941,937,893,1037,0,1018,946,1044,927,952],
[948,940,1029,935,970,945,1010,982,0,973,1020,947,961],
[1026,1008,1046,931,1051,993,1055,1054,1027,0,1098,1019,996],
[1017,918,1004,875,893,983,1010,956,980,902,0,905,929],
[1078,1019,1128,992,1020,1029,1075,1073,1053,981,1095,0,975],
[1052,937,1170,982,964,983,1001,1048,1039,1004,1071,1025,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 186, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,982,1036,1081,956,1030,1018,1088,992,977,1004,1002,945],
[1018,0,1008,1099,1022,1061,1097,1031,1005,1046,1060,1053,968],
[964,992,0,1110,928,988,1017,1025,960,1013,1002,1068,954],
[919,901,890,0,901,960,964,990,996,1002,985,910,883],
[1044,978,1072,1099,0,1060,1095,1096,1033,1028,1041,1058,1028],
[970,939,1012,1040,940,0,1043,1037,1046,995,1039,973,1022],
[982,903,983,1036,905,957,0,981,1003,993,976,1019,978],
[912,969,975,1010,904,963,1019,0,1009,1009,1022,962,945],
[1008,995,1040,1004,967,954,997,991,0,964,962,996,931],
[1023,954,987,998,972,1005,1007,991,1036,0,1028,967,1001],
[996,940,998,1015,959,961,1024,978,1038,972,0,966,916],
[998,947,932,1090,942,1027,981,1038,1004,1033,1034,0,963],
[1055,1032,1046,1117,972,978,1022,1055,1069,999,1084,1037,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 187, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1000,975,957,963,1006,980,972,975,968,959,1004,1032],
[1000,0,989,988,959,989,981,952,974,993,987,978,1030],
[1025,1011,0,1011,1000,1001,990,991,981,981,978,983,1024],
[1043,1012,989,0,981,1028,1021,984,972,972,991,991,1066],
[1037,1041,1000,1019,0,1008,994,1007,1040,1003,1009,1016,1059],
[994,1011,999,972,992,0,1004,997,974,998,959,1013,1030],
[1020,1019,1010,979,1006,996,0,976,988,1005,1026,1006,1023],
[1028,1048,1009,1016,993,1003,1024,0,1001,1001,991,980,1062],
[1025,1026,1019,1028,960,1026,1012,999,0,998,1000,1012,1031],
[1032,1007,1019,1028,997,1002,995,999,1002,0,976,1003,1062],
[1041,1013,1022,1009,991,1041,974,1009,1000,1024,0,1009,1079],
[996,1022,1017,1009,984,987,994,1020,988,997,991,0,1027],
[968,970,976,934,941,970,977,938,969,938,921,973,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 188, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,793,1033,901,778,916,934,927,972,921,1091,929,1034],
[1207,0,970,996,793,835,943,946,827,740,1016,961,879],
[967,1030,0,937,956,936,866,960,970,869,972,1084,858],
[1099,1004,1063,0,932,765,1115,1073,771,825,866,1019,819],
[1222,1207,1044,1068,0,917,1104,1137,1182,903,1061,1092,1054],
[1084,1165,1064,1235,1083,0,1209,1294,1016,1020,1084,1014,937],
[1066,1057,1134,885,896,791,0,936,1004,888,1054,1083,922],
[1073,1054,1040,927,863,706,1064,0,1181,928,1045,1046,942],
[1028,1173,1030,1229,818,984,996,819,0,944,1240,1012,1050],
[1079,1260,1131,1175,1097,980,1112,1072,1056,0,1449,1111,1018],
[909,984,1028,1134,939,916,946,955,760,551,0,914,407],
[1071,1039,916,981,908,986,917,954,988,889,1086,0,891],
[966,1121,1142,1181,946,1063,1078,1058,950,982,1593,1109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 189, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,977,1029,992,987,997,974,970,965,981,999,992,996],
[1023,0,1001,1020,1003,1002,981,1002,963,1015,1005,1004,1020],
[971,999,0,1005,1035,1040,977,989,979,1022,1004,1025,1037],
[1008,980,995,0,1025,1007,1000,1005,987,1033,984,1013,1022],
[1013,997,965,975,0,997,996,971,956,1013,1014,962,1029],
[1003,998,960,993,1003,0,987,1001,967,1004,1020,1012,1021],
[1026,1019,1023,1000,1004,1013,0,994,1007,1038,1021,1041,1067],
[1030,998,1011,995,1029,999,1006,0,1020,1029,1027,1037,1049],
[1035,1037,1021,1013,1044,1033,993,980,0,1014,1036,1037,1032],
[1019,985,978,967,987,996,962,971,986,0,1011,999,1009],
[1001,995,996,1016,986,980,979,973,964,989,0,1014,1014],
[1008,996,975,987,1038,988,959,963,963,1001,986,0,996],
[1004,980,963,978,971,979,933,951,968,991,986,1004,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 190, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1014,1044,1002,1010,991,1054,1022,1046,1000,1019,1068,961],
[986,0,1035,983,984,959,990,988,1025,993,1006,1014,1000],
[956,965,0,947,966,939,973,983,989,976,988,982,979],
[998,1017,1053,0,1009,956,1065,1027,1057,980,1024,1030,1012],
[990,1016,1034,991,0,991,1005,1069,1023,975,995,1018,966],
[1009,1041,1061,1044,1009,0,1038,1004,1023,996,1056,1037,987],
[946,1010,1027,935,995,962,0,1021,1021,967,1013,1000,974],
[978,1012,1017,973,931,996,979,0,978,988,956,984,956],
[954,975,1011,943,977,977,979,1022,0,945,979,999,953],
[1000,1007,1024,1020,1025,1004,1033,1012,1055,0,996,1058,1001],
[981,994,1012,976,1005,944,987,1044,1021,1004,0,990,984],
[932,986,1018,970,982,963,1000,1016,1001,942,1010,0,957],
[1039,1000,1021,988,1034,1013,1026,1044,1047,999,1016,1043,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 191, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,998,984,977,995,976,971,952,991,977,985,997,1015],
[1002,0,968,966,1028,978,991,957,1007,942,981,1023,994],
[1016,1032,0,998,1067,1021,1015,1023,1015,1002,1034,1036,1038],
[1023,1034,1002,0,1040,1013,980,996,1014,957,1042,1042,1013],
[1005,972,933,960,0,984,952,962,949,959,964,967,998],
[1024,1022,979,987,1016,0,1004,996,986,1003,1028,1027,1003],
[1029,1009,985,1020,1048,996,0,967,1022,974,1052,1001,1022],
[1048,1043,977,1004,1038,1004,1033,0,1027,993,1020,1024,1047],
[1009,993,985,986,1051,1014,978,973,0,1022,1019,991,986],
[1023,1058,998,1043,1041,997,1026,1007,978,0,1046,1029,1029],
[1015,1019,966,958,1036,972,948,980,981,954,0,991,993],
[1003,977,964,958,1033,973,999,976,1009,971,1009,0,1000],
[985,1006,962,987,1002,997,978,953,1014,971,1007,1000,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 192, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1019,1014,954,948,978,976,953,928,1001,951,982,954],
[981,0,1053,968,995,982,1005,957,938,964,941,987,936],
[986,947,0,1010,1027,978,1019,987,954,1012,998,1023,975],
[1046,1032,990,0,1047,979,974,1000,952,1050,1034,1097,1007],
[1052,1005,973,953,0,968,967,993,971,991,941,976,975],
[1022,1018,1022,1021,1032,0,999,1007,941,988,971,1097,1007],
[1024,995,981,1026,1033,1001,0,996,980,968,990,1047,1002],
[1047,1043,1013,1000,1007,993,1004,0,1002,998,1004,1003,1007],
[1072,1062,1046,1048,1029,1059,1020,998,0,1022,1034,1076,972],
[999,1036,988,950,1009,1012,1032,1002,978,0,1044,1057,1031],
[1049,1059,1002,966,1059,1029,1010,996,966,956,0,1058,1030],
[1018,1013,977,903,1024,903,953,997,924,943,942,0,966],
[1046,1064,1025,993,1025,993,998,993,1028,969,970,1034,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 193, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1022,1023,1041,1002,1022,1000,1008,999,1054,1043,986,1008],
[978,0,1007,1016,996,1037,1009,1000,983,1010,1010,992,990],
[977,993,0,1007,1010,1026,994,987,985,1037,1020,994,980],
[959,984,993,0,953,988,954,968,974,986,1003,972,958],
[998,1004,990,1047,0,1023,974,980,1019,1037,1043,1015,995],
[978,963,974,1012,977,0,953,974,977,991,1007,943,987],
[1000,991,1006,1046,1026,1047,0,963,1016,1053,995,1010,999],
[992,1000,1013,1032,1020,1026,1037,0,1026,1038,1042,1003,998],
[1001,1017,1015,1026,981,1023,984,974,0,1026,1032,991,998],
[946,990,963,1014,963,1009,947,962,974,0,1020,967,975],
[957,990,980,997,957,993,1005,958,968,980,0,980,988],
[1014,1008,1006,1028,985,1057,990,997,1009,1033,1020,0,969],
[992,1010,1020,1042,1005,1013,1001,1002,1002,1025,1012,1031,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 194, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,941,675,1057,1316,1276,1257,858,967,616,433,1016,1032],
[1059,0,1125,1164,1082,1483,941,965,1109,859,949,1164,1041],
[1325,875,0,1089,1441,1426,1125,708,1182,722,1089,1348,1548],
[943,836,911,0,868,1368,924,1017,1036,1009,768,826,1466],
[684,918,559,1132,0,1010,1325,965,734,859,851,1175,900],
[724,517,574,632,990,0,724,1024,792,765,898,724,724],
[743,1059,875,1076,675,1276,0,809,1000,875,867,1191,1259],
[1142,1035,1292,983,1035,976,1191,0,976,917,883,1357,1442],
[1033,891,818,964,1266,1208,1000,1024,0,833,1098,1000,932],
[1384,1141,1278,991,1141,1235,1125,1083,1167,0,867,1450,1333],
[1567,1051,911,1232,1149,1102,1133,1117,902,1133,0,833,1309],
[984,836,652,1174,825,1276,809,643,1000,550,1167,0,1466],
[968,959,452,534,1100,1276,741,558,1068,667,691,534,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 195, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1044,983,963,1024,1008,987,1084,989,1013,1016,997,1040],
[956,0,998,915,948,951,972,1065,943,1011,1014,1002,946],
[1017,1002,0,909,1004,992,1007,1100,936,1019,981,1007,1010],
[1037,1085,1091,0,997,1106,1070,1157,1015,1060,1056,1051,1077],
[976,1052,996,1003,0,956,1025,1049,934,984,1007,968,1030],
[992,1049,1008,894,1044,0,990,1098,971,1036,1017,975,1042],
[1013,1028,993,930,975,1010,0,1080,997,1094,1022,1046,948],
[916,935,900,843,951,902,920,0,948,965,908,931,961],
[1011,1057,1064,985,1066,1029,1003,1052,0,1057,993,1028,1063],
[987,989,981,940,1016,964,906,1035,943,0,966,1020,979],
[984,986,1019,944,993,983,978,1092,1007,1034,0,1015,1002],
[1003,998,993,949,1032,1025,954,1069,972,980,985,0,990],
[960,1054,990,923,970,958,1052,1039,937,1021,998,1010,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 196, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1103,745,884,851,722,848,824,843,883,778,869,969],
[897,0,682,934,853,807,854,679,856,664,674,523,1046],
[1255,1318,0,1168,1112,1117,1038,1113,1027,921,1107,952,1274],
[1116,1066,832,0,975,1007,903,797,1002,875,814,826,1086],
[1149,1147,888,1025,0,761,843,752,1109,891,964,781,1072],
[1278,1193,883,993,1239,0,905,1039,1095,1032,971,896,1263],
[1152,1146,962,1097,1157,1095,0,970,1050,941,855,747,1189],
[1176,1321,887,1203,1248,961,1030,0,956,1032,1025,1125,1264],
[1157,1144,973,998,891,905,950,1044,0,1091,943,832,1252],
[1117,1336,1079,1125,1109,968,1059,968,909,0,1017,1010,1099],
[1222,1326,893,1186,1036,1029,1145,975,1057,983,0,848,1130],
[1131,1477,1048,1174,1219,1104,1253,875,1168,990,1152,0,1288],
[1031,954,726,914,928,737,811,736,748,901,870,712,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 197, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1023,1018,995,1044,1034,1024,1029,991,1000,1018,1006,1000],
[977,0,1022,973,1009,1000,962,981,994,967,1017,998,987],
[982,978,0,961,999,997,997,967,978,958,979,977,991],
[1005,1027,1039,0,1002,1044,982,1022,1005,980,995,994,993],
[956,991,1001,998,0,1005,987,996,986,967,961,996,1002],
[966,1000,1003,956,995,0,971,993,982,976,985,979,979],
[976,1038,1003,1018,1013,1029,0,999,1027,977,1024,1001,1002],
[971,1019,1033,978,1004,1007,1001,0,971,981,1008,1008,988],
[1009,1006,1022,995,1014,1018,973,1029,0,993,991,984,998],
[1000,1033,1042,1020,1033,1024,1023,1019,1007,0,1008,978,981],
[982,983,1021,1005,1039,1015,976,992,1009,992,0,998,1000],
[994,1002,1023,1006,1004,1021,999,992,1016,1022,1002,0,992],
[1000,1013,1009,1007,998,1021,998,1012,1002,1019,1000,1008,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 198, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,1022,944,1022,983,1033,946,991,1005,1018,982,1039,1014],
[978,0,952,1055,995,993,988,1009,970,1025,1000,1037,1010],
[1056,1048,0,1143,1042,1019,1042,1059,1009,994,996,1039,1047],
[978,945,857,0,971,940,948,912,972,958,941,960,991],
[1017,1005,958,1029,0,1031,943,989,1031,996,1027,1041,1024],
[967,1007,981,1060,969,0,972,934,968,995,929,969,987],
[1054,1012,958,1052,1057,1028,0,975,1075,1050,1001,1019,1044],
[1009,991,941,1088,1011,1066,1025,0,1053,1046,1010,1073,1007],
[995,1030,991,1028,969,1032,925,947,0,957,1029,1023,1016],
[982,975,1006,1042,1004,1005,950,954,1043,0,952,1015,1033],
[1018,1000,1004,1059,973,1071,999,990,971,1048,0,1035,1031],
[961,963,961,1040,959,1031,981,927,977,985,965,0,1024],
[986,990,953,1009,976,1013,956,993,984,967,969,976,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 199, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,997,979,1014,981,1002,976,1018,1023,974,1023,997,988],
[1003,0,988,1029,1000,1020,960,1035,1017,972,1029,989,1029],
[1021,1012,0,1025,990,1003,967,1046,1026,981,1032,1034,1029],
[986,971,975,0,958,991,981,1037,979,958,996,991,947],
[1019,1000,1010,1042,0,1016,1003,1024,1048,1020,1021,1033,1018],
[998,980,997,1009,984,0,985,999,992,972,1019,986,1042],
[1024,1040,1033,1019,997,1015,0,1072,1021,1007,1022,1033,1032],
[982,965,954,963,976,1001,928,0,1008,971,1009,994,966],
[977,983,974,1021,952,1008,979,992,0,1014,1017,991,1004],
[1026,1028,1019,1042,980,1028,993,1029,986,0,1052,1019,1011],
[977,971,968,1004,979,981,978,991,983,948,0,968,968],
[1003,1011,966,1009,967,1014,967,1006,1009,981,1032,0,979],
[1012,971,971,1053,982,958,968,1034,996,989,1032,1021,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 2000, 200, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebbrcw/mebbrcw_13_2000.csv", index=False, header=False)

import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg

rep = 1
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,132,127,123,121,128,126,136,122,121,124,122,129],
[118,0,111,126,126,124,126,125,114,120,118,116,119],
[123,139,0,125,126,133,125,137,125,125,132,124,130],
[127,124,125,0,135,124,140,130,126,122,121,120,127],
[129,124,124,115,0,123,138,138,117,113,131,126,130],
[122,126,117,126,127,0,129,133,127,118,121,125,133],
[124,124,125,110,112,121,0,126,114,120,124,124,134],
[114,125,113,120,112,117,124,0,112,109,115,109,120],
[128,136,125,124,133,123,136,138,0,122,131,130,128],
[129,130,125,128,137,132,130,141,128,0,133,128,144],
[126,132,118,129,119,129,126,135,119,117,0,108,124],
[128,134,126,130,124,125,126,141,120,122,142,0,127],
[121,131,120,123,120,117,116,130,122,106,126,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 1, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,103,144,113,137,130,124,98,118,125,132,129],
[110,0,112,108,107,128,121,140,91,110,138,117,131],
[147,138,0,126,121,145,139,133,103,132,146,131,121],
[106,142,124,0,127,122,135,126,109,117,146,126,143],
[137,143,129,123,0,136,156,145,97,118,148,136,132],
[113,122,105,128,114,0,125,110,97,107,139,129,127],
[120,129,111,115,94,125,0,129,99,122,126,117,99],
[126,110,117,124,105,140,121,0,87,107,137,118,129],
[152,159,147,141,153,153,151,163,0,122,149,153,134],
[132,140,118,133,132,143,128,143,128,0,153,136,123],
[125,112,104,104,102,111,124,113,101,97,0,111,102],
[118,133,119,124,114,121,133,132,97,114,139,0,108],
[121,119,129,107,118,123,151,121,116,127,148,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 2, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,117,68,114,137,102,132,149,129,92,113,112],
[139,0,89,50,128,137,112,108,121,102,93,90,84],
[133,161,0,80,127,150,95,165,143,134,110,116,106],
[182,200,170,0,186,198,129,196,149,133,110,163,140],
[136,122,123,64,0,114,67,129,139,113,97,114,104],
[113,113,100,52,136,0,89,132,128,85,105,104,89],
[148,138,155,121,183,161,0,148,160,128,119,115,103],
[118,142,85,54,121,118,102,0,125,58,66,123,46],
[101,129,107,101,111,122,90,125,0,78,102,118,105],
[121,148,116,117,137,165,122,192,172,0,107,123,60],
[158,157,140,140,153,145,131,184,148,143,0,153,110],
[137,160,134,87,136,146,135,127,132,127,97,0,117],
[138,166,144,110,146,161,147,204,145,190,140,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 3, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,155,220,131,175,116,162,127,123,169,170,214],
[75,0,65,173,14,192,134,80,114,95,134,61,156],
[95,185,0,205,119,155,154,184,185,166,242,172,180],
[30,77,45,0,53,154,96,87,69,102,134,75,98],
[119,236,131,197,0,236,177,139,157,139,170,111,215],
[75,58,95,96,14,0,103,110,164,126,164,111,148],
[134,116,96,154,73,147,0,188,165,184,243,112,207],
[88,170,66,163,111,140,62,0,119,87,222,100,127],
[123,136,65,181,93,86,85,131,0,181,137,139,169],
[127,155,84,148,111,124,66,163,69,0,192,100,156],
[81,116,8,116,80,86,7,28,113,58,0,16,105],
[80,189,78,175,139,139,138,150,111,150,234,0,169],
[36,94,70,152,35,102,43,123,81,94,145,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 4, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,131,148,131,144,98,150,130,128,126,140,90],
[122,0,167,183,154,178,142,172,134,152,151,147,144],
[119,83,0,130,140,89,92,132,113,118,102,131,69],
[102,67,120,0,134,126,83,118,94,113,94,121,92],
[119,96,110,116,0,118,120,188,125,132,102,131,94],
[106,72,161,124,132,0,103,148,95,119,112,113,124],
[152,108,158,167,130,147,0,155,107,188,122,149,131],
[100,78,118,132,62,102,95,0,87,86,95,114,90],
[120,116,137,156,125,155,143,163,0,187,139,117,115],
[122,98,132,137,118,131,62,164,63,0,115,128,101],
[124,99,148,156,148,138,128,155,111,135,0,151,105],
[110,103,119,129,119,137,101,136,133,122,99,0,93],
[160,106,181,158,156,126,119,160,135,149,145,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 5, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,133,131,125,130,128,114,134,122,137,132,113],
[127,0,135,134,126,134,119,130,120,127,132,132,116],
[117,115,0,116,107,118,125,107,121,104,122,130,108],
[119,116,134,0,123,127,107,114,122,116,126,126,120],
[125,124,143,127,0,128,130,125,113,115,122,126,118],
[120,116,132,123,122,0,125,111,123,115,134,130,114],
[122,131,125,143,120,125,0,117,125,123,132,120,122],
[136,120,143,136,125,139,133,0,135,128,137,125,129],
[116,130,129,128,137,127,125,115,0,124,130,124,120],
[128,123,146,134,135,135,127,122,126,0,141,133,126],
[113,118,128,124,128,116,118,113,120,109,0,114,116],
[118,118,120,124,124,120,130,125,126,117,136,0,116],
[137,134,142,130,132,136,128,121,130,124,134,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 6, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,123,148,135,139,138,136,147,137,143,131,144],
[116,0,113,123,127,132,118,127,137,106,119,111,127],
[127,137,0,138,151,145,130,127,145,124,132,130,139],
[102,127,112,0,142,135,119,122,120,122,127,119,129],
[115,123,99,108,0,146,122,118,115,100,116,128,123],
[111,118,105,115,104,0,103,121,115,102,106,105,108],
[112,132,120,131,128,147,0,126,140,129,132,135,130],
[114,123,123,128,132,129,124,0,127,107,124,130,140],
[103,113,105,130,135,135,110,123,0,102,117,113,115],
[113,144,126,128,150,148,121,143,148,0,127,143,132],
[107,131,118,123,134,144,118,126,133,123,0,131,118],
[119,139,120,131,122,145,115,120,137,107,119,0,122],
[106,123,111,121,127,142,120,110,135,118,132,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 7, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,113,132,119,115,116,135,125,132,118,121,137],
[130,0,113,126,126,137,132,144,137,136,123,133,139],
[137,137,0,127,128,125,130,149,130,130,128,135,145],
[118,124,123,0,110,114,116,128,122,118,120,129,127],
[131,124,122,140,0,121,126,141,129,126,134,141,140],
[135,113,125,136,129,0,126,146,136,127,131,141,137],
[134,118,120,134,124,124,0,142,115,125,119,130,131],
[115,106,101,122,109,104,108,0,106,113,110,119,119],
[125,113,120,128,121,114,135,144,0,123,127,127,136],
[118,114,120,132,124,123,125,137,127,0,125,144,126],
[132,127,122,130,116,119,131,140,123,125,0,124,128],
[129,117,115,121,109,109,120,131,123,106,126,0,129],
[113,111,105,123,110,113,119,131,114,124,122,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 8, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,132,135,151,136,146,136,126,141,130,125,143],
[110,0,131,115,126,133,131,120,115,133,110,110,121],
[118,119,0,115,128,115,120,127,117,123,115,105,128],
[115,135,135,0,136,129,133,128,125,139,119,123,138],
[99,124,122,114,0,117,121,104,107,111,102,113,119],
[114,117,135,121,133,0,126,118,113,119,111,111,119],
[104,119,130,117,129,124,0,113,98,128,105,110,123],
[114,130,123,122,146,132,137,0,129,132,135,135,142],
[124,135,133,125,143,137,152,121,0,141,114,119,136],
[109,117,127,111,139,131,122,118,109,0,110,124,118],
[120,140,135,131,148,139,145,115,136,140,0,125,140],
[125,140,145,127,137,139,140,115,131,126,125,0,139],
[107,129,122,112,131,131,127,108,114,132,110,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 9, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,107,124,135,120,86,114,107,118,103,108,110],
[134,0,122,112,154,130,117,142,145,135,153,140,135],
[143,128,0,131,133,120,114,140,119,137,133,139,112],
[126,138,119,0,139,100,110,122,124,127,120,129,124],
[115,96,117,111,0,101,95,112,121,121,106,103,94],
[130,120,130,150,149,0,105,113,126,128,129,120,117],
[164,133,136,140,155,145,0,147,157,149,129,136,125],
[136,108,110,128,138,137,103,0,139,136,118,123,115],
[143,105,131,126,129,124,93,111,0,146,122,121,109],
[132,115,113,123,129,122,101,114,104,0,113,106,121],
[147,97,117,130,144,121,121,132,128,137,0,133,124],
[142,110,111,121,147,130,114,127,129,144,117,0,113],
[140,115,138,126,156,133,125,135,141,129,126,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 10, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,138,129,143,133,125,136,123,122,134,129,134],
[122,0,124,127,135,131,124,130,130,130,125,120,134],
[112,126,0,130,121,120,118,128,123,116,113,113,136],
[121,123,120,0,135,136,130,149,129,130,120,121,136],
[107,115,129,115,0,134,118,130,120,130,127,114,127],
[117,119,130,114,116,0,114,122,118,118,114,124,126],
[125,126,132,120,132,136,0,127,127,131,121,124,123],
[114,120,122,101,120,128,123,0,122,112,114,104,131],
[127,120,127,121,130,132,123,128,0,123,112,122,126],
[128,120,134,120,120,132,119,138,127,0,126,117,133],
[116,125,137,130,123,136,129,136,138,124,0,119,131],
[121,130,137,129,136,126,126,146,128,133,131,0,133],
[116,116,114,114,123,124,127,119,124,117,119,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 11, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,142,132,145,136,148,145,140,139,132,132,135],
[131,0,135,123,138,133,144,156,139,138,127,127,128],
[108,115,0,121,139,130,129,130,122,121,110,109,114],
[118,127,129,0,141,127,134,140,138,124,137,127,127],
[105,112,111,109,0,127,124,126,116,118,114,116,119],
[114,117,120,123,123,0,123,129,118,122,131,121,119],
[102,106,121,116,126,127,0,125,118,123,116,114,101],
[105,94,120,110,124,121,125,0,124,113,110,117,115],
[110,111,128,112,134,132,132,126,0,129,125,119,139],
[111,112,129,126,132,128,127,137,121,0,126,127,120],
[118,123,140,113,136,119,134,140,125,124,0,117,133],
[118,123,141,123,134,129,136,133,131,123,133,0,142],
[115,122,136,123,131,131,149,135,111,130,117,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 12, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,114,103,112,97,109,116,172,125,112,111,133],
[138,0,107,136,134,93,114,125,157,91,90,131,137],
[136,143,0,146,139,121,110,140,133,129,128,153,157],
[147,114,104,0,140,133,129,143,138,124,142,154,171],
[138,116,111,110,0,106,111,135,149,112,111,116,157],
[153,157,129,117,144,0,110,137,177,170,152,173,177],
[141,136,140,121,139,140,0,146,163,152,114,145,162],
[134,125,110,107,115,113,104,0,155,131,109,131,153],
[78,93,117,112,101,73,87,95,0,98,80,113,112],
[125,159,121,126,138,80,98,119,152,0,130,126,122],
[138,160,122,108,139,98,136,141,170,120,0,169,167],
[139,119,97,96,134,77,105,119,137,124,81,0,152],
[117,113,93,79,93,73,88,97,138,128,83,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 13, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,100,100,108,107,100,117,101,120,106,110],
[142,0,137,115,125,134,125,115,144,133,132,129,142],
[148,113,0,112,123,124,129,120,118,127,136,124,128],
[150,135,138,0,136,126,139,125,137,132,133,131,143],
[150,125,127,114,0,127,119,124,130,124,134,134,135],
[142,116,126,124,123,0,138,115,137,123,140,122,130],
[143,125,121,111,131,112,0,118,121,113,131,126,139],
[150,135,130,125,126,135,132,0,136,120,144,128,130],
[133,106,132,113,120,113,129,114,0,109,126,119,127],
[149,117,123,118,126,127,137,130,141,0,135,129,134],
[130,118,114,117,116,110,119,106,124,115,0,116,122],
[144,121,126,119,116,128,124,122,131,121,134,0,122],
[140,108,122,107,115,120,111,120,123,116,128,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 14, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,98,132,104,88,88,86,88,88,86,157,127],
[135,0,110,139,148,107,121,121,110,151,113,159,141],
[152,140,0,176,149,154,128,101,118,145,126,181,115],
[118,111,74,0,122,153,79,100,110,83,131,140,140],
[146,102,101,128,0,92,122,124,90,117,99,147,152],
[162,143,96,97,158,0,127,119,107,123,154,129,150],
[162,129,122,171,128,123,0,151,133,91,122,142,161],
[164,129,149,150,126,131,99,0,104,121,146,168,123],
[162,140,132,140,160,143,117,146,0,137,120,169,129],
[162,99,105,167,133,127,159,129,113,0,88,164,169],
[164,137,124,119,151,96,128,104,130,162,0,169,140],
[93,91,69,110,103,121,108,82,81,86,81,0,116],
[123,109,135,110,98,100,89,127,121,81,110,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 15, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,117,118,105,112,114,113,122,109,113,144,125],
[129,0,102,116,98,110,85,106,109,105,118,128,142],
[133,148,0,123,105,118,114,135,130,134,118,129,124],
[132,134,127,0,124,126,126,109,129,125,128,154,154],
[145,152,145,126,0,112,125,110,130,116,137,151,140],
[138,140,132,124,138,0,124,141,134,143,154,156,158],
[136,165,136,124,125,126,0,148,138,103,138,146,152],
[137,144,115,141,140,109,102,0,101,114,127,144,136],
[128,141,120,121,120,116,112,149,0,107,123,139,143],
[141,145,116,125,134,107,147,136,143,0,126,157,142],
[137,132,132,122,113,96,112,123,127,124,0,132,145],
[106,122,121,96,99,94,104,106,111,93,118,0,141],
[125,108,126,96,110,92,98,114,107,108,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 16, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,129,117,130,133,130,125,118,125,114,129,126],
[126,0,120,125,134,133,137,128,123,122,126,133,128],
[121,130,0,112,133,130,122,122,120,123,114,140,133],
[133,125,138,0,126,139,122,126,129,133,125,134,130],
[120,116,117,124,0,117,129,121,119,115,118,127,124],
[117,117,120,111,133,0,118,113,115,117,118,130,124],
[120,113,128,128,121,132,0,128,124,128,128,137,131],
[125,122,128,124,129,137,122,0,126,119,126,130,131],
[132,127,130,121,131,135,126,124,0,122,118,129,128],
[125,128,127,117,135,133,122,131,128,0,123,141,131],
[136,124,136,125,132,132,122,124,132,127,0,137,127],
[121,117,110,116,123,120,113,120,121,109,113,0,122],
[124,122,117,120,126,126,119,119,122,119,123,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 17, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,117,114,114,107,101,138,89,115,100,93,121],
[98,0,104,101,80,98,108,124,80,106,93,90,125],
[133,146,0,111,124,127,136,138,108,127,129,106,136],
[136,149,139,0,126,129,124,133,129,113,122,103,148],
[136,170,126,124,0,144,106,132,78,134,137,130,149],
[143,152,123,121,106,0,113,112,78,125,135,106,142],
[149,142,114,126,144,137,0,134,126,120,130,110,147],
[112,126,112,117,118,138,116,0,108,119,124,96,124],
[161,170,142,121,172,172,124,142,0,144,166,128,156],
[135,144,123,137,116,125,130,131,106,0,127,91,155],
[150,157,121,128,113,115,120,126,84,123,0,105,160],
[157,160,144,147,120,144,140,154,122,159,145,0,158],
[129,125,114,102,101,108,103,126,94,95,90,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 18, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,129,133,112,127,117,117,129,127,132,119,115],
[122,0,124,130,122,115,126,130,119,128,124,118,114],
[121,126,0,124,117,132,119,117,121,118,123,117,121],
[117,120,126,0,114,129,126,111,114,117,122,128,119],
[138,128,133,136,0,135,130,130,120,135,134,134,132],
[123,135,118,121,115,0,122,132,113,134,140,117,121],
[133,124,131,124,120,128,0,122,110,128,114,119,123],
[133,120,133,139,120,118,128,0,126,131,137,124,126],
[121,131,129,136,130,137,140,124,0,129,130,130,117],
[123,122,132,133,115,116,122,119,121,0,126,114,127],
[118,126,127,128,116,110,136,113,120,124,0,121,127],
[131,132,133,122,116,133,131,126,120,136,129,0,129],
[135,136,129,131,118,129,127,124,133,123,123,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 19, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,121,148,120,145,144,117,120,126,115,128,121],
[142,0,121,145,135,138,153,122,138,124,141,123,135],
[129,129,0,155,134,146,140,109,141,128,141,96,154],
[102,105,95,0,108,114,104,93,114,85,111,66,102],
[130,115,116,142,0,118,142,113,114,112,136,93,133],
[105,112,104,136,132,0,119,105,102,84,125,113,136],
[106,97,110,146,108,131,0,136,102,103,139,125,124],
[133,128,141,157,137,145,114,0,103,120,146,144,134],
[130,112,109,136,136,148,148,147,0,136,133,132,156],
[124,126,122,165,138,166,147,130,114,0,134,108,143],
[135,109,109,139,114,125,111,104,117,116,0,106,144],
[122,127,154,184,157,137,125,106,118,142,144,0,127],
[129,115,96,148,117,114,126,116,94,107,106,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 20, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,116,113,111,110,113,108,116,124,128,110,113],
[129,0,127,121,122,128,130,122,125,135,136,125,126],
[134,123,0,130,135,123,129,125,135,148,138,134,138],
[137,129,120,0,130,115,123,132,125,130,122,130,127],
[139,128,115,120,0,120,128,138,122,145,132,121,131],
[140,122,127,135,130,0,138,120,131,140,140,130,142],
[137,120,121,127,122,112,0,113,118,141,148,119,134],
[142,128,125,118,112,130,137,0,130,131,141,131,140],
[134,125,115,125,128,119,132,120,0,136,116,119,125],
[126,115,102,120,105,110,109,119,114,0,111,108,127],
[122,114,112,128,118,110,102,109,134,139,0,109,115],
[140,125,116,120,129,120,131,119,131,142,141,0,127],
[137,124,112,123,119,108,116,110,125,123,135,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 21, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,113,132,152,108,118,98,129,126,132,147,120],
[78,0,92,100,99,142,95,79,140,74,70,128,113],
[137,158,0,127,183,188,95,126,191,115,148,138,106],
[118,150,123,0,191,136,97,94,153,111,145,154,110],
[98,151,67,59,0,97,101,79,148,86,105,116,112],
[142,108,62,114,153,0,38,94,130,90,103,106,50],
[132,155,155,153,149,212,0,101,168,110,117,154,147],
[152,171,124,156,171,156,149,0,192,175,139,209,173],
[121,110,59,97,102,120,82,58,0,87,80,120,74],
[124,176,135,139,164,160,140,75,163,0,138,131,110],
[118,180,102,105,145,147,133,111,170,112,0,168,159],
[103,122,112,96,134,144,96,41,130,119,82,0,102],
[130,137,144,140,138,200,103,77,176,140,91,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 22, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,124,135,133,118,128,124,120,114,120,115,122],
[129,0,136,124,134,127,121,123,124,126,117,123,117],
[126,114,0,115,116,112,130,123,116,122,118,110,118],
[115,126,135,0,111,116,115,115,124,110,108,109,129],
[117,116,134,139,0,109,125,116,113,107,120,125,111],
[132,123,138,134,141,0,137,131,129,125,123,129,129],
[122,129,120,135,125,113,0,114,111,119,115,120,124],
[126,127,127,135,134,119,136,0,139,114,117,116,115],
[130,126,134,126,137,121,139,111,0,110,116,111,120],
[136,124,128,140,143,125,131,136,140,0,125,127,123],
[130,133,132,142,130,127,135,133,134,125,0,141,116],
[135,127,140,141,125,121,130,134,139,123,109,0,120],
[128,133,132,121,139,121,126,135,130,127,134,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 23, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,116,107,111,115,122,112,131,110,116,132,118],
[121,0,112,110,113,113,129,108,119,128,104,124,118],
[134,138,0,117,126,132,127,135,135,133,123,135,139],
[143,140,133,0,117,128,129,130,140,139,136,137,143],
[139,137,124,133,0,124,121,124,132,143,119,138,131],
[135,137,118,122,126,0,126,123,131,135,129,142,129],
[128,121,123,121,129,124,0,126,125,123,111,138,129],
[138,142,115,120,126,127,124,0,139,134,120,136,109],
[119,131,115,110,118,119,125,111,0,129,109,130,122],
[140,122,117,111,107,115,127,116,121,0,113,141,129],
[134,146,127,114,131,121,139,130,141,137,0,139,125],
[118,126,115,113,112,108,112,114,120,109,111,0,115],
[132,132,111,107,119,121,121,141,128,121,125,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 24, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,124,124,135,113,120,115,125,118,123,123,113],
[120,0,126,115,127,117,126,122,121,106,115,110,115],
[126,124,0,129,133,114,119,138,121,122,115,122,131],
[126,135,121,0,138,102,132,143,130,128,125,126,138],
[115,123,117,112,0,99,120,126,128,111,122,118,123],
[137,133,136,148,151,0,135,147,125,118,134,114,135],
[130,124,131,118,130,115,0,125,121,123,136,141,118],
[135,128,112,107,124,103,125,0,109,112,125,127,125],
[125,129,129,120,122,125,129,141,0,106,128,120,113],
[132,144,128,122,139,132,127,138,144,0,120,131,134],
[127,135,135,125,128,116,114,125,122,130,0,121,119],
[127,140,128,124,132,136,109,123,130,119,129,0,136],
[137,135,119,112,127,115,132,125,137,116,131,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 25, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,133,135,129,141,120,118,127,119,131,127,131],
[123,0,144,149,144,143,123,137,123,123,125,123,135],
[117,106,0,126,132,122,117,113,107,111,113,121,121],
[115,101,124,0,121,126,103,118,114,118,106,112,122],
[121,106,118,129,0,111,111,131,112,113,116,103,121],
[109,107,128,124,139,0,116,118,113,114,117,110,127],
[130,127,133,147,139,134,0,133,122,127,128,127,138],
[132,113,137,132,119,132,117,0,113,125,117,126,128],
[123,127,143,136,138,137,128,137,0,131,128,136,137],
[131,127,139,132,137,136,123,125,119,0,128,128,134],
[119,125,137,144,134,133,122,133,122,122,0,127,129],
[123,127,129,138,147,140,123,124,114,122,123,0,138],
[119,115,129,128,129,123,112,122,113,116,121,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 26, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,121,124,144,134,128,134,130,142,140,141,127],
[122,0,112,111,119,120,134,111,130,118,129,132,120],
[129,138,0,131,133,142,134,131,127,137,142,140,122],
[126,139,119,0,142,140,140,142,120,136,144,144,133],
[106,131,117,108,0,128,117,116,124,116,132,128,107],
[116,130,108,110,122,0,122,119,120,123,130,133,117],
[122,116,116,110,133,128,0,120,114,114,132,122,114],
[116,139,119,108,134,131,130,0,129,119,128,124,114],
[120,120,123,130,126,130,136,121,0,126,124,137,115],
[108,132,113,114,134,127,136,131,124,0,131,115,107],
[110,121,108,106,118,120,118,122,126,119,0,130,111],
[109,118,110,106,122,117,128,126,113,135,120,0,108],
[123,130,128,117,143,133,136,136,135,143,139,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 27, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,125,129,103,138,117,121,102,117,129,121,122],
[138,0,112,118,105,138,133,116,116,109,117,117,116],
[125,138,0,137,123,149,117,103,118,123,134,122,140],
[121,132,113,0,110,121,139,100,113,108,125,108,116],
[147,145,127,140,0,151,128,123,105,121,128,124,141],
[112,112,101,129,99,0,128,90,94,115,103,104,103],
[133,117,133,111,122,122,0,124,122,111,132,113,112],
[129,134,147,150,127,160,126,0,137,116,125,131,144],
[148,134,132,137,145,156,128,113,0,115,128,129,137],
[133,141,127,142,129,135,139,134,135,0,143,118,126],
[121,133,116,125,122,147,118,125,122,107,0,132,146],
[129,133,128,142,126,146,137,119,121,132,118,0,128],
[128,134,110,134,109,147,138,106,113,124,104,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 28, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,136,122,118,115,116,117,118,122,113,130,130],
[120,0,127,113,114,112,112,116,113,125,119,121,129],
[114,123,0,111,115,116,107,112,112,118,116,126,123],
[128,137,139,0,127,132,126,125,123,127,122,122,137],
[132,136,135,123,0,123,119,117,114,119,112,133,134],
[135,138,134,118,127,0,122,120,117,118,119,131,136],
[134,138,143,124,131,128,0,128,128,122,122,135,132],
[133,134,138,125,133,130,122,0,121,125,130,141,133],
[132,137,138,127,136,133,122,129,0,134,129,133,137],
[128,125,132,123,131,132,128,125,116,0,119,124,144],
[137,131,134,128,138,131,128,120,121,131,0,131,139],
[120,129,124,128,117,119,115,109,117,126,119,0,121],
[120,121,127,113,116,114,118,117,113,106,111,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 29, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,130,113,128,121,110,126,114,118,135,121,111],
[110,0,142,113,116,112,94,112,104,114,156,119,106],
[120,108,0,114,113,116,95,99,120,125,137,103,113],
[137,137,136,0,135,140,131,127,143,144,147,121,115],
[122,134,137,115,0,135,112,122,129,126,148,132,119],
[129,138,134,110,115,0,110,123,107,116,141,124,106],
[140,156,155,119,138,140,0,142,136,124,150,140,122],
[124,138,151,123,128,127,108,0,122,118,151,126,113],
[136,146,130,107,121,143,114,128,0,137,146,123,110],
[132,136,125,106,124,134,126,132,113,0,152,127,129],
[115,94,113,103,102,109,100,99,104,98,0,93,88],
[129,131,147,129,118,126,110,124,127,123,157,0,118],
[139,144,137,135,131,144,128,137,140,121,162,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 30, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,138,141,142,130,125,120,128,126,123,137,139],
[125,0,126,120,124,124,125,118,128,123,129,135,131],
[112,124,0,123,130,123,117,121,124,119,126,124,132],
[109,130,127,0,131,127,133,128,129,110,121,137,141],
[108,126,120,119,0,120,113,113,120,118,112,136,138],
[120,126,127,123,130,0,127,133,136,119,125,141,143],
[125,125,133,117,137,123,0,130,131,120,117,135,142],
[130,132,129,122,137,117,120,0,129,130,127,138,130],
[122,122,126,121,130,114,119,121,0,108,113,123,134],
[124,127,131,140,132,131,130,120,142,0,121,142,138],
[127,121,124,129,138,125,133,123,137,129,0,133,139],
[113,115,126,113,114,109,115,112,127,108,117,0,128],
[111,119,118,109,112,107,108,120,116,112,111,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 31, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,143,128,122,135,135,135,129,131,132,135,128],
[115,0,130,125,124,117,124,122,128,128,123,130,118],
[107,120,0,123,112,116,123,114,122,124,122,128,122],
[122,125,127,0,114,128,132,132,123,127,118,133,131],
[128,126,138,136,0,120,131,126,137,135,127,124,134],
[115,133,134,122,130,0,134,134,128,127,131,134,133],
[115,126,127,118,119,116,0,121,126,127,121,113,128],
[115,128,136,118,124,116,129,0,121,132,114,122,124],
[121,122,128,127,113,122,124,129,0,127,123,126,119],
[119,122,126,123,115,123,123,118,123,0,107,122,121],
[118,127,128,132,123,119,129,136,127,143,0,134,130],
[115,120,122,117,126,116,137,128,124,128,116,0,127],
[122,132,128,119,116,117,122,126,131,129,120,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 32, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,128,141,133,115,139,173,118,114,157,135,153],
[109,0,94,111,104,69,109,141,101,95,98,101,115],
[122,156,0,128,147,86,124,170,118,122,148,141,133],
[109,139,122,0,138,104,125,157,144,104,120,122,150],
[117,146,103,112,0,115,132,136,130,101,113,150,144],
[135,181,164,146,135,0,114,186,140,124,156,158,132],
[111,141,126,125,118,136,0,140,105,95,132,109,115],
[77,109,80,93,114,64,110,0,97,75,100,90,101],
[132,149,132,106,120,110,145,153,0,127,142,123,132],
[136,155,128,146,149,126,155,175,123,0,132,138,157],
[93,152,102,130,137,94,118,150,108,118,0,115,127],
[115,149,109,128,100,92,141,160,127,112,135,0,143],
[97,135,117,100,106,118,135,149,118,93,123,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 33, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,120,145,126,140,130,133,132,141,131,119,133],
[118,0,120,135,115,126,133,128,123,128,118,113,123],
[130,130,0,146,117,133,139,129,120,138,129,128,122],
[105,115,104,0,108,118,118,127,106,128,109,104,136],
[124,135,133,142,0,136,146,133,121,132,120,124,125],
[110,124,117,132,114,0,126,124,119,133,122,118,115],
[120,117,111,132,104,124,0,116,109,126,99,109,117],
[117,122,121,123,117,126,134,0,116,132,116,119,127],
[118,127,130,144,129,131,141,134,0,140,117,132,129],
[109,122,112,122,118,117,124,118,110,0,110,112,118],
[119,132,121,141,130,128,151,134,133,140,0,123,130],
[131,137,122,146,126,132,141,131,118,138,127,0,130],
[117,127,128,114,125,135,133,123,121,132,120,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 34, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,132,133,130,131,121,124,116,130,119,118,115],
[124,0,130,126,116,123,129,117,125,135,121,128,121],
[118,120,0,119,110,119,111,104,118,125,112,111,115],
[117,124,131,0,119,123,119,113,122,132,111,129,126],
[120,134,140,131,0,122,118,118,122,134,128,126,113],
[119,127,131,127,128,0,132,121,120,135,116,122,114],
[129,121,139,131,132,118,0,117,131,127,128,119,118],
[126,133,146,137,132,129,133,0,132,132,124,132,134],
[134,125,132,128,128,130,119,118,0,126,123,119,121],
[120,115,125,118,116,115,123,118,124,0,130,108,108],
[131,129,138,139,122,134,122,126,127,120,0,123,126],
[132,122,139,121,124,128,131,118,131,142,127,0,122],
[135,129,135,124,137,136,132,116,129,142,124,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 35, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,108,115,128,124,122,119,112,125,135,141,122],
[132,0,116,123,131,126,126,116,111,127,132,126,111],
[142,134,0,122,145,129,128,125,129,127,141,148,126],
[135,127,128,0,133,127,138,118,127,129,136,154,126],
[122,119,105,117,0,117,130,108,121,117,130,136,132],
[126,124,121,123,133,0,127,114,121,123,152,145,130],
[128,124,122,112,120,123,0,119,124,123,135,135,121],
[131,134,125,132,142,136,131,0,122,141,142,149,136],
[138,139,121,123,129,129,126,128,0,127,133,153,133],
[125,123,123,121,133,127,127,109,123,0,131,133,120],
[115,118,109,114,120,98,115,108,117,119,0,128,123],
[109,124,102,96,114,105,115,101,97,117,122,0,113],
[128,139,124,124,118,120,129,114,117,130,127,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 36, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,115,117,106,133,136,130,113,120,126,119,124],
[162,0,140,154,133,153,147,160,141,151,158,124,146],
[135,110,0,128,108,134,151,136,127,134,141,141,125],
[133,96,122,0,115,112,117,139,120,134,138,125,130],
[144,117,142,135,0,143,152,142,147,146,145,133,138],
[117,97,116,138,107,0,140,130,108,142,128,111,124],
[114,103,99,133,98,110,0,130,99,117,129,106,131],
[120,90,114,111,108,120,120,0,116,122,122,98,109],
[137,109,123,130,103,142,151,134,0,130,132,109,134],
[130,99,116,116,104,108,133,128,120,0,121,110,117],
[124,92,109,112,105,122,121,128,118,129,0,110,105],
[131,126,109,125,117,139,144,152,141,140,140,0,134],
[126,104,125,120,112,126,119,141,116,133,145,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 37, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,115,114,118,110,121,112,109,112,114,124,117],
[145,0,126,129,125,134,126,116,114,114,122,128,132],
[135,124,0,118,122,122,129,122,129,134,128,131,139],
[136,121,132,0,129,130,134,118,126,124,124,138,136],
[132,125,128,121,0,120,124,121,122,121,125,132,129],
[140,116,128,120,130,0,130,125,121,128,126,124,135],
[129,124,121,116,126,120,0,121,114,123,123,124,127],
[138,134,128,132,129,125,129,0,130,137,128,144,134],
[141,136,121,124,128,129,136,120,0,124,128,128,132],
[138,136,116,126,129,122,127,113,126,0,123,133,126],
[136,128,122,126,125,124,127,122,122,127,0,128,132],
[126,122,119,112,118,126,126,106,122,117,122,0,128],
[133,118,111,114,121,115,123,116,118,124,118,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 38, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,123,130,140,96,108,123,123,119,129,72,88],
[121,0,139,127,109,107,125,110,147,132,156,75,118],
[127,111,0,124,124,105,107,130,103,127,113,93,98],
[120,123,126,0,118,108,129,125,138,108,148,86,107],
[110,141,126,132,0,109,116,132,139,120,128,102,100],
[154,143,145,142,141,0,131,131,137,133,169,114,129],
[142,125,143,121,134,119,0,141,142,148,145,133,128],
[127,140,120,125,118,119,109,0,147,126,130,124,103],
[127,103,147,112,111,113,108,103,0,110,113,92,98],
[131,118,123,142,130,117,102,124,140,0,138,132,124],
[121,94,137,102,122,81,105,120,137,112,0,102,110],
[178,175,157,164,148,136,117,126,158,118,148,0,132],
[162,132,152,143,150,121,122,147,152,126,140,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 39, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,114,140,118,136,125,121,113,115,127,127,116],
[132,0,133,141,129,141,140,139,142,119,128,140,128],
[136,117,0,135,103,126,137,131,113,114,139,128,126],
[110,109,115,0,130,125,122,121,111,112,115,135,126],
[132,121,147,120,0,148,135,139,114,124,130,131,146],
[114,109,124,125,102,0,126,126,100,104,131,121,114],
[125,110,113,128,115,124,0,126,99,101,128,119,113],
[129,111,119,129,111,124,124,0,111,113,126,131,123],
[137,108,137,139,136,150,151,139,0,108,144,149,140],
[135,131,136,138,126,146,149,137,142,0,136,139,119],
[123,122,111,135,120,119,122,124,106,114,0,138,112],
[123,110,122,115,119,129,131,119,101,111,112,0,117],
[134,122,124,124,104,136,137,127,110,131,138,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 40, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,114,121,114,121,135,121,126,128,115,122,120],
[129,0,124,120,109,118,123,123,119,130,130,125,119],
[136,126,0,127,130,128,127,136,135,132,132,125,129],
[129,130,123,0,123,127,121,126,125,132,123,120,120],
[136,141,120,127,0,120,131,125,121,127,126,121,116],
[129,132,122,123,130,0,130,142,124,128,135,131,124],
[115,127,123,129,119,120,0,123,131,132,109,127,131],
[129,127,114,124,125,108,127,0,126,131,119,122,121],
[124,131,115,125,129,126,119,124,0,131,114,118,120],
[122,120,118,118,123,122,118,119,119,0,124,121,124],
[135,120,118,127,124,115,141,131,136,126,0,137,120],
[128,125,125,130,129,119,123,128,132,129,113,0,118],
[130,131,121,130,134,126,119,129,130,126,130,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 41, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,128,113,125,124,116,130,113,118,133,126,115],
[119,0,126,118,122,117,126,140,113,150,128,128,126],
[122,124,0,115,106,113,101,129,116,127,115,120,119],
[137,132,135,0,121,127,118,132,111,136,140,131,119],
[125,128,144,129,0,121,136,156,122,138,132,130,126],
[126,133,137,123,129,0,123,146,114,135,144,127,135],
[134,124,149,132,114,127,0,139,108,126,129,132,116],
[120,110,121,118,94,104,111,0,108,107,119,97,105],
[137,137,134,139,128,136,142,142,0,141,140,141,124],
[132,100,123,114,112,115,124,143,109,0,111,113,121],
[117,122,135,110,118,106,121,131,110,139,0,124,121],
[124,122,130,119,120,123,118,153,109,137,126,0,129],
[135,124,131,131,124,115,134,145,126,129,129,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 42, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,127,111,122,123,132,115,123,126,127,127,115],
[127,0,121,123,121,125,136,120,132,122,142,133,124],
[123,129,0,123,117,130,119,119,120,121,143,129,122],
[139,127,127,0,126,114,140,123,118,124,146,133,120],
[128,129,133,124,0,113,127,117,125,133,138,137,111],
[127,125,120,136,137,0,127,113,127,118,138,128,117],
[118,114,131,110,123,123,0,117,123,117,146,123,111],
[135,130,131,127,133,137,133,0,116,128,141,123,124],
[127,118,130,132,125,123,127,134,0,121,142,133,126],
[124,128,129,126,117,132,133,122,129,0,139,133,126],
[123,108,107,104,112,112,104,109,108,111,0,114,102],
[123,117,121,117,113,122,127,127,117,117,136,0,114],
[135,126,128,130,139,133,139,126,124,124,148,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 43, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,114,140,128,122,136,140,131,120,131,116,118],
[126,0,137,124,147,137,118,148,138,140,124,136,112],
[136,113,0,138,140,143,136,136,119,125,133,124,134],
[110,126,112,0,122,126,118,125,120,118,128,114,144],
[122,103,110,128,0,124,116,127,117,105,122,110,114],
[128,113,107,124,126,0,110,128,125,101,133,105,120],
[114,132,114,132,134,140,0,131,123,112,127,115,130],
[110,102,114,125,123,122,119,0,110,106,113,127,118],
[119,112,131,130,133,125,127,140,0,120,121,121,121],
[130,110,125,132,145,149,138,144,130,0,128,127,136],
[119,126,117,122,128,117,123,137,129,122,0,108,125],
[134,114,126,136,140,145,135,123,129,123,142,0,105],
[132,138,116,106,136,130,120,132,129,114,125,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 44, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,130,120,133,121,137,128,126,135,135,129,134],
[122,0,124,127,118,117,133,130,126,122,125,132,121],
[120,126,0,126,139,126,151,129,122,135,130,128,131],
[130,123,124,0,132,121,139,124,134,135,135,122,126],
[117,132,111,118,0,111,128,132,120,125,128,118,121],
[129,133,124,129,139,0,132,137,131,129,142,123,132],
[113,117,99,111,122,118,0,118,116,115,132,129,107],
[122,120,121,126,118,113,132,0,116,112,129,113,110],
[124,124,128,116,130,119,134,134,0,138,136,131,137],
[115,128,115,115,125,121,135,138,112,0,124,115,106],
[115,125,120,115,122,108,118,121,114,126,0,116,120],
[121,118,122,128,132,127,121,137,119,135,134,0,115],
[116,129,119,124,129,118,143,140,113,144,130,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 45, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,144,153,126,105,118,132,115,112,131,116,120],
[105,0,107,131,122,102,114,109,103,120,109,121,98],
[106,143,0,123,116,100,107,115,108,100,74,105,113],
[97,119,127,0,83,109,85,97,106,90,95,101,104],
[124,128,134,167,0,131,141,137,136,122,108,145,141],
[145,148,150,141,119,0,117,132,121,124,114,125,121],
[132,136,143,165,109,133,0,119,125,122,127,112,128],
[118,141,135,153,113,118,131,0,114,123,125,122,130],
[135,147,142,144,114,129,125,136,0,116,111,135,112],
[138,130,150,160,128,126,128,127,134,0,126,125,123],
[119,141,176,155,142,136,123,125,139,124,0,120,119],
[134,129,145,149,105,125,138,128,115,125,130,0,133],
[130,152,137,146,109,129,122,120,138,127,131,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 46, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,126,142,130,108,133,112,120,130,126,137,133],
[120,0,100,119,117,126,136,103,114,109,118,136,124],
[124,150,0,105,132,143,140,134,133,132,161,152,148],
[108,131,145,0,124,130,140,124,102,109,135,144,142],
[120,133,118,126,0,112,122,120,112,105,121,113,127],
[142,124,107,120,138,0,149,111,114,114,118,138,135],
[117,114,110,110,128,101,0,125,107,118,125,130,138],
[138,147,116,126,130,139,125,0,131,132,144,147,150],
[130,136,117,148,138,136,143,119,0,127,155,176,145],
[120,141,118,141,145,136,132,118,123,0,151,141,132],
[124,132,89,115,129,132,125,106,95,99,0,135,130],
[113,114,98,106,137,112,120,103,74,109,115,0,131],
[117,126,102,108,123,115,112,100,105,118,120,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 47, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,102,119,154,129,107,149,123,124,110,155,133],
[110,0,124,122,180,172,110,136,150,136,159,143,129],
[148,126,0,139,193,160,119,177,189,134,161,140,123],
[131,128,111,0,196,171,128,161,169,113,125,102,160],
[96,70,57,54,0,112,71,101,142,64,130,66,57],
[121,78,90,79,138,0,66,82,122,78,111,90,84],
[143,140,131,122,179,184,0,166,180,117,160,148,102],
[101,114,73,89,149,168,84,0,134,73,125,83,64],
[127,100,61,81,108,128,70,116,0,103,102,107,49],
[126,114,116,137,186,172,133,177,147,0,167,123,146],
[140,91,89,125,120,139,90,125,148,83,0,94,104],
[95,107,110,148,184,160,102,167,143,127,156,0,128],
[117,121,127,90,193,166,148,186,201,104,146,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 48, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,126,132,124,133,118,115,124,125,117,127,127],
[126,0,122,130,123,134,129,120,113,128,119,115,128],
[124,128,0,132,123,130,122,122,118,121,123,125,124],
[118,120,118,0,114,133,122,121,119,123,113,104,126],
[126,127,127,136,0,140,128,128,124,130,122,128,126],
[117,116,120,117,110,0,108,117,107,119,113,107,113],
[132,121,128,128,122,142,0,133,124,128,117,128,130],
[135,130,128,129,122,133,117,0,125,120,116,123,122],
[126,137,132,131,126,143,126,125,0,122,127,114,128],
[125,122,129,127,120,131,122,130,128,0,115,123,118],
[133,131,127,137,128,137,133,134,123,135,0,133,142],
[123,135,125,146,122,143,122,127,136,127,117,0,130],
[123,122,126,124,124,137,120,128,122,132,108,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 49, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,126,112,141,126,145,122,136,126,104,115,138],
[124,0,122,97,139,131,135,116,110,115,110,125,131],
[124,128,0,107,148,132,148,120,113,115,95,126,126],
[138,153,143,0,145,136,163,129,139,147,121,143,136],
[109,111,102,105,0,92,132,98,95,104,88,114,104],
[124,119,118,114,158,0,149,137,113,117,107,142,136],
[105,115,102,87,118,101,0,106,104,114,87,111,98],
[128,134,130,121,152,113,144,0,106,138,112,125,125],
[114,140,137,111,155,137,146,144,0,138,147,153,128],
[124,135,135,103,146,133,136,112,112,0,127,137,126],
[146,140,155,129,162,143,163,138,103,123,0,158,137],
[135,125,124,107,136,108,139,125,97,113,92,0,107],
[112,119,124,114,146,114,152,125,122,124,113,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 50, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,137,138,118,115,121,132,119,132,130,122,117],
[117,0,109,118,114,116,130,114,106,112,114,119,122],
[113,141,0,128,121,125,127,146,134,123,140,138,117],
[112,132,122,0,130,106,112,101,116,135,120,122,107],
[132,136,129,120,0,123,127,139,123,135,132,125,128],
[135,134,125,144,127,0,126,143,107,118,120,123,143],
[129,120,123,138,123,124,0,123,119,131,126,129,123],
[118,136,104,149,111,107,127,0,120,139,104,131,107],
[131,144,116,134,127,143,131,130,0,137,101,131,127],
[118,138,127,115,115,132,119,111,113,0,110,130,126],
[120,136,110,130,118,130,124,146,149,140,0,133,134],
[128,131,112,128,125,127,121,119,119,120,117,0,125],
[133,128,133,143,122,107,127,143,123,124,116,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 51, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,123,111,117,130,115,111,113,104,96,130,119],
[119,0,120,105,121,115,112,110,104,107,96,125,120],
[127,130,0,106,106,125,125,118,109,118,89,125,106],
[139,145,144,0,128,150,125,131,124,124,114,138,131],
[133,129,144,122,0,128,115,120,120,115,97,131,126],
[120,135,125,100,122,0,103,121,106,104,102,124,112],
[135,138,125,125,135,147,0,133,119,129,104,143,134],
[139,140,132,119,130,129,117,0,117,120,103,135,116],
[137,146,141,126,130,144,131,133,0,119,126,137,138],
[146,143,132,126,135,146,121,130,131,0,115,134,125],
[154,154,161,136,153,148,146,147,124,135,0,156,135],
[120,125,125,112,119,126,107,115,113,116,94,0,113],
[131,130,144,119,124,138,116,134,112,125,115,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 52, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,121,109,119,108,111,129,112,128,110,118,113],
[140,0,140,120,136,118,112,145,130,144,125,126,138],
[129,110,0,121,133,129,102,127,123,124,112,136,134],
[141,130,129,0,124,136,120,130,134,127,122,133,128],
[131,114,117,126,0,121,119,113,114,125,126,127,116],
[142,132,121,114,129,0,120,123,126,127,118,133,134],
[139,138,148,130,131,130,0,148,137,142,123,143,141],
[121,105,123,120,137,127,102,0,114,117,117,131,115],
[138,120,127,116,136,124,113,136,0,129,118,141,126],
[122,106,126,123,125,123,108,133,121,0,124,121,128],
[140,125,138,128,124,132,127,133,132,126,0,137,135],
[132,124,114,117,123,117,107,119,109,129,113,0,116],
[137,112,116,122,134,116,109,135,124,122,115,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 53, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,135,149,114,125,105,113,96,130,118,110,118],
[132,0,133,145,137,135,125,110,126,139,136,110,130],
[115,117,0,118,99,129,109,116,101,106,117,129,108],
[101,105,132,0,100,108,110,103,110,138,109,112,92],
[136,113,151,150,0,127,138,130,119,116,116,109,126],
[125,115,121,142,123,0,114,124,114,126,127,97,129],
[145,125,141,140,112,136,0,147,122,148,115,113,132],
[137,140,134,147,120,126,103,0,114,141,130,126,115],
[154,124,149,140,131,136,128,136,0,137,147,120,136],
[120,111,144,112,134,124,102,109,113,0,129,113,123],
[132,114,133,141,134,123,135,120,103,121,0,105,120],
[140,140,121,138,141,153,137,124,130,137,145,0,125],
[132,120,142,158,124,121,118,135,114,127,130,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 54, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,109,127,125,114,113,120,113,133,122,130,128],
[135,0,120,105,136,123,119,134,135,143,139,135,138],
[141,130,0,109,143,119,109,126,119,121,134,125,130],
[123,145,141,0,151,130,123,154,132,155,140,147,141],
[125,114,107,99,0,103,97,120,127,108,123,115,115],
[136,127,131,120,147,0,108,154,103,134,139,126,139],
[137,131,141,127,153,142,0,126,121,134,130,116,136],
[130,116,124,96,130,96,124,0,111,114,126,119,147],
[137,115,131,118,123,147,129,139,0,127,137,146,143],
[117,107,129,95,142,116,116,136,123,0,116,139,131],
[128,111,116,110,127,111,120,124,113,134,0,116,118],
[120,115,125,103,135,124,134,131,104,111,134,0,127],
[122,112,120,109,135,111,114,103,107,119,132,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 55, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,111,110,136,107,132,106,124,107,76,73],
[149,0,121,139,123,143,151,153,139,157,155,130,103],
[141,129,0,129,108,165,130,147,132,126,125,119,115],
[139,111,121,0,84,124,146,115,100,96,120,90,87],
[140,127,142,166,0,96,167,156,155,148,104,121,138],
[114,107,85,126,154,0,114,121,120,114,97,101,116],
[143,99,120,104,83,136,0,145,110,86,96,126,113],
[118,97,103,135,94,129,105,0,119,119,119,86,127],
[144,111,118,150,95,130,140,131,0,92,116,102,133],
[126,93,124,154,102,136,164,131,158,0,107,163,135],
[143,95,125,130,146,153,154,131,134,143,0,159,103],
[174,120,131,160,129,149,124,164,148,87,91,0,113],
[177,147,135,163,112,134,137,123,117,115,147,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 56, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,63,139,118,172,155,143,65,134,110,63,109],
[115,0,69,141,99,121,164,111,114,109,82,32,111],
[187,181,0,181,171,168,191,152,146,147,148,108,163],
[111,109,69,0,121,130,135,153,86,101,86,46,111],
[132,151,79,129,0,142,117,140,147,151,124,53,136],
[78,129,82,120,108,0,71,71,26,89,110,36,86],
[95,86,59,115,133,179,0,166,131,121,82,55,95],
[107,139,98,97,110,179,84,0,114,88,111,70,111],
[185,136,104,164,103,224,119,136,0,110,171,111,72],
[116,141,103,149,99,161,129,162,140,0,91,68,93],
[140,168,102,164,126,140,168,139,79,159,0,76,68],
[187,218,142,204,197,214,195,180,139,182,174,0,115],
[141,139,87,139,114,164,155,139,178,157,182,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 57, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,117,143,130,98,111,121,115,107,100,112],
[149,0,129,123,144,136,122,137,144,147,117,129,128],
[142,121,0,147,140,145,125,143,128,135,117,126,116],
[133,127,103,0,145,118,119,125,120,144,121,108,117],
[107,106,110,105,0,142,106,130,125,127,102,105,114],
[120,114,105,132,108,0,96,110,122,119,107,94,109],
[152,128,125,131,144,154,0,141,140,135,125,114,130],
[139,113,107,125,120,140,109,0,119,124,123,99,102],
[129,106,122,130,125,128,110,131,0,131,118,114,101],
[135,103,115,106,123,131,115,126,119,0,120,97,110],
[143,133,133,129,148,143,125,127,132,130,0,114,122],
[150,121,124,142,145,156,136,151,136,153,136,0,127],
[138,122,134,133,136,141,120,148,149,140,128,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 58, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,104,100,115,108,133,113,129,122,115,103,118],
[118,0,119,122,139,126,131,140,119,111,123,117,131],
[146,131,0,125,157,122,177,135,146,126,131,132,138],
[150,128,125,0,148,129,163,127,133,127,128,131,137],
[135,111,93,102,0,110,129,113,113,96,100,113,104],
[142,124,128,121,140,0,144,123,145,104,135,113,127],
[117,119,73,87,121,106,0,100,115,90,109,86,92],
[137,110,115,123,137,127,150,0,135,124,125,111,134],
[121,131,104,117,137,105,135,115,0,129,116,103,125],
[128,139,124,123,154,146,160,126,121,0,140,129,134],
[135,127,119,122,150,115,141,125,134,110,0,125,141],
[147,133,118,119,137,137,164,139,147,121,125,0,140],
[132,119,112,113,146,123,158,116,125,116,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 59, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,135,128,115,135,138,119,134,134,114,125,108],
[143,0,135,135,130,153,144,129,135,140,123,136,127],
[115,115,0,143,120,142,133,123,130,126,111,133,109],
[122,115,107,0,105,122,127,119,138,116,108,122,120],
[135,120,130,145,0,147,142,125,146,155,132,134,127],
[115,97,108,128,103,0,110,112,114,123,116,112,121],
[112,106,117,123,108,140,0,122,136,122,107,130,112],
[131,121,127,131,125,138,128,0,130,138,107,127,116],
[116,115,120,112,104,136,114,120,0,115,113,118,108],
[116,110,124,134,95,127,128,112,135,0,108,125,111],
[136,127,139,142,118,134,143,143,137,142,0,144,119],
[125,114,117,128,116,138,120,123,132,125,106,0,119],
[142,123,141,130,123,129,138,134,142,139,131,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 60, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,154,115,126,131,134,149,119,139,151,136,127],
[85,0,118,92,85,93,129,127,105,125,137,109,99],
[96,132,0,115,98,94,131,100,104,108,131,125,104],
[135,158,135,0,126,105,143,126,130,133,179,145,116],
[124,165,152,124,0,131,173,150,133,138,173,147,105],
[119,157,156,145,119,0,129,139,128,127,149,178,117],
[116,121,119,107,77,121,0,148,128,133,136,120,101],
[101,123,150,124,100,111,102,0,115,126,135,122,83],
[131,145,146,120,117,122,122,135,0,143,151,138,102],
[111,125,142,117,112,123,117,124,107,0,160,125,106],
[99,113,119,71,77,101,114,115,99,90,0,108,94],
[114,141,125,105,103,72,130,128,112,125,142,0,113],
[123,151,146,134,145,133,149,167,148,144,156,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 61, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,139,115,115,122,122,118,118,124,117,114,126],
[144,0,148,123,123,133,127,122,122,129,137,113,129],
[111,102,0,106,103,124,104,105,106,122,116,101,117],
[135,127,144,0,120,123,119,121,124,145,136,128,129],
[135,127,147,130,0,124,122,111,112,141,128,123,131],
[128,117,126,127,126,0,114,115,110,120,132,127,131],
[128,123,146,131,128,136,0,126,124,135,131,131,131],
[132,128,145,129,139,135,124,0,127,136,131,128,141],
[132,128,144,126,138,140,126,123,0,134,135,128,137],
[126,121,128,105,109,130,115,114,116,0,118,118,129],
[133,113,134,114,122,118,119,119,115,132,0,125,132],
[136,137,149,122,127,123,119,122,122,132,125,0,133],
[124,121,133,121,119,119,119,109,113,121,118,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 62, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,126,164,104,139,170,132,167,118,182,158,157],
[105,0,109,121,111,116,140,127,139,85,120,138,86],
[124,141,0,140,131,161,180,149,145,113,151,141,142],
[86,129,110,0,83,106,124,121,101,89,131,120,76],
[146,139,119,167,0,158,168,136,139,110,177,171,156],
[111,134,89,144,92,0,153,101,122,121,137,135,127],
[80,110,70,126,82,97,0,113,90,71,121,112,124],
[118,123,101,129,114,149,137,0,123,84,139,118,114],
[83,111,105,149,111,128,160,127,0,132,159,133,120],
[132,165,137,161,140,129,179,166,118,0,192,174,169],
[68,130,99,119,73,113,129,111,91,58,0,137,99],
[92,112,109,130,79,115,138,132,117,76,113,0,85],
[93,164,108,174,94,123,126,136,130,81,151,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 63, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,138,129,133,145,123,129,132,138,151,164,151],
[123,0,124,117,132,123,131,109,118,145,133,123,148],
[112,126,0,130,133,151,128,131,124,148,166,142,140],
[121,133,120,0,126,131,135,123,138,148,156,150,148],
[117,118,117,124,0,133,105,122,108,118,139,142,134],
[105,127,99,119,117,0,131,116,133,130,133,140,136],
[127,119,122,115,145,119,0,121,114,118,136,135,160],
[121,141,119,127,128,134,129,0,125,143,145,151,152],
[118,132,126,112,142,117,136,125,0,133,146,151,153],
[112,105,102,102,132,120,132,107,117,0,113,114,130],
[99,117,84,94,111,117,114,105,104,137,0,129,125],
[86,127,108,100,108,110,115,99,99,136,121,0,132],
[99,102,110,102,116,114,90,98,97,120,125,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 64, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,119,109,128,123,133,123,119,122,144,128,130],
[112,0,132,127,131,136,117,129,134,119,124,113,137],
[131,118,0,121,137,149,127,133,140,128,130,125,124],
[141,123,129,0,134,135,124,136,141,122,142,139,131],
[122,119,113,116,0,136,119,132,125,115,142,121,126],
[127,114,101,115,114,0,109,105,109,112,129,119,105],
[117,133,123,126,131,141,0,121,129,121,114,117,145],
[127,121,117,114,118,145,129,0,123,125,132,125,122],
[131,116,110,109,125,141,121,127,0,120,130,124,122],
[128,131,122,128,135,138,129,125,130,0,134,120,135],
[106,126,120,108,108,121,136,118,120,116,0,117,121],
[122,137,125,111,129,131,133,125,126,130,133,0,128],
[120,113,126,119,124,145,105,128,128,115,129,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 65, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,124,119,119,131,115,119,127,115,115,129,121],
[123,0,124,123,124,131,126,136,120,131,130,131,134],
[126,126,0,111,118,120,121,121,117,114,120,125,134],
[131,127,139,0,123,126,139,128,132,129,137,133,135],
[131,126,132,127,0,119,125,121,118,119,127,129,136],
[119,119,130,124,131,0,129,114,110,122,119,124,145],
[135,124,129,111,125,121,0,117,113,125,125,124,136],
[131,114,129,122,129,136,133,0,115,119,127,136,147],
[123,130,133,118,132,140,137,135,0,124,131,140,140],
[135,119,136,121,131,128,125,131,126,0,120,134,147],
[135,120,130,113,123,131,125,123,119,130,0,133,139],
[121,119,125,117,121,126,126,114,110,116,117,0,121],
[129,116,116,115,114,105,114,103,110,103,111,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 66, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,109,129,146,109,131,159,153,110,132,123,137],
[123,0,146,125,131,123,146,136,163,124,122,125,136],
[141,104,0,123,132,107,125,136,137,130,115,135,117],
[121,125,127,0,140,127,104,158,142,114,125,108,124],
[104,119,118,110,0,101,130,142,134,116,136,114,123],
[141,127,143,123,149,0,137,147,161,146,140,138,149],
[119,104,125,146,120,113,0,132,135,130,116,117,124],
[91,114,114,92,108,103,118,0,117,85,116,108,107],
[97,87,113,108,116,89,115,133,0,98,128,122,104],
[140,126,120,136,134,104,120,165,152,0,134,140,137],
[118,128,135,125,114,110,134,134,122,116,0,113,124],
[127,125,115,142,136,112,133,142,128,110,137,0,132],
[113,114,133,126,127,101,126,143,146,113,126,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 67, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,132,165,141,151,152,143,131,142,115,131,135],
[117,0,134,155,134,147,155,138,100,118,128,89,105],
[118,116,0,139,105,157,149,168,88,105,125,97,116],
[85,95,111,0,137,143,77,144,119,126,156,86,89],
[109,116,145,113,0,143,131,137,124,99,96,131,129],
[99,103,93,107,107,0,129,132,77,90,114,100,109],
[98,95,101,173,119,121,0,146,103,104,128,122,103],
[107,112,82,106,113,118,104,0,82,116,104,73,92],
[119,150,162,131,126,173,147,168,0,112,184,121,111],
[108,132,145,124,151,160,146,134,138,0,161,131,130],
[135,122,125,94,154,136,122,146,66,89,0,115,121],
[119,161,153,164,119,150,128,177,129,119,135,0,141],
[115,145,134,161,121,141,147,158,139,120,129,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 68, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,132,126,122,117,115,124,137,118,130,131,117],
[126,0,140,126,116,123,120,127,135,113,125,128,106],
[118,110,0,114,115,115,111,117,126,107,110,119,108],
[124,124,136,0,129,111,114,128,129,109,120,126,107],
[128,134,135,121,0,120,127,133,129,125,133,127,112],
[133,127,135,139,130,0,122,133,132,128,154,136,125],
[135,130,139,136,123,128,0,133,139,121,119,126,118],
[126,123,133,122,117,117,117,0,124,122,122,121,118],
[113,115,124,121,121,118,111,126,0,117,132,130,102],
[132,137,143,141,125,122,129,128,133,0,125,144,108],
[120,125,140,130,117,96,131,128,118,125,0,132,111],
[119,122,131,124,123,114,124,129,120,106,118,0,103],
[133,144,142,143,138,125,132,132,148,142,139,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 69, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,129,125,145,137,124,132,136,128,121,128,113],
[127,0,125,139,137,121,124,137,131,133,134,122,121],
[121,125,0,130,146,133,132,130,139,138,129,133,115],
[125,111,120,0,135,122,123,125,135,135,135,133,109],
[105,113,104,115,0,104,110,122,112,107,111,109,101],
[113,129,117,128,146,0,126,145,146,140,131,133,129],
[126,126,118,127,140,124,0,119,135,125,120,137,113],
[118,113,120,125,128,105,131,0,133,118,122,129,104],
[114,119,111,115,138,104,115,117,0,116,111,131,105],
[122,117,112,115,143,110,125,132,134,0,119,121,115],
[129,116,121,115,139,119,130,128,139,131,0,132,119],
[122,128,117,117,141,117,113,121,119,129,118,0,108],
[137,129,135,141,149,121,137,146,145,135,131,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 70, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,136,143,133,132,128,110,142,126,110,127,106],
[119,0,161,140,98,116,127,118,145,127,101,99,141],
[114,89,0,129,102,101,108,105,105,93,93,76,108],
[107,110,121,0,102,118,111,125,132,106,86,114,90],
[117,152,148,148,0,124,139,118,161,133,118,112,139],
[118,134,149,132,126,0,129,121,146,98,129,126,119],
[122,123,142,139,111,121,0,128,149,124,129,116,125],
[140,132,145,125,132,129,122,0,131,131,116,128,116],
[108,105,145,118,89,104,101,119,0,113,97,79,95],
[124,123,157,144,117,152,126,119,137,0,107,115,119],
[140,149,157,164,132,121,121,134,153,143,0,127,144],
[123,151,174,136,138,124,134,122,171,135,123,0,129],
[144,109,142,160,111,131,125,134,155,131,106,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 71, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,127,121,123,134,132,132,140,112,128,124,132],
[136,0,128,128,125,138,133,124,135,139,141,127,124],
[123,122,0,119,120,129,123,116,142,115,123,123,124],
[129,122,131,0,118,134,125,121,130,130,140,143,131],
[127,125,130,132,0,120,122,127,136,118,131,124,130],
[116,112,121,116,130,0,127,119,124,117,121,122,124],
[118,117,127,125,128,123,0,119,144,121,125,129,120],
[118,126,134,129,123,131,131,0,136,127,136,130,133],
[110,115,108,120,114,126,106,114,0,111,117,124,110],
[138,111,135,120,132,133,129,123,139,0,132,131,121],
[122,109,127,110,119,129,125,114,133,118,0,119,115],
[126,123,127,107,126,128,121,120,126,119,131,0,125],
[118,126,126,119,120,126,130,117,140,129,135,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 72, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,127,124,120,125,129,134,132,114,141,138,126],
[109,0,119,116,119,108,114,124,119,109,121,125,107],
[123,131,0,117,110,127,125,128,121,120,123,132,132],
[126,134,133,0,127,132,127,127,125,125,138,143,122],
[130,131,140,123,0,128,144,139,132,132,150,157,127],
[125,142,123,118,122,0,130,136,136,129,136,147,125],
[121,136,125,123,106,120,0,126,121,115,123,126,130],
[116,126,122,123,111,114,124,0,122,112,125,135,109],
[118,131,129,125,118,114,129,128,0,116,130,140,116],
[136,141,130,125,118,121,135,138,134,0,141,140,125],
[109,129,127,112,100,114,127,125,120,109,0,123,115],
[112,125,118,107,93,103,124,115,110,110,127,0,112],
[124,143,118,128,123,125,120,141,134,125,135,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 73, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,144,152,146,104,103,121,115,99,121,97,139],
[138,0,132,154,134,112,115,126,113,100,124,110,141],
[106,118,0,146,152,102,110,101,106,97,127,103,134],
[98,96,104,0,113,72,85,106,75,62,105,109,108],
[104,116,98,137,0,112,120,113,92,80,124,101,118],
[146,138,148,178,138,0,143,150,100,128,146,114,141],
[147,135,140,165,130,107,0,140,133,108,123,124,136],
[129,124,149,144,137,100,110,0,114,112,148,117,151],
[135,137,144,175,158,150,117,136,0,135,152,125,161],
[151,150,153,188,170,122,142,138,115,0,136,122,169],
[129,126,123,145,126,104,127,102,98,114,0,118,138],
[153,140,147,141,149,136,126,133,125,128,132,0,126],
[111,109,116,142,132,109,114,99,89,81,112,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 74, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,130,131,186,174,166,173,161,101,109,122,150],
[119,0,146,198,234,235,220,212,241,179,174,192,184],
[120,104,0,96,163,119,95,157,110,174,163,88,129],
[119,52,154,0,153,204,199,212,204,124,153,204,173],
[64,16,87,97,0,180,110,158,162,125,119,82,126],
[76,15,131,46,70,0,105,173,72,81,84,71,141],
[84,30,155,51,140,145,0,223,125,144,138,51,154],
[77,38,93,38,92,77,27,0,77,76,66,38,31],
[89,9,140,46,88,178,125,173,0,94,143,71,139],
[149,71,76,126,125,169,106,174,156,0,163,117,67],
[141,76,87,97,131,166,112,184,107,87,0,88,86],
[128,58,162,46,168,179,199,212,179,133,162,0,193],
[100,66,121,77,124,109,96,219,111,183,164,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 75, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,134,101,119,111,123,120,124,104,126,105,139],
[123,0,135,119,123,120,133,125,125,118,148,126,135],
[116,115,0,120,109,105,123,109,111,116,127,101,123],
[149,131,130,0,138,131,146,126,140,128,138,119,145],
[131,127,141,112,0,116,130,114,126,120,128,118,133],
[139,130,145,119,134,0,137,117,125,128,131,124,133],
[127,117,127,104,120,113,0,101,115,102,129,112,120],
[130,125,141,124,136,133,149,0,132,132,143,116,142],
[126,125,139,110,124,125,135,118,0,120,137,124,136],
[146,132,134,122,130,122,148,118,130,0,135,117,142],
[124,102,123,112,122,119,121,107,113,115,0,105,130],
[145,124,149,131,132,126,138,134,126,133,145,0,130],
[111,115,127,105,117,117,130,108,114,108,120,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 76, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,135,121,120,120,105,121,121,117,119,119,109],
[144,0,143,131,137,124,128,141,128,139,134,136,133],
[115,107,0,109,117,131,110,131,120,110,111,121,120],
[129,119,141,0,121,133,114,126,121,124,122,120,131],
[130,113,133,129,0,130,100,123,129,123,120,126,118],
[130,126,119,117,120,0,109,123,114,107,109,119,113],
[145,122,140,136,150,141,0,143,137,143,130,137,141],
[129,109,119,124,127,127,107,0,119,123,120,122,132],
[129,122,130,129,121,136,113,131,0,111,121,110,112],
[133,111,140,126,127,143,107,127,139,0,125,124,132],
[131,116,139,128,130,141,120,130,129,125,0,113,125],
[131,114,129,130,124,131,113,128,140,126,137,0,127],
[141,117,130,119,132,137,109,118,138,118,125,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 77, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,152,134,125,160,121,132,133,136,127,139,120],
[111,0,122,130,104,131,119,136,126,128,114,112,109],
[98,128,0,145,109,135,108,142,123,125,123,110,111],
[116,120,105,0,103,125,112,125,108,110,121,121,115],
[125,146,141,147,0,150,125,139,143,142,138,132,110],
[90,119,115,125,100,0,113,120,116,114,107,118,102],
[129,131,142,138,125,137,0,139,128,132,134,136,125],
[118,114,108,125,111,130,111,0,113,127,104,118,104],
[117,124,127,142,107,134,122,137,0,134,131,128,117],
[114,122,125,140,108,136,118,123,116,0,124,129,111],
[123,136,127,129,112,143,116,146,119,126,0,128,113],
[111,138,140,129,118,132,114,132,122,121,122,0,114],
[130,141,139,135,140,148,125,146,133,139,137,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 78, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,112,124,135,125,119,117,105,109,113,130,118],
[136,0,134,142,157,141,132,110,132,111,142,126,137],
[138,116,0,126,143,136,125,121,131,112,128,125,118],
[126,108,124,0,129,127,112,113,126,113,126,124,112],
[115,93,107,121,0,112,95,97,118,87,119,118,106],
[125,109,114,123,138,0,121,114,133,112,134,132,119],
[131,118,125,138,155,129,0,113,135,114,143,123,130],
[133,140,129,137,153,136,137,0,135,133,136,127,122],
[145,118,119,124,132,117,115,115,0,94,123,113,119],
[141,139,138,137,163,138,136,117,156,0,158,131,149],
[137,108,122,124,131,116,107,114,127,92,0,117,121],
[120,124,125,126,132,118,127,123,137,119,133,0,114],
[132,113,132,138,144,131,120,128,131,101,129,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 79, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,129,97,137,118,131,121,122,150,111,126,122],
[110,0,132,64,138,100,63,115,92,92,65,111,108],
[121,118,0,132,119,135,97,113,96,74,98,110,114],
[153,186,118,0,156,148,89,166,123,152,96,102,159],
[113,112,131,94,0,84,93,107,98,67,99,95,113],
[132,150,115,102,166,0,116,152,73,121,128,97,120],
[119,187,153,161,157,134,0,156,114,131,138,150,161],
[129,135,137,84,143,98,94,0,79,91,85,120,110],
[128,158,154,127,152,177,136,171,0,123,137,160,92],
[100,158,176,98,183,129,119,159,127,0,151,177,115],
[139,185,152,154,151,122,112,165,113,99,0,138,138],
[124,139,140,148,155,153,100,130,90,73,112,0,131],
[128,142,136,91,137,130,89,140,158,135,112,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 80, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,133,130,134,134,136,128,124,140,134,142,139],
[118,0,130,119,127,122,125,121,123,133,126,125,129],
[117,120,0,117,123,119,114,111,117,122,125,124,122],
[120,131,133,0,132,142,128,121,137,137,130,140,135],
[116,123,127,118,0,127,128,117,119,127,121,124,129],
[116,128,131,108,123,0,124,126,123,127,127,136,132],
[114,125,136,122,122,126,0,124,122,127,125,134,133],
[122,129,139,129,133,124,126,0,129,137,126,130,139],
[126,127,133,113,131,127,128,121,0,119,122,130,127],
[110,117,128,113,123,123,123,113,131,0,118,118,124],
[116,124,125,120,129,123,125,124,128,132,0,130,132],
[108,125,126,110,126,114,116,120,120,132,120,0,131],
[111,121,128,115,121,118,117,111,123,126,118,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 81, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,134,134,119,121,102,139,127,136,126,124,123],
[103,0,106,114,102,107,105,129,111,116,110,133,129],
[116,144,0,141,133,126,127,140,114,135,128,139,119],
[116,136,109,0,137,127,125,142,131,107,120,131,123],
[131,148,117,113,0,131,119,139,121,118,127,124,132],
[129,143,124,123,119,0,119,136,127,127,130,139,127],
[148,145,123,125,131,131,0,149,143,128,134,153,133],
[111,121,110,108,111,114,101,0,120,108,110,129,102],
[123,139,136,119,129,123,107,130,0,123,143,137,116],
[114,134,115,143,132,123,122,142,127,0,122,132,127],
[124,140,122,130,123,120,116,140,107,128,0,141,133],
[126,117,111,119,126,111,97,121,113,118,109,0,127],
[127,121,131,127,118,123,117,148,134,123,117,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 82, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,135,142,131,131,119,130,117,114,127,125,126],
[117,0,132,123,115,125,132,130,121,121,125,131,116],
[115,118,0,122,115,120,107,118,111,105,121,122,117],
[108,127,128,0,127,112,129,126,114,123,118,116,108],
[119,135,135,123,0,123,125,114,122,123,124,127,117],
[119,125,130,138,127,0,127,133,127,108,127,132,119],
[131,118,143,121,125,123,0,129,119,113,121,126,124],
[120,120,132,124,136,117,121,0,117,115,116,131,115],
[133,129,139,136,128,123,131,133,0,120,124,137,124],
[136,129,145,127,127,142,137,135,130,0,128,135,125],
[123,125,129,132,126,123,129,134,126,122,0,130,117],
[125,119,128,134,123,118,124,119,113,115,120,0,117],
[124,134,133,142,133,131,126,135,126,125,133,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 83, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,117,147,156,124,115,145,103,129,119,92,125],
[127,0,107,150,131,106,110,113,135,145,119,117,100],
[133,143,0,126,135,107,92,134,134,149,130,106,120],
[103,100,124,0,134,107,103,117,110,128,128,104,117],
[94,119,115,116,0,104,79,127,126,113,144,95,108],
[126,144,143,143,146,0,132,145,148,155,158,124,130],
[135,140,158,147,171,118,0,137,155,150,160,132,163],
[105,137,116,133,123,105,113,0,111,108,111,95,109],
[147,115,116,140,124,102,95,139,0,149,124,118,120],
[121,105,101,122,137,95,100,142,101,0,132,113,108],
[131,131,120,122,106,92,90,139,126,118,0,102,96],
[158,133,144,146,155,126,118,155,132,137,148,0,138],
[125,150,130,133,142,120,87,141,130,142,154,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 84, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,114,47,149,89,100,106,98,21,100,106,103],
[168,0,80,121,197,79,188,156,71,117,149,171,103],
[136,170,0,118,160,105,149,146,99,109,144,139,125],
[203,129,132,0,214,170,115,156,123,126,128,90,136],
[101,53,90,36,0,27,84,20,80,32,80,66,65],
[161,171,145,80,223,0,175,168,104,107,139,150,100],
[150,62,101,135,166,75,0,174,65,65,68,135,91],
[144,94,104,94,230,82,76,0,99,115,88,55,100],
[152,179,151,127,170,146,185,151,0,79,118,178,167],
[229,133,141,124,218,143,185,135,171,0,189,170,128],
[150,101,106,122,170,111,182,162,132,61,0,189,131],
[144,79,111,160,184,100,115,195,72,80,61,0,109],
[147,147,125,114,185,150,159,150,83,122,119,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 85, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,125,141,132,126,126,139,119,131,115,130,134],
[123,0,122,138,129,117,117,129,117,119,126,126,127],
[125,128,0,127,135,118,115,130,113,118,121,126,137],
[109,112,123,0,108,104,103,124,107,103,122,101,125],
[118,121,115,142,0,119,116,137,113,124,125,131,137],
[124,133,132,146,131,0,125,131,123,124,134,127,138],
[124,133,135,147,134,125,0,136,134,132,142,129,136],
[111,121,120,126,113,119,114,0,111,110,122,121,118],
[131,133,137,143,137,127,116,139,0,132,135,121,140],
[119,131,132,147,126,126,118,140,118,0,137,138,133],
[135,124,129,128,125,116,108,128,115,113,0,125,140],
[120,124,124,149,119,123,121,129,129,112,125,0,137],
[116,123,113,125,113,112,114,132,110,117,110,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 86, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,119,130,113,109,117,124,118,113,132,113,123],
[134,0,130,134,132,122,122,129,129,136,128,123,130],
[131,120,0,123,126,125,119,123,122,116,121,120,122],
[120,116,127,0,126,124,116,122,119,117,120,127,116],
[137,118,124,124,0,113,122,124,121,115,135,126,129],
[141,128,125,126,137,0,126,134,119,121,130,123,127],
[133,128,131,134,128,124,0,128,125,136,129,126,125],
[126,121,127,128,126,116,122,0,114,130,129,112,126],
[132,121,128,131,129,131,125,136,0,127,136,125,135],
[137,114,134,133,135,129,114,120,123,0,131,125,135],
[118,122,129,130,115,120,121,121,114,119,0,112,129],
[137,127,130,123,124,127,124,138,125,125,138,0,124],
[127,120,128,134,121,123,125,124,115,115,121,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 87, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,144,134,153,114,78,88,70,91,88,104,38],
[132,0,189,151,165,127,138,98,66,142,108,153,124],
[106,61,0,133,88,81,53,48,37,92,108,90,23],
[116,99,117,0,165,132,126,106,137,125,112,135,54],
[97,85,162,85,0,118,120,63,120,119,104,141,74],
[136,123,169,118,132,0,107,119,111,93,149,163,96],
[172,112,197,124,130,143,0,160,132,105,149,152,149],
[162,152,202,144,187,131,90,0,81,111,155,214,72],
[180,184,213,113,130,139,118,169,0,156,138,181,86],
[159,108,158,125,131,157,145,139,94,0,144,166,128],
[162,142,142,138,146,101,101,95,112,106,0,170,109],
[146,97,160,115,109,87,98,36,69,84,80,0,57],
[212,126,227,196,176,154,101,178,164,122,141,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 88, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,147,120,154,139,136,145,131,141,139,146,136],
[99,0,136,118,141,132,97,122,118,127,109,124,102],
[103,114,0,97,134,107,101,125,112,116,116,117,103],
[130,132,153,0,152,139,107,129,136,137,130,147,132],
[96,109,116,98,0,124,103,114,113,121,110,107,98],
[111,118,143,111,126,0,112,126,118,127,119,124,101],
[114,153,149,143,147,138,0,133,144,135,131,138,121],
[105,128,125,121,136,124,117,0,109,115,124,134,119],
[119,132,138,114,137,132,106,141,0,128,127,128,115],
[109,123,134,113,129,123,115,135,122,0,131,134,104],
[111,141,134,120,140,131,119,126,123,119,0,125,124],
[104,126,133,103,143,126,112,116,122,116,125,0,108],
[114,148,147,118,152,149,129,131,135,146,126,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 89, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,135,149,134,134,125,106,127,129,142,156,148],
[127,0,133,128,129,135,118,109,125,122,108,135,137],
[115,117,0,130,120,120,133,115,114,119,106,126,141],
[101,122,120,0,108,126,116,111,119,107,108,135,124],
[116,121,130,142,0,137,113,120,118,124,132,151,152],
[116,115,130,124,113,0,121,113,122,96,120,141,145],
[125,132,117,134,137,129,0,119,130,113,130,140,141],
[144,141,135,139,130,137,131,0,132,109,126,155,149],
[123,125,136,131,132,128,120,118,0,107,128,139,132],
[121,128,131,143,126,154,137,141,143,0,116,142,145],
[108,142,144,142,118,130,120,124,122,134,0,136,127],
[94,115,124,115,99,109,110,95,111,108,114,0,128],
[102,113,109,126,98,105,109,101,118,105,123,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 90, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,120,129,133,130,130,128,134,134,126,118,129],
[123,0,125,123,115,133,128,144,122,117,118,112,126],
[130,125,0,130,128,133,121,135,121,138,123,124,135],
[121,127,120,0,132,132,126,136,120,131,132,127,140],
[117,135,122,118,0,124,134,136,114,123,119,126,136],
[120,117,117,118,126,0,116,136,125,129,118,111,131],
[120,122,129,124,116,134,0,132,115,128,126,117,126],
[122,106,115,114,114,114,118,0,117,114,117,108,116],
[116,128,129,130,136,125,135,133,0,134,125,134,130],
[116,133,112,119,127,121,122,136,116,0,115,110,123],
[124,132,127,118,131,132,124,133,125,135,0,120,138],
[132,138,126,123,124,139,133,142,116,140,130,0,121],
[121,124,115,110,114,119,124,134,120,127,112,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 91, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,132,133,135,122,129,124,127,130,117,132,132],
[128,0,134,130,132,120,131,137,125,131,120,144,127],
[118,116,0,130,138,130,125,126,122,126,109,142,128],
[117,120,120,0,116,115,122,118,127,126,117,130,122],
[115,118,112,134,0,116,138,122,120,132,123,132,120],
[128,130,120,135,134,0,133,140,130,131,114,150,130],
[121,119,125,128,112,117,0,120,122,117,105,132,133],
[126,113,124,132,128,110,130,0,116,128,112,152,116],
[123,125,128,123,130,120,128,134,0,126,125,139,133],
[120,119,124,124,118,119,133,122,124,0,115,149,133],
[133,130,141,133,127,136,145,138,125,135,0,153,133],
[118,106,108,120,118,100,118,98,111,101,97,0,113],
[118,123,122,128,130,120,117,134,117,117,117,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 92, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,162,140,153,111,186,125,157,175,125,113,148],
[142,0,167,176,153,103,179,135,180,218,169,100,170],
[88,83,0,90,121,80,117,121,152,157,95,54,135],
[110,74,160,0,91,66,132,109,151,162,82,52,125],
[97,97,129,159,0,100,145,139,169,183,109,115,139],
[139,147,170,184,150,0,138,126,185,188,141,88,229],
[64,71,133,118,105,112,0,87,149,118,112,70,126],
[125,115,129,141,111,124,163,0,150,183,98,47,166],
[93,70,98,99,81,65,101,100,0,128,110,69,109],
[75,32,93,88,67,62,132,67,122,0,35,28,108],
[125,81,155,168,141,109,138,152,140,215,0,140,164],
[137,150,196,198,135,162,180,203,181,222,110,0,199],
[102,80,115,125,111,21,124,84,141,142,86,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 93, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,103,110,122,121,132,136,121,122,131,117,112],
[126,0,137,105,90,112,130,127,113,135,130,112,112],
[147,113,0,113,106,130,139,139,126,137,143,119,119],
[140,145,137,0,124,136,155,146,149,132,123,139,110],
[128,160,144,126,0,115,163,137,135,150,142,121,118],
[129,138,120,114,135,0,157,155,135,151,123,135,129],
[118,120,111,95,87,93,0,108,101,125,111,91,91],
[114,123,111,104,113,95,142,0,107,121,128,95,92],
[129,137,124,101,115,115,149,143,0,130,137,102,113],
[128,115,113,118,100,99,125,129,120,0,122,100,112],
[119,120,107,127,108,127,139,122,113,128,0,130,122],
[133,138,131,111,129,115,159,155,148,150,120,0,136],
[138,138,131,140,132,121,159,158,137,138,128,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 94, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,122,126,137,120,117,125,122,138,130,118,119],
[112,0,111,137,143,107,105,133,139,134,120,101,100],
[128,139,0,131,136,113,122,129,145,129,139,102,101],
[124,113,119,0,165,137,106,119,138,121,125,116,103],
[113,107,114,85,0,109,101,100,121,105,108,107,96],
[130,143,137,113,141,0,127,145,145,140,154,137,125],
[133,145,128,144,149,123,0,124,120,138,142,116,106],
[125,117,121,131,150,105,126,0,121,134,133,113,113],
[128,111,105,112,129,105,130,129,0,106,123,106,106],
[112,116,121,129,145,110,112,116,144,0,131,121,93],
[120,130,111,125,142,96,108,117,127,119,0,106,104],
[132,149,148,134,143,113,134,137,144,129,144,0,104],
[131,150,149,147,154,125,144,137,144,157,146,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 95, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,87,139,126,109,107,114,121,134,115,126,118],
[107,0,87,116,89,87,97,105,106,103,124,76,109],
[163,163,0,169,149,147,148,159,117,130,162,132,139],
[111,134,81,0,109,105,108,124,114,100,123,111,133],
[124,161,101,141,0,105,119,119,133,122,118,119,119],
[141,163,103,145,145,0,118,137,134,128,141,109,136],
[143,153,102,142,131,132,0,134,114,130,126,122,150],
[136,145,91,126,131,113,116,0,113,112,123,105,110],
[129,144,133,136,117,116,136,137,0,136,136,111,121],
[116,147,120,150,128,122,120,138,114,0,150,100,124],
[135,126,88,127,132,109,124,127,114,100,0,110,129],
[124,174,118,139,131,141,128,145,139,150,140,0,152],
[132,141,111,117,131,114,100,140,129,126,121,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 96, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,114,116,135,123,126,116,120,139,122,136,132],
[130,0,120,132,122,131,125,134,116,132,132,131,127],
[136,130,0,127,121,122,126,133,128,130,130,136,121],
[134,118,123,0,118,130,116,129,122,124,124,130,119],
[115,128,129,132,0,127,127,125,117,123,125,123,114],
[127,119,128,120,123,0,125,125,118,126,116,124,107],
[124,125,124,134,123,125,0,123,125,128,124,118,134],
[134,116,117,121,125,125,127,0,128,126,124,123,121],
[130,134,122,128,133,132,125,122,0,129,133,125,127],
[111,118,120,126,127,124,122,124,121,0,127,124,111],
[128,118,120,126,125,134,126,126,117,123,0,127,124],
[114,119,114,120,127,126,132,127,125,126,123,0,113],
[118,123,129,131,136,143,116,129,123,139,126,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 97, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,110,140,130,124,145,109,124,125,145,148,139],
[105,0,108,124,132,110,108,93,137,124,114,122,119],
[140,142,0,140,143,133,142,120,131,143,145,149,143],
[110,126,110,0,142,126,124,136,120,142,131,141,129],
[120,118,107,108,0,117,137,114,148,135,142,130,139],
[126,140,117,124,133,0,147,142,118,139,138,132,135],
[105,142,108,126,113,103,0,96,120,126,136,131,122],
[141,157,130,114,136,108,154,0,148,149,150,139,135],
[126,113,119,130,102,132,130,102,0,130,118,148,120],
[125,126,107,108,115,111,124,101,120,0,128,147,127],
[105,136,105,119,108,112,114,100,132,122,0,137,124],
[102,128,101,109,120,118,119,111,102,103,113,0,128],
[111,131,107,121,111,115,128,115,130,123,126,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 98, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,112,108,127,117,125,117,111,133,114,125,108],
[155,0,133,131,142,136,134,131,132,155,117,140,122],
[138,117,0,122,127,125,131,121,133,144,117,136,119],
[142,119,128,0,146,124,142,112,132,154,130,140,126],
[123,108,123,104,0,116,128,121,123,137,121,118,110],
[133,114,125,126,134,0,136,124,132,145,124,136,128],
[125,116,119,108,122,114,0,125,119,137,116,132,121],
[133,119,129,138,129,126,125,0,128,141,117,127,125],
[139,118,117,118,127,118,131,122,0,146,117,135,114],
[117,95,106,96,113,105,113,109,104,0,104,121,115],
[136,133,133,120,129,126,134,133,133,146,0,134,131],
[125,110,114,110,132,114,118,123,115,129,116,0,122],
[142,128,131,124,140,122,129,125,136,135,119,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 99, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,129,148,134,116,104,119,113,130,131,107,133],
[147,0,157,151,131,148,141,122,133,147,135,148,152],
[121,93,0,129,109,126,98,119,125,107,120,94,120],
[102,99,121,0,109,117,107,104,115,103,123,131,122],
[116,119,141,141,0,135,122,122,125,123,139,122,138],
[134,102,124,133,115,0,134,136,130,116,123,112,136],
[146,109,152,143,128,116,0,126,128,127,135,125,143],
[131,128,131,146,128,114,124,0,134,120,135,136,151],
[137,117,125,135,125,120,122,116,0,127,123,139,150],
[120,103,143,147,127,134,123,130,123,0,140,132,142],
[119,115,130,127,111,127,115,115,127,110,0,122,119],
[143,102,156,119,128,138,125,114,111,118,128,0,144],
[117,98,130,128,112,114,107,99,100,108,131,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 100, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,126,68,90,97,75,77,72,122,92,91,59],
[100,0,112,80,108,90,99,114,109,109,80,85,103],
[124,138,0,112,77,67,99,123,123,117,90,127,77],
[182,170,138,0,125,156,124,98,95,191,125,141,151],
[160,142,173,125,0,69,90,85,95,187,90,119,142],
[153,160,183,94,181,0,85,95,113,182,102,102,131],
[175,151,151,126,160,165,0,109,91,151,169,160,165],
[173,136,127,152,165,155,141,0,78,136,131,122,110],
[178,141,127,155,155,137,159,172,0,162,118,141,142],
[128,141,133,59,63,68,99,114,88,0,80,110,127],
[158,170,160,125,160,148,81,119,132,170,0,150,143],
[159,165,123,109,131,148,90,128,109,140,100,0,105],
[191,147,173,99,108,119,85,140,108,123,107,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 101, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,150,124,149,127,149,139,144,138,140,131,134],
[117,0,129,119,134,111,130,115,120,124,114,119,122],
[100,121,0,116,128,129,125,115,111,127,130,108,133],
[126,131,134,0,147,139,130,118,123,141,136,125,140],
[101,116,122,103,0,109,116,115,111,122,118,113,131],
[123,139,121,111,141,0,138,119,119,116,145,121,138],
[101,120,125,120,134,112,0,107,110,130,131,115,132],
[111,135,135,132,135,131,143,0,115,126,135,121,141],
[106,130,139,127,139,131,140,135,0,126,135,125,136],
[112,126,123,109,128,134,120,124,124,0,135,115,129],
[110,136,120,114,132,105,119,115,115,115,0,126,137],
[119,131,142,125,137,129,135,129,125,135,124,0,138],
[116,128,117,110,119,112,118,109,114,121,113,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 102, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,134,126,144,140,130,142,119,143,134,128,118],
[121,0,117,125,139,138,122,135,117,142,124,137,123],
[116,133,0,139,137,145,120,127,118,127,123,118,128],
[124,125,111,0,131,136,120,132,122,139,123,132,113],
[106,111,113,119,0,135,114,120,110,116,123,123,109],
[110,112,105,114,115,0,105,118,113,118,107,115,102],
[120,128,130,130,136,145,0,132,125,136,124,131,132],
[108,115,123,118,130,132,118,0,114,135,117,122,120],
[131,133,132,128,140,137,125,136,0,150,134,133,138],
[107,108,123,111,134,132,114,115,100,0,123,131,122],
[116,126,127,127,127,143,126,133,116,127,0,128,124],
[122,113,132,118,127,135,119,128,117,119,122,0,117],
[132,127,122,137,141,148,118,130,112,128,126,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 103, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,130,143,125,109,113,123,142,125,124,128,117],
[153,0,139,146,137,130,122,141,151,144,129,155,132],
[120,111,0,126,134,118,128,131,133,136,123,139,114],
[107,104,124,0,118,123,117,117,133,125,119,120,120],
[125,113,116,132,0,120,113,120,123,119,119,135,117],
[141,120,132,127,130,0,118,126,145,138,125,134,135],
[137,128,122,133,137,132,0,126,132,133,136,132,120],
[127,109,119,133,130,124,124,0,136,117,127,137,124],
[108,99,117,117,127,105,118,114,0,126,122,123,112],
[125,106,114,125,131,112,117,133,124,0,119,124,105],
[126,121,127,131,131,125,114,123,128,131,0,136,115],
[122,95,111,130,115,116,118,113,127,126,114,0,133],
[133,118,136,130,133,115,130,126,138,145,135,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 104, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,97,99,111,101,131,122,108,90,128,129,126],
[144,0,125,115,120,110,108,116,112,131,102,117,125],
[153,125,0,132,159,122,124,122,138,128,138,146,138],
[151,135,118,0,134,133,122,127,127,136,146,142,137],
[139,130,91,116,0,107,122,113,116,111,133,130,132],
[149,140,128,117,143,0,112,110,146,121,127,144,137],
[119,142,126,128,128,138,0,108,124,124,138,118,160],
[128,134,128,123,137,140,142,0,132,142,136,147,143],
[142,138,112,123,134,104,126,118,0,132,125,161,153],
[160,119,122,114,139,129,126,108,118,0,123,144,122],
[122,148,112,104,117,123,112,114,125,127,0,148,140],
[121,133,104,108,120,106,132,103,89,106,102,0,145],
[124,125,112,113,118,113,90,107,97,128,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 105, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,132,132,134,132,123,141,130,132,134,137,125],
[127,0,133,119,122,129,129,131,128,136,123,135,132],
[118,117,0,115,110,121,117,128,114,126,108,118,104],
[118,131,135,0,128,122,128,132,128,136,127,122,119],
[116,128,140,122,0,126,127,132,127,141,127,119,126],
[118,121,129,128,124,0,124,138,123,129,129,131,115],
[127,121,133,122,123,126,0,130,124,137,126,128,117],
[109,119,122,118,118,112,120,0,126,123,119,121,112],
[120,122,136,122,123,127,126,124,0,137,122,111,126],
[118,114,124,114,109,121,113,127,113,0,111,122,116],
[116,127,142,123,123,121,124,131,128,139,0,125,119],
[113,115,132,128,131,119,122,129,139,128,125,0,128],
[125,118,146,131,124,135,133,138,124,134,131,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 106, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,119,113,129,137,126,132,118,119,117,120,116],
[128,0,141,133,138,136,133,139,131,126,120,118,130],
[131,109,0,114,127,124,121,128,120,118,121,116,119],
[137,117,136,0,128,132,128,138,122,112,123,117,121],
[121,112,123,122,0,134,128,128,128,114,123,119,121],
[113,114,126,118,116,0,124,128,108,118,114,109,130],
[124,117,129,122,122,126,0,132,128,115,116,121,111],
[118,111,122,112,122,122,118,0,103,112,110,115,125],
[132,119,130,128,122,142,122,147,0,133,126,115,119],
[131,124,132,138,136,132,135,138,117,0,129,122,127],
[133,130,129,127,127,136,134,140,124,121,0,130,125],
[130,132,134,133,131,141,129,135,135,128,120,0,127],
[134,120,131,129,129,120,139,125,131,123,125,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 107, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,112,100,118,105,107,97,102,107,120,101,107],
[112,0,120,88,108,89,109,117,101,115,108,123,97],
[138,130,0,92,116,106,104,109,92,98,112,123,92],
[150,162,158,0,135,128,113,132,127,115,128,129,118],
[132,142,134,115,0,116,123,123,105,130,117,144,124],
[145,161,144,122,134,0,132,149,136,131,151,121,136],
[143,141,146,137,127,118,0,149,122,139,117,133,111],
[153,133,141,118,127,101,101,0,108,100,132,126,99],
[148,149,158,123,145,114,128,142,0,118,138,149,132],
[143,135,152,135,120,119,111,150,132,0,135,144,149],
[130,142,138,122,133,99,133,118,112,115,0,128,114],
[149,127,127,121,106,129,117,124,101,106,122,0,110],
[143,153,158,132,126,114,139,151,118,101,136,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 108, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,108,116,119,92,136,108,105,53,105,119,89],
[114,0,104,121,109,124,126,131,90,95,91,118,93],
[142,146,0,147,133,116,158,124,164,97,142,135,102],
[134,129,103,0,108,105,116,162,144,108,130,141,121],
[131,141,117,142,0,122,189,111,107,88,98,139,91],
[158,126,134,145,128,0,181,120,156,125,150,160,115],
[114,124,92,134,61,69,0,116,136,85,74,142,75],
[142,119,126,88,139,130,134,0,99,89,113,114,72],
[145,160,86,106,143,94,114,151,0,116,103,118,111],
[197,155,153,142,162,125,165,161,134,0,150,155,130],
[145,159,108,120,152,100,176,137,147,100,0,179,133],
[131,132,115,109,111,90,108,136,132,95,71,0,108],
[161,157,148,129,159,135,175,178,139,120,117,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 109, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,121,144,137,131,127,117,101,104,145,117,102],
[137,0,129,126,115,148,144,125,103,133,147,135,135],
[129,121,0,132,131,143,114,112,118,118,118,129,125],
[106,124,118,0,142,159,137,133,128,126,142,110,126],
[113,135,119,108,0,137,107,108,110,116,115,119,108],
[119,102,107,91,113,0,103,120,116,116,110,105,87],
[123,106,136,113,143,147,0,93,93,103,126,102,102],
[133,125,138,117,142,130,157,0,153,112,128,123,115],
[149,147,132,122,140,134,157,97,0,131,140,137,137],
[146,117,132,124,134,134,147,138,119,0,132,122,97],
[105,103,132,108,135,140,124,122,110,118,0,131,124],
[133,115,121,140,131,145,148,127,113,128,119,0,112],
[148,115,125,124,142,163,148,135,113,153,126,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 110, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,126,102,127,120,137,116,94,114,103,95,121],
[155,0,125,120,137,128,159,157,119,142,145,133,146],
[124,125,0,103,133,126,159,147,137,123,112,140,135],
[148,130,147,0,136,148,190,151,123,130,126,163,150],
[123,113,117,114,0,118,159,131,113,123,143,112,125],
[130,122,124,102,132,0,171,130,121,119,121,107,125],
[113,91,91,60,91,79,0,117,101,98,81,92,104],
[134,93,103,99,119,120,133,0,98,117,106,86,124],
[156,131,113,127,137,129,149,152,0,147,121,108,143],
[136,108,127,120,127,131,152,133,103,0,116,129,124],
[147,105,138,124,107,129,169,144,129,134,0,110,132],
[155,117,110,87,138,143,158,164,142,121,140,0,124],
[129,104,115,100,125,125,146,126,107,126,118,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 111, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,139,133,122,112,120,143,128,133,131,123,129],
[109,0,117,120,109,115,93,110,112,103,102,141,103],
[111,133,0,137,114,134,122,117,151,136,129,127,108],
[117,130,113,0,94,104,107,112,110,111,114,144,101],
[128,141,136,156,0,156,111,138,143,147,159,158,134],
[138,135,116,146,94,0,110,126,149,153,124,162,157],
[130,157,128,143,139,140,0,107,174,133,160,168,152],
[107,140,133,138,112,124,143,0,181,142,149,155,122],
[122,138,99,140,107,101,76,69,0,112,107,119,108],
[117,147,114,139,103,97,117,108,138,0,121,111,112],
[119,148,121,136,91,126,90,101,143,129,0,123,97],
[127,109,123,106,92,88,82,95,131,139,127,0,80],
[121,147,142,149,116,93,98,128,142,138,153,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 112, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,117,122,135,131,127,132,131,126,138,122,129],
[125,0,107,114,123,140,131,133,136,132,132,123,129],
[133,143,0,138,145,139,123,131,125,130,138,126,133],
[128,136,112,0,143,147,129,131,139,131,143,126,127],
[115,127,105,107,0,130,127,126,116,121,133,115,112],
[119,110,111,103,120,0,117,120,126,118,123,109,119],
[123,119,127,121,123,133,0,124,134,124,128,130,132],
[118,117,119,119,124,130,126,0,125,115,127,124,127],
[119,114,125,111,134,124,116,125,0,121,124,123,127],
[124,118,120,119,129,132,126,135,129,0,135,133,125],
[112,118,112,107,117,127,122,123,126,115,0,108,119],
[128,127,124,124,135,141,120,126,127,117,142,0,122],
[121,121,117,123,138,131,118,123,123,125,131,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 113, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,124,127,108,122,129,123,112,123,127,122,115],
[137,0,131,142,125,128,126,127,132,115,119,136,124],
[126,119,0,123,111,123,113,128,120,103,117,128,120],
[123,108,127,0,116,125,121,123,125,119,118,125,118],
[142,125,139,134,0,125,138,133,128,118,125,138,127],
[128,122,127,125,125,0,134,120,122,124,108,127,125],
[121,124,137,129,112,116,0,122,128,114,111,128,117],
[127,123,122,127,117,130,128,0,118,119,123,129,119],
[138,118,130,125,122,128,122,132,0,113,119,129,118],
[127,135,147,131,132,126,136,131,137,0,120,133,131],
[123,131,133,132,125,142,139,127,131,130,0,143,133],
[128,114,122,125,112,123,122,121,121,117,107,0,119],
[135,126,130,132,123,125,133,131,132,119,117,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 114, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,118,127,123,136,118,131,129,123,135,115,141],
[110,0,119,116,123,109,115,123,114,112,115,106,136],
[132,131,0,104,129,117,112,141,110,136,113,124,126],
[123,134,146,0,126,127,121,138,120,125,125,120,132],
[127,127,121,124,0,124,135,139,123,123,126,114,138],
[114,141,133,123,126,0,115,127,120,121,128,120,129],
[132,135,138,129,115,135,0,129,129,131,136,114,135],
[119,127,109,112,111,123,121,0,120,113,111,112,126],
[121,136,140,130,127,130,121,130,0,129,117,134,146],
[127,138,114,125,127,129,119,137,121,0,125,123,140],
[115,135,137,125,124,122,114,139,133,125,0,119,141],
[135,144,126,130,136,130,136,138,116,127,131,0,135],
[109,114,124,118,112,121,115,124,104,110,109,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 115, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,123,122,134,131,143,138,113,124,130,150,138],
[125,0,128,101,118,111,124,118,118,116,112,123,128],
[127,122,0,115,132,122,132,127,120,128,125,137,135],
[128,149,135,0,152,130,134,139,122,116,147,145,163],
[116,132,118,98,0,118,143,134,110,108,114,116,129],
[119,139,128,120,132,0,133,124,121,133,136,132,144],
[107,126,118,116,107,117,0,121,122,114,123,131,129],
[112,132,123,111,116,126,129,0,113,125,117,120,130],
[137,132,130,128,140,129,128,137,0,115,136,131,141],
[126,134,122,134,142,117,136,125,135,0,135,133,146],
[120,138,125,103,136,114,127,133,114,115,0,117,134],
[100,127,113,105,134,118,119,130,119,117,133,0,147],
[112,122,115,87,121,106,121,120,109,104,116,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 116, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,131,139,111,160,164,124,127,168,132,145,118],
[127,0,145,107,142,133,139,126,106,127,151,152,101],
[119,105,0,105,85,135,130,112,105,94,136,136,78],
[111,143,145,0,114,152,198,126,109,148,147,140,129],
[139,108,165,136,0,169,146,147,129,145,136,162,130],
[90,117,115,98,81,0,138,101,97,97,124,126,74],
[86,111,120,52,104,112,0,113,78,112,110,114,91],
[126,124,138,124,103,149,137,0,84,94,116,149,88],
[123,144,145,141,121,153,172,166,0,146,139,153,103],
[82,123,156,102,105,153,138,156,104,0,136,146,112],
[118,99,114,103,114,126,140,134,111,114,0,115,102],
[105,98,114,110,88,124,136,101,97,104,135,0,91],
[132,149,172,121,120,176,159,162,147,138,148,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 117, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,131,141,117,126,136,128,122,131,122,124,127],
[111,0,112,124,130,122,109,120,121,111,111,123,120],
[119,138,0,139,125,119,123,127,104,129,121,131,120],
[109,126,111,0,103,106,102,107,108,121,112,115,112],
[133,120,125,147,0,127,131,133,134,140,130,132,125],
[124,128,131,144,123,0,116,115,127,123,128,118,133],
[114,141,127,148,119,134,0,124,122,133,127,116,138],
[122,130,123,143,117,135,126,0,113,124,123,107,110],
[128,129,146,142,116,123,128,137,0,141,109,136,115],
[119,139,121,129,110,127,117,126,109,0,122,132,122],
[128,139,129,138,120,122,123,127,141,128,0,134,128],
[126,127,119,135,118,132,134,143,114,118,116,0,116],
[123,130,130,138,125,117,112,140,135,128,122,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 118, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,143,115,125,106,121,90,97,149,132,106,141],
[108,0,148,70,83,76,115,83,79,121,99,69,164],
[107,102,0,83,71,100,110,73,98,108,99,63,141],
[135,180,167,0,141,127,138,141,108,173,175,110,160],
[125,167,179,109,0,81,121,119,94,119,140,97,166],
[144,174,150,123,169,0,172,171,109,159,152,104,190],
[129,135,140,112,129,78,0,84,66,136,96,61,151],
[160,167,177,109,131,79,166,0,127,153,129,84,203],
[153,171,152,142,156,141,184,123,0,154,178,146,181],
[101,129,142,77,131,91,114,97,96,0,100,76,149],
[118,151,151,75,110,98,154,121,72,150,0,118,172],
[144,181,187,140,153,146,189,166,104,174,132,0,177],
[109,86,109,90,84,60,99,47,69,101,78,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 119, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,125,134,152,128,127,124,132,147,127,117,132],
[113,0,104,115,103,127,112,101,113,97,103,99,106],
[125,146,0,129,124,128,122,125,111,126,126,122,129],
[116,135,121,0,133,129,115,141,133,122,123,119,130],
[98,147,126,117,0,143,106,124,127,140,146,129,130],
[122,123,122,121,107,0,119,107,120,115,133,122,136],
[123,138,128,135,144,131,0,122,114,142,141,117,141],
[126,149,125,109,126,143,128,0,142,135,137,121,131],
[118,137,139,117,123,130,136,108,0,120,122,130,128],
[103,153,124,128,110,135,108,115,130,0,125,118,130],
[123,147,124,127,104,117,109,113,128,125,0,116,132],
[133,151,128,131,121,128,133,129,120,132,134,0,126],
[118,144,121,120,120,114,109,119,122,120,118,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 120, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,136,115,129,125,122,130,122,136,118,126,118],
[118,0,126,108,136,126,110,129,126,127,126,124,123],
[114,124,0,114,127,130,107,119,118,111,108,118,118],
[135,142,136,0,129,134,128,142,136,128,123,132,129],
[121,114,123,121,0,133,105,119,123,117,118,115,125],
[125,124,120,116,117,0,102,117,122,117,120,109,116],
[128,140,143,122,145,148,0,147,129,137,125,138,133],
[120,121,131,108,131,133,103,0,125,133,108,123,124],
[128,124,132,114,127,128,121,125,0,134,108,117,123],
[114,123,139,122,133,133,113,117,116,0,117,119,127],
[132,124,142,127,132,130,125,142,142,133,0,124,139],
[124,126,132,118,135,141,112,127,133,131,126,0,129],
[132,127,132,121,125,134,117,126,127,123,111,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 121, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,131,131,132,132,125,104,135,123,120,120,112],
[121,0,121,123,124,117,109,105,127,117,112,117,110],
[119,129,0,144,121,127,125,120,131,144,124,121,124],
[119,127,106,0,122,123,114,108,122,121,106,132,126],
[118,126,129,128,0,123,127,112,139,127,103,137,122],
[118,133,123,127,127,0,120,114,123,129,127,115,117],
[125,141,125,136,123,130,0,114,126,120,128,125,128],
[146,145,130,142,138,136,136,0,140,146,140,144,122],
[115,123,119,128,111,127,124,110,0,124,121,118,111],
[127,133,106,129,123,121,130,104,126,0,121,115,117],
[130,138,126,144,147,123,122,110,129,129,0,129,127],
[130,133,129,118,113,135,125,106,132,135,121,0,114],
[138,140,126,124,128,133,122,128,139,133,123,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 122, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,117,128,120,132,132,131,134,132,124,122,123],
[135,0,134,141,125,150,121,120,128,110,130,126,128],
[133,116,0,128,108,126,127,133,121,119,134,118,125],
[122,109,122,0,112,138,122,125,126,110,117,110,114],
[130,125,142,138,0,157,144,134,135,127,122,121,144],
[118,100,124,112,93,0,141,127,116,118,131,124,131],
[118,129,123,128,106,109,0,127,123,119,115,105,103],
[119,130,117,125,116,123,123,0,117,108,137,124,128],
[116,122,129,124,115,134,127,133,0,105,126,106,115],
[118,140,131,140,123,132,131,142,145,0,126,108,134],
[126,120,116,133,128,119,135,113,124,124,0,128,129],
[128,124,132,140,129,126,145,126,144,142,122,0,128],
[127,122,125,136,106,119,147,122,135,116,121,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 123, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,127,119,120,114,120,124,122,126,124,133,133],
[126,0,111,115,128,115,112,121,120,110,126,127,133],
[123,139,0,127,140,123,121,126,132,118,131,135,139],
[131,135,123,0,132,123,125,130,133,124,135,149,133],
[130,122,110,118,0,113,122,115,118,115,123,117,128],
[136,135,127,127,137,0,114,138,132,124,117,140,130],
[130,138,129,125,128,136,0,132,133,131,139,142,139],
[126,129,124,120,135,112,118,0,121,124,124,135,131],
[128,130,118,117,132,118,117,129,0,122,127,132,130],
[124,140,132,126,135,126,119,126,128,0,136,154,135],
[126,124,119,115,127,133,111,126,123,114,0,126,137],
[117,123,115,101,133,110,108,115,118,96,124,0,127],
[117,117,111,117,122,120,111,119,120,115,113,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 124, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,120,152,142,135,139,125,134,156,129,120,120],
[129,0,116,146,128,127,121,119,137,136,127,109,121],
[130,134,0,119,161,132,129,129,146,142,131,134,127],
[98,104,131,0,129,117,123,99,118,130,119,105,106],
[108,122,89,121,0,112,119,119,119,123,115,113,107],
[115,123,118,133,138,0,120,123,141,137,125,115,114],
[111,129,121,127,131,130,0,109,133,132,125,110,112],
[125,131,121,151,131,127,141,0,141,135,129,135,118],
[116,113,104,132,131,109,117,109,0,120,120,101,115],
[94,114,108,120,127,113,118,115,130,0,121,120,96],
[121,123,119,131,135,125,125,121,130,129,0,120,118],
[130,141,116,145,137,135,140,115,149,130,130,0,128],
[130,129,123,144,143,136,138,132,135,154,132,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 125, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,126,124,131,139,162,131,115,135,126,143,136],
[107,0,118,134,122,131,138,126,124,123,124,140,115],
[124,132,0,136,133,139,137,137,137,130,139,146,123],
[126,116,114,0,130,119,148,136,133,123,119,142,121],
[119,128,117,120,0,122,133,120,125,124,122,142,123],
[111,119,111,131,128,0,143,133,114,125,122,131,128],
[88,112,113,102,117,107,0,120,101,109,119,122,122],
[119,124,113,114,130,117,130,0,110,113,112,126,121],
[135,126,113,117,125,136,149,140,0,137,133,149,129],
[115,127,120,127,126,125,141,137,113,0,129,132,117],
[124,126,111,131,128,128,131,138,117,121,0,144,122],
[107,110,104,108,108,119,128,124,101,118,106,0,117],
[114,135,127,129,127,122,128,129,121,133,128,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 126, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,124,135,136,121,114,127,128,130,132,126,132],
[144,0,131,135,137,116,124,134,136,130,123,117,125],
[126,119,0,130,127,112,117,133,110,124,129,115,123],
[115,115,120,0,117,105,116,117,108,130,103,105,124],
[114,113,123,133,0,113,99,111,111,132,118,109,114],
[129,134,138,145,137,0,126,143,125,146,136,117,129],
[136,126,133,134,151,124,0,134,131,132,143,119,128],
[123,116,117,133,139,107,116,0,132,133,128,122,125],
[122,114,140,142,139,125,119,118,0,135,133,117,125],
[120,120,126,120,118,104,118,117,115,0,117,115,110],
[118,127,121,147,132,114,107,122,117,133,0,121,115],
[124,133,135,145,141,133,131,128,133,135,129,0,128],
[118,125,127,126,136,121,122,125,125,140,135,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 127, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,120,135,124,123,138,124,124,127,124,130,150],
[119,0,121,128,116,112,115,125,121,127,114,113,135],
[130,129,0,128,121,123,129,120,120,123,109,115,131],
[115,122,122,0,108,103,98,128,108,99,105,112,130],
[126,134,129,142,0,131,124,139,127,120,135,131,141],
[127,138,127,147,119,0,130,128,128,121,112,123,138],
[112,135,121,152,126,120,0,121,125,113,102,127,138],
[126,125,130,122,111,122,129,0,123,121,122,129,148],
[126,129,130,142,123,122,125,127,0,128,110,118,134],
[123,123,127,151,130,129,137,129,122,0,127,126,137],
[126,136,141,145,115,138,148,128,140,123,0,131,135],
[120,137,135,138,119,127,123,121,132,124,119,0,130],
[100,115,119,120,109,112,112,102,116,113,115,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 128, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,117,119,154,122,137,139,129,147,127,125,135],
[107,0,121,110,120,125,119,132,134,139,122,114,116],
[133,129,0,121,130,121,128,141,137,140,121,127,123],
[131,140,129,0,131,123,130,139,139,141,115,135,123],
[96,130,120,119,0,115,118,125,121,144,131,119,123],
[128,125,129,127,135,0,127,147,138,153,133,136,126],
[113,131,122,120,132,123,0,134,125,146,128,116,124],
[111,118,109,111,125,103,116,0,125,124,130,107,105],
[121,116,113,111,129,112,125,125,0,131,118,132,118],
[103,111,110,109,106,97,104,126,119,0,115,110,109],
[123,128,129,135,119,117,122,120,132,135,0,122,117],
[125,136,123,115,131,114,134,143,118,140,128,0,124],
[115,134,127,127,127,124,126,145,132,141,133,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 129, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,119,129,117,118,126,122,121,118,119,113,134],
[140,0,118,127,130,126,132,138,139,139,136,119,142],
[131,132,0,129,134,121,140,138,135,133,134,126,129],
[121,123,121,0,126,121,132,136,132,124,128,123,127],
[133,120,116,124,0,121,129,122,126,123,127,124,123],
[132,124,129,129,129,0,146,137,131,135,137,128,140],
[124,118,110,118,121,104,0,126,115,126,123,109,124],
[128,112,112,114,128,113,124,0,124,125,125,118,129],
[129,111,115,118,124,119,135,126,0,123,132,118,131],
[132,111,117,126,127,115,124,125,127,0,125,121,123],
[131,114,116,122,123,113,127,125,118,125,0,110,131],
[137,131,124,127,126,122,141,132,132,129,140,0,137],
[116,108,121,123,127,110,126,121,119,127,119,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 130, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,149,115,116,123,125,119,142,132,120,125,133],
[112,0,129,121,108,118,116,106,134,131,121,133,126],
[101,121,0,104,107,131,89,112,137,119,112,120,118],
[135,129,146,0,133,134,121,131,143,143,136,138,145],
[134,142,143,117,0,137,121,123,145,128,133,138,124],
[127,132,119,116,113,0,109,123,138,125,120,134,136],
[125,134,161,129,129,141,0,137,156,136,142,132,141],
[131,144,138,119,127,127,113,0,155,118,131,147,135],
[108,116,113,107,105,112,94,95,0,110,121,129,114],
[118,119,131,107,122,125,114,132,140,0,129,132,132],
[130,129,138,114,117,130,108,119,129,121,0,143,117],
[125,117,130,112,112,116,118,103,121,118,107,0,112],
[117,124,132,105,126,114,109,115,136,118,133,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 131, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,141,132,116,147,140,156,127,123,133,126,146],
[121,0,137,117,132,148,147,141,150,119,126,144,137],
[109,113,0,138,113,146,138,142,142,118,114,122,146],
[118,133,112,0,114,151,126,152,131,115,121,135,133],
[134,118,137,136,0,146,145,149,147,136,132,133,145],
[103,102,104,99,104,0,123,132,115,98,108,109,122],
[110,103,112,124,105,127,0,136,134,103,101,100,127],
[94,109,108,98,101,118,114,0,115,104,94,117,119],
[123,100,108,119,103,135,116,135,0,93,100,118,144],
[127,131,132,135,114,152,147,146,157,0,134,141,151],
[117,124,136,129,118,142,149,156,150,116,0,126,146],
[124,106,128,115,117,141,150,133,132,109,124,0,113],
[104,113,104,117,105,128,123,131,106,99,104,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 132, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,115,150,141,132,137,128,126,152,171,138,143],
[89,0,97,118,95,98,109,96,98,98,125,100,93],
[135,153,0,133,116,130,126,135,122,126,134,126,142],
[100,132,117,0,109,113,127,110,116,121,128,127,122],
[109,155,134,141,0,126,120,130,105,128,151,138,116],
[118,152,120,137,124,0,134,129,124,131,149,129,133],
[113,141,124,123,130,116,0,114,114,130,141,93,113],
[122,154,115,140,120,121,136,0,111,133,143,134,133],
[124,152,128,134,145,126,136,139,0,146,146,128,125],
[98,152,124,129,122,119,120,117,104,0,137,131,115],
[79,125,116,122,99,101,109,107,104,113,0,89,124],
[112,150,124,123,112,121,157,116,122,119,161,0,135],
[107,157,108,128,134,117,137,117,125,135,126,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 133, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,129,125,137,122,129,129,135,139,129,138,132],
[114,0,121,128,125,114,128,127,128,130,122,130,112],
[121,129,0,118,131,126,133,125,136,138,136,132,116],
[125,122,132,0,124,117,133,123,127,133,127,133,117],
[113,125,119,126,0,128,129,120,133,138,126,136,115],
[128,136,124,133,122,0,138,124,133,140,141,138,124],
[121,122,117,117,121,112,0,120,121,126,117,134,103],
[121,123,125,127,130,126,130,0,129,126,126,130,113],
[115,122,114,123,117,117,129,121,0,128,117,126,115],
[111,120,112,117,112,110,124,124,122,0,113,125,107],
[121,128,114,123,124,109,133,124,133,137,0,133,106],
[112,120,118,117,114,112,116,120,124,125,117,0,109],
[118,138,134,133,135,126,147,137,135,143,144,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 134, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,138,144,120,122,139,143,141,145,133,130,135],
[102,0,118,116,98,107,116,133,114,110,108,112,111],
[112,132,0,119,113,116,119,127,111,111,117,110,114],
[106,134,131,0,116,110,108,140,124,111,113,108,114],
[130,152,137,134,0,129,115,143,134,134,124,131,138],
[128,143,134,140,121,0,133,148,136,126,130,129,136],
[111,134,131,142,135,117,0,140,121,128,115,131,118],
[107,117,123,110,107,102,110,0,100,106,110,117,115],
[109,136,139,126,116,114,129,150,0,119,124,123,125],
[105,140,139,139,116,124,122,144,131,0,121,129,126],
[117,142,133,137,126,120,135,140,126,129,0,134,137],
[120,138,140,142,119,121,119,133,127,121,116,0,120],
[115,139,136,136,112,114,132,135,125,124,113,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 135, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,116,146,151,139,127,131,124,110,148,126,139],
[99,0,117,130,119,117,113,122,136,97,122,129,127],
[134,133,0,149,130,148,115,120,116,112,136,130,144],
[104,120,101,0,127,120,120,106,95,114,119,110,121],
[99,131,120,123,0,122,115,113,117,101,120,115,103],
[111,133,102,130,128,0,102,117,119,97,119,125,121],
[123,137,135,130,135,148,0,136,119,138,134,140,125],
[119,128,130,144,137,133,114,0,116,128,149,149,120],
[126,114,134,155,133,131,131,134,0,112,166,148,111],
[140,153,138,136,149,153,112,122,138,0,158,139,125],
[102,128,114,131,130,131,116,101,84,92,0,102,122],
[124,121,120,140,135,125,110,101,102,111,148,0,120],
[111,123,106,129,147,129,125,130,139,125,128,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 136, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,133,131,132,122,130,124,133,125,128,130,120],
[119,0,126,112,126,123,112,118,129,129,118,125,109],
[117,124,0,129,128,139,123,125,127,126,118,131,117],
[119,138,121,0,128,122,118,117,131,136,119,125,121],
[118,124,122,122,0,131,117,119,112,123,122,116,111],
[128,127,111,128,119,0,124,125,123,131,117,115,119],
[120,138,127,132,133,126,0,126,128,134,123,125,113],
[126,132,125,133,131,125,124,0,125,128,124,116,127],
[117,121,123,119,138,127,122,125,0,131,123,110,118],
[125,121,124,114,127,119,116,122,119,0,130,130,119],
[122,132,132,131,128,133,127,126,127,120,0,132,124],
[120,125,119,125,134,135,125,134,140,120,118,0,123],
[130,141,133,129,139,131,137,123,132,131,126,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 137, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,104,102,128,115,116,119,110,132,120,116,127],
[116,0,120,117,116,141,125,126,124,129,123,115,138],
[146,130,0,133,144,138,132,124,137,133,150,142,139],
[148,133,117,0,133,136,127,128,130,141,140,144,136],
[122,134,106,117,0,121,123,126,129,126,118,131,129],
[135,109,112,114,129,0,104,117,117,106,129,119,109],
[134,125,118,123,127,146,0,125,126,147,135,107,129],
[131,124,126,122,124,133,125,0,131,130,137,131,142],
[140,126,113,120,121,133,124,119,0,127,124,120,126],
[118,121,117,109,124,144,103,120,123,0,115,109,106],
[130,127,100,110,132,121,115,113,126,135,0,123,114],
[134,135,108,106,119,131,143,119,130,141,127,0,129],
[123,112,111,114,121,141,121,108,124,144,136,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 138, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,121,135,132,129,134,136,150,125,137,142,146],
[99,0,105,100,126,124,120,109,124,113,104,134,118],
[129,145,0,119,130,139,127,127,128,114,137,145,121],
[115,150,131,0,155,152,145,120,135,123,146,139,137],
[118,124,120,95,0,115,142,119,126,114,111,140,120],
[121,126,111,98,135,0,129,129,131,123,131,141,124],
[116,130,123,105,108,121,0,121,119,121,134,135,133],
[114,141,123,130,131,121,129,0,146,120,128,153,135],
[100,126,122,115,124,119,131,104,0,115,124,133,109],
[125,137,136,127,136,127,129,130,135,0,128,152,127],
[113,146,113,104,139,119,116,122,126,122,0,127,124],
[108,116,105,111,110,109,115,97,117,98,123,0,96],
[104,132,129,113,130,126,117,115,141,123,126,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 139, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,114,148,142,135,127,127,143,121,123,122,151],
[126,0,134,150,127,114,142,139,123,144,121,126,135],
[136,116,0,122,118,146,137,135,124,131,117,107,144],
[102,100,128,0,130,114,140,123,118,108,129,124,163],
[108,123,132,120,0,140,128,123,115,135,150,100,148],
[115,136,104,136,110,0,154,117,127,120,109,124,147],
[123,108,113,110,122,96,0,104,119,119,112,105,119],
[123,111,115,127,127,133,146,0,134,133,105,111,142],
[107,127,126,132,135,123,131,116,0,139,108,127,147],
[129,106,119,142,115,130,131,117,111,0,109,127,131],
[127,129,133,121,100,141,138,145,142,141,0,121,146],
[128,124,143,126,150,126,145,139,123,123,129,0,139],
[99,115,106,87,102,103,131,108,103,119,104,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 140, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,119,130,131,121,127,125,130,125,135,132,127],
[119,0,96,122,124,120,127,103,122,118,123,123,113],
[131,154,0,130,149,113,141,117,141,136,142,122,134],
[120,128,120,0,137,120,137,124,133,120,140,132,127],
[119,126,101,113,0,104,138,121,122,119,138,130,126],
[129,130,137,130,146,0,133,121,141,141,136,118,132],
[123,123,109,113,112,117,0,94,122,128,138,114,126],
[125,147,133,126,129,129,156,0,149,141,149,128,138],
[120,128,109,117,128,109,128,101,0,122,136,118,119],
[125,132,114,130,131,109,122,109,128,0,129,114,112],
[115,127,108,110,112,114,112,101,114,121,0,103,104],
[118,127,128,118,120,132,136,122,132,136,147,0,131],
[123,137,116,123,124,118,124,112,131,138,146,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 141, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,164,113,136,153,122,131,166,155,129,142,139],
[123,0,148,153,156,146,96,158,134,150,149,127,138],
[86,102,0,87,92,133,102,93,113,121,102,128,96],
[137,97,163,0,138,154,136,131,162,154,144,133,140],
[114,94,158,112,0,141,117,133,129,136,148,148,118],
[97,104,117,96,109,0,119,92,124,122,112,110,123],
[128,154,148,114,133,131,0,150,136,179,160,104,137],
[119,92,157,119,117,158,100,0,117,155,145,125,128],
[84,116,137,88,121,126,114,133,0,128,147,115,94],
[95,100,129,96,114,128,71,95,122,0,111,91,123],
[121,101,148,106,102,138,90,105,103,139,0,117,97],
[108,123,122,117,102,140,146,125,135,159,133,0,115],
[111,112,154,110,132,127,113,122,156,127,153,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 142, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,126,120,101,102,97,93,93,102,93,127,83],
[123,0,116,90,112,106,103,92,102,109,97,149,83],
[124,134,0,53,125,63,112,88,82,92,123,133,80],
[130,160,197,0,137,154,135,104,162,100,138,160,124],
[149,138,125,113,0,106,107,124,73,135,124,157,124],
[148,144,187,96,144,0,118,146,136,134,162,168,117],
[153,147,138,115,143,132,0,107,100,136,108,135,144],
[157,158,162,146,126,104,143,0,124,176,144,164,130],
[157,148,168,88,177,114,150,126,0,127,152,155,157],
[148,141,158,150,115,116,114,74,123,0,120,133,132],
[157,153,127,112,126,88,142,106,98,130,0,167,120],
[123,101,117,90,93,82,115,86,95,117,83,0,59],
[167,167,170,126,126,133,106,120,93,118,130,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 143, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,124,129,147,122,126,132,127,143,141,125,126],
[118,0,127,131,137,128,120,121,126,125,132,114,117],
[126,123,0,120,134,119,134,133,123,118,139,123,129],
[121,119,130,0,121,122,137,130,125,124,130,125,124],
[103,113,116,129,0,114,124,120,125,127,125,121,116],
[128,122,131,128,136,0,123,134,136,128,139,119,111],
[124,130,116,113,126,127,0,129,121,123,119,124,116],
[118,129,117,120,130,116,121,0,120,122,120,108,110],
[123,124,127,125,125,114,129,130,0,136,140,123,127],
[107,125,132,126,123,122,127,128,114,0,128,125,115],
[109,118,111,120,125,111,131,130,110,122,0,112,126],
[125,136,127,125,129,131,126,142,127,125,138,0,113],
[124,133,121,126,134,139,134,140,123,135,124,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 144, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,111,149,121,144,149,110,144,211,148,134,129],
[100,0,78,157,83,88,153,86,116,179,122,120,127],
[139,172,0,165,119,138,135,106,158,195,164,145,150],
[101,93,85,0,84,90,101,47,116,155,108,90,68],
[129,167,131,166,0,129,152,111,135,195,152,174,149],
[106,162,112,160,121,0,153,132,126,170,152,122,109],
[101,97,115,149,98,97,0,97,139,132,112,121,117],
[140,164,144,203,139,118,153,0,137,179,172,145,155],
[106,134,92,134,115,124,111,113,0,157,163,89,127],
[39,71,55,95,55,80,118,71,93,0,118,74,58],
[102,128,86,142,98,98,138,78,87,132,0,102,125],
[116,130,105,160,76,128,129,105,161,176,148,0,104],
[121,123,100,182,101,141,133,95,123,192,125,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 145, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,133,139,123,167,113,159,159,127,148,135,141],
[126,0,136,136,104,139,105,140,156,122,145,102,137],
[117,114,0,117,111,134,103,123,172,99,159,130,128],
[111,114,133,0,164,143,136,169,174,124,165,136,143],
[127,146,139,86,0,118,101,128,136,112,136,100,111],
[83,111,116,107,132,0,76,141,133,121,125,96,112],
[137,145,147,114,149,174,0,164,152,128,161,141,145],
[91,110,127,81,122,109,86,0,126,95,119,115,102],
[91,94,78,76,114,117,98,124,0,90,105,122,95],
[123,128,151,126,138,129,122,155,160,0,175,129,121],
[102,105,91,85,114,125,89,131,145,75,0,114,106],
[115,148,120,114,150,154,109,135,128,121,136,0,138],
[109,113,122,107,139,138,105,148,155,129,144,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 146, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,128,121,128,106,125,150,116,129,128,137,126],
[107,0,121,129,111,111,118,131,107,126,133,123,106],
[122,129,0,129,115,116,120,136,131,132,134,130,117],
[129,121,121,0,121,125,133,121,122,125,129,115,131],
[122,139,135,129,0,129,128,128,123,126,136,127,126],
[144,139,134,125,121,0,121,150,131,141,134,133,138],
[125,132,130,117,122,129,0,134,127,131,129,128,108],
[100,119,114,129,122,100,116,0,108,129,120,118,112],
[134,143,119,128,127,119,123,142,0,125,130,120,128],
[121,124,118,125,124,109,119,121,125,0,135,139,130],
[122,117,116,121,114,116,121,130,120,115,0,120,98],
[113,127,120,135,123,117,122,132,130,111,130,0,120],
[124,144,133,119,124,112,142,138,122,120,152,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 147, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,136,108,135,137,121,134,125,130,119,112,104],
[140,0,150,127,146,143,144,131,132,124,129,143,123],
[114,100,0,124,123,127,120,120,125,124,109,140,98],
[142,123,126,0,128,138,142,131,137,132,116,130,126],
[115,104,127,122,0,133,132,122,121,121,123,104,113],
[113,107,123,112,117,0,125,119,121,124,117,122,111],
[129,106,130,108,118,125,0,119,125,123,102,136,97],
[116,119,130,119,128,131,131,0,131,132,119,116,110],
[125,118,125,113,129,129,125,119,0,125,112,113,106],
[120,126,126,118,129,126,127,118,125,0,113,138,104],
[131,121,141,134,127,133,148,131,138,137,0,143,122],
[138,107,110,120,146,128,114,134,137,112,107,0,111],
[146,127,152,124,137,139,153,140,144,146,128,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 148, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,123,135,131,133,128,123,129,135,129,117,127],
[123,0,119,124,118,128,119,129,125,126,133,114,130],
[127,131,0,129,120,126,128,130,127,130,128,116,131],
[115,126,121,0,119,111,115,128,138,123,128,101,114],
[119,132,130,131,0,126,129,130,132,128,137,121,131],
[117,122,124,139,124,0,115,113,128,118,133,121,131],
[122,131,122,135,121,135,0,130,139,127,137,121,123],
[127,121,120,122,120,137,120,0,131,115,129,123,121],
[121,125,123,112,118,122,111,119,0,121,124,113,129],
[115,124,120,127,122,132,123,135,129,0,136,114,114],
[121,117,122,122,113,117,113,121,126,114,0,108,132],
[133,136,134,149,129,129,129,127,137,136,142,0,125],
[123,120,119,136,119,119,127,129,121,136,118,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 149, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,120,91,104,117,121,109,120,112,103,101,113],
[125,0,134,105,113,129,116,112,133,137,109,115,117],
[130,116,0,96,120,119,114,104,120,117,97,112,126],
[159,145,154,0,134,164,146,124,156,149,133,128,155],
[146,137,130,116,0,148,136,112,131,127,111,129,134],
[133,121,131,86,102,0,114,103,123,126,107,110,121],
[129,134,136,104,114,136,0,125,128,127,114,126,128],
[141,138,146,126,138,147,125,0,131,147,130,130,140],
[130,117,130,94,119,127,122,119,0,128,92,111,130],
[138,113,133,101,123,124,123,103,122,0,109,112,126],
[147,141,153,117,139,143,136,120,158,141,0,142,146],
[149,135,138,122,121,140,124,120,139,138,108,0,136],
[137,133,124,95,116,129,122,110,120,124,104,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 150, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,102,109,124,135,120,127,117,121,129,122,98],
[138,0,119,135,120,144,124,134,107,117,137,108,120],
[148,131,0,116,117,117,135,116,115,109,142,122,129],
[141,115,134,0,126,134,136,135,123,117,148,116,127],
[126,130,133,124,0,154,125,126,115,102,133,112,109],
[115,106,133,116,96,0,115,111,95,93,129,104,105],
[130,126,115,114,125,135,0,139,117,115,139,117,106],
[123,116,134,115,124,139,111,0,125,119,146,118,123],
[133,143,135,127,135,155,133,125,0,134,133,118,121],
[129,133,141,133,148,157,135,131,116,0,150,126,120],
[121,113,108,102,117,121,111,104,117,100,0,117,109],
[128,142,128,134,138,146,133,132,132,124,133,0,125],
[152,130,121,123,141,145,144,127,129,130,141,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 151, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,132,123,135,132,124,136,127,130,131,137,123],
[125,0,128,128,125,127,130,128,132,123,130,133,114],
[118,122,0,130,128,136,118,127,112,120,124,127,116],
[127,122,120,0,118,120,120,128,126,123,126,126,111],
[115,125,122,132,0,132,128,119,123,118,122,130,118],
[118,123,114,130,118,0,117,128,117,115,115,125,112],
[126,120,132,130,122,133,0,131,131,118,130,139,120],
[114,122,123,122,131,122,119,0,113,119,125,129,116],
[123,118,138,124,127,133,119,137,0,110,132,127,118],
[120,127,130,127,132,135,132,131,140,0,136,146,129],
[119,120,126,124,128,135,120,125,118,114,0,124,113],
[113,117,123,124,120,125,111,121,123,104,126,0,111],
[127,136,134,139,132,138,130,134,132,121,137,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 152, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,128,130,138,123,134,145,133,118,125,138,122],
[131,0,130,127,139,126,144,144,121,128,136,135,130],
[122,120,0,123,124,121,132,121,126,114,122,138,112],
[120,123,127,0,130,122,125,126,142,131,122,130,111],
[112,111,126,120,0,126,140,111,98,124,105,128,116],
[127,124,129,128,124,0,129,131,123,119,116,137,110],
[116,106,118,125,110,121,0,115,129,111,130,116,104],
[105,106,129,124,139,119,135,0,130,131,109,136,111],
[117,129,124,108,152,127,121,120,0,124,116,137,114],
[132,122,136,119,126,131,139,119,126,0,128,134,130],
[125,114,128,128,145,134,120,141,134,122,0,124,123],
[112,115,112,120,122,113,134,114,113,116,126,0,113],
[128,120,138,139,134,140,146,139,136,120,127,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 153, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,134,132,128,130,145,127,122,138,128,143,117],
[125,0,136,130,127,130,147,118,130,128,121,127,122],
[116,114,0,123,116,107,138,125,116,127,119,129,112],
[118,120,127,0,125,135,133,116,124,143,126,139,125],
[122,123,134,125,0,130,146,129,132,132,132,137,129],
[120,120,143,115,120,0,139,113,125,129,119,128,123],
[105,103,112,117,104,111,0,109,120,121,112,123,113],
[123,132,125,134,121,137,141,0,129,137,115,134,131],
[128,120,134,126,118,125,130,121,0,130,122,134,118],
[112,122,123,107,118,121,129,113,120,0,118,125,112],
[122,129,131,124,118,131,138,135,128,132,0,130,121],
[107,123,121,111,113,122,127,116,116,125,120,0,115],
[133,128,138,125,121,127,137,119,132,138,129,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 154, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,136,127,128,128,132,146,129,148,112,122,155],
[144,0,129,117,144,123,144,151,139,143,107,142,150],
[114,121,0,118,122,100,122,133,114,114,101,101,131],
[123,133,132,0,129,119,130,125,128,154,139,121,140],
[122,106,128,121,0,121,140,144,101,133,115,93,127],
[122,127,150,131,129,0,148,149,138,152,128,127,142],
[118,106,128,120,110,102,0,114,105,119,120,99,121],
[104,99,117,125,106,101,136,0,94,127,91,105,107],
[121,111,136,122,149,112,145,156,0,150,119,122,137],
[102,107,136,96,117,98,131,123,100,0,98,103,130],
[138,143,149,111,135,122,130,159,131,152,0,133,129],
[128,108,149,129,157,123,151,145,128,147,117,0,132],
[95,100,119,110,123,108,129,143,113,120,121,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 155, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,118,129,137,123,124,118,124,142,130,122,126],
[130,0,121,131,136,126,124,128,118,145,136,135,132],
[132,129,0,142,128,121,130,134,132,144,147,139,138],
[121,119,108,0,125,122,120,117,127,137,129,128,117],
[113,114,122,125,0,119,123,130,123,136,125,117,123],
[127,124,129,128,131,0,122,127,130,143,132,130,131],
[126,126,120,130,127,128,0,129,129,139,132,123,126],
[132,122,116,133,120,123,121,0,122,136,136,134,131],
[126,132,118,123,127,120,121,128,0,134,130,133,136],
[108,105,106,113,114,107,111,114,116,0,125,116,125],
[120,114,103,121,125,118,118,114,120,125,0,131,125],
[128,115,111,122,133,120,127,116,117,134,119,0,124],
[124,118,112,133,127,119,124,119,114,125,125,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 156, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,137,126,136,141,125,124,145,145,133,117,117],
[124,0,123,117,103,130,128,119,128,130,123,127,113],
[113,127,0,125,116,131,111,129,124,133,126,126,115],
[124,133,125,0,136,137,122,122,140,123,125,130,131],
[114,147,134,114,0,137,129,130,137,124,122,125,118],
[109,120,119,113,113,0,111,107,121,111,120,115,108],
[125,122,139,128,121,139,0,116,146,138,137,130,121],
[126,131,121,128,120,143,134,0,128,139,123,121,130],
[105,122,126,110,113,129,104,122,0,114,135,121,112],
[105,120,117,127,126,139,112,111,136,0,125,126,131],
[117,127,124,125,128,130,113,127,115,125,0,106,123],
[133,123,124,120,125,135,120,129,129,124,144,0,125],
[133,137,135,119,132,142,129,120,138,119,127,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 157, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,156,132,126,135,138,122,129,132,114,115,156],
[118,0,139,121,111,118,134,116,90,120,119,116,131],
[94,111,0,116,112,118,122,127,117,129,132,145,134],
[118,129,134,0,102,126,141,125,114,130,148,145,142],
[124,139,138,148,0,145,148,140,121,131,134,140,158],
[115,132,132,124,105,0,146,139,116,117,132,129,141],
[112,116,128,109,102,104,0,99,103,116,131,111,132],
[128,134,123,125,110,111,151,0,108,133,126,150,132],
[121,160,133,136,129,134,147,142,0,142,134,140,144],
[118,130,121,120,119,133,134,117,108,0,136,139,142],
[136,131,118,102,116,118,119,124,116,114,0,120,138],
[135,134,105,105,110,121,139,100,110,111,130,0,117],
[94,119,116,108,92,109,118,118,106,108,112,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 158, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,107,153,124,113,130,140,106,128,92,126,129],
[134,0,121,138,135,121,138,126,132,137,136,114,138],
[143,129,0,131,124,134,140,136,112,141,136,129,152],
[97,112,119,0,123,115,131,111,111,134,121,111,131],
[126,115,126,127,0,115,127,122,136,156,117,135,146],
[137,129,116,135,135,0,123,127,101,137,139,129,150],
[120,112,110,119,123,127,0,115,88,143,115,98,116],
[110,124,114,139,128,123,135,0,118,138,107,130,130],
[144,118,138,139,114,149,162,132,0,141,142,149,157],
[122,113,109,116,94,113,107,112,109,0,115,125,120],
[158,114,114,129,133,111,135,143,108,135,0,130,157],
[124,136,121,139,115,121,152,120,101,125,120,0,146],
[121,112,98,119,104,100,134,120,93,130,93,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 159, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,113,125,129,122,142,119,125,120,132,129,127],
[133,0,125,139,131,134,141,124,141,121,140,135,128],
[137,125,0,141,120,126,130,123,121,127,139,134,134],
[125,111,109,0,112,115,120,114,120,114,128,124,116],
[121,119,130,138,0,127,127,133,140,113,138,137,117],
[128,116,124,135,123,0,132,125,127,121,134,145,129],
[108,109,120,130,123,118,0,114,128,110,133,117,122],
[131,126,127,136,117,125,136,0,140,113,134,131,124],
[125,109,129,130,110,123,122,110,0,117,128,130,119],
[130,129,123,136,137,129,140,137,133,0,138,134,131],
[118,110,111,122,112,116,117,116,122,112,0,122,116],
[121,115,116,126,113,105,133,119,120,116,128,0,117],
[123,122,116,134,133,121,128,126,131,119,134,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 160, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,128,135,101,99,144,103,101,159,157,141,98],
[159,0,138,138,93,127,155,127,126,141,157,144,92],
[122,112,0,112,83,112,121,124,100,135,139,126,98],
[115,112,138,0,88,139,146,91,83,109,120,137,93],
[149,157,167,162,0,134,181,123,126,166,194,163,142],
[151,123,138,111,116,0,127,155,116,151,154,149,132],
[106,95,129,104,69,123,0,124,80,119,112,90,85],
[147,123,126,159,127,95,126,0,121,133,155,149,114],
[149,124,150,167,124,134,170,129,0,133,164,139,138],
[91,109,115,141,84,99,131,117,117,0,168,142,84],
[93,93,111,130,56,96,138,95,86,82,0,120,73],
[109,106,124,113,87,101,160,101,111,108,130,0,105],
[152,158,152,157,108,118,165,136,112,166,177,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 161, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,136,144,143,160,156,165,148,160,136,138,118],
[91,0,135,116,144,129,136,120,109,136,123,109,95],
[114,115,0,131,139,143,120,122,98,112,102,118,105],
[106,134,119,0,145,133,118,131,105,122,106,127,91],
[107,106,111,105,0,140,112,124,93,117,104,111,87],
[90,121,107,117,110,0,132,125,126,117,103,135,61],
[94,114,130,132,138,118,0,144,96,129,144,111,129],
[85,130,128,119,126,125,106,0,126,142,108,130,87],
[102,141,152,145,157,124,154,124,0,164,121,101,107],
[90,114,138,128,133,133,121,108,86,0,116,103,97],
[114,127,148,144,146,147,106,142,129,134,0,149,109],
[112,141,132,123,139,115,139,120,149,147,101,0,113],
[132,155,145,159,163,189,121,163,143,153,141,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 162, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,83,173,119,87,94,22,71,144,96,116,62],
[164,0,128,164,164,164,154,128,139,139,156,111,128],
[167,122,0,222,167,129,184,156,167,212,139,182,167],
[77,86,28,0,39,28,54,50,77,39,71,49,28],
[131,86,83,211,0,50,116,60,60,133,71,114,128],
[163,86,121,222,200,0,137,146,114,187,109,157,214],
[156,96,66,196,134,113,0,156,113,196,134,167,113],
[228,122,94,200,190,104,94,0,117,122,107,200,147],
[179,111,83,173,190,136,137,133,0,187,139,159,179],
[106,111,38,211,117,63,54,128,63,0,134,139,63],
[154,94,111,179,179,141,116,143,111,116,0,154,154],
[134,139,68,201,136,93,83,50,91,111,96,0,93],
[188,122,83,222,122,36,137,103,71,187,96,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 163, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,128,121,133,127,145,163,142,141,127,135,140],
[108,0,116,121,119,132,133,160,127,152,123,108,129],
[122,134,0,119,120,139,145,160,129,136,108,122,139],
[129,129,131,0,123,138,132,155,126,123,114,128,126],
[117,131,130,127,0,142,143,159,142,145,119,153,140],
[123,118,111,112,108,0,131,130,94,131,119,117,108],
[105,117,105,118,107,119,0,127,112,124,112,105,120],
[87,90,90,95,91,120,123,0,97,111,98,101,96],
[108,123,121,124,108,156,138,153,0,136,115,139,122],
[109,98,114,127,105,119,126,139,114,0,117,114,102],
[123,127,142,136,131,131,138,152,135,133,0,140,126],
[115,142,128,122,97,133,145,149,111,136,110,0,124],
[110,121,111,124,110,142,130,154,128,148,124,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 164, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,105,111,138,131,122,130,125,113,154,124,117],
[117,0,105,109,125,118,122,127,128,126,148,115,120],
[145,145,0,132,144,123,129,156,144,112,142,128,129],
[139,141,118,0,128,119,129,133,145,119,140,122,116],
[112,125,106,122,0,125,114,114,124,120,138,101,137],
[119,132,127,131,125,0,139,110,123,113,137,125,128],
[128,128,121,121,136,111,0,136,126,117,123,123,119],
[120,123,94,117,136,140,114,0,129,116,155,127,115],
[125,122,106,105,126,127,124,121,0,99,107,111,98],
[137,124,138,131,130,137,133,134,151,0,138,126,148],
[96,102,108,110,112,113,127,95,143,112,0,119,122],
[126,135,122,128,149,125,127,123,139,124,131,0,137],
[133,130,121,134,113,122,131,135,152,102,128,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 165, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,120,131,96,130,117,123,125,119,121,121,124],
[132,0,126,123,111,125,127,119,117,121,120,115,120],
[130,124,0,120,126,125,112,120,126,121,131,122,125],
[119,127,130,0,120,124,111,126,120,122,125,118,118],
[154,139,124,130,0,135,122,128,139,134,134,127,136],
[120,125,125,126,115,0,110,113,121,128,117,112,126],
[133,123,138,139,128,140,0,132,129,140,139,128,124],
[127,131,130,124,122,137,118,0,129,138,134,122,133],
[125,133,124,130,111,129,121,121,0,129,126,121,123],
[131,129,129,128,116,122,110,112,121,0,117,117,126],
[129,130,119,125,116,133,111,116,124,133,0,123,118],
[129,135,128,132,123,138,122,128,129,133,127,0,116],
[126,130,125,132,114,124,126,117,127,124,132,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 166, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,125,103,124,118,131,134,106,125,131,111,117],
[121,0,107,118,120,116,119,119,115,119,126,107,119],
[125,143,0,125,133,133,126,136,129,130,135,127,122],
[147,132,125,0,129,128,132,130,126,126,133,125,124],
[126,130,117,121,0,127,130,121,122,129,125,114,118],
[132,134,117,122,123,0,124,116,116,123,136,117,113],
[119,131,124,118,120,126,0,126,115,135,122,111,111],
[116,131,114,120,129,134,124,0,110,117,124,108,119],
[144,135,121,124,128,134,135,140,0,128,133,117,123],
[125,131,120,124,121,127,115,133,122,0,126,125,126],
[119,124,115,117,125,114,128,126,117,124,0,121,118],
[139,143,123,125,136,133,139,142,133,125,129,0,127],
[133,131,128,126,132,137,139,131,127,124,132,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 167, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,130,146,130,111,135,158,133,142,132,137,120],
[98,0,109,114,122,89,121,137,120,112,120,105,104],
[120,141,0,144,128,125,153,149,139,129,119,112,129],
[104,136,106,0,120,113,127,125,117,119,112,127,108],
[120,128,122,130,0,120,139,131,123,125,114,131,116],
[139,161,125,137,130,0,135,146,134,136,129,128,140],
[115,129,97,123,111,115,0,131,102,132,109,100,107],
[92,113,101,125,119,104,119,0,123,115,110,119,107],
[117,130,111,133,127,116,148,127,0,123,122,130,118],
[108,138,121,131,125,114,118,135,127,0,110,111,127],
[118,130,131,138,136,121,141,140,128,140,0,139,126],
[113,145,138,123,119,122,150,131,120,139,111,0,119],
[130,146,121,142,134,110,143,143,132,123,124,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 168, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,158,151,134,132,158,142,147,137,116,160,147],
[115,0,129,121,125,125,125,130,129,136,117,143,150],
[92,121,0,113,125,107,120,142,139,100,143,114,157],
[99,129,137,0,111,113,108,174,148,113,121,93,155],
[116,125,125,139,0,152,125,158,155,145,166,156,134],
[118,125,143,137,98,0,101,134,130,105,132,177,111],
[92,125,130,142,125,149,0,139,119,122,112,150,142],
[108,120,108,76,92,116,111,0,117,95,113,113,110],
[103,121,111,102,95,120,131,133,0,94,78,136,141],
[113,114,150,137,105,145,128,155,156,0,135,161,159],
[134,133,107,129,84,118,138,137,172,115,0,132,117],
[90,107,136,157,94,73,100,137,114,89,118,0,116],
[103,100,93,95,116,139,108,140,109,91,133,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 169, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,127,121,126,124,122,132,108,120,128,131,133],
[121,0,122,120,127,117,117,119,119,127,133,123,116],
[123,128,0,123,115,115,120,122,121,121,130,113,126],
[129,130,127,0,135,133,123,142,129,131,133,135,129],
[124,123,135,115,0,125,128,116,123,130,139,126,129],
[126,133,135,117,125,0,122,122,124,135,142,128,140],
[128,133,130,127,122,128,0,129,125,126,121,132,143],
[118,131,128,108,134,128,121,0,133,126,136,129,124],
[142,131,129,121,127,126,125,117,0,132,137,136,130],
[130,123,129,119,120,115,124,124,118,0,127,120,125],
[122,117,120,117,111,108,129,114,113,123,0,114,129],
[119,127,137,115,124,122,118,121,114,130,136,0,126],
[117,134,124,121,121,110,107,126,120,125,121,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 170, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,103,93,137,120,132,97,99,130,97,103,104],
[117,0,84,129,128,149,93,144,128,153,106,86,102],
[147,166,0,170,150,169,123,150,156,172,157,137,135],
[157,121,80,0,129,109,87,144,112,136,83,130,99],
[113,122,100,121,0,109,79,136,95,123,110,102,82],
[130,101,81,141,141,0,124,132,122,132,109,85,86],
[118,157,127,163,171,126,0,169,129,171,128,103,109],
[153,106,100,106,114,118,81,0,85,125,88,93,74],
[151,122,94,138,155,128,121,165,0,156,102,92,109],
[120,97,78,114,127,118,79,125,94,0,94,108,93],
[153,144,93,167,140,141,122,162,148,156,0,131,123],
[147,164,113,120,148,165,147,157,158,142,119,0,136],
[146,148,115,151,168,164,141,176,141,157,127,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 171, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,108,119,109,141,75,114,103,101,98,109],
[147,0,141,122,153,123,140,130,129,134,141,152,140],
[139,109,0,111,128,111,142,107,123,132,107,121,110],
[142,128,139,0,146,127,140,110,127,136,111,145,124],
[131,97,122,104,0,120,135,111,105,107,122,138,105],
[141,127,139,123,130,0,153,99,146,141,124,143,122],
[109,110,108,110,115,97,0,84,109,105,109,103,101],
[175,120,143,140,139,151,166,0,146,143,128,151,141],
[136,121,127,123,145,104,141,104,0,119,126,134,139],
[147,116,118,114,143,109,145,107,131,0,119,131,139],
[149,109,143,139,128,126,141,122,124,131,0,150,127],
[152,98,129,105,112,107,147,99,116,119,100,0,114],
[141,110,140,126,145,128,149,109,111,111,123,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 172, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,120,135,113,127,128,117,120,134,124,128,130],
[131,0,119,140,128,133,124,126,122,136,137,140,128],
[130,131,0,139,118,139,121,129,128,118,114,132,130],
[115,110,111,0,103,116,105,123,107,114,115,105,111],
[137,122,132,147,0,127,118,130,132,131,144,135,129],
[123,117,111,134,123,0,112,114,121,124,117,124,130],
[122,126,129,145,132,138,0,123,123,131,123,139,140],
[133,124,121,127,120,136,127,0,134,133,122,128,124],
[130,128,122,143,118,129,127,116,0,120,124,127,124],
[116,114,132,136,119,126,119,117,130,0,115,126,120],
[126,113,136,135,106,133,127,128,126,135,0,129,132],
[122,110,118,145,115,126,111,122,123,124,121,0,118],
[120,122,120,139,121,120,110,126,126,130,118,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 173, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,110,113,102,115,110,109,116,110,123,116,119],
[144,0,123,131,111,129,127,115,143,112,141,134,125],
[140,127,0,122,130,129,142,132,136,126,146,123,142],
[137,119,128,0,123,128,127,116,133,105,134,123,129],
[148,139,120,127,0,136,131,120,139,113,148,131,134],
[135,121,121,122,114,0,126,124,138,112,137,131,108],
[140,123,108,123,119,124,0,126,133,114,132,129,116],
[141,135,118,134,130,126,124,0,148,118,144,130,135],
[134,107,114,117,111,112,117,102,0,107,131,123,108],
[140,138,124,145,137,138,136,132,143,0,145,121,134],
[127,109,104,116,102,113,118,106,119,105,0,130,99],
[134,116,127,127,119,119,121,120,127,129,120,0,114],
[131,125,108,121,116,142,134,115,142,116,151,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 174, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,121,135,124,130,105,127,126,132,119,97,111],
[119,0,90,140,106,128,103,132,111,131,112,99,93],
[129,160,0,153,120,137,130,135,139,139,119,130,134],
[115,110,97,0,109,111,107,111,90,119,94,95,83],
[126,144,130,141,0,133,123,134,122,150,123,125,113],
[120,122,113,139,117,0,115,127,105,122,114,103,89],
[145,147,120,143,127,135,0,138,137,140,139,132,118],
[123,118,115,139,116,123,112,0,123,135,110,109,105],
[124,139,111,160,128,145,113,127,0,135,111,121,110],
[118,119,111,131,100,128,110,115,115,0,98,117,109],
[131,138,131,156,127,136,111,140,139,152,0,130,128],
[153,151,120,155,125,147,118,141,129,133,120,0,106],
[139,157,116,167,137,161,132,145,140,141,122,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 175, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,125,113,100,123,126,128,140,120,120,115,125],
[111,0,113,107,98,105,110,105,117,92,111,104,106],
[125,137,0,124,113,120,131,123,133,122,129,116,147],
[137,143,126,0,117,132,125,136,150,120,133,127,124],
[150,152,137,133,0,133,131,139,142,129,134,122,143],
[127,145,130,118,117,0,122,132,123,115,129,114,121],
[124,140,119,125,119,128,0,125,131,130,131,127,128],
[122,145,127,114,111,118,125,0,132,121,135,114,123],
[110,133,117,100,108,127,119,118,0,127,108,121,122],
[130,158,128,130,121,135,120,129,123,0,135,126,120],
[130,139,121,117,116,121,119,115,142,115,0,118,136],
[135,146,134,123,128,136,123,136,129,124,132,0,122],
[125,144,103,126,107,129,122,127,128,130,114,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 176, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,127,135,140,142,130,129,136,117,125,125,137],
[125,0,133,137,137,145,131,128,159,146,134,135,133],
[123,117,0,127,120,127,120,127,138,125,122,128,140],
[115,113,123,0,121,135,116,127,116,121,120,117,122],
[110,113,130,129,0,129,122,137,134,126,121,126,123],
[108,105,123,115,121,0,106,128,120,122,115,123,115],
[120,119,130,134,128,144,0,122,142,135,134,132,138],
[121,122,123,123,113,122,128,0,140,123,132,121,131],
[114,91,112,134,116,130,108,110,0,117,125,117,114],
[133,104,125,129,124,128,115,127,133,0,136,123,117],
[125,116,128,130,129,135,116,118,125,114,0,123,116],
[125,115,122,133,124,127,118,129,133,127,127,0,120],
[113,117,110,128,127,135,112,119,136,133,134,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 177, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,106,103,116,87,140,102,128,96,99,124,133],
[112,0,84,127,127,87,103,114,111,106,100,103,91],
[144,166,0,146,147,116,149,132,139,131,106,137,135],
[147,123,104,0,128,102,124,113,122,104,113,124,97],
[134,123,103,122,0,116,140,120,111,108,114,88,95],
[163,163,134,148,134,0,150,122,145,140,143,129,132],
[110,147,101,126,110,100,0,86,113,100,109,119,100],
[148,136,118,137,130,128,164,0,130,109,111,121,111],
[122,139,111,128,139,105,137,120,0,100,121,116,101],
[154,144,119,146,142,110,150,141,150,0,136,135,140],
[151,150,144,137,136,107,141,139,129,114,0,130,124],
[126,147,113,126,162,121,131,129,134,115,120,0,107],
[117,159,115,153,155,118,150,139,149,110,126,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 178, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,129,130,130,140,122,133,132,123,132,141,135],
[113,0,119,111,127,118,121,110,130,120,124,122,117],
[121,131,0,111,119,125,119,110,129,111,105,133,124],
[120,139,139,0,121,143,119,128,149,132,127,143,134],
[120,123,131,129,0,121,123,132,132,123,126,143,123],
[110,132,125,107,129,0,122,125,119,115,126,124,125],
[128,129,131,131,127,128,0,122,132,116,127,134,126],
[117,140,140,122,118,125,128,0,136,135,133,143,134],
[118,120,121,101,118,131,118,114,0,111,114,128,123],
[127,130,139,118,127,135,134,115,139,0,129,131,134],
[118,126,145,123,124,124,123,117,136,121,0,123,129],
[109,128,117,107,107,126,116,107,122,119,127,0,120],
[115,133,126,116,127,125,124,116,127,116,121,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 179, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,111,117,110,100,129,119,130,120,132,114,129],
[132,0,124,119,106,98,120,122,120,117,126,109,127],
[139,126,0,116,110,110,129,114,111,105,133,108,118],
[133,131,134,0,128,124,129,126,122,123,142,118,124],
[140,144,140,122,0,114,134,136,141,129,150,123,132],
[150,152,140,126,136,0,145,121,126,148,157,133,150],
[121,130,121,121,116,105,0,118,114,109,124,118,118],
[131,128,136,124,114,129,132,0,116,123,132,116,128],
[120,130,139,128,109,124,136,134,0,136,142,122,133],
[130,133,145,127,121,102,141,127,114,0,135,117,134],
[118,124,117,108,100,93,126,118,108,115,0,116,112],
[136,141,142,132,127,117,132,134,128,133,134,0,120],
[121,123,132,126,118,100,132,122,117,116,138,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 180, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,122,132,119,119,125,128,119,131,127,124,141],
[126,0,129,135,130,114,131,129,124,133,140,133,130],
[128,121,0,126,113,118,134,121,114,122,121,104,112],
[118,115,124,0,121,114,124,112,114,126,121,110,125],
[131,120,137,129,0,119,142,130,109,129,132,130,128],
[131,136,132,136,131,0,136,121,126,130,136,130,129],
[125,119,116,126,108,114,0,119,112,126,127,124,128],
[122,121,129,138,120,129,131,0,115,129,127,135,129],
[131,126,136,136,141,124,138,135,0,139,135,134,133],
[119,117,128,124,121,120,124,121,111,0,131,121,117],
[123,110,129,129,118,114,123,123,115,119,0,118,123],
[126,117,146,140,120,120,126,115,116,129,132,0,120],
[109,120,138,125,122,121,122,121,117,133,127,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 181, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,133,119,134,128,124,125,116,130,125,120,126],
[117,0,128,132,137,137,130,127,120,137,140,128,135],
[117,122,0,134,130,124,132,126,125,128,130,122,124],
[131,118,116,0,121,127,133,124,125,133,129,119,127],
[116,113,120,129,0,124,123,121,116,128,126,124,121],
[122,113,126,123,126,0,128,124,121,117,125,120,120],
[126,120,118,117,127,122,0,113,116,126,135,122,125],
[125,123,124,126,129,126,137,0,124,127,123,130,132],
[134,130,125,125,134,129,134,126,0,132,141,118,129],
[120,113,122,117,122,133,124,123,118,0,128,107,129],
[125,110,120,121,124,125,115,127,109,122,0,105,124],
[130,122,128,131,126,130,128,120,132,143,145,0,135],
[124,115,126,123,129,130,125,118,121,121,126,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 182, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,134,125,109,111,126,118,111,141,131,138,115],
[138,0,134,153,129,126,122,146,124,158,138,153,131],
[116,116,0,143,113,135,124,128,104,150,133,132,104],
[125,97,107,0,109,110,93,104,98,122,94,133,102],
[141,121,137,141,0,125,146,134,143,157,125,156,136],
[139,124,115,140,125,0,138,150,142,157,130,140,135],
[124,128,126,157,104,112,0,109,96,125,121,124,128],
[132,104,122,146,116,100,141,0,120,153,132,113,97],
[139,126,146,152,107,108,154,130,0,154,122,133,127],
[109,92,100,128,93,93,125,97,96,0,97,105,96],
[119,112,117,156,125,120,129,118,128,153,0,149,124],
[112,97,118,117,94,110,126,137,117,145,101,0,113],
[135,119,146,148,114,115,122,153,123,154,126,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 183, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,139,110,139,124,124,115,133,130,137,127,129],
[133,0,147,124,133,123,130,119,136,146,131,131,133],
[111,103,0,122,126,107,114,117,128,132,124,118,123],
[140,126,128,0,132,124,126,124,138,136,136,134,142],
[111,117,124,118,0,113,125,127,127,123,132,127,114],
[126,127,143,126,137,0,136,127,128,122,141,130,129],
[126,120,136,124,125,114,0,125,135,137,126,129,129],
[135,131,133,126,123,123,125,0,134,137,137,133,136],
[117,114,122,112,123,122,115,116,0,130,122,120,122],
[120,104,118,114,127,128,113,113,120,0,125,129,118],
[113,119,126,114,118,109,124,113,128,125,0,120,117],
[123,119,132,116,123,120,121,117,130,121,130,0,134],
[121,117,127,108,136,121,121,114,128,132,133,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 184, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,122,110,102,104,91,80,116,83,114,107,114],
[147,0,147,134,97,129,110,98,118,127,129,129,105],
[128,103,0,108,94,117,94,84,111,116,104,118,94],
[140,116,142,0,111,116,104,112,127,138,134,123,128],
[148,153,156,139,0,144,132,121,157,161,151,139,129],
[146,121,133,134,106,0,106,114,119,131,136,119,139],
[159,140,156,146,118,144,0,147,157,138,132,143,118],
[170,152,166,138,129,136,103,0,149,131,141,131,115],
[134,132,139,123,93,131,93,101,0,108,123,118,113],
[167,123,134,112,89,119,112,119,142,0,142,154,123],
[136,121,146,116,99,114,118,109,127,108,0,117,133],
[143,121,132,127,111,131,107,119,132,96,133,0,107],
[136,145,156,122,121,111,132,135,137,127,117,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 185, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,138,124,125,117,131,128,122,127,123,133,131],
[130,0,134,126,124,133,138,127,125,118,128,140,128],
[112,116,0,111,112,120,125,120,119,114,126,129,121],
[126,124,139,0,119,129,140,120,126,118,124,134,126],
[125,126,138,131,0,125,129,133,130,128,125,126,132],
[133,117,130,121,125,0,123,125,122,116,126,131,136],
[119,112,125,110,121,127,0,122,121,117,124,124,133],
[122,123,130,130,117,125,128,0,123,115,114,129,132],
[128,125,131,124,120,128,129,127,0,125,118,131,131],
[123,132,136,132,122,134,133,135,125,0,126,132,131],
[127,122,124,126,125,124,126,136,132,124,0,128,130],
[117,110,121,116,124,119,126,121,119,118,122,0,123],
[119,122,129,124,118,114,117,118,119,119,120,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 186, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,139,124,115,114,117,117,126,148,131,136,123],
[129,0,143,144,118,120,125,134,125,137,133,146,135],
[111,107,0,125,128,107,127,127,131,146,124,137,126],
[126,106,125,0,121,113,114,115,129,138,124,136,123],
[135,132,122,129,0,121,124,132,122,153,130,143,131],
[136,130,143,137,129,0,130,139,124,153,131,138,134],
[133,125,123,136,126,120,0,121,125,152,128,130,128],
[133,116,123,135,118,111,129,0,129,152,142,129,124],
[124,125,119,121,128,126,125,121,0,148,132,130,140],
[102,113,104,112,97,97,98,98,102,0,107,114,101],
[119,117,126,126,120,119,122,108,118,143,0,133,119],
[114,104,113,114,107,112,120,121,120,136,117,0,120],
[127,115,124,127,119,116,122,126,110,149,131,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 187, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,128,128,119,138,131,123,144,153,139,140,130],
[120,0,114,129,105,150,119,116,117,138,135,135,108],
[122,136,0,128,123,137,114,121,112,140,142,130,122],
[122,121,122,0,125,155,130,119,114,161,132,149,123],
[131,145,127,125,0,143,133,139,135,163,127,131,142],
[112,100,113,95,107,0,113,117,108,120,128,119,105],
[119,131,136,120,117,137,0,127,134,130,138,138,120],
[127,134,129,131,111,133,123,0,123,139,143,137,124],
[106,133,138,136,115,142,116,127,0,154,128,151,119],
[97,112,110,89,87,130,120,111,96,0,113,111,111],
[111,115,108,118,123,122,112,107,122,137,0,128,112],
[110,115,120,101,119,131,112,113,99,139,122,0,109],
[120,142,128,127,108,145,130,126,131,139,138,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 188, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,128,131,122,120,105,126,123,138,118,139,135],
[121,0,125,120,108,111,113,121,112,118,111,131,120],
[122,125,0,127,113,115,125,127,130,118,116,138,126],
[119,130,123,0,115,113,114,113,126,124,115,127,125],
[128,142,137,135,0,128,128,130,124,121,127,135,139],
[130,139,135,137,122,0,116,134,130,124,124,143,123],
[145,137,125,136,122,134,0,133,142,128,139,142,144],
[124,129,123,137,120,116,117,0,117,125,118,134,131],
[127,138,120,124,126,120,108,133,0,130,107,139,137],
[112,132,132,126,129,126,122,125,120,0,108,134,132],
[132,139,134,135,123,126,111,132,143,142,0,146,137],
[111,119,112,123,115,107,108,116,111,116,104,0,121],
[115,130,124,125,111,127,106,119,113,118,113,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 189, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,110,113,114,118,113,138,103,119,124,106,119],
[130,0,125,124,129,127,136,128,117,150,130,121,120],
[140,125,0,128,108,138,121,139,117,138,116,112,119],
[137,126,122,0,113,127,110,127,123,140,126,120,117],
[136,121,142,137,0,114,130,142,112,148,135,112,123],
[132,123,112,123,136,0,128,134,130,147,130,131,123],
[137,114,129,140,120,122,0,150,124,146,128,127,137],
[112,122,111,123,108,116,100,0,107,160,130,95,117],
[147,133,133,127,138,120,126,143,0,155,130,109,136],
[131,100,112,110,102,103,104,90,95,0,97,81,96],
[126,120,134,124,115,120,122,120,120,153,0,104,109],
[144,129,138,130,138,119,123,155,141,169,146,0,138],
[131,130,131,133,127,127,113,133,114,154,141,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 190, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,130,113,118,131,122,121,120,130,119,131,115],
[124,0,123,103,108,119,133,112,115,123,123,122,113],
[120,127,0,115,110,119,123,109,120,126,118,133,109],
[137,147,135,0,129,138,129,131,122,137,128,143,122],
[132,142,140,121,0,141,140,118,131,135,125,144,126],
[119,131,131,112,109,0,132,115,123,117,106,121,101],
[128,117,127,121,110,118,0,117,114,122,122,136,110],
[129,138,141,119,132,135,133,0,145,131,128,133,128],
[130,135,130,128,119,127,136,105,0,130,118,126,115],
[120,127,124,113,115,133,128,119,120,0,130,140,116],
[131,127,132,122,125,144,128,122,132,120,0,145,127],
[119,128,117,107,106,129,114,117,124,110,105,0,102],
[135,137,141,128,124,149,140,122,135,134,123,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 191, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,135,134,136,139,129,123,128,126,118,117,124],
[120,0,122,128,127,123,129,117,113,124,110,117,122],
[115,128,0,133,131,133,126,124,121,123,113,126,124],
[116,122,117,0,115,127,112,131,124,133,113,119,119],
[114,123,119,135,0,123,121,133,119,127,112,117,116],
[111,127,117,123,127,0,117,124,123,123,114,115,123],
[121,121,124,138,129,133,0,129,123,128,121,119,120],
[127,133,126,119,117,126,121,0,107,124,115,108,113],
[122,137,129,126,131,127,127,143,0,135,125,123,122],
[124,126,127,117,123,127,122,126,115,0,112,122,123],
[132,140,137,137,138,136,129,135,125,138,0,125,126],
[133,133,124,131,133,135,131,142,127,128,125,0,121],
[126,128,126,131,134,127,130,137,128,127,124,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 192, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,130,146,116,127,131,145,121,125,130,133,126],
[107,0,113,124,112,111,114,121,107,99,115,104,114],
[120,137,0,126,125,128,116,120,133,121,144,132,126],
[104,126,124,0,129,115,118,113,114,105,131,115,112],
[134,138,125,121,0,125,126,130,122,101,135,137,124],
[123,139,122,135,125,0,122,118,113,101,128,126,122],
[119,136,134,132,124,128,0,132,97,101,124,117,122],
[105,129,130,137,120,132,118,0,120,115,126,124,120],
[129,143,117,136,128,137,153,130,0,125,135,152,126],
[125,151,129,145,149,149,149,135,125,0,151,153,135],
[120,135,106,119,115,122,126,124,115,99,0,118,120],
[117,146,118,135,113,124,133,126,98,97,132,0,121],
[124,136,124,138,126,128,128,130,124,115,130,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 193, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,118,115,111,113,119,107,109,121,113,130,119],
[145,0,140,141,127,145,127,132,124,122,126,137,127],
[132,110,0,92,118,131,137,123,117,108,113,122,120],
[135,109,158,0,137,131,134,130,132,132,146,150,145],
[139,123,132,113,0,108,107,107,118,126,122,133,116],
[137,105,119,119,142,0,112,139,116,134,131,124,129],
[131,123,113,116,143,138,0,121,134,131,127,125,121],
[143,118,127,120,143,111,129,0,121,125,148,134,129],
[141,126,133,118,132,134,116,129,0,138,141,138,114],
[129,128,142,118,124,116,119,125,112,0,125,139,117],
[137,124,137,104,128,119,123,102,109,125,0,120,119],
[120,113,128,100,117,126,125,116,112,111,130,0,107],
[131,123,130,105,134,121,129,121,136,133,131,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 194, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,132,119,120,119,125,111,113,108,107,119,126],
[122,0,125,118,119,136,115,113,125,119,110,117,127],
[118,125,0,112,120,137,126,111,127,128,121,123,143],
[131,132,138,0,119,139,134,132,138,126,124,116,138],
[130,131,130,131,0,136,124,129,134,129,118,136,132],
[131,114,113,111,114,0,110,122,125,128,119,118,128],
[125,135,124,116,126,140,0,119,131,124,128,120,131],
[139,137,139,118,121,128,131,0,122,129,124,130,126],
[137,125,123,112,116,125,119,128,0,121,107,119,137],
[142,131,122,124,121,122,126,121,129,0,111,122,130],
[143,140,129,126,132,131,122,126,143,139,0,121,129],
[131,133,127,134,114,132,130,120,131,128,129,0,139],
[124,123,107,112,118,122,119,124,113,120,121,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 195, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,123,123,122,114,110,132,115,110,141,142,148],
[69,0,91,103,113,82,94,88,116,104,105,106,104],
[127,159,0,123,138,136,114,126,122,141,160,141,164],
[127,147,127,0,134,140,115,126,122,151,155,122,144],
[128,137,112,116,0,117,94,115,106,117,126,109,146],
[136,168,114,110,133,0,119,113,119,140,150,126,164],
[140,156,136,135,156,131,0,117,160,166,134,167,154],
[118,162,124,124,135,137,133,0,137,145,142,159,136],
[135,134,128,128,144,131,90,113,0,142,128,115,144],
[140,146,109,99,133,110,84,105,108,0,123,94,141],
[109,145,90,95,124,100,116,108,122,127,0,111,123],
[108,144,109,128,141,124,83,91,135,156,139,0,138],
[102,146,86,106,104,86,96,114,106,109,127,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 196, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,97,122,119,169,166,133,116,108,122,118,101],
[117,0,143,133,134,168,161,103,133,136,152,127,113],
[153,107,0,136,133,142,151,142,112,152,152,136,120],
[128,117,114,0,142,152,162,109,119,134,133,90,94],
[131,116,117,108,0,159,166,110,84,114,128,131,103],
[81,82,108,98,91,0,128,105,83,118,114,109,94],
[84,89,99,88,84,122,0,112,87,90,86,91,77],
[117,147,108,141,140,145,138,0,105,142,150,139,101],
[134,117,138,131,166,167,163,145,0,152,145,147,131],
[142,114,98,116,136,132,160,108,98,0,135,121,103],
[128,98,98,117,122,136,164,100,105,115,0,129,96],
[132,123,114,160,119,141,159,111,103,129,121,0,123],
[149,137,130,156,147,156,173,149,119,147,154,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 197, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,176,135,156,166,163,110,184,155,172,109,146],
[67,0,94,73,163,84,142,73,105,119,101,105,142],
[74,156,0,0,209,87,96,84,38,104,94,162,205],
[115,177,250,0,213,156,179,167,122,246,236,182,209],
[94,87,41,37,0,37,106,37,48,93,94,136,121],
[84,166,163,94,213,0,159,147,101,225,147,172,209],
[87,108,154,71,144,91,0,150,105,164,167,154,144],
[140,177,166,83,213,103,100,0,111,170,240,145,213],
[66,145,212,128,202,149,145,139,0,138,204,165,201],
[95,131,146,4,157,25,86,80,112,0,112,99,136],
[78,149,156,14,156,103,83,10,46,138,0,109,146],
[141,145,88,68,114,78,96,105,85,151,141,0,177],
[104,108,45,41,129,41,106,37,49,114,104,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 198, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,132,133,137,118,128,137,116,112,114,110,134],
[123,0,135,129,127,122,143,133,134,135,123,121,125],
[118,115,0,123,117,120,130,132,125,127,113,123,132],
[117,121,127,0,112,112,131,123,120,112,119,99,139],
[113,123,133,138,0,122,130,131,123,125,117,116,127],
[132,128,130,138,128,0,138,147,126,132,120,125,139],
[122,107,120,119,120,112,0,120,119,119,114,120,129],
[113,117,118,127,119,103,130,0,113,103,114,113,122],
[134,116,125,130,127,124,131,137,0,113,134,118,132],
[138,115,123,138,125,118,131,147,137,0,129,116,137],
[136,127,137,131,133,130,136,136,116,121,0,117,141],
[140,129,127,151,134,125,130,137,132,134,133,0,132],
[116,125,118,111,123,111,121,128,118,113,109,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 199, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,122,128,119,115,128,122,135,136,127,128,126],
[119,0,121,131,130,130,133,124,125,135,125,120,130],
[128,129,0,125,124,127,118,125,129,135,126,120,117],
[122,119,125,0,133,128,117,122,123,134,127,122,117],
[131,120,126,117,0,123,130,116,123,137,129,126,110],
[135,120,123,122,127,0,127,117,121,127,133,126,119],
[122,117,132,133,120,123,0,117,130,127,131,126,119],
[128,126,125,128,134,133,133,0,135,133,134,125,118],
[115,125,121,127,127,129,120,115,0,126,135,123,116],
[114,115,115,116,113,123,123,117,124,0,120,115,109],
[123,125,124,123,121,117,119,116,115,130,0,115,124],
[122,130,130,128,124,124,124,125,127,135,135,0,122],
[124,120,133,133,140,131,131,132,134,141,126,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([13, 250, 200, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebbrcw/mebbrcw_13_250.csv", index=False, header=False)

import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg

rep = 1
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,122,123,140,121,125,127,120,114,114,111,121,118,135,121],
[128,0,126,139,126,135,124,121,111,121,122,125,132,125,120],
[127,124,0,131,118,146,125,124,107,133,129,123,133,133,132],
[110,111,119,0,117,120,115,119,106,112,118,117,119,115,118],
[129,124,132,133,0,142,126,127,130,127,126,123,130,133,122],
[125,115,104,130,108,0,108,123,106,114,106,121,131,109,120],
[123,126,125,135,124,142,0,116,107,138,113,116,126,116,115],
[130,129,126,131,123,127,134,0,106,120,125,120,129,118,115],
[136,139,143,144,120,144,143,144,0,137,146,134,145,140,138],
[136,129,117,138,123,136,112,130,113,0,125,126,132,126,122],
[139,128,121,132,124,144,137,125,104,125,0,119,139,137,134],
[129,125,127,133,127,129,134,130,116,124,131,0,135,124,128],
[132,118,117,131,120,119,124,121,105,118,111,115,0,129,113],
[115,125,117,135,117,141,134,132,110,124,113,126,121,0,114],
[129,130,118,132,128,130,135,135,112,128,116,122,137,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 1, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,174,97,114,66,61,160,150,127,109,95,149,133,101],
[62,0,130,75,53,64,50,113,60,22,81,51,87,83,80],
[76,120,0,89,88,68,69,139,107,83,65,57,94,82,66],
[153,175,161,0,134,100,107,161,136,142,108,123,138,156,124],
[136,197,162,116,0,136,141,199,116,134,162,105,162,158,94],
[184,186,182,150,114,0,114,180,138,148,112,134,159,146,133],
[189,200,181,143,109,136,0,171,135,129,103,134,137,143,112],
[90,137,111,89,51,70,79,0,113,56,97,30,100,100,67],
[100,190,143,114,134,112,115,137,0,103,143,98,114,158,83],
[123,228,167,108,116,102,121,194,147,0,135,114,130,169,89],
[141,169,185,142,88,138,147,153,107,115,0,124,172,147,116],
[155,199,193,127,145,116,116,220,152,136,126,0,144,126,130],
[101,163,156,112,88,91,113,150,136,120,78,106,0,127,53],
[117,167,168,94,92,104,107,150,92,81,103,124,123,0,83],
[149,170,184,126,156,117,138,183,167,161,134,120,197,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 2, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,135,126,131,133,108,118,144,154,107,137,138,110,135],
[142,0,133,163,122,126,128,132,154,150,111,130,135,127,121],
[115,117,0,159,135,132,131,134,133,139,133,147,131,104,125],
[124,87,91,0,122,119,94,128,121,140,97,123,130,111,130],
[119,128,115,128,0,99,82,119,154,137,115,130,114,124,132],
[117,124,118,131,151,0,130,143,120,133,135,162,116,123,106],
[142,122,119,156,168,120,0,152,160,157,123,165,144,131,137],
[132,118,116,122,131,107,98,0,137,136,116,155,117,113,141],
[106,96,117,129,96,130,90,113,0,133,110,124,129,101,121],
[96,100,111,110,113,117,93,114,117,0,102,118,114,74,107],
[143,139,117,153,135,115,127,134,140,148,0,159,132,108,138],
[113,120,103,127,120,88,85,95,126,132,91,0,95,108,111],
[112,115,119,120,136,134,106,133,121,136,118,155,0,99,116],
[140,123,146,139,126,127,119,137,149,176,142,142,151,0,131],
[115,129,125,120,118,144,113,109,129,143,112,139,134,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 3, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,124,134,142,119,129,125,141,127,127,126,131,134,121],
[125,0,135,151,158,135,131,131,139,137,140,131,142,144,124],
[126,115,0,127,134,118,106,134,120,118,115,119,127,122,117],
[116,99,123,0,122,126,113,111,129,120,120,112,127,116,112],
[108,92,116,128,0,122,116,133,125,111,123,113,119,106,101],
[131,115,132,124,128,0,121,137,134,117,122,130,134,129,127],
[121,119,144,137,134,129,0,144,133,127,134,127,144,124,129],
[125,119,116,139,117,113,106,0,122,116,125,111,127,127,118],
[109,111,130,121,125,116,117,128,0,121,110,109,117,115,98],
[123,113,132,130,139,133,123,134,129,0,129,131,131,133,129],
[123,110,135,130,127,128,116,125,140,121,0,124,137,136,107],
[124,119,131,138,137,120,123,139,141,119,126,0,139,138,135],
[119,108,123,123,131,116,106,123,133,119,113,111,0,115,110],
[116,106,128,134,144,121,126,123,135,117,114,112,135,0,113],
[129,126,133,138,149,123,121,132,152,121,143,115,140,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 4, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,149,124,143,133,119,131,132,133,127,117,118,135,133],
[111,0,134,106,139,114,123,126,99,97,112,110,113,134,119],
[101,116,0,105,129,117,101,96,107,101,94,102,109,113,103],
[126,144,145,0,138,136,136,122,131,125,122,118,133,143,147],
[107,111,121,112,0,125,122,117,111,114,89,107,111,127,112],
[117,136,133,114,125,0,114,107,111,115,112,113,120,124,128],
[131,127,149,114,128,136,0,109,134,124,127,125,125,125,133],
[119,124,154,128,133,143,141,0,136,132,126,119,123,139,122],
[118,151,143,119,139,139,116,114,0,115,105,110,134,141,135],
[117,153,149,125,136,135,126,118,135,0,120,136,128,141,125],
[123,138,156,128,161,138,123,124,145,130,0,133,124,148,128],
[133,140,148,132,143,137,125,131,140,114,117,0,121,132,150],
[132,137,141,117,139,130,125,127,116,122,126,129,0,143,134],
[115,116,137,107,123,126,125,111,109,109,102,118,107,0,115],
[117,131,147,103,138,122,117,128,115,125,122,100,116,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 5, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,148,120,169,131,138,155,151,151,124,126,165,174,116],
[86,0,81,95,144,149,101,144,112,150,103,108,122,116,111],
[102,169,0,98,154,130,136,160,133,146,141,158,113,158,119],
[130,155,152,0,177,127,144,170,151,163,123,162,141,162,123],
[81,106,96,73,0,124,98,102,132,136,121,98,126,121,95],
[119,101,120,123,126,0,123,102,82,129,113,106,90,117,96],
[112,149,114,106,152,127,0,136,121,120,98,122,134,123,112],
[95,106,90,80,148,148,114,0,97,103,99,82,131,89,101],
[99,138,117,99,118,168,129,153,0,144,113,125,123,138,90],
[99,100,104,87,114,121,130,147,106,0,94,100,127,103,104],
[126,147,109,127,129,137,152,151,137,156,0,118,108,156,129],
[124,142,92,88,152,144,128,168,125,150,132,0,107,128,123],
[85,128,137,109,124,160,116,119,127,123,142,143,0,106,124],
[76,134,92,88,129,133,127,161,112,147,94,122,144,0,76],
[134,139,131,127,155,154,138,149,160,146,121,127,126,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 6, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,170,140,143,138,147,138,145,114,136,147,130,142,160],
[84,0,109,97,105,99,117,110,111,85,109,140,111,104,142],
[80,141,0,100,136,94,118,111,102,81,109,117,89,118,141],
[110,153,150,0,171,94,140,109,129,97,106,134,126,134,154],
[107,145,114,79,0,94,91,120,100,96,87,144,93,136,155],
[112,151,156,156,156,0,159,167,149,141,127,152,157,138,185],
[103,133,132,110,159,91,0,125,104,110,90,154,96,123,154],
[112,140,139,141,130,83,125,0,123,135,94,113,107,154,167],
[105,139,148,121,150,101,146,127,0,144,101,171,140,121,183],
[136,165,169,153,154,109,140,115,106,0,108,164,131,155,145],
[114,141,141,144,163,123,160,156,149,142,0,173,128,153,165],
[103,110,133,116,106,98,96,137,79,86,77,0,117,121,128],
[120,139,161,124,157,93,154,143,110,119,122,133,0,141,166],
[108,146,132,116,114,112,127,96,129,95,97,129,109,0,157],
[90,108,109,96,95,65,96,83,67,105,85,122,84,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 7, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,120,132,123,107,117,120,136,129,132,134,125,127,136],
[133,0,126,128,130,128,129,129,119,130,128,137,155,123,140],
[130,124,0,119,116,115,112,111,128,121,105,122,123,112,107],
[118,122,131,0,130,148,124,123,136,120,121,126,138,132,119],
[127,120,134,120,0,131,129,134,141,118,123,125,139,134,123],
[143,122,135,102,119,0,128,130,142,119,141,121,151,124,124],
[133,121,138,126,121,122,0,106,137,113,130,124,114,139,134],
[130,121,139,127,116,120,144,0,122,111,126,134,155,123,132],
[114,131,122,114,109,108,113,128,0,128,119,127,133,129,135],
[121,120,129,130,132,131,137,139,122,0,125,128,145,137,122],
[118,122,145,129,127,109,120,124,131,125,0,140,140,127,138],
[116,113,128,124,125,129,126,116,123,122,110,0,120,121,137],
[125,95,127,112,111,99,136,95,117,105,110,130,0,118,117],
[123,127,138,118,116,126,111,127,121,113,123,129,132,0,129],
[114,110,143,131,127,126,116,118,115,128,112,113,133,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 8, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,142,134,129,121,116,125,112,131,127,116,127,127,111],
[122,0,138,136,115,120,113,125,115,124,128,113,121,117,116],
[108,112,0,127,120,114,103,114,120,118,122,118,121,121,113],
[116,114,123,0,119,118,112,122,105,124,116,105,108,119,104],
[121,135,130,131,0,112,116,118,109,131,132,110,122,125,104],
[129,130,136,132,138,0,117,124,122,129,131,114,130,130,122],
[134,137,147,138,134,133,0,143,127,142,135,118,128,141,125],
[125,125,136,128,132,126,107,0,124,119,127,115,133,131,119],
[138,135,130,145,141,128,123,126,0,139,133,121,133,135,132],
[119,126,132,126,119,121,108,131,111,0,130,120,120,129,123],
[123,122,128,134,118,119,115,123,117,120,0,113,120,126,120],
[134,137,132,145,140,136,132,135,129,130,137,0,123,133,131],
[123,129,129,142,128,120,122,117,117,130,130,127,0,134,121],
[123,133,129,131,125,120,109,119,115,121,124,117,116,0,107],
[139,134,137,146,146,128,125,131,118,127,130,119,129,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 9, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,223,118,120,120,225,118,122,223,120,118,223,120,221],
[130,0,120,15,120,118,120,223,118,223,118,118,210,118,223],
[27,130,0,0,118,13,130,105,15,248,38,38,105,13,143],
[132,235,250,0,147,145,145,223,145,248,145,143,212,118,248],
[130,130,132,103,0,105,132,103,107,143,143,130,107,118,248],
[130,132,237,105,145,0,237,105,132,248,143,27,210,118,248],
[25,130,120,105,118,13,0,105,13,120,118,38,105,118,143],
[132,27,145,27,147,145,145,0,42,143,145,40,107,120,248],
[128,132,235,105,143,118,237,208,0,248,246,25,208,221,246],
[27,27,2,2,107,2,130,107,2,0,27,27,107,15,143],
[130,132,212,105,107,107,132,105,4,223,0,27,212,223,248],
[132,132,212,107,120,223,212,210,225,223,223,0,212,223,248],
[27,40,145,38,143,40,145,143,42,143,38,38,0,15,246],
[130,132,237,132,132,132,132,130,29,235,27,27,235,0,248],
[29,27,107,2,2,2,107,2,4,107,2,2,4,2,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 10, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,129,134,138,122,119,135,116,128,108,137,106,146,113],
[120,0,133,156,122,120,125,152,130,105,114,132,128,135,133],
[121,117,0,130,130,117,120,121,110,121,115,135,110,120,132],
[116,94,120,0,109,101,109,121,112,102,102,126,104,127,119],
[112,128,120,141,0,109,112,133,119,106,108,140,112,131,128],
[128,130,133,149,141,0,124,135,150,135,135,131,111,148,136],
[131,125,130,141,138,126,0,131,122,127,133,146,140,134,133],
[115,98,129,129,117,115,119,0,120,123,118,147,118,119,134],
[134,120,140,138,131,100,128,130,0,100,133,141,114,126,114],
[122,145,129,148,144,115,123,127,150,0,136,136,106,139,126],
[142,136,135,148,142,115,117,132,117,114,0,143,134,146,138],
[113,118,115,124,110,119,104,103,109,114,107,0,98,116,111],
[144,122,140,146,138,139,110,132,136,144,116,152,0,149,120],
[104,115,130,123,119,102,116,131,124,111,104,134,101,0,120],
[137,117,118,131,122,114,117,116,136,124,112,139,130,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 11, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,123,121,115,120,115,130,119,111,122,130,116,120,112],
[151,0,135,135,142,123,134,148,127,133,137,139,131,139,136],
[127,115,0,119,126,123,122,135,131,116,134,136,130,133,126],
[129,115,131,0,125,128,125,138,116,122,126,136,132,127,117],
[135,108,124,125,0,128,121,135,116,123,128,138,125,124,122],
[130,127,127,122,122,0,124,136,123,126,125,126,116,132,122],
[135,116,128,125,129,126,0,135,129,126,128,133,129,124,127],
[120,102,115,112,115,114,115,0,112,111,119,122,113,119,115],
[131,123,119,134,134,127,121,138,0,120,128,140,123,138,132],
[139,117,134,128,127,124,124,139,130,0,126,139,128,129,123],
[128,113,116,124,122,125,122,131,122,124,0,127,123,133,124],
[120,111,114,114,112,124,117,128,110,111,123,0,118,130,115],
[134,119,120,118,125,134,121,137,127,122,127,132,0,138,130],
[130,111,117,123,126,118,126,131,112,121,117,120,112,0,123],
[138,114,124,133,128,128,123,135,118,127,126,135,120,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 12, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,125,100,102,137,103,87,149,81,115,91,110,91,90],
[122,0,119,120,117,127,101,132,105,104,105,126,130,103,76],
[125,131,0,138,103,140,101,126,130,121,112,123,110,86,114],
[150,130,112,0,117,115,104,113,118,130,113,130,105,93,95],
[148,133,147,133,0,130,123,108,137,136,140,131,109,129,117],
[113,123,110,135,120,0,102,124,96,94,102,113,76,97,101],
[147,149,149,146,127,148,0,134,141,100,129,106,126,133,125],
[163,118,124,137,142,126,116,0,120,119,114,107,109,107,105],
[101,145,120,132,113,154,109,130,0,120,116,126,124,91,101],
[169,146,129,120,114,156,150,131,130,0,132,124,126,110,103],
[135,145,138,137,110,148,121,136,134,118,0,133,96,122,115],
[159,124,127,120,119,137,144,143,124,126,117,0,129,93,142],
[140,120,140,145,141,174,124,141,126,124,154,121,0,124,116],
[159,147,164,157,121,153,117,143,159,140,128,157,126,0,150],
[160,174,136,155,133,149,125,145,149,147,135,108,134,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 13, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,101,111,122,105,111,98,107,103,96,120,101,117,140],
[122,0,117,128,122,109,95,122,114,126,105,132,117,136,139],
[149,133,0,140,134,118,131,116,138,151,107,145,128,135,144],
[139,122,110,0,150,121,108,115,123,125,116,142,123,137,146],
[128,128,116,100,0,109,99,98,112,106,108,129,113,132,127],
[145,141,132,129,141,0,121,131,130,127,118,148,133,133,146],
[139,155,119,142,151,129,0,124,130,127,119,140,134,139,153],
[152,128,134,135,152,119,126,0,128,150,132,144,150,143,155],
[143,136,112,127,138,120,120,122,0,112,116,139,126,145,138],
[147,124,99,125,144,123,123,100,138,0,124,130,127,146,158],
[154,145,143,134,142,132,131,118,134,126,0,141,123,149,159],
[130,118,105,108,121,102,110,106,111,120,109,0,112,131,141],
[149,133,122,127,137,117,116,100,124,123,127,138,0,137,148],
[133,114,115,113,118,117,111,107,105,104,101,119,113,0,133],
[110,111,106,104,123,104,97,95,112,92,91,109,102,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 14, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,119,148,140,133,104,157,155,143,146,178,184,117,134],
[89,0,116,144,129,141,91,115,134,115,133,144,145,97,97],
[131,134,0,162,119,155,99,128,156,135,149,167,156,142,121],
[102,106,88,0,95,111,111,107,92,131,121,130,135,95,96],
[110,121,131,155,0,139,99,135,155,136,147,160,156,115,96],
[117,109,95,139,111,0,74,103,91,108,117,142,115,104,73],
[146,159,151,139,151,176,0,132,156,129,129,155,150,138,107],
[93,135,122,143,115,147,118,0,139,98,132,121,142,127,145],
[95,116,94,158,95,159,94,111,0,131,129,123,134,120,75],
[107,135,115,119,114,142,121,152,119,0,109,132,130,114,109],
[104,117,101,129,103,133,121,118,121,141,0,136,180,81,108],
[72,106,83,120,90,108,95,129,127,118,114,0,110,106,86],
[66,105,94,115,94,135,100,108,116,120,70,140,0,95,107],
[133,153,108,155,135,146,112,123,130,136,169,144,155,0,119],
[116,153,129,154,154,177,143,105,175,141,142,164,143,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 15, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,123,113,125,117,124,128,120,124,124,129,127,114,134],
[127,0,124,106,115,121,114,117,112,118,107,128,124,123,131],
[127,126,0,114,125,107,120,120,109,133,121,133,130,113,131],
[137,144,136,0,134,127,135,139,117,138,141,138,142,135,153],
[125,135,125,116,0,118,122,127,131,129,117,127,128,122,129],
[133,129,143,123,132,0,139,133,123,134,140,132,143,129,137],
[126,136,130,115,128,111,0,128,112,115,120,131,126,127,141],
[122,133,130,111,123,117,122,0,116,115,124,120,127,130,135],
[130,138,141,133,119,127,138,134,0,143,134,136,135,138,146],
[126,132,117,112,121,116,135,135,107,0,127,127,127,118,126],
[126,143,129,109,133,110,130,126,116,123,0,134,131,122,131],
[121,122,117,112,123,118,119,130,114,123,116,0,129,122,129],
[123,126,120,108,122,107,124,123,115,123,119,121,0,114,123],
[136,127,137,115,128,121,123,120,112,132,128,128,136,0,136],
[116,119,119,97,121,113,109,115,104,124,119,121,127,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 16, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,109,111,120,115,109,118,140,143,115,109,111,143,99],
[131,0,106,132,128,108,122,113,125,141,127,105,113,137,106],
[141,144,0,144,139,131,144,132,143,170,140,115,138,149,138],
[139,118,106,0,124,129,125,122,140,142,125,105,128,150,119],
[130,122,111,126,0,114,115,113,121,146,111,104,119,122,118],
[135,142,119,121,136,0,144,118,127,155,134,123,126,145,134],
[141,128,106,125,135,106,0,114,133,142,128,113,125,139,119],
[132,137,118,128,137,132,136,0,126,147,125,112,118,145,116],
[110,125,107,110,129,123,117,124,0,137,120,108,104,122,106],
[107,109,80,108,104,95,108,103,113,0,105,93,100,124,108],
[135,123,110,125,139,116,122,125,130,145,0,103,124,145,116],
[141,145,135,145,146,127,137,138,142,157,147,0,123,145,118],
[139,137,112,122,131,124,125,132,146,150,126,127,0,137,121],
[107,113,101,100,128,105,111,105,128,126,105,105,113,0,95],
[151,144,112,131,132,116,131,134,144,142,134,132,129,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 17, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,113,140,121,119,107,118,122,123,119,139,124,126,120],
[127,0,111,135,107,128,116,116,116,115,118,131,123,116,121],
[137,139,0,138,114,142,113,127,124,135,138,147,131,127,137],
[110,115,112,0,105,122,102,113,125,118,113,122,111,110,122],
[129,143,136,145,0,130,112,140,131,139,124,140,132,130,137],
[131,122,108,128,120,0,116,127,117,119,121,123,131,119,116],
[143,134,137,148,138,134,0,140,131,139,123,149,142,134,135],
[132,134,123,137,110,123,110,0,118,123,119,135,136,123,124],
[128,134,126,125,119,133,119,132,0,133,126,140,126,122,128],
[127,135,115,132,111,131,111,127,117,0,117,134,132,128,124],
[131,132,112,137,126,129,127,131,124,133,0,136,136,134,135],
[111,119,103,128,110,127,101,115,110,116,114,0,120,116,119],
[126,127,119,139,118,119,108,114,124,118,114,130,0,122,117],
[124,134,123,140,120,131,116,127,128,122,116,134,128,0,131],
[130,129,113,128,113,134,115,126,122,126,115,131,133,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 18, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,124,120,123,131,125,122,112,118,123,129,146,135,129],
[116,0,111,116,116,132,130,129,105,126,121,151,122,140,118],
[126,139,0,131,119,139,136,130,113,134,138,145,139,131,137],
[130,134,119,0,122,132,126,127,116,128,133,139,130,134,135],
[127,134,131,128,0,124,144,137,120,137,140,131,144,144,128],
[119,118,111,118,126,0,136,121,116,113,117,128,132,123,134],
[125,120,114,124,106,114,0,127,120,120,124,128,117,125,120],
[128,121,120,123,113,129,123,0,117,109,124,133,140,137,129],
[138,145,137,134,130,134,130,133,0,136,122,143,148,146,136],
[132,124,116,122,113,137,130,141,114,0,128,139,129,124,134],
[127,129,112,117,110,133,126,126,128,122,0,129,112,120,125],
[121,99,105,111,119,122,122,117,107,111,121,0,123,135,118],
[104,128,111,120,106,118,133,110,102,121,138,127,0,124,113],
[115,110,119,116,106,127,125,113,104,126,130,115,126,0,121],
[121,132,113,115,122,116,130,121,114,116,125,132,137,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 19, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,111,139,122,129,126,139,144,146,142,143,127,136,123],
[119,0,102,116,122,124,110,116,121,135,130,138,116,114,120],
[139,148,0,139,136,120,134,144,140,138,141,144,131,134,133],
[111,134,111,0,117,131,112,132,122,136,131,135,125,129,129],
[128,128,114,133,0,133,118,130,113,138,129,131,135,134,119],
[121,126,130,119,117,0,117,126,129,141,130,149,139,132,125],
[124,140,116,138,132,133,0,140,135,134,132,141,129,141,128],
[111,134,106,118,120,124,110,0,122,124,122,128,130,132,124],
[106,129,110,128,137,121,115,128,0,134,128,140,122,128,120],
[104,115,112,114,112,109,116,126,116,0,125,139,110,118,99],
[108,120,109,119,121,120,118,128,122,125,0,137,116,121,121],
[107,112,106,115,119,101,109,122,110,111,113,0,122,121,104],
[123,134,119,125,115,111,121,120,128,140,134,128,0,136,123],
[114,136,116,121,116,118,109,118,122,132,129,129,114,0,130],
[127,130,117,121,131,125,122,126,130,151,129,146,127,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 20, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,126,126,122,134,139,125,122,130,130,119,128,131,126],
[125,0,128,133,128,139,128,134,129,125,127,133,142,128,137],
[124,122,0,134,129,136,118,130,131,115,133,119,128,126,124],
[124,117,116,0,120,132,131,129,129,133,136,135,130,130,130],
[128,122,121,130,0,140,121,130,126,125,130,125,131,136,127],
[116,111,114,118,110,0,118,114,121,121,131,118,115,121,131],
[111,122,132,119,129,132,0,134,126,126,128,126,127,125,126],
[125,116,120,121,120,136,116,0,123,120,129,122,134,127,121],
[128,121,119,121,124,129,124,127,0,122,135,121,133,127,128],
[120,125,135,117,125,129,124,130,128,0,138,131,129,119,130],
[120,123,117,114,120,119,122,121,115,112,0,113,124,123,116],
[131,117,131,115,125,132,124,128,129,119,137,0,139,130,125],
[122,108,122,120,119,135,123,116,117,121,126,111,0,131,121],
[119,122,124,120,114,129,125,123,123,131,127,120,119,0,119],
[124,113,126,120,123,119,124,129,122,120,134,125,129,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 21, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,120,101,100,143,114,121,123,104,122,82,142,102,133],
[146,0,122,141,117,148,139,143,157,106,140,137,143,132,140],
[130,128,0,110,128,145,102,135,144,94,142,106,127,136,145],
[149,109,140,0,127,152,134,141,134,120,138,108,166,128,151],
[150,133,122,123,0,140,141,124,139,114,139,118,158,121,144],
[107,102,105,98,110,0,111,107,116,94,121,92,134,103,137],
[136,111,148,116,109,139,0,145,128,113,116,106,146,115,159],
[129,107,115,109,126,143,105,0,101,104,111,76,131,113,143],
[127,93,106,116,111,134,122,149,0,110,144,105,135,123,137],
[146,144,156,130,136,156,137,146,140,0,141,115,150,146,153],
[128,110,108,112,111,129,134,139,106,109,0,111,142,99,149],
[168,113,144,142,132,158,144,174,145,135,139,0,165,141,177],
[108,107,123,84,92,116,104,119,115,100,108,85,0,108,109],
[148,118,114,122,129,147,135,137,127,104,151,109,142,0,168],
[117,110,105,99,106,113,91,107,113,97,101,73,141,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 22, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,128,143,134,114,121,129,124,126,132,120,132,130,131],
[125,0,114,138,132,123,125,125,127,121,129,120,136,120,134],
[122,136,0,137,138,125,122,130,123,128,137,122,132,135,125],
[107,112,113,0,116,99,117,113,111,111,123,110,122,110,119],
[116,118,112,134,0,121,115,132,117,111,118,119,126,114,133],
[136,127,125,151,129,0,130,137,129,131,142,133,140,126,130],
[129,125,128,133,135,120,0,125,122,116,131,131,123,120,129],
[121,125,120,137,118,113,125,0,123,115,126,122,120,135,129],
[126,123,127,139,133,121,128,127,0,117,134,126,128,121,125],
[124,129,122,139,139,119,134,135,133,0,144,131,137,134,141],
[118,121,113,127,132,108,119,124,116,106,0,121,118,120,122],
[130,130,128,140,131,117,119,128,124,119,129,0,122,124,133],
[118,114,118,128,124,110,127,130,122,113,132,128,0,118,128],
[120,130,115,140,136,124,130,115,129,116,130,126,132,0,130],
[119,116,125,131,117,120,121,121,125,109,128,117,122,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 23, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,126,118,131,102,97,112,125,137,139,135,122,150,104],
[99,0,112,99,116,86,101,121,117,125,106,95,83,116,109],
[124,138,0,115,129,119,134,154,149,149,137,113,142,148,110],
[132,151,135,0,137,128,152,121,152,178,137,147,134,147,107],
[119,134,121,113,0,115,140,152,144,152,133,134,124,138,137],
[148,164,131,122,135,0,117,139,154,158,125,107,130,151,104],
[153,149,116,98,110,133,0,130,150,142,140,152,132,150,107],
[138,129,96,129,98,111,120,0,145,134,132,142,128,127,93],
[125,133,101,98,106,96,100,105,0,131,112,113,111,114,87],
[113,125,101,72,98,92,108,116,119,0,90,104,101,110,98],
[111,144,113,113,117,125,110,118,138,160,0,115,142,136,95],
[115,155,137,103,116,143,98,108,137,146,135,0,108,133,110],
[128,167,108,116,126,120,118,122,139,149,108,142,0,123,129],
[100,134,102,103,112,99,100,123,136,140,114,117,127,0,91],
[146,141,140,143,113,146,143,157,163,152,155,140,121,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 24, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,81,145,109,117,145,107,110,138,95,108,162,89,128],
[136,0,114,109,80,131,136,134,109,145,92,171,180,121,106],
[169,136,0,154,144,187,166,152,136,124,121,136,174,146,155],
[105,141,96,0,88,160,100,112,93,124,98,141,174,110,130],
[141,170,106,162,0,181,113,143,104,140,132,156,204,116,142],
[133,119,63,90,69,0,119,75,60,165,94,104,172,76,112],
[105,114,84,150,137,131,0,127,115,122,102,116,165,139,120],
[143,116,98,138,107,175,123,0,75,113,143,123,195,137,127],
[140,141,114,157,146,190,135,175,0,169,115,181,209,111,123],
[112,105,126,126,110,85,128,137,81,0,79,96,165,104,101],
[155,158,129,152,118,156,148,107,135,171,0,131,178,128,104],
[142,79,114,109,94,146,134,127,69,154,119,0,198,105,126],
[88,70,76,76,46,78,85,55,41,85,72,52,0,59,62],
[161,129,104,140,134,174,111,113,139,146,122,145,191,0,99],
[122,144,95,120,108,138,130,123,127,149,146,124,188,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 25, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,128,143,134,128,128,129,128,123,141,123,144,130,150],
[122,0,132,130,119,117,121,134,122,136,131,115,124,121,130],
[122,118,0,132,113,129,104,119,123,129,145,114,130,119,125],
[107,120,118,0,120,123,117,129,122,131,133,114,129,120,134],
[116,131,137,130,0,147,132,125,122,138,133,126,136,111,148],
[122,133,121,127,103,0,111,123,124,124,129,117,124,124,139],
[122,129,146,133,118,139,0,130,128,140,137,127,135,127,133],
[121,116,131,121,125,127,120,0,117,122,113,120,114,115,133],
[122,128,127,128,128,126,122,133,0,131,143,128,137,115,126],
[127,114,121,119,112,126,110,128,119,0,126,112,114,118,132],
[109,119,105,117,117,121,113,137,107,124,0,109,124,106,117],
[127,135,136,136,124,133,123,130,122,138,141,0,135,130,139],
[106,126,120,121,114,126,115,136,113,136,126,115,0,110,117],
[120,129,131,130,139,126,123,135,135,132,144,120,140,0,140],
[100,120,125,116,102,111,117,117,124,118,133,111,133,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 26, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,114,125,119,121,110,112,110,134,106,124,112,104,118],
[162,0,123,140,116,135,142,133,144,152,141,166,144,127,125],
[136,127,0,145,130,134,135,110,147,125,132,140,126,137,135],
[125,110,105,0,111,108,120,124,117,138,117,125,128,120,119],
[131,134,120,139,0,121,136,122,120,135,126,148,121,115,114],
[129,115,116,142,129,0,122,122,125,138,123,122,125,113,132],
[140,108,115,130,114,128,0,121,130,142,126,134,124,113,122],
[138,117,140,126,128,128,129,0,131,134,133,139,118,126,109],
[140,106,103,133,130,125,120,119,0,138,116,119,131,114,132],
[116,98,125,112,115,112,108,116,112,0,118,118,127,105,100],
[144,109,118,133,124,127,124,117,134,132,0,130,120,121,140],
[126,84,110,125,102,128,116,111,131,132,120,0,113,106,115],
[138,106,124,122,129,125,126,132,119,123,130,137,0,136,127],
[146,123,113,130,135,137,137,124,136,145,129,144,114,0,131],
[132,125,115,131,136,118,128,141,118,150,110,135,123,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 27, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,116,126,127,130,129,137,112,134,120,132,129,116,120],
[131,0,130,119,132,145,139,139,115,136,128,142,143,128,133],
[134,120,0,116,134,122,134,136,115,136,119,136,128,128,134],
[124,131,134,0,148,142,136,141,132,139,115,131,141,133,121],
[123,118,116,102,0,122,125,126,119,125,114,120,125,118,125],
[120,105,128,108,128,0,125,125,110,120,108,120,126,112,112],
[121,111,116,114,125,125,0,126,108,123,113,120,121,112,123],
[113,111,114,109,124,125,124,0,115,125,104,120,131,118,109],
[138,135,135,118,131,140,142,135,0,140,122,132,136,128,123],
[116,114,114,111,125,130,127,125,110,0,108,120,138,116,123],
[130,122,131,135,136,142,137,146,128,142,0,138,136,138,137],
[118,108,114,119,130,130,130,130,118,130,112,0,138,114,120],
[121,107,122,109,125,124,129,119,114,112,114,112,0,120,114],
[134,122,122,117,132,138,138,132,122,134,112,136,130,0,129],
[130,117,116,129,125,138,127,141,127,127,113,130,136,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 28, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,126,134,123,127,139,117,121,92,117,113,124,113,139],
[147,0,132,134,148,127,161,131,135,117,134,133,115,120,147],
[124,118,0,136,152,115,118,128,101,100,138,132,113,110,133],
[116,116,114,0,142,115,119,114,104,111,125,120,135,96,124],
[127,102,98,108,0,114,110,106,101,85,113,115,115,101,116],
[123,123,135,135,136,0,118,119,133,103,120,119,119,101,134],
[111,89,132,131,140,132,0,128,100,93,135,119,106,107,119],
[133,119,122,136,144,131,122,0,104,129,110,132,120,127,132],
[129,115,149,146,149,117,150,146,0,126,134,119,137,125,132],
[158,133,150,139,165,147,157,121,124,0,147,150,138,142,149],
[133,116,112,125,137,130,115,140,116,103,0,130,124,110,119],
[137,117,118,130,135,131,131,118,131,100,120,0,123,110,117],
[126,135,137,115,135,131,144,130,113,112,126,127,0,123,147],
[137,130,140,154,149,149,143,123,125,108,140,140,127,0,144],
[111,103,117,126,134,116,131,118,118,101,131,133,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 29, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,114,115,114,95,126,125,116,110,109,104,122,112,108],
[134,0,108,116,122,118,146,130,123,105,119,128,106,140,106],
[136,142,0,107,126,122,140,128,111,126,129,124,124,123,129],
[135,134,143,0,137,124,144,119,144,121,129,132,134,131,128],
[136,128,124,113,0,119,142,128,132,114,117,120,107,126,113],
[155,132,128,126,131,0,131,129,120,129,119,125,139,122,122],
[124,104,110,106,108,119,0,126,117,114,128,117,108,116,96],
[125,120,122,131,122,121,124,0,125,110,122,124,118,123,125],
[134,127,139,106,118,130,133,125,0,120,122,108,106,127,110],
[140,145,124,129,136,121,136,140,130,0,139,125,124,131,114],
[141,131,121,121,133,131,122,128,128,111,0,123,121,122,106],
[146,122,126,118,130,125,133,126,142,125,127,0,114,120,129],
[128,144,126,116,143,111,142,132,144,126,129,136,0,121,128],
[138,110,127,119,124,128,134,127,123,119,128,130,129,0,120],
[142,144,121,122,137,128,154,125,140,136,144,121,122,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 30, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,114,114,118,129,124,115,108,122,115,110,127,119,126],
[132,0,126,124,122,133,123,116,121,123,109,112,129,136,132],
[136,124,0,117,122,132,127,116,124,124,115,114,141,140,119],
[136,126,133,0,138,133,134,119,126,134,126,120,147,134,133],
[132,128,128,112,0,131,113,114,118,120,118,115,124,130,122],
[121,117,118,117,119,0,109,115,112,115,125,110,135,128,121],
[126,127,123,116,137,141,0,118,120,125,119,114,128,130,132],
[135,134,134,131,136,135,132,0,120,124,133,129,137,135,127],
[142,129,126,124,132,138,130,130,0,136,127,122,140,134,135],
[128,127,126,116,130,135,125,126,114,0,123,117,141,134,128],
[135,141,135,124,132,125,131,117,123,127,0,116,134,131,124],
[140,138,136,130,135,140,136,121,128,133,134,0,144,139,134],
[123,121,109,103,126,115,122,113,110,109,116,106,0,130,126],
[131,114,110,116,120,122,120,115,116,116,119,111,120,0,121],
[124,118,131,117,128,129,118,123,115,122,126,116,124,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 31, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,112,111,112,101,123,106,100,115,109,113,104,99,103],
[129,0,128,111,118,112,112,112,116,122,114,101,116,117,102],
[138,122,0,107,126,108,110,97,123,129,115,121,106,99,116],
[139,139,143,0,134,124,141,114,141,132,137,152,144,137,115],
[138,132,124,116,0,133,128,128,116,111,129,139,112,129,102],
[149,138,142,126,117,0,136,117,124,125,135,148,139,127,125],
[127,138,140,109,122,114,0,121,122,111,107,126,126,115,112],
[144,138,153,136,122,133,129,0,134,127,128,129,134,127,113],
[150,134,127,109,134,126,128,116,0,124,133,129,113,121,109],
[135,128,121,118,139,125,139,123,126,0,121,131,122,131,121],
[141,136,135,113,121,115,143,122,117,129,0,136,110,117,120],
[137,149,129,98,111,102,124,121,121,119,114,0,128,108,96],
[146,134,144,106,138,111,124,116,137,128,140,122,0,132,127],
[151,133,151,113,121,123,135,123,129,119,133,142,118,0,128],
[147,148,134,135,148,125,138,137,141,129,130,154,123,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 32, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,102,120,104,123,127,98,113,78,115,105,115,90,106],
[111,0,111,109,122,129,110,107,115,95,119,114,110,117,103],
[148,139,0,130,134,146,132,133,128,111,131,124,132,127,142],
[130,141,120,0,118,127,116,113,131,100,126,124,131,116,115],
[146,128,116,132,0,145,127,114,146,115,146,125,119,132,134],
[127,121,104,123,105,0,127,91,129,99,111,107,112,112,113],
[123,140,118,134,123,123,0,103,119,95,106,125,113,142,124],
[152,143,117,137,136,159,147,0,149,107,144,131,142,141,140],
[137,135,122,119,104,121,131,101,0,94,124,121,131,119,129],
[172,155,139,150,135,151,155,143,156,0,148,146,152,121,138],
[135,131,119,124,104,139,144,106,126,102,0,101,114,122,148],
[145,136,126,126,125,143,125,119,129,104,149,0,134,117,140],
[135,140,118,119,131,138,137,108,119,98,136,116,0,124,128],
[160,133,123,134,118,138,108,109,131,129,128,133,126,0,146],
[144,147,108,135,116,137,126,110,121,112,102,110,122,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 33, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,138,126,129,128,133,131,122,112,141,141,149,142,144],
[102,0,86,111,124,129,120,99,94,108,125,104,125,112,101],
[112,164,0,118,111,148,108,116,100,116,137,112,110,124,134],
[124,139,132,0,125,140,120,145,108,118,148,151,145,139,112],
[121,126,139,125,0,126,126,127,118,95,110,128,127,144,110],
[122,121,102,110,124,0,112,111,102,122,119,96,120,128,99],
[117,130,142,130,124,138,0,128,104,126,140,127,111,121,132],
[119,151,134,105,123,139,122,0,97,120,144,119,126,142,129],
[128,156,150,142,132,148,146,153,0,132,157,116,145,155,140],
[138,142,134,132,155,128,124,130,118,0,143,148,123,173,157],
[109,125,113,102,140,131,110,106,93,107,0,100,111,128,111],
[109,146,138,99,122,154,123,131,134,102,150,0,122,115,156],
[101,125,140,105,123,130,139,124,105,127,139,128,0,128,113],
[108,138,126,111,106,122,129,108,95,77,122,135,122,0,132],
[106,149,116,138,140,151,118,121,110,93,139,94,137,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 34, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,126,120,131,134,116,128,121,130,124,125,124,127,124],
[125,0,128,118,142,137,122,122,132,123,118,125,124,132,136],
[124,122,0,112,112,133,111,122,114,126,120,122,133,118,130],
[130,132,138,0,140,140,114,124,128,131,136,134,136,136,130],
[119,108,138,110,0,130,120,123,124,120,120,121,127,128,129],
[116,113,117,110,120,0,109,113,125,120,108,114,120,121,117],
[134,128,139,136,130,141,0,113,128,126,132,132,137,131,135],
[122,128,128,126,127,137,137,0,133,132,130,116,123,134,130],
[129,118,136,122,126,125,122,117,0,128,126,131,125,125,132],
[120,127,124,119,130,130,124,118,122,0,126,131,131,126,121],
[126,132,130,114,130,142,118,120,124,124,0,127,121,131,124],
[125,125,128,116,129,136,118,134,119,119,123,0,133,129,134],
[126,126,117,114,123,130,113,127,125,119,129,117,0,122,116],
[123,118,132,114,122,129,119,116,125,124,119,121,128,0,126],
[126,114,120,120,121,133,115,120,118,129,126,116,134,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 35, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,122,142,123,130,123,137,131,129,126,121,147,131,125],
[106,0,115,129,123,112,126,119,131,130,123,110,130,124,122],
[128,135,0,140,131,135,122,132,137,139,138,132,134,136,130],
[108,121,110,0,128,113,109,112,132,119,111,108,130,108,107],
[127,127,119,122,0,110,117,131,126,130,122,111,122,125,119],
[120,138,115,137,140,0,116,140,133,118,121,118,138,125,127],
[127,124,128,141,133,134,0,127,133,123,124,124,138,130,136],
[113,131,118,138,119,110,123,0,134,123,119,125,136,138,116],
[119,119,113,118,124,117,117,116,0,122,111,108,121,106,120],
[121,120,111,131,120,132,127,127,128,0,126,124,136,124,130],
[124,127,112,139,128,129,126,131,139,124,0,126,132,129,132],
[129,140,118,142,139,132,126,125,142,126,124,0,130,130,128],
[103,120,116,120,128,112,112,114,129,114,118,120,0,120,122],
[119,126,114,142,125,125,120,112,144,126,121,120,130,0,119],
[125,128,120,143,131,123,114,134,130,120,118,122,128,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 36, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,120,127,138,132,125,131,114,126,110,124,131,119,131],
[139,0,120,135,133,136,128,131,116,120,120,108,137,136,127],
[130,130,0,143,146,135,115,129,121,119,140,119,142,127,131],
[123,115,107,0,134,132,116,125,117,104,109,116,124,112,113],
[112,117,104,116,0,124,119,106,104,130,110,110,118,125,120],
[118,114,115,118,126,0,104,120,111,124,103,108,119,120,119],
[125,122,135,134,131,146,0,126,127,128,120,127,133,140,137],
[119,119,121,125,144,130,124,0,123,124,121,117,129,130,125],
[136,134,129,133,146,139,123,127,0,136,114,109,123,137,128],
[124,130,131,146,120,126,122,126,114,0,114,103,123,132,120],
[140,130,110,141,140,147,130,129,136,136,0,127,138,138,137],
[126,142,131,134,140,142,123,133,141,147,123,0,135,143,142],
[119,113,108,126,132,131,117,121,127,127,112,115,0,124,116],
[131,114,123,138,125,130,110,120,113,118,112,107,126,0,118],
[119,123,119,137,130,131,113,125,122,130,113,108,134,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 37, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,134,115,121,123,124,117,115,112,116,122,123,125,115],
[135,0,117,105,109,123,129,118,113,110,111,126,126,123,113],
[116,133,0,119,113,125,131,112,129,124,126,128,133,132,119],
[135,145,131,0,116,133,132,134,120,126,129,120,136,132,125],
[129,141,137,134,0,129,141,130,130,136,137,129,141,141,123],
[127,127,125,117,121,0,132,124,123,115,122,136,125,120,118],
[126,121,119,118,109,118,0,120,124,110,116,118,130,119,115],
[133,132,138,116,120,126,130,0,130,116,125,123,130,129,124],
[135,137,121,130,120,127,126,120,0,129,123,120,132,131,115],
[138,140,126,124,114,135,140,134,121,0,127,127,139,133,121],
[134,139,124,121,113,128,134,125,127,123,0,127,128,137,105],
[128,124,122,130,121,114,132,127,130,123,123,0,131,123,117],
[127,124,117,114,109,125,120,120,118,111,122,119,0,117,117],
[125,127,118,118,109,130,131,121,119,117,113,127,133,0,118],
[135,137,131,125,127,132,135,126,135,129,145,133,133,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 38, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,119,120,127,117,126,114,124,119,133,117,128,127,113],
[128,0,135,142,136,115,138,130,127,126,150,131,139,133,132],
[131,115,0,128,135,124,126,120,124,122,140,131,142,124,117],
[130,108,122,0,125,108,127,122,114,119,139,116,125,122,120],
[123,114,115,125,0,120,127,109,110,116,124,116,136,118,126],
[133,135,126,142,130,0,129,133,124,121,141,119,143,130,124],
[124,112,124,123,123,121,0,116,109,125,126,107,130,121,121],
[136,120,130,128,141,117,134,0,121,118,132,124,136,125,116],
[126,123,126,136,140,126,141,129,0,127,150,127,148,139,128],
[131,124,128,131,134,129,125,132,123,0,153,115,140,129,127],
[117,100,110,111,126,109,124,118,100,97,0,108,132,110,117],
[133,119,119,134,134,131,143,126,123,135,142,0,149,128,137],
[122,111,108,125,114,107,120,114,102,110,118,101,0,123,111],
[123,117,126,128,132,120,129,125,111,121,140,122,127,0,126],
[137,118,133,130,124,126,129,134,122,123,133,113,139,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 39, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,128,143,132,141,128,121,123,117,117,119,115,120,140],
[119,0,129,134,124,140,126,127,118,127,123,117,119,129,138],
[122,121,0,118,123,127,110,125,115,119,115,104,116,121,134],
[107,116,132,0,127,130,112,118,127,116,115,114,118,101,129],
[118,126,127,123,0,125,120,129,120,122,123,111,112,116,113],
[109,110,123,120,125,0,109,110,120,115,106,119,103,124,111],
[122,124,140,138,130,141,0,134,125,127,136,120,127,125,132],
[129,123,125,132,121,140,116,0,130,120,121,118,126,131,125],
[127,132,135,123,130,130,125,120,0,126,123,118,111,122,132],
[133,123,131,134,128,135,123,130,124,0,129,119,123,122,125],
[133,127,135,135,127,144,114,129,127,121,0,124,130,122,135],
[131,133,146,136,139,131,130,132,132,131,126,0,121,136,136],
[135,131,134,132,138,147,123,124,139,127,120,129,0,122,138],
[130,121,129,149,134,126,125,119,128,128,128,114,128,0,138],
[110,112,116,121,137,139,118,125,118,125,115,114,112,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 40, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,124,106,146,81,90,127,104,100,45,154,91,95,98],
[168,0,125,119,143,122,140,155,100,128,116,141,125,163,120],
[126,125,0,151,158,132,132,171,131,147,86,162,107,119,111],
[144,131,99,0,125,96,96,150,85,118,79,153,81,74,77],
[104,107,92,125,0,82,91,141,89,121,65,152,91,77,98],
[169,128,118,154,168,0,133,157,134,151,127,136,137,163,126],
[160,110,118,154,159,117,0,149,125,109,82,185,125,103,99],
[123,95,79,100,109,93,101,0,103,104,81,166,94,103,95],
[146,150,119,165,161,116,125,147,0,134,103,191,115,90,114],
[150,122,103,132,129,99,141,146,116,0,104,166,130,99,132],
[205,134,164,171,185,123,168,169,147,146,0,168,130,143,145],
[96,109,88,97,98,114,65,84,59,84,82,0,93,72,90],
[159,125,143,169,159,113,125,156,135,120,120,157,0,132,129],
[155,87,131,176,173,87,147,147,160,151,107,178,118,0,122],
[152,130,139,173,152,124,151,155,136,118,105,160,121,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 41, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,119,102,108,116,126,120,124,126,117,117,118,123,112],
[136,0,125,101,127,125,133,128,124,121,133,125,119,117,126],
[131,125,0,119,129,138,142,113,120,125,132,133,124,132,120],
[148,149,131,0,134,135,146,149,152,122,137,136,137,153,130],
[142,123,121,116,0,135,145,115,138,118,116,129,112,128,107],
[134,125,112,115,115,0,122,121,135,115,115,125,115,121,109],
[124,117,108,104,105,128,0,121,120,141,131,120,112,109,117],
[130,122,137,101,135,129,129,0,129,104,114,131,125,130,108],
[126,126,130,98,112,115,130,121,0,117,118,138,123,135,127],
[124,129,125,128,132,135,109,146,133,0,126,132,127,137,112],
[133,117,118,113,134,135,119,136,132,124,0,122,135,122,126],
[133,125,117,114,121,125,130,119,112,118,128,0,122,128,97],
[132,131,126,113,138,135,138,125,127,123,115,128,0,132,129],
[127,133,118,97,122,129,141,120,115,113,128,122,118,0,119],
[138,124,130,120,143,141,133,142,123,138,124,153,121,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 42, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,79,112,106,99,138,119,83,121,63,114,100,128,97],
[150,0,128,136,113,129,122,129,86,101,99,121,118,141,106],
[171,122,0,126,91,119,140,109,84,139,128,113,133,175,99],
[138,114,124,0,119,96,108,115,76,116,74,90,124,135,99],
[144,137,159,131,0,162,125,178,137,137,114,137,151,172,138],
[151,121,131,154,88,0,133,140,116,124,99,107,117,158,102],
[112,128,110,142,125,117,0,137,115,111,87,92,103,140,109],
[131,121,141,135,72,110,113,0,141,124,107,102,107,134,105],
[167,164,166,174,113,134,135,109,0,115,136,138,116,167,114],
[129,149,111,134,113,126,139,126,135,0,106,109,123,136,128],
[187,151,122,176,136,151,163,143,114,144,0,113,155,159,136],
[136,129,137,160,113,143,158,148,112,141,137,0,120,146,109],
[150,132,117,126,99,133,147,143,134,127,95,130,0,146,115],
[122,109,75,115,78,92,110,116,83,114,91,104,104,0,106],
[153,144,151,151,112,148,141,145,136,122,114,141,135,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 43, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,126,143,148,87,152,82,132,153,166,180,158,135,151],
[114,0,90,133,90,81,73,46,54,87,84,88,78,117,73],
[124,160,0,153,182,137,159,118,156,180,150,184,135,150,169],
[107,117,97,0,82,121,134,89,73,108,96,108,105,120,108],
[102,160,68,168,0,97,136,93,119,149,103,139,113,125,142],
[163,169,113,129,153,0,128,131,130,135,127,136,150,154,128],
[98,177,91,116,114,122,0,58,95,158,80,153,130,92,136],
[168,204,132,161,157,119,192,0,153,181,148,177,164,123,192],
[118,196,94,177,131,120,155,97,0,182,131,170,168,144,167],
[97,163,70,142,101,115,92,69,68,0,94,166,124,91,115],
[84,166,100,154,147,123,170,102,119,156,0,149,129,96,147],
[70,162,66,142,111,114,97,73,80,84,101,0,124,60,117],
[92,172,115,145,137,100,120,86,82,126,121,126,0,111,132],
[115,133,100,130,125,96,158,127,106,159,154,190,139,0,147],
[99,177,81,142,108,122,114,58,83,135,103,133,118,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 44, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,143,140,131,140,137,128,131,133,121,109,122,116,123],
[131,0,157,146,127,154,152,133,126,143,132,120,133,142,138],
[107,93,0,127,112,118,120,100,102,128,104,98,108,107,108],
[110,104,123,0,108,147,136,135,121,140,114,113,112,117,126],
[119,123,138,142,0,151,145,137,127,153,133,106,120,132,134],
[110,96,132,103,99,0,129,97,102,102,103,103,106,92,101],
[113,98,130,114,105,121,0,109,101,121,101,118,115,114,123],
[122,117,150,115,113,153,141,0,122,134,118,123,111,120,106],
[119,124,148,129,123,148,149,128,0,144,110,130,114,131,141],
[117,107,122,110,97,148,129,116,106,0,119,111,114,123,108],
[129,118,146,136,117,147,149,132,140,131,0,123,110,129,132],
[141,130,152,137,144,147,132,127,120,139,127,0,126,127,132],
[128,117,142,138,130,144,135,139,136,136,140,124,0,137,137],
[134,108,143,133,118,158,136,130,119,127,121,123,113,0,133],
[127,112,142,124,116,149,127,144,109,142,118,118,113,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 45, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,120,133,126,134,124,126,135,126,119,113,120,128,109],
[121,0,119,120,132,148,122,128,137,120,132,104,123,124,126],
[130,131,0,98,132,137,107,117,113,129,125,127,118,125,112],
[117,130,152,0,139,133,130,124,123,133,115,120,116,147,124],
[124,118,118,111,0,142,106,122,116,128,128,114,108,115,114],
[116,102,113,117,108,0,111,131,117,109,116,118,105,109,115],
[126,128,143,120,144,139,0,119,127,121,131,106,119,127,110],
[124,122,133,126,128,119,131,0,132,115,138,116,127,127,110],
[115,113,137,127,134,133,123,118,0,120,122,120,114,126,111],
[124,130,121,117,122,141,129,135,130,0,144,109,125,139,126],
[131,118,125,135,122,134,119,112,128,106,0,93,104,112,107],
[137,146,123,130,136,132,144,134,130,141,157,0,122,129,115],
[130,127,132,134,142,145,131,123,136,125,146,128,0,135,106],
[122,126,125,103,135,141,123,123,124,111,138,121,115,0,115],
[141,124,138,126,136,135,140,140,139,124,143,135,144,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 46, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,129,141,111,121,143,135,125,131,136,113,124,137,144],
[133,0,124,131,128,122,145,122,131,132,129,117,115,116,138],
[121,126,0,135,123,135,148,133,125,134,150,119,130,131,139],
[109,119,115,0,115,127,137,115,122,130,126,116,110,133,125],
[139,122,127,135,0,139,153,129,123,126,137,112,120,130,127],
[129,128,115,123,111,0,146,125,129,128,137,105,116,124,142],
[107,105,102,113,97,104,0,114,110,102,110,99,95,107,122],
[115,128,117,135,121,125,136,0,130,139,134,133,121,134,142],
[125,119,125,128,127,121,140,120,0,117,125,113,120,129,134],
[119,118,116,120,124,122,148,111,133,0,133,113,111,132,142],
[114,121,100,124,113,113,140,116,125,117,0,117,107,123,122],
[137,133,131,134,138,145,151,117,137,137,133,0,115,128,151],
[126,135,120,140,130,134,155,129,130,139,143,135,0,129,149],
[113,134,119,117,120,126,143,116,121,118,127,122,121,0,126],
[106,112,111,125,123,108,128,108,116,108,128,99,101,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 47, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,135,103,125,124,134,139,117,147,137,141,113,115,125],
[117,0,111,106,122,117,148,120,120,118,143,120,129,119,112],
[115,139,0,122,131,119,152,130,139,157,167,145,123,127,129],
[147,144,128,0,114,151,164,135,144,155,170,152,142,118,124],
[125,128,119,136,0,147,139,131,123,135,158,143,152,125,120],
[126,133,131,99,103,0,145,118,120,137,149,106,162,108,130],
[116,102,98,86,111,105,0,87,99,114,108,91,110,84,105],
[111,130,120,115,119,132,163,0,116,113,150,122,118,132,114],
[133,130,111,106,127,130,151,134,0,126,151,137,126,104,128],
[103,132,93,95,115,113,136,137,124,0,132,109,120,94,113],
[113,107,83,80,92,101,142,100,99,118,0,107,102,65,93],
[109,130,105,98,107,144,159,128,113,141,143,0,136,104,128],
[137,121,127,108,98,88,140,132,124,130,148,114,0,93,117],
[135,131,123,132,125,142,166,118,146,156,185,146,157,0,161],
[125,138,121,126,130,120,145,136,122,137,157,122,133,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 48, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,120,131,124,122,116,124,120,110,133,131,117,121,109],
[127,0,120,116,120,131,127,125,136,118,123,126,121,128,117],
[130,130,0,128,111,126,126,125,129,125,130,129,118,125,113],
[119,134,122,0,111,116,126,125,126,121,118,117,113,134,110],
[126,130,139,139,0,137,141,132,135,133,134,133,135,138,119],
[128,119,124,134,113,0,128,127,118,108,132,132,109,124,123],
[134,123,124,124,109,122,0,119,133,121,136,131,114,119,118],
[126,125,125,125,118,123,131,0,129,132,125,128,122,120,119],
[130,114,121,124,115,132,117,121,0,116,135,132,124,128,110],
[140,132,125,129,117,142,129,118,134,0,129,122,119,122,129],
[117,127,120,132,116,118,114,125,115,121,0,124,129,133,110],
[119,124,121,133,117,118,119,122,118,128,126,0,124,119,109],
[133,129,132,137,115,141,136,128,126,131,121,126,0,132,120],
[129,122,125,116,112,126,131,130,122,128,117,131,118,0,121],
[141,133,137,140,131,127,132,131,140,121,140,141,130,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 49, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,130,152,134,115,139,144,113,129,131,134,128,141,139],
[126,0,121,122,100,119,126,135,107,114,109,114,122,129,115],
[120,129,0,122,140,119,138,119,110,116,123,129,136,142,125],
[98,128,128,0,115,117,107,130,106,106,121,124,99,127,141],
[116,150,110,135,0,121,138,129,117,100,142,135,123,133,129],
[135,131,131,133,129,0,121,143,133,107,139,117,145,139,128],
[111,124,112,143,112,129,0,126,109,110,121,117,127,111,105],
[106,115,131,120,121,107,124,0,103,112,108,132,101,129,128],
[137,143,140,144,133,117,141,147,0,135,148,145,132,132,124],
[121,136,134,144,150,143,140,138,115,0,131,139,127,128,130],
[119,141,127,129,108,111,129,142,102,119,0,105,109,115,113],
[116,136,121,126,115,133,133,118,105,111,145,0,109,122,129],
[122,128,114,151,127,105,123,149,118,123,141,141,0,131,141],
[109,121,108,123,117,111,139,121,118,122,135,128,119,0,114],
[111,135,125,109,121,122,145,122,126,120,137,121,109,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 50, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,111,110,122,121,95,128,105,109,122,96,109,127,117],
[126,0,124,110,127,124,103,147,127,118,139,103,126,126,119],
[139,126,0,119,129,126,103,143,118,110,127,107,111,132,124],
[140,140,131,0,127,118,117,138,111,135,117,129,118,136,142],
[128,123,121,123,0,132,110,148,114,133,133,112,117,116,117],
[129,126,124,132,118,0,128,148,111,133,121,114,124,136,122],
[155,147,147,133,140,122,0,152,110,136,128,111,130,147,150],
[122,103,107,112,102,102,98,0,93,99,109,88,110,110,124],
[145,123,132,139,136,139,140,157,0,121,127,120,142,143,133],
[141,132,140,115,117,117,114,151,129,0,118,127,115,129,132],
[128,111,123,133,117,129,122,141,123,132,0,118,125,134,136],
[154,147,143,121,138,136,139,162,130,123,132,0,123,148,146],
[141,124,139,132,133,126,120,140,108,135,125,127,0,133,141],
[123,124,118,114,134,114,103,140,107,121,116,102,117,0,121],
[133,131,126,108,133,128,100,126,117,118,114,104,109,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 51, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,139,108,124,133,127,116,124,133,124,132,136,112,132],
[128,0,152,142,138,136,131,130,134,134,124,136,159,134,133],
[111,98,0,89,114,121,114,106,103,110,102,120,115,101,105],
[142,108,161,0,134,129,136,132,135,138,128,155,155,124,131],
[126,112,136,116,0,127,131,114,126,128,104,139,137,119,123],
[117,114,129,121,123,0,126,107,122,121,112,132,136,104,122],
[123,119,136,114,119,124,0,103,126,126,113,114,135,104,127],
[134,120,144,118,136,143,147,0,141,138,130,146,136,122,132],
[126,116,147,115,124,128,124,109,0,128,130,135,135,116,121],
[117,116,140,112,122,129,124,112,122,0,115,143,136,113,122],
[126,126,148,122,146,138,137,120,120,135,0,139,139,130,139],
[118,114,130,95,111,118,136,104,115,107,111,0,136,103,117],
[114,91,135,95,113,114,115,114,115,114,111,114,0,99,103],
[138,116,149,126,131,146,146,128,134,137,120,147,151,0,136],
[118,117,145,119,127,128,123,118,129,128,111,133,147,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 52, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,119,130,133,135,105,111,121,112,123,114,120,148,152],
[130,0,148,131,138,145,125,146,125,115,134,154,132,141,150],
[131,102,0,106,109,110,89,101,107,92,112,111,109,121,136],
[120,119,144,0,117,136,113,130,120,110,134,127,136,130,153],
[117,112,141,133,0,117,110,117,122,105,115,127,118,117,135],
[115,105,140,114,133,0,115,130,114,111,118,121,120,131,155],
[145,125,161,137,140,135,0,143,126,131,147,142,159,141,149],
[139,104,149,120,133,120,107,0,132,121,132,124,124,133,157],
[129,125,143,130,128,136,124,118,0,94,123,126,135,137,148],
[138,135,158,140,145,139,119,129,156,0,144,143,143,151,154],
[127,116,138,116,135,132,103,118,127,106,0,126,121,135,128],
[136,96,139,123,123,129,108,126,124,107,124,0,120,142,145],
[130,118,141,114,132,130,91,126,115,107,129,130,0,133,143],
[102,109,129,120,133,119,109,117,113,99,115,108,117,0,129],
[98,100,114,97,115,95,101,93,102,96,122,105,107,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 53, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,124,115,119,120,120,121,123,120,120,131,126,124,112],
[130,0,133,118,123,138,133,136,136,110,133,131,125,120,130],
[126,117,0,125,114,123,131,135,129,121,127,132,117,105,113],
[135,132,125,0,115,133,126,135,123,121,121,140,121,125,125],
[131,127,136,135,0,124,137,131,127,132,137,127,126,126,118],
[130,112,127,117,126,0,137,123,129,114,125,128,131,125,112],
[130,117,119,124,113,113,0,130,129,121,127,131,124,124,108],
[129,114,115,115,119,127,120,0,121,129,127,121,121,126,112],
[127,114,121,127,123,121,121,129,0,133,118,125,120,121,115],
[130,140,129,129,118,136,129,121,117,0,133,139,131,126,135],
[130,117,123,129,113,125,123,123,132,117,0,130,134,125,119],
[119,119,118,110,123,122,119,129,125,111,120,0,121,133,112],
[124,125,133,129,124,119,126,129,130,119,116,129,0,124,120],
[126,130,145,125,124,125,126,124,129,124,125,117,126,0,126],
[138,120,137,125,132,138,142,138,135,115,131,138,130,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 54, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,131,109,127,131,93,145,122,139,139,140,110,150,113],
[78,0,114,106,93,112,93,96,122,88,133,111,105,138,107],
[119,136,0,107,104,107,115,151,134,116,134,120,116,142,107],
[141,144,143,0,123,161,106,141,114,149,127,133,105,152,136],
[123,157,146,127,0,143,127,103,142,134,130,145,152,129,127],
[119,138,143,89,107,0,124,148,102,141,140,137,118,151,111],
[157,157,135,144,123,126,0,105,164,108,140,152,145,156,139],
[105,154,99,109,147,102,145,0,157,76,116,99,117,129,116],
[128,128,116,136,108,148,86,93,0,91,124,122,122,129,110],
[111,162,134,101,116,109,142,174,159,0,151,149,130,155,116],
[111,117,116,123,120,110,110,134,126,99,0,151,99,108,89],
[110,139,130,117,105,113,98,151,128,101,99,0,108,155,87],
[140,145,134,145,98,132,105,133,128,120,151,142,0,147,131],
[100,112,108,98,121,99,94,121,121,95,142,95,103,0,90],
[137,143,143,114,123,139,111,134,140,134,161,163,119,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 55, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,118,116,119,120,116,117,136,122,119,121,117,121,122],
[139,0,129,127,141,127,120,129,144,134,132,130,135,132,136],
[132,121,0,117,127,132,123,131,127,130,132,127,120,125,130],
[134,123,133,0,127,135,126,127,128,127,132,129,131,129,120],
[131,109,123,123,0,134,123,125,134,124,120,114,119,118,128],
[130,123,118,115,116,0,122,130,124,114,125,121,117,123,123],
[134,130,127,124,127,128,0,133,137,131,126,126,127,129,132],
[133,121,119,123,125,120,117,0,133,122,119,121,117,123,116],
[114,106,123,122,116,126,113,117,0,111,116,108,117,118,111],
[128,116,120,123,126,136,119,128,139,0,131,127,120,127,127],
[131,118,118,118,130,125,124,131,134,119,0,131,125,125,125],
[129,120,123,121,136,129,124,129,142,123,119,0,129,131,132],
[133,115,130,119,131,133,123,133,133,130,125,121,0,127,128],
[129,118,125,121,132,127,121,127,132,123,125,119,123,0,115],
[128,114,120,130,122,127,118,134,139,123,125,118,122,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 56, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,103,119,127,109,100,120,79,118,100,125,104,101,116],
[107,0,118,115,88,95,87,136,86,111,84,92,98,101,99],
[147,132,0,165,132,146,126,135,112,141,127,149,108,130,134],
[131,135,85,0,124,117,118,128,102,115,96,111,99,102,115],
[123,162,118,126,0,124,107,148,119,139,124,151,114,121,127],
[141,155,104,133,126,0,118,134,100,116,98,143,126,126,139],
[150,163,124,132,143,132,0,139,121,148,132,145,126,117,144],
[130,114,115,122,102,116,111,0,102,129,129,131,111,100,111],
[171,164,138,148,131,150,129,148,0,163,119,131,132,135,162],
[132,139,109,135,111,134,102,121,87,0,110,112,81,109,129],
[150,166,123,154,126,152,118,121,131,140,0,152,114,120,118],
[125,158,101,139,99,107,105,119,119,138,98,0,125,111,134],
[146,152,142,151,136,124,124,139,118,169,136,125,0,145,148],
[149,149,120,148,129,124,133,150,115,141,130,139,105,0,135],
[134,151,116,135,123,111,106,139,88,121,132,116,102,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 57, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,130,155,123,121,124,119,118,130,124,131,137,127,118],
[107,0,113,127,114,113,107,102,118,111,123,113,131,110,117],
[120,137,0,152,124,135,128,131,129,132,127,144,143,120,144],
[95,123,98,0,114,106,108,112,103,112,109,123,118,104,116],
[127,136,126,136,0,128,137,125,144,135,117,126,131,129,136],
[129,137,115,144,122,0,121,115,143,123,139,144,137,121,139],
[126,143,122,142,113,129,0,119,130,131,133,135,132,126,124],
[131,148,119,138,125,135,131,0,131,137,131,141,138,114,129],
[132,132,121,147,106,107,120,119,0,112,115,131,128,98,129],
[120,139,118,138,115,127,119,113,138,0,118,135,138,125,130],
[126,127,123,141,133,111,117,119,135,132,0,123,120,114,125],
[119,137,106,127,124,106,115,109,119,115,127,0,124,99,133],
[113,119,107,132,119,113,118,112,122,112,130,126,0,101,138],
[123,140,130,146,121,129,124,136,152,125,136,151,149,0,144],
[132,133,106,134,114,111,126,121,121,120,125,117,112,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 58, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,114,128,113,144,130,136,119,129,123,117,122,125,119],
[112,0,115,117,111,135,126,126,107,111,117,134,117,117,120],
[136,135,0,114,115,128,128,126,119,127,117,122,118,115,112],
[122,133,136,0,125,130,129,122,112,130,120,125,116,117,115],
[137,139,135,125,0,142,140,130,131,143,124,140,122,128,119],
[106,115,122,120,108,0,110,110,101,117,103,116,100,108,112],
[120,124,122,121,110,140,0,125,106,131,111,117,116,121,116],
[114,124,124,128,120,140,125,0,123,124,111,120,106,120,119],
[131,143,131,138,119,149,144,127,0,135,125,128,137,129,127],
[121,139,123,120,107,133,119,126,115,0,121,128,115,120,118],
[127,133,133,130,126,147,139,139,125,129,0,125,119,125,134],
[133,116,128,125,110,134,133,130,122,122,125,0,118,116,131],
[128,133,132,134,128,150,134,144,113,135,131,132,0,129,133],
[125,133,135,133,122,142,129,130,121,130,125,134,121,0,123],
[131,130,138,135,131,138,134,131,123,132,116,119,117,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 59, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,123,144,143,135,127,132,151,132,138,132,136,121,140],
[105,0,121,125,131,117,127,145,144,124,138,125,117,130,127],
[127,129,0,124,127,123,121,140,145,114,125,124,118,127,129],
[106,125,126,0,133,119,117,134,155,123,119,138,122,119,124],
[107,119,123,117,0,121,128,111,134,130,132,134,117,117,128],
[115,133,127,131,129,0,125,134,144,118,137,131,112,118,119],
[123,123,129,133,122,125,0,137,138,120,118,126,107,119,120],
[118,105,110,116,139,116,113,0,142,118,134,127,119,122,137],
[99,106,105,95,116,106,112,108,0,113,117,112,98,106,98],
[118,126,136,127,120,132,130,132,137,0,133,118,116,114,109],
[112,112,125,131,118,113,132,116,133,117,0,121,92,112,113],
[118,125,126,112,116,119,124,123,138,132,129,0,105,120,120],
[114,133,132,128,133,138,143,131,152,134,158,145,0,144,136],
[129,120,123,131,133,132,131,128,144,136,138,130,106,0,120],
[110,123,121,126,122,131,130,113,152,141,137,130,114,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 60, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,123,134,125,118,116,122,124,115,121,135,120,125,126],
[132,0,128,127,127,121,131,122,134,120,128,131,125,118,128],
[127,122,0,121,118,128,119,118,129,125,133,129,119,124,123],
[116,123,129,0,116,118,123,114,121,112,125,121,120,122,125],
[125,123,132,134,0,121,119,120,127,115,133,133,127,133,121],
[132,129,122,132,129,0,136,120,131,132,125,132,128,124,132],
[134,119,131,127,131,114,0,121,129,116,120,133,126,121,122],
[128,128,132,136,130,130,129,0,134,128,130,126,128,125,127],
[126,116,121,129,123,119,121,116,0,115,125,127,116,122,109],
[135,130,125,138,135,118,134,122,135,0,119,129,124,126,126],
[129,122,117,125,117,125,130,120,125,131,0,128,123,129,124],
[115,119,121,129,117,118,117,124,123,121,122,0,123,121,119],
[130,125,131,130,123,122,124,122,134,126,127,127,0,131,131],
[125,132,126,128,117,126,129,125,128,124,121,129,119,0,131],
[124,122,127,125,129,118,128,123,141,124,126,131,119,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 61, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,112,113,121,119,115,135,122,121,107,109,119,119,110],
[122,0,123,110,119,123,115,128,103,125,130,117,128,125,123],
[138,127,0,130,127,133,130,143,114,120,132,121,127,126,117],
[137,140,120,0,120,131,130,135,125,131,123,119,134,131,124],
[129,131,123,130,0,128,128,133,124,125,125,118,129,129,125],
[131,127,117,119,122,0,119,125,120,122,123,123,126,122,116],
[135,135,120,120,122,131,0,145,123,123,128,119,131,130,112],
[115,122,107,115,117,125,105,0,113,116,120,107,121,116,108],
[128,147,136,125,126,130,127,137,0,127,131,121,125,132,123],
[129,125,130,119,125,128,127,134,123,0,124,118,126,130,122],
[143,120,118,127,125,127,122,130,119,126,0,117,126,126,113],
[141,133,129,131,132,127,131,143,129,132,133,0,136,134,125],
[131,122,123,116,121,124,119,129,125,124,124,114,0,120,110],
[131,125,124,119,121,128,120,134,118,120,124,116,130,0,111],
[140,127,133,126,125,134,138,142,127,128,137,125,140,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 62, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,122,133,115,136,111,112,119,121,122,140,125,133,117],
[124,0,115,122,118,137,108,128,118,118,138,141,117,128,129],
[128,135,0,130,131,158,101,113,118,130,135,153,122,136,120],
[117,128,120,0,111,125,116,126,111,123,123,135,128,143,125],
[135,132,119,139,0,132,115,121,120,114,136,144,127,128,119],
[114,113,92,125,118,0,96,115,111,109,107,117,110,141,109],
[139,142,149,134,135,154,0,129,134,119,137,152,124,152,136],
[138,122,137,124,129,135,121,0,110,124,126,139,127,155,121],
[131,132,132,139,130,139,116,140,0,137,130,140,143,149,133],
[129,132,120,127,136,141,131,126,113,0,136,138,131,153,133],
[128,112,115,127,114,143,113,124,120,114,0,140,128,152,116],
[110,109,97,115,106,133,98,111,110,112,110,0,119,128,105],
[125,133,128,122,123,140,126,123,107,119,122,131,0,131,134],
[117,122,114,107,122,109,98,95,101,97,98,122,119,0,118],
[133,121,130,125,131,141,114,129,117,117,134,145,116,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 63, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,134,124,134,130,116,126,126,121,127,127,135,115,138],
[121,0,136,121,138,124,120,120,131,109,114,114,125,122,139],
[116,114,0,120,131,113,111,118,121,106,121,116,115,123,141],
[126,129,130,0,136,137,128,121,120,125,132,125,131,121,149],
[116,112,119,114,0,131,111,120,125,117,121,130,127,114,139],
[120,126,137,113,119,0,120,121,136,122,124,126,127,123,149],
[134,130,139,122,139,130,0,125,135,127,132,129,136,136,138],
[124,130,132,129,130,129,125,0,123,110,131,124,132,117,139],
[124,119,129,130,125,114,115,127,0,118,132,118,121,110,143],
[129,141,144,125,133,128,123,140,132,0,143,130,139,125,157],
[123,136,129,118,129,126,118,119,118,107,0,120,133,123,155],
[123,136,134,125,120,124,121,126,132,120,130,0,127,123,141],
[115,125,135,119,123,123,114,118,129,111,117,123,0,123,140],
[135,128,127,129,136,127,114,133,140,125,127,127,127,0,136],
[112,111,109,101,111,101,112,111,107,93,95,109,110,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 64, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,138,124,135,132,142,131,121,126,129,138,130,137,132],
[112,0,132,119,132,122,125,127,125,112,116,124,127,133,129],
[112,118,0,111,132,131,118,128,109,114,111,137,128,133,121],
[126,131,139,0,137,120,126,117,121,129,111,139,142,133,132],
[115,118,118,113,0,116,117,108,115,114,118,129,127,132,136],
[118,128,119,130,134,0,129,143,115,124,127,131,137,133,132],
[108,125,132,124,133,121,0,128,123,115,111,133,130,126,135],
[119,123,122,133,142,107,122,0,128,110,110,134,121,131,127],
[129,125,141,129,135,135,127,122,0,121,126,141,138,156,135],
[124,138,136,121,136,126,135,140,129,0,119,146,137,138,135],
[121,134,139,139,132,123,139,140,124,131,0,141,137,143,138],
[112,126,113,111,121,119,117,116,109,104,109,0,121,126,117],
[120,123,122,108,123,113,120,129,112,113,113,129,0,133,126],
[113,117,117,117,118,117,124,119,94,112,107,124,117,0,124],
[118,121,129,118,114,118,115,123,115,115,112,133,124,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 65, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,123,131,124,127,129,120,139,135,130,130,153,131,131],
[113,0,130,134,124,121,114,109,138,130,129,127,137,130,138],
[127,120,0,126,124,122,126,131,138,135,130,125,127,136,134],
[119,116,124,0,128,117,115,120,124,120,121,112,127,128,125],
[126,126,126,122,0,133,108,125,143,121,125,134,133,134,118],
[123,129,128,133,117,0,108,107,134,130,137,123,121,131,127],
[121,136,124,135,142,142,0,124,137,136,123,128,140,140,139],
[130,141,119,130,125,143,126,0,125,140,139,118,131,153,146],
[111,112,112,126,107,116,113,125,0,132,117,121,114,139,120],
[115,120,115,130,129,120,114,110,118,0,124,112,126,143,128],
[120,121,120,129,125,113,127,111,133,126,0,123,132,141,134],
[120,123,125,138,116,127,122,132,129,138,127,0,141,142,140],
[97,113,123,123,117,129,110,119,136,124,118,109,0,126,129],
[119,120,114,122,116,119,110,97,111,107,109,108,124,0,127],
[119,112,116,125,132,123,111,104,130,122,116,110,121,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 66, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,112,130,125,122,139,129,112,123,127,123,108,130,122],
[130,0,120,121,123,123,123,118,131,131,111,130,112,106,124],
[138,130,0,140,131,128,136,150,139,137,131,134,115,128,132],
[120,129,110,0,124,112,127,121,124,126,122,139,119,113,132],
[125,127,119,126,0,135,130,128,136,135,120,130,125,127,115],
[128,127,122,138,115,0,124,117,130,126,124,129,117,111,130],
[111,127,114,123,120,126,0,121,113,126,114,135,122,121,136],
[121,132,100,129,122,133,129,0,127,134,114,140,129,125,125],
[138,119,111,126,114,120,137,123,0,124,123,129,115,127,127],
[127,119,113,124,115,124,124,116,126,0,125,129,110,116,130],
[123,139,119,128,130,126,136,136,127,125,0,128,116,126,130],
[127,120,116,111,120,121,115,110,121,121,122,0,109,118,128],
[142,138,135,131,125,133,128,121,135,140,134,141,0,130,131],
[120,144,122,137,123,139,129,125,123,134,124,132,120,0,140],
[128,126,118,118,135,120,114,125,123,120,120,122,119,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 67, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,134,138,143,130,123,134,143,127,131,146,129,150,140],
[121,0,135,134,148,132,132,132,138,124,131,133,135,152,136],
[116,115,0,131,136,138,127,129,144,135,123,138,118,144,125],
[112,116,119,0,129,127,120,111,140,115,119,136,113,138,120],
[107,102,114,121,0,118,111,92,128,112,104,114,111,119,103],
[120,118,112,123,132,0,118,106,132,116,125,129,113,112,115],
[127,118,123,130,139,132,0,117,138,124,115,126,131,133,116],
[116,118,121,139,158,144,133,0,150,134,129,150,133,144,142],
[107,112,106,110,122,118,112,100,0,115,127,132,124,133,118],
[123,126,115,135,138,134,126,116,135,0,128,131,120,125,118],
[119,119,127,131,146,125,135,121,123,122,0,134,129,147,123],
[104,117,112,114,136,121,124,100,118,119,116,0,109,125,113],
[121,115,132,137,139,137,119,117,126,130,121,141,0,141,125],
[100,98,106,112,131,138,117,106,117,125,103,125,109,0,112],
[110,114,125,130,147,135,134,108,132,132,127,137,125,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 68, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,146,134,135,100,130,95,119,156,120,140,148,112,122],
[93,0,129,124,106,87,101,77,96,129,120,113,133,102,68],
[104,121,0,112,112,93,115,128,79,145,152,124,138,111,108],
[116,126,138,0,110,107,137,107,96,160,159,138,137,114,127],
[115,144,138,140,0,123,146,132,139,139,164,139,140,118,126],
[150,163,157,143,127,0,160,145,128,174,169,123,162,144,137],
[120,149,135,113,104,90,0,109,120,150,137,113,136,95,76],
[155,173,122,143,118,105,141,0,105,154,162,123,138,106,95],
[131,154,171,154,111,122,130,145,0,167,150,127,159,119,130],
[94,121,105,90,111,76,100,96,83,0,148,88,101,92,78],
[130,130,98,91,86,81,113,88,100,102,0,94,128,107,108],
[110,137,126,112,111,127,137,127,123,162,156,0,129,137,96],
[102,117,112,113,110,88,114,112,91,149,122,121,0,133,85],
[138,148,139,136,132,106,155,144,131,158,143,113,117,0,112],
[128,182,142,123,124,113,174,155,120,172,142,154,165,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 69, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,112,107,99,121,154,132,154,108,114,108,135,146,160],
[132,0,120,121,118,108,169,128,143,132,115,129,119,148,151],
[138,130,0,99,114,128,135,109,146,151,109,122,115,152,153],
[143,129,151,0,133,132,147,150,162,132,134,121,147,147,157],
[151,132,136,117,0,114,148,130,155,123,121,126,138,147,141],
[129,142,122,118,136,0,155,138,142,144,117,129,153,143,159],
[96,81,115,103,102,95,0,90,126,102,83,86,96,110,132],
[118,122,141,100,120,112,160,0,147,136,125,113,147,126,147],
[96,107,104,88,95,108,124,103,0,122,109,93,96,109,135],
[142,118,99,118,127,106,148,114,128,0,104,136,127,128,150],
[136,135,141,116,129,133,167,125,141,146,0,125,141,158,159],
[142,121,128,129,124,121,164,137,157,114,125,0,153,147,148],
[115,131,135,103,112,97,154,103,154,123,109,97,0,131,143],
[104,102,98,103,103,107,140,124,141,122,92,103,119,0,135],
[90,99,97,93,109,91,118,103,115,100,91,102,107,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 70, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,136,120,120,115,119,135,130,123,146,113,126,103,127],
[138,0,134,112,143,146,133,140,129,129,147,119,119,112,110],
[114,116,0,93,119,119,134,109,108,133,122,119,122,112,119],
[130,138,157,0,145,146,159,144,134,137,139,118,159,121,139],
[130,107,131,105,0,125,130,123,135,143,141,110,131,108,110],
[135,104,131,104,125,0,115,117,90,112,120,114,117,103,102],
[131,117,116,91,120,135,0,124,109,122,128,97,129,111,108],
[115,110,141,106,127,133,126,0,113,124,131,99,126,129,122],
[120,121,142,116,115,160,141,137,0,142,137,102,148,129,134],
[127,121,117,113,107,138,128,126,108,0,114,115,120,115,122],
[104,103,128,111,109,130,122,119,113,136,0,97,125,101,110],
[137,131,131,132,140,136,153,151,148,135,153,0,160,116,118],
[124,131,128,91,119,133,121,124,102,130,125,90,0,114,111],
[147,138,138,129,142,147,139,121,121,135,149,134,136,0,111],
[123,140,131,111,140,148,142,128,116,128,140,132,139,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 71, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,114,112,142,116,126,113,135,134,127,111,132,140,137],
[120,0,115,105,139,112,117,122,133,130,118,112,124,138,129],
[136,135,0,123,159,139,134,120,136,124,144,133,142,151,134],
[138,145,127,0,137,122,131,127,130,127,142,118,139,149,139],
[108,111,91,113,0,103,116,110,110,128,122,113,128,129,110],
[134,138,111,128,147,0,138,136,137,136,130,122,137,138,132],
[124,133,116,119,134,112,0,124,122,123,139,123,141,141,117],
[137,128,130,123,140,114,126,0,130,127,136,131,146,138,144],
[115,117,114,120,140,113,128,120,0,134,125,110,131,138,119],
[116,120,126,123,122,114,127,123,116,0,137,109,128,147,129],
[123,132,106,108,128,120,111,114,125,113,0,112,111,125,114],
[139,138,117,132,137,128,127,119,140,141,138,0,134,141,142],
[118,126,108,111,122,113,109,104,119,122,139,116,0,129,127],
[110,112,99,101,121,112,109,112,112,103,125,109,121,0,100],
[113,121,116,111,140,118,133,106,131,121,136,108,123,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 72, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,139,131,139,135,144,135,138,145,130,150,142,125,126],
[131,0,140,130,121,146,139,139,136,145,149,146,132,137,127],
[111,110,0,125,131,131,124,120,131,126,114,147,116,121,114],
[119,120,125,0,123,137,120,126,138,144,126,145,123,107,121],
[111,129,119,127,0,145,128,116,134,135,137,130,120,120,115],
[115,104,119,113,105,0,126,119,118,126,106,130,111,98,102],
[106,111,126,130,122,124,0,128,129,125,127,131,121,123,112],
[115,111,130,124,134,131,122,0,140,119,135,140,122,100,131],
[112,114,119,112,116,132,121,110,0,123,123,135,113,111,109],
[105,105,124,106,115,124,125,131,127,0,118,133,118,95,110],
[120,101,136,124,113,144,123,115,127,132,0,142,128,103,112],
[100,104,103,105,120,120,119,110,115,117,108,0,106,95,108],
[108,118,134,127,130,139,129,128,137,132,122,144,0,132,113],
[125,113,129,143,130,152,127,150,139,155,147,155,118,0,124],
[124,123,136,129,135,148,138,119,141,140,138,142,137,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 73, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,131,112,127,126,120,122,125,133,123,126,129,139,117],
[127,0,137,113,121,131,121,125,123,121,132,117,133,136,130],
[119,113,0,106,123,120,113,118,116,117,120,121,123,127,114],
[138,137,144,0,137,142,128,136,140,152,132,125,147,147,133],
[123,129,127,113,0,120,117,115,118,127,131,114,132,123,121],
[124,119,130,108,130,0,115,125,114,119,125,113,134,132,113],
[130,129,137,122,133,135,0,130,130,140,140,121,141,143,132],
[128,125,132,114,135,125,120,0,122,127,125,115,135,125,127],
[125,127,134,110,132,136,120,128,0,133,140,116,132,137,126],
[117,129,133,98,123,131,110,123,117,0,134,116,135,125,124],
[127,118,130,118,119,125,110,125,110,116,0,109,128,133,115],
[124,133,129,125,136,137,129,135,134,134,141,0,140,139,130],
[121,117,127,103,118,116,109,115,118,115,122,110,0,121,120],
[111,114,123,103,127,118,107,125,113,125,117,111,129,0,117],
[133,120,136,117,129,137,118,123,124,126,135,120,130,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 74, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,139,141,138,130,118,129,140,127,114,132,121,133,128],
[133,0,126,122,141,127,127,118,114,125,114,125,107,136,128],
[111,124,0,107,117,126,103,115,106,130,96,122,98,124,118],
[109,128,143,0,141,142,112,122,99,125,110,136,106,122,118],
[112,109,133,109,0,117,129,115,104,112,108,125,102,120,113],
[120,123,124,108,133,0,122,133,111,115,109,126,125,136,122],
[132,123,147,138,121,128,0,122,113,140,122,141,126,134,124],
[121,132,135,128,135,117,128,0,112,136,118,145,121,131,129],
[110,136,144,151,146,139,137,138,0,138,140,135,122,140,129],
[123,125,120,125,138,135,110,114,112,0,108,125,100,133,119],
[136,136,154,140,142,141,128,132,110,142,0,143,129,133,123],
[118,125,128,114,125,124,109,105,115,125,107,0,116,139,108],
[129,143,152,144,148,125,124,129,128,150,121,134,0,141,116],
[117,114,126,128,130,114,116,119,110,117,117,111,109,0,114],
[122,122,132,132,137,128,126,121,121,131,127,142,134,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 75, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,116,133,124,106,143,142,120,113,111,138,132,112,130],
[123,0,108,145,128,108,152,123,110,109,115,134,131,114,98],
[134,142,0,139,130,138,151,155,130,134,130,146,128,121,151],
[117,105,111,0,116,110,115,145,99,113,108,139,128,131,114],
[126,122,120,134,0,135,131,138,117,111,121,109,134,125,117],
[144,142,112,140,115,0,159,132,138,111,125,142,127,122,134],
[107,98,99,135,119,91,0,131,97,95,112,123,102,105,101],
[108,127,95,105,112,118,119,0,113,112,101,107,112,124,108],
[130,140,120,151,133,112,153,137,0,105,127,132,137,141,131],
[137,141,116,137,139,139,155,138,145,0,129,153,121,127,130],
[139,135,120,142,129,125,138,149,123,121,0,133,143,141,132],
[112,116,104,111,141,108,127,143,118,97,117,0,110,109,119],
[118,119,122,122,116,123,148,138,113,129,107,140,0,129,135],
[138,136,129,119,125,128,145,126,109,123,109,141,121,0,115],
[120,152,99,136,133,116,149,142,119,120,118,131,115,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 76, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,126,125,128,112,127,116,129,119,121,118,122,130,131],
[117,0,128,116,122,121,130,113,124,125,122,116,123,125,116],
[124,122,0,130,121,121,125,117,119,127,114,115,118,126,117],
[125,134,120,0,130,114,135,130,133,130,127,119,118,124,121],
[122,128,129,120,0,108,127,126,131,116,118,124,113,122,117],
[138,129,129,136,142,0,134,131,134,127,129,121,129,127,130],
[123,120,125,115,123,116,0,112,132,129,117,125,120,122,118],
[134,137,133,120,124,119,138,0,132,131,122,122,126,130,120],
[121,126,131,117,119,116,118,118,0,121,110,121,113,126,122],
[131,125,123,120,134,123,121,119,129,0,123,116,115,121,117],
[129,128,136,123,132,121,133,128,140,127,0,119,124,136,130],
[132,134,135,131,126,129,125,128,129,134,131,0,121,133,137],
[128,127,132,132,137,121,130,124,137,135,126,129,0,128,132],
[120,125,124,126,128,123,128,120,124,129,114,117,122,0,114],
[119,134,133,129,133,120,132,130,128,133,120,113,118,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 77, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,134,135,140,128,133,126,133,123,129,135,133,135,125],
[121,0,111,135,124,131,126,125,128,121,128,122,114,125,116],
[116,139,0,126,134,120,124,118,124,110,126,122,128,126,117],
[115,115,124,0,120,137,127,121,99,115,120,111,117,119,104],
[110,126,116,130,0,110,113,119,133,111,121,105,121,122,113],
[122,119,130,113,140,0,121,119,118,131,102,114,130,132,122],
[117,124,126,123,137,129,0,116,117,118,113,129,115,119,113],
[124,125,132,129,131,131,134,0,120,128,119,115,147,126,113],
[117,122,126,151,117,132,133,130,0,125,128,120,132,129,115],
[127,129,140,135,139,119,132,122,125,0,117,119,127,126,114],
[121,122,124,130,129,148,137,131,122,133,0,124,126,132,125],
[115,128,128,139,145,136,121,135,130,131,126,0,136,130,134],
[117,136,122,133,129,120,135,103,118,123,124,114,0,120,119],
[115,125,124,131,128,118,131,124,121,124,118,120,130,0,109],
[125,134,133,146,137,128,137,137,135,136,125,116,131,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 78, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,128,126,122,135,130,139,131,122,121,131,138,126,138],
[122,0,137,127,126,140,132,126,119,122,140,133,134,128,133],
[122,113,0,117,113,119,127,140,105,115,121,127,149,118,128],
[124,123,133,0,123,129,116,141,124,118,133,124,140,119,134],
[128,124,137,127,0,136,142,145,125,120,127,139,149,131,139],
[115,110,131,121,114,0,121,146,112,115,125,132,129,121,125],
[120,118,123,134,108,129,0,146,118,128,129,130,124,110,132],
[111,124,110,109,105,104,104,0,124,120,112,118,131,97,119],
[119,131,145,126,125,138,132,126,0,117,123,133,117,118,143],
[128,128,135,132,130,135,122,130,133,0,129,144,156,136,142],
[129,110,129,117,123,125,121,138,127,121,0,132,136,121,127],
[119,117,123,126,111,118,120,132,117,106,118,0,137,125,137],
[112,116,101,110,101,121,126,119,133,94,114,113,0,106,128],
[124,122,132,131,119,129,140,153,132,114,129,125,144,0,140],
[112,117,122,116,111,125,118,131,107,108,123,113,122,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 79, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,138,124,113,110,107,130,130,126,127,119,132,112,115],
[125,0,138,139,130,128,130,132,131,138,132,128,132,119,121],
[112,112,0,126,118,104,118,116,109,115,124,113,126,99,112],
[126,111,124,0,105,113,125,131,119,118,122,120,126,106,116],
[137,120,132,145,0,104,128,134,129,130,133,131,135,129,121],
[140,122,146,137,146,0,137,137,141,140,139,138,146,118,116],
[143,120,132,125,122,113,0,131,126,124,133,130,133,121,120],
[120,118,134,119,116,113,119,0,121,129,125,117,130,115,111],
[120,119,141,131,121,109,124,129,0,119,125,117,130,112,112],
[124,112,135,132,120,110,126,121,131,0,127,122,135,95,119],
[123,118,126,128,117,111,117,125,125,123,0,125,122,107,106],
[131,122,137,130,119,112,120,133,133,128,125,0,132,115,117],
[118,118,124,124,115,104,117,120,120,115,128,118,0,111,105],
[138,131,151,144,121,132,129,135,138,155,143,135,139,0,132],
[135,129,138,134,129,134,130,139,138,131,144,133,145,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 80, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,129,126,134,140,137,120,147,132,130,133,129,129,122],
[128,0,134,123,139,135,136,125,137,139,117,133,131,138,118],
[121,116,0,122,130,142,118,120,128,130,125,131,124,128,127],
[124,127,128,0,122,133,128,124,136,139,126,137,126,132,126],
[116,111,120,128,0,120,132,112,126,126,112,132,119,124,121],
[110,115,108,117,130,0,123,117,134,131,126,127,133,122,117],
[113,114,132,122,118,127,0,115,127,125,124,127,117,122,117],
[130,125,130,126,138,133,135,0,143,141,130,137,145,144,133],
[103,113,122,114,124,116,123,107,0,113,119,118,112,118,115],
[118,111,120,111,124,119,125,109,137,0,115,124,126,136,122],
[120,133,125,124,138,124,126,120,131,135,0,137,128,128,126],
[117,117,119,113,118,123,123,113,132,126,113,0,121,133,122],
[121,119,126,124,131,117,133,105,138,124,122,129,0,129,123],
[121,112,122,118,126,128,128,106,132,114,122,117,121,0,117],
[128,132,123,124,129,133,133,117,135,128,124,128,127,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 81, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,122,145,133,130,124,124,115,137,119,127,132,124,135],
[123,0,125,130,128,119,129,113,113,129,121,119,118,131,131],
[128,125,0,132,120,129,129,119,110,127,118,130,130,136,144],
[105,120,118,0,116,114,116,119,108,125,117,116,117,125,124],
[117,122,130,134,0,129,126,126,117,124,120,140,140,136,125],
[120,131,121,136,121,0,128,122,115,126,121,117,127,140,142],
[126,121,121,134,124,122,0,112,121,124,121,126,119,124,126],
[126,137,131,131,124,128,138,0,121,137,125,137,138,133,137],
[135,137,140,142,133,135,129,129,0,136,123,126,131,131,138],
[113,121,123,125,126,124,126,113,114,0,127,123,120,127,118],
[131,129,132,133,130,129,129,125,127,123,0,122,129,133,135],
[123,131,120,134,110,133,124,113,124,127,128,0,132,120,133],
[118,132,120,133,110,123,131,112,119,130,121,118,0,129,133],
[126,119,114,125,114,110,126,117,119,123,117,130,121,0,131],
[115,119,106,126,125,108,124,113,112,132,115,117,117,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 82, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,126,124,129,133,124,136,140,139,120,129,130,127,135],
[116,0,121,111,118,119,127,117,123,139,120,118,127,127,120],
[124,129,0,125,125,120,123,129,130,139,127,126,131,134,131],
[126,139,125,0,128,125,130,125,141,138,135,124,126,135,137],
[121,132,125,122,0,131,125,120,125,120,124,125,127,125,132],
[117,131,130,125,119,0,126,126,134,133,120,127,122,134,132],
[126,123,127,120,125,124,0,124,127,132,124,120,141,129,134],
[114,133,121,125,130,124,126,0,136,130,116,119,129,133,137],
[110,127,120,109,125,116,123,114,0,122,111,121,113,119,122],
[111,111,111,112,130,117,118,120,128,0,121,120,122,129,130],
[130,130,123,115,126,130,126,134,139,129,0,125,120,126,127],
[121,132,124,126,125,123,130,131,129,130,125,0,123,121,122],
[120,123,119,124,123,128,109,121,137,128,130,127,0,125,130],
[123,123,116,115,125,116,121,117,131,121,124,129,125,0,124],
[115,130,119,113,118,118,116,113,128,120,123,128,120,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 83, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,135,137,136,129,123,119,145,125,137,135,122,131,129],
[115,0,127,137,111,134,136,137,128,136,108,124,120,140,134],
[115,123,0,143,123,127,125,129,137,114,125,115,122,133,126],
[113,113,107,0,120,106,122,113,112,102,103,109,111,125,122],
[114,139,127,130,0,139,132,121,130,123,112,127,130,135,120],
[121,116,123,144,111,0,135,123,121,133,111,120,108,142,127],
[127,114,125,128,118,115,0,116,133,133,123,119,120,126,126],
[131,113,121,137,129,127,134,0,137,125,140,122,127,153,145],
[105,122,113,138,120,129,117,113,0,129,107,132,111,137,125],
[125,114,136,148,127,117,117,125,121,0,134,132,104,149,118],
[113,142,125,147,138,139,127,110,143,116,0,134,118,130,127],
[115,126,135,141,123,130,131,128,118,118,116,0,111,143,117],
[128,130,128,139,120,142,130,123,139,146,132,139,0,130,128],
[119,110,117,125,115,108,124,97,113,101,120,107,120,0,116],
[121,116,124,128,130,123,124,105,125,132,123,133,122,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 84, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,148,144,137,134,146,126,132,143,129,125,130,140,136],
[112,0,131,127,123,126,120,115,127,132,114,119,125,125,128],
[102,119,0,122,124,110,114,111,128,124,121,112,124,116,115],
[106,123,128,0,111,129,120,121,119,130,121,113,110,122,118],
[113,127,126,139,0,122,124,119,121,133,131,119,124,118,139],
[116,124,140,121,128,0,130,115,137,132,133,117,117,119,132],
[104,130,136,130,126,120,0,112,134,135,114,117,126,127,120],
[124,135,139,129,131,135,138,0,128,128,126,124,130,128,137],
[118,123,122,131,129,113,116,122,0,123,114,112,115,125,114],
[107,118,126,120,117,118,115,122,127,0,110,108,115,120,116],
[121,136,129,129,119,117,136,124,136,140,0,120,123,131,126],
[125,131,138,137,131,133,133,126,138,142,130,0,138,125,139],
[120,125,126,140,126,133,124,120,135,135,127,112,0,115,141],
[110,125,134,128,132,131,123,122,125,130,119,125,135,0,130],
[114,122,135,132,111,118,130,113,136,134,124,111,109,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 85, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,118,103,111,107,122,108,104,122,105,98,113,94,114],
[123,0,125,123,120,114,117,120,125,132,124,118,124,109,121],
[132,125,0,121,123,135,132,113,111,132,120,120,121,117,130],
[147,127,129,0,128,136,127,127,113,140,133,123,127,113,148],
[139,130,127,122,0,134,120,123,124,127,142,132,109,113,132],
[143,136,115,114,116,0,118,112,124,123,141,120,108,125,136],
[128,133,118,123,130,132,0,119,114,136,126,135,129,121,149],
[142,130,137,123,127,138,131,0,129,134,129,126,122,124,146],
[146,125,139,137,126,126,136,121,0,150,128,133,121,113,140],
[128,118,118,110,123,127,114,116,100,0,113,112,105,111,114],
[145,126,130,117,108,109,124,121,122,137,0,113,121,106,127],
[152,132,130,127,118,130,115,124,117,138,137,0,130,120,146],
[137,126,129,123,141,142,121,128,129,145,129,120,0,112,142],
[156,141,133,137,137,125,129,126,137,139,144,130,138,0,146],
[136,129,120,102,118,114,101,104,110,136,123,104,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 86, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,149,132,112,147,135,134,119,138,125,108,155,127,127],
[111,0,126,116,107,123,116,131,100,103,90,110,140,102,105],
[101,124,0,114,114,105,111,121,98,119,91,86,140,116,116],
[118,134,136,0,110,132,139,139,112,122,92,126,147,131,121],
[138,143,136,140,0,131,156,151,131,128,125,111,159,150,125],
[103,127,145,118,119,0,119,136,102,139,114,86,143,119,112],
[115,134,139,111,94,131,0,124,126,122,107,96,144,127,116],
[116,119,129,111,99,114,126,0,103,105,119,96,142,103,104],
[131,150,152,138,119,148,124,147,0,139,123,115,158,129,123],
[112,147,131,128,122,111,128,145,111,0,109,105,145,112,127],
[125,160,159,158,125,136,143,131,127,141,0,117,179,141,129],
[142,140,164,124,139,164,154,154,135,145,133,0,147,162,129],
[95,110,110,103,91,107,106,108,92,105,71,103,0,118,99],
[123,148,134,119,100,131,123,147,121,138,109,88,132,0,119],
[123,145,134,129,125,138,134,146,127,123,121,121,151,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 87, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,116,123,138,138,127,120,128,85,116,116,113,123,132],
[123,0,113,148,144,119,121,140,138,125,139,133,137,115,128],
[134,137,0,139,145,136,125,121,147,113,126,137,129,114,133],
[127,102,111,0,133,120,117,113,123,108,119,107,125,112,123],
[112,106,105,117,0,111,127,108,129,98,120,116,117,102,129],
[112,131,114,130,139,0,136,131,132,118,114,119,105,102,129],
[123,129,125,133,123,114,0,126,128,100,114,119,126,105,133],
[130,110,129,137,142,119,124,0,124,117,139,119,131,102,131],
[122,112,103,127,121,118,122,126,0,113,122,124,120,105,129],
[165,125,137,142,152,132,150,133,137,0,143,144,141,125,131],
[134,111,124,131,130,136,136,111,128,107,0,109,114,100,123],
[134,117,113,143,134,131,131,131,126,106,141,0,123,112,146],
[137,113,121,125,133,145,124,119,130,109,136,127,0,119,138],
[127,135,136,138,148,148,145,148,145,125,150,138,131,0,158],
[118,122,117,127,121,121,117,119,121,119,127,104,112,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 88, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,161,132,135,128,157,149,150,163,162,143,155,130,112],
[98,0,146,118,137,147,136,141,131,139,159,154,152,154,127],
[89,104,0,113,99,120,145,116,116,120,139,109,124,128,97],
[118,132,137,0,117,136,150,152,126,124,147,123,149,140,123],
[115,113,151,133,0,148,140,136,142,135,132,120,139,121,106],
[122,103,130,114,102,0,104,124,93,96,138,113,143,133,135],
[93,114,105,100,110,146,0,111,101,111,117,143,135,133,104],
[101,109,134,98,114,126,139,0,113,126,138,121,130,112,99],
[100,119,134,124,108,157,149,137,0,138,148,114,129,135,119],
[87,111,130,126,115,154,139,124,112,0,145,121,150,118,125],
[88,91,111,103,118,112,133,112,102,105,0,103,146,126,112],
[107,96,141,127,130,137,107,129,136,129,147,0,135,137,132],
[95,98,126,101,111,107,115,120,121,100,104,115,0,108,105],
[120,96,122,110,129,117,117,138,115,132,124,113,142,0,135],
[138,123,153,127,144,115,146,151,131,125,138,118,145,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 89, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,172,123,161,175,140,127,97,91,127,124,158,133,145],
[76,0,130,114,126,162,98,132,94,96,101,140,114,136,159],
[78,120,0,94,122,105,132,116,71,80,88,116,120,70,122],
[127,136,156,0,135,141,147,166,183,129,137,142,121,136,155],
[89,124,128,115,0,162,122,152,121,116,119,128,152,126,187],
[75,88,145,109,88,0,86,107,107,81,109,119,134,123,94],
[110,152,118,103,128,164,0,146,121,131,126,131,112,93,135],
[123,118,134,84,98,143,104,0,152,94,136,96,110,118,144],
[153,156,179,67,129,143,129,98,0,128,164,127,108,140,157],
[159,154,170,121,134,169,119,156,122,0,153,140,155,130,172],
[123,149,162,113,131,141,124,114,86,97,0,129,164,107,139],
[126,110,134,108,122,131,119,154,123,110,121,0,159,74,142],
[92,136,130,129,98,116,138,140,142,95,86,91,0,93,136],
[117,114,180,114,124,127,157,132,110,120,143,176,157,0,141],
[105,91,128,95,63,156,115,106,93,78,111,108,114,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 90, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,130,134,126,136,131,129,134,126,130,134,117,124,120],
[116,0,133,139,128,131,127,124,132,119,123,134,112,136,120],
[120,117,0,133,115,128,116,126,134,124,123,141,123,132,120],
[116,111,117,0,122,138,129,121,122,126,129,136,105,116,109],
[124,122,135,128,0,143,130,128,130,125,125,143,132,133,116],
[114,119,122,112,107,0,125,121,131,110,120,135,107,109,110],
[119,123,134,121,120,125,0,132,118,117,124,137,112,129,118],
[121,126,124,129,122,129,118,0,127,111,127,127,112,126,117],
[116,118,116,128,120,119,132,123,0,117,114,125,117,118,109],
[124,131,126,124,125,140,133,139,133,0,125,138,131,139,130],
[120,127,127,121,125,130,126,123,136,125,0,136,113,133,124],
[116,116,109,114,107,115,113,123,125,112,114,0,102,120,116],
[133,138,127,145,118,143,138,138,133,119,137,148,0,134,136],
[126,114,118,134,117,141,121,124,132,111,117,130,116,0,124],
[130,130,130,141,134,140,132,133,141,120,126,134,114,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 91, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,133,163,130,122,143,82,133,97,141,141,102,173,100],
[117,0,116,153,95,83,163,75,151,157,126,68,157,130,91],
[117,134,0,117,101,119,165,96,109,141,136,102,171,125,91],
[87,97,133,0,125,123,128,94,163,103,105,21,128,79,113],
[120,155,149,125,0,142,174,111,120,120,150,131,131,114,120],
[128,167,131,127,108,0,174,122,136,102,171,88,141,105,134],
[107,87,85,122,76,76,0,73,112,70,79,26,41,77,118],
[168,175,154,156,139,128,177,0,182,154,148,100,177,195,128],
[117,99,141,87,130,114,138,68,0,149,118,65,104,78,157],
[153,93,109,147,130,148,180,96,101,0,219,88,116,125,161],
[109,124,114,145,100,79,171,102,132,31,0,58,108,92,148],
[109,182,148,229,119,162,224,150,185,162,192,0,185,139,183],
[148,93,79,122,119,109,209,73,146,134,142,65,0,149,157],
[77,120,125,171,136,145,173,55,172,125,158,111,101,0,164],
[150,159,159,137,130,116,132,122,93,89,102,67,93,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 92, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,130,135,129,124,133,129,135,134,134,132,137,122,133],
[121,0,118,136,116,128,135,135,131,135,132,124,137,131,126],
[120,132,0,130,128,129,131,124,126,135,132,115,134,123,137],
[115,114,120,0,123,119,116,116,121,130,132,114,132,120,125],
[121,134,122,127,0,128,120,127,127,123,127,133,133,121,125],
[126,122,121,131,122,0,124,118,126,134,129,121,130,120,122],
[117,115,119,134,130,126,0,123,129,126,130,117,139,124,129],
[121,115,126,134,123,132,127,0,129,133,131,123,144,119,124],
[115,119,124,129,123,124,121,121,0,123,131,124,138,125,132],
[116,115,115,120,127,116,124,117,127,0,125,117,117,119,114],
[116,118,118,118,123,121,120,119,119,125,0,115,133,112,114],
[118,126,135,136,117,129,133,127,126,133,135,0,127,135,126],
[113,113,116,118,117,120,111,106,112,133,117,123,0,119,123],
[128,119,127,130,129,130,126,131,125,131,138,115,131,0,132],
[117,124,113,125,125,128,121,126,118,136,136,124,127,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 93, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,132,137,129,130,136,130,123,152,137,125,128,139,124],
[114,0,121,130,114,124,118,113,113,136,119,122,113,120,108],
[118,129,0,136,120,118,133,114,115,127,124,123,121,131,110],
[113,120,114,0,109,119,117,104,115,122,116,112,120,110,98],
[121,136,130,141,0,127,140,128,121,144,135,122,139,130,117],
[120,126,132,131,123,0,130,123,127,134,131,125,114,124,110],
[114,132,117,133,110,120,0,120,116,127,114,121,118,118,114],
[120,137,136,146,122,127,130,0,126,138,133,133,133,128,114],
[127,137,135,135,129,123,134,124,0,141,135,134,127,125,129],
[98,114,123,128,106,116,123,112,109,0,112,103,108,109,97],
[113,131,126,134,115,119,136,117,115,138,0,127,111,123,111],
[125,128,127,138,128,125,129,117,116,147,123,0,139,125,119],
[122,137,129,130,111,136,132,117,123,142,139,111,0,137,114],
[111,130,119,140,120,126,132,122,125,141,127,125,113,0,102],
[126,142,140,152,133,140,136,136,121,153,139,131,136,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 94, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,129,130,96,124,107,119,114,117,108,116,124,123,123],
[121,0,117,129,103,121,107,126,114,114,104,105,113,124,114],
[121,133,0,124,119,127,119,121,111,119,111,114,113,125,119],
[120,121,126,0,106,122,112,122,106,120,106,110,120,102,121],
[154,147,131,144,0,132,133,154,133,136,136,137,146,138,125],
[126,129,123,128,118,0,115,133,116,112,116,112,131,112,129],
[143,143,131,138,117,135,0,142,127,120,125,132,151,131,132],
[131,124,129,128,96,117,108,0,118,109,112,99,117,115,126],
[136,136,139,144,117,134,123,132,0,131,128,132,138,141,140],
[133,136,131,130,114,138,130,141,119,0,121,122,138,126,125],
[142,146,139,144,114,134,125,138,122,129,0,121,130,128,125],
[134,145,136,140,113,138,118,151,118,128,129,0,142,124,132],
[126,137,137,130,104,119,99,133,112,112,120,108,0,119,134],
[127,126,125,148,112,138,119,135,109,124,122,126,131,0,121],
[127,136,131,129,125,121,118,124,110,125,125,118,116,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 95, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,132,125,132,119,134,122,138,118,110,132,131,131,127],
[126,0,127,128,125,128,131,127,130,124,118,138,126,140,140],
[118,123,0,116,116,121,133,116,118,116,112,125,121,125,121],
[125,122,134,0,117,131,134,129,120,121,115,128,134,134,126],
[118,125,134,133,0,133,127,137,121,117,120,138,123,132,127],
[131,122,129,119,117,0,126,123,135,117,125,124,124,130,129],
[116,119,117,116,123,124,0,119,127,117,117,123,112,121,128],
[128,123,134,121,113,127,131,0,128,123,120,133,120,130,133],
[112,120,132,130,129,115,123,122,0,111,115,126,128,132,119],
[132,126,134,129,133,133,133,127,139,0,122,133,128,126,128],
[140,132,138,135,130,125,133,130,135,128,0,134,123,136,134],
[118,112,125,122,112,126,127,117,124,117,116,0,119,126,130],
[119,124,129,116,127,126,138,130,122,122,127,131,0,134,132],
[119,110,125,116,118,120,129,120,118,124,114,124,116,0,116],
[123,110,129,124,123,121,122,117,131,122,116,120,118,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 96, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,150,115,118,121,137,130,121,133,126,130,141,130,105],
[109,0,128,111,101,117,112,114,105,115,95,107,108,109,98],
[100,122,0,107,95,119,123,107,108,128,122,126,126,123,120],
[135,139,143,0,129,128,136,124,112,133,133,144,136,133,128],
[132,149,155,121,0,128,127,113,127,132,126,148,123,144,143],
[129,133,131,122,122,0,111,120,126,146,119,141,140,140,124],
[113,138,127,114,123,139,0,128,104,132,121,148,150,145,125],
[120,136,143,126,137,130,122,0,120,147,118,139,131,141,123],
[129,145,142,138,123,124,146,130,0,129,135,142,146,148,120],
[117,135,122,117,118,104,118,103,121,0,112,138,119,110,112],
[124,155,128,117,124,131,129,132,115,138,0,132,119,130,117],
[120,143,124,106,102,109,102,111,108,112,118,0,124,115,122],
[109,142,124,114,127,110,100,119,104,131,131,126,0,133,134],
[120,141,127,117,106,110,105,109,102,140,120,135,117,0,110],
[145,152,130,122,107,126,125,127,130,138,133,128,116,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 97, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,142,136,137,142,130,147,135,136,122,131,150,153,133],
[112,0,126,122,123,148,125,126,124,124,122,123,124,142,123],
[108,124,0,122,125,132,133,127,125,126,113,105,132,129,111],
[114,128,128,0,123,124,125,123,131,130,122,122,140,120,120],
[113,127,125,127,0,134,115,115,129,113,123,122,135,127,115],
[108,102,118,126,116,0,105,106,112,109,113,114,123,126,120],
[120,125,117,125,135,145,0,115,134,118,138,118,149,129,133],
[103,124,123,127,135,144,135,0,132,125,133,111,151,149,121],
[115,126,125,119,121,138,116,118,0,121,128,116,147,138,132],
[114,126,124,120,137,141,132,125,129,0,135,127,148,130,123],
[128,128,137,128,127,137,112,117,122,115,0,130,132,136,121],
[119,127,145,128,128,136,132,139,134,123,120,0,144,137,124],
[100,126,118,110,115,127,101,99,103,102,118,106,0,125,123],
[97,108,121,130,123,124,121,101,112,120,114,113,125,0,117],
[117,127,139,130,135,130,117,129,118,127,129,126,127,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 98, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,123,129,118,127,138,112,115,133,115,135,122,120,123],
[125,0,127,118,125,125,134,121,119,121,125,125,127,120,112],
[127,123,0,118,124,131,129,127,121,118,118,134,120,122,125],
[121,132,132,0,135,137,128,121,125,129,110,122,119,123,123],
[132,125,126,115,0,131,127,128,122,118,115,135,119,130,117],
[123,125,119,113,119,0,123,112,112,116,100,121,114,120,115],
[112,116,121,122,123,127,0,112,121,122,115,120,117,129,117],
[138,129,123,129,122,138,138,0,120,113,122,135,119,125,120],
[135,131,129,125,128,138,129,130,0,127,134,138,130,129,132],
[117,129,132,121,132,134,128,137,123,0,129,120,125,122,122],
[135,125,132,140,135,150,135,128,116,121,0,133,120,140,126],
[115,125,116,128,115,129,130,115,112,130,117,0,121,122,119],
[128,123,130,131,131,136,133,131,120,125,130,129,0,138,126],
[130,130,128,127,120,130,121,125,121,128,110,128,112,0,125],
[127,138,125,127,133,135,133,130,118,128,124,131,124,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 99, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,120,119,128,113,125,137,109,137,133,128,115,132,127],
[132,0,124,119,124,123,122,124,111,135,124,125,118,118,112],
[130,126,0,129,130,121,130,120,129,139,144,133,120,128,120],
[131,131,121,0,129,120,127,129,121,146,142,127,124,126,129],
[122,126,120,121,0,107,131,119,118,130,124,126,106,120,117],
[137,127,129,130,143,0,132,128,122,138,134,128,115,131,134],
[125,128,120,123,119,118,0,127,113,129,124,123,116,118,125],
[113,126,130,121,131,122,123,0,114,131,131,120,115,130,127],
[141,139,121,129,132,128,137,136,0,147,142,136,132,130,127],
[113,115,111,104,120,112,121,119,103,0,119,113,107,113,128],
[117,126,106,108,126,116,126,119,108,131,0,127,114,122,116],
[122,125,117,123,124,122,127,130,114,137,123,0,116,121,128],
[135,132,130,126,144,135,134,135,118,143,136,134,0,133,121],
[118,132,122,124,130,119,132,120,120,137,128,129,117,0,117],
[123,138,130,121,133,116,125,123,123,122,134,122,129,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 100, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,130,127,117,127,126,124,124,140,129,126,124,122,121],
[122,0,131,123,126,119,130,112,131,126,138,131,124,115,114],
[120,119,0,115,124,130,121,130,109,132,118,132,118,131,131],
[123,127,135,0,126,146,139,121,131,130,133,131,132,138,136],
[133,124,126,124,0,128,127,125,127,133,129,123,127,131,142],
[123,131,120,104,122,0,116,117,127,129,133,121,119,108,117],
[124,120,129,111,123,134,0,112,129,137,139,120,127,113,126],
[126,138,120,129,125,133,138,0,136,133,146,134,122,124,134],
[126,119,141,119,123,123,121,114,0,125,142,133,118,115,111],
[110,124,118,120,117,121,113,117,125,0,126,115,129,123,137],
[121,112,132,117,121,117,111,104,108,124,0,127,107,107,123],
[124,119,118,119,127,129,130,116,117,135,123,0,122,121,123],
[126,126,132,118,123,131,123,128,132,121,143,128,0,118,125],
[128,135,119,112,119,142,137,126,135,127,143,129,132,0,137],
[129,136,119,114,108,133,124,116,139,113,127,127,125,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 101, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,119,66,119,79,96,89,135,101,38,123,151,66,107],
[91,0,144,91,107,148,95,104,132,154,63,160,151,91,132],
[131,106,0,98,98,164,70,107,174,133,82,123,139,72,125],
[184,159,152,0,117,130,70,73,174,101,38,133,202,38,135],
[131,143,152,133,0,114,121,99,158,111,99,133,164,105,212],
[171,102,86,120,136,0,80,36,76,102,102,92,100,120,151],
[154,155,180,180,129,170,0,129,152,129,117,173,170,170,170],
[161,146,143,177,151,214,121,0,186,250,187,163,151,135,202],
[115,118,76,76,92,174,98,64,0,86,76,98,139,66,107],
[149,96,117,149,139,148,121,0,164,0,115,70,139,123,176],
[212,187,168,212,151,148,133,63,174,135,0,133,192,125,125],
[127,90,127,117,117,158,77,87,152,180,117,0,107,117,158],
[99,99,111,48,86,150,80,99,111,111,58,143,0,58,117],
[184,159,178,212,145,130,80,115,184,127,125,133,192,0,167],
[143,118,125,115,38,99,80,48,143,74,125,92,133,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 102, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,139,130,140,122,117,112,135,134,130,137,122,124,129],
[112,0,134,117,122,107,96,119,126,104,135,105,113,107,125],
[111,116,0,122,118,102,119,103,127,115,130,114,102,135,108],
[120,133,128,0,146,120,134,129,137,135,155,130,135,144,126],
[110,128,132,104,0,128,123,124,141,133,131,108,113,137,117],
[128,143,148,130,122,0,127,135,146,150,148,136,130,144,144],
[133,154,131,116,127,123,0,121,121,130,122,106,120,142,124],
[138,131,147,121,126,115,129,0,129,147,142,143,137,144,141],
[115,124,123,113,109,104,129,121,0,125,131,109,115,127,113],
[116,146,135,115,117,100,120,103,125,0,124,113,108,146,122],
[120,115,120,95,119,102,128,108,119,126,0,122,110,116,104],
[113,145,136,120,142,114,144,107,141,137,128,0,125,140,124],
[128,137,148,115,137,120,130,113,135,142,140,125,0,142,132],
[126,143,115,106,113,106,108,106,123,104,134,110,108,0,125],
[121,125,142,124,133,106,126,109,137,128,146,126,118,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 103, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,124,141,138,132,147,125,155,122,139,131,136,117,145],
[130,0,119,126,130,132,131,134,131,132,131,117,134,121,118],
[126,131,0,124,134,136,129,119,136,122,116,115,131,117,130],
[109,124,126,0,124,133,132,127,131,116,118,108,121,108,123],
[112,120,116,126,0,134,122,122,125,121,127,108,138,114,124],
[118,118,114,117,116,0,117,114,116,128,129,94,131,108,108],
[103,119,121,118,128,133,0,140,130,111,126,122,120,122,133],
[125,116,131,123,128,136,110,0,134,132,128,118,127,102,123],
[95,119,114,119,125,134,120,116,0,118,101,113,110,108,108],
[128,118,128,134,129,122,139,118,132,0,125,113,135,120,127],
[111,119,134,132,123,121,124,122,149,125,0,116,122,135,114],
[119,133,135,142,142,156,128,132,137,137,134,0,133,121,124],
[114,116,119,129,112,119,130,123,140,115,128,117,0,129,121],
[133,129,133,142,136,142,128,148,142,130,115,129,121,0,128],
[105,132,120,127,126,142,117,127,142,123,136,126,129,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 104, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,120,106,123,130,116,132,128,123,114,104,115,141,132],
[116,0,121,105,121,146,122,124,113,118,127,106,91,118,116],
[130,129,0,106,116,140,128,126,126,109,121,109,117,119,117],
[144,145,144,0,138,153,128,148,139,141,132,131,118,156,149],
[127,129,134,112,0,132,119,130,105,123,124,103,125,121,129],
[120,104,110,97,118,0,110,115,95,114,108,90,111,114,103],
[134,128,122,122,131,140,0,125,115,127,107,110,100,120,129],
[118,126,124,102,120,135,125,0,107,113,119,99,95,126,120],
[122,137,124,111,145,155,135,143,0,114,118,100,130,127,134],
[127,132,141,109,127,136,123,137,136,0,120,107,134,151,131],
[136,123,129,118,126,142,143,131,132,130,0,107,127,128,137],
[146,144,141,119,147,160,140,151,150,143,143,0,119,136,148],
[135,159,133,132,125,139,150,155,120,116,123,131,0,149,146],
[109,132,131,94,129,136,130,124,123,99,122,114,101,0,118],
[118,134,133,101,121,147,121,130,116,119,113,102,104,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 105, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,110,101,109,113,108,107,88,103,131,98,115,88],
[149,0,118,119,111,111,125,102,116,114,124,138,125,135,112],
[146,132,0,127,138,102,147,125,117,126,129,136,142,130,108],
[140,131,123,0,117,123,153,121,107,109,122,150,120,124,138],
[149,139,112,133,0,126,126,129,104,144,130,143,128,143,111],
[141,139,148,127,124,0,123,122,129,120,127,139,141,130,118],
[137,125,103,97,124,127,0,112,113,108,118,130,117,116,114],
[142,148,125,129,121,128,138,0,136,125,133,135,148,138,128],
[143,134,133,143,146,121,137,114,0,136,133,151,147,127,126],
[162,136,124,141,106,130,142,125,114,0,128,144,142,124,121],
[147,126,121,128,120,123,132,117,117,122,0,136,148,137,114],
[119,112,114,100,107,111,120,115,99,106,114,0,113,117,101],
[152,125,108,130,122,109,133,102,103,108,102,137,0,111,112],
[135,115,120,126,107,120,134,112,123,126,113,133,139,0,133],
[162,138,142,112,139,132,136,122,124,129,136,149,138,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 106, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,140,130,138,116,142,140,118,142,129,137,129,136,140],
[111,0,114,131,129,127,134,117,127,122,121,130,125,124,112],
[110,136,0,130,129,129,138,123,127,120,128,129,140,130,121],
[120,119,120,0,128,113,127,117,119,138,115,119,120,128,125],
[112,121,121,122,0,124,128,121,113,121,122,115,125,137,126],
[134,123,121,137,126,0,128,126,123,135,116,139,133,129,122],
[108,116,112,123,122,122,0,90,122,125,113,117,127,134,121],
[110,133,127,133,129,124,160,0,120,136,133,123,152,123,128],
[132,123,123,131,137,127,128,130,0,139,133,120,139,130,135],
[108,128,130,112,129,115,125,114,111,0,114,120,138,116,120],
[121,129,122,135,128,134,137,117,117,136,0,135,140,135,136],
[113,120,121,131,135,111,133,127,130,130,115,0,133,131,123],
[121,125,110,130,125,117,123,98,111,112,110,117,0,134,115],
[114,126,120,122,113,121,116,127,120,134,115,119,116,0,118],
[110,138,129,125,124,128,129,122,115,130,114,127,135,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 107, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,126,127,114,134,115,121,135,136,110,140,120,137,109],
[139,0,111,115,128,131,112,102,122,134,122,129,117,122,115],
[124,139,0,128,132,140,124,111,123,118,127,136,125,137,123],
[123,135,122,0,145,130,131,121,144,125,127,118,127,134,132],
[136,122,118,105,0,142,106,107,128,134,140,127,111,129,111],
[116,119,110,120,108,0,104,109,121,123,111,147,112,125,123],
[135,138,126,119,144,146,0,119,143,143,130,134,128,139,135],
[129,148,139,129,143,141,131,0,153,124,126,146,126,137,135],
[115,128,127,106,122,129,107,97,0,110,116,124,119,125,102],
[114,116,132,125,116,127,107,126,140,0,127,146,125,125,124],
[140,128,123,123,110,139,120,124,134,123,0,133,117,123,118],
[110,121,114,132,123,103,116,104,126,104,117,0,100,123,125],
[130,133,125,123,139,138,122,124,131,125,133,150,0,119,126],
[113,128,113,116,121,125,111,113,125,125,127,127,131,0,113],
[141,135,127,118,139,127,115,115,148,126,132,125,124,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 108, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,132,133,135,131,126,142,129,124,121,149,131,133,143],
[123,0,111,119,132,130,108,125,130,114,112,125,116,117,128],
[118,139,0,127,138,146,131,122,141,127,124,155,125,135,140],
[117,131,123,0,122,120,123,120,127,122,114,136,131,124,128],
[115,118,112,128,0,130,123,120,111,115,117,142,113,122,122],
[119,120,104,130,120,0,109,117,104,104,121,138,100,108,116],
[124,142,119,127,127,141,0,123,115,114,101,132,104,119,125],
[108,125,128,130,130,133,127,0,124,121,124,128,116,135,132],
[121,120,109,123,139,146,135,126,0,107,129,132,118,134,134],
[126,136,123,128,135,146,136,129,143,0,118,124,122,130,139],
[129,138,126,136,133,129,149,126,121,132,0,137,119,130,135],
[101,125,95,114,108,112,118,122,118,126,113,0,113,112,120],
[119,134,125,119,137,150,146,134,132,128,131,137,0,142,140],
[117,133,115,126,128,142,131,115,116,120,120,138,108,0,117],
[107,122,110,122,128,134,125,118,116,111,115,130,110,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 109, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,136,123,142,120,140,145,135,146,123,127,119,145,142],
[121,0,139,137,130,113,124,124,140,145,130,115,120,144,117],
[114,111,0,119,120,108,115,123,127,118,111,101,121,134,111],
[127,113,131,0,144,123,116,132,115,137,111,118,118,154,115],
[108,120,130,106,0,122,129,138,128,130,115,114,116,141,107],
[130,137,142,127,128,0,123,139,138,139,125,123,110,161,117],
[110,126,135,134,121,127,0,134,112,121,123,120,120,143,120],
[105,126,127,118,112,111,116,0,116,125,114,110,106,130,106],
[115,110,123,135,122,112,138,134,0,131,123,116,114,140,112],
[104,105,132,113,120,111,129,125,119,0,117,113,102,139,123],
[127,120,139,139,135,125,127,136,127,133,0,122,122,145,112],
[123,135,149,132,136,127,130,140,134,137,128,0,126,153,118],
[131,130,129,132,134,140,130,144,136,148,128,124,0,155,137],
[105,106,116,96,109,89,107,120,110,111,105,97,95,0,95],
[108,133,139,135,143,133,130,144,138,127,138,132,113,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 110, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,117,121,123,130,120,114,129,123,124,128,121,121,106],
[124,0,121,124,133,120,121,133,130,123,125,140,135,127,121],
[133,129,0,131,119,123,119,128,131,130,132,126,130,116,114],
[129,126,119,0,129,127,125,128,136,131,138,139,124,140,130],
[127,117,131,121,0,127,122,122,126,122,137,131,129,116,111],
[120,130,127,123,123,0,119,130,128,130,124,132,129,117,126],
[130,129,131,125,128,131,0,136,128,127,131,136,135,134,120],
[136,117,122,122,128,120,114,0,124,127,131,126,126,126,111],
[121,120,119,114,124,122,122,126,0,123,127,135,129,119,112],
[127,127,120,119,128,120,123,123,127,0,126,142,128,118,115],
[126,125,118,112,113,126,119,119,123,124,0,131,131,120,125],
[122,110,124,111,119,118,114,124,115,108,119,0,117,114,108],
[129,115,120,126,121,121,115,124,121,122,119,133,0,119,109],
[129,123,134,110,134,133,116,124,131,132,130,136,131,0,124],
[144,129,136,120,139,124,130,139,138,135,125,142,141,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 111, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,96,118,173,104,131,145,131,125,147,111,127,125,88],
[125,0,115,104,107,122,119,100,141,136,163,117,81,127,86],
[154,135,0,108,138,110,142,162,123,120,145,88,102,124,99],
[132,146,142,0,147,126,144,129,139,123,133,91,122,104,133],
[77,143,112,103,0,87,100,79,121,138,101,103,110,78,110],
[146,128,140,124,163,0,134,162,132,166,182,112,106,139,109],
[119,131,108,106,150,116,0,135,126,146,151,90,109,109,76],
[105,150,88,121,171,88,115,0,113,119,145,99,90,105,93],
[119,109,127,111,129,118,124,137,0,129,166,131,76,96,118],
[125,114,130,127,112,84,104,131,121,0,107,73,80,77,90],
[103,87,105,117,149,68,99,105,84,143,0,116,73,86,126],
[139,133,162,159,147,138,160,151,119,177,134,0,108,101,134],
[123,169,148,128,140,144,141,160,174,170,177,142,0,144,119],
[125,123,126,146,172,111,141,145,154,173,164,149,106,0,128],
[162,164,151,117,140,141,174,157,132,160,124,116,131,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 112, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,86,123,111,75,100,111,77,97,112,83,115,113,109],
[174,0,139,140,98,126,155,117,135,136,134,130,163,129,100],
[164,111,0,112,126,121,139,131,132,138,143,143,142,119,87],
[127,110,138,0,102,118,132,109,110,129,133,101,107,147,113],
[139,152,124,148,0,140,151,148,146,154,129,151,154,138,114],
[175,124,129,132,110,0,141,116,121,158,125,134,151,140,107],
[150,95,111,118,99,109,0,119,76,134,148,115,135,139,120],
[139,133,119,141,102,134,131,0,152,158,131,141,155,128,131],
[173,115,118,140,104,129,174,98,0,124,118,113,168,124,133],
[153,114,112,121,96,92,116,92,126,0,101,98,165,106,130],
[138,116,107,117,121,125,102,119,132,149,0,113,163,134,120],
[167,120,107,149,99,116,135,109,137,152,137,0,164,127,120],
[135,87,108,143,96,99,115,95,82,85,87,86,0,113,98],
[137,121,131,103,112,110,111,122,126,144,116,123,137,0,108],
[141,150,163,137,136,143,130,119,117,120,130,130,152,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 113, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,120,121,118,102,136,128,110,123,107,115,121,134,116],
[147,0,145,123,132,128,141,147,130,136,124,136,116,148,149],
[130,105,0,114,112,115,132,123,114,107,108,122,102,128,136],
[129,127,136,0,132,113,137,144,125,119,128,134,126,136,138],
[132,118,138,118,0,135,126,132,114,119,120,127,117,134,131],
[148,122,135,137,115,0,136,139,139,118,123,137,118,147,141],
[114,109,118,113,124,114,0,112,120,112,107,126,109,127,123],
[122,103,127,106,118,111,138,0,129,112,110,116,111,118,124],
[140,120,136,125,136,111,130,121,0,116,124,120,124,129,132],
[127,114,143,131,131,132,138,138,134,0,126,130,130,127,129],
[143,126,142,122,130,127,143,140,126,124,0,139,131,134,141],
[135,114,128,116,123,113,124,134,130,120,111,0,114,116,124],
[129,134,148,124,133,132,141,139,126,120,119,136,0,123,144],
[116,102,122,114,116,103,123,132,121,123,116,134,127,0,103],
[134,101,114,112,119,109,127,126,118,121,109,126,106,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 114, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,94,116,103,88,86,99,105,107,94,113,112,122,97],
[170,0,135,117,152,131,150,139,155,172,129,141,151,166,132],
[156,115,0,125,129,129,125,163,142,134,116,139,126,125,145],
[134,133,125,0,127,134,110,139,148,132,103,140,125,127,96],
[147,98,121,123,0,122,116,146,124,138,123,136,116,138,140],
[162,119,121,116,128,0,135,135,142,148,149,163,170,152,150],
[164,100,125,140,134,115,0,163,146,149,129,166,138,136,141],
[151,111,87,111,104,115,87,0,103,118,112,142,115,112,97],
[145,95,108,102,126,108,104,147,0,119,138,122,131,125,141],
[143,78,116,118,112,102,101,132,131,0,151,143,131,119,137],
[156,121,134,147,127,101,121,138,112,99,0,136,121,151,119],
[137,109,111,110,114,87,84,108,128,107,114,0,121,142,131],
[138,99,124,125,134,80,112,135,119,119,129,129,0,137,113],
[128,84,125,123,112,98,114,138,125,131,99,108,113,0,142],
[153,118,105,154,110,100,109,153,109,113,131,119,137,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 115, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,119,111,136,101,141,106,146,111,136,142,85,131,104],
[124,0,108,116,137,119,129,119,126,109,142,144,133,139,113],
[131,142,0,121,153,123,147,103,158,134,160,158,125,144,117],
[139,134,129,0,128,111,154,128,147,134,147,170,121,168,141],
[114,113,97,122,0,92,135,102,121,101,149,128,85,109,102],
[149,131,127,139,158,0,159,137,152,133,163,157,111,143,151],
[109,121,103,96,115,91,0,110,149,113,116,146,101,118,122],
[144,131,147,122,148,113,140,0,148,125,124,150,127,122,124],
[104,124,92,103,129,98,101,102,0,119,120,123,108,135,109],
[139,141,116,116,149,117,137,125,131,0,153,146,135,140,121],
[114,108,90,103,101,87,134,126,130,97,0,140,103,123,121],
[108,106,92,80,122,93,104,100,127,104,110,0,111,114,124],
[165,117,125,129,165,139,149,123,142,115,147,139,0,144,128],
[119,111,106,82,141,107,132,128,115,110,127,136,106,0,128],
[146,137,133,109,148,99,128,126,141,129,129,126,122,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 116, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,116,108,126,121,113,115,125,120,107,115,109,118,114],
[140,0,116,128,119,120,114,125,132,122,116,114,118,127,122],
[134,134,0,124,130,124,115,126,128,118,117,126,128,129,121],
[142,122,126,0,130,122,121,118,131,134,122,126,123,117,121],
[124,131,120,120,0,117,117,120,129,116,110,118,115,106,114],
[129,130,126,128,133,0,113,125,126,124,126,132,122,122,123],
[137,136,135,129,133,137,0,128,142,127,130,132,122,129,129],
[135,125,124,132,130,125,122,0,126,128,133,123,118,123,135],
[125,118,122,119,121,124,108,124,0,117,117,117,113,132,115],
[130,128,132,116,134,126,123,122,133,0,118,129,124,121,129],
[143,134,133,128,140,124,120,117,133,132,0,129,121,129,123],
[135,136,124,124,132,118,118,127,133,121,121,0,116,129,132],
[141,132,122,127,135,128,128,132,137,126,129,134,0,130,126],
[132,123,121,133,144,128,121,127,118,129,121,121,120,0,122],
[136,128,129,129,136,127,121,115,135,121,127,118,124,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 117, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,122,121,130,125,131,124,130,139,117,135,132,138,120],
[118,0,119,117,120,116,124,126,128,122,117,134,126,131,124],
[128,131,0,121,136,127,139,125,125,135,124,138,136,147,134],
[129,133,129,0,130,113,136,129,137,143,124,139,136,128,143],
[120,130,114,120,0,114,122,124,121,117,109,133,124,137,121],
[125,134,123,137,136,0,136,121,137,141,127,139,150,133,138],
[119,126,111,114,128,114,0,122,122,126,108,128,126,126,128],
[126,124,125,121,126,129,128,0,126,135,113,128,138,132,133],
[120,122,125,113,129,113,128,124,0,127,104,130,119,126,119],
[111,128,115,107,133,109,124,115,123,0,111,128,124,120,118],
[133,133,126,126,141,123,142,137,146,139,0,144,139,139,136],
[115,116,112,111,117,111,122,122,120,122,106,0,127,131,116],
[118,124,114,114,126,100,124,112,131,126,111,123,0,130,123],
[112,119,103,122,113,117,124,118,124,130,111,119,120,0,116],
[130,126,116,107,129,112,122,117,131,132,114,134,127,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 118, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,135,146,136,122,126,145,142,148,136,137,131,146,137],
[123,0,124,123,129,120,136,145,110,144,133,132,137,142,124],
[115,126,0,143,149,106,118,142,142,131,157,131,139,135,120],
[104,127,107,0,124,98,125,122,127,120,121,108,132,105,135],
[114,121,101,126,0,112,135,136,119,142,132,117,119,109,128],
[128,130,144,152,138,0,130,154,141,145,143,145,132,148,122],
[124,114,132,125,115,120,0,155,129,118,135,123,122,116,120],
[105,105,108,128,114,96,95,0,127,122,127,117,105,117,131],
[108,140,108,123,131,109,121,123,0,120,137,120,112,131,123],
[102,106,119,130,108,105,132,128,130,0,120,120,112,108,119],
[114,117,93,129,118,107,115,123,113,130,0,106,116,132,142],
[113,118,119,142,133,105,127,133,130,130,144,0,129,127,127],
[119,113,111,118,131,118,128,145,138,138,134,121,0,117,138],
[104,108,115,145,141,102,134,133,119,142,118,123,133,0,125],
[113,126,130,115,122,128,130,119,127,131,108,123,112,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 119, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,112,76,81,101,82,83,85,105,124,143,106,98,162],
[173,0,116,127,89,134,108,144,112,126,145,135,147,95,153],
[138,134,0,146,113,179,95,152,137,131,181,144,143,107,166],
[174,123,104,0,127,162,136,137,144,142,131,135,144,88,159],
[169,161,137,123,0,164,122,167,156,145,162,166,159,156,160],
[149,116,71,88,86,0,74,98,63,53,140,136,146,147,133],
[168,142,155,114,128,176,0,173,183,134,169,173,168,174,200],
[167,106,98,113,83,152,77,0,121,85,150,108,123,98,167],
[165,138,113,106,94,187,67,129,0,137,148,129,135,130,168],
[145,124,119,108,105,197,116,165,113,0,164,198,192,108,177],
[126,105,69,119,88,110,81,100,102,86,0,104,104,109,111],
[107,115,106,115,84,114,77,142,121,52,146,0,165,104,190],
[144,103,107,106,91,104,82,127,115,58,146,85,0,138,180],
[152,155,143,162,94,103,76,152,120,142,141,146,112,0,147],
[88,97,84,91,90,117,50,83,82,73,139,60,70,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 120, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,117,142,134,125,140,101,118,118,108,148,116,127,108],
[144,0,124,156,139,121,158,124,127,130,112,146,135,143,130],
[133,126,0,144,130,108,126,114,105,135,123,153,124,125,118],
[108,94,106,0,115,103,110,90,111,122,91,117,102,126,108],
[116,111,120,135,0,118,108,115,128,121,106,130,112,115,101],
[125,129,142,147,132,0,125,115,135,130,121,150,138,150,136],
[110,92,124,140,142,125,0,114,116,129,102,145,125,116,108],
[149,126,136,160,135,135,136,0,146,145,109,158,126,142,124],
[132,123,145,139,122,115,134,104,0,122,111,128,106,138,128],
[132,120,115,128,129,120,121,105,128,0,113,139,126,131,114],
[142,138,127,159,144,129,148,141,139,137,0,146,136,138,125],
[102,104,97,133,120,100,105,92,122,111,104,0,111,127,103],
[134,115,126,148,138,112,125,124,144,124,114,139,0,130,124],
[123,107,125,124,135,100,134,108,112,119,112,123,120,0,120],
[142,120,132,142,149,114,142,126,122,136,125,147,126,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 121, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,125,120,125,125,127,124,133,129,118,130,122,115,126],
[125,0,119,125,130,126,129,127,126,126,125,137,122,115,110],
[125,131,0,132,130,128,124,135,131,127,124,121,134,130,124],
[130,125,118,0,128,126,126,137,117,120,121,134,119,121,123],
[125,120,120,122,0,119,120,128,130,125,121,118,125,119,119],
[125,124,122,124,131,0,117,130,121,125,123,112,124,120,121],
[123,121,126,124,130,133,0,130,132,121,117,124,123,116,122],
[126,123,115,113,122,120,120,0,123,126,125,123,130,104,121],
[117,124,119,133,120,129,118,127,0,126,126,119,123,116,123],
[121,124,123,130,125,125,129,124,124,0,118,125,126,125,110],
[132,125,126,129,129,127,133,125,124,132,0,130,127,121,123],
[120,113,129,116,132,138,126,127,131,125,120,0,123,125,116],
[128,128,116,131,125,126,127,120,127,124,123,127,0,118,123],
[135,135,120,129,131,130,134,146,134,125,129,125,132,0,125],
[124,140,126,127,131,129,128,129,127,140,127,134,127,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 122, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,101,111,121,111,117,98,118,111,91,116,88,96,107],
[163,0,121,147,137,140,129,162,159,150,131,168,138,123,148],
[149,129,0,137,133,114,132,153,122,140,123,129,117,142,126],
[139,103,113,0,115,107,126,141,136,133,96,147,94,113,113],
[129,113,117,135,0,137,127,154,126,130,100,149,91,129,123],
[139,110,136,143,113,0,127,158,130,155,123,146,101,130,117],
[133,121,118,124,123,123,0,145,129,122,98,123,95,118,113],
[152,88,97,109,96,92,105,0,122,128,118,128,116,101,91],
[132,91,128,114,124,120,121,128,0,130,105,139,101,122,128],
[139,100,110,117,120,95,128,122,120,0,105,122,101,112,100],
[159,119,127,154,150,127,152,132,145,145,0,163,130,117,126],
[134,82,121,103,101,104,127,122,111,128,87,0,82,100,110],
[162,112,133,156,159,149,155,134,149,149,120,168,0,135,124],
[154,127,108,137,121,120,132,149,128,138,133,150,115,0,115],
[143,102,124,137,127,133,137,159,122,150,124,140,126,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 123, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,146,136,134,136,142,145,148,122,121,134,129,119,140],
[119,0,157,144,140,133,139,136,159,130,123,140,149,141,159],
[104,93,0,120,117,105,108,109,123,95,98,112,107,103,115],
[114,106,130,0,127,114,123,119,143,115,102,130,126,99,139],
[116,110,133,123,0,111,119,115,142,97,109,108,129,106,129],
[114,117,145,136,139,0,132,127,139,107,118,126,117,123,132],
[108,111,142,127,131,118,0,122,144,112,110,134,124,121,124],
[105,114,141,131,135,123,128,0,149,124,102,142,126,118,133],
[102,91,127,107,108,111,106,101,0,106,102,116,105,113,104],
[128,120,155,135,153,143,138,126,144,0,119,134,127,127,138],
[129,127,152,148,141,132,140,148,148,131,0,135,129,122,141],
[116,110,138,120,142,124,116,108,134,116,115,0,128,120,130],
[121,101,143,124,121,133,126,124,145,123,121,122,0,122,139],
[131,109,147,151,144,127,129,132,137,123,128,130,128,0,146],
[110,91,135,111,121,118,126,117,146,112,109,120,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 124, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,105,126,121,100,96,115,117,122,112,106,107,99,117],
[134,0,122,136,139,103,119,130,129,132,114,131,129,114,131],
[145,128,0,132,154,110,124,118,119,123,116,111,118,112,124],
[124,114,118,0,132,110,110,136,113,126,110,111,122,101,115],
[129,111,96,118,0,109,100,121,115,114,101,94,112,113,124],
[150,147,140,140,141,0,131,133,115,121,107,143,126,118,133],
[154,131,126,140,150,119,0,153,119,130,138,121,148,130,137],
[135,120,132,114,129,117,97,0,106,127,114,105,123,111,105],
[133,121,131,137,135,135,131,144,0,132,129,140,129,112,121],
[128,118,127,124,136,129,120,123,118,0,107,113,105,98,121],
[138,136,134,140,149,143,112,136,121,143,0,118,125,127,122],
[144,119,139,139,156,107,129,145,110,137,132,0,134,118,130],
[143,121,132,128,138,124,102,127,121,145,125,116,0,108,114],
[151,136,138,149,137,132,120,139,138,152,123,132,142,0,134],
[133,119,126,135,126,117,113,145,129,129,128,120,136,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 125, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,110,96,88,104,120,101,111,120,98,128,120,97,112],
[140,0,144,132,101,143,141,115,132,127,115,113,127,140,139],
[140,106,0,110,113,93,131,110,115,98,108,111,132,116,119],
[154,118,140,0,126,122,133,128,124,143,135,121,152,133,155],
[162,149,137,124,0,128,155,144,129,141,117,131,147,135,141],
[146,107,157,128,122,0,125,146,132,130,130,111,151,147,128],
[130,109,119,117,95,125,0,92,121,110,97,103,106,105,112],
[149,135,140,122,106,104,158,0,115,147,134,158,144,134,117],
[139,118,135,126,121,118,129,135,0,138,96,126,134,139,119],
[130,123,152,107,109,120,140,103,112,0,86,124,137,106,121],
[152,135,142,115,133,120,153,116,154,164,0,114,145,153,164],
[122,137,139,129,119,139,147,92,124,126,136,0,153,140,134],
[130,123,118,98,103,99,144,106,116,113,105,97,0,99,111],
[153,110,134,117,115,103,145,116,111,144,97,110,151,0,130],
[138,111,131,95,109,122,138,133,131,129,86,116,139,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 126, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,92,112,86,107,110,129,126,152,128,90,112,94,91],
[141,0,97,134,105,108,135,160,122,135,128,137,137,105,117],
[158,153,0,138,109,120,115,153,121,157,147,120,147,142,126],
[138,116,112,0,105,91,123,124,111,131,134,74,115,99,79],
[164,145,141,145,0,148,128,138,121,134,119,134,131,124,121],
[143,142,130,159,102,0,132,154,142,127,135,136,157,134,114],
[140,115,135,127,122,118,0,133,139,143,117,104,128,126,126],
[121,90,97,126,112,96,117,0,147,152,105,117,136,108,105],
[124,128,129,139,129,108,111,103,0,137,107,105,124,120,127],
[98,115,93,119,116,123,107,98,113,0,79,113,121,104,82],
[122,122,103,116,131,115,133,145,143,171,0,102,136,129,94],
[160,113,130,176,116,114,146,133,145,137,148,0,128,110,126],
[138,113,103,135,119,93,122,114,126,129,114,122,0,74,98],
[156,145,108,151,126,116,124,142,130,146,121,140,176,0,139],
[159,133,124,171,129,136,124,145,123,168,156,124,152,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 127, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,195,195,240,86,145,142,200,72,236,134,204,128,195],
[116,0,241,146,146,99,155,119,167,155,132,155,155,155,149],
[55,9,0,66,89,85,45,75,137,45,55,75,49,19,135],
[55,104,184,0,177,55,115,75,137,78,55,104,114,108,211],
[10,104,161,73,0,52,101,108,137,42,55,144,52,52,99],
[164,151,165,195,198,0,177,89,128,187,164,181,160,89,211],
[105,95,205,135,149,73,0,99,191,33,171,135,144,73,161],
[108,131,175,175,142,161,151,0,167,131,138,161,180,171,155],
[50,83,113,113,113,122,59,83,0,83,99,113,122,113,83],
[178,95,205,172,208,63,217,119,167,0,194,214,214,110,211],
[14,118,195,195,195,86,79,112,151,56,0,148,148,142,165],
[116,95,175,146,106,69,115,89,137,36,102,0,89,80,149],
[46,95,201,136,198,90,106,70,128,36,102,161,0,66,149],
[122,95,231,142,198,161,177,79,137,140,108,170,184,0,211],
[55,101,115,39,151,39,89,95,167,39,85,101,101,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 128, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,87,98,93,47,69,103,83,98,55,54,74,77,94],
[179,0,122,188,193,103,65,138,126,153,89,117,106,109,120],
[163,128,0,121,147,104,90,156,122,149,121,99,119,118,132],
[152,62,129,0,112,80,65,143,99,113,112,100,125,95,79],
[157,57,103,138,0,75,66,109,43,63,104,58,95,78,85],
[203,147,146,170,175,0,140,181,169,171,131,116,166,156,164],
[181,185,160,185,184,110,0,168,159,181,131,135,166,138,139],
[147,112,94,107,141,69,82,0,70,88,87,68,67,117,86],
[167,124,128,151,207,81,91,180,0,139,166,130,153,104,111],
[152,97,101,137,187,79,69,162,111,0,123,128,93,94,105],
[195,161,129,138,146,119,119,163,84,127,0,104,117,128,136],
[196,133,151,150,192,134,115,182,120,122,146,0,142,122,160],
[176,144,131,125,155,84,84,183,97,157,133,108,0,72,137],
[173,141,132,155,172,94,112,133,146,156,122,128,178,0,146],
[156,130,118,171,165,86,111,164,139,145,114,90,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 129, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,97,128,131,131,129,100,128,104,123,96,126,115,126],
[132,0,103,152,129,123,131,110,130,115,130,116,123,127,125],
[153,147,0,140,147,113,129,117,121,126,136,111,126,140,117],
[122,98,110,0,97,103,137,121,124,120,137,99,126,133,113],
[119,121,103,153,0,105,134,105,116,138,120,112,125,140,121],
[119,127,137,147,145,0,153,103,141,125,146,121,142,141,133],
[121,119,121,113,116,97,0,105,119,101,121,110,119,130,98],
[150,140,133,129,145,147,145,0,145,125,147,120,132,143,130],
[122,120,129,126,134,109,131,105,0,118,130,111,126,124,116],
[146,135,124,130,112,125,149,125,132,0,150,124,104,131,124],
[127,120,114,113,130,104,129,103,120,100,0,108,121,120,107],
[154,134,139,151,138,129,140,130,139,126,142,0,130,142,121],
[124,127,124,124,125,108,131,118,124,146,129,120,0,131,112],
[135,123,110,117,110,109,120,107,126,119,130,108,119,0,124],
[124,125,133,137,129,117,152,120,134,126,143,129,138,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 130, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,122,125,142,120,128,129,122,136,125,130,128,123,130],
[124,0,126,129,128,125,119,137,117,132,131,121,122,129,112],
[128,124,0,121,121,109,121,129,106,136,130,121,107,123,128],
[125,121,129,0,118,111,121,135,114,119,117,122,112,120,120],
[108,122,129,132,0,122,126,133,121,136,124,136,117,117,130],
[130,125,141,139,128,0,137,138,128,130,133,136,124,134,129],
[122,131,129,129,124,113,0,128,115,123,130,123,118,125,123],
[121,113,121,115,117,112,122,0,108,124,113,122,107,124,123],
[128,133,144,136,129,122,135,142,0,140,128,145,112,134,131],
[114,118,114,131,114,120,127,126,110,0,125,129,116,116,117],
[125,119,120,133,126,117,120,137,122,125,0,131,128,128,120],
[120,129,129,128,114,114,127,128,105,121,119,0,107,127,118],
[122,128,143,138,133,126,132,143,138,134,122,143,0,134,135],
[127,121,127,130,133,116,125,126,116,134,122,123,116,0,140],
[120,138,122,130,120,121,127,127,119,133,130,132,115,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 131, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,126,121,121,110,129,120,125,121,124,118,121,117,132],
[121,0,124,113,122,128,140,130,135,121,123,125,135,128,128],
[124,126,0,126,138,118,132,121,117,117,117,131,127,114,115],
[129,137,124,0,131,128,132,137,142,119,129,118,135,142,125],
[129,128,112,119,0,112,136,115,126,116,117,118,120,134,137],
[140,122,132,122,138,0,134,124,139,125,123,128,121,123,128],
[121,110,118,118,114,116,0,122,119,112,124,112,113,110,103],
[130,120,129,113,135,126,128,0,146,119,126,126,120,135,126],
[125,115,133,108,124,111,131,104,0,115,114,124,120,129,115],
[129,129,133,131,134,125,138,131,135,0,119,134,124,130,131],
[126,127,133,121,133,127,126,124,136,131,0,116,124,128,123],
[132,125,119,132,132,122,138,124,126,116,134,0,119,133,121],
[129,115,123,115,130,129,137,130,130,126,126,131,0,118,130],
[133,122,136,108,116,127,140,115,121,120,122,117,132,0,126],
[118,122,135,125,113,122,147,124,135,119,127,129,120,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 132, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,119,166,154,152,155,158,150,160,142,145,136,156,151],
[114,0,121,135,152,151,151,131,145,134,143,139,149,141,146],
[131,129,0,138,185,149,158,139,167,134,140,124,144,163,140],
[84,115,112,0,129,138,140,123,122,136,131,117,128,133,120],
[96,98,65,121,0,136,127,118,111,108,120,103,111,126,113],
[98,99,101,112,114,0,117,105,111,120,96,87,107,136,99],
[95,99,92,110,123,133,0,106,117,115,95,102,107,124,107],
[92,119,111,127,132,145,144,0,131,133,125,103,118,128,119],
[100,105,83,128,139,139,133,119,0,133,115,110,113,116,110],
[90,116,116,114,142,130,135,117,117,0,116,128,118,148,124],
[108,107,110,119,130,154,155,125,135,134,0,120,125,137,133],
[105,111,126,133,147,163,148,147,140,122,130,0,125,129,120],
[114,101,106,122,139,143,143,132,137,132,125,125,0,152,140],
[94,109,87,117,124,114,126,122,134,102,113,121,98,0,130],
[99,104,110,130,137,151,143,131,140,126,117,130,110,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 133, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,126,112,124,121,111,106,127,112,122,118,118,123,128],
[126,0,122,127,135,119,125,122,120,127,130,121,122,119,139],
[124,128,0,127,140,130,134,119,123,114,134,119,119,113,138],
[138,123,123,0,142,136,128,115,129,120,132,123,126,121,145],
[126,115,110,108,0,124,107,113,103,106,117,102,115,107,121],
[129,131,120,114,126,0,126,114,115,109,123,126,124,123,141],
[139,125,116,122,143,124,0,125,129,112,129,125,120,124,136],
[144,128,131,135,137,136,125,0,132,123,139,126,133,128,143],
[123,130,127,121,147,135,121,118,0,125,132,126,112,135,143],
[138,123,136,130,144,141,138,127,125,0,138,125,127,134,145],
[128,120,116,118,133,127,121,111,118,112,0,113,117,115,130],
[132,129,131,127,148,124,125,124,124,125,137,0,132,126,142],
[132,128,131,124,135,126,130,117,138,123,133,118,0,122,145],
[127,131,137,129,143,127,126,122,115,116,135,124,128,0,142],
[122,111,112,105,129,109,114,107,107,105,120,108,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 134, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,142,129,131,112,125,129,129,119,113,130,134,113,131],
[119,0,132,115,148,115,110,106,119,109,107,118,137,113,115],
[108,118,0,104,125,114,105,86,111,112,88,128,129,101,112],
[121,135,146,0,141,123,118,113,133,98,116,134,137,108,138],
[119,102,125,109,0,121,106,110,114,90,91,115,124,106,105],
[138,135,136,127,129,0,119,112,140,118,120,135,126,105,112],
[125,140,145,132,144,131,0,134,134,120,126,137,144,124,134],
[121,144,164,137,140,138,116,0,138,119,113,120,144,122,123],
[121,131,139,117,136,110,116,112,0,116,104,136,131,126,123],
[131,141,138,152,160,132,130,131,134,0,131,151,141,125,136],
[137,143,162,134,159,130,124,137,146,119,0,156,140,117,137],
[120,132,122,116,135,115,113,130,114,99,94,0,135,100,105],
[116,113,121,113,126,124,106,106,119,109,110,115,0,120,123],
[137,137,149,142,144,145,126,128,124,125,133,150,130,0,139],
[119,135,138,112,145,138,116,127,127,114,113,145,127,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 135, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,135,138,132,127,119,108,131,99,132,104,132,114,116],
[129,0,139,149,138,121,130,130,134,123,135,133,127,133,137],
[115,111,0,137,121,113,107,103,120,106,112,117,136,121,129],
[112,101,113,0,113,118,112,107,120,117,102,104,115,111,106],
[118,112,129,137,0,117,112,102,102,124,115,117,122,121,123],
[123,129,137,132,133,0,127,116,110,134,122,126,150,120,147],
[131,120,143,138,138,123,0,117,125,130,111,104,134,104,124],
[142,120,147,143,148,134,133,0,121,132,134,128,134,122,147],
[119,116,130,130,148,140,125,129,0,111,138,136,132,125,132],
[151,127,144,133,126,116,120,118,139,0,128,98,130,119,137],
[118,115,138,148,135,128,139,116,112,122,0,108,131,107,123],
[146,117,133,146,133,124,146,122,114,152,142,0,126,117,119],
[118,123,114,135,128,100,116,116,118,120,119,124,0,121,119],
[136,117,129,139,129,130,146,128,125,131,143,133,129,0,114],
[134,113,121,144,127,103,126,103,118,113,127,131,131,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 136, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,129,133,124,127,130,136,130,128,123,133,122,120,128],
[128,0,134,125,122,131,141,140,138,127,127,130,123,125,130],
[121,116,0,124,118,136,135,125,124,133,118,123,120,122,122],
[117,125,126,0,120,130,127,130,136,120,121,124,116,119,127],
[126,128,132,130,0,134,138,140,143,128,126,134,123,126,134],
[123,119,114,120,116,0,127,132,134,133,118,111,112,121,124],
[120,109,115,123,112,123,0,125,122,113,116,121,114,117,108],
[114,110,125,120,110,118,125,0,125,119,113,120,110,115,124],
[120,112,126,114,107,116,128,125,0,109,110,129,117,114,120],
[122,123,117,130,122,117,137,131,141,0,125,123,129,118,129],
[127,123,132,129,124,132,134,137,140,125,0,125,126,125,138],
[117,120,127,126,116,139,129,130,121,127,125,0,115,119,122],
[128,127,130,134,127,138,136,140,133,121,124,135,0,126,133],
[130,125,128,131,124,129,133,135,136,132,125,131,124,0,125],
[122,120,128,123,116,126,142,126,130,121,112,128,117,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 137, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,109,116,99,107,116,108,111,114,107,101,113,116],
[146,0,120,127,130,120,120,120,134,132,129,130,118,138,126],
[138,130,0,125,135,116,118,117,133,118,133,134,126,135,125],
[141,123,125,0,134,126,116,117,123,111,134,134,119,133,123],
[134,120,115,116,0,116,107,128,119,115,123,117,116,124,125],
[151,130,134,124,134,0,119,127,139,125,134,134,128,140,144],
[143,130,132,134,143,131,0,130,135,137,130,141,122,142,131],
[134,130,133,133,122,123,120,0,140,123,140,124,125,133,120],
[142,116,117,127,131,111,115,110,0,115,121,125,116,130,120],
[139,118,132,139,135,125,113,127,135,0,133,137,119,134,120],
[136,121,117,116,127,116,120,110,129,117,0,119,114,130,116],
[143,120,116,116,133,116,109,126,125,113,131,0,119,137,125],
[149,132,124,131,134,122,128,125,134,131,136,131,0,140,128],
[137,112,115,117,126,110,108,117,120,116,120,113,110,0,117],
[134,124,125,127,125,106,119,130,130,130,134,125,122,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 138, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,117,120,122,122,110,119,107,118,130,78,173,144,155],
[137,0,120,161,155,133,140,151,104,142,92,127,180,125,200],
[133,130,0,169,148,149,120,87,133,155,120,134,159,158,168],
[130,89,81,0,120,144,106,97,101,120,91,109,142,114,170],
[128,95,102,130,0,124,122,119,126,101,79,78,110,148,140],
[128,117,101,106,126,0,102,129,93,115,101,108,174,131,143],
[140,110,130,144,128,148,0,101,118,137,106,103,128,138,171],
[131,99,163,153,131,121,149,0,115,123,93,132,150,146,133],
[143,146,117,149,124,157,132,135,0,117,134,102,176,131,176],
[132,108,95,130,149,135,113,127,133,0,125,129,163,119,172],
[120,158,130,159,171,149,144,157,116,125,0,132,143,144,166],
[172,123,116,141,172,142,147,118,148,121,118,0,149,132,138],
[77,70,91,108,140,76,122,100,74,87,107,101,0,142,147],
[106,125,92,136,102,119,112,104,119,131,106,118,108,0,138],
[95,50,82,80,110,107,79,117,74,78,84,112,103,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 139, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,119,125,133,139,125,146,107,114,125,105,121,102,109],
[123,0,119,109,115,122,109,147,118,107,132,107,118,143,90],
[131,131,0,119,123,144,133,136,109,113,136,123,126,119,106],
[125,141,131,0,140,133,134,144,98,102,132,110,133,114,106],
[117,135,127,110,0,116,83,144,101,106,106,101,119,108,86],
[111,128,106,117,134,0,127,129,98,113,98,106,113,102,97],
[125,141,117,116,167,123,0,147,99,98,124,126,130,131,115],
[104,103,114,106,106,121,103,0,105,97,117,96,119,99,79],
[143,132,141,152,149,152,151,145,0,126,139,148,148,128,121],
[136,143,137,148,144,137,152,153,124,0,165,114,150,114,128],
[125,118,114,118,144,152,126,133,111,85,0,111,122,108,99],
[145,143,127,140,149,144,124,154,102,136,139,0,136,127,105],
[129,132,124,117,131,137,120,131,102,100,128,114,0,123,101],
[148,107,131,136,142,148,119,151,122,136,142,123,127,0,113],
[141,160,144,144,164,153,135,171,129,122,151,145,149,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 140, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,136,114,118,119,121,112,125,113,125,127,116,113,126],
[130,0,132,124,116,107,110,118,125,116,123,125,120,129,116],
[114,118,0,124,110,106,113,119,115,104,125,118,122,114,111],
[136,126,126,0,120,117,117,133,129,122,133,125,140,138,112],
[132,134,140,130,0,120,120,124,137,134,130,138,137,135,124],
[131,143,144,133,130,0,116,130,131,129,134,142,136,143,129],
[129,140,137,133,130,134,0,135,136,129,128,125,140,143,128],
[138,132,131,117,126,120,115,0,133,130,131,128,123,122,122],
[125,125,135,121,113,119,114,117,0,114,123,135,135,132,114],
[137,134,146,128,116,121,121,120,136,0,133,120,139,129,115],
[125,127,125,117,120,116,122,119,127,117,0,122,122,127,114],
[123,125,132,125,112,108,125,122,115,130,128,0,128,136,120],
[134,130,128,110,113,114,110,127,115,111,128,122,0,119,132],
[137,121,136,112,115,107,107,128,118,121,123,114,131,0,123],
[124,134,139,138,126,121,122,128,136,135,136,130,118,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 141, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,126,116,107,115,104,119,128,133,132,125,114,123,103],
[128,0,118,120,111,125,95,127,133,140,128,128,123,128,118],
[124,132,0,118,115,113,113,114,125,127,133,120,117,130,119],
[134,130,132,0,118,137,115,128,134,138,130,135,127,139,124],
[143,139,135,132,0,130,114,137,126,127,141,134,135,137,127],
[135,125,137,113,120,0,120,140,127,129,136,130,118,124,118],
[146,155,137,135,136,130,0,133,143,141,154,140,125,157,141],
[131,123,136,122,113,110,117,0,123,122,135,134,117,123,124],
[122,117,125,116,124,123,107,127,0,137,129,122,116,122,123],
[117,110,123,112,123,121,109,128,113,0,135,122,115,135,106],
[118,122,117,120,109,114,96,115,121,115,0,118,113,117,109],
[125,122,130,115,116,120,110,116,128,128,132,0,120,140,124],
[136,127,133,123,115,132,125,133,134,135,137,130,0,136,128],
[127,122,120,111,113,126,93,127,128,115,133,110,114,0,109],
[147,132,131,126,123,132,109,126,127,144,141,126,122,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 142, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,59,191,179,179,191,191,191,71,179,191,120,179,120],
[71,0,71,191,0,0,71,71,71,71,0,71,0,59,0],
[191,179,0,191,120,120,191,191,191,191,120,191,120,179,120],
[59,59,59,0,59,59,130,0,71,130,59,130,59,59,59],
[71,250,130,191,0,179,191,71,191,71,71,71,120,59,71],
[71,250,130,191,71,0,71,71,71,71,71,71,71,130,71],
[59,179,59,120,59,179,0,0,71,71,59,71,120,59,0],
[59,179,59,250,179,179,250,0,250,130,179,250,179,59,179],
[59,179,59,179,59,179,179,0,0,130,59,130,179,59,59],
[179,179,59,120,179,179,179,120,120,0,179,120,179,179,120],
[71,250,130,191,179,179,191,71,191,71,0,71,120,59,120],
[59,179,59,120,179,179,179,0,120,130,179,0,179,59,120],
[130,250,130,191,130,179,130,71,71,71,130,71,0,130,71],
[71,191,71,191,191,120,191,191,191,71,191,191,120,0,191],
[130,250,130,191,179,179,250,71,191,130,130,130,179,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 143, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,122,123,142,124,126,123,130,131,143,130,126,125,127],
[122,0,131,138,135,115,129,141,142,130,141,134,139,114,122],
[128,119,0,130,133,117,126,128,140,126,147,119,133,127,126],
[127,112,120,0,127,111,131,112,137,136,127,120,133,113,109],
[108,115,117,123,0,111,133,117,126,126,125,108,126,108,107],
[126,135,133,139,139,0,137,128,134,139,139,136,137,121,137],
[124,121,124,119,117,113,0,114,116,120,124,113,124,104,99],
[127,109,122,138,133,122,136,0,125,133,142,120,121,118,132],
[120,108,110,113,124,116,134,125,0,136,130,108,125,106,102],
[119,120,124,114,124,111,130,117,114,0,131,117,119,98,119],
[107,109,103,123,125,111,126,108,120,119,0,117,128,99,107],
[120,116,131,130,142,114,137,130,142,133,133,0,133,117,120],
[124,111,117,117,124,113,126,129,125,131,122,117,0,109,107],
[125,136,123,137,142,129,146,132,144,152,151,133,141,0,133],
[123,128,124,141,143,113,151,118,148,131,143,130,143,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 144, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,151,144,87,118,132,140,153,55,93,106,114,171,85],
[129,0,111,129,103,118,157,107,154,115,167,96,120,114,115],
[99,139,0,116,79,130,142,102,153,55,126,83,76,133,72],
[106,121,134,0,122,76,134,183,101,98,119,122,114,166,137],
[163,147,171,128,0,79,158,180,153,96,133,90,155,191,85],
[132,132,120,174,171,0,175,198,127,113,150,179,172,182,130],
[118,93,108,116,92,75,0,64,113,56,80,91,101,171,72],
[110,143,148,67,70,52,186,0,105,165,161,148,92,151,141],
[97,96,97,149,97,123,137,145,0,112,93,149,111,141,153],
[195,135,195,152,154,137,194,85,138,0,195,106,84,152,192],
[157,83,124,131,117,100,170,89,157,55,0,93,76,128,72],
[144,154,167,128,160,71,159,102,101,144,157,0,76,158,87],
[136,130,174,136,95,78,149,158,139,166,174,174,0,139,166],
[79,136,117,84,59,68,79,99,109,98,122,92,111,0,74],
[165,135,178,113,165,120,178,109,97,58,178,163,84,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 145, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,117,119,91,87,92,94,112,124,112,117,122,100,92],
[136,0,111,121,125,100,107,106,125,122,122,126,134,107,135],
[133,139,0,124,120,94,113,128,127,124,117,123,148,116,123],
[131,129,126,0,127,112,120,108,122,138,136,145,147,122,120],
[159,125,130,123,0,131,120,131,148,129,125,134,136,136,119],
[163,150,156,138,119,0,143,122,143,136,151,144,152,141,122],
[158,143,137,130,130,107,0,110,132,127,148,161,159,119,138],
[156,144,122,142,119,128,140,0,139,150,143,148,183,137,131],
[138,125,123,128,102,107,118,111,0,119,141,141,152,121,113],
[126,128,126,112,121,114,123,100,131,0,134,126,137,120,114],
[138,128,133,114,125,99,102,107,109,116,0,136,135,112,99],
[133,124,127,105,116,106,89,102,109,124,114,0,162,110,104],
[128,116,102,103,114,98,91,67,98,113,115,88,0,106,97],
[150,143,134,128,114,109,131,113,129,130,138,140,144,0,115],
[158,115,127,130,131,128,112,119,137,136,151,146,153,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 146, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,120,119,118,122,133,128,136,115,134,125,125,113,126],
[124,0,112,120,113,126,119,141,127,116,143,123,128,131,139],
[130,138,0,120,127,113,140,147,137,126,132,130,143,131,142],
[131,130,130,0,122,136,138,127,138,117,135,124,125,133,119],
[132,137,123,128,0,146,144,155,138,125,126,111,136,133,136],
[128,124,137,114,104,0,135,139,128,117,120,114,141,122,136],
[117,131,110,112,106,115,0,142,114,113,141,106,129,129,114],
[122,109,103,123,95,111,108,0,128,97,114,106,115,126,130],
[114,123,113,112,112,122,136,122,0,116,122,123,121,122,127],
[135,134,124,133,125,133,137,153,134,0,135,121,135,134,142],
[116,107,118,115,124,130,109,136,128,115,0,110,134,128,113],
[125,127,120,126,139,136,144,144,127,129,140,0,134,143,138],
[125,122,107,125,114,109,121,135,129,115,116,116,0,118,130],
[137,119,119,117,117,128,121,124,128,116,122,107,132,0,126],
[124,111,108,131,114,114,136,120,123,108,137,112,120,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 147, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,145,136,140,145,135,148,140,122,143,120,140,123,127],
[106,0,131,125,115,127,133,138,118,116,138,115,131,127,128],
[105,119,0,112,123,128,119,121,122,103,140,107,126,117,115],
[114,125,138,0,119,132,127,122,128,117,140,119,112,117,131],
[110,135,127,131,0,138,125,127,124,111,129,116,127,103,108],
[105,123,122,118,112,0,126,120,123,110,144,104,120,102,115],
[115,117,131,123,125,124,0,125,127,112,132,118,128,119,120],
[102,112,129,128,123,130,125,0,116,120,142,115,123,109,116],
[110,132,128,122,126,127,123,134,0,120,138,127,137,129,130],
[128,134,147,133,139,140,138,130,130,0,142,126,124,121,136],
[107,112,110,110,121,106,118,108,112,108,0,109,101,100,104],
[130,135,143,131,134,146,132,135,123,124,141,0,129,115,123],
[110,119,124,138,123,130,122,127,113,126,149,121,0,123,107],
[127,123,133,133,147,148,131,141,121,129,150,135,127,0,132],
[123,122,135,119,142,135,130,134,120,114,146,127,143,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 148, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,131,121,130,120,127,128,124,128,132,136,118,129,118],
[125,0,135,118,129,116,123,137,115,141,143,119,128,131,113],
[119,115,0,113,128,127,116,121,117,128,117,125,120,135,111],
[129,132,137,0,137,136,121,129,121,141,136,129,135,138,130],
[120,121,122,113,0,124,117,122,111,120,127,133,119,130,113],
[130,134,123,114,126,0,129,124,116,135,132,126,122,131,122],
[123,127,134,129,133,121,0,126,122,129,142,128,132,153,119],
[122,113,129,121,128,126,124,0,107,129,131,128,114,126,122],
[126,135,133,129,139,134,128,143,0,144,143,139,128,140,109],
[122,109,122,109,130,115,121,121,106,0,122,128,121,124,108],
[118,107,133,114,123,118,108,119,107,128,0,128,127,127,103],
[114,131,125,121,117,124,122,122,111,122,122,0,123,119,110],
[132,122,130,115,131,128,118,136,122,129,123,127,0,134,123],
[121,119,115,112,120,119,97,124,110,126,123,131,116,0,110],
[132,137,139,120,137,128,131,128,141,142,147,140,127,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 149, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,106,119,122,124,133,120,114,147,116,127,128,130,125],
[130,0,124,137,137,138,138,119,126,155,135,151,137,127,124],
[144,126,0,144,133,135,121,103,139,142,102,151,131,131,130],
[131,113,106,0,135,132,122,117,116,138,111,128,118,108,120],
[128,113,117,115,0,120,127,104,122,138,103,142,112,121,120],
[126,112,115,118,130,0,124,118,123,130,129,126,103,110,99],
[117,112,129,128,123,126,0,118,119,139,104,134,139,114,105],
[130,131,147,133,146,132,132,0,134,140,131,141,125,130,118],
[136,124,111,134,128,127,131,116,0,147,127,142,130,128,122],
[103,95,108,112,112,120,111,110,103,0,96,118,95,102,108],
[134,115,148,139,147,121,146,119,123,154,0,149,119,134,119],
[123,99,99,122,108,124,116,109,108,132,101,0,114,117,104],
[122,113,119,132,138,147,111,125,120,155,131,136,0,130,132],
[120,123,119,142,129,140,136,120,122,148,116,133,120,0,107],
[125,126,120,130,130,151,145,132,128,142,131,146,118,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 150, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,116,133,131,132,122,113,140,123,144,104,121,123,142],
[122,0,124,116,130,133,127,113,125,113,127,95,101,107,119],
[134,126,0,129,139,149,138,138,148,117,129,124,131,136,137],
[117,134,121,0,134,138,134,121,127,119,138,109,118,129,137],
[119,120,111,116,0,131,118,102,126,104,128,107,111,130,135],
[118,117,101,112,119,0,117,118,121,105,124,110,102,115,114],
[128,123,112,116,132,133,0,108,131,120,119,125,104,107,120],
[137,137,112,129,148,132,142,0,149,116,135,115,120,124,132],
[110,125,102,123,124,129,119,101,0,107,130,123,120,124,134],
[127,137,133,131,146,145,130,134,143,0,143,125,133,122,131],
[106,123,121,112,122,126,131,115,120,107,0,107,113,122,122],
[146,155,126,141,143,140,125,135,127,125,143,0,129,132,135],
[129,149,119,132,139,148,146,130,130,117,137,121,0,131,142],
[127,143,114,121,120,135,143,126,126,128,128,118,119,0,121],
[108,131,113,113,115,136,130,118,116,119,128,115,108,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 151, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,131,139,117,135,146,136,125,138,125,126,118,122,133],
[120,0,118,135,111,119,131,128,121,146,120,138,112,119,117],
[119,132,0,126,119,126,130,134,121,129,124,134,113,123,129],
[111,115,124,0,113,129,130,113,112,121,117,114,110,120,121],
[133,139,131,137,0,127,132,131,129,136,128,130,129,120,135],
[115,131,124,121,123,0,121,123,120,138,125,117,117,119,132],
[104,119,120,120,118,129,0,128,121,120,123,122,106,113,119],
[114,122,116,137,119,127,122,0,111,132,134,117,114,118,128],
[125,129,129,138,121,130,129,139,0,144,135,126,112,134,137],
[112,104,121,129,114,112,130,118,106,0,115,116,116,122,126],
[125,130,126,133,122,125,127,116,115,135,0,121,117,134,119],
[124,112,116,136,120,133,128,133,124,134,129,0,120,123,128],
[132,138,137,140,121,133,144,136,138,134,133,130,0,133,134],
[128,131,127,130,130,131,137,132,116,128,116,127,117,0,125],
[117,133,121,129,115,118,131,122,113,124,131,122,116,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 152, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,116,103,145,122,129,171,148,143,122,143,108,115,126],
[156,0,149,106,104,111,135,152,142,125,158,194,122,113,119],
[134,101,0,110,128,121,177,108,102,130,153,178,86,140,125],
[147,144,140,0,94,138,124,127,140,159,140,161,131,112,96],
[105,146,122,156,0,112,148,106,163,147,145,174,123,106,137],
[128,139,129,112,138,0,163,133,148,149,143,152,99,144,142],
[121,115,73,126,102,87,0,108,77,107,106,153,75,110,108],
[79,98,142,123,144,117,142,0,122,142,152,125,58,106,87],
[102,108,148,110,87,102,173,128,0,180,111,169,62,118,109],
[107,125,120,91,103,101,143,108,70,0,121,132,18,51,107],
[128,92,97,110,105,107,144,98,139,129,0,173,87,103,91],
[107,56,72,89,76,98,97,125,81,118,77,0,75,59,74],
[142,128,164,119,127,151,175,192,188,232,163,175,0,154,135],
[135,137,110,138,144,106,140,144,132,199,147,191,96,0,122],
[124,131,125,154,113,108,142,163,141,143,159,176,115,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 153, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,123,128,152,127,136,132,129,130,126,131,134,123,130],
[116,0,111,119,137,116,118,109,116,123,121,135,128,122,125],
[127,139,0,132,145,129,143,127,135,147,125,143,142,138,141],
[122,131,118,0,135,122,123,119,128,135,125,131,136,116,129],
[98,113,105,115,0,110,118,93,109,128,107,115,114,123,98],
[123,134,121,128,140,0,127,119,114,135,117,128,139,128,135],
[114,132,107,127,132,123,0,120,129,143,130,131,129,128,130],
[118,141,123,131,157,131,130,0,131,129,124,136,132,129,129],
[121,134,115,122,141,136,121,119,0,132,115,130,123,120,127],
[120,127,103,115,122,115,107,121,118,0,111,126,121,119,122],
[124,129,125,125,143,133,120,126,135,139,0,131,137,128,145],
[119,115,107,119,135,122,119,114,120,124,119,0,120,114,121],
[116,122,108,114,136,111,121,118,127,129,113,130,0,130,116],
[127,128,112,134,127,122,122,121,130,131,122,136,120,0,130],
[120,125,109,121,152,115,120,121,123,128,105,129,134,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 154, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,113,121,190,171,142,119,167,196,143,96,103,168,161],
[111,0,91,91,207,155,117,129,143,199,132,137,97,123,112],
[137,159,0,133,203,170,132,131,142,176,122,157,163,121,153],
[129,159,117,0,151,120,140,94,161,158,91,125,96,149,134],
[60,43,47,99,0,107,119,109,117,168,111,91,86,92,60],
[79,95,80,130,143,0,91,129,132,150,128,90,91,93,80],
[108,133,118,110,131,159,0,120,120,153,117,76,76,163,109],
[131,121,119,156,141,121,130,0,145,109,105,104,100,119,110],
[83,107,108,89,133,118,130,105,0,130,91,65,53,119,99],
[54,51,74,92,82,100,97,141,120,0,97,51,80,79,69],
[107,118,128,159,139,122,133,145,159,153,0,132,120,137,128],
[154,113,93,125,159,160,174,146,185,199,118,0,112,168,127],
[147,153,87,154,164,159,174,150,197,170,130,138,0,168,153],
[82,127,129,101,158,157,87,131,131,171,113,82,82,0,152],
[89,138,97,116,190,170,141,140,151,181,122,123,97,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 155, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,128,106,119,114,120,155,129,130,137,88,120,139,152],
[117,0,82,95,94,97,103,118,84,146,109,74,76,113,104],
[122,168,0,118,163,109,115,148,118,169,153,122,134,144,146],
[144,155,132,0,144,129,129,153,110,156,143,124,124,149,124],
[131,156,87,106,0,132,137,121,91,121,135,102,122,132,109],
[136,153,141,121,118,0,143,141,93,156,127,126,119,146,101],
[130,147,135,121,113,107,0,126,117,176,134,109,108,134,122],
[95,132,102,97,129,109,124,0,116,110,113,82,127,130,99],
[121,166,132,140,159,157,133,134,0,165,146,122,138,160,135],
[120,104,81,94,129,94,74,140,85,0,122,95,102,116,115],
[113,141,97,107,115,123,116,137,104,128,0,85,115,107,125],
[162,176,128,126,148,124,141,168,128,155,165,0,130,166,143],
[130,174,116,126,128,131,142,123,112,148,135,120,0,158,115],
[111,137,106,101,118,104,116,120,90,134,143,84,92,0,97],
[98,146,104,126,141,149,128,151,115,135,125,107,135,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 156, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,127,92,126,104,113,122,129,128,124,118,118,128,116],
[120,0,128,99,123,130,117,143,129,104,124,113,121,125,113],
[123,122,0,111,137,125,104,132,121,108,120,111,134,114,118],
[158,151,139,0,150,125,125,144,144,125,129,117,133,144,117],
[124,127,113,100,0,117,96,133,107,117,128,96,121,125,128],
[146,120,125,125,133,0,116,135,124,116,123,114,115,125,133],
[137,133,146,125,154,134,0,147,157,132,148,129,126,142,144],
[128,107,118,106,117,115,103,0,125,121,111,112,104,128,113],
[121,121,129,106,143,126,93,125,0,112,121,103,118,124,122],
[122,146,142,125,133,134,118,129,138,0,129,106,151,136,124],
[126,126,130,121,122,127,102,139,129,121,0,111,137,127,104],
[132,137,139,133,154,136,121,138,147,144,139,0,136,147,138],
[132,129,116,117,129,135,124,146,132,99,113,114,0,127,120],
[122,125,136,106,125,125,108,122,126,114,123,103,123,0,113],
[134,137,132,133,122,117,106,137,128,126,146,112,130,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 157, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,139,132,134,129,121,138,147,131,140,142,118,131,141],
[110,0,142,134,122,133,123,125,135,119,128,143,116,127,138],
[111,108,0,127,115,115,107,121,128,106,118,130,117,116,129],
[118,116,123,0,106,117,108,131,141,109,114,116,116,121,125],
[116,128,135,144,0,121,120,134,143,120,137,139,111,136,157],
[121,117,135,133,129,0,122,133,146,119,134,137,121,128,145],
[129,127,143,142,130,128,0,144,145,118,135,148,133,128,145],
[112,125,129,119,116,117,106,0,143,113,118,125,115,117,139],
[103,115,122,109,107,104,105,107,0,103,122,121,112,117,126],
[119,131,144,141,130,131,132,137,147,0,141,129,121,127,134],
[110,122,132,136,113,116,115,132,128,109,0,126,108,120,142],
[108,107,120,134,111,113,102,125,129,121,124,0,116,112,130],
[132,134,133,134,139,129,117,135,138,129,142,134,0,125,145],
[119,123,134,129,114,122,122,133,133,123,130,138,125,0,137],
[109,112,121,125,93,105,105,111,124,116,108,120,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 158, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,134,144,115,144,149,137,132,124,135,108,138,143,139],
[135,0,145,153,142,157,140,148,153,151,136,122,132,166,160],
[116,105,0,125,95,124,136,100,115,99,98,111,110,114,119],
[106,97,125,0,94,123,124,125,103,114,101,100,109,114,112],
[135,108,155,156,0,160,146,155,129,145,126,127,118,144,135],
[106,93,126,127,90,0,123,116,100,116,107,111,97,116,132],
[101,110,114,126,104,127,0,101,85,112,120,113,126,119,121],
[113,102,150,125,95,134,149,0,121,138,115,121,108,150,113],
[118,97,135,147,121,150,165,129,0,122,129,120,123,143,131],
[126,99,151,136,105,134,138,112,128,0,122,114,125,113,131],
[115,114,152,149,124,143,130,135,121,128,0,102,112,144,121],
[142,128,139,150,123,139,137,129,130,136,148,0,125,151,131],
[112,118,140,141,132,153,124,142,127,125,138,125,0,142,148],
[107,84,136,136,106,134,131,100,107,137,106,99,108,0,123],
[111,90,131,138,115,118,129,137,119,119,129,119,102,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 159, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,128,118,117,128,110,130,128,118,131,126,128,117,112],
[121,0,131,126,137,130,121,137,124,123,139,129,120,129,130],
[122,119,0,124,123,125,117,130,130,125,136,137,122,121,120],
[132,124,126,0,132,129,123,135,119,125,133,123,121,123,114],
[133,113,127,118,0,126,116,128,115,125,130,128,127,121,122],
[122,120,125,121,124,0,114,121,127,124,125,128,120,124,111],
[140,129,133,127,134,136,0,134,125,135,144,126,127,141,124],
[120,113,120,115,122,129,116,0,122,109,131,121,111,120,116],
[122,126,120,131,135,123,125,128,0,128,137,120,117,125,117],
[132,127,125,125,125,126,115,141,122,0,134,132,124,122,118],
[119,111,114,117,120,125,106,119,113,116,0,128,106,116,109],
[124,121,113,127,122,122,124,129,130,118,122,0,116,120,119],
[122,130,128,129,123,130,123,139,133,126,144,134,0,134,127],
[133,121,129,127,129,126,109,130,125,128,134,130,116,0,112],
[138,120,130,136,128,139,126,134,133,132,141,131,123,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 160, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,126,134,142,132,131,127,137,139,126,137,134,125,129],
[130,0,126,128,133,133,135,132,127,140,138,125,129,127,129],
[124,124,0,128,133,126,116,122,115,125,130,128,131,116,111],
[116,122,122,0,127,124,113,122,130,133,124,124,125,118,114],
[108,117,117,123,0,112,127,116,127,123,114,116,111,117,112],
[118,117,124,126,138,0,122,131,134,138,129,122,114,124,141],
[119,115,134,137,123,128,0,123,131,137,132,125,128,124,122],
[123,118,128,128,134,119,127,0,135,140,132,128,127,125,123],
[113,123,135,120,123,116,119,115,0,129,138,127,123,115,117],
[111,110,125,117,127,112,113,110,121,0,111,111,112,108,111],
[124,112,120,126,136,121,118,118,112,139,0,116,130,123,121],
[113,125,122,126,134,128,125,122,123,139,134,0,129,128,125],
[116,121,119,125,139,136,122,123,127,138,120,121,0,132,121],
[125,123,134,132,133,126,126,125,135,142,127,122,118,0,126],
[121,121,139,136,138,109,128,127,133,139,129,125,129,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 161, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,137,124,152,128,147,135,134,140,142,131,144,132,126],
[109,0,120,126,144,122,135,125,126,115,107,132,130,116,121],
[113,130,0,127,134,123,124,120,150,127,103,125,124,123,116],
[126,124,123,0,128,128,144,132,132,129,116,138,131,116,118],
[98,106,116,122,0,118,117,121,130,108,114,120,125,114,112],
[122,128,127,122,132,0,129,135,129,126,124,136,131,129,120],
[103,115,126,106,133,121,0,116,127,103,109,130,122,123,111],
[115,125,130,118,129,115,134,0,122,122,99,133,127,123,116],
[116,124,100,118,120,121,123,128,0,110,128,118,118,116,111],
[110,135,123,121,142,124,147,128,140,0,125,131,114,141,127],
[108,143,147,134,136,126,141,151,122,125,0,144,137,119,126],
[119,118,125,112,130,114,120,117,132,119,106,0,127,108,120],
[106,120,126,119,125,119,128,123,132,136,113,123,0,114,111],
[118,134,127,134,136,121,127,127,134,109,131,142,136,0,120],
[124,129,134,132,138,130,139,134,139,123,124,130,139,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 162, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,139,143,117,126,128,137,127,130,132,139,128,128,139],
[134,0,135,132,118,117,133,148,126,136,137,137,119,135,121],
[111,115,0,130,117,109,133,130,118,116,124,125,114,116,116],
[107,118,120,0,114,112,118,124,108,115,122,121,117,122,112],
[133,132,133,136,0,124,141,149,114,142,135,132,132,128,131],
[124,133,141,138,126,0,140,144,127,122,131,140,125,132,129],
[122,117,117,132,109,110,0,133,117,124,121,128,118,131,122],
[113,102,120,126,101,106,117,0,104,114,120,117,119,120,110],
[123,124,132,142,136,123,133,146,0,123,130,134,131,125,127],
[120,114,134,135,108,128,126,136,127,0,140,138,122,129,135],
[118,113,126,128,115,119,129,130,120,110,0,128,113,116,123],
[111,113,125,129,118,110,122,133,116,112,122,0,117,126,109],
[122,131,136,133,118,125,132,131,119,128,137,133,0,122,118],
[122,115,134,128,122,118,119,130,125,121,134,124,128,0,119],
[111,129,134,138,119,121,128,140,123,115,127,141,132,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 163, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,105,130,83,150,163,90,143,143,89,134,105,113,116],
[130,0,124,134,93,119,115,120,140,129,124,126,92,120,91],
[145,126,0,142,96,105,145,120,142,144,120,152,118,157,125],
[120,116,108,0,95,148,141,105,104,135,96,129,90,127,116],
[167,157,154,155,0,160,179,133,139,163,136,153,143,160,123],
[100,131,145,102,90,0,156,106,119,129,101,146,122,143,137],
[87,135,105,109,71,94,0,86,116,133,90,136,106,116,111],
[160,130,130,145,117,144,164,0,162,174,119,137,103,134,103],
[107,110,108,146,111,131,134,88,0,122,88,142,111,123,107],
[107,121,106,115,87,121,117,76,128,0,88,124,86,98,83],
[161,126,130,154,114,149,160,131,162,162,0,159,124,146,102],
[116,124,98,121,97,104,114,113,108,126,91,0,119,141,111],
[145,158,132,160,107,128,144,147,139,164,126,131,0,147,127],
[137,130,93,123,90,107,134,116,127,152,104,109,103,0,95],
[134,159,125,134,127,113,139,147,143,167,148,139,123,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 164, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,122,112,111,113,137,131,132,110,131,99,115,109,103],
[160,0,135,138,129,125,170,138,142,140,146,129,138,118,119],
[128,115,0,109,126,106,133,142,149,95,119,113,120,110,116],
[138,112,141,0,124,124,124,126,149,120,141,98,114,106,102],
[139,121,124,126,0,120,145,136,140,120,141,121,114,121,113],
[137,125,144,126,130,0,149,138,152,118,136,116,124,128,102],
[113,80,117,126,105,101,0,107,128,95,102,112,97,93,88],
[119,112,108,124,114,112,143,0,141,106,137,117,109,93,122],
[118,108,101,101,110,98,122,109,0,95,123,99,106,90,114],
[140,110,155,130,130,132,155,144,155,0,142,110,119,130,129],
[119,104,131,109,109,114,148,113,127,108,0,102,118,119,96],
[151,121,137,152,129,134,138,133,151,140,148,0,130,112,125],
[135,112,130,136,136,126,153,141,144,131,132,120,0,120,120],
[141,132,140,144,129,122,157,157,160,120,131,138,130,0,110],
[147,131,134,148,137,148,162,128,136,121,154,125,130,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 165, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,88,131,100,92,130,102,123,117,117,87,88,107,105],
[121,0,50,98,99,77,79,80,106,113,100,83,58,107,106],
[162,200,0,146,140,112,154,150,141,145,122,117,125,148,138],
[119,152,104,0,154,111,102,88,114,127,138,112,92,123,123],
[150,151,110,96,0,115,120,116,127,137,125,117,83,138,158],
[158,173,138,139,135,0,130,151,123,155,132,153,116,136,152],
[120,171,96,148,130,120,0,124,106,140,101,95,91,125,135],
[148,170,100,162,134,99,126,0,142,150,161,107,117,123,101],
[127,144,109,136,123,127,144,108,0,117,161,108,104,132,111],
[133,137,105,123,113,95,110,100,133,0,120,66,66,120,129],
[133,150,128,112,125,118,149,89,89,130,0,88,87,107,120],
[163,167,133,138,133,97,155,143,142,184,162,0,109,159,182],
[162,192,125,158,167,134,159,133,146,184,163,141,0,165,153],
[143,143,102,127,112,114,125,127,118,130,143,91,85,0,118],
[145,144,112,127,92,98,115,149,139,121,130,68,97,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 166, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,122,124,110,122,117,119,129,136,132,140,121,119,121],
[132,0,127,123,125,134,127,112,119,131,117,132,112,143,132],
[128,123,0,126,115,118,120,117,103,132,133,122,117,133,119],
[126,127,124,0,113,134,107,115,126,119,127,121,118,131,128],
[140,125,135,137,0,141,114,118,123,120,130,133,128,140,129],
[128,116,132,116,109,0,123,102,119,108,124,116,105,127,111],
[133,123,130,143,136,127,0,119,120,135,132,131,133,140,127],
[131,138,133,135,132,148,131,0,134,115,132,133,124,149,138],
[121,131,147,124,127,131,130,116,0,132,141,129,130,141,129],
[114,119,118,131,130,142,115,135,118,0,119,129,107,135,123],
[118,133,117,123,120,126,118,118,109,131,0,124,133,135,122],
[110,118,128,129,117,134,119,117,121,121,126,0,119,122,129],
[129,138,133,132,122,145,117,126,120,143,117,131,0,141,124],
[131,107,117,119,110,123,110,101,109,115,115,128,109,0,126],
[129,118,131,122,121,139,123,112,121,127,128,121,126,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 167, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,61,171,67,95,89,96,39,39,96,200,96,67,67],
[161,0,39,104,133,126,155,74,96,74,172,172,172,143,22],
[189,211,0,132,189,211,233,74,96,85,178,228,172,200,135],
[79,146,118,0,79,96,146,96,96,96,96,172,96,124,96],
[183,117,61,171,0,165,146,118,118,89,222,194,118,165,89],
[155,124,39,154,85,0,107,96,96,96,172,200,96,67,107],
[161,95,17,104,104,143,0,74,39,45,178,150,172,143,50],
[154,176,176,154,132,154,176,0,143,154,228,228,171,171,100],
[211,154,154,154,132,154,211,107,0,154,228,211,211,176,100],
[211,176,165,154,161,154,205,96,96,0,200,200,200,193,100],
[154,78,72,154,28,78,72,22,22,50,0,126,50,100,100],
[50,78,22,78,56,50,100,22,39,50,124,0,39,72,72],
[154,78,78,154,132,154,78,79,39,50,200,211,0,154,78],
[183,107,50,126,85,183,107,79,74,57,150,178,96,0,107],
[183,228,115,154,161,143,200,150,150,150,150,178,172,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 168, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,122,129,137,130,128,135,127,129,125,134,143,136,132],
[120,0,120,123,123,127,115,126,121,118,126,134,142,138,130],
[128,130,0,131,135,135,132,144,125,129,129,133,145,143,132],
[121,127,119,0,132,131,127,134,124,126,132,134,139,138,128],
[113,127,115,118,0,114,116,132,120,126,117,122,133,131,127],
[120,123,115,119,136,0,118,128,124,118,106,133,141,123,125],
[122,135,118,123,134,132,0,137,125,131,130,139,141,136,131],
[115,124,106,116,118,122,113,0,119,129,123,128,141,134,127],
[123,129,125,126,130,126,125,131,0,122,115,128,136,136,128],
[121,132,121,124,124,132,119,121,128,0,126,126,134,135,131],
[125,124,121,118,133,144,120,127,135,124,0,133,135,143,128],
[116,116,117,116,128,117,111,122,122,124,117,0,133,128,119],
[107,108,105,111,117,109,109,109,114,116,115,117,0,122,112],
[114,112,107,112,119,127,114,116,114,115,107,122,128,0,116],
[118,120,118,122,123,125,119,123,122,119,122,131,138,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 169, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,124,129,148,132,139,141,134,135,130,132,138,127,131],
[119,0,107,117,132,119,131,123,124,125,126,114,129,114,115],
[126,143,0,132,137,125,131,145,130,137,135,131,129,131,135],
[121,133,118,0,132,117,139,145,139,129,132,126,135,127,129],
[102,118,113,118,0,108,120,121,121,114,137,118,119,122,113],
[118,131,125,133,142,0,132,138,136,137,135,136,139,138,130],
[111,119,119,111,130,118,0,120,126,132,129,122,123,123,118],
[109,127,105,105,129,112,130,0,134,130,132,130,118,117,122],
[116,126,120,111,129,114,124,116,0,129,130,126,126,128,120],
[115,125,113,121,136,113,118,120,121,0,136,125,133,135,116],
[120,124,115,118,113,115,121,118,120,114,0,113,117,135,125],
[118,136,119,124,132,114,128,120,124,125,137,0,121,128,118],
[112,121,121,115,131,111,127,132,124,117,133,129,0,129,114],
[123,136,119,123,128,112,127,133,122,115,115,122,121,0,119],
[119,135,115,121,137,120,132,128,130,134,125,132,136,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 170, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,134,121,136,115,106,107,122,137,124,119,127,124,117],
[114,0,144,123,132,107,104,116,113,118,121,113,118,129,112],
[116,106,0,116,127,103,99,114,107,120,115,98,115,116,105],
[129,127,134,0,122,119,102,121,115,125,128,101,122,128,111],
[114,118,123,128,0,109,98,109,110,110,120,104,121,112,112],
[135,143,147,131,141,0,122,130,126,149,132,135,130,139,118],
[144,146,151,148,152,128,0,126,127,136,130,118,137,137,123],
[143,134,136,129,141,120,124,0,124,137,130,129,127,134,126],
[128,137,143,135,140,124,123,126,0,129,128,121,142,143,112],
[113,132,130,125,140,101,114,113,121,0,119,111,129,120,104],
[126,129,135,122,130,118,120,120,122,131,0,112,127,122,99],
[131,137,152,149,146,115,132,121,129,139,138,0,135,139,128],
[123,132,135,128,129,120,113,123,108,121,123,115,0,126,123],
[126,121,134,122,138,111,113,116,107,130,128,111,124,0,115],
[133,138,145,139,138,132,127,124,138,146,151,122,127,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 171, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,110,123,128,120,113,109,117,112,122,123,120,108,105],
[126,0,124,113,122,111,114,118,123,131,119,106,121,124,110],
[140,126,0,126,131,128,114,125,126,122,124,123,126,136,120],
[127,137,124,0,124,130,129,115,129,124,114,101,129,127,118],
[122,128,119,126,0,115,103,113,124,127,120,111,131,110,116],
[130,139,122,120,135,0,136,127,131,135,111,119,121,136,133],
[137,136,136,121,147,114,0,142,119,131,119,126,148,137,120],
[141,132,125,135,137,123,108,0,120,126,123,124,128,136,131],
[133,127,124,121,126,119,131,130,0,134,130,114,130,135,115],
[138,119,128,126,123,115,119,124,116,0,125,125,129,125,106],
[128,131,126,136,130,139,131,127,120,125,0,126,135,124,124],
[127,144,127,149,139,131,124,126,136,125,124,0,143,140,123],
[130,129,124,121,119,129,102,122,120,121,115,107,0,118,123],
[142,126,114,123,140,114,113,114,115,125,126,110,132,0,122],
[145,140,130,132,134,117,130,119,135,144,126,127,127,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 172, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,130,134,143,128,132,126,128,133,126,129,123,138,131],
[115,0,118,106,117,112,116,114,133,123,112,119,127,130,108],
[120,132,0,107,112,119,117,118,131,127,127,122,119,132,132],
[116,144,143,0,122,125,124,119,129,136,126,128,128,131,123],
[107,133,138,128,0,126,132,124,135,135,131,129,133,136,123],
[122,138,131,125,124,0,122,112,129,128,124,128,123,143,133],
[118,134,133,126,118,128,0,124,128,132,127,135,115,137,126],
[124,136,132,131,126,138,126,0,128,139,138,142,128,147,139],
[122,117,119,121,115,121,122,122,0,126,121,123,124,127,115],
[117,127,123,114,115,122,118,111,124,0,126,127,118,131,120],
[124,138,123,124,119,126,123,112,129,124,0,127,124,138,130],
[121,131,128,122,121,122,115,108,127,123,123,0,119,140,123],
[127,123,131,122,117,127,135,122,126,132,126,131,0,127,120],
[112,120,118,119,114,107,113,103,123,119,112,110,123,0,114],
[119,142,118,127,127,117,124,111,135,130,120,127,130,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 173, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,134,138,118,125,128,143,121,110,137,127,131,136,138],
[114,0,115,115,119,107,108,132,89,112,118,117,129,105,115],
[116,135,0,115,137,117,113,122,120,127,127,129,123,112,116],
[112,135,135,0,131,112,112,132,119,115,124,129,137,110,128],
[132,131,113,119,0,116,128,134,115,125,128,131,130,114,135],
[125,143,133,138,134,0,131,148,131,123,140,138,143,137,134],
[122,142,137,138,122,119,0,155,122,129,125,121,129,137,137],
[107,118,128,118,116,102,95,0,116,90,131,121,116,106,126],
[129,161,130,131,135,119,128,134,0,126,138,121,139,118,138],
[140,138,123,135,125,127,121,160,124,0,137,143,141,125,136],
[113,132,123,126,122,110,125,119,112,113,0,131,127,113,122],
[123,133,121,121,119,112,129,129,129,107,119,0,126,127,121],
[119,121,127,113,120,107,121,134,111,109,123,124,0,128,118],
[114,145,138,140,136,113,113,144,132,125,137,123,122,0,131],
[112,135,134,122,115,116,113,124,112,114,128,129,132,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 174, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,131,130,136,134,124,129,119,124,116,132,115,123,135],
[113,0,111,120,114,131,114,120,121,126,109,129,124,116,124],
[119,139,0,135,124,135,115,130,120,128,130,127,124,119,120],
[120,130,115,0,131,106,127,128,123,115,121,128,118,128,123],
[114,136,126,119,0,130,129,126,131,131,129,129,113,138,135],
[116,119,115,144,120,0,115,136,121,129,107,112,106,105,111],
[126,136,135,123,121,135,0,139,132,132,141,133,119,119,129],
[121,130,120,122,124,114,111,0,122,125,117,119,115,121,118],
[131,129,130,127,119,129,118,128,0,123,131,130,118,125,108],
[126,124,122,135,119,121,118,125,127,0,121,127,108,118,118],
[134,141,120,129,121,143,109,133,119,129,0,128,120,126,118],
[118,121,123,122,121,138,117,131,120,123,122,0,115,117,120],
[135,126,126,132,137,144,131,135,132,142,130,135,0,133,118],
[127,134,131,122,112,145,131,129,125,132,124,133,117,0,119],
[115,126,130,127,115,139,121,132,142,132,132,130,132,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 175, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,120,119,133,125,128,125,130,126,128,128,116,137,120],
[122,0,118,121,123,120,132,130,128,131,130,136,128,127,125],
[130,132,0,133,131,117,134,125,120,125,126,132,129,123,123],
[131,129,117,0,135,124,134,121,127,135,125,142,131,128,129],
[117,127,119,115,0,121,128,116,121,117,129,122,125,128,121],
[125,130,133,126,129,0,136,133,133,130,130,133,137,135,124],
[122,118,116,116,122,114,0,125,131,127,121,128,110,122,121],
[125,120,125,129,134,117,125,0,119,125,117,124,123,121,125],
[120,122,130,123,129,117,119,131,0,137,123,135,129,127,130],
[124,119,125,115,133,120,123,125,113,0,126,138,120,131,115],
[122,120,124,125,121,120,129,133,127,124,0,129,119,118,130],
[122,114,118,108,128,117,122,126,115,112,121,0,121,123,124],
[134,122,121,119,125,113,140,127,121,130,131,129,0,132,119],
[113,123,127,122,122,115,128,129,123,119,132,127,118,0,113],
[130,125,127,121,129,126,129,125,120,135,120,126,131,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 176, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,125,120,123,116,131,134,114,135,126,134,139,132,139],
[124,0,133,134,128,113,123,134,121,110,125,127,124,126,144],
[125,117,0,123,119,118,123,127,121,124,124,125,124,119,127],
[130,116,127,0,118,122,132,129,115,124,123,133,125,116,136],
[127,122,131,132,0,123,131,124,123,128,129,130,124,128,142],
[134,137,132,128,127,0,136,144,128,128,133,125,143,126,138],
[119,127,127,118,119,114,0,139,125,127,120,115,132,120,127],
[116,116,123,121,126,106,111,0,103,117,127,125,118,115,124],
[136,129,129,135,127,122,125,147,0,130,130,124,135,135,143],
[115,140,126,126,122,122,123,133,120,0,140,143,133,123,141],
[124,125,126,127,121,117,130,123,120,110,0,112,126,117,125],
[116,123,125,117,120,125,135,125,126,107,138,0,126,122,146],
[111,126,126,125,126,107,118,132,115,117,124,124,0,118,133],
[118,124,131,134,122,124,130,135,115,127,133,128,132,0,139],
[111,106,123,114,108,112,123,126,107,109,125,104,117,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 177, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,146,113,118,111,98,158,127,120,118,121,118,126,112],
[128,0,134,113,132,118,123,143,105,97,117,112,106,131,94],
[104,116,0,116,124,131,132,128,101,109,125,102,103,109,115],
[137,137,134,0,117,164,136,155,141,117,127,122,128,160,122],
[132,118,126,133,0,143,124,137,107,135,148,103,142,132,117],
[139,132,119,86,107,0,105,142,119,107,117,93,116,119,106],
[152,127,118,114,126,145,0,159,130,117,129,115,124,143,131],
[92,107,122,95,113,108,91,0,101,102,104,92,91,127,117],
[123,145,149,109,143,131,120,149,0,120,129,116,136,140,110],
[130,153,141,133,115,143,133,148,130,0,146,128,126,149,130],
[132,133,125,123,102,133,121,146,121,104,0,118,112,129,120],
[129,138,148,128,147,157,135,158,134,122,132,0,139,150,126],
[132,144,147,122,108,134,126,159,114,124,138,111,0,131,134],
[124,119,141,90,118,131,107,123,110,101,121,100,119,0,115],
[138,156,135,128,133,144,119,133,140,120,130,124,116,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 178, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,118,115,143,116,122,124,130,130,126,113,121,117,123],
[125,0,127,111,123,114,120,125,124,123,119,111,113,116,118],
[132,123,0,118,134,122,119,127,127,128,124,116,113,119,121],
[135,139,132,0,144,129,131,125,133,133,134,121,128,129,129],
[107,127,116,106,0,114,121,119,106,116,111,110,117,114,106],
[134,136,128,121,136,0,135,131,135,133,132,126,136,123,134],
[128,130,131,119,129,115,0,124,123,123,122,116,120,122,124],
[126,125,123,125,131,119,126,0,120,128,120,112,131,119,129],
[120,126,123,117,144,115,127,130,0,123,121,110,123,117,125],
[120,127,122,117,134,117,127,122,127,0,125,119,125,117,117],
[124,131,126,116,139,118,128,130,129,125,0,112,122,121,128],
[137,139,134,129,140,124,134,138,140,131,138,0,119,128,134],
[129,137,137,122,133,114,130,119,127,125,128,131,0,121,126],
[133,134,131,121,136,127,128,131,133,133,129,122,129,0,129],
[127,132,129,121,144,116,126,121,125,133,122,116,124,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 179, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,110,154,142,125,119,125,139,122,117,147,141,134,140],
[131,0,126,153,147,134,111,131,142,123,127,134,137,128,151],
[140,124,0,150,134,150,134,133,149,120,130,152,159,143,153],
[96,97,100,0,111,115,98,93,104,106,89,124,115,104,113],
[108,103,116,139,0,126,108,117,131,107,115,128,123,128,132],
[125,116,100,135,124,0,120,123,126,122,117,126,131,126,117],
[131,139,116,152,142,130,0,139,133,131,124,139,150,155,135],
[125,119,117,157,133,127,111,0,131,116,107,143,133,117,127],
[111,108,101,146,119,124,117,119,0,117,117,130,134,131,149],
[128,127,130,144,143,128,119,134,133,0,135,137,144,126,132],
[133,123,120,161,135,133,126,143,133,115,0,148,152,138,145],
[103,116,98,126,122,124,111,107,120,113,102,0,124,106,116],
[109,113,91,135,127,119,100,117,116,106,98,126,0,109,122],
[116,122,107,146,122,124,95,133,119,124,112,144,141,0,140],
[110,99,97,137,118,133,115,123,101,118,105,134,128,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 180, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,111,102,122,119,91,114,103,98,138,114,116,103,88],
[136,0,120,133,150,122,118,140,122,109,136,131,132,122,112],
[139,130,0,129,118,136,103,118,100,127,106,132,122,135,123],
[148,117,121,0,131,164,111,143,121,138,147,161,152,133,142],
[128,100,132,119,0,117,93,113,116,91,133,125,119,103,100],
[131,128,114,86,133,0,109,116,122,124,129,122,107,125,122],
[159,132,147,139,157,141,0,139,127,118,155,149,130,142,143],
[136,110,132,107,137,134,111,0,121,106,163,126,123,115,89],
[147,128,150,129,134,128,123,129,0,130,149,148,153,150,138],
[152,141,123,112,159,126,132,144,120,0,152,133,138,130,149],
[112,114,144,103,117,121,95,87,101,98,0,120,121,124,107],
[136,119,118,89,125,128,101,124,102,117,130,0,120,105,116],
[134,118,128,98,131,143,120,127,97,112,129,130,0,110,115],
[147,128,115,117,147,125,108,135,100,120,126,145,140,0,141],
[162,138,127,108,150,128,107,161,112,101,143,134,135,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 181, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,125,139,125,116,123,135,134,132,132,123,126,129,129],
[120,0,140,134,134,127,120,139,150,129,127,126,126,132,125],
[125,110,0,135,116,108,113,123,124,121,114,107,116,126,110],
[111,116,115,0,126,105,119,117,126,119,96,110,115,105,107],
[125,116,134,124,0,113,119,128,124,110,114,130,114,131,109],
[134,123,142,145,137,0,133,135,144,143,123,140,128,137,119],
[127,130,137,131,131,117,0,127,126,132,117,125,129,127,123],
[115,111,127,133,122,115,123,0,136,119,107,128,118,114,134],
[116,100,126,124,126,106,124,114,0,116,102,117,111,118,109],
[118,121,129,131,140,107,118,131,134,0,118,119,118,114,113],
[118,123,136,154,136,127,133,143,148,132,0,134,126,132,126],
[127,124,143,140,120,110,125,122,133,131,116,0,123,121,131],
[124,124,134,135,136,122,121,132,139,132,124,127,0,113,120],
[121,118,124,145,119,113,123,136,132,136,118,129,137,0,118],
[121,125,140,143,141,131,127,116,141,137,124,119,130,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 182, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,128,132,127,113,128,140,134,147,118,133,146,143,134],
[114,0,120,119,111,111,103,105,120,135,117,124,130,137,135],
[122,130,0,117,109,110,120,121,129,131,125,117,133,132,126],
[118,131,133,0,110,119,119,138,114,133,113,114,128,130,135],
[123,139,141,140,0,114,111,137,136,127,128,119,124,136,130],
[137,139,140,131,136,0,121,135,131,140,130,125,141,142,143],
[122,147,130,131,139,129,0,139,127,129,140,131,133,145,144],
[110,145,129,112,113,115,111,0,119,133,124,117,110,129,132],
[116,130,121,136,114,119,123,131,0,122,133,117,118,139,127],
[103,115,119,117,123,110,121,117,128,0,126,108,123,121,138],
[132,133,125,137,122,120,110,126,117,124,0,125,129,137,148],
[117,126,133,136,131,125,119,133,133,142,125,0,145,140,146],
[104,120,117,122,126,109,117,140,132,127,121,105,0,132,131],
[107,113,118,120,114,108,105,121,111,129,113,110,118,0,111],
[116,115,124,115,120,107,106,118,123,112,102,104,119,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 183, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,125,111,122,126,123,119,116,125,119,125,118,132,119],
[125,0,129,118,115,129,114,121,129,136,126,120,120,139,120],
[125,121,0,122,119,124,115,121,130,129,127,124,115,133,119],
[139,132,128,0,124,129,129,132,134,128,132,134,123,152,123],
[128,135,131,126,0,130,124,136,125,133,126,137,121,137,133],
[124,121,126,121,120,0,122,117,127,119,126,124,122,127,119],
[127,136,135,121,126,128,0,135,134,134,131,128,125,134,124],
[131,129,129,118,114,133,115,0,126,130,124,128,115,132,108],
[134,121,120,116,125,123,116,124,0,127,131,134,118,137,119],
[125,114,121,122,117,131,116,120,123,0,128,127,124,127,115],
[131,124,123,118,124,124,119,126,119,122,0,132,115,133,110],
[125,130,126,116,113,126,122,122,116,123,118,0,114,131,109],
[132,130,135,127,129,128,125,135,132,126,135,136,0,141,118],
[118,111,117,98,113,123,116,118,113,123,117,119,109,0,108],
[131,130,131,127,117,131,126,142,131,135,140,141,132,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 184, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,134,127,123,121,115,114,114,116,108,126,111,124,144],
[133,0,138,116,89,122,129,102,118,111,121,131,130,129,128],
[116,112,0,113,98,106,119,125,103,108,112,118,127,114,131],
[123,134,137,0,114,134,120,118,125,119,111,121,125,130,128],
[127,161,152,136,0,122,134,132,139,123,130,139,142,135,139],
[129,128,144,116,128,0,149,132,127,135,126,122,138,135,142],
[135,121,131,130,116,101,0,122,146,130,117,134,133,126,140],
[136,148,125,132,118,118,128,0,103,124,105,143,141,132,126],
[136,132,147,125,111,123,104,147,0,129,114,137,145,134,140],
[134,139,142,131,127,115,120,126,121,0,106,146,134,145,141],
[142,129,138,139,120,124,133,145,136,144,0,143,121,147,151],
[124,119,132,129,111,128,116,107,113,104,107,0,117,122,110],
[139,120,123,125,108,112,117,109,105,116,129,133,0,119,133],
[126,121,136,120,115,115,124,118,116,105,103,128,131,0,125],
[106,122,119,122,111,108,110,124,110,109,99,140,117,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 185, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,109,130,119,123,121,117,124,108,113,116,96,126,107],
[138,0,131,142,109,139,161,131,125,103,120,132,122,145,128],
[141,119,0,135,130,155,136,131,132,109,113,120,129,140,131],
[120,108,115,0,108,116,118,96,138,113,109,120,111,137,110],
[131,141,120,142,0,141,139,141,126,109,126,120,124,149,136],
[127,111,95,134,109,0,120,121,128,106,118,124,119,123,112],
[129,89,114,132,111,130,0,124,136,115,105,111,123,126,125],
[133,119,119,154,109,129,126,0,123,98,133,121,128,133,123],
[126,125,118,112,124,122,114,127,0,117,117,122,116,132,119],
[142,147,141,137,141,144,135,152,133,0,133,124,117,140,154],
[137,130,137,141,124,132,145,117,133,117,0,120,118,129,118],
[134,118,130,130,130,126,139,129,128,126,130,0,129,129,111],
[154,128,121,139,126,131,127,122,134,133,132,121,0,135,122],
[124,105,110,113,101,127,124,117,118,110,121,121,115,0,118],
[143,122,119,140,114,138,125,127,131,96,132,139,128,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 186, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,119,124,129,116,126,115,117,119,117,116,115,122,116],
[128,0,128,128,119,121,121,119,113,126,119,129,126,128,123],
[131,122,0,125,123,120,121,124,116,128,119,121,122,124,119],
[126,122,125,0,131,106,108,119,116,117,111,114,119,121,117],
[121,131,127,119,0,122,128,121,121,125,123,127,126,125,115],
[134,129,130,144,128,0,118,126,125,129,126,128,133,133,126],
[124,129,129,142,122,132,0,116,120,124,134,134,135,138,133],
[135,131,126,131,129,124,134,0,128,128,129,131,137,138,124],
[133,137,134,134,129,125,130,122,0,135,130,133,123,130,119],
[131,124,122,133,125,121,126,122,115,0,122,116,135,133,115],
[133,131,131,139,127,124,116,121,120,128,0,122,129,132,126],
[134,121,129,136,123,122,116,119,117,134,128,0,136,136,121],
[135,124,128,131,124,117,115,113,127,115,121,114,0,127,123],
[128,122,126,129,125,117,112,112,120,117,118,114,123,0,112],
[134,127,131,133,135,124,117,126,131,135,124,129,127,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 187, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,104,146,134,119,148,137,136,173,94,147,154,161,108],
[90,0,116,112,106,109,135,148,130,146,72,134,111,139,90],
[146,134,0,169,109,126,113,135,142,182,63,142,131,147,115],
[104,138,81,0,114,110,92,112,135,157,61,108,105,129,122],
[116,144,141,136,0,126,123,81,127,197,87,168,125,153,91],
[131,141,124,140,124,0,125,155,168,182,76,144,128,152,135],
[102,115,137,158,127,125,0,147,122,140,140,105,113,145,86],
[113,102,115,138,169,95,103,0,137,145,98,148,155,106,138],
[114,120,108,115,123,82,128,113,0,156,81,163,124,130,94],
[77,104,68,93,53,68,110,105,94,0,55,80,111,94,68],
[156,178,187,189,163,174,110,152,169,195,0,195,153,175,155],
[103,116,108,142,82,106,145,102,87,170,55,0,123,80,83],
[96,139,119,145,125,122,137,95,126,139,97,127,0,120,63],
[89,111,103,121,97,98,105,144,120,156,75,170,130,0,105],
[142,160,135,128,159,115,164,112,156,182,95,167,187,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 188, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,124,114,106,130,125,118,116,134,121,122,120,133,129],
[133,0,130,124,112,129,125,122,122,132,113,132,116,115,123],
[126,120,0,117,117,133,120,120,111,127,115,128,130,123,119],
[136,126,133,0,121,135,132,120,131,138,122,129,129,115,144],
[144,138,133,129,0,147,135,133,123,150,138,141,131,137,139],
[120,121,117,115,103,0,131,120,102,125,118,126,120,110,124],
[125,125,130,118,115,119,0,122,115,127,131,125,129,124,131],
[132,128,130,130,117,130,128,0,121,135,134,125,122,125,138],
[134,128,139,119,127,148,135,129,0,156,129,138,139,139,144],
[116,118,123,112,100,125,123,115,94,0,113,122,111,102,118],
[129,137,135,128,112,132,119,116,121,137,0,135,126,117,132],
[128,118,122,121,109,124,125,125,112,128,115,0,120,124,133],
[130,134,120,121,119,130,121,128,111,139,124,130,0,118,132],
[117,135,127,135,113,140,126,125,111,148,133,126,132,0,131],
[121,127,131,106,111,126,119,112,106,132,118,117,118,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 189, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,136,134,137,116,145,115,119,128,113,135,127,136,118],
[127,0,121,121,123,105,142,107,128,115,117,136,129,119,107],
[114,129,0,105,122,132,136,116,122,108,108,143,126,130,98],
[116,129,145,0,125,114,154,131,116,106,129,121,135,129,117],
[113,127,128,125,0,116,149,136,136,118,129,135,123,132,113],
[134,145,118,136,134,0,139,121,120,129,133,151,126,118,111],
[105,108,114,96,101,111,0,94,106,112,101,140,103,100,81],
[135,143,134,119,114,129,156,0,121,116,122,144,135,128,118],
[131,122,128,134,114,130,144,129,0,125,111,149,147,135,129],
[122,135,142,144,132,121,138,134,125,0,137,150,132,138,137],
[137,133,142,121,121,117,149,128,139,113,0,146,130,118,125],
[115,114,107,129,115,99,110,106,101,100,104,0,112,108,98],
[123,121,124,115,127,124,147,115,103,118,120,138,0,113,106],
[114,131,120,121,118,132,150,122,115,112,132,142,137,0,125],
[132,143,152,133,137,139,169,132,121,113,125,152,144,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 190, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,125,118,130,125,111,129,119,114,111,127,120,118,114],
[142,0,123,120,127,122,127,127,126,129,120,119,112,130,133],
[125,127,0,125,130,132,115,130,126,115,116,120,115,125,122],
[132,130,125,0,138,134,127,136,135,138,130,127,132,138,123],
[120,123,120,112,0,121,130,131,121,121,112,112,128,116,125],
[125,128,118,116,129,0,118,128,132,121,123,135,116,123,118],
[139,123,135,123,120,132,0,139,131,127,125,120,122,117,125],
[121,123,120,114,119,122,111,0,125,120,109,120,120,116,107],
[131,124,124,115,129,118,119,125,0,122,121,127,123,119,124],
[136,121,135,112,129,129,123,130,128,0,127,130,125,127,123],
[139,130,134,120,138,127,125,141,129,123,0,125,130,138,132],
[123,131,130,123,138,115,130,130,123,120,125,0,126,126,135],
[130,138,135,118,122,134,128,130,127,125,120,124,0,122,127],
[132,120,125,112,134,127,133,134,131,123,112,124,128,0,125],
[136,117,128,127,125,132,125,143,126,127,118,115,123,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 191, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,110,117,128,120,112,123,137,116,114,121,150,114],
[138,0,137,125,128,132,130,116,133,141,117,118,129,140,130],
[140,113,0,115,124,134,137,108,142,142,112,114,122,140,132],
[140,125,135,0,131,121,139,112,125,135,118,121,129,130,128],
[133,122,126,119,0,131,113,117,116,130,120,122,113,135,110],
[122,118,116,129,119,0,116,123,129,125,115,108,115,145,116],
[130,120,113,111,137,134,0,127,135,124,119,118,127,140,123],
[138,134,142,138,133,127,123,0,135,144,127,127,133,149,132],
[127,117,108,125,134,121,115,115,0,119,109,114,117,146,112],
[113,109,108,115,120,125,126,106,131,0,109,107,110,125,109],
[134,133,138,132,130,135,131,123,141,141,0,123,133,144,142],
[136,132,136,129,128,142,132,123,136,143,127,0,135,142,118],
[129,121,128,121,137,135,123,117,133,140,117,115,0,144,134],
[100,110,110,120,115,105,110,101,104,125,106,108,106,0,110],
[136,120,118,122,140,134,127,118,138,141,108,132,116,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 192, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,116,114,124,119,107,135,124,126,112,111,127,124,122],
[141,0,121,105,132,123,109,129,118,127,118,103,127,128,117],
[134,129,0,104,133,124,110,136,116,113,110,102,138,154,119],
[136,145,146,0,139,131,114,137,131,127,135,131,147,153,145],
[126,118,117,111,0,123,105,132,126,105,132,109,132,128,125],
[131,127,126,119,127,0,116,139,100,136,123,97,137,121,116],
[143,141,140,136,145,134,0,146,124,123,126,125,144,134,116],
[115,121,114,113,118,111,104,0,114,128,108,96,127,106,117],
[126,132,134,119,124,150,126,136,0,140,114,122,148,137,150],
[124,123,137,123,145,114,127,122,110,0,108,117,120,128,117],
[138,132,140,115,118,127,124,142,136,142,0,104,141,135,128],
[139,147,148,119,141,153,125,154,128,133,146,0,155,147,125],
[123,123,112,103,118,113,106,123,102,130,109,95,0,117,112],
[126,122,96,97,122,129,116,144,113,122,115,103,133,0,105],
[128,133,131,105,125,134,134,133,100,133,122,125,138,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 193, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,9,162,115,152,127,93,144,152,121,127,51,172,153,104],
[241,0,168,120,196,167,142,168,207,185,161,151,190,197,145],
[88,82,0,55,110,55,81,93,131,137,64,94,140,152,66],
[135,130,195,0,120,153,101,147,205,165,157,111,184,172,149],
[98,54,140,130,0,104,117,116,181,160,82,30,150,103,109],
[123,83,195,97,146,0,100,157,141,149,122,89,156,168,96],
[157,108,169,149,133,150,0,175,208,147,131,63,127,161,147],
[106,82,157,103,134,93,75,0,175,139,141,85,174,142,147],
[98,43,119,45,69,109,42,75,0,62,116,39,93,95,55],
[129,65,113,85,90,101,103,111,188,0,109,80,115,133,81],
[123,89,186,93,168,128,119,109,134,141,0,34,117,143,104],
[199,99,156,139,220,161,187,165,211,170,216,0,195,148,200],
[78,60,110,66,100,94,123,76,157,135,133,55,0,102,86],
[97,53,98,78,147,82,89,108,155,117,107,102,148,0,118],
[146,105,184,101,141,154,103,103,195,169,146,50,164,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 194, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,127,139,127,129,130,116,138,141,126,134,123,118,143],
[130,0,111,121,117,124,124,116,135,137,110,127,123,127,133],
[123,139,0,130,135,145,131,115,143,151,120,134,131,129,132],
[111,129,120,0,128,128,123,118,125,134,122,129,132,125,135],
[123,133,115,122,0,120,127,124,135,138,109,141,123,127,131],
[121,126,105,122,130,0,129,113,126,128,121,124,129,121,129],
[120,126,119,127,123,121,0,123,131,141,121,131,127,128,125],
[134,134,135,132,126,137,127,0,136,153,125,135,122,123,142],
[112,115,107,125,115,124,119,114,0,129,117,125,127,120,131],
[109,113,99,116,112,122,109,97,121,0,106,107,116,121,117],
[124,140,130,128,141,129,129,125,133,144,0,134,134,132,143],
[116,123,116,121,109,126,119,115,125,143,116,0,121,117,135],
[127,127,119,118,127,121,123,128,123,134,116,129,0,128,137],
[132,123,121,125,123,129,122,127,130,129,118,133,122,0,131],
[107,117,118,115,119,121,125,108,119,133,107,115,113,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 195, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,106,94,112,111,117,110,132,112,98,103,123,114],
[144,0,114,120,118,137,135,130,130,136,132,130,124,138,132],
[148,136,0,129,130,136,136,140,139,166,118,130,127,133,127],
[144,130,121,0,119,128,124,128,131,147,132,133,119,132,132],
[156,132,120,131,0,129,127,134,137,149,122,133,121,127,139],
[138,113,114,122,121,0,121,119,132,140,108,120,105,129,113],
[139,115,114,126,123,129,0,124,119,142,112,122,112,119,118],
[133,120,110,122,116,131,126,0,133,150,135,123,117,131,112],
[140,120,111,119,113,118,131,117,0,134,118,119,127,118,125],
[118,114,84,103,101,110,108,100,116,0,101,104,108,103,115],
[138,118,132,118,128,142,138,115,132,149,0,145,116,127,131],
[152,120,120,117,117,130,128,127,131,146,105,0,113,127,131],
[147,126,123,131,129,145,138,133,123,142,134,137,0,130,141],
[127,112,117,118,123,121,131,119,132,147,123,123,120,0,121],
[136,118,123,118,111,137,132,138,125,135,119,119,109,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 196, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,119,142,130,115,149,119,112,128,115,129,122,127,94],
[130,0,108,124,150,106,158,115,118,164,111,111,98,153,96],
[131,142,0,128,152,120,138,141,139,191,118,105,117,146,144],
[108,126,122,0,154,125,141,117,136,149,102,114,121,163,101],
[120,100,98,96,0,137,134,69,116,111,106,101,112,101,79],
[135,144,130,125,113,0,141,146,131,161,103,123,119,147,125],
[101,92,112,109,116,109,0,109,86,118,116,102,119,119,109],
[131,135,109,133,181,104,141,0,139,139,129,110,135,147,105],
[138,132,111,114,134,119,164,111,0,145,131,127,130,134,120],
[122,86,59,101,139,89,132,111,105,0,109,79,101,131,111],
[135,139,132,148,144,147,134,121,119,141,0,133,134,141,109],
[121,139,145,136,149,127,148,140,123,171,117,0,121,134,110],
[128,152,133,129,138,131,131,115,120,149,116,129,0,153,116],
[123,97,104,87,149,103,131,103,116,119,109,116,97,0,92],
[156,154,106,149,171,125,141,145,130,139,141,140,134,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 197, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,122,123,140,117,120,130,137,131,127,132,132,132,126],
[126,0,121,124,139,128,125,126,122,131,127,132,121,130,120],
[128,129,0,121,141,132,128,134,137,127,129,134,132,128,131],
[127,126,129,0,129,122,119,130,130,132,126,143,128,125,127],
[110,111,109,121,0,113,108,111,113,130,118,125,115,120,113],
[133,122,118,128,137,0,116,117,125,133,131,122,131,130,118],
[130,125,122,131,142,134,0,132,134,138,124,132,126,134,138],
[120,124,116,120,139,133,118,0,124,122,118,128,131,116,122],
[113,128,113,120,137,125,116,126,0,123,140,129,131,132,128],
[119,119,123,118,120,117,112,128,127,0,120,118,119,127,114],
[123,123,121,124,132,119,126,132,110,130,0,121,133,126,121],
[118,118,116,107,125,128,118,122,121,132,129,0,130,126,124],
[118,129,118,122,135,119,124,119,119,131,117,120,0,119,131],
[118,120,122,125,130,120,116,134,118,123,124,124,131,0,125],
[124,130,119,123,137,132,112,128,122,136,129,126,119,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 198, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,138,124,130,121,125,105,114,104,105,108,138,121,127],
[134,0,138,138,136,130,128,112,120,112,130,121,132,141,134],
[112,112,0,122,116,112,124,125,117,113,118,115,125,113,111],
[126,112,128,0,132,131,135,121,111,110,114,118,137,128,121],
[120,114,134,118,0,123,123,124,120,110,123,127,139,126,134],
[129,120,138,119,127,0,134,125,124,118,115,122,121,133,128],
[125,122,126,115,127,116,0,114,121,120,121,108,137,129,120],
[145,138,125,129,126,125,136,0,132,125,127,111,148,139,146],
[136,130,133,139,130,126,129,118,0,120,131,125,141,132,133],
[146,138,137,140,140,132,130,125,130,0,136,131,141,141,138],
[145,120,132,136,127,135,129,123,119,114,0,122,139,127,125],
[142,129,135,132,123,128,142,139,125,119,128,0,140,145,134],
[112,118,125,113,111,129,113,102,109,109,111,110,0,105,113],
[129,109,137,122,124,117,121,111,118,109,123,105,145,0,119],
[123,116,139,129,116,122,130,104,117,112,125,116,137,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 199, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,130,160,145,122,136,149,141,133,128,134,119,142,149],
[121,0,127,124,132,108,144,146,122,121,125,125,113,150,132],
[120,123,0,168,135,149,149,141,127,140,135,139,127,135,147],
[90,126,82,0,117,112,113,101,84,126,105,88,99,115,124],
[105,118,115,133,0,116,125,121,120,135,142,114,115,133,141],
[128,142,101,138,134,0,144,137,126,146,120,124,108,151,124],
[114,106,101,137,125,106,0,121,89,139,113,99,90,112,121],
[101,104,109,149,129,113,129,0,109,119,111,120,113,109,123],
[109,128,123,166,130,124,161,141,0,127,120,133,106,153,147],
[117,129,110,124,115,104,111,131,123,0,124,127,106,130,124],
[122,125,115,145,108,130,137,139,130,126,0,142,112,137,137],
[116,125,111,162,136,126,151,130,117,123,108,0,123,131,147],
[131,137,123,151,135,142,160,137,144,144,138,127,0,149,139],
[108,100,115,135,117,99,138,141,97,120,113,119,101,0,121],
[101,118,103,126,109,126,129,127,103,126,113,103,111,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([15, 250, 200, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebbrcw/mebbrcw_15_250.csv", index=False, header=False)
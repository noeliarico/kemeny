
import numpy as np
import pandas as pd
import time
from kemeny import algorithms as alg

rep = 1
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,31,23,29,23,27,28,23,21,24,31,30,26,30],
[20,0,26,28,21,26,21,21,20,26,23,28,24,24],
[28,25,0,25,18,30,25,21,21,24,24,30,18,27],
[22,23,26,0,27,27,26,29,19,21,25,24,28,24],
[28,30,33,24,0,27,27,26,30,26,30,32,28,31],
[24,25,21,24,24,0,20,18,22,20,30,26,22,33],
[23,30,26,25,24,31,0,27,21,24,22,36,23,29],
[28,30,30,22,25,33,24,0,24,24,30,30,28,27],
[30,31,30,32,21,29,30,27,0,22,33,38,28,33],
[27,25,27,30,25,31,27,27,29,0,32,32,29,30],
[20,28,27,26,21,21,29,21,18,19,0,27,21,24],
[21,23,21,27,19,25,15,21,13,19,24,0,23,23],
[25,27,33,23,23,29,28,23,23,22,30,28,0,33],
[21,27,24,27,20,18,22,24,18,21,27,28,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 1, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,24,27,25,26,19,23,29,28,26,24,26,21],
[33,0,27,28,26,27,29,25,28,33,32,27,31,24],
[27,24,0,30,28,28,25,26,28,32,31,26,28,25],
[24,23,21,0,30,19,21,22,22,28,26,23,25,19],
[26,25,23,21,0,25,23,24,23,33,27,23,31,27],
[25,24,23,32,26,0,26,25,27,33,31,29,29,20],
[32,22,26,30,28,25,0,24,26,36,33,30,32,28],
[28,26,25,29,27,26,27,0,25,31,29,26,27,25],
[22,23,23,29,28,24,25,26,0,30,28,27,31,22],
[23,18,19,23,18,18,15,20,21,0,21,17,21,20],
[25,19,20,25,24,20,18,22,23,30,0,18,22,22],
[27,24,25,28,28,22,21,25,24,34,33,0,37,26],
[25,20,23,26,20,22,19,24,20,30,29,14,0,24],
[30,27,26,32,24,31,23,26,29,31,29,25,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 2, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,31,18,25,26,20,21,22,10,15,21,20,14],
[31,0,38,23,28,39,19,21,15,22,35,27,26,21],
[20,13,0,22,14,16,12,15,12,15,21,21,18,19],
[33,28,29,0,36,27,21,32,25,17,25,36,23,31],
[26,23,37,15,0,30,13,24,15,9,25,14,21,21],
[25,12,35,24,21,0,12,17,16,12,20,23,31,18],
[31,32,39,30,38,39,0,34,38,20,31,36,33,22],
[30,30,36,19,27,34,17,0,20,16,31,25,21,19],
[29,36,39,26,36,35,13,31,0,22,29,23,27,21],
[41,29,36,34,42,39,31,35,29,0,33,37,39,23],
[36,16,30,26,26,31,20,20,22,18,0,30,21,20],
[30,24,30,15,37,28,15,26,28,14,21,0,21,19],
[31,25,33,28,30,20,18,30,24,12,30,30,0,25],
[37,30,32,20,30,33,29,32,30,28,31,32,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 3, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,28,25,28,17,35,23,23,19,29,27,23,29],
[25,0,33,31,28,20,29,31,29,29,34,32,28,30],
[23,18,0,23,29,16,26,27,22,23,24,24,21,27],
[26,20,28,0,30,24,30,17,23,25,29,28,22,24],
[23,23,22,21,0,20,30,22,24,28,28,24,20,28],
[34,31,35,27,31,0,36,30,24,30,30,33,26,30],
[16,22,25,21,21,15,0,24,19,21,23,25,18,21],
[28,20,24,34,29,21,27,0,28,29,34,32,30,28],
[28,22,29,28,27,27,32,23,0,27,33,33,33,28],
[32,22,28,26,23,21,30,22,24,0,31,27,26,23],
[22,17,27,22,23,21,28,17,18,20,0,22,22,23],
[24,19,27,23,27,18,26,19,18,24,29,0,24,26],
[28,23,30,29,31,25,33,21,18,25,29,27,0,24],
[22,21,24,27,23,21,30,23,23,28,28,25,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 4, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,27,31,27,33,18,26,27,27,34,32,26,25],
[30,0,32,31,28,35,34,27,23,27,30,27,19,24],
[24,19,0,22,25,31,31,23,19,25,15,24,17,30],
[20,20,29,0,24,27,17,20,25,21,28,25,24,20],
[24,23,26,27,0,26,29,21,13,15,17,23,13,15],
[18,16,20,24,25,0,33,27,15,20,23,27,9,19],
[33,17,20,34,22,18,0,19,19,19,24,22,25,16],
[25,24,28,31,30,24,32,0,14,35,30,23,13,23],
[24,28,32,26,38,36,32,37,0,35,37,31,6,30],
[24,24,26,30,36,31,32,16,16,0,24,24,8,34],
[17,21,36,23,34,28,27,21,14,27,0,28,20,28],
[19,24,27,26,28,24,29,28,20,27,23,0,17,19],
[25,32,34,27,38,42,26,38,45,43,31,34,0,32],
[26,27,21,31,36,32,35,28,21,17,23,32,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 5, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,27,27,24,21,22,17,26,28,27,28,21,23],
[32,0,24,32,29,29,34,17,34,33,25,36,25,24],
[24,27,0,28,16,26,21,18,31,34,21,33,25,27],
[24,19,23,0,22,21,21,16,34,27,20,32,24,20],
[27,22,35,29,0,27,23,19,31,36,38,32,32,23],
[30,22,25,30,24,0,30,23,35,31,28,38,30,18],
[29,17,30,30,28,21,0,16,32,23,26,25,24,25],
[34,34,33,35,32,28,35,0,35,37,30,36,34,24],
[25,17,20,17,20,16,19,16,0,21,19,22,19,18],
[23,18,17,24,15,20,28,14,30,0,15,29,21,17],
[24,26,30,31,13,23,25,21,32,36,0,33,27,25],
[23,15,18,19,19,13,26,15,29,22,18,0,10,18],
[30,26,26,27,19,21,27,17,32,30,24,41,0,16],
[28,27,24,31,28,33,26,27,33,34,26,33,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 6, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,22,24,26,14,16,33,25,25,26,16,23,26],
[34,0,19,30,24,21,21,30,29,27,22,25,28,32],
[29,32,0,28,30,27,28,30,25,27,30,27,31,28],
[27,21,23,0,31,25,20,27,26,23,24,27,27,26],
[25,27,21,20,0,17,17,26,16,25,19,18,32,18],
[37,30,24,26,34,0,26,37,34,28,30,24,32,32],
[35,30,23,31,34,25,0,31,26,24,28,26,25,34],
[18,21,21,24,25,14,20,0,19,19,21,19,22,22],
[26,22,26,25,35,17,25,32,0,25,24,28,30,28],
[26,24,24,28,26,23,27,32,26,0,26,29,25,28],
[25,29,21,27,32,21,23,30,27,25,0,21,28,33],
[35,26,24,24,33,27,25,32,23,22,30,0,30,29],
[28,23,20,24,19,19,26,29,21,26,23,21,0,25],
[25,19,23,25,33,19,17,29,23,23,18,22,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 7, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,33,33,26,35,32,34,29,15,36,34,29,31],
[25,0,25,30,27,33,23,33,26,19,31,37,28,31],
[18,26,0,27,24,34,20,25,23,18,34,29,29,28],
[18,21,24,0,21,23,20,17,24,16,28,25,26,20],
[25,24,27,30,0,31,26,26,37,25,36,35,29,30],
[16,18,17,28,20,0,22,14,25,20,15,26,21,27],
[19,28,31,31,25,29,0,27,32,20,37,30,30,31],
[17,18,26,34,25,37,24,0,35,24,34,29,26,35],
[22,25,28,27,14,26,19,16,0,17,31,27,25,32],
[36,32,33,35,26,31,31,27,34,0,32,33,36,23],
[15,20,17,23,15,36,14,17,20,19,0,25,19,31],
[17,14,22,26,16,25,21,22,24,18,26,0,18,23],
[22,23,22,25,22,30,21,25,26,15,32,33,0,30],
[20,20,23,31,21,24,20,16,19,28,20,28,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 8, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,29,24,21,20,30,22,33,29,28,29,26,26],
[25,0,28,18,23,23,26,15,20,27,22,21,21,29],
[22,23,0,17,21,25,17,20,25,22,26,30,24,30],
[27,33,34,0,31,26,34,19,35,28,28,31,23,34],
[30,28,30,20,0,29,25,30,32,34,30,33,27,34],
[31,28,26,25,22,0,31,18,28,31,32,27,23,27],
[21,25,34,17,26,20,0,23,29,24,25,28,23,32],
[29,36,31,32,21,33,28,0,36,32,36,32,27,34],
[18,31,26,16,19,23,22,15,0,30,23,33,24,33],
[22,24,29,23,17,20,27,19,21,0,27,21,24,24],
[23,29,25,23,21,19,26,15,28,24,0,30,24,33],
[22,30,21,20,18,24,23,19,18,30,21,0,29,29],
[25,30,27,28,24,28,28,24,27,27,27,22,0,26],
[25,22,21,17,17,24,19,17,18,27,18,22,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 9, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,22,23,26,26,29,25,31,26,27,29,39,24],
[27,0,34,29,29,34,25,28,26,26,30,29,39,28],
[29,17,0,19,28,28,31,23,27,24,25,28,35,27],
[28,22,32,0,33,26,35,28,21,30,26,25,35,26],
[25,22,23,18,0,29,29,28,32,24,34,20,31,25],
[25,17,23,25,22,0,27,24,20,22,24,20,33,27],
[22,26,20,16,22,24,0,24,22,23,21,24,32,22],
[26,23,28,23,23,27,27,0,25,23,23,30,37,28],
[20,25,24,30,19,31,29,26,0,27,28,28,36,32],
[25,25,27,21,27,29,28,28,24,0,27,26,39,31],
[24,21,26,25,17,27,30,28,23,24,0,29,29,30],
[22,22,23,26,31,31,27,21,23,25,22,0,39,24],
[12,12,16,16,20,18,19,14,15,12,22,12,0,17],
[27,23,24,25,26,24,29,23,19,20,21,27,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 10, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,30,23,20,27,34,42,31,42,41,25,35,22],
[13,0,29,24,17,13,29,26,19,41,41,31,32,26],
[21,22,0,17,27,24,15,24,21,18,38,16,28,28],
[28,27,34,0,21,32,29,35,26,35,41,32,36,38],
[31,34,24,30,0,32,34,37,30,37,45,34,32,31],
[24,38,27,19,19,0,38,31,27,40,44,32,34,30],
[17,22,36,22,17,13,0,31,22,44,44,21,31,24],
[9,25,27,16,14,20,20,0,16,33,34,22,31,29],
[20,32,30,25,21,24,29,35,0,36,42,37,28,14],
[9,10,33,16,14,11,7,18,15,0,42,9,24,14],
[10,10,13,10,6,7,7,17,9,9,0,5,23,15],
[26,20,35,19,17,19,30,29,14,42,46,0,32,27],
[16,19,23,15,19,17,20,20,23,27,28,19,0,14],
[29,25,23,13,20,21,27,22,37,37,36,24,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 11, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,37,31,24,34,28,25,26,33,33,32,30,29],
[20,0,26,19,23,23,23,23,19,27,23,21,20,14],
[14,25,0,21,17,22,25,19,21,25,23,25,22,20],
[20,32,30,0,27,29,29,28,21,31,27,33,24,22],
[27,28,34,24,0,33,28,27,27,33,28,29,30,25],
[17,28,29,22,18,0,25,22,23,28,19,22,26,18],
[23,28,26,22,23,26,0,18,21,34,20,23,25,23],
[26,28,32,23,24,29,33,0,25,33,26,34,30,23],
[25,32,30,30,24,28,30,26,0,32,29,27,32,24],
[18,24,26,20,18,23,17,18,19,0,21,23,22,19],
[18,28,28,24,23,32,31,25,22,30,0,25,31,24],
[19,30,26,18,22,29,28,17,24,28,26,0,23,22],
[21,31,29,27,21,25,26,21,19,29,20,28,0,15],
[22,37,31,29,26,33,28,28,27,32,27,29,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 12, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,12,22,27,22,22,38,31,22,23,23,22,15],
[28,0,9,28,25,21,19,32,34,34,26,31,15,20],
[39,42,0,31,38,38,23,36,39,43,43,38,36,32],
[29,23,20,0,22,29,16,35,24,30,22,34,18,18],
[24,26,13,29,0,27,19,25,14,41,23,26,16,31],
[29,30,13,22,24,0,19,39,28,28,19,30,18,11],
[29,32,28,35,32,32,0,34,25,37,40,33,26,27],
[13,19,15,16,26,12,17,0,32,30,21,28,14,12],
[20,17,12,27,37,23,26,19,0,34,16,31,17,24],
[29,17,8,21,10,23,14,21,17,0,15,17,11,21],
[28,25,8,29,28,32,11,30,35,36,0,28,21,25],
[28,20,13,17,25,21,18,23,20,34,23,0,6,17],
[29,36,15,33,35,33,25,37,34,40,30,45,0,22],
[36,31,19,33,20,40,24,39,27,30,26,34,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 13, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,22,22,25,31,23,23,29,25,28,30,29],
[24,0,23,19,21,24,24,19,18,31,20,22,28,27],
[23,28,0,25,22,26,28,23,29,26,30,26,27,27],
[29,32,26,0,25,25,28,25,26,29,30,27,29,32],
[29,30,29,26,0,28,36,22,28,27,31,26,26,31],
[26,27,25,26,23,0,32,24,28,30,28,26,26,30],
[20,27,23,23,15,19,0,23,22,25,22,20,21,26],
[28,32,28,26,29,27,28,0,29,31,28,24,26,30],
[28,33,22,25,23,23,29,22,0,29,25,26,24,27],
[22,20,25,22,24,21,26,20,22,0,20,21,23,24],
[26,31,21,21,20,23,29,23,26,31,0,25,23,26],
[23,29,25,24,25,25,31,27,25,30,26,0,30,29],
[21,23,24,22,25,25,30,25,27,28,28,21,0,29],
[22,24,24,19,20,21,25,21,24,27,25,22,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 14, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,22,27,22,22,25,28,24,29,26,16,21,24],
[33,0,24,30,24,23,21,27,30,26,23,24,22,26],
[29,27,0,29,23,29,33,33,31,26,31,29,25,28],
[24,21,22,0,20,27,21,30,25,18,30,20,24,20],
[29,27,28,31,0,26,23,36,27,25,26,26,29,30],
[29,28,22,24,25,0,25,29,31,21,29,21,27,24],
[26,30,18,30,28,26,0,26,29,23,32,25,24,25],
[23,24,18,21,15,22,25,0,24,20,22,15,21,20],
[27,21,20,26,24,20,22,27,0,20,24,21,24,19],
[22,25,25,33,26,30,28,31,31,0,24,25,28,26],
[25,28,20,21,25,22,19,29,27,27,0,22,25,24],
[35,27,22,31,25,30,26,36,30,26,29,0,27,28],
[30,29,26,27,22,24,27,30,27,23,26,24,0,25],
[27,25,23,31,21,27,26,31,32,25,27,23,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 15, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,31,30,32,26,29,26,28,33,27,26,25,33],
[25,0,28,27,31,27,27,29,31,31,27,27,27,26],
[20,23,0,21,27,18,20,18,25,22,22,25,28,28],
[21,24,30,0,29,26,27,23,23,29,24,25,22,29],
[19,20,24,22,0,22,23,21,25,26,23,22,23,32],
[25,24,33,25,29,0,28,21,26,29,23,24,24,30],
[22,24,31,24,28,23,0,22,27,30,25,22,27,29],
[25,22,33,28,30,30,29,0,30,26,23,26,25,30],
[23,20,26,28,26,25,24,21,0,28,25,24,26,27],
[18,20,29,22,25,22,21,25,23,0,28,22,22,27],
[24,24,29,27,28,28,26,28,26,23,0,23,28,27],
[25,24,26,26,29,27,29,25,27,29,28,0,28,31],
[26,24,23,29,28,27,24,26,25,29,23,23,0,27],
[18,25,23,22,19,21,22,21,24,24,24,20,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 16, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,29,29,24,30,31,24,22,34,29,29,20,22],
[17,0,22,28,22,34,25,23,21,28,23,23,20,23],
[22,29,0,35,21,27,26,18,21,24,26,24,21,25],
[22,23,16,0,19,20,17,17,16,20,25,18,16,21],
[27,29,30,32,0,31,27,27,21,28,31,25,23,22],
[21,17,24,31,20,0,20,23,19,23,24,21,20,20],
[20,26,25,34,24,31,0,20,26,26,24,22,22,22],
[27,28,33,34,24,28,31,0,27,28,24,25,29,27],
[29,30,30,35,30,32,25,24,0,36,29,30,26,28],
[17,23,27,31,23,28,25,23,15,0,24,20,22,20],
[22,28,25,26,20,27,27,27,22,27,0,27,22,21],
[22,28,27,33,26,30,29,26,21,31,24,0,23,25],
[31,31,30,35,28,31,29,22,25,29,29,28,0,31],
[29,28,26,30,29,31,29,24,23,31,30,26,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 17, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,28,22,23,17,24,16,19,17,28,22,19,27],
[29,0,32,30,28,28,25,21,25,20,32,27,29,28],
[23,19,0,28,29,27,21,16,21,20,23,25,20,20],
[29,21,23,0,18,19,16,8,21,21,33,18,24,16],
[28,23,22,33,0,28,27,25,26,31,28,29,27,24],
[34,23,24,32,23,0,24,24,24,24,25,33,28,30],
[27,26,30,35,24,27,0,18,27,26,26,26,22,22],
[35,30,35,43,26,27,33,0,25,24,33,35,25,31],
[32,26,30,30,25,27,24,26,0,29,30,33,22,25],
[34,31,31,30,20,27,25,27,22,0,26,34,29,28],
[23,19,28,18,23,26,25,18,21,25,0,29,22,23],
[29,24,26,33,22,18,25,16,18,17,22,0,26,25],
[32,22,31,27,24,23,29,26,29,22,29,25,0,21],
[24,23,31,35,27,21,29,20,26,23,28,26,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 18, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,28,29,25,27,36,31,29,28,31,26,31,26],
[26,0,22,25,37,24,28,30,24,19,32,23,32,25],
[23,29,0,26,26,31,22,27,20,20,28,26,32,21],
[22,26,25,0,27,22,31,34,22,28,27,25,27,19],
[26,14,25,24,0,24,23,23,23,20,22,16,24,25],
[24,27,20,29,27,0,22,25,22,26,22,21,32,20],
[15,23,29,20,28,29,0,29,24,25,26,19,27,12],
[20,21,24,17,28,26,22,0,18,15,23,18,18,18],
[22,27,31,29,28,29,27,33,0,29,25,17,30,26],
[23,32,31,23,31,25,26,36,22,0,27,24,34,25],
[20,19,23,24,29,29,25,28,26,24,0,22,32,20],
[25,28,25,26,35,30,32,33,34,27,29,0,28,28],
[20,19,19,24,27,19,24,33,21,17,19,23,0,15],
[25,26,30,32,26,31,39,33,25,26,31,23,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 19, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,21,23,28,23,20,21,32,16,29,30,23,25],
[29,0,19,24,21,21,22,22,27,20,36,21,28,30],
[30,32,0,22,21,23,17,25,32,21,41,25,29,29],
[28,27,29,0,28,27,26,21,33,21,34,32,29,30],
[23,30,30,23,0,35,32,23,28,26,32,26,32,30],
[28,30,28,24,16,0,21,21,32,17,29,23,27,32],
[31,29,34,25,19,30,0,27,31,24,34,23,30,31],
[30,29,26,30,28,30,24,0,33,28,38,28,27,29],
[19,24,19,18,23,19,20,18,0,18,23,17,25,24],
[35,31,30,30,25,34,27,23,33,0,32,26,32,32],
[22,15,10,17,19,22,17,13,28,19,0,17,18,16],
[21,30,26,19,25,28,28,23,34,25,34,0,31,31],
[28,23,22,22,19,24,21,24,26,19,33,20,0,27],
[26,21,22,21,21,19,20,22,27,19,35,20,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 20, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,26,31,23,26,34,27,37,28,34,25,27,23],
[18,0,20,18,17,22,28,16,27,26,15,20,21,19],
[25,31,0,31,20,21,34,22,24,32,27,26,30,15],
[20,33,20,0,19,28,37,16,33,25,24,26,15,28],
[28,34,31,32,0,31,34,26,38,33,30,23,34,24],
[25,29,30,23,20,0,27,17,32,31,20,33,23,8],
[17,23,17,14,17,24,0,17,15,18,13,21,10,6],
[24,35,29,35,25,34,34,0,26,24,27,30,18,17],
[14,24,27,18,13,19,36,25,0,33,23,23,21,9],
[23,25,19,26,18,20,33,27,18,0,30,25,26,19],
[17,36,24,27,21,31,38,24,28,21,0,30,15,25],
[26,31,25,25,28,18,30,21,28,26,21,0,25,12],
[24,30,21,36,17,28,41,33,30,25,36,26,0,24],
[28,32,36,23,27,43,45,34,42,32,26,39,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 21, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,18,27,24,22,30,21,20,20,32,28,20,16],
[20,0,26,18,14,20,23,19,16,20,31,31,10,27],
[33,25,0,33,24,29,37,31,27,21,33,37,19,36],
[24,33,18,0,20,25,30,17,24,22,27,24,15,17],
[27,37,27,31,0,30,29,15,30,20,36,38,18,25],
[29,31,22,26,21,0,28,19,19,27,32,36,18,17],
[21,28,14,21,22,23,0,7,16,15,37,19,7,16],
[30,32,20,34,36,32,44,0,23,24,40,33,14,29],
[31,35,24,27,21,32,35,28,0,20,28,37,18,34],
[31,31,30,29,31,24,36,27,31,0,23,40,31,29],
[19,20,18,24,15,19,14,11,23,28,0,27,15,13],
[23,20,14,27,13,15,32,18,14,11,24,0,12,16],
[31,41,32,36,33,33,44,37,33,20,36,39,0,29],
[35,24,15,34,26,34,35,22,17,22,38,35,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 22, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,23,27,33,27,20,22,20,13,30,27,16,27],
[25,0,22,25,36,26,20,22,26,21,31,25,26,34],
[28,29,0,24,31,25,17,25,25,22,28,27,16,32],
[24,26,27,0,24,20,20,23,24,14,27,31,18,31],
[18,15,20,27,0,22,20,21,23,13,16,26,21,30],
[24,25,26,31,29,0,15,26,25,12,21,22,19,26],
[31,31,34,31,31,36,0,26,27,20,28,26,21,37],
[29,29,26,28,30,25,25,0,28,16,32,27,31,36],
[31,25,26,27,28,26,24,23,0,27,25,33,19,30],
[38,30,29,37,38,39,31,35,24,0,34,30,28,32],
[21,20,23,24,35,30,23,19,26,17,0,30,20,35],
[24,26,24,20,25,29,25,24,18,21,21,0,23,30],
[35,25,35,33,30,32,30,20,32,23,31,28,0,33],
[24,17,19,20,21,25,14,15,21,19,16,21,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 23, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,26,29,28,26,22,28,26,30,32,29,25,23],
[20,0,23,24,21,20,19,20,17,28,20,26,26,19],
[25,28,0,30,27,27,20,24,26,23,23,24,26,22],
[22,27,21,0,19,21,17,23,25,28,24,23,26,18],
[23,30,24,32,0,27,22,27,24,29,26,25,23,24],
[25,31,24,30,24,0,21,29,29,31,19,31,27,23],
[29,32,31,34,29,30,0,27,30,34,28,30,24,29],
[23,31,27,28,24,22,24,0,28,28,26,21,28,23],
[25,34,25,26,27,22,21,23,0,29,28,26,28,24],
[21,23,28,23,22,20,17,23,22,0,17,22,22,15],
[19,31,28,27,25,32,23,25,23,34,0,27,29,20],
[22,25,27,28,26,20,21,30,25,29,24,0,28,24],
[26,25,25,25,28,24,27,23,23,29,22,23,0,20],
[28,32,29,33,27,28,22,28,27,36,31,27,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 24, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,27,35,36,37,32,31,34,24,31,34,37,35],
[18,0,26,23,25,24,22,17,28,20,22,24,24,28],
[24,25,0,26,29,26,24,24,35,25,28,30,29,33],
[16,28,25,0,24,29,21,25,23,21,23,27,27,30],
[15,26,22,27,0,28,25,25,23,24,20,26,19,26],
[14,27,25,22,23,0,27,27,26,21,20,22,26,24],
[19,29,27,30,26,24,0,20,24,26,22,26,31,26],
[20,34,27,26,26,24,31,0,32,28,25,27,27,26],
[17,23,16,28,28,25,27,19,0,22,20,23,30,33],
[27,31,26,30,27,30,25,23,29,0,30,33,29,34],
[20,29,23,28,31,31,29,26,31,21,0,29,32,35],
[17,27,21,24,25,29,25,24,28,18,22,0,22,30],
[14,27,22,24,32,25,20,24,21,22,19,29,0,23],
[16,23,18,21,25,27,25,25,18,17,16,21,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 25, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,24,30,27,22,22,27,23,24,27,20,19,29],
[29,0,25,24,29,22,23,28,21,24,25,15,24,32],
[27,26,0,29,27,20,22,31,25,21,25,23,26,32],
[21,27,22,0,23,16,22,20,22,19,23,14,23,29],
[24,22,24,28,0,27,22,24,22,24,24,21,23,27],
[29,29,31,35,24,0,28,34,25,28,27,30,30,33],
[29,28,29,29,29,23,0,34,28,21,28,27,30,29],
[24,23,20,31,27,17,17,0,27,22,22,20,23,26],
[28,30,26,29,29,26,23,24,0,24,30,27,30,33],
[27,27,30,32,27,23,30,29,27,0,27,17,28,33],
[24,26,26,28,27,24,23,29,21,24,0,23,27,31],
[31,36,28,37,30,21,24,31,24,34,28,0,30,34],
[32,27,25,28,28,21,21,28,21,23,24,21,0,33],
[22,19,19,22,24,18,22,25,18,18,20,17,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 26, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,23,27,22,28,26,32,19,31,28,29,26,27],
[31,0,33,39,24,30,26,36,24,37,29,28,25,32],
[28,18,0,23,19,29,26,31,19,31,19,21,20,22],
[24,12,28,0,15,23,24,24,22,26,21,22,21,19],
[29,27,32,36,0,25,29,22,19,29,22,21,23,26],
[23,21,22,28,26,0,22,34,20,28,18,18,17,21],
[25,25,25,27,22,29,0,26,17,23,25,20,20,21],
[19,15,20,27,29,17,25,0,18,21,9,11,16,16],
[32,27,32,29,32,31,34,33,0,27,26,21,21,24],
[20,14,20,25,22,23,28,30,24,0,20,19,22,26],
[23,22,32,30,29,33,26,42,25,31,0,31,23,25],
[22,23,30,29,30,33,31,40,30,32,20,0,25,27],
[25,26,31,30,28,34,31,35,30,29,28,26,0,26],
[24,19,29,32,25,30,30,35,27,25,26,24,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 27, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,33,27,25,29,20,20,25,26,11,17,32,27],
[24,0,22,22,30,23,27,24,23,33,24,18,33,34],
[18,29,0,25,28,31,21,17,17,23,16,13,22,25],
[24,29,26,0,28,30,18,32,30,31,28,17,24,23],
[26,21,23,23,0,24,23,26,14,25,13,20,22,18],
[22,28,20,21,27,0,17,25,17,26,15,22,19,19],
[31,24,30,33,28,34,0,36,22,22,17,27,18,17],
[31,27,34,19,25,26,15,0,31,30,21,16,28,32],
[26,28,34,21,37,34,29,20,0,39,32,24,34,32],
[25,18,28,20,26,25,29,21,12,0,8,24,22,15],
[40,27,35,23,38,36,34,30,19,43,0,35,35,26],
[34,33,38,34,31,29,24,35,27,27,16,0,23,32],
[19,18,29,27,29,32,33,23,17,29,16,28,0,31],
[24,17,26,28,33,32,34,19,19,36,25,19,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 28, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,29,24,23,24,26,24,28,29,30,25,29],
[24,0,32,29,29,27,27,30,29,27,31,24,27,29],
[23,19,0,27,22,19,23,20,21,25,22,24,22,24],
[22,22,24,0,21,18,26,23,19,21,21,29,24,24],
[27,22,29,30,0,27,31,25,25,26,20,25,25,31],
[28,24,32,33,24,0,29,28,26,21,30,29,29,28],
[27,24,28,25,20,22,0,29,21,26,27,27,26,21],
[25,21,31,28,26,23,22,0,29,21,24,19,26,24],
[27,22,30,32,26,25,30,22,0,26,25,25,25,27],
[23,24,26,30,25,30,25,30,25,0,29,29,25,24],
[22,20,29,30,31,21,24,27,26,22,0,24,28,28],
[21,27,27,22,26,22,24,32,26,22,27,0,26,31],
[26,24,29,27,26,22,25,25,26,26,23,25,0,26],
[22,22,27,27,20,23,30,27,24,27,23,20,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 29, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,42,28,42,20,26,28,42,34,30,42,42,42],
[23,0,43,8,26,21,14,21,43,22,22,43,43,23],
[9,8,0,8,14,21,14,9,23,22,22,39,43,23],
[23,43,43,0,26,21,26,21,35,26,22,51,35,35],
[9,25,37,25,0,21,23,17,39,31,39,39,51,31],
[31,30,30,30,30,0,14,25,30,22,30,30,42,30],
[25,37,37,25,28,37,0,37,37,20,16,37,37,37],
[23,30,42,30,34,26,14,0,30,22,30,42,42,30],
[9,8,28,16,12,21,14,21,0,22,30,42,43,23],
[17,29,29,25,20,29,31,29,29,0,39,51,43,31],
[21,29,29,29,12,21,35,21,21,12,0,37,21,21],
[9,8,12,0,12,21,14,9,9,0,14,0,35,9],
[9,8,8,16,0,9,14,9,8,8,30,16,0,0],
[9,28,28,16,20,21,14,21,28,20,30,42,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 30, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,22,19,28,22,18,23,23,26,25,29,21,34],
[23,0,12,20,22,15,18,18,16,12,9,29,22,22],
[29,39,0,30,32,31,19,29,32,35,32,29,30,33],
[32,31,21,0,33,26,29,28,31,33,24,35,21,32],
[23,29,19,18,0,30,22,30,27,26,17,26,27,22],
[29,36,20,25,21,0,23,27,23,27,27,29,30,23],
[33,33,32,22,29,28,0,32,32,31,33,37,31,39],
[28,33,22,23,21,24,19,0,26,22,24,27,23,23],
[28,35,19,20,24,28,19,25,0,27,28,33,27,39],
[25,39,16,18,25,24,20,29,24,0,25,31,24,27],
[26,42,19,27,34,24,18,27,23,26,0,29,29,36],
[22,22,22,16,25,22,14,24,18,20,22,0,17,24],
[30,29,21,30,24,21,20,28,24,27,22,34,0,28],
[17,29,18,19,29,28,12,28,12,24,15,27,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 31, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,32,28,28,22,13,34,20,20,25,33,24,27],
[22,0,42,28,25,36,30,18,32,24,22,33,17,27],
[19,9,0,24,8,19,9,14,16,16,14,20,0,23],
[23,23,27,0,7,23,14,23,4,4,9,13,14,14],
[23,26,43,44,0,19,23,24,43,30,28,30,27,33],
[29,15,32,28,32,0,20,28,32,24,29,27,32,32],
[38,21,42,37,28,31,0,34,38,24,38,33,29,41],
[17,33,37,28,27,23,17,0,27,24,16,20,27,27],
[31,19,35,47,8,19,13,24,0,17,14,30,14,33],
[31,27,35,47,21,27,27,27,34,0,14,38,35,51],
[26,29,37,42,23,22,13,35,37,37,0,33,37,37],
[18,18,31,38,21,24,18,31,21,13,18,0,31,28],
[27,34,51,37,24,19,22,24,37,16,14,20,0,28],
[24,24,28,37,18,19,10,24,18,0,14,23,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 32, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,28,19,16,14,19,19,26,20,18,18,24,19],
[29,0,27,22,18,27,29,29,27,20,21,32,25,27],
[23,24,0,24,20,17,25,19,22,25,23,25,26,22],
[32,29,27,0,26,36,39,29,32,28,26,27,33,22],
[35,33,31,25,0,27,31,22,38,32,27,27,28,30],
[37,24,34,15,24,0,36,22,24,21,28,26,21,25],
[32,22,26,12,20,15,0,20,21,19,23,24,18,19],
[32,22,32,22,29,29,31,0,32,26,25,31,28,21],
[25,24,29,19,13,27,30,19,0,19,26,19,22,17],
[31,31,26,23,19,30,32,25,32,0,26,23,23,34],
[33,30,28,25,24,23,28,26,25,25,0,32,27,24],
[33,19,26,24,24,25,27,20,32,28,19,0,32,15],
[27,26,25,18,23,30,33,23,29,28,24,19,0,21],
[32,24,29,29,21,26,32,30,34,17,27,36,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 33, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,13,20,21,26,27,20,9,15,21,22,15,20],
[25,0,14,28,21,20,26,34,22,22,9,22,22,22],
[38,37,0,31,21,38,26,45,34,39,31,33,27,44],
[31,23,20,0,19,32,13,37,32,39,26,13,40,44],
[30,30,30,32,0,38,24,38,32,38,25,26,32,32],
[25,31,13,19,13,0,26,25,14,21,12,13,14,13],
[24,25,25,38,27,25,0,38,28,33,19,21,33,32],
[31,17,6,14,13,26,13,0,14,27,14,21,9,32],
[42,29,17,19,19,37,23,37,0,39,37,32,26,32],
[36,29,12,12,13,30,18,24,12,0,24,18,13,24],
[30,42,20,25,26,39,32,37,14,27,0,13,20,32],
[29,29,18,38,25,38,30,30,19,33,38,0,33,31],
[36,29,24,11,19,37,18,42,25,38,31,18,0,32],
[31,29,7,7,19,38,19,19,19,27,19,20,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 34, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,31,24,31,35,30,26,26,35,28,29,31,17],
[20,0,32,24,24,21,18,23,24,23,25,24,26,18],
[20,19,0,18,24,21,19,22,25,26,19,20,21,19],
[27,27,33,0,29,33,28,25,24,33,24,28,33,19],
[20,27,27,22,0,25,28,22,23,32,16,25,25,20],
[16,30,30,18,26,0,32,26,31,30,24,30,26,26],
[21,33,32,23,23,19,0,28,22,26,23,26,28,22],
[25,28,29,26,29,25,23,0,32,31,29,29,31,22],
[25,27,26,27,28,20,29,19,0,30,19,24,29,19],
[16,28,25,18,19,21,25,20,21,0,16,17,27,14],
[23,26,32,27,35,27,28,22,32,35,0,28,29,20],
[22,27,31,23,26,21,25,22,27,34,23,0,27,19],
[20,25,30,18,26,25,23,20,22,24,22,24,0,15],
[34,33,32,32,31,25,29,29,32,37,31,32,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 35, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,33,23,22,28,21,25,22,34,24,17,31,26],
[19,0,29,24,25,31,25,16,30,33,27,14,20,18],
[18,22,0,22,22,21,21,23,14,23,28,10,19,11],
[28,27,29,0,21,25,23,19,27,26,20,13,17,26],
[29,26,29,30,0,36,36,38,34,29,23,17,30,14],
[23,20,30,26,15,0,24,12,31,25,20,18,22,19],
[30,26,30,28,15,27,0,27,38,29,22,27,30,25],
[26,35,28,32,13,39,24,0,26,33,28,13,22,23],
[29,21,37,24,17,20,13,25,0,23,24,20,23,27],
[17,18,28,25,22,26,22,18,28,0,20,16,20,13],
[27,24,23,31,28,31,29,23,27,31,0,23,16,23],
[34,37,41,38,34,33,24,38,31,35,28,0,21,31],
[20,31,32,34,21,29,21,29,28,31,35,30,0,22],
[25,33,40,25,37,32,26,28,24,38,28,20,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 36, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,20,24,25,27,29,27,34,22,23,28,24,27],
[27,0,31,30,28,23,27,29,25,27,31,20,26,35],
[31,20,0,30,25,24,31,25,31,32,29,22,24,25],
[27,21,21,0,29,26,21,26,24,24,19,16,24,23],
[26,23,26,22,0,25,24,25,28,28,26,19,22,27],
[24,28,27,25,26,0,27,30,28,28,36,26,24,28],
[22,24,20,30,27,24,0,26,29,31,29,21,25,26],
[24,22,26,25,26,21,25,0,26,24,30,14,20,27],
[17,26,20,27,23,23,22,25,0,27,22,22,21,25],
[29,24,19,27,23,23,20,27,24,0,25,19,24,29],
[28,20,22,32,25,15,22,21,29,26,0,18,20,30],
[23,31,29,35,32,25,30,37,29,32,33,0,24,32],
[27,25,27,27,29,27,26,31,30,27,31,27,0,25],
[24,16,26,28,24,23,25,24,26,22,21,19,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 37, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,22,22,23,26,24,25,18,27,26,23,25,21],
[31,0,29,22,23,33,29,22,26,34,30,29,29,22],
[29,22,0,20,27,29,24,24,20,28,21,25,26,18],
[29,29,31,0,24,31,31,26,25,30,34,25,28,30],
[28,28,24,27,0,30,32,22,22,30,29,30,28,28],
[25,18,22,20,21,0,27,17,25,30,26,30,29,17],
[27,22,27,20,19,24,0,23,23,30,27,23,26,20],
[26,29,27,25,29,34,28,0,27,33,33,27,28,21],
[33,25,31,26,29,26,28,24,0,27,29,27,25,28],
[24,17,23,21,21,21,21,18,24,0,21,22,25,14],
[25,21,30,17,22,25,24,18,22,30,0,21,27,23],
[28,22,26,26,21,21,28,24,24,29,30,0,24,21],
[26,22,25,23,23,22,25,23,26,26,24,27,0,24],
[30,29,33,21,23,34,31,30,23,37,28,30,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 38, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,39,38,30,43,27,37,37,40,32,44,44,23],
[17,0,12,7,17,26,11,15,25,18,17,27,26,14],
[12,39,0,22,23,24,14,23,28,28,19,40,26,13],
[13,44,29,0,28,32,23,32,40,38,33,39,41,23],
[21,34,28,23,0,35,15,23,26,23,18,36,22,9],
[8,25,27,19,16,0,21,27,38,35,23,32,30,19],
[24,40,37,28,36,30,0,31,38,38,19,40,34,32],
[14,36,28,19,28,24,20,0,40,35,28,30,31,27],
[14,26,23,11,25,13,13,11,0,24,12,27,18,17],
[11,33,23,13,28,16,13,16,27,0,20,29,25,26],
[19,34,32,18,33,28,32,23,39,31,0,36,32,26],
[7,24,11,12,15,19,11,21,24,22,15,0,30,11],
[7,25,25,10,29,21,17,20,33,26,19,21,0,15],
[28,37,38,28,42,32,19,24,34,25,25,40,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 39, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,25,28,25,26,24,31,29,22,23,27,18,25],
[32,0,29,29,30,25,35,36,29,34,27,31,28,25],
[26,22,0,21,24,22,21,33,23,26,27,27,26,23],
[23,22,30,0,22,23,26,33,28,27,28,30,20,29],
[26,21,27,29,0,28,27,33,31,29,28,32,20,31],
[25,26,29,28,23,0,28,31,25,29,24,29,24,26],
[27,16,30,25,24,23,0,33,25,30,29,28,24,19],
[20,15,18,18,18,20,18,0,23,21,24,21,18,21],
[22,22,28,23,20,26,26,28,0,25,22,28,22,27],
[29,17,25,24,22,22,21,30,26,0,24,24,17,22],
[28,24,24,23,23,27,22,27,29,27,0,26,17,28],
[24,20,24,21,19,22,23,30,23,27,25,0,21,26],
[33,23,25,31,31,27,27,33,29,34,34,30,0,29],
[26,26,28,22,20,25,32,30,24,29,23,25,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 40, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,25,29,27,27,19,22,27,26,28,28,21,32],
[28,0,31,25,28,25,26,23,30,28,29,26,22,29],
[26,20,0,28,29,22,21,24,25,30,26,28,21,29],
[22,26,23,0,25,20,23,25,28,25,24,23,22,26],
[24,23,22,26,0,24,20,22,25,28,25,26,20,30],
[24,26,29,31,27,0,24,29,30,27,30,28,26,31],
[32,25,30,28,31,27,0,28,35,31,30,32,30,31],
[29,28,27,26,29,22,23,0,30,26,28,25,23,28],
[24,21,26,23,26,21,16,21,0,26,24,22,23,27],
[25,23,21,26,23,24,20,25,25,0,24,21,21,27],
[23,22,25,27,26,21,21,23,27,27,0,26,22,27],
[23,25,23,28,25,23,19,26,29,30,25,0,25,26],
[30,29,30,29,31,25,21,28,28,30,29,26,0,32],
[19,22,22,25,21,20,20,23,24,24,24,25,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 41, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,25,25,33,26,23,31,30,26,28,26,25,27],
[21,0,23,24,27,26,20,29,27,23,24,24,29,25],
[26,28,0,25,30,26,22,33,30,23,25,27,25,24],
[26,27,26,0,32,29,26,28,31,23,25,28,24,22],
[18,24,21,19,0,28,24,21,23,19,21,20,22,22],
[25,25,25,22,23,0,25,23,26,19,22,26,15,21],
[28,31,29,25,27,26,0,29,27,26,28,33,25,23],
[20,22,18,23,30,28,22,0,30,17,28,24,24,24],
[21,24,21,20,28,25,24,21,0,15,20,24,23,20],
[25,28,28,28,32,32,25,34,36,0,30,31,32,32],
[23,27,26,26,30,29,23,23,31,21,0,24,28,29],
[25,27,24,23,31,25,18,27,27,20,27,0,24,29],
[26,22,26,27,29,36,26,27,28,19,23,27,0,25],
[24,26,27,29,29,30,28,27,31,19,22,22,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 42, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,26,26,24,25,25,35,31,31,23,30,22],
[26,0,35,28,29,21,31,29,37,29,24,29,26,25],
[26,16,0,27,31,22,26,23,33,28,23,26,33,21],
[25,23,24,0,26,24,29,25,28,29,29,24,27,24],
[25,22,20,25,0,17,26,19,29,28,23,15,25,16],
[27,30,29,27,34,0,28,33,37,32,30,27,34,24],
[26,20,25,22,25,23,0,28,28,24,23,31,24,27],
[26,22,28,26,32,18,23,0,27,27,25,23,29,18],
[16,14,18,23,22,14,23,24,0,24,20,21,21,14],
[20,22,23,22,23,19,27,24,27,0,19,24,26,19],
[20,27,28,22,28,21,28,26,31,32,0,33,29,24],
[28,22,25,27,36,24,20,28,30,27,18,0,26,20],
[21,25,18,24,26,17,27,22,30,25,22,25,0,23],
[29,26,30,27,35,27,24,33,37,32,27,31,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 43, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,27,27,25,19,23,23,26,20,24,27,25,27],
[29,0,22,21,25,17,27,22,21,22,25,29,25,29],
[24,29,0,28,27,22,27,29,29,27,28,30,28,29],
[24,30,23,0,21,24,22,26,30,21,30,27,28,27],
[26,26,24,30,0,23,28,25,28,26,30,30,26,31],
[32,34,29,27,28,0,33,28,25,23,31,30,35,34],
[28,24,24,29,23,18,0,22,24,24,27,27,27,27],
[28,29,22,25,26,23,29,0,27,17,29,31,26,26],
[25,30,22,21,23,26,27,24,0,20,30,30,30,29],
[31,29,24,30,25,28,27,34,31,0,28,34,32,33],
[27,26,23,21,21,20,24,22,21,23,0,23,25,22],
[24,22,21,24,21,21,24,20,21,17,28,0,24,23],
[26,26,23,23,25,16,24,25,21,19,26,27,0,28],
[24,22,22,24,20,17,24,25,22,18,29,28,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 44, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,24,25,22,28,20,21,12,22,28,24,26,19],
[34,0,23,38,33,36,23,25,39,20,31,18,25,35],
[27,28,0,27,24,34,16,15,32,19,31,17,15,28],
[26,13,24,0,20,25,20,24,21,19,27,24,26,11],
[29,18,27,31,0,29,23,23,21,24,32,28,31,21],
[23,15,17,26,22,0,19,21,24,16,30,10,17,24],
[31,28,35,31,28,32,0,38,26,20,32,29,38,25],
[30,26,36,27,28,30,13,0,32,27,28,20,22,15],
[39,12,19,30,30,27,25,19,0,20,31,16,32,24],
[29,31,32,32,27,35,31,24,31,0,33,15,31,25],
[23,20,20,24,19,21,19,23,20,18,0,17,27,21],
[27,33,34,27,23,41,22,31,35,36,34,0,28,24],
[25,26,36,25,20,34,13,29,19,20,24,23,0,17],
[32,16,23,40,30,27,26,36,27,26,30,27,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 45, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,24,22,16,24,24,24,21,26,24,29,24,22],
[30,0,21,26,21,29,25,27,23,31,20,29,30,31],
[27,30,0,28,22,28,30,26,28,26,27,33,30,27],
[29,25,23,0,20,26,23,20,26,26,21,28,27,26],
[35,30,29,31,0,30,28,25,25,30,27,32,27,26],
[27,22,23,25,21,0,29,21,27,22,22,31,26,23],
[27,26,21,28,23,22,0,24,21,27,26,27,33,23],
[27,24,25,31,26,30,27,0,27,26,24,28,27,22],
[30,28,23,25,26,24,30,24,0,31,26,31,29,22],
[25,20,25,25,21,29,24,25,20,0,16,27,25,21],
[27,31,24,30,24,29,25,27,25,35,0,30,26,29],
[22,22,18,23,19,20,24,23,20,24,21,0,24,20],
[27,21,21,24,24,25,18,24,22,26,25,27,0,27],
[29,20,24,25,25,28,28,29,29,30,22,31,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 46, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,29,21,27,28,27,22,29,29,31,28,25,28],
[27,0,29,24,26,27,28,27,27,31,28,26,24,28],
[22,22,0,23,26,27,26,23,27,25,26,23,22,30],
[30,27,28,0,29,26,28,26,31,32,27,25,25,28],
[24,25,25,22,0,28,23,25,30,29,29,27,23,27],
[23,24,24,25,23,0,28,26,29,28,24,24,28,23],
[24,23,25,23,28,23,0,25,23,26,23,21,25,28],
[29,24,28,25,26,25,26,0,26,28,30,22,24,29],
[22,24,24,20,21,22,28,25,0,31,28,23,22,25],
[22,20,26,19,22,23,25,23,20,0,24,21,23,23],
[20,23,25,24,22,27,28,21,23,27,0,22,23,26],
[23,25,28,26,24,27,30,29,28,30,29,0,30,29],
[26,27,29,26,28,23,26,27,29,28,28,21,0,30],
[23,23,21,23,24,28,23,22,26,28,25,22,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 47, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,24,19,26,24,24,27,20,21,29,24,21,22],
[30,0,27,25,31,25,31,33,29,24,32,29,27,27],
[27,24,0,26,28,26,25,28,25,25,30,27,23,24],
[32,26,25,0,30,30,24,28,29,27,26,26,26,30],
[25,20,23,21,0,25,28,26,21,23,28,21,18,21],
[27,26,25,21,26,0,29,28,28,28,25,31,26,28],
[27,20,26,27,23,22,0,23,21,21,21,25,22,24],
[24,18,23,23,25,23,28,0,22,21,22,29,20,25],
[31,22,26,22,30,23,30,29,0,22,27,24,22,24],
[30,27,26,24,28,23,30,30,29,0,26,25,23,28],
[22,19,21,25,23,26,30,29,24,25,0,25,23,24],
[27,22,24,25,30,20,26,22,27,26,26,0,19,28],
[30,24,28,25,33,25,29,31,29,28,28,32,0,31],
[29,24,27,21,30,23,27,26,27,23,27,23,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 48, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,22,25,31,27,29,22,32,23,21,22,22,26],
[24,0,23,25,21,23,21,27,30,21,23,25,19,32],
[29,28,0,27,23,27,27,32,27,23,26,22,21,28],
[26,26,24,0,21,22,29,26,27,24,26,22,26,25],
[20,30,28,30,0,24,28,28,30,18,23,22,20,22],
[24,28,24,29,27,0,28,31,30,26,29,21,25,29],
[22,30,24,22,23,23,0,24,26,22,21,20,22,26],
[29,24,19,25,23,20,27,0,26,21,21,21,21,26],
[19,21,24,24,21,21,25,25,0,19,23,25,21,28],
[28,30,28,27,33,25,29,30,32,0,27,21,22,27],
[30,28,25,25,28,22,30,30,28,24,0,25,27,27],
[29,26,29,29,29,30,31,30,26,30,26,0,24,30],
[29,32,30,25,31,26,29,30,30,29,24,27,0,30],
[25,19,23,26,29,22,25,25,23,24,24,21,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 49, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,24,27,28,29,30,28,26,21,29,27,33,33],
[22,0,22,29,29,26,25,24,24,15,20,22,21,24],
[27,29,0,26,28,31,28,32,18,17,23,26,29,25],
[24,22,25,0,30,25,25,25,19,19,22,22,25,28],
[23,22,23,21,0,22,22,24,18,14,19,18,23,23],
[22,25,20,26,29,0,26,23,17,19,22,21,23,23],
[21,26,23,26,29,25,0,25,19,17,21,22,23,24],
[23,27,19,26,27,28,26,0,21,15,23,24,27,26],
[25,27,33,32,33,34,32,30,0,31,34,31,30,37],
[30,36,34,32,37,32,34,36,20,0,37,29,34,29],
[22,31,28,29,32,29,30,28,17,14,0,25,24,21],
[24,29,25,29,33,30,29,27,20,22,26,0,27,28],
[18,30,22,26,28,28,28,24,21,17,27,24,0,23],
[18,27,26,23,28,28,27,25,14,22,30,23,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 50, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,27,29,20,21,24,31,31,26,24,34,34,30],
[23,0,24,18,20,21,24,29,30,21,24,29,32,25],
[24,27,0,32,27,26,32,38,40,32,30,30,35,34],
[22,33,19,0,30,21,20,33,32,25,24,36,38,31],
[31,31,24,21,0,21,24,29,32,27,32,31,36,30],
[30,30,25,30,30,0,31,33,31,29,24,40,37,26],
[27,27,19,31,27,20,0,33,31,25,21,34,33,28],
[20,22,13,18,22,18,18,0,33,27,21,30,33,24],
[20,21,11,19,19,20,20,18,0,28,24,26,24,19],
[25,30,19,26,24,22,26,24,23,0,16,29,29,22],
[27,27,21,27,19,27,30,30,27,35,0,35,27,20],
[17,22,21,15,20,11,17,21,25,22,16,0,33,21],
[17,19,16,13,15,14,18,18,27,22,24,18,0,16],
[21,26,17,20,21,25,23,27,32,29,31,30,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 51, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,36,23,27,29,31,31,21,32,22,24,29,23],
[20,0,30,23,28,24,28,29,24,31,31,22,28,21],
[15,21,0,13,24,18,28,25,22,30,23,16,23,17],
[28,28,38,0,22,26,29,31,22,29,28,22,22,26],
[24,23,27,29,0,25,33,27,24,27,27,26,25,26],
[22,27,33,25,26,0,31,34,28,23,21,30,31,25],
[20,23,23,22,18,20,0,26,21,20,18,20,25,14],
[20,22,26,20,24,17,25,0,20,27,21,17,24,21],
[30,27,29,29,27,23,30,31,0,31,22,28,24,24],
[19,20,21,22,24,28,31,24,20,0,23,22,31,21],
[29,20,28,23,24,30,33,30,29,28,0,28,30,23],
[27,29,35,29,25,21,31,34,23,29,23,0,25,21],
[22,23,28,29,26,20,26,27,27,20,21,26,0,28],
[28,30,34,25,25,26,37,30,27,30,28,30,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 52, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,27,25,29,30,23,24,27,33,27,20,28,33],
[20,0,22,20,24,26,14,18,19,27,25,16,18,31],
[24,29,0,28,26,33,21,28,33,31,31,25,26,33],
[26,31,23,0,32,24,26,26,35,32,28,27,21,29],
[22,27,25,19,0,24,20,21,21,30,24,15,23,26],
[21,25,18,27,27,0,16,23,26,28,23,17,22,26],
[28,37,30,25,31,35,0,25,33,35,32,21,23,38],
[27,33,23,25,30,28,26,0,33,29,22,15,22,29],
[24,32,18,16,30,25,18,18,0,26,25,12,21,29],
[18,24,20,19,21,23,16,22,25,0,23,19,20,25],
[24,26,20,23,27,28,19,29,26,28,0,17,21,28],
[31,35,26,24,36,34,30,36,39,32,34,0,26,33],
[23,33,25,30,28,29,28,29,30,31,30,25,0,35],
[18,20,18,22,25,25,13,22,22,26,23,18,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 53, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,25,19,27,33,21,21,23,24,28,29,14,23],
[21,0,21,23,25,28,23,23,23,27,25,23,19,23],
[26,30,0,21,30,28,27,27,26,31,29,26,21,33],
[32,28,30,0,31,29,32,29,30,34,35,24,29,31],
[24,26,21,20,0,31,24,24,24,30,29,23,21,28],
[18,23,23,22,20,0,22,20,21,21,29,22,16,27],
[30,28,24,19,27,29,0,28,26,28,30,26,21,29],
[30,28,24,22,27,31,23,0,25,25,29,24,23,26],
[28,28,25,21,27,30,25,26,0,31,27,22,15,27],
[27,24,20,17,21,30,23,26,20,0,28,19,20,23],
[23,26,22,16,22,22,21,22,24,23,0,24,16,23],
[22,28,25,27,28,29,25,27,29,32,27,0,23,30],
[37,32,30,22,30,35,30,28,36,31,35,28,0,32],
[28,28,18,20,23,24,22,25,24,28,28,21,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 54, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,12,25,25,16,20,38,16,28,24,40,20,28,38],
[39,0,33,30,21,30,38,33,39,29,45,30,32,38],
[26,18,0,20,11,9,39,19,25,19,20,16,23,22],
[26,21,31,0,16,21,51,37,20,30,36,6,34,40],
[35,30,40,35,0,22,44,35,35,26,24,27,34,40],
[31,21,42,30,29,0,46,31,26,26,25,28,18,36],
[13,13,12,0,7,5,0,5,12,1,20,5,23,25],
[35,18,32,14,16,20,46,0,29,13,24,10,23,34],
[23,12,26,31,16,25,39,22,0,27,40,25,39,44],
[27,22,32,21,25,25,50,38,24,0,35,21,22,40],
[11,6,31,15,27,26,31,27,11,16,0,20,18,36],
[31,21,35,45,24,23,46,41,26,30,31,0,29,40],
[23,19,28,17,17,33,28,28,12,29,33,22,0,33],
[13,13,29,11,11,15,26,17,7,11,15,11,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 55, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,25,32,25,27,26,26,24,33,27,17,20,25],
[34,0,33,34,35,31,31,32,26,37,32,27,24,36],
[26,18,0,26,26,25,23,24,24,30,28,24,27,29],
[19,17,25,0,23,26,20,26,18,26,14,17,19,20],
[26,16,25,28,0,29,24,24,18,29,23,20,19,25],
[24,20,26,25,22,0,17,24,25,24,22,18,17,25],
[25,20,28,31,27,34,0,31,27,29,30,21,21,24],
[25,19,27,25,27,27,20,0,11,29,24,22,14,27],
[27,25,27,33,33,26,24,40,0,26,26,27,17,31],
[18,14,21,25,22,27,22,22,25,0,23,18,19,26],
[24,19,23,37,28,29,21,27,25,28,0,23,17,22],
[34,24,27,34,31,33,30,29,24,33,28,0,29,34],
[31,27,24,32,32,34,30,37,34,32,34,22,0,27],
[26,15,22,31,26,26,27,24,20,25,29,17,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 56, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,32,26,26,27,27,25,25,27,24,29,27,28],
[25,0,27,26,27,23,31,26,25,24,32,34,27,28],
[19,24,0,22,19,22,25,20,27,23,24,30,23,26],
[25,25,29,0,25,24,27,22,22,18,25,26,24,23],
[25,24,32,26,0,24,24,23,23,24,23,28,29,26],
[24,28,29,27,27,0,28,23,26,26,22,27,30,32],
[24,20,26,24,27,23,0,21,19,24,21,25,29,23],
[26,25,31,29,28,28,30,0,27,29,26,31,29,30],
[26,26,24,29,28,25,32,24,0,26,23,27,24,30],
[24,27,28,33,27,25,27,22,25,0,23,27,22,32],
[27,19,27,26,28,29,30,25,28,28,0,29,23,28],
[22,17,21,25,23,24,26,20,24,24,22,0,25,27],
[24,24,28,27,22,21,22,22,27,29,28,26,0,29],
[23,23,25,28,25,19,28,21,21,19,23,24,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 57, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,30,26,26,17,24,24,30,19,31,24,14,29],
[21,0,28,13,17,17,25,20,29,29,24,25,18,28],
[21,23,0,26,23,14,13,26,21,20,26,19,17,27],
[25,38,25,0,28,20,17,23,31,23,32,23,28,24],
[25,34,28,23,0,11,27,36,25,26,27,27,21,25],
[34,34,37,31,40,0,24,38,34,25,33,34,23,33],
[27,26,38,34,24,27,0,36,26,17,27,30,32,36],
[27,31,25,28,15,13,15,0,27,25,32,21,25,22],
[21,22,30,20,26,17,25,24,0,23,14,25,14,25],
[32,22,31,28,25,26,34,26,28,0,25,26,24,32],
[20,27,25,19,24,18,24,19,37,26,0,25,14,21],
[27,26,32,28,24,17,21,30,26,25,26,0,20,37],
[37,33,34,23,30,28,19,26,37,27,37,31,0,32],
[22,23,24,27,26,18,15,29,26,19,30,14,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 58, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,34,25,30,27,25,29,29,29,32,29,35,34],
[23,0,35,24,31,20,29,26,27,28,30,19,24,34],
[17,16,0,17,18,13,15,22,26,20,21,19,17,23],
[26,27,34,0,25,22,26,25,23,28,32,23,32,34],
[21,20,33,26,0,21,21,26,23,25,30,21,21,34],
[24,31,38,29,30,0,24,27,33,29,33,29,33,31],
[26,22,36,25,30,27,0,28,23,24,32,24,29,32],
[22,25,29,26,25,24,23,0,26,26,35,28,29,31],
[22,24,25,28,28,18,28,25,0,26,29,27,29,29],
[22,23,31,23,26,22,27,25,25,0,29,25,30,29],
[19,21,30,19,21,18,19,16,22,22,0,21,25,29],
[22,32,32,28,30,22,27,23,24,26,30,0,30,35],
[16,27,34,19,30,18,22,22,22,21,26,21,0,29],
[17,17,28,17,17,20,19,20,22,22,22,16,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 59, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,27,21,22,25,24,24,28,20,26,35,14,23],
[25,0,27,21,20,26,28,26,28,21,27,30,23,29],
[24,24,0,25,19,22,26,21,20,21,25,24,16,26],
[30,30,26,0,17,24,31,26,27,26,27,27,27,27],
[29,31,32,34,0,34,29,23,37,33,33,43,31,30],
[26,25,29,27,17,0,25,24,21,17,25,29,24,24],
[27,23,25,20,22,26,0,19,20,23,27,29,22,22],
[27,25,30,25,28,27,32,0,28,27,30,29,24,30],
[23,23,31,24,14,30,31,23,0,24,27,31,23,24],
[31,30,30,25,18,34,28,24,27,0,27,30,27,27],
[25,24,26,24,18,26,24,21,24,24,0,30,21,25],
[16,21,27,24,8,22,22,22,20,21,21,0,13,20],
[37,28,35,24,20,27,29,27,28,24,30,38,0,33],
[28,22,25,24,21,27,29,21,27,24,26,31,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 60, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,23,18,24,27,23,28,26,21,25,24,26,22],
[26,0,22,19,32,29,27,28,31,28,31,28,26,22],
[28,29,0,21,28,35,28,23,24,24,31,29,31,26],
[33,32,30,0,33,30,33,28,26,29,30,29,32,23],
[27,19,23,18,0,25,23,21,21,21,30,22,22,21],
[24,22,16,21,26,0,23,24,22,20,27,22,23,19],
[28,24,23,18,28,28,0,19,21,21,24,24,22,21],
[23,23,28,23,30,27,32,0,24,25,25,26,28,22],
[25,20,27,25,30,29,30,27,0,26,27,23,31,23],
[30,23,27,22,30,31,30,26,25,0,27,28,26,23],
[26,20,20,21,21,24,27,26,24,24,0,23,23,24],
[27,23,22,22,29,29,27,25,28,23,28,0,28,19],
[25,25,20,19,29,28,29,23,20,25,28,23,0,17],
[29,29,25,28,30,32,30,29,28,28,27,32,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 61, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,30,28,29,29,26,31,29,28,26,21,24,24],
[26,0,28,20,28,27,31,28,29,31,24,28,26,26],
[21,23,0,17,23,25,23,24,21,24,22,17,21,25],
[23,31,34,0,34,32,28,31,27,29,28,23,28,28],
[22,23,28,17,0,25,28,26,26,26,24,22,28,26],
[22,24,26,19,26,0,28,31,28,26,21,20,25,25],
[25,20,28,23,23,23,0,26,25,24,22,17,23,21],
[20,23,27,20,25,20,25,0,30,27,21,18,20,24],
[22,22,30,24,25,23,26,21,0,27,22,21,22,25],
[23,20,27,22,25,25,27,24,24,0,22,21,25,23],
[25,27,29,23,27,30,29,30,29,29,0,26,28,31],
[30,23,34,28,29,31,34,33,30,30,25,0,28,28],
[27,25,30,23,23,26,28,31,29,26,23,23,0,29],
[27,25,26,23,25,26,30,27,26,28,20,23,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 62, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,27,11,21,21,29,21,13,26,17,11,23,12],
[31,0,32,23,24,27,23,28,36,33,41,23,23,19],
[24,19,0,24,29,29,36,30,24,33,33,20,29,28],
[40,28,27,0,41,32,50,30,33,33,26,24,25,22],
[30,27,22,10,0,31,16,29,17,29,25,23,25,20],
[30,24,22,19,20,0,19,24,18,29,28,27,26,21],
[22,28,15,1,35,32,0,21,17,29,25,23,25,21],
[30,23,21,21,22,27,30,0,36,31,22,22,28,30],
[38,15,27,18,34,33,34,15,0,40,19,21,22,12],
[25,18,18,18,22,22,22,20,11,0,23,26,23,12],
[34,10,18,25,26,23,26,29,32,28,0,8,15,22],
[40,28,31,27,28,24,28,29,30,25,43,0,28,30],
[28,28,22,26,26,25,26,23,29,28,36,23,0,19],
[39,32,23,29,31,30,30,21,39,39,29,21,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 63, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,25,23,30,23,29,23,33,31,26,28,29,28],
[25,0,26,27,25,30,26,24,31,34,31,24,32,27],
[26,25,0,20,27,28,21,22,25,32,28,28,28,32],
[28,24,31,0,29,31,24,27,27,30,32,34,33,32],
[21,26,24,22,0,29,21,26,24,31,28,27,32,27],
[28,21,23,20,22,0,23,21,30,34,29,19,28,24],
[22,25,30,27,30,28,0,27,31,30,24,33,36,28],
[28,27,29,24,25,30,24,0,25,32,31,29,32,29],
[18,20,26,24,27,21,20,26,0,29,22,26,31,28],
[20,17,19,21,20,17,21,19,22,0,21,21,27,23],
[25,20,23,19,23,22,27,20,29,30,0,25,32,24],
[23,27,23,17,24,32,18,22,25,30,26,0,24,22],
[22,19,23,18,19,23,15,19,20,24,19,27,0,23],
[23,24,19,19,24,27,23,22,23,28,27,29,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 64, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,19,20,17,21,26,24,16,17,22,22,22,17],
[29,0,22,22,23,21,27,28,20,20,25,22,22,22],
[32,29,0,27,29,29,31,34,20,25,30,30,29,28],
[31,29,24,0,25,27,29,31,18,20,28,25,25,22],
[34,28,22,26,0,28,30,36,25,21,33,27,23,27],
[30,30,22,24,23,0,37,32,24,15,24,23,26,19],
[25,24,20,22,21,14,0,28,23,17,24,24,22,23],
[27,23,17,20,15,19,23,0,18,13,21,21,15,13],
[35,31,31,33,26,27,28,33,0,24,31,27,22,30],
[34,31,26,31,30,36,34,38,27,0,30,30,29,25],
[29,26,21,23,18,27,27,30,20,21,0,24,24,22],
[29,29,21,26,24,28,27,30,24,21,27,0,24,23],
[29,29,22,26,28,25,29,36,29,22,27,27,0,27],
[34,29,23,29,24,32,28,38,21,26,29,28,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 65, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,25,28,29,27,25,29,22,27,25,27,21,34],
[19,0,22,27,24,22,19,26,20,25,21,20,23,26],
[26,29,0,30,24,27,26,23,27,31,25,31,23,34],
[23,24,21,0,23,21,21,21,22,30,20,26,23,31],
[22,27,27,28,0,26,25,25,24,29,25,23,21,28],
[24,29,24,30,25,0,19,28,21,28,26,31,23,35],
[26,32,25,30,26,32,0,26,26,29,22,33,27,35],
[22,25,28,30,26,23,25,0,22,29,20,32,29,39],
[29,31,24,29,27,30,25,29,0,34,26,31,28,36],
[24,26,20,21,22,23,22,22,17,0,17,28,24,33],
[26,30,26,31,26,25,29,31,25,34,0,37,25,36],
[24,31,20,25,28,20,18,19,20,23,14,0,19,34],
[30,28,28,28,30,28,24,22,23,27,26,32,0,35],
[17,25,17,20,23,16,16,12,15,18,15,17,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 66, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,21,12,22,30,26,26,24,28,23,22,19,22],
[26,0,25,21,29,26,25,30,27,28,22,28,24,27],
[30,26,0,23,24,31,27,31,26,29,27,27,25,25],
[39,30,28,0,28,29,32,34,27,34,25,29,27,27],
[29,22,27,23,0,24,29,30,25,31,24,22,22,23],
[21,25,20,22,27,0,23,28,23,26,22,25,20,25],
[25,26,24,19,22,28,0,28,23,25,22,24,21,27],
[25,21,20,17,21,23,23,0,21,30,22,23,18,24],
[27,24,25,24,26,28,28,30,0,26,24,25,27,28],
[23,23,22,17,20,25,26,21,25,0,21,23,16,25],
[28,29,24,26,27,29,29,29,27,30,0,25,25,29],
[29,23,24,22,29,26,27,28,26,28,26,0,21,26],
[32,27,26,24,29,31,30,33,24,35,26,30,0,32],
[29,24,26,24,28,26,24,27,23,26,22,25,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 67, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,24,27,29,33,25,29,26,22,24,32,27,25],
[23,0,24,27,30,26,23,24,29,28,29,29,28,24],
[27,27,0,28,31,31,28,26,29,28,25,34,35,24],
[24,24,23,0,26,25,22,24,25,19,22,29,28,26],
[22,21,20,25,0,29,20,24,29,21,22,26,29,24],
[18,25,20,26,22,0,21,25,25,24,21,27,27,21],
[26,28,23,29,31,30,0,28,30,28,26,32,33,27],
[22,27,25,27,27,26,23,0,30,25,29,35,29,29],
[25,22,22,26,22,26,21,21,0,24,28,28,27,21],
[29,23,23,32,30,27,23,26,27,0,28,29,28,27],
[27,22,26,29,29,30,25,22,23,23,0,34,32,24],
[19,22,17,22,25,24,19,16,23,22,17,0,24,18],
[24,23,16,23,22,24,18,22,24,23,19,27,0,22],
[26,27,27,25,27,30,24,22,30,24,27,33,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 68, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,24,28,22,20,32,24,20,21,22,20,22,18],
[30,0,30,29,28,29,36,24,24,30,32,24,30,25],
[27,21,0,18,21,27,33,25,25,26,24,26,22,16],
[23,22,33,0,26,31,33,28,24,19,21,23,27,22],
[29,23,30,25,0,27,33,23,29,17,19,22,21,14],
[31,22,24,20,24,0,28,22,27,24,19,18,20,17],
[19,15,18,18,18,23,0,19,13,17,12,18,22,13],
[27,27,26,23,28,29,32,0,29,24,24,22,24,23],
[31,27,26,27,22,24,38,22,0,19,20,21,26,14],
[30,21,25,32,34,27,34,27,32,0,27,34,28,25],
[29,19,27,30,32,32,39,27,31,24,0,25,27,34],
[31,27,25,28,29,33,33,29,30,17,26,0,27,24],
[29,21,29,24,30,31,29,27,25,23,24,24,0,25],
[33,26,35,29,37,34,38,28,37,26,17,27,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 69, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,18,23,24,17,27,25,13,26,20,27,22,24],
[34,0,22,34,33,31,29,26,25,27,27,33,25,26],
[33,29,0,29,32,26,30,29,20,25,27,32,23,28],
[28,17,22,0,25,25,29,23,24,25,24,28,21,31],
[27,18,19,26,0,15,21,24,18,18,19,27,27,29],
[34,20,25,26,36,0,29,27,18,22,23,34,27,30],
[24,22,21,22,30,22,0,26,11,26,24,35,17,26],
[26,25,22,28,27,24,25,0,25,22,20,27,20,27],
[38,26,31,27,33,33,40,26,0,26,26,39,24,27],
[25,24,26,26,33,29,25,29,25,0,21,30,24,33],
[31,24,24,27,32,28,27,31,25,30,0,28,24,33],
[24,18,19,23,24,17,16,24,12,21,23,0,19,24],
[29,26,28,30,24,24,34,31,27,27,27,32,0,31],
[27,25,23,20,22,21,25,24,24,18,18,27,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 70, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,29,35,33,26,22,25,33,32,28,27,34,34],
[19,0,26,30,26,23,27,29,29,26,30,27,33,31],
[22,25,0,28,33,29,16,18,29,29,28,25,28,34],
[16,21,23,0,23,20,15,16,27,27,25,21,29,29],
[18,25,18,28,0,24,24,24,24,28,25,21,30,32],
[25,28,22,31,27,0,18,23,31,24,25,22,31,30],
[29,24,35,36,27,33,0,23,33,30,30,26,31,34],
[26,22,33,35,27,28,28,0,30,27,32,26,34,34],
[18,22,22,24,27,20,18,21,0,28,25,26,31,28],
[19,25,22,24,23,27,21,24,23,0,32,22,36,33],
[23,21,23,26,26,26,21,19,26,19,0,22,23,24],
[24,24,26,30,30,29,25,25,25,29,29,0,32,35],
[17,18,23,22,21,20,20,17,20,15,28,19,0,23],
[17,20,17,22,19,21,17,17,23,18,27,16,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 71, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,23,22,28,27,26,21,17,33,25,28,30],
[27,0,23,28,24,24,30,27,25,22,32,26,28,28],
[27,28,0,31,22,25,32,28,24,28,33,26,27,33],
[28,23,20,0,22,26,26,27,19,22,30,27,24,25],
[29,27,29,29,0,23,26,25,25,21,34,24,29,31],
[23,27,26,25,28,0,23,27,26,26,30,23,24,31],
[24,21,19,25,25,28,0,27,20,21,28,23,23,30],
[25,24,23,24,26,24,24,0,21,21,27,28,24,30],
[30,26,27,32,26,25,31,30,0,24,35,32,31,34],
[34,29,23,29,30,25,30,30,27,0,34,28,33,32],
[18,19,18,21,17,21,23,24,16,17,0,23,25,25],
[26,25,25,24,27,28,28,23,19,23,28,0,31,25],
[23,23,24,27,22,27,28,27,20,18,26,20,0,23],
[21,23,18,26,20,20,21,21,17,19,26,26,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 72, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,26,30,30,25,29,21,28,40,26,26,25],
[27,0,24,32,30,32,27,29,27,32,40,24,25,29],
[27,27,0,30,25,27,26,23,22,27,41,28,21,27],
[25,19,21,0,18,25,18,18,18,26,30,24,20,24],
[21,21,26,33,0,35,24,29,25,27,39,25,27,24],
[21,19,24,26,16,0,24,25,21,20,38,19,19,19],
[26,24,25,33,27,27,0,24,21,27,36,23,22,28],
[22,22,28,33,22,26,27,0,15,22,29,25,25,21],
[30,24,29,33,26,30,30,36,0,29,36,27,29,29],
[23,19,24,25,24,31,24,29,22,0,27,21,25,22],
[11,11,10,21,12,13,15,22,15,24,0,14,15,13],
[25,27,23,27,26,32,28,26,24,30,37,0,20,20],
[25,26,30,31,24,32,29,26,22,26,36,31,0,25],
[26,22,24,27,27,32,23,30,22,29,38,31,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 73, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,25,27,27,28,28,28,33,29,26,28,29,32],
[23,0,29,27,26,30,27,32,32,31,21,26,30,34],
[26,22,0,25,26,25,22,25,24,26,20,25,22,27],
[24,24,26,0,26,23,23,26,26,26,22,24,26,22],
[24,25,25,25,0,22,20,28,24,23,19,23,29,25],
[23,21,26,28,29,0,25,24,24,29,25,23,29,27],
[23,24,29,28,31,26,0,31,32,31,26,24,29,31],
[23,19,26,25,23,27,20,0,29,27,23,22,25,24],
[18,19,27,25,27,27,19,22,0,24,22,22,22,25],
[22,20,25,25,28,22,20,24,27,0,23,21,18,26],
[25,30,31,29,32,26,25,28,29,28,0,25,28,30],
[23,25,26,27,28,28,27,29,29,30,26,0,33,28],
[22,21,29,25,22,22,22,26,29,33,23,18,0,29],
[19,17,24,29,26,24,20,27,26,25,21,23,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 74, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,38,25,31,30,25,23,32,27,35,18,31,32],
[24,0,33,19,27,25,28,22,32,24,26,19,22,22],
[13,18,0,15,21,25,17,21,21,22,25,15,21,26],
[26,32,36,0,37,30,29,28,32,29,29,21,24,31],
[20,24,30,14,0,29,23,27,23,25,25,15,31,29],
[21,26,26,21,22,0,22,20,28,25,26,22,23,27],
[26,23,34,22,28,29,0,22,32,24,26,25,25,32],
[28,29,30,23,24,31,29,0,33,27,35,27,26,29],
[19,19,30,19,28,23,19,18,0,26,24,17,19,27],
[24,27,29,22,26,26,27,24,25,0,29,20,28,30],
[16,25,26,22,26,25,25,16,27,22,0,13,20,27],
[33,32,36,30,36,29,26,24,34,31,38,0,33,35],
[20,29,30,27,20,28,26,25,32,23,31,18,0,32],
[19,29,25,20,22,24,19,22,24,21,24,16,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 75, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,29,22,26,31,31,26,31,25,20,28,23,26],
[28,0,26,14,23,26,30,22,27,26,16,26,21,19],
[22,25,0,19,23,24,31,16,33,18,20,26,19,18],
[29,37,32,0,25,32,32,27,30,24,27,28,28,30],
[25,28,28,26,0,25,34,24,34,21,18,30,21,20],
[20,25,27,19,26,0,30,21,29,18,25,20,20,22],
[20,21,20,19,17,21,0,18,24,22,21,23,21,15],
[25,29,35,24,27,30,33,0,35,24,23,35,31,26],
[20,24,18,21,17,22,27,16,0,13,22,18,16,18],
[26,25,33,27,30,33,29,27,38,0,20,31,29,23],
[31,35,31,24,33,26,30,28,29,31,0,32,34,24],
[23,25,25,23,21,31,28,16,33,20,19,0,23,24],
[28,30,32,23,30,31,30,20,35,22,17,28,0,25],
[25,32,33,21,31,29,36,25,33,28,27,27,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 76, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,22,33,26,25,28,21,33,33,29,27,27,31],
[22,0,16,27,19,21,27,20,21,30,25,27,24,27],
[29,35,0,38,30,30,33,27,29,42,44,34,25,27],
[18,24,13,0,19,23,21,16,28,35,28,18,28,20],
[25,32,21,32,0,21,25,20,29,36,30,22,24,26],
[26,30,21,28,30,0,29,25,32,25,32,29,28,25],
[23,24,18,30,26,22,0,21,26,30,30,23,25,32],
[30,31,24,35,31,26,30,0,41,29,29,23,33,33],
[18,30,22,23,22,19,25,10,0,26,23,17,30,26],
[18,21,9,16,15,26,21,22,25,0,30,22,19,7],
[22,26,7,23,21,19,21,22,28,21,0,22,13,19],
[24,24,17,33,29,22,28,28,34,29,29,0,27,24],
[24,27,26,23,27,23,26,18,21,32,38,24,0,20],
[20,24,24,31,25,26,19,18,25,44,32,27,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 77, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,13,22,36,41,14,14,0,36,36,19,13,5],
[24,0,5,23,15,14,5,14,5,15,27,6,5,5],
[38,46,0,31,33,37,23,15,14,24,45,6,9,14],
[29,28,20,0,20,19,19,15,6,20,32,6,5,5],
[15,36,18,31,0,28,14,14,5,6,41,19,14,14],
[10,37,14,32,23,0,9,10,1,1,32,19,23,9],
[37,46,28,32,37,42,0,28,28,23,37,19,32,27],
[37,37,36,36,37,41,23,0,14,37,36,42,36,27],
[51,46,37,45,46,50,23,37,0,46,45,42,36,27],
[15,36,27,31,45,50,28,14,5,0,50,19,27,14],
[15,24,6,19,10,19,14,15,6,1,0,6,15,14],
[32,45,45,45,32,32,32,9,9,32,45,0,18,18],
[38,46,42,46,37,28,19,15,15,24,36,33,0,5],
[46,46,37,46,37,42,24,24,24,37,37,33,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 78, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,21,24,16,16,27,20,27,20,36,26,25,30],
[32,0,35,30,32,21,37,15,35,29,38,21,31,42],
[30,16,0,25,29,9,32,19,29,26,36,9,24,40],
[27,21,26,0,19,20,40,21,20,20,36,23,22,39],
[35,19,22,32,0,12,39,16,39,27,36,17,24,42],
[35,30,42,31,39,0,42,32,48,27,41,22,35,44],
[24,14,19,11,12,9,0,10,21,20,38,13,17,35],
[31,36,32,30,35,19,41,0,38,26,39,25,28,47],
[24,16,22,31,12,3,30,13,0,18,36,22,22,34],
[31,22,25,31,24,24,31,25,33,0,34,15,26,41],
[15,13,15,15,15,10,13,12,15,17,0,7,15,24],
[25,30,42,28,34,29,38,26,29,36,44,0,37,51],
[26,20,27,29,27,16,34,23,29,25,36,14,0,31],
[21,9,11,12,9,7,16,4,17,10,27,0,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 79, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,13,19,18,23,20,15,27,27,42,28,28,27],
[32,0,13,18,23,32,20,15,28,35,42,27,29,50],
[38,38,0,37,16,29,24,36,32,26,41,39,29,50],
[32,33,14,0,28,35,33,15,41,37,41,33,43,42],
[33,28,35,23,0,42,42,28,42,20,45,41,23,42],
[28,19,22,16,9,0,20,15,18,18,43,27,19,40],
[31,31,27,18,9,31,0,20,9,18,42,40,31,40],
[36,36,15,36,23,36,31,0,30,26,41,31,28,39],
[24,23,19,10,9,33,42,21,0,12,42,35,23,36],
[24,16,25,14,31,33,33,25,39,0,39,32,14,31],
[9,9,10,10,6,8,9,10,9,12,0,18,10,18],
[23,24,12,18,10,24,11,20,16,19,33,0,25,47],
[23,22,22,8,28,32,20,23,28,37,41,26,0,41],
[24,1,1,9,9,11,11,12,15,20,33,4,10,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 80, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,19,30,25,25,21,23,24,24,23,22,24,20],
[26,0,23,28,19,22,11,28,20,13,17,20,22,20],
[32,28,0,25,19,15,18,27,16,17,24,30,20,22],
[21,23,26,0,19,27,15,22,12,17,19,22,27,16],
[26,32,32,32,0,20,20,27,25,28,16,28,24,18],
[26,29,36,24,31,0,32,29,22,30,22,32,27,18],
[30,40,33,36,31,19,0,31,26,27,19,34,27,27],
[28,23,24,29,24,22,20,0,15,22,22,24,21,25],
[27,31,35,39,26,29,25,36,0,31,24,32,28,22],
[27,38,34,34,23,21,24,29,20,0,23,32,26,26],
[28,34,27,32,35,29,32,29,27,28,0,32,22,30],
[29,31,21,29,23,19,17,27,19,19,19,0,20,28],
[27,29,31,24,27,24,24,30,23,25,29,31,0,24],
[31,31,29,35,33,33,24,26,29,25,21,23,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 81, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,51,33,33,51,33,33,33,33,33,33,13,51],
[18,0,18,20,13,18,38,0,20,0,18,0,0,18],
[0,33,0,20,13,0,20,0,20,0,0,0,0,0],
[18,31,31,0,31,31,38,13,20,13,31,0,31,18],
[18,38,38,20,0,18,38,0,20,20,18,0,0,18],
[0,33,51,20,33,0,20,33,20,33,33,0,13,0],
[18,13,31,13,13,31,0,13,33,13,13,13,13,31],
[18,51,51,38,51,18,38,0,20,38,38,18,18,18],
[18,31,31,31,31,31,18,31,0,31,31,18,31,31],
[18,51,51,38,31,18,38,13,20,0,31,18,31,18],
[18,33,51,20,33,18,38,13,20,20,0,0,0,18],
[18,51,51,51,51,51,38,33,33,33,51,0,31,51],
[38,51,51,20,51,38,38,33,20,20,51,20,0,38],
[0,33,51,33,33,51,20,33,20,33,33,0,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 82, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,27,26,23,33,28,32,33,22,33,27,29,32],
[30,0,29,26,29,27,32,34,31,25,28,29,29,26],
[24,22,0,15,23,30,32,28,28,26,30,26,30,30],
[25,25,36,0,29,29,31,31,33,28,36,31,30,32],
[28,22,28,22,0,32,27,28,28,25,35,29,25,23],
[18,24,21,22,19,0,29,27,19,28,22,22,23,28],
[23,19,19,20,24,22,0,24,24,24,27,24,25,27],
[19,17,23,20,23,24,27,0,19,20,30,22,24,25],
[18,20,23,18,23,32,27,32,0,30,23,24,22,21],
[29,26,25,23,26,23,27,31,21,0,25,22,25,24],
[18,23,21,15,16,29,24,21,28,26,0,23,17,30],
[24,22,25,20,22,29,27,29,27,29,28,0,23,26],
[22,22,21,21,26,28,26,27,29,26,34,28,0,31],
[19,25,21,19,28,23,24,26,30,27,21,25,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 83, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,25,35,19,20,18,24,27,29,29,21,32,27],
[25,0,16,26,26,23,19,17,25,21,25,16,28,26],
[26,35,0,34,29,22,21,26,29,27,31,21,32,28],
[16,25,17,0,18,21,15,18,25,22,23,17,24,27],
[32,25,22,33,0,24,19,22,28,32,25,21,36,27],
[31,28,29,30,27,0,26,24,28,30,26,26,35,26],
[33,32,30,36,32,25,0,34,37,33,31,25,35,34],
[27,34,25,33,29,27,17,0,31,31,31,21,37,28],
[24,26,22,26,23,23,14,20,0,23,27,20,28,23],
[22,30,24,29,19,21,18,20,28,0,28,20,34,21],
[22,26,20,28,26,25,20,20,24,23,0,19,27,21],
[30,35,30,34,30,25,26,30,31,31,32,0,38,34],
[19,23,19,27,15,16,16,14,23,17,24,13,0,22],
[24,25,23,24,24,25,17,23,28,30,30,17,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 84, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,21,19,25,32,33,34,17,14,14,21,14,20],
[36,0,43,43,29,35,20,40,25,50,26,21,48,28],
[30,8,0,21,18,17,19,47,16,16,15,23,18,18],
[32,8,30,0,31,31,28,36,28,20,7,28,26,19],
[26,22,33,20,0,44,23,42,11,27,15,19,26,13],
[19,16,34,20,7,0,28,47,16,16,16,24,26,18],
[18,31,32,23,28,23,0,51,13,30,19,23,29,17],
[17,11,4,15,9,4,0,0,5,11,10,6,20,16],
[34,26,35,23,40,35,38,46,0,42,29,38,40,34],
[37,1,35,31,24,35,21,40,9,0,8,21,19,12],
[37,25,36,44,36,35,32,41,22,43,0,34,37,24],
[30,30,28,23,32,27,28,45,13,30,17,0,29,24],
[37,3,33,25,25,25,22,31,11,32,14,22,0,29],
[31,23,33,32,38,33,34,35,17,39,27,27,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 85, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,19,27,30,20,23,23,22,22,29,27,21],
[25,0,27,30,23,21,22,24,27,23,24,28,29,22],
[25,24,0,31,28,26,28,22,26,25,26,31,32,28],
[32,21,20,0,26,23,19,19,22,23,24,25,30,19],
[24,28,23,25,0,25,19,22,22,16,20,25,27,21],
[21,30,25,28,26,0,27,21,23,27,24,27,29,24],
[31,29,23,32,32,24,0,24,25,27,28,33,30,27],
[28,27,29,32,29,30,27,0,33,28,24,29,37,32],
[28,24,25,29,29,28,26,18,0,24,26,31,31,25],
[29,28,26,28,35,24,24,23,27,0,27,27,29,24],
[29,27,25,27,31,27,23,27,25,24,0,29,31,23],
[22,23,20,26,26,24,18,22,20,24,22,0,28,22],
[24,22,19,21,24,22,21,14,20,22,20,23,0,18],
[30,29,23,32,30,27,24,19,26,27,28,29,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 86, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,23,27,27,18,27,21,31,23,20,27,27,24],
[28,0,30,28,29,26,27,29,28,25,32,29,23,30],
[28,21,0,33,27,27,31,27,32,31,26,32,28,29],
[24,23,18,0,24,21,23,22,27,25,21,27,23,27],
[24,22,24,27,0,18,24,23,31,27,30,28,26,26],
[33,25,24,30,33,0,28,26,33,31,32,31,28,35],
[24,24,20,28,27,23,0,22,30,24,29,28,26,32],
[30,22,24,29,28,25,29,0,33,26,32,29,26,29],
[20,23,19,24,20,18,21,18,0,23,22,25,20,30],
[28,26,20,26,24,20,27,25,28,0,29,28,27,30],
[31,19,25,30,21,19,22,19,29,22,0,27,23,28],
[24,22,19,24,23,20,23,22,26,23,24,0,25,28],
[24,28,23,28,25,23,25,25,31,24,28,26,0,28],
[27,21,22,24,25,16,19,22,21,21,23,23,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 87, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,26,23,31,15,17,29,24,18,29,23,22,36],
[26,0,29,17,20,21,22,25,23,18,18,23,19,26],
[25,22,0,20,23,18,22,25,25,20,26,28,19,29],
[28,34,31,0,25,22,27,32,29,25,27,26,24,35],
[20,31,28,26,0,21,22,24,26,25,32,27,27,29],
[36,30,33,29,30,0,27,34,26,22,38,34,28,36],
[34,29,29,24,29,24,0,28,32,26,23,28,25,38],
[22,26,26,19,27,17,23,0,24,17,24,20,20,30],
[27,28,26,22,25,25,19,27,0,21,28,24,20,35],
[33,33,31,26,26,29,25,34,30,0,29,31,26,34],
[22,33,25,24,19,13,28,27,23,22,0,25,18,35],
[28,28,23,25,24,17,23,31,27,20,26,0,23,32],
[29,32,32,27,24,23,26,31,31,25,33,28,0,34],
[15,25,22,16,22,15,13,21,16,17,16,19,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 88, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,27,28,28,22,27,27,26,29,30,24,28,31],
[27,0,30,32,34,22,29,30,28,33,29,30,34,34],
[24,21,0,26,28,25,27,29,25,22,26,25,27,30],
[23,19,25,0,32,20,20,20,27,22,23,24,26,28],
[23,17,23,19,0,15,20,21,19,23,25,28,30,30],
[29,29,26,31,36,0,28,29,28,24,31,31,32,35],
[24,22,24,31,31,23,0,25,24,26,32,29,29,33],
[24,21,22,31,30,22,26,0,23,28,26,25,30,29],
[25,23,26,24,32,23,27,28,0,28,27,27,31,30],
[22,18,29,29,28,27,25,23,23,0,26,25,33,30],
[21,22,25,28,26,20,19,25,24,25,0,20,28,25],
[27,21,26,27,23,20,22,26,24,26,31,0,30,24],
[23,17,24,25,21,19,22,21,20,18,23,21,0,25],
[20,17,21,23,21,16,18,22,21,21,26,27,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 89, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,20,11,20,13,27,27,26,24,16,27,34,17],
[28,0,22,27,30,25,26,33,41,31,27,31,27,30],
[31,29,0,22,35,32,32,35,38,33,29,35,32,21],
[40,24,29,0,32,28,36,32,35,35,22,29,28,28],
[31,21,16,19,0,20,32,31,21,21,15,26,27,25],
[38,26,19,23,31,0,30,37,37,34,28,33,34,23],
[24,25,19,15,19,21,0,28,27,20,18,30,30,21],
[24,18,16,19,20,14,23,0,23,27,18,26,19,19],
[25,10,13,16,30,14,24,28,0,20,10,21,19,22],
[27,20,18,16,30,17,31,24,31,0,18,28,27,26],
[35,24,22,29,36,23,33,33,41,33,0,27,26,25],
[24,20,16,22,25,18,21,25,30,23,24,0,24,18],
[17,24,19,23,24,17,21,32,32,24,25,27,0,20],
[34,21,30,23,26,28,30,32,29,25,26,33,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 90, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,24,24,24,22,24,22,20,21,18,27,21,20],
[30,0,27,27,30,29,28,33,28,26,21,26,24,31],
[27,24,0,23,25,24,24,27,19,21,19,30,19,23],
[27,24,28,0,24,24,24,29,22,22,21,27,21,21],
[27,21,26,27,0,22,28,21,19,19,20,31,18,22],
[29,22,27,27,29,0,30,24,23,22,25,31,28,23],
[27,23,27,27,23,21,0,24,21,14,21,30,18,20],
[29,18,24,22,30,27,27,0,29,25,17,30,26,24],
[31,23,32,29,32,28,30,22,0,26,23,26,29,30],
[30,25,30,29,32,29,37,26,25,0,25,33,25,31],
[33,30,32,30,31,26,30,34,28,26,0,31,30,25],
[24,25,21,24,20,20,21,21,25,18,20,0,21,23],
[30,27,32,30,33,23,33,25,22,26,21,30,0,25],
[31,20,28,30,29,28,31,27,21,20,26,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 91, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,32,15,26,26,37,19,32,30,32,35,36,25],
[17,0,11,7,10,28,24,12,25,20,17,21,17,12],
[19,40,0,18,33,22,29,13,26,26,29,32,27,20],
[36,44,33,0,28,33,38,27,32,39,25,34,33,20],
[25,41,18,23,0,23,29,11,32,24,20,40,24,12],
[25,23,29,18,28,0,24,26,20,27,21,28,21,13],
[14,27,22,13,22,27,0,17,26,18,24,27,30,20],
[32,39,38,24,40,25,34,0,36,35,28,40,32,32],
[19,26,25,19,19,31,25,15,0,15,16,24,27,16],
[21,31,25,12,27,24,33,16,36,0,24,34,30,29],
[19,34,22,26,31,30,27,23,35,27,0,31,27,13],
[16,30,19,17,11,23,24,11,27,17,20,0,24,12],
[15,34,24,18,27,30,21,19,24,21,24,27,0,13],
[26,39,31,31,39,38,31,19,35,22,38,39,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 92, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,28,33,30,33,26,29,33,28,32,25,31,31],
[21,0,20,27,29,24,17,20,25,20,21,18,27,18],
[23,31,0,32,29,28,23,30,29,26,27,24,31,26],
[18,24,19,0,26,24,23,22,23,22,23,20,26,21],
[21,22,22,25,0,28,19,23,21,25,21,22,27,24],
[18,27,23,27,23,0,16,30,29,20,25,18,27,22],
[25,34,28,28,32,35,0,31,34,29,28,27,36,29],
[22,31,21,29,28,21,20,0,21,26,22,17,30,26],
[18,26,22,28,30,22,17,30,0,23,25,21,33,28],
[23,31,25,29,26,31,22,25,28,0,24,24,27,30],
[19,30,24,28,30,26,23,29,26,27,0,25,30,22],
[26,33,27,31,29,33,24,34,30,27,26,0,29,30],
[20,24,20,25,24,24,15,21,18,24,21,22,0,19],
[20,33,25,30,27,29,22,25,23,21,29,21,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 93, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,12,14,14,38,19,30,22,24,24,30,35,25],
[38,0,27,23,18,38,27,17,32,11,29,45,40,33],
[39,24,0,25,35,50,18,30,29,28,23,29,34,40],
[37,28,26,0,29,37,26,27,32,15,32,44,44,31],
[37,33,16,22,0,43,22,23,22,32,28,34,32,27],
[13,13,1,14,8,0,7,13,13,7,13,25,13,25],
[32,24,33,25,29,44,0,30,17,27,29,30,29,46],
[21,34,21,24,28,38,21,0,32,21,28,39,28,32],
[29,19,22,19,29,38,34,19,0,29,12,24,29,40],
[27,40,23,36,19,44,24,30,22,0,29,35,30,30],
[27,22,28,19,23,38,22,23,39,22,0,45,28,34],
[21,6,22,7,17,26,21,12,27,16,6,0,21,28],
[16,11,17,7,19,38,22,23,22,21,23,30,0,23],
[26,18,11,20,24,26,5,19,11,21,17,23,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 94, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,31,29,26,23,34,33,27,27,31,35,23,33],
[27,0,31,29,34,28,31,36,28,27,32,31,25,28],
[20,20,0,22,32,21,31,31,19,24,27,30,21,24],
[22,22,29,0,29,24,29,30,26,21,27,32,21,22],
[25,17,19,22,0,21,26,27,23,21,27,27,20,21],
[28,23,30,27,30,0,31,33,26,28,29,32,22,28],
[17,20,20,22,25,20,0,26,20,21,23,28,19,21],
[18,15,20,21,24,18,25,0,21,20,22,28,14,22],
[24,23,32,25,28,25,31,30,0,26,24,33,20,27],
[24,24,27,30,30,23,30,31,25,0,30,31,26,26],
[20,19,24,24,24,22,28,29,27,21,0,27,19,23],
[16,20,21,19,24,19,23,23,18,20,24,0,18,24],
[28,26,30,30,31,29,32,37,31,25,32,33,0,29],
[18,23,27,29,30,23,30,29,24,25,28,27,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 95, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,25,31,34,26,25,27,26,29,29,21,24,24],
[22,0,23,29,23,21,18,25,21,24,19,20,15,20],
[26,28,0,26,24,25,21,24,23,29,26,27,24,23],
[20,22,25,0,26,17,17,14,16,21,17,22,21,18],
[17,28,27,25,0,21,15,20,21,24,21,20,20,24],
[25,30,26,34,30,0,23,26,29,26,22,32,24,21],
[26,33,30,34,36,28,0,30,24,34,28,28,29,29],
[24,26,27,37,31,25,21,0,30,31,28,22,24,31],
[25,30,28,35,30,22,27,21,0,32,21,26,23,31],
[22,27,22,30,27,25,17,20,19,0,21,27,24,18],
[22,32,25,34,30,29,23,23,30,30,0,29,21,24],
[30,31,24,29,31,19,23,29,25,24,22,0,22,19],
[27,36,27,30,31,27,22,27,28,27,30,29,0,28],
[27,31,28,33,27,30,22,20,20,33,27,32,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 96, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,27,16,28,33,25,27,36,34,28,22,28,28],
[19,0,21,16,22,24,21,26,21,14,21,22,25,18],
[24,30,0,23,16,24,17,23,17,21,19,19,28,23],
[35,35,28,0,25,27,31,28,35,33,27,26,37,30],
[23,29,35,26,0,31,27,26,28,23,24,25,32,32],
[18,27,27,24,20,0,19,21,24,22,20,21,35,23],
[26,30,34,20,24,32,0,32,38,26,29,20,36,33],
[24,25,28,23,25,30,19,0,25,28,26,23,16,16],
[15,30,34,16,23,27,13,26,0,20,21,18,23,22],
[17,37,30,18,28,29,25,23,31,0,25,19,32,26],
[23,30,32,24,27,31,22,25,30,26,0,29,31,26],
[29,29,32,25,26,30,31,28,33,32,22,0,33,32],
[23,26,23,14,19,16,15,35,28,19,20,18,0,24],
[23,33,28,21,19,28,18,35,29,25,25,19,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 97, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,27,21,18,11,15,23,18,23,23,27,17,23],
[31,0,29,27,22,19,23,34,27,20,32,28,28,33],
[24,22,0,13,19,15,24,22,11,10,22,16,16,21],
[30,24,38,0,27,17,18,18,24,23,27,33,24,31],
[33,29,32,24,0,18,16,29,28,23,30,30,25,23],
[40,32,36,34,33,0,24,40,29,33,40,37,35,33],
[36,28,27,33,35,27,0,36,32,24,35,27,33,37],
[28,17,29,33,22,11,15,0,25,16,23,25,14,18],
[33,24,40,27,23,22,19,26,0,22,30,37,28,23],
[28,31,41,28,28,18,27,35,29,0,32,23,29,25],
[28,19,29,24,21,11,16,28,21,19,0,31,14,24],
[24,23,35,18,21,14,24,26,14,28,20,0,18,13],
[34,23,35,27,26,16,18,37,23,22,37,33,0,26],
[28,18,30,20,28,18,14,33,28,26,27,38,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 98, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,26,28,31,24,27,26,25,28,27,34,22,28],
[22,0,29,27,24,25,29,16,25,20,24,29,22,25],
[25,22,0,27,24,22,24,20,23,24,24,29,23,21],
[23,24,24,0,29,26,26,19,21,20,29,28,26,23],
[20,27,27,22,0,24,25,22,21,27,20,27,19,20],
[27,26,29,25,27,0,29,23,22,29,36,33,24,25],
[24,22,27,25,26,22,0,19,23,22,29,30,27,24],
[25,35,31,32,29,28,32,0,26,32,25,37,30,27],
[26,26,28,30,30,29,28,25,0,30,31,33,24,26],
[23,31,27,31,24,22,29,19,21,0,25,32,24,25],
[24,27,27,22,31,15,22,26,20,26,0,29,19,23],
[17,22,22,23,24,18,21,14,18,19,22,0,19,16],
[29,29,28,25,32,27,24,21,27,27,32,32,0,25],
[23,26,30,28,31,26,27,24,25,26,28,35,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 99, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,29,29,26,32,25,25,32,28,27,28,24,32],
[25,0,33,26,28,30,25,32,29,25,25,29,29,25],
[22,18,0,23,20,27,22,25,27,21,19,22,20,23],
[22,25,28,0,30,28,23,25,33,25,23,27,24,28],
[25,23,31,21,0,28,26,27,28,23,24,26,21,29],
[19,21,24,23,23,0,17,21,19,24,17,21,18,23],
[26,26,29,28,25,34,0,32,32,30,28,25,24,31],
[26,19,26,26,24,30,19,0,26,27,23,23,21,22],
[19,22,24,18,23,32,19,25,0,24,23,23,18,29],
[23,26,30,26,28,27,21,24,27,0,28,24,21,26],
[24,26,32,28,27,34,23,28,28,23,0,29,22,29],
[23,22,29,24,25,30,26,28,28,27,22,0,23,25],
[27,22,31,27,30,33,27,30,33,30,29,28,0,27],
[19,26,28,23,22,28,20,29,22,25,22,26,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 100, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,26,26,24,26,31,19,23,26,27,30,23,29],
[25,0,28,29,22,29,30,22,23,29,30,30,30,30],
[25,23,0,25,25,24,31,19,23,26,27,32,24,28],
[25,22,26,0,23,28,32,19,20,28,25,22,24,34],
[27,29,26,28,0,33,32,26,29,30,32,32,25,38],
[25,22,27,23,18,0,32,17,23,24,22,23,22,28],
[20,21,20,19,19,19,0,20,22,27,18,24,20,25],
[32,29,32,32,25,34,31,0,27,33,29,33,28,36],
[28,28,28,31,22,28,29,24,0,26,26,27,25,33],
[25,22,25,23,21,27,24,18,25,0,22,25,21,24],
[24,21,24,26,19,29,33,22,25,29,0,25,25,32],
[21,21,19,29,19,28,27,18,24,26,26,0,24,30],
[28,21,27,27,26,29,31,23,26,30,26,27,0,32],
[22,21,23,17,13,23,26,15,18,27,19,21,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 101, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,25,24,24,24,29,27,25,24,26,31,25,26],
[22,0,35,31,27,23,28,28,24,33,33,30,30,25],
[26,16,0,19,26,15,28,23,23,23,18,25,23,20],
[27,20,32,0,25,23,33,33,31,33,33,34,32,22],
[27,24,25,26,0,24,22,22,22,27,22,28,27,24],
[27,28,36,28,27,0,25,30,32,30,26,27,32,27],
[22,23,23,18,29,26,0,22,27,26,23,24,25,19],
[24,23,28,18,29,21,29,0,26,24,22,25,26,21],
[26,27,28,20,29,19,24,25,0,27,25,21,32,21],
[27,18,28,18,24,21,25,27,24,0,23,27,28,22],
[25,18,33,18,29,25,28,29,26,28,0,33,27,26],
[20,21,26,17,23,24,27,26,30,24,18,0,25,22],
[26,21,28,19,24,19,26,25,19,23,24,26,0,15],
[25,26,31,29,27,24,32,30,30,29,25,29,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 102, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,24,41,24,39,26,45,19,19,28,26,30,26],
[27,0,19,41,28,33,45,41,30,28,34,38,32,37],
[27,32,0,41,17,31,32,39,15,15,19,25,30,24],
[10,10,10,0,15,11,18,35,13,11,6,23,10,17],
[27,23,34,36,0,30,34,41,30,32,34,30,32,32],
[12,18,20,40,21,0,20,26,13,19,14,23,10,25],
[25,6,19,33,17,31,0,39,15,13,17,9,23,31],
[6,10,12,16,10,25,12,0,12,12,16,15,16,19],
[32,21,36,38,21,38,36,39,0,28,19,27,27,37],
[32,23,36,40,19,32,38,39,23,0,32,32,42,45],
[23,17,32,45,17,37,34,35,32,19,0,32,32,32],
[25,13,26,28,21,28,42,36,24,19,19,0,25,26],
[21,19,21,41,19,41,28,35,24,9,19,26,0,33],
[25,14,27,34,19,26,20,32,14,6,19,25,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 103, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,25,27,26,19,20,30,21,29,21,26,19,19],
[16,0,18,22,22,19,19,23,15,21,26,21,19,13],
[26,33,0,30,28,25,23,34,20,29,33,23,26,19],
[24,29,21,0,29,17,17,26,24,22,19,23,17,17],
[25,29,23,22,0,20,23,23,23,21,29,24,17,15],
[32,32,26,34,31,0,25,32,23,33,29,29,31,37],
[31,32,28,34,28,26,0,31,29,31,34,28,26,23],
[21,28,17,25,28,19,20,0,21,25,15,18,22,17],
[30,36,31,27,28,28,22,30,0,35,33,26,29,26],
[22,30,22,29,30,18,20,26,16,0,25,15,23,18],
[30,25,18,32,22,22,17,36,18,26,0,19,17,22],
[25,30,28,28,27,22,23,33,25,36,32,0,23,22],
[32,32,25,34,34,20,25,29,22,28,34,28,0,23],
[32,38,32,34,36,14,28,34,25,33,29,29,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 104, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,23,34,28,27,34,21,33,23,27,25,21,19],
[26,0,23,34,25,29,36,21,39,26,37,27,40,25],
[28,28,0,31,21,36,28,32,31,36,30,32,34,17],
[17,17,20,0,16,14,23,27,28,29,23,21,20,12],
[23,26,30,35,0,19,27,21,29,20,31,29,30,16],
[24,22,15,37,32,0,22,38,25,34,22,28,28,7],
[17,15,23,28,24,29,0,27,16,25,28,18,11,29],
[30,30,19,24,30,13,24,0,29,36,24,26,23,13],
[18,12,20,23,22,26,35,22,0,23,24,22,22,24],
[28,25,15,22,31,17,26,15,28,0,19,15,26,15],
[24,14,21,28,20,29,23,27,27,32,0,11,34,23],
[26,24,19,30,22,23,33,25,29,36,40,0,26,29],
[30,11,17,31,21,23,40,28,29,25,17,25,0,23],
[32,26,34,39,35,44,22,38,27,36,28,22,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 105, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,22,25,24,23,22,24,21,24,23,22,22,22],
[21,0,26,22,22,23,30,27,26,28,33,23,17,22],
[29,25,0,26,24,21,23,26,28,33,26,25,20,21],
[26,29,25,0,27,32,29,25,30,30,27,30,28,19],
[27,29,27,24,0,30,27,29,29,28,29,29,27,30],
[28,28,30,19,21,0,26,27,24,27,28,24,18,24],
[29,21,28,22,24,25,0,31,26,27,26,23,22,17],
[27,24,25,26,22,24,20,0,26,26,22,24,17,22],
[30,25,23,21,22,27,25,25,0,29,25,20,22,22],
[27,23,18,21,23,24,24,25,22,0,21,22,19,19],
[28,18,25,24,22,23,25,29,26,30,0,28,20,22],
[29,28,26,21,22,27,28,27,31,29,23,0,24,22],
[29,34,31,23,24,33,29,34,29,32,31,27,0,26],
[29,29,30,32,21,27,34,29,29,32,29,29,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 106, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,30,23,27,27,27,33,29,38,21,29,37,23],
[19,0,23,18,21,20,18,26,25,34,29,22,28,14],
[21,28,0,32,29,32,21,31,35,29,24,27,27,22],
[28,33,19,0,23,18,33,37,38,35,29,29,30,22],
[24,30,22,28,0,15,27,30,30,34,30,26,28,20],
[24,31,19,33,36,0,25,37,39,27,30,29,26,28],
[24,33,30,18,24,26,0,35,33,33,25,27,25,25],
[18,25,20,14,21,14,16,0,27,23,12,13,18,19],
[22,26,16,13,21,12,18,24,0,20,18,18,22,11],
[13,17,22,16,17,24,18,28,31,0,20,13,17,18],
[30,22,27,22,21,21,26,39,33,31,0,25,29,18],
[22,29,24,22,25,22,24,38,33,38,26,0,19,19],
[14,23,24,21,23,25,26,33,29,34,22,32,0,24],
[28,37,29,29,31,23,26,32,40,33,33,32,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 107, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,25,25,28,21,30,27,22,28,25,25,23,31],
[28,0,29,28,28,32,30,28,22,32,24,24,28,31],
[26,22,0,27,26,24,27,26,19,24,22,24,24,23],
[26,23,24,0,23,23,23,25,23,27,20,27,29,28],
[23,23,25,28,0,21,28,27,20,27,22,21,25,21],
[30,19,27,28,30,0,28,25,28,29,23,27,27,32],
[21,21,24,28,23,23,0,23,23,27,25,26,25,27],
[24,23,25,26,24,26,28,0,20,23,22,26,25,25],
[29,29,32,28,31,23,28,31,0,25,25,28,25,30],
[23,19,27,24,24,22,24,28,26,0,23,28,24,26],
[26,27,29,31,29,28,26,29,26,28,0,32,25,31],
[26,27,27,24,30,24,25,25,23,23,19,0,25,27],
[28,23,27,22,26,24,26,26,26,27,26,26,0,27],
[20,20,28,23,30,19,24,26,21,25,20,24,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 108, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,23,31,20,16,27,31,27,26,29,22,33,33],
[27,0,19,25,22,17,20,29,28,21,25,27,28,29],
[28,32,0,23,26,22,24,27,34,25,29,26,32,29],
[20,26,28,0,17,19,22,23,27,28,28,20,28,26],
[31,29,25,34,0,26,28,32,31,29,27,31,37,30],
[35,34,29,32,25,0,29,35,31,30,33,31,28,32],
[24,31,27,29,23,22,0,28,31,26,29,28,34,24],
[20,22,24,28,19,16,23,0,24,23,22,17,27,21],
[24,23,17,24,20,20,20,27,0,22,26,22,28,27],
[25,30,26,23,22,21,25,28,29,0,30,28,30,29],
[22,26,22,23,24,18,22,29,25,21,0,22,28,33],
[29,24,25,31,20,20,23,34,29,23,29,0,31,28],
[18,23,19,23,14,23,17,24,23,21,23,20,0,22],
[18,22,22,25,21,19,27,30,24,22,18,23,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 109, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,22,31,24,32,28,29,26,29,23,22,24,30],
[24,0,20,29,28,26,25,33,26,27,26,20,24,23],
[29,31,0,30,32,38,29,24,27,24,33,26,27,28],
[20,22,21,0,28,32,20,26,27,27,19,16,25,18],
[27,23,19,23,0,31,23,22,26,26,23,17,20,22],
[19,25,13,19,20,0,20,20,22,21,19,21,20,14],
[23,26,22,31,28,31,0,27,23,34,26,29,29,27],
[22,18,27,25,29,31,24,0,25,26,24,21,28,23],
[25,25,24,24,25,29,28,26,0,24,24,15,22,27],
[22,24,27,24,25,30,17,25,27,0,29,21,18,24],
[28,25,18,32,28,32,25,27,27,22,0,27,25,20],
[29,31,25,35,34,30,22,30,36,30,24,0,23,29],
[27,27,24,26,31,31,22,23,29,33,26,28,0,33],
[21,28,23,33,29,37,24,28,24,27,31,22,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 110, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,19,31,26,16,18,31,12,25,22,11,10,29],
[22,0,19,37,24,22,16,24,18,29,21,20,22,26],
[32,32,0,29,26,15,27,26,15,23,22,19,27,30],
[20,14,22,0,15,22,19,24,9,23,18,20,17,26],
[25,27,25,36,0,20,22,24,17,33,27,17,28,32],
[35,29,36,29,31,0,32,24,31,33,27,30,31,39],
[33,35,24,32,29,19,0,26,17,30,24,26,26,26],
[20,27,25,27,27,27,25,0,17,31,15,23,25,27],
[39,33,36,42,34,20,34,34,0,42,35,28,28,33],
[26,22,28,28,18,18,21,20,9,0,16,26,16,25],
[29,30,29,33,24,24,27,36,16,35,0,20,26,32],
[40,31,32,31,34,21,25,28,23,25,31,0,27,28],
[41,29,24,34,23,20,25,26,23,35,25,24,0,31],
[22,25,21,25,19,12,25,24,18,26,19,23,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 111, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,7,15,14,28,25,17,25,20,22,20,20,20,18],
[44,0,24,22,29,30,21,29,21,23,16,21,17,22],
[36,27,0,34,39,29,35,29,28,33,28,35,27,22],
[37,29,17,0,31,32,16,34,22,16,23,15,23,26],
[23,22,12,20,0,31,14,33,8,25,15,19,22,6],
[26,21,22,19,20,0,22,23,15,22,21,23,25,6],
[34,30,16,35,37,29,0,31,31,30,32,28,21,22],
[26,22,22,17,18,28,20,0,22,29,16,28,29,9],
[31,30,23,29,43,36,20,29,0,29,24,16,26,15],
[29,28,18,35,26,29,21,22,22,0,21,25,19,15],
[31,35,23,28,36,30,19,35,27,30,0,37,29,6],
[31,30,16,36,32,28,23,23,35,26,14,0,22,15],
[31,34,24,28,29,26,30,22,25,32,22,29,0,6],
[33,29,29,25,45,45,29,42,36,36,45,36,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 112, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,31,27,35,25,23,24,29,25,26,24,27,32],
[22,0,24,24,30,22,19,18,22,30,24,22,27,27],
[20,27,0,19,33,18,19,19,26,24,26,19,23,30],
[24,27,32,0,29,28,30,21,32,30,33,18,30,36],
[16,21,18,22,0,21,21,14,24,23,27,20,19,30],
[26,29,33,23,30,0,26,22,29,33,31,19,26,29],
[28,32,32,21,30,25,0,23,31,32,33,27,29,33],
[27,33,32,30,37,29,28,0,27,36,33,25,31,31],
[22,29,25,19,27,22,20,24,0,30,19,21,20,29],
[26,21,27,21,28,18,19,15,21,0,23,18,25,27],
[25,27,25,18,24,20,18,18,32,28,0,21,28,30],
[27,29,32,33,31,32,24,26,30,33,30,0,31,31],
[24,24,28,21,32,25,22,20,31,26,23,20,0,29],
[19,24,21,15,21,22,18,20,22,24,21,20,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 113, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,33,31,20,26,26,28,29,33,28,39,23,26],
[30,0,32,30,23,26,26,23,25,26,28,31,23,32],
[18,19,0,25,23,21,23,24,21,24,21,29,19,26],
[20,21,26,0,18,23,19,22,19,24,27,25,16,23],
[31,28,28,33,0,27,30,34,32,29,34,35,24,32],
[25,25,30,28,24,0,27,24,27,25,33,33,27,28],
[25,25,28,32,21,24,0,28,29,27,31,30,22,27],
[23,28,27,29,17,27,23,0,24,24,27,27,24,26],
[22,26,30,32,19,24,22,27,0,30,29,30,23,28],
[18,25,27,27,22,26,24,27,21,0,23,24,18,23],
[23,23,30,24,17,18,20,24,22,28,0,29,16,25],
[12,20,22,26,16,18,21,24,21,27,22,0,19,20],
[28,28,32,35,27,24,29,27,28,33,35,32,0,31],
[25,19,25,28,19,23,24,25,23,28,26,31,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 114, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,27,31,30,27,24,24,27,30,29,23,37,28],
[24,0,23,30,28,23,22,21,23,23,20,29,30,26],
[24,28,0,32,26,27,22,24,25,27,28,22,33,27],
[20,21,19,0,28,19,20,20,16,21,27,22,23,24],
[21,23,25,23,0,24,19,20,20,24,20,22,20,20],
[24,28,24,32,27,0,17,23,26,26,30,28,31,30],
[27,29,29,31,32,34,0,23,32,29,30,30,32,32],
[27,30,27,31,31,28,28,0,22,32,33,33,31,35],
[24,28,26,35,31,25,19,29,0,28,28,30,29,25],
[21,28,24,30,27,25,22,19,23,0,28,25,27,27],
[22,31,23,24,31,21,21,18,23,23,0,29,27,27],
[28,22,29,29,29,23,21,18,21,26,22,0,31,23],
[14,21,18,28,31,20,19,20,22,24,24,20,0,25],
[23,25,24,27,31,21,19,16,26,24,24,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 115, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,34,25,26,37,24,28,30,27,27,33,36,22],
[21,0,31,33,37,27,23,31,30,22,17,36,26,19],
[17,20,0,11,17,22,20,25,27,15,22,21,26,9],
[26,18,40,0,33,29,18,30,30,20,27,40,38,18],
[25,14,34,18,0,29,19,28,25,19,17,34,22,16],
[14,24,29,22,22,0,15,29,23,23,22,31,18,22],
[27,28,31,33,32,36,0,35,32,24,26,39,28,28],
[23,20,26,21,23,22,16,0,24,19,14,36,29,17],
[21,21,24,21,26,28,19,27,0,22,19,37,28,16],
[24,29,36,31,32,28,27,32,29,0,34,40,30,31],
[24,34,29,24,34,29,25,37,32,17,0,36,26,29],
[18,15,30,11,17,20,12,15,14,11,15,0,19,16],
[15,25,25,13,29,33,23,22,23,21,25,32,0,18],
[29,32,42,33,35,29,23,34,35,20,22,35,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 116, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,21,33,31,44,23,30,26,26,19,22,24,26],
[25,0,12,38,31,49,23,31,24,9,20,22,31,26],
[30,39,0,43,32,43,38,37,49,39,38,25,30,38],
[18,13,8,0,26,31,25,32,11,13,20,19,13,19],
[20,20,19,25,0,31,18,20,17,20,13,27,18,30],
[7,2,8,20,20,0,16,7,13,9,7,15,18,15],
[28,28,13,26,33,35,0,33,18,28,26,21,23,27],
[21,20,14,19,31,44,18,0,12,6,20,22,26,19],
[25,27,2,40,34,38,33,39,0,34,27,20,20,19],
[25,42,12,38,31,42,23,45,17,0,33,20,29,30],
[32,31,13,31,38,44,25,31,24,18,0,20,31,24],
[29,29,26,32,24,36,30,29,31,31,31,0,23,37],
[27,20,21,38,33,33,28,25,31,22,20,28,0,35],
[25,25,13,32,21,36,24,32,32,21,27,14,16,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 117, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,25,16,18,28,8,29,23,19,29,21,35,28],
[28,0,24,11,15,20,13,26,14,20,26,30,29,28],
[26,27,0,16,13,19,15,29,25,10,31,18,19,27],
[35,40,35,0,35,32,24,30,29,24,33,35,32,32],
[33,36,38,16,0,32,16,31,30,37,39,29,32,42],
[23,31,32,19,19,0,21,21,35,22,23,25,24,25],
[43,38,36,27,35,30,0,37,24,36,36,44,46,40],
[22,25,22,21,20,30,14,0,28,31,35,34,33,29],
[28,37,26,22,21,16,27,23,0,21,24,29,31,30],
[32,31,41,27,14,29,15,20,30,0,28,33,29,28],
[22,25,20,18,12,28,15,16,27,23,0,29,26,30],
[30,21,33,16,22,26,7,17,22,18,22,0,24,30],
[16,22,32,19,19,27,5,18,20,22,25,27,0,27],
[23,23,24,19,9,26,11,22,21,23,21,21,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 118, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,31,17,39,12,20,31,36,20,15,26,20,21],
[17,0,48,22,43,22,25,48,33,32,17,43,27,23],
[20,3,0,12,33,12,10,27,12,20,17,5,15,10],
[34,29,39,0,44,26,25,49,21,25,26,36,28,31],
[12,8,18,7,0,7,15,28,18,7,7,7,12,12],
[39,29,39,25,44,0,25,49,31,15,15,21,33,21],
[31,26,41,26,36,26,0,41,28,12,28,26,10,28],
[20,3,24,2,23,2,10,0,21,10,10,0,13,0],
[15,18,39,30,33,20,23,30,0,25,15,23,23,10],
[31,19,31,26,44,36,39,41,26,0,26,19,25,24],
[36,34,34,25,44,36,23,41,36,25,0,29,23,31],
[25,8,46,15,44,30,25,51,28,32,22,0,35,23],
[31,24,36,23,39,18,41,38,28,26,28,16,0,21],
[30,28,41,20,39,30,23,51,41,27,20,28,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 119, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,35,22,27,29,11,40,28,29,17,9,16,27],
[22,0,32,31,24,21,20,27,17,21,28,23,16,21],
[16,19,0,22,28,26,19,27,33,26,22,14,24,20],
[29,20,29,0,24,21,19,34,21,21,43,27,21,21],
[24,27,23,27,0,29,22,35,22,28,22,22,29,35],
[22,30,25,30,22,0,22,19,36,29,25,25,32,20],
[40,31,32,32,29,29,0,34,29,37,27,24,26,32],
[11,24,24,17,16,32,17,0,17,18,17,17,24,38],
[23,34,18,30,29,15,22,34,0,20,22,6,18,29],
[22,30,25,30,23,22,14,33,31,0,25,17,24,28],
[34,23,29,8,29,26,24,34,29,26,0,29,23,26],
[42,28,37,24,29,26,27,34,45,34,22,0,31,29],
[35,35,27,30,22,19,25,27,33,27,28,20,0,20],
[24,30,31,30,16,31,19,13,22,23,25,22,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 120, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,24,30,26,29,25,25,20,28,24,29,23,27],
[30,0,28,30,31,30,24,32,24,33,25,28,29,33],
[27,23,0,28,29,29,22,26,20,25,25,29,25,27],
[21,21,23,0,28,28,22,27,22,26,20,30,27,24],
[25,20,22,23,0,26,21,26,15,23,26,28,21,25],
[22,21,22,23,25,0,21,23,20,23,23,25,20,19],
[26,27,29,29,30,30,0,28,20,27,25,34,25,32],
[26,19,25,24,25,28,23,0,22,22,21,24,22,24],
[31,27,31,29,36,31,31,29,0,26,24,35,27,28],
[23,18,26,25,28,28,24,29,25,0,27,28,24,29],
[27,26,26,31,25,28,26,30,27,24,0,28,25,26],
[22,23,22,21,23,26,17,27,16,23,23,0,20,23],
[28,22,26,24,30,31,26,29,24,27,26,31,0,30],
[24,18,24,27,26,32,19,27,23,22,25,28,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 121, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,20,20,17,16,16,18,15,19,13,23,30,17],
[32,0,25,8,22,16,17,16,15,13,16,14,23,22],
[31,26,0,32,20,25,29,30,16,31,20,20,40,32],
[31,43,19,0,27,27,23,25,30,21,29,32,34,38],
[34,29,31,24,0,29,18,29,22,22,29,21,29,28],
[35,35,26,24,22,0,15,26,22,13,29,18,37,29],
[35,34,22,28,33,36,0,33,22,22,23,22,47,31],
[33,35,21,26,22,25,18,0,28,34,27,25,33,40],
[36,36,35,21,29,29,29,23,0,24,29,38,40,34],
[32,38,20,30,29,38,29,17,27,0,25,30,43,32],
[38,35,31,22,22,22,28,24,22,26,0,18,42,30],
[28,37,31,19,30,33,29,26,13,21,33,0,39,33],
[21,28,11,17,22,14,4,18,11,8,9,12,0,26],
[34,29,19,13,23,22,20,11,17,19,21,18,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 122, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,25,25,18,27,24,22,15,19,23,22,25,26],
[36,0,27,33,31,40,32,24,33,26,25,30,34,32],
[26,24,0,26,19,34,24,24,26,25,23,25,31,25],
[26,18,25,0,20,33,31,27,23,34,22,26,34,37],
[33,20,32,31,0,40,30,32,34,31,33,26,39,35],
[24,11,17,18,11,0,18,15,21,24,18,23,17,22],
[27,19,27,20,21,33,0,20,34,27,32,33,32,38],
[29,27,27,24,19,36,31,0,28,28,28,31,29,30],
[36,18,25,28,17,30,17,23,0,28,28,22,30,33],
[32,25,26,17,20,27,24,23,23,0,25,28,24,26],
[28,26,28,29,18,33,19,23,23,26,0,20,25,35],
[29,21,26,25,25,28,18,20,29,23,31,0,31,34],
[26,17,20,17,12,34,19,22,21,27,26,20,0,31],
[25,19,26,14,16,29,13,21,18,25,16,17,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 123, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,29,28,28,30,29,32,30,25,30,30,28,34],
[22,0,26,26,23,26,29,31,26,23,28,27,27,32],
[22,25,0,26,28,25,33,34,29,25,27,24,26,31],
[23,25,25,0,25,27,26,32,29,28,26,26,26,29],
[23,28,23,26,0,25,25,32,30,27,24,22,25,29],
[21,25,26,24,26,0,28,31,26,23,32,21,22,25],
[22,22,18,25,26,23,0,29,22,19,24,20,19,24],
[19,20,17,19,19,20,22,0,22,19,22,17,16,19],
[21,25,22,22,21,25,29,29,0,18,27,18,24,27],
[26,28,26,23,24,28,32,32,33,0,32,29,25,32],
[21,23,24,25,27,19,27,29,24,19,0,23,28,26],
[21,24,27,25,29,30,31,34,33,22,28,0,25,29],
[23,24,25,25,26,29,32,35,27,26,23,26,0,29],
[17,19,20,22,22,26,27,32,24,19,25,22,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 124, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,32,23,22,19,20,22,17,19,23,21,29,17],
[33,0,25,25,22,22,16,21,13,24,27,15,26,27],
[19,26,0,23,27,24,27,35,23,34,31,19,25,23],
[28,26,28,0,19,22,15,20,14,29,24,15,22,26],
[29,29,24,32,0,30,26,34,31,33,29,24,33,23],
[32,29,27,29,21,0,22,30,21,28,25,24,30,29],
[31,35,24,36,25,29,0,23,30,36,25,22,34,28],
[29,30,16,31,17,21,28,0,23,24,24,24,31,31],
[34,38,28,37,20,30,21,28,0,34,29,30,35,30],
[32,27,17,22,18,23,15,27,17,0,21,21,23,23],
[28,24,20,27,22,26,26,27,22,30,0,21,25,22],
[30,36,32,36,27,27,29,27,21,30,30,0,29,29],
[22,25,26,29,18,21,17,20,16,28,26,22,0,21],
[34,24,28,25,28,22,23,20,21,28,29,22,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 125, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,27,31,22,27,18,26,26,22,17,26,30,29],
[23,0,21,28,24,27,24,27,24,21,19,24,24,23],
[24,30,0,30,35,30,28,25,30,29,26,30,27,29],
[20,23,21,0,25,24,22,23,20,18,16,22,19,20],
[29,27,16,26,0,28,18,24,19,16,17,24,28,26],
[24,24,21,27,23,0,21,28,30,20,21,33,30,21],
[33,27,23,29,33,30,0,27,27,23,22,28,25,30],
[25,24,26,28,27,23,24,0,30,22,22,26,29,25],
[25,27,21,31,32,21,24,21,0,23,16,27,29,27],
[29,30,22,33,35,31,28,29,28,0,25,32,36,32],
[34,32,25,35,34,30,29,29,35,26,0,27,27,33],
[25,27,21,29,27,18,23,25,24,19,24,0,27,24],
[21,27,24,32,23,21,26,22,22,15,24,24,0,21],
[22,28,22,31,25,30,21,26,24,19,18,27,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 126, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,28,30,26,25,34,29,22,40,11,34,28,26],
[35,0,44,43,33,37,44,25,34,47,40,51,34,41],
[23,7,0,24,11,18,16,20,2,18,17,16,1,20],
[21,8,27,0,15,27,21,27,9,33,15,21,8,18],
[25,18,40,36,0,25,34,25,13,37,22,41,39,37],
[26,14,33,24,26,0,38,33,21,43,27,26,26,24],
[17,7,35,30,17,13,0,25,1,30,16,29,25,23],
[22,26,31,24,26,18,26,0,15,28,23,26,22,30],
[29,17,49,42,38,30,50,36,0,46,29,50,44,48],
[11,4,33,18,14,8,21,23,5,0,11,32,22,24],
[40,11,34,36,29,24,35,28,22,40,0,29,22,47],
[17,0,35,30,10,25,22,25,1,19,22,0,24,23],
[23,17,50,43,12,25,26,29,7,29,29,27,0,29],
[25,10,31,33,14,27,28,21,3,27,4,28,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 127, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,24,20,12,35,28,19,26,23,27,34,22,23],
[23,0,22,12,16,17,13,23,23,24,18,18,17,15],
[27,29,0,20,18,27,29,33,31,32,30,33,19,36],
[31,39,31,0,18,43,30,35,36,32,30,33,31,35],
[39,35,33,33,0,39,37,25,36,37,41,44,29,35],
[16,34,24,8,12,0,28,28,20,23,9,23,21,21],
[23,38,22,21,14,23,0,23,31,26,20,29,19,26],
[32,28,18,16,26,23,28,0,31,31,28,29,22,27],
[25,28,20,15,15,31,20,20,0,26,25,18,23,19],
[28,27,19,19,14,28,25,20,25,0,23,21,27,24],
[24,33,21,21,10,42,31,23,26,28,0,28,22,33],
[17,33,18,18,7,28,22,22,33,30,23,0,26,29],
[29,34,32,20,22,30,32,29,28,24,29,25,0,29],
[28,36,15,16,16,30,25,24,32,27,18,22,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 128, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,24,27,29,28,25,23,26,28,31,29,29,26],
[19,0,25,22,21,22,21,26,18,23,26,23,26,19],
[27,26,0,30,25,28,22,29,26,30,26,27,27,26],
[24,29,21,0,22,24,22,25,24,27,24,28,24,27],
[22,30,26,29,0,22,24,24,21,25,29,28,27,26],
[23,29,23,27,29,0,24,25,25,30,26,26,29,23],
[26,30,29,29,27,27,0,29,25,32,28,30,31,30],
[28,25,22,26,27,26,22,0,29,26,24,25,23,24],
[25,33,25,27,30,26,26,22,0,31,30,33,30,29],
[23,28,21,24,26,21,19,25,20,0,22,26,25,22],
[20,25,25,27,22,25,23,27,21,29,0,26,28,20],
[22,28,24,23,23,25,21,26,18,25,25,0,23,26],
[22,25,24,27,24,22,20,28,21,26,23,28,0,24],
[25,32,25,24,25,28,21,27,22,29,31,25,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 129, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,28,34,26,29,31,31,31,23,27,30,35,28],
[16,0,18,24,21,21,24,23,27,16,18,23,22,24],
[23,33,0,33,23,28,31,28,30,22,23,31,32,30],
[17,27,18,0,19,22,23,24,19,19,17,13,28,25],
[25,30,28,32,0,28,26,29,25,23,23,23,34,23],
[22,30,23,29,23,0,24,25,26,21,18,28,28,26],
[20,27,20,28,25,27,0,26,27,22,18,26,20,20],
[20,28,23,27,22,26,25,0,25,20,21,24,30,21],
[20,24,21,32,26,25,24,26,0,25,22,26,29,28],
[28,35,29,32,28,30,29,31,26,0,26,27,27,25],
[24,33,28,34,28,33,33,30,29,25,0,28,34,30],
[21,28,20,38,28,23,25,27,25,24,23,0,26,29],
[16,29,19,23,17,23,31,21,22,24,17,25,0,24],
[23,27,21,26,28,25,31,30,23,26,21,22,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 130, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,29,35,33,31,31,26,39,28,33,34,32,39],
[30,0,30,42,38,30,33,29,34,31,32,26,29,25],
[22,21,0,30,21,20,24,22,24,15,26,26,19,28],
[16,9,21,0,20,22,18,16,15,17,12,16,15,12],
[18,13,30,31,0,23,32,29,25,25,16,20,21,26],
[20,21,31,29,28,0,29,25,26,18,29,22,21,31],
[20,18,27,33,19,22,0,22,27,21,23,23,23,23],
[25,22,29,35,22,26,29,0,26,21,27,22,28,31],
[12,17,27,36,26,25,24,25,0,18,18,26,24,16],
[23,20,36,34,26,33,30,30,33,0,25,28,35,32],
[18,19,25,39,35,22,28,24,33,26,0,27,32,27],
[17,25,25,35,31,29,28,29,25,23,24,0,28,23],
[19,22,32,36,30,30,28,23,27,16,19,23,0,20],
[12,26,23,39,25,20,28,20,35,19,24,28,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 131, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,16,25,30,16,20,14,16,26,25,25,27,25,21],
[35,0,33,27,22,32,27,22,32,33,25,34,30,18],
[26,18,0,21,13,28,17,14,29,27,17,31,28,13],
[21,24,30,0,19,22,23,15,33,25,23,30,31,22],
[35,29,38,32,0,25,23,29,34,30,37,38,28,23],
[31,19,23,29,26,0,20,20,30,32,23,30,36,21],
[37,24,34,28,28,31,0,24,36,35,35,34,30,25],
[35,29,37,36,22,31,27,0,39,31,36,33,37,27],
[25,19,22,18,17,21,15,12,0,20,22,30,18,17],
[26,18,24,26,21,19,16,20,31,0,23,21,29,20],
[26,26,34,28,14,28,16,15,29,28,0,35,32,20],
[24,17,20,21,13,21,17,18,21,30,16,0,28,16],
[26,21,23,20,23,15,21,14,33,22,19,23,0,14],
[30,33,38,29,28,30,26,24,34,31,31,35,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 132, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,22,21,31,24,20,17,21,21,22,27,33,28],
[18,0,26,22,26,14,7,18,19,15,22,13,23,17],
[29,25,0,22,25,22,16,18,27,18,25,21,27,20],
[30,29,29,0,27,27,19,19,25,23,22,25,29,20],
[20,25,26,24,0,21,18,20,21,15,24,23,26,24],
[27,37,29,24,30,0,22,26,25,27,26,23,26,25],
[31,44,35,32,33,29,0,25,26,24,27,27,32,31],
[34,33,33,32,31,25,26,0,29,23,29,31,35,36],
[30,32,24,26,30,26,25,22,0,25,23,27,25,29],
[30,36,33,28,36,24,27,28,26,0,38,33,30,31],
[29,29,26,29,27,25,24,22,28,13,0,28,28,29],
[24,38,30,26,28,28,24,20,24,18,23,0,31,28],
[18,28,24,22,25,25,19,16,26,21,23,20,0,22],
[23,34,31,31,27,26,20,15,22,20,22,23,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 133, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,20,24,28,26,19,35,30,24,27,24,30,29],
[26,0,24,28,29,23,23,29,27,26,22,22,30,29],
[31,27,0,18,30,28,32,30,28,25,27,29,34,32],
[27,23,33,0,31,31,34,33,34,21,28,24,34,35],
[23,22,21,20,0,16,22,28,25,16,20,22,30,21],
[25,28,23,20,35,0,26,27,23,23,18,22,29,30],
[32,28,19,17,29,25,0,32,29,22,30,25,29,31],
[16,22,21,18,23,24,19,0,21,17,12,17,26,28],
[21,24,23,17,26,28,22,30,0,27,26,20,33,32],
[27,25,26,30,35,28,29,34,24,0,27,29,35,31],
[24,29,24,23,31,33,21,39,25,24,0,26,37,29],
[27,29,22,27,29,29,26,34,31,22,25,0,28,31],
[21,21,17,17,21,22,22,25,18,16,14,23,0,25],
[22,22,19,16,30,21,20,23,19,20,22,20,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 134, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,31,27,26,31,29,25,27,32,33,27,31,34],
[30,0,31,26,30,34,29,28,31,30,30,24,34,28],
[20,20,0,21,20,26,22,24,25,27,23,20,26,23],
[24,25,30,0,25,28,30,27,23,25,27,24,29,24],
[25,21,31,26,0,26,25,25,23,21,29,21,28,23],
[20,17,25,23,25,0,20,25,22,21,27,18,26,27],
[22,22,29,21,26,31,0,20,26,24,29,21,31,29],
[26,23,27,24,26,26,31,0,27,27,26,24,29,28],
[24,20,26,28,28,29,25,24,0,28,30,20,31,31],
[19,21,24,26,30,30,27,24,23,0,28,21,28,33],
[18,21,28,24,22,24,22,25,21,23,0,19,25,28],
[24,27,31,27,30,33,30,27,31,30,32,0,32,31],
[20,17,25,22,23,25,20,22,20,23,26,19,0,23],
[17,23,28,27,28,24,22,23,20,18,23,20,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 135, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,17,24,27,22,23,28,18,33,26,20,31,29],
[23,0,20,23,33,24,31,31,18,30,25,17,29,27],
[34,31,0,27,34,30,25,32,28,33,32,27,36,27],
[27,28,24,0,32,26,29,35,25,26,28,23,36,29],
[24,18,17,19,0,18,27,27,15,30,23,15,28,25],
[29,27,21,25,33,0,30,31,23,30,25,23,38,35],
[28,20,26,22,24,21,0,30,25,31,26,25,32,23],
[23,20,19,16,24,20,21,0,17,25,18,17,32,16],
[33,33,23,26,36,28,26,34,0,32,29,18,34,28],
[18,21,18,25,21,21,20,26,19,0,17,15,23,25],
[25,26,19,23,28,26,25,33,22,34,0,21,26,22],
[31,34,24,28,36,28,26,34,33,36,30,0,32,28],
[20,22,15,15,23,13,19,19,17,28,25,19,0,17],
[22,24,24,22,26,16,28,35,23,26,29,23,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 136, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,32,23,33,31,26,30,28,28,33,27,30,23],
[21,0,37,22,24,26,18,31,25,23,29,22,22,29],
[19,14,0,18,18,22,19,16,15,21,25,20,19,23],
[28,29,33,0,26,27,29,27,27,31,32,26,27,25],
[18,27,33,25,0,25,22,31,29,24,28,22,25,25],
[20,25,29,24,26,0,21,26,22,21,27,23,22,28],
[25,33,32,22,29,30,0,33,26,30,30,27,32,21],
[21,20,35,24,20,25,18,0,32,30,29,25,27,21],
[23,26,36,24,22,29,25,19,0,21,27,24,24,26],
[23,28,30,20,27,30,21,21,30,0,27,23,29,25],
[18,22,26,19,23,24,21,22,24,24,0,21,28,23],
[24,29,31,25,29,28,24,26,27,28,30,0,29,28],
[21,29,32,24,26,29,19,24,27,22,23,22,0,17],
[28,22,28,26,26,23,30,30,25,26,28,23,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 137, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,23,22,24,25,30,28,20,25,24,22,23,17],
[22,0,24,18,23,24,30,25,25,28,17,23,19,15],
[28,27,0,26,32,28,25,32,25,24,21,33,25,28],
[29,33,25,0,33,25,31,36,23,33,20,34,27,20],
[27,28,19,18,0,23,28,31,21,22,18,29,23,19],
[26,27,23,26,28,0,29,32,25,24,21,21,20,17],
[21,21,26,20,23,22,0,33,21,27,19,20,20,13],
[23,26,19,15,20,19,18,0,23,21,17,15,17,17],
[31,26,26,28,30,26,30,28,0,26,21,34,28,20],
[26,23,27,18,29,27,24,30,25,0,22,25,22,22],
[27,34,30,31,33,30,32,34,30,29,0,27,28,19],
[29,28,18,17,22,30,31,36,17,26,24,0,25,18],
[28,32,26,24,28,31,31,34,23,29,23,26,0,29],
[34,36,23,31,32,34,38,34,31,29,32,33,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 138, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,8,11,22,26,18,27,22,16,11,11,23,24],
[38,0,28,24,39,35,31,35,35,32,31,34,36,40],
[43,23,0,32,38,50,40,31,38,28,26,29,29,40],
[40,27,19,0,42,29,29,38,30,35,20,23,35,38],
[29,12,13,9,0,29,24,32,22,22,14,17,18,26],
[25,16,1,22,22,0,15,27,19,21,11,22,19,24],
[33,20,11,22,27,36,0,27,24,24,31,34,19,43],
[24,16,20,13,19,24,24,0,21,15,15,26,23,27],
[29,16,13,21,29,32,27,30,0,28,14,30,34,27],
[35,19,23,16,29,30,27,36,23,0,18,14,24,36],
[40,20,25,31,37,40,20,36,37,33,0,26,34,40],
[40,17,22,28,34,29,17,25,21,37,25,0,34,35],
[28,15,22,16,33,32,32,28,17,27,17,17,0,26],
[27,11,11,13,25,27,8,24,24,15,11,16,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 139, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,25,29,30,26,24,29,27,24,24,26,25,31],
[24,0,20,24,23,18,19,25,19,18,22,22,23,26],
[26,31,0,32,29,29,24,25,22,29,31,23,27,29],
[22,27,19,0,23,25,22,26,21,25,24,25,25,25],
[21,28,22,28,0,21,22,27,22,25,27,25,25,28],
[25,33,22,26,30,0,25,26,24,27,27,26,28,31],
[27,32,27,29,29,26,0,28,23,29,35,27,32,28],
[22,26,26,25,24,25,23,0,27,23,25,26,25,26],
[24,32,29,30,29,27,28,24,0,29,30,26,27,32],
[27,33,22,26,26,24,22,28,22,0,25,28,25,28],
[27,29,20,27,24,24,16,26,21,26,0,25,25,28],
[25,29,28,26,26,25,24,25,25,23,26,0,24,30],
[26,28,24,26,26,23,19,26,24,26,26,27,0,33],
[20,25,22,26,23,20,23,25,19,23,23,21,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 140, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,29,18,33,29,31,28,30,29,26,32,28,29],
[25,0,20,22,22,31,21,24,21,20,20,19,28,29],
[22,31,0,21,33,30,26,30,32,30,24,27,30,28],
[33,29,30,0,34,36,28,32,33,27,25,28,31,29],
[18,29,18,17,0,27,29,20,15,26,20,22,26,26],
[22,20,21,15,24,0,29,19,22,21,18,20,30,28],
[20,30,25,23,22,22,0,26,20,25,25,20,28,23],
[23,27,21,19,31,32,25,0,21,25,19,24,28,32],
[21,30,19,18,36,29,31,30,0,27,28,31,32,30],
[22,31,21,24,25,30,26,26,24,0,22,25,29,24],
[25,31,27,26,31,33,26,32,23,29,0,28,30,31],
[19,32,24,23,29,31,31,27,20,26,23,0,27,28],
[23,23,21,20,25,21,23,23,19,22,21,24,0,26],
[22,22,23,22,25,23,28,19,21,27,20,23,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 141, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,25,28,26,22,26,24,23,30,27,34,29,25],
[27,0,18,32,21,24,30,26,20,30,21,30,19,35],
[26,33,0,32,23,27,27,28,20,30,27,28,24,25],
[23,19,19,0,14,21,21,20,21,24,19,26,17,27],
[25,30,28,37,0,26,26,30,29,34,27,35,26,36],
[29,27,24,30,25,0,31,26,22,29,30,26,24,28],
[25,21,24,30,25,20,0,29,21,28,22,33,22,31],
[27,25,23,31,21,25,22,0,25,27,17,30,23,30],
[28,31,31,30,22,29,30,26,0,23,21,32,22,34],
[21,21,21,27,17,22,23,24,28,0,13,29,18,27],
[24,30,24,32,24,21,29,34,30,38,0,39,23,31],
[17,21,23,25,16,25,18,21,19,22,12,0,18,22],
[22,32,27,34,25,27,29,28,29,33,28,33,0,32],
[26,16,26,24,15,23,20,21,17,24,20,29,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 142, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,30,32,22,17,29,27,28,32,31,29,33,25],
[23,0,28,37,25,15,35,18,24,33,34,37,35,30],
[21,23,0,27,14,25,23,20,26,33,23,24,27,22],
[19,14,24,0,17,19,26,22,12,24,18,31,18,23],
[29,26,37,34,0,24,32,31,30,38,34,29,33,23],
[34,36,26,32,27,0,38,22,25,39,33,37,30,31],
[22,16,28,25,19,13,0,17,23,27,20,21,28,17],
[24,33,31,29,20,29,34,0,30,34,32,33,34,31],
[23,27,25,39,21,26,28,21,0,28,29,30,28,23],
[19,18,18,27,13,12,24,17,23,0,23,18,28,20],
[20,17,28,33,17,18,31,19,22,28,0,30,25,25],
[22,14,27,20,22,14,30,18,21,33,21,0,23,26],
[18,16,24,33,18,21,23,17,23,23,26,28,0,21],
[26,21,29,28,28,20,34,20,28,31,26,25,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 143, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,21,25,34,26,21,23,27,29,36,26,20,30],
[25,0,21,25,26,27,26,21,20,27,30,23,24,29],
[30,30,0,27,33,27,29,20,24,35,35,25,27,36],
[26,26,24,0,30,31,30,25,25,32,37,19,22,30],
[17,25,18,21,0,29,20,17,25,19,28,21,24,23],
[25,24,24,20,22,0,22,20,25,26,35,16,23,22],
[30,25,22,21,31,29,0,27,27,25,26,30,22,24],
[28,30,31,26,34,31,24,0,30,34,39,29,24,33],
[24,31,27,26,26,26,24,21,0,25,29,24,24,29],
[22,24,16,19,32,25,26,17,26,0,31,23,24,25],
[15,21,16,14,23,16,25,12,22,20,0,19,24,24],
[25,28,26,32,30,35,21,22,27,28,32,0,28,29],
[31,27,24,29,27,28,29,27,27,27,27,23,0,21],
[21,22,15,21,28,29,27,18,22,26,27,22,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 144, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,32,28,30,28,26,21,27,26,24,23,25,29],
[25,0,31,21,28,26,30,29,29,27,23,24,21,35],
[19,20,0,18,25,27,24,26,18,25,24,22,20,19],
[23,30,33,0,29,32,29,30,30,32,30,26,31,35],
[21,23,26,22,0,23,26,24,28,27,25,28,26,27],
[23,25,24,19,28,0,29,23,27,26,23,23,19,26],
[25,21,27,22,25,22,0,27,23,23,20,24,21,26],
[30,22,25,21,27,28,24,0,26,30,21,22,20,27],
[24,22,33,21,23,24,28,25,0,27,21,21,15,24],
[25,24,26,19,24,25,28,21,24,0,23,28,18,29],
[27,28,27,21,26,28,31,30,30,28,0,26,19,26],
[28,27,29,25,23,28,27,29,30,23,25,0,26,30],
[26,30,31,20,25,32,30,31,36,33,32,25,0,30],
[22,16,32,16,24,25,25,24,27,22,25,21,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 145, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,23,24,25,25,23,31,26,27,26,33,30,26],
[25,0,27,29,24,30,26,31,30,24,21,32,28,26],
[28,24,0,29,24,29,28,30,31,26,20,32,27,24],
[27,22,22,0,22,28,22,32,31,19,21,31,26,28],
[26,27,27,29,0,31,30,29,31,16,26,27,29,28],
[26,21,22,23,20,0,27,26,27,20,20,29,25,21],
[28,25,23,29,21,24,0,26,28,19,20,28,29,24],
[20,20,21,19,22,25,25,0,26,18,22,20,23,23],
[25,21,20,20,20,24,23,25,0,22,19,28,25,19],
[24,27,25,32,35,31,32,33,29,0,25,27,30,26],
[25,30,31,30,25,31,31,29,32,26,0,30,29,33],
[18,19,19,20,24,22,23,31,23,24,21,0,24,22],
[21,23,24,25,22,26,22,28,26,21,22,27,0,23],
[25,25,27,23,23,30,27,28,32,25,18,29,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 146, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,25,36,34,30,34,35,31,36,27,36,25,28],
[17,0,23,19,25,23,25,25,25,25,22,22,21,21],
[26,28,0,28,30,31,32,29,33,33,27,28,25,23],
[15,32,23,0,30,29,27,27,32,28,23,23,19,22],
[17,26,21,21,0,24,29,26,28,25,27,23,19,24],
[21,28,20,22,27,0,26,35,33,31,31,30,23,24],
[17,26,19,24,22,25,0,26,32,27,23,22,25,20],
[16,26,22,24,25,16,25,0,31,23,21,23,16,23],
[20,26,18,19,23,18,19,20,0,25,22,18,16,19],
[15,26,18,23,26,20,24,28,26,0,17,24,23,29],
[24,29,24,28,24,20,28,30,29,34,0,28,20,26],
[15,29,23,28,28,21,29,28,33,27,23,0,20,25],
[26,30,26,32,32,28,26,35,35,28,31,31,0,24],
[23,30,28,29,27,27,31,28,32,22,25,26,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 147, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,27,25,25,28,28,20,22,22,17,30,21,21],
[23,0,28,23,23,23,31,21,23,25,16,27,25,27],
[24,23,0,17,25,14,28,20,17,20,22,35,15,23],
[26,28,34,0,26,25,36,26,29,21,19,33,24,31],
[26,28,26,25,0,24,31,21,22,19,15,29,22,28],
[23,28,37,26,27,0,28,22,23,25,23,25,29,28],
[23,20,23,15,20,23,0,22,11,14,19,23,19,21],
[31,30,31,25,30,29,29,0,27,24,25,34,22,27],
[29,28,34,22,29,28,40,24,0,23,19,29,26,35],
[29,26,31,30,32,26,37,27,28,0,23,31,27,33],
[34,35,29,32,36,28,32,26,32,28,0,34,19,31],
[21,24,16,18,22,26,28,17,22,20,17,0,19,24],
[30,26,36,27,29,22,32,29,25,24,32,32,0,31],
[30,24,28,20,23,23,30,24,16,18,20,27,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 148, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,19,39,24,30,27,38,35,33,22,22,29,29],
[25,0,23,35,26,30,25,30,28,36,19,22,19,28],
[32,28,0,38,24,37,27,38,33,36,22,27,26,28],
[12,16,13,0,12,21,19,23,18,21,11,16,9,20],
[27,25,27,39,0,35,26,30,31,30,19,24,23,27],
[21,21,14,30,16,0,14,20,22,33,10,20,13,24],
[24,26,24,32,25,37,0,30,25,32,19,26,16,27],
[13,21,13,28,21,31,21,0,25,18,9,9,17,23],
[16,23,18,33,20,29,26,26,0,29,12,16,19,22],
[18,15,15,30,21,18,19,33,22,0,14,18,16,19],
[29,32,29,40,32,41,32,42,39,37,0,22,24,32],
[29,29,24,35,27,31,25,42,35,33,29,0,30,27],
[22,32,25,42,28,38,35,34,32,35,27,21,0,34],
[22,23,23,31,24,27,24,28,29,32,19,24,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 149, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,20,17,24,24,32,26,29,33,22,22,20,26],
[21,0,19,27,29,34,34,24,28,39,17,29,21,32],
[31,32,0,30,35,35,36,34,32,35,23,35,29,36],
[34,24,21,0,30,36,34,26,29,36,23,29,21,31],
[27,22,16,21,0,26,25,16,27,28,21,26,19,28],
[27,17,16,15,25,0,26,22,24,30,21,23,18,28],
[19,17,15,17,26,25,0,17,20,30,22,21,19,23],
[25,27,17,25,35,29,34,0,38,38,23,29,24,34],
[22,23,19,22,24,27,31,13,0,30,27,27,15,25],
[18,12,16,15,23,21,21,13,21,0,13,18,11,28],
[29,34,28,28,30,30,29,28,24,38,0,32,22,29],
[29,22,16,22,25,28,30,22,24,33,19,0,22,31],
[31,30,22,30,32,33,32,27,36,40,29,29,0,36],
[25,19,15,20,23,23,28,17,26,23,22,20,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 150, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,29,33,27,33,37,20,21,23,29,10,28,26],
[25,0,34,28,40,24,33,15,27,26,31,18,31,39],
[22,17,0,33,21,18,22,17,32,16,28,15,14,16],
[18,23,18,0,18,30,18,29,20,17,22,12,23,23],
[24,11,30,33,0,27,24,26,26,19,23,11,22,27],
[18,27,33,21,24,0,22,29,27,10,16,16,29,21],
[14,18,29,33,27,29,0,20,21,17,29,10,22,18],
[31,36,34,22,25,22,31,0,23,22,19,19,23,30],
[30,24,19,31,25,24,30,28,0,16,29,25,24,24],
[28,25,35,34,32,41,34,29,35,0,38,32,34,33],
[22,20,23,29,28,35,22,32,22,13,0,12,28,19],
[41,33,36,39,40,35,41,32,26,19,39,0,22,35],
[23,20,37,28,29,22,29,28,27,17,23,29,0,28],
[25,12,35,28,24,30,33,21,27,18,32,16,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 151, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,31,20,16,24,19,24,32,19,11,30,29,24],
[23,0,31,21,24,24,25,23,32,18,18,31,33,36],
[20,20,0,20,20,20,15,24,24,26,16,31,23,25],
[31,30,31,0,24,33,16,28,23,25,18,23,32,24],
[35,27,31,27,0,28,23,27,26,31,22,29,36,28],
[27,27,31,18,23,0,17,28,25,20,23,24,33,26],
[32,26,36,35,28,34,0,22,33,27,28,33,35,37],
[27,28,27,23,24,23,29,0,30,18,20,29,29,33],
[19,19,27,28,25,26,18,21,0,23,18,27,33,31],
[32,33,25,26,20,31,24,33,28,0,25,23,35,30],
[40,33,35,33,29,28,23,31,33,26,0,31,43,29],
[21,20,20,28,22,27,18,22,24,28,20,0,29,31],
[22,18,28,19,15,18,16,22,18,16,8,22,0,24],
[27,15,26,27,23,25,14,18,20,21,22,20,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 152, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,26,15,25,27,20,17,23,26,23,25,19,25],
[29,0,37,19,30,35,26,23,29,28,26,33,25,28],
[25,14,0,12,21,23,17,10,26,25,31,26,21,26],
[36,32,39,0,32,31,35,25,30,36,31,35,31,33],
[26,21,30,19,0,21,29,25,27,24,32,25,22,23],
[24,16,28,20,30,0,21,19,27,25,26,30,20,21],
[31,25,34,16,22,30,0,21,23,29,30,30,29,27],
[34,28,41,26,26,32,30,0,23,33,34,33,31,31],
[28,22,25,21,24,24,28,28,0,30,26,22,23,24],
[25,23,26,15,27,26,22,18,21,0,26,31,24,28],
[28,25,20,20,19,25,21,17,25,25,0,27,26,26],
[26,18,25,16,26,21,21,18,29,20,24,0,17,23],
[32,26,30,20,29,31,22,20,28,27,25,34,0,24],
[26,23,25,18,28,30,24,20,27,23,25,28,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 153, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,24,18,18,28,23,18,27,21,35,27,27,24],
[21,0,27,23,28,40,32,32,37,30,36,29,36,21],
[27,24,0,26,24,23,23,21,37,34,28,22,16,27],
[33,28,25,0,34,26,30,25,35,39,34,29,30,31],
[33,23,27,17,0,27,24,30,32,29,35,27,38,24],
[23,11,28,25,24,0,19,19,37,31,30,30,30,22],
[28,19,28,21,27,32,0,26,37,31,35,34,31,20],
[33,19,30,26,21,32,25,0,40,32,34,28,23,27],
[24,14,14,16,19,14,14,11,0,22,20,14,21,24],
[30,21,17,12,22,20,20,19,29,0,28,23,25,24],
[16,15,23,17,16,21,16,17,31,23,0,17,23,27],
[24,22,29,22,24,21,17,23,37,28,34,0,34,24],
[24,15,35,21,13,21,20,28,30,26,28,17,0,27],
[27,30,24,20,27,29,31,24,27,27,24,27,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 154, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,36,26,29,23,29,22,32,31,25,24,38,28],
[19,0,27,15,24,18,25,20,26,28,25,15,26,29],
[15,24,0,15,21,10,17,20,26,23,20,16,24,28],
[25,36,36,0,31,23,32,24,34,34,32,21,36,40],
[22,27,30,20,0,23,19,25,27,27,28,23,30,31],
[28,33,41,28,28,0,27,28,32,35,36,21,36,35],
[22,26,34,19,32,24,0,23,32,27,23,27,32,28],
[29,31,31,27,26,23,28,0,30,23,32,25,29,32],
[19,25,25,17,24,19,19,21,0,19,20,20,22,21],
[20,23,28,17,24,16,24,28,32,0,28,24,37,26],
[26,26,31,19,23,15,28,19,31,23,0,22,27,26],
[27,36,35,30,28,30,24,26,31,27,29,0,33,35],
[13,25,27,15,21,15,19,22,29,14,24,18,0,30],
[23,22,23,11,20,16,23,19,30,25,25,16,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 155, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,30,29,30,26,29,28,25,23,31,30,28,29],
[22,0,28,24,29,23,29,25,25,22,27,29,25,21],
[21,23,0,21,24,22,21,27,21,22,25,25,33,24],
[22,27,30,0,27,25,25,26,23,25,27,23,30,23],
[21,22,27,24,0,19,26,28,28,21,25,32,32,23],
[25,28,29,26,32,0,26,29,25,22,27,31,28,24],
[22,22,30,26,25,25,0,29,25,27,28,29,31,25],
[23,26,24,25,23,22,22,0,21,23,24,26,27,25],
[26,26,30,28,23,26,26,30,0,26,26,32,26,27],
[28,29,29,26,30,29,24,28,25,0,29,28,30,30],
[20,24,26,24,26,24,23,27,25,22,0,26,29,23],
[21,22,26,28,19,20,22,25,19,23,25,0,26,23],
[23,26,18,21,19,23,20,24,25,21,22,25,0,23],
[22,30,27,28,28,27,26,26,24,21,28,28,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 156, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,28,32,24,34,27,34,31,29,35,27,27,24],
[24,0,31,34,20,31,34,31,31,23,25,29,18,33],
[23,20,0,25,24,25,25,27,26,26,31,23,24,31],
[19,17,26,0,17,25,29,19,26,20,23,18,20,28],
[27,31,27,34,0,26,31,28,30,30,28,23,28,27],
[17,20,26,26,25,0,23,23,28,21,24,22,17,28],
[24,17,26,22,20,28,0,26,23,28,26,23,32,23],
[17,20,24,32,23,28,25,0,26,17,26,22,27,28],
[20,20,25,25,21,23,28,25,0,22,19,19,17,24],
[22,28,25,31,21,30,23,34,29,0,29,27,30,19],
[16,26,20,28,23,27,25,25,32,22,0,25,24,23],
[24,22,28,33,28,29,28,29,32,24,26,0,28,24],
[24,33,27,31,23,34,19,24,34,21,27,23,0,31],
[27,18,20,23,24,23,28,23,27,32,28,27,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 157, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,22,22,21,28,19,27,24,25,32,23,34],
[23,0,29,29,31,34,30,24,19,25,34,26,30,29],
[25,22,0,28,18,20,28,16,19,30,17,32,24,19],
[29,22,23,0,20,20,22,23,29,25,34,31,23,23],
[29,20,33,31,0,28,43,27,34,33,34,29,37,28],
[30,17,31,31,23,0,27,29,24,19,34,31,17,18],
[23,21,23,29,8,24,0,23,16,13,28,20,7,17],
[32,27,35,28,24,22,28,0,18,19,32,33,28,30],
[24,32,32,22,17,27,35,33,0,39,27,37,29,19],
[27,26,21,26,18,32,38,32,12,0,21,32,32,17],
[26,17,34,17,17,17,23,19,24,30,0,30,25,33],
[19,25,19,20,22,20,31,18,14,19,21,0,22,15],
[28,21,27,28,14,34,44,23,22,19,26,29,0,17],
[17,22,32,28,23,33,34,21,32,34,18,36,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 158, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,31,28,21,22,25,24,19,29,28,28,30,23],
[27,0,31,26,22,23,25,24,22,32,25,23,29,28],
[20,20,0,21,18,16,21,25,16,22,20,20,23,25],
[23,25,30,0,23,19,21,33,22,26,29,17,26,29],
[30,29,33,28,0,27,24,29,26,32,29,25,31,36],
[29,28,35,32,24,0,29,30,29,28,28,26,28,28],
[26,26,30,30,27,22,0,29,28,29,25,32,31,27],
[27,27,26,18,22,21,22,0,21,24,23,25,27,24],
[32,29,35,29,25,22,23,30,0,26,31,31,36,34],
[22,19,29,25,19,23,22,27,25,0,22,23,29,25],
[23,26,31,22,22,23,26,28,20,29,0,23,31,28],
[23,28,31,34,26,25,19,26,20,28,28,0,30,24],
[21,22,28,25,20,23,20,24,15,22,20,21,0,23],
[28,23,26,22,15,23,24,27,17,26,23,27,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 159, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,31,28,29,33,27,32,24,29,22,22,30,25],
[22,0,27,24,26,28,20,27,23,27,22,22,26,23],
[20,24,0,23,22,23,19,22,19,24,25,22,27,27],
[23,27,28,0,25,26,28,34,27,31,25,26,32,30],
[22,25,29,26,0,27,22,32,23,26,25,25,29,27],
[18,23,28,25,24,0,19,26,22,25,19,25,22,28],
[24,31,32,23,29,32,0,32,27,29,23,20,27,30],
[19,24,29,17,19,25,19,0,18,24,22,19,24,27],
[27,28,32,24,28,29,24,33,0,24,26,26,33,28],
[22,24,27,20,25,26,22,27,27,0,22,20,26,23],
[29,29,26,26,26,32,28,29,25,29,0,26,29,31],
[29,29,29,25,26,26,31,32,25,31,25,0,35,28],
[21,25,24,19,22,29,24,27,18,25,22,16,0,22],
[26,28,24,21,24,23,21,24,23,28,20,23,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 160, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,20,19,22,27,16,15,26,22,21,19,23,19],
[31,0,25,27,24,31,22,26,34,26,24,30,24,26],
[31,26,0,24,25,27,28,23,30,27,25,30,23,24],
[32,24,27,0,24,29,20,22,34,30,27,28,27,21],
[29,27,26,27,0,32,24,22,33,28,27,33,25,28],
[24,20,24,22,19,0,18,28,27,24,19,21,18,21],
[35,29,23,31,27,33,0,22,30,27,24,28,22,26],
[36,25,28,29,29,23,29,0,27,26,27,30,26,25],
[25,17,21,17,18,24,21,24,0,24,22,24,17,23],
[29,25,24,21,23,27,24,25,27,0,24,24,24,22],
[30,27,26,24,24,32,27,24,29,27,0,28,22,29],
[32,21,21,23,18,30,23,21,27,27,23,0,23,23],
[28,27,28,24,26,33,29,25,34,27,29,28,0,29],
[32,25,27,30,23,30,25,26,28,29,22,28,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 161, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,17,18,18,19,17,17,9,23,23,27,12,28,18],
[34,0,16,22,7,11,9,24,17,19,24,14,25,17],
[33,35,0,31,26,33,31,26,36,30,37,28,32,25],
[33,29,20,0,15,18,26,21,20,29,27,19,22,21],
[32,44,25,36,0,34,31,32,36,36,34,28,34,24],
[34,40,18,33,17,0,22,24,32,34,35,21,32,26],
[34,42,20,25,20,29,0,28,36,32,27,16,26,26],
[42,27,25,30,19,27,23,0,31,28,32,25,29,28],
[28,34,15,31,15,19,15,20,0,20,30,19,29,12],
[28,32,21,22,15,17,19,23,31,0,28,16,29,22],
[24,27,14,24,17,16,24,19,21,23,0,21,25,21],
[39,37,23,32,23,30,35,26,32,35,30,0,32,22],
[23,26,19,29,17,19,25,22,22,22,26,19,0,20],
[33,34,26,30,27,25,25,23,39,29,30,29,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 162, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,31,30,31,23,31,35,27,33,30,28,41,36],
[18,0,30,27,26,23,35,33,24,28,27,23,30,30],
[20,21,0,25,17,24,26,22,21,25,28,14,23,26],
[21,24,26,0,22,29,27,28,26,28,27,24,29,31],
[20,25,34,29,0,26,34,22,27,25,33,21,27,33],
[28,28,27,22,25,0,29,35,25,31,26,21,29,28],
[20,16,25,24,17,22,0,23,25,24,20,20,18,26],
[16,18,29,23,29,16,28,0,25,23,28,20,22,30],
[24,27,30,25,24,26,26,26,0,24,30,21,29,27],
[18,23,26,23,26,20,27,28,27,0,22,26,23,25],
[21,24,23,24,18,25,31,23,21,29,0,22,23,20],
[23,28,37,27,30,30,31,31,30,25,29,0,31,29],
[10,21,28,22,24,22,33,29,22,28,28,20,0,30],
[15,21,25,20,18,23,25,21,24,26,31,22,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 163, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,33,25,37,37,29,22,30,39,33,38,25,30],
[7,0,18,16,20,27,16,21,21,23,16,31,18,19],
[18,33,0,26,22,28,23,16,23,27,21,27,21,21],
[26,35,25,0,31,38,31,30,25,28,29,36,28,25],
[14,31,29,20,0,22,32,12,16,21,22,27,21,18],
[14,24,23,13,29,0,20,11,20,17,10,29,16,14],
[22,35,28,20,19,31,0,22,12,19,31,26,22,22],
[29,30,35,21,39,40,29,0,26,32,37,31,27,25],
[21,30,28,26,35,31,39,25,0,31,24,35,30,25],
[12,28,24,23,30,34,32,19,20,0,21,27,25,18],
[18,35,30,22,29,41,20,14,27,30,0,24,22,28],
[13,20,24,15,24,22,25,20,16,24,27,0,18,17],
[26,33,30,23,30,35,29,24,21,26,29,33,0,25],
[21,32,30,26,33,37,29,26,26,33,23,34,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 164, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,30,20,25,24,18,18,30,23,30,23,31,22],
[30,0,31,26,27,24,26,25,29,25,28,25,29,26],
[21,20,0,18,23,24,23,21,25,24,31,23,29,25],
[31,25,33,0,26,23,29,30,29,26,38,30,31,25],
[26,24,28,25,0,26,28,23,28,27,31,29,31,27],
[27,27,27,28,25,0,25,23,35,31,38,31,30,26],
[33,25,28,22,23,26,0,25,33,27,36,30,31,31],
[33,26,30,21,28,28,26,0,33,28,40,33,34,36],
[21,22,26,22,23,16,18,18,0,26,32,20,24,25],
[28,26,27,25,24,20,24,23,25,0,34,28,25,21],
[21,23,20,13,20,13,15,11,19,17,0,20,18,22],
[28,26,28,21,22,20,21,18,31,23,31,0,31,30],
[20,22,22,20,20,21,20,17,27,26,33,20,0,23],
[29,25,26,26,24,25,20,15,26,30,29,21,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 165, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,25,22,26,24,23,23,27,26,22,26,21,26],
[21,0,25,18,20,17,14,19,22,21,21,23,20,20],
[26,26,0,18,19,17,21,19,28,23,20,26,18,19],
[29,33,33,0,21,23,25,27,27,23,30,31,27,22],
[25,31,32,30,0,19,24,26,27,27,28,36,30,23],
[27,34,34,28,32,0,24,24,31,33,28,31,29,28],
[28,37,30,26,27,27,0,25,30,24,26,30,23,28],
[28,32,32,24,25,27,26,0,30,31,26,30,24,27],
[24,29,23,24,24,20,21,21,0,24,23,24,23,23],
[25,30,28,28,24,18,27,20,27,0,27,28,25,25],
[29,30,31,21,23,23,25,25,28,24,0,27,23,24],
[25,28,25,20,15,20,21,21,27,23,24,0,22,25],
[30,31,33,24,21,22,28,27,28,26,28,29,0,27],
[25,31,32,29,28,23,23,24,28,26,27,26,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 166, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,30,24,30,37,37,37,30,20,37,23,28,21],
[25,0,28,18,38,33,38,26,25,10,17,10,15,22],
[21,23,0,24,43,31,51,26,23,25,29,22,28,28],
[27,33,27,0,28,27,27,27,29,21,27,21,21,35],
[21,13,8,23,0,27,21,27,16,21,25,15,21,21],
[14,18,20,24,24,0,37,21,30,9,20,16,13,21],
[14,13,0,24,30,14,0,21,18,7,24,10,13,21],
[14,25,25,24,24,30,30,0,19,19,24,16,15,16],
[21,26,28,22,35,21,33,32,0,20,26,27,19,26],
[31,41,26,30,30,42,44,32,31,0,27,22,27,28],
[14,34,22,24,26,31,27,27,25,24,0,10,18,22],
[28,41,29,30,36,35,41,35,24,29,41,0,32,35],
[23,36,23,30,30,38,38,36,32,24,33,19,0,44],
[30,29,23,16,30,30,30,35,25,23,29,16,7,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 167, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,25,33,27,24,20,23,26,20,27,22,26,22],
[26,0,29,31,30,29,24,25,22,22,24,27,30,21],
[26,22,0,28,24,28,22,23,22,23,21,27,29,22],
[18,20,23,0,16,22,17,18,21,17,24,16,27,19],
[24,21,27,35,0,28,26,26,24,21,26,28,23,22],
[27,22,23,29,23,0,24,22,24,26,23,30,27,23],
[31,27,29,34,25,27,0,22,24,21,23,29,27,25],
[28,26,28,33,25,29,29,0,25,20,25,29,28,26],
[25,29,29,30,27,27,27,26,0,28,28,27,30,25],
[31,29,28,34,30,25,30,31,23,0,22,32,32,24],
[24,27,30,27,25,28,28,26,23,29,0,27,27,25],
[29,24,24,35,23,21,22,22,24,19,24,0,26,19],
[25,21,22,24,28,24,24,23,21,19,24,25,0,18],
[29,30,29,32,29,28,26,25,26,27,26,32,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 168, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,26,25,20,23,26,23,32,22,30,28,32,29],
[18,0,27,18,20,23,26,19,31,16,23,20,23,28],
[25,24,0,22,25,23,28,27,28,17,26,23,26,31],
[26,33,29,0,20,23,28,24,32,16,27,24,27,31],
[31,31,26,31,0,23,33,30,34,26,27,30,37,31],
[28,28,28,28,28,0,28,24,35,20,25,24,28,33],
[25,25,23,23,18,23,0,23,26,15,25,27,30,28],
[28,32,24,27,21,27,28,0,27,22,27,22,26,30],
[19,20,23,19,17,16,25,24,0,16,24,18,25,27],
[29,35,34,35,25,31,36,29,35,0,31,31,38,31],
[21,28,25,24,24,26,26,24,27,20,0,26,26,28],
[23,31,28,27,21,27,24,29,33,20,25,0,29,29],
[19,28,25,24,14,23,21,25,26,13,25,22,0,28],
[22,23,20,20,20,18,23,21,24,20,23,22,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 169, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,29,21,28,25,24,26,22,24,18,24,17,27],
[23,0,28,21,24,18,24,24,24,22,19,26,15,25],
[22,23,0,23,26,21,27,27,25,27,23,24,23,26],
[30,30,28,0,32,27,32,32,31,30,17,22,24,28],
[23,27,25,19,0,20,27,26,27,24,12,21,16,22],
[26,33,30,24,31,0,27,27,25,24,17,25,19,27],
[27,27,24,19,24,24,0,26,25,22,21,27,18,23],
[25,27,24,19,25,24,25,0,31,23,18,25,21,22],
[29,27,26,20,24,26,26,20,0,27,17,24,18,19],
[27,29,24,21,27,27,29,28,24,0,21,27,22,26],
[33,32,28,34,39,34,30,33,34,30,0,25,27,33],
[27,25,27,29,30,26,24,26,27,24,26,0,21,25],
[34,36,28,27,35,32,33,30,33,29,24,30,0,30],
[24,26,25,23,29,24,28,29,32,25,18,26,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 170, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,40,9,34,34,27,9,40,40,36,25,0,25],
[26,0,26,24,38,25,16,26,17,15,51,11,24,26],
[11,25,0,0,34,34,25,0,25,40,34,11,11,27],
[42,27,51,0,51,36,27,51,42,40,51,25,40,42],
[17,13,17,0,0,36,27,2,17,26,36,11,0,2],
[17,26,17,15,15,0,28,17,15,26,28,26,15,17],
[24,35,26,24,24,23,0,24,15,26,37,26,24,26],
[42,25,51,0,49,34,27,0,40,40,51,25,26,42],
[11,34,26,9,34,36,36,11,0,40,36,11,9,25],
[11,36,11,11,25,25,25,11,11,0,36,22,11,11],
[15,0,17,0,15,23,14,0,15,15,0,0,0,17],
[26,40,40,26,40,25,25,26,40,29,51,0,24,40],
[51,27,40,11,51,36,27,25,42,40,51,27,0,40],
[26,25,24,9,49,34,25,9,26,40,34,11,11,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 171, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,26,26,29,21,28,27,31,24,29,25,34,30],
[24,0,20,26,28,20,26,25,26,22,31,27,34,30],
[25,31,0,24,28,25,29,32,27,25,32,31,39,28],
[25,25,27,0,35,26,30,30,28,20,34,28,34,30],
[22,23,23,16,0,19,25,22,27,20,26,27,29,22],
[30,31,26,25,32,0,29,33,37,32,36,34,36,29],
[23,25,22,21,26,22,0,29,26,22,30,25,34,26],
[24,26,19,21,29,18,22,0,31,19,29,26,33,22],
[20,25,24,23,24,14,25,20,0,20,26,24,31,24],
[27,29,26,31,31,19,29,32,31,0,35,29,39,30],
[22,20,19,17,25,15,21,22,25,16,0,24,26,22],
[26,24,20,23,24,17,26,25,27,22,27,0,32,26],
[17,17,12,17,22,15,17,18,20,12,25,19,0,22],
[21,21,23,21,29,22,25,29,27,21,29,25,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 172, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,25,9,29,22,18,17,18,30,22,25,25,31],
[33,0,12,21,16,31,12,17,9,25,7,26,16,27],
[26,39,0,21,28,39,19,17,10,47,39,33,33,44],
[42,30,30,0,34,43,18,16,27,37,29,25,32,43],
[22,35,23,17,0,35,22,22,19,43,30,33,29,40],
[29,20,12,8,16,0,16,21,12,23,7,17,27,32],
[33,39,32,33,29,35,0,30,28,51,32,33,19,38],
[34,34,34,35,29,30,21,0,18,34,29,25,30,34],
[33,42,41,24,32,39,23,33,0,46,41,33,32,41],
[21,26,4,14,8,28,0,17,5,0,13,26,12,22],
[29,44,12,22,21,44,19,22,10,38,0,31,29,44],
[26,25,18,26,18,34,18,26,18,25,20,0,28,25],
[26,35,18,19,22,24,32,21,19,39,22,23,0,32],
[20,24,7,8,11,19,13,17,10,29,7,26,19,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 173, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,33,37,30,34,31,28,27,30,34,31,24,27],
[27,0,30,35,24,27,27,24,23,31,24,25,25,28],
[18,21,0,27,21,26,22,20,16,22,24,23,21,24],
[14,16,24,0,13,25,24,21,12,22,17,26,15,22],
[21,27,30,38,0,32,33,25,26,31,30,26,25,29],
[17,24,25,26,19,0,24,24,20,25,24,28,19,27],
[20,24,29,27,18,27,0,18,23,30,25,26,22,29],
[23,27,31,30,26,27,33,0,22,29,35,29,28,26],
[24,28,35,39,25,31,28,29,0,37,38,27,28,36],
[21,20,29,29,20,26,21,22,14,0,21,21,10,27],
[17,27,27,34,21,27,26,16,13,30,0,20,24,22],
[20,26,28,25,25,23,25,22,24,30,31,0,21,26],
[27,26,30,36,26,32,29,23,23,41,27,30,0,30],
[24,23,27,29,22,24,22,25,15,24,29,25,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 174, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,34,33,28,28,23,24,32,28,31,22,38,33],
[20,0,25,30,16,21,20,23,40,20,19,21,23,28],
[17,26,0,35,20,18,19,30,30,23,27,21,23,31],
[18,21,16,0,5,5,10,23,30,6,26,10,12,20],
[23,35,31,46,0,28,33,44,35,26,32,24,34,34],
[23,30,33,46,23,0,29,34,38,30,30,17,33,28],
[28,31,32,41,18,22,0,32,32,22,29,27,30,33],
[27,28,21,28,7,17,19,0,33,21,21,17,22,31],
[19,11,21,21,16,13,19,18,0,12,11,21,26,38],
[23,31,28,45,25,21,29,30,39,0,25,20,33,32],
[20,32,24,25,19,21,22,30,40,26,0,31,29,34],
[29,30,30,41,27,34,24,34,30,31,20,0,33,18],
[13,28,28,39,17,18,21,29,25,18,22,18,0,20],
[18,23,20,31,17,23,18,20,13,19,17,33,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 175, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,26,25,32,29,27,27,28,30,31,23,23,30],
[23,0,29,27,24,30,27,23,26,30,30,30,28,25],
[25,22,0,30,26,34,31,28,27,26,29,25,26,22],
[26,24,21,0,25,32,30,33,31,34,31,30,31,25],
[19,27,25,26,0,32,26,16,22,28,28,29,16,18],
[22,21,17,19,19,0,18,14,28,21,27,25,18,21],
[24,24,20,21,25,33,0,25,22,25,28,28,24,19],
[24,28,23,18,35,37,26,0,30,31,29,28,23,28],
[23,25,24,20,29,23,29,21,0,28,24,22,24,20],
[21,21,25,17,23,30,26,20,23,0,24,25,20,19],
[20,21,22,20,23,24,23,22,27,27,0,24,19,18],
[28,21,26,21,22,26,23,23,29,26,27,0,28,27],
[28,23,25,20,35,33,27,28,27,31,32,23,0,29],
[21,26,29,26,33,30,32,23,31,32,33,24,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 176, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,22,24,32,23,27,23,29,22,23,28,35,26],
[14,0,24,20,30,22,23,18,28,18,18,23,24,16],
[29,27,0,26,32,24,27,23,35,28,23,32,32,21],
[27,31,25,0,34,19,27,28,36,26,26,25,33,19],
[19,21,19,17,0,17,20,18,27,20,13,23,24,17],
[28,29,27,32,34,0,30,27,38,24,24,24,37,26],
[24,28,24,24,31,21,0,29,29,19,16,26,26,19],
[28,33,28,23,33,24,22,0,35,28,24,26,31,20],
[22,23,16,15,24,13,22,16,0,14,16,14,27,16],
[29,33,23,25,31,27,32,23,37,0,28,27,39,19],
[28,33,28,25,38,27,35,27,35,23,0,34,33,22],
[23,28,19,26,28,27,25,25,37,24,17,0,33,19],
[16,27,19,18,27,14,25,20,24,12,18,18,0,12],
[25,35,30,32,34,25,32,31,35,32,29,32,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 177, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,23,22,16,22,19,34,32,17,30,20,13,10],
[20,0,23,29,14,23,16,29,29,19,24,16,19,10],
[28,28,0,23,14,15,15,31,29,20,16,22,18,11],
[29,22,28,0,30,31,17,35,24,27,30,26,33,28],
[35,37,37,21,0,34,23,39,35,20,35,33,22,19],
[29,28,36,20,17,0,26,33,33,31,28,28,19,18],
[32,35,36,34,28,25,0,38,38,23,35,26,22,28],
[17,22,20,16,12,18,13,0,14,18,20,20,14,10],
[19,22,22,27,16,18,13,37,0,19,24,28,20,13],
[34,32,31,24,31,20,28,33,32,0,29,28,15,19],
[21,27,35,21,16,23,16,31,27,22,0,17,18,9],
[31,35,29,25,18,23,25,31,23,23,34,0,20,2],
[38,32,33,18,29,32,29,37,31,36,33,31,0,28],
[41,41,40,23,32,33,23,41,38,32,42,49,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 178, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,28,28,25,27,34,27,34,24,29,26,30,29],
[20,0,26,20,22,26,31,18,25,20,20,18,24,22],
[23,25,0,21,16,28,31,21,21,20,22,17,25,22],
[23,31,30,0,27,29,30,22,19,23,22,25,24,22],
[26,29,35,24,0,30,32,23,25,22,28,17,26,24],
[24,25,23,22,21,0,32,22,22,19,23,21,23,22],
[17,20,20,21,19,19,0,16,21,18,21,21,23,17],
[24,33,30,29,28,29,35,0,28,30,30,28,28,30],
[17,26,30,32,26,29,30,23,0,22,28,23,25,22],
[27,31,31,28,29,32,33,21,29,0,23,30,28,27],
[22,31,29,29,23,28,30,21,23,28,0,23,25,24],
[25,33,34,26,34,30,30,23,28,21,28,0,24,27],
[21,27,26,27,25,28,28,23,26,23,26,27,0,21],
[22,29,29,29,27,29,34,21,29,24,27,24,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 179, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,25,29,27,31,35,33,31,32,32,29,32,26],
[20,0,24,21,23,26,33,28,23,28,27,23,21,26],
[26,27,0,26,26,32,34,32,31,30,28,27,25,30],
[22,30,25,0,28,28,32,34,31,30,30,31,25,29],
[24,28,25,23,0,26,28,28,28,25,22,23,28,23],
[20,25,19,23,25,0,30,29,28,26,22,23,19,22],
[16,18,17,19,23,21,0,29,24,22,18,18,19,23],
[18,23,19,17,23,22,22,0,21,27,20,16,22,25],
[20,28,20,20,23,23,27,30,0,28,23,20,22,22],
[19,23,21,21,26,25,29,24,23,0,24,27,27,21],
[19,24,23,21,29,29,33,31,28,27,0,25,22,26],
[22,28,24,20,28,28,33,35,31,24,26,0,24,32],
[19,30,26,26,23,32,32,29,29,24,29,27,0,26],
[25,25,21,22,28,29,28,26,29,30,25,19,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 180, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,22,24,27,26,27,20,22,21,26,24,27,31,21],
[29,0,23,28,30,29,23,22,27,27,29,30,31,25],
[27,28,0,25,32,28,29,33,29,29,33,30,31,24],
[24,23,26,0,25,26,21,26,25,23,27,28,30,21],
[25,21,19,26,0,31,15,20,19,26,23,25,22,18],
[24,22,23,25,20,0,18,27,19,24,27,29,25,19],
[31,28,22,30,36,33,0,29,25,26,29,29,34,27],
[29,29,18,25,31,24,22,0,24,22,25,25,27,23],
[30,24,22,26,32,32,26,27,0,27,28,28,31,26],
[25,24,22,28,25,27,25,29,24,0,28,25,26,23],
[27,22,18,24,28,24,22,26,23,23,0,25,27,21],
[24,21,21,23,26,22,22,26,23,26,26,0,23,24],
[20,20,20,21,29,26,17,24,20,25,24,28,0,13],
[30,26,27,30,33,32,24,28,25,28,30,27,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 181, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,34,30,28,35,36,33,31,24,32,37,28,29],
[19,0,25,29,23,28,31,34,37,23,28,28,21,25],
[17,26,0,18,19,25,22,26,25,25,18,27,18,24],
[21,22,33,0,20,24,23,32,33,24,31,31,25,23],
[23,28,32,31,0,29,29,27,36,25,32,27,22,28],
[16,23,26,27,22,0,28,28,28,24,32,27,23,23],
[15,20,29,28,22,23,0,28,28,25,25,25,20,24],
[18,17,25,19,24,23,23,0,30,17,20,27,18,24],
[20,14,26,18,15,23,23,21,0,11,22,24,14,19],
[27,28,26,27,26,27,26,34,40,0,27,32,22,30],
[19,23,33,20,19,19,26,31,29,24,0,30,16,21],
[14,23,24,20,24,24,26,24,27,19,21,0,26,17],
[23,30,33,26,29,28,31,33,37,29,35,25,0,26],
[22,26,27,28,23,28,27,27,32,21,30,34,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 182, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,17,23,29,28,32,21,27,34,32,32,23,32],
[17,0,11,23,34,28,28,21,23,34,34,17,23,38],
[34,40,0,39,39,38,44,27,27,45,38,21,33,38],
[28,28,12,0,23,12,39,10,27,22,16,27,11,16],
[22,17,12,28,0,23,33,16,39,27,22,21,17,27],
[23,23,13,39,28,0,45,17,28,22,17,28,17,28],
[19,23,7,12,18,6,0,11,16,13,10,22,1,11],
[30,30,24,41,35,34,40,0,40,35,29,29,18,39],
[24,28,24,24,12,23,35,11,0,18,27,27,18,22],
[17,17,6,29,24,29,38,16,33,0,22,21,28,33],
[19,17,13,35,29,34,41,22,24,29,0,18,29,33],
[19,34,30,24,30,23,29,22,24,30,33,0,24,27],
[28,28,18,40,34,34,50,33,33,23,22,27,0,38],
[19,13,13,35,24,23,40,12,29,18,18,24,13,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 183, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,25,28,27,23,26,25,29,23,27,30,29,25],
[23,0,25,24,21,24,27,20,28,25,23,27,28,25],
[26,26,0,30,24,23,27,23,29,24,24,27,32,29],
[23,27,21,0,23,22,23,22,25,20,21,23,28,26],
[24,30,27,28,0,22,27,23,28,26,31,32,28,29],
[28,27,28,29,29,0,25,27,29,23,28,32,31,31],
[25,24,24,28,24,26,0,22,29,23,27,30,25,25],
[26,31,28,29,28,24,29,0,30,26,30,32,34,31],
[22,23,22,26,23,22,22,21,0,21,28,27,27,24],
[28,26,27,31,25,28,28,25,30,0,26,29,33,30],
[24,28,27,30,20,23,24,21,23,25,0,29,27,27],
[21,24,24,28,19,19,21,19,24,22,22,0,25,23],
[22,23,19,23,23,20,26,17,24,18,24,26,0,25],
[26,26,22,25,22,20,26,20,27,21,24,28,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 184, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,28,25,24,22,26,27,23,25,24,26,26,25],
[23,0,20,17,21,19,20,28,21,22,21,25,22,15],
[23,31,0,24,20,30,27,26,23,32,22,28,23,22],
[26,34,27,0,22,24,31,26,23,32,27,26,27,19],
[27,30,31,29,0,28,23,25,24,31,28,33,25,21],
[29,32,21,27,23,0,25,27,20,27,26,26,26,23],
[25,31,24,20,28,26,0,27,25,26,25,33,25,29],
[24,23,25,25,26,24,24,0,24,23,23,32,26,22],
[28,30,28,28,27,31,26,27,0,28,26,29,27,24],
[26,29,19,19,20,24,25,28,23,0,29,32,26,22],
[27,30,29,24,23,25,26,28,25,22,0,30,20,21],
[25,26,23,25,18,25,18,19,22,19,21,0,19,21],
[25,29,28,24,26,25,26,25,24,25,31,32,0,24],
[26,36,29,32,30,28,22,29,27,29,30,30,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 185, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,30,22,22,24,29,33,28,29,25,33,34,22],
[25,0,24,24,23,32,28,28,22,24,21,28,28,22],
[21,27,0,25,21,29,21,30,22,29,25,21,27,21],
[29,27,26,0,27,36,31,31,23,26,34,30,34,27],
[29,28,30,24,0,26,29,30,22,29,29,30,37,22],
[27,19,22,15,25,0,26,26,23,20,21,23,29,12],
[22,23,30,20,22,25,0,25,24,23,28,28,23,20],
[18,23,21,20,21,25,26,0,18,21,21,27,24,17],
[23,29,29,28,29,28,27,33,0,25,27,29,33,22],
[22,27,22,25,22,31,28,30,26,0,32,28,26,23],
[26,30,26,17,22,30,23,30,24,19,0,26,28,16],
[18,23,30,21,21,28,23,24,22,23,25,0,24,13],
[17,23,24,17,14,22,28,27,18,25,23,27,0,20],
[29,29,30,24,29,39,31,34,29,28,35,38,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 186, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,32,34,23,29,27,29,32,28,31,23,32,29],
[21,0,27,32,29,20,33,30,30,29,23,23,25,32],
[19,24,0,28,24,18,31,27,28,25,25,22,21,25],
[17,19,23,0,16,23,20,20,21,24,20,16,21,27],
[28,22,27,35,0,26,31,33,33,29,26,27,29,25],
[22,31,33,28,25,0,27,25,37,26,29,23,33,28],
[24,18,20,31,20,24,0,29,25,26,24,16,27,30],
[22,21,24,31,18,26,22,0,24,27,23,17,26,28],
[19,21,23,30,18,14,26,27,0,25,17,19,23,29],
[23,22,26,27,22,25,25,24,26,0,27,21,14,28],
[20,28,26,31,25,22,27,28,34,24,0,17,21,30],
[28,28,29,35,24,28,35,34,32,30,34,0,27,31],
[19,26,30,30,22,18,24,25,28,37,30,24,0,29],
[22,19,26,24,26,23,21,23,22,23,21,20,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 187, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,21,27,24,25,29,24,27,22,24,31,27,28],
[24,0,29,24,24,25,29,24,26,23,26,21,24,30],
[30,22,0,22,21,22,30,23,21,18,21,28,23,28],
[24,27,29,0,22,27,30,22,26,21,20,24,23,27],
[27,27,30,29,0,25,29,35,30,29,27,29,27,29],
[26,26,29,24,26,0,31,25,30,21,30,25,23,22],
[22,22,21,21,22,20,0,22,22,22,21,28,21,29],
[27,27,28,29,16,26,29,0,26,25,21,27,26,30],
[24,25,30,25,21,21,29,25,0,21,27,27,23,32],
[29,28,33,30,22,30,29,26,30,0,28,31,24,32],
[27,25,30,31,24,21,30,30,24,23,0,28,23,32],
[20,30,23,27,22,26,23,24,24,20,23,0,25,28],
[24,27,28,28,24,28,30,25,28,27,28,26,0,30],
[23,21,23,24,22,29,22,21,19,19,19,23,21,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 188, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,39,27,27,22,15,26,29,30,41,32,40,39],
[28,0,33,27,38,30,37,27,27,24,31,42,23,47],
[12,18,0,21,22,18,17,13,23,11,33,39,26,29],
[24,24,30,0,22,13,20,11,24,24,26,34,27,42],
[24,13,29,29,0,20,14,19,19,33,27,30,19,37],
[29,21,33,38,31,0,18,24,27,27,33,30,30,30],
[36,14,34,31,37,33,0,24,24,32,39,40,25,37],
[25,24,38,40,32,27,27,0,33,36,29,43,30,43],
[22,24,28,27,32,24,27,18,0,19,17,41,30,35],
[21,27,40,27,18,24,19,15,32,0,28,41,23,37],
[10,20,18,25,24,18,12,22,34,23,0,26,25,30],
[19,9,12,17,21,21,11,8,10,10,25,0,19,18],
[11,28,25,24,32,21,26,21,21,28,26,32,0,36],
[12,4,22,9,14,21,14,8,16,14,21,33,15,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 189, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,20,17,23,27,25,22,32,21,28,24,31,24],
[23,0,15,22,23,28,22,22,33,23,27,19,27,31],
[31,36,0,29,29,26,24,31,34,18,31,28,32,25],
[34,29,22,0,28,27,25,22,26,22,28,26,25,29],
[28,28,22,23,0,28,19,19,32,19,33,19,25,26],
[24,23,25,24,23,0,29,23,34,19,23,23,26,27],
[26,29,27,26,32,22,0,29,38,25,31,26,36,30],
[29,29,20,29,32,28,22,0,30,25,34,22,32,29],
[19,18,17,25,19,17,13,21,0,18,20,12,19,22],
[30,28,33,29,32,32,26,26,33,0,31,23,31,33],
[23,24,20,23,18,28,20,17,31,20,0,17,23,31],
[27,32,23,25,32,28,25,29,39,28,34,0,30,25],
[20,24,19,26,26,25,15,19,32,20,28,21,0,24],
[27,20,26,22,25,24,21,22,29,18,20,26,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 190, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,21,26,25,28,22,17,18,16,21,19,23,24],
[32,0,36,26,26,33,18,37,25,29,30,27,25,25],
[30,15,0,23,23,30,13,25,19,25,25,27,22,19],
[25,25,28,0,23,26,21,24,21,22,25,24,22,27],
[26,25,28,28,0,27,30,25,15,28,19,20,19,29],
[23,18,21,25,24,0,17,23,17,21,20,19,27,22],
[29,33,38,30,21,34,0,30,28,30,30,22,32,36],
[34,14,26,27,26,28,21,0,15,25,27,31,23,22],
[33,26,32,30,36,34,23,36,0,34,29,33,26,32],
[35,22,26,29,23,30,21,26,17,0,25,28,24,22],
[30,21,26,26,32,31,21,24,22,26,0,24,32,27],
[32,24,24,27,31,32,29,20,18,23,27,0,29,28],
[28,26,29,29,32,24,19,28,25,27,19,22,0,29],
[27,26,32,24,22,29,15,29,19,29,24,23,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 191, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,22,21,28,26,31,23,25,24,25,23,22,21],
[22,0,23,31,24,26,31,29,22,25,25,22,22,22],
[29,28,0,27,22,29,32,31,28,30,33,27,27,27],
[30,20,24,0,27,27,27,27,23,29,25,23,25,23],
[23,27,29,24,0,28,29,27,25,22,31,19,21,23],
[25,25,22,24,23,0,26,24,22,25,26,21,27,22],
[20,20,19,24,22,25,0,28,20,23,26,23,20,23],
[28,22,20,24,24,27,23,0,27,26,27,21,24,22],
[26,29,23,28,26,29,31,24,0,26,31,26,21,24],
[27,26,21,22,29,26,28,25,25,0,28,28,21,24],
[26,26,18,26,20,25,25,24,20,23,0,17,25,23],
[28,29,24,28,32,30,28,30,25,23,34,0,24,23],
[29,29,24,26,30,24,31,27,30,30,26,27,0,27],
[30,29,24,28,28,29,28,29,27,27,28,28,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 192, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,23,18,18,21,27,25,23,22,14,22,22,18],
[32,0,29,26,21,29,33,33,27,32,24,26,27,23],
[28,22,0,17,22,23,26,24,21,26,22,26,24,24],
[33,25,34,0,29,27,36,25,26,28,26,29,31,27],
[33,30,29,22,0,27,37,25,26,30,25,33,28,25],
[30,22,28,24,24,0,37,23,25,28,28,30,23,19],
[24,18,25,15,14,14,0,18,16,20,18,21,20,15],
[26,18,27,26,26,28,33,0,26,21,27,28,23,24],
[28,24,30,25,25,26,35,25,0,29,23,19,28,23],
[29,19,25,23,21,23,31,30,22,0,22,22,24,21],
[37,27,29,25,26,23,33,24,28,29,0,31,28,25],
[29,25,25,22,18,21,30,23,32,29,20,0,28,22],
[29,24,27,20,23,28,31,28,23,27,23,23,0,21],
[33,28,27,24,26,32,36,27,28,30,26,29,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 193, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,35,25,32,35,39,26,28,35,32,29,35,35],
[30,0,28,26,33,36,29,30,24,34,28,32,34,32],
[16,23,0,24,26,31,24,25,21,30,26,29,34,35],
[26,25,27,0,34,33,35,26,27,34,30,26,37,31],
[19,18,25,17,0,20,25,25,24,21,16,20,26,21],
[16,15,20,18,31,0,22,27,17,23,21,24,25,20],
[12,22,27,16,26,29,0,26,20,24,20,19,24,26],
[25,21,26,25,26,24,25,0,26,26,28,25,26,30],
[23,27,30,24,27,34,31,25,0,34,28,26,36,32],
[16,17,21,17,30,28,27,25,17,0,18,19,22,22],
[19,23,25,21,35,30,31,23,23,33,0,26,32,22],
[22,19,22,25,31,27,32,26,25,32,25,0,35,27],
[16,17,17,14,25,26,27,25,15,29,19,16,0,24],
[16,19,16,20,30,31,25,21,19,29,29,24,27,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 194, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,24,27,28,28,27,25,20,28,29,30,24,22,29],
[27,0,25,31,26,26,22,21,28,21,21,21,19,25],
[24,26,0,29,30,33,26,26,27,30,24,24,26,30],
[23,20,22,0,22,25,20,25,31,28,22,19,18,25],
[23,25,21,29,0,19,26,19,26,23,23,27,24,26],
[24,25,18,26,32,0,20,24,21,17,21,27,21,25],
[26,29,25,31,25,31,0,24,33,26,30,24,25,26],
[31,30,25,26,32,27,27,0,33,31,23,25,23,27],
[23,23,24,20,25,30,18,18,0,23,19,23,24,21],
[22,30,21,23,28,34,25,20,28,0,20,19,22,27],
[21,30,27,29,28,30,21,28,32,31,0,26,25,24],
[27,30,27,32,24,24,27,26,28,32,25,0,20,25],
[29,32,25,33,27,30,26,28,27,29,26,31,0,31],
[22,26,21,26,25,26,25,24,30,24,27,26,20,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 195, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,28,22,23,22,32,24,25,27,20,30,34,16,22],
[23,0,21,21,14,32,19,30,24,19,17,27,22,20],
[29,30,0,28,26,38,24,33,33,21,28,33,27,26],
[28,30,23,0,21,37,25,37,27,22,28,36,24,24],
[29,37,25,30,0,38,28,36,29,23,24,41,29,23],
[19,19,13,14,13,0,15,26,18,11,14,25,10,17],
[27,32,27,26,23,36,0,37,28,26,29,37,29,27],
[26,21,18,14,15,25,14,0,23,21,24,29,18,22],
[24,27,18,24,22,33,23,28,0,10,18,34,18,16],
[31,32,30,29,28,40,25,30,41,0,30,37,31,28],
[21,34,23,23,27,37,22,27,33,21,0,38,28,28],
[17,24,18,15,10,26,14,22,17,14,13,0,16,16],
[35,29,24,27,22,41,22,33,33,20,23,35,0,22],
[29,31,25,27,28,34,24,29,35,23,23,35,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 196, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,13,19,21,25,20,19,12,10,20,21,22,20],
[30,0,16,30,15,26,20,15,14,23,26,24,20,26],
[38,35,0,20,19,29,19,21,19,16,33,21,26,33],
[32,21,31,0,24,24,19,21,17,18,28,30,21,26],
[30,36,32,27,0,36,31,24,32,14,30,25,33,31],
[26,25,22,27,15,0,23,11,18,20,23,27,25,24],
[31,31,32,32,20,28,0,19,20,20,34,29,28,32],
[32,36,30,30,27,40,32,0,22,18,28,32,30,33],
[39,37,32,34,19,33,31,29,0,27,28,24,30,25],
[41,28,35,33,37,31,31,33,24,0,38,35,31,40],
[31,25,18,23,21,28,17,23,23,13,0,22,26,29],
[30,27,30,21,26,24,22,19,27,16,29,0,22,32],
[29,31,25,30,18,26,23,21,21,20,25,29,0,27],
[31,25,18,25,20,27,19,18,26,11,22,19,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 197, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,22,22,29,22,28,28,30,26,24,31,24,26],
[26,0,25,22,24,23,28,25,28,27,28,30,23,23],
[29,26,0,19,24,23,25,21,27,23,25,28,20,21],
[29,29,32,0,24,23,29,29,25,23,28,30,24,27],
[22,27,27,27,0,21,26,27,25,26,29,26,24,22],
[29,28,28,28,30,0,34,27,30,28,32,30,25,33],
[23,23,26,22,25,17,0,23,21,24,28,27,27,22],
[23,26,30,22,24,24,28,0,21,21,25,26,21,23],
[21,23,24,26,26,21,30,30,0,24,24,28,25,24],
[25,24,28,28,25,23,27,30,27,0,28,30,21,25],
[27,23,26,23,22,19,23,26,27,23,0,31,19,27],
[20,21,23,21,25,21,24,25,23,21,20,0,24,25],
[27,28,31,27,27,26,24,30,26,30,32,27,0,27],
[25,28,30,24,29,18,29,28,27,26,24,26,24,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 198, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,32,27,25,35,21,29,21,23,38,33,35,32],
[16,0,31,13,16,29,19,29,18,13,24,19,18,11],
[19,20,0,16,16,16,16,37,29,16,24,24,29,16],
[24,38,35,0,38,47,37,26,29,34,34,29,21,23],
[26,35,35,13,0,24,31,29,21,20,37,39,31,21],
[16,22,35,4,27,0,21,26,18,15,31,26,18,12],
[30,32,35,14,20,30,0,26,18,33,38,40,32,25],
[22,22,14,25,22,25,25,0,8,22,20,22,22,22],
[30,33,22,22,30,33,33,43,0,19,38,38,32,33],
[28,38,35,17,31,36,18,29,32,0,41,36,25,33],
[13,27,27,17,14,20,13,31,13,10,0,25,24,17],
[18,32,27,22,12,25,11,29,13,15,26,0,20,25],
[16,33,22,30,20,33,19,29,19,26,27,31,0,33],
[19,40,35,28,30,39,26,29,18,18,34,26,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 199, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,26,23,30,32,35,31,33,29,29,29,27,26],
[20,0,28,25,27,27,28,24,23,29,23,32,25,21],
[25,23,0,28,25,29,24,27,26,25,27,27,31,20],
[28,26,23,0,24,23,29,24,20,24,27,28,23,24],
[21,24,26,27,0,27,32,27,24,25,29,26,23,21],
[19,24,22,28,24,0,30,30,30,25,26,29,24,23],
[16,23,27,22,19,21,0,25,19,19,26,20,20,18],
[20,27,24,27,24,21,26,0,26,27,29,27,28,24],
[18,28,25,31,27,21,32,25,0,25,21,28,22,16],
[22,22,26,27,26,26,32,24,26,0,26,24,24,26],
[22,28,24,24,22,25,25,22,30,25,0,29,22,20],
[22,19,24,23,25,22,31,24,23,27,22,0,20,18],
[24,26,20,28,28,27,31,23,29,27,29,31,0,25],
[25,30,31,27,30,28,33,27,35,25,31,33,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = alg.AzziniMunda6(om, float("inf")) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([14, 51, 200, "ME-BBRCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("/Users/noeliarico/Desktop/folder-kemeny/2021EJOR/results/mebbrcw/mebbrcw_14_51.csv", index=False, header=False)
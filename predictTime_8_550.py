
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,232,193,161,294,258,178,247],
[318,0,259,237,331,255,241,236],
[357,291,0,319,310,300,282,274],
[389,313,231,0,313,287,270,256],
[256,219,240,237,0,284,222,199],
[292,295,250,263,266,0,211,303],
[372,309,268,280,328,339,0,293],
[303,314,276,294,351,247,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,263,267,284,279,252,308],
[274,0,271,294,306,275,270,312],
[287,279,0,282,318,265,268,321],
[283,256,268,0,296,276,275,302],
[266,244,232,254,0,248,241,254],
[271,275,285,274,302,0,254,297],
[298,280,282,275,309,296,0,307],
[242,238,229,248,296,253,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,300,286,295,290,273,275],
[284,0,309,292,286,291,251,271],
[250,241,0,265,258,276,253,241],
[264,258,285,0,304,264,277,254],
[255,264,292,246,0,279,258,270],
[260,259,274,286,271,0,247,274],
[277,299,297,273,292,303,0,282],
[275,279,309,296,280,276,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,274,271,274,258,271,264],
[279,0,290,286,276,274,283,279],
[276,260,0,276,257,240,252,261],
[279,264,274,0,261,290,260,254],
[276,274,293,289,0,284,282,266],
[292,276,310,260,266,0,281,281],
[279,267,298,290,268,269,0,273],
[286,271,289,296,284,269,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,286,290,306,317,258,286],
[276,0,298,273,296,329,270,289],
[264,252,0,259,288,322,249,254],
[260,277,291,0,296,280,277,261],
[244,254,262,254,0,292,224,266],
[233,221,228,270,258,0,214,252],
[292,280,301,273,326,336,0,294],
[264,261,296,289,284,298,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,288,281,291,281,270,267],
[293,0,290,269,280,271,292,275],
[262,260,0,270,283,277,273,264],
[269,281,280,0,266,285,267,259],
[259,270,267,284,0,267,266,252],
[269,279,273,265,283,0,264,281],
[280,258,277,283,284,286,0,272],
[283,275,286,291,298,269,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,262,274,301,305,303,258],
[274,0,250,263,279,279,282,251],
[288,300,0,289,259,284,272,260],
[276,287,261,0,283,259,274,263],
[249,271,291,267,0,270,269,275],
[245,271,266,291,280,0,293,255],
[247,268,278,276,281,257,0,267],
[292,299,290,287,275,295,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,261,238,225,242,236,221],
[242,0,296,249,213,248,233,275],
[289,254,0,271,239,230,258,251],
[312,301,279,0,288,260,253,256],
[325,337,311,262,0,310,296,283],
[308,302,320,290,240,0,289,277],
[314,317,292,297,254,261,0,296],
[329,275,299,294,267,273,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,281,278,281,274,259,278],
[277,0,280,279,283,267,269,268],
[269,270,0,278,258,264,255,256],
[272,271,272,0,259,268,250,254],
[269,267,292,291,0,268,281,277],
[276,283,286,282,282,0,264,266],
[291,281,295,300,269,286,0,291],
[272,282,294,296,273,284,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,292,248,305,288,275,301],
[282,0,311,312,305,282,233,313],
[258,239,0,245,270,247,205,273],
[302,238,305,0,294,304,237,307],
[245,245,280,256,0,282,244,288],
[262,268,303,246,268,0,219,263],
[275,317,345,313,306,331,0,338],
[249,237,277,243,262,287,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,292,266,290,304,299,278],
[275,0,302,288,308,307,313,288],
[258,248,0,239,244,268,270,248],
[284,262,311,0,281,307,316,262],
[260,242,306,269,0,311,287,264],
[246,243,282,243,239,0,269,239],
[251,237,280,234,263,281,0,255],
[272,262,302,288,286,311,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,288,273,263,278,290,279],
[259,0,267,272,265,270,282,261],
[262,283,0,269,271,271,278,275],
[277,278,281,0,270,284,277,264],
[287,285,279,280,0,279,279,275],
[272,280,279,266,271,0,289,270],
[260,268,272,273,271,261,0,259],
[271,289,275,286,275,280,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,255,248,237,235,256,248],
[308,0,267,282,265,263,267,255],
[295,283,0,291,259,280,238,282],
[302,268,259,0,242,267,226,265],
[313,285,291,308,0,276,272,298],
[315,287,270,283,274,0,281,280],
[294,283,312,324,278,269,0,295],
[302,295,268,285,252,270,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,316,268,248,291,291,240],
[251,0,307,268,271,279,266,268],
[234,243,0,251,211,261,228,246],
[282,282,299,0,264,290,259,286],
[302,279,339,286,0,293,271,287],
[259,271,289,260,257,0,305,256],
[259,284,322,291,279,245,0,264],
[310,282,304,264,263,294,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,265,246,284,230,333,250],
[301,0,354,329,352,309,342,260],
[285,196,0,294,302,285,241,210],
[304,221,256,0,252,233,288,244],
[266,198,248,298,0,244,206,162],
[320,241,265,317,306,0,313,315],
[217,208,309,262,344,237,0,198],
[300,290,340,306,388,235,352,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,273,271,274,277,270,263],
[267,0,283,278,287,282,277,275],
[277,267,0,275,271,274,266,270],
[279,272,275,0,281,281,288,277],
[276,263,279,269,0,279,283,271],
[273,268,276,269,271,0,261,257],
[280,273,284,262,267,289,0,268],
[287,275,280,273,279,293,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,276,300,270,296,302,286],
[270,0,274,277,272,277,289,287],
[274,276,0,264,280,294,296,290],
[250,273,286,0,271,278,306,282],
[280,278,270,279,0,293,289,280],
[254,273,256,272,257,0,280,277],
[248,261,254,244,261,270,0,262],
[264,263,260,268,270,273,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,282,275,285,270,263,283],
[277,0,253,273,286,279,269,272],
[268,297,0,283,286,274,279,279],
[275,277,267,0,286,273,267,282],
[265,264,264,264,0,267,248,256],
[280,271,276,277,283,0,270,266],
[287,281,271,283,302,280,0,294],
[267,278,271,268,294,284,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,257,264,263,260,262,284],
[275,0,278,266,284,293,266,289],
[293,272,0,265,269,270,277,273],
[286,284,285,0,273,274,276,321],
[287,266,281,277,0,277,260,295],
[290,257,280,276,273,0,274,304],
[288,284,273,274,290,276,0,305],
[266,261,277,229,255,246,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,275,287,290,297,303,277],
[266,0,273,257,266,282,302,276],
[275,277,0,287,279,298,290,275],
[263,293,263,0,278,300,272,275],
[260,284,271,272,0,284,295,268],
[253,268,252,250,266,0,277,262],
[247,248,260,278,255,273,0,269],
[273,274,275,275,282,288,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,284,285,279,275,268,293],
[261,0,265,259,276,276,276,287],
[266,285,0,277,282,288,295,282],
[265,291,273,0,276,269,272,274],
[271,274,268,274,0,288,276,277],
[275,274,262,281,262,0,273,287],
[282,274,255,278,274,277,0,274],
[257,263,268,276,273,263,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,269,264,281,275,264,259],
[300,0,271,265,286,277,282,277],
[281,279,0,256,283,281,255,282],
[286,285,294,0,285,278,277,273],
[269,264,267,265,0,265,244,285],
[275,273,269,272,285,0,257,270],
[286,268,295,273,306,293,0,290],
[291,273,268,277,265,280,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,262,277,262,285,263,265],
[282,0,272,267,264,274,276,251],
[288,278,0,268,293,287,277,278],
[273,283,282,0,271,293,282,248],
[288,286,257,279,0,294,300,277],
[265,276,263,257,256,0,263,258],
[287,274,273,268,250,287,0,254],
[285,299,272,302,273,292,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,323,284,314,264,274,287],
[262,0,281,280,292,278,278,289],
[227,269,0,261,273,261,241,277],
[266,270,289,0,287,288,267,285],
[236,258,277,263,0,256,259,274],
[286,272,289,262,294,0,270,286],
[276,272,309,283,291,280,0,307],
[263,261,273,265,276,264,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,269,265,277,286,267,276],
[280,0,269,268,271,278,259,266],
[281,281,0,254,272,289,264,294],
[285,282,296,0,279,289,302,270],
[273,279,278,271,0,287,273,305],
[264,272,261,261,263,0,261,270],
[283,291,286,248,277,289,0,272],
[274,284,256,280,245,280,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,256,283,254,248,248,254],
[286,0,275,277,270,269,265,269],
[294,275,0,263,288,277,273,275],
[267,273,287,0,254,258,267,270],
[296,280,262,296,0,277,263,280],
[302,281,273,292,273,0,298,291],
[302,285,277,283,287,252,0,273],
[296,281,275,280,270,259,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,280,280,293,280,281,263],
[281,0,268,278,293,277,275,275],
[270,282,0,282,301,287,278,254],
[270,272,268,0,274,268,265,254],
[257,257,249,276,0,260,249,242],
[270,273,263,282,290,0,278,256],
[269,275,272,285,301,272,0,273],
[287,275,296,296,308,294,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,282,268,266,230,268,261],
[287,0,296,282,313,276,293,273],
[268,254,0,286,244,234,265,238],
[282,268,264,0,273,272,290,248],
[284,237,306,277,0,236,268,254],
[320,274,316,278,314,0,296,289],
[282,257,285,260,282,254,0,255],
[289,277,312,302,296,261,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,304,291,283,265,292,312],
[265,0,227,284,262,224,343,253],
[246,323,0,275,273,249,316,300],
[259,266,275,0,281,255,315,320],
[267,288,277,269,0,283,324,301],
[285,326,301,295,267,0,318,289],
[258,207,234,235,226,232,0,258],
[238,297,250,230,249,261,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,278,276,281,292,278,270],
[263,0,269,285,267,292,271,265],
[272,281,0,274,266,272,268,265],
[274,265,276,0,282,297,265,272],
[269,283,284,268,0,293,268,272],
[258,258,278,253,257,0,260,255],
[272,279,282,285,282,290,0,283],
[280,285,285,278,278,295,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,297,266,273,245,291,267],
[270,0,247,246,252,235,255,255],
[253,303,0,286,236,250,281,258],
[284,304,264,0,280,272,282,277],
[277,298,314,270,0,270,301,247],
[305,315,300,278,280,0,291,274],
[259,295,269,268,249,259,0,254],
[283,295,292,273,303,276,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,304,301,278,291,270,258],
[269,0,296,279,275,277,275,284],
[246,254,0,269,264,270,253,268],
[249,271,281,0,268,284,256,272],
[272,275,286,282,0,282,279,267],
[259,273,280,266,268,0,257,269],
[280,275,297,294,271,293,0,297],
[292,266,282,278,283,281,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,296,268,282,273,264,247],
[300,0,334,284,303,308,309,257],
[254,216,0,238,268,242,253,258],
[282,266,312,0,283,274,308,295],
[268,247,282,267,0,265,259,268],
[277,242,308,276,285,0,285,285],
[286,241,297,242,291,265,0,280],
[303,293,292,255,282,265,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,283,302,318,315,279,275],
[275,0,300,316,259,294,293,325],
[267,250,0,317,254,295,281,289],
[248,234,233,0,257,273,251,234],
[232,291,296,293,0,261,269,256],
[235,256,255,277,289,0,283,277],
[271,257,269,299,281,267,0,281],
[275,225,261,316,294,273,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,249,273,229,261,253,246],
[296,0,287,298,243,300,247,260],
[301,263,0,281,244,267,270,254],
[277,252,269,0,262,264,256,244],
[321,307,306,288,0,324,317,274],
[289,250,283,286,226,0,285,284],
[297,303,280,294,233,265,0,270],
[304,290,296,306,276,266,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,280,265,284,285,263,271],
[274,0,288,271,291,270,266,265],
[270,262,0,284,263,288,250,263],
[285,279,266,0,304,307,287,252],
[266,259,287,246,0,255,258,254],
[265,280,262,243,295,0,271,259],
[287,284,300,263,292,279,0,280],
[279,285,287,298,296,291,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,260,276,289,275,271,262],
[260,0,265,287,297,278,273,277],
[290,285,0,284,275,304,290,256],
[274,263,266,0,269,273,276,257],
[261,253,275,281,0,274,273,273],
[275,272,246,277,276,0,273,241],
[279,277,260,274,277,277,0,259],
[288,273,294,293,277,309,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,250,291,287,260,250,285],
[290,0,252,288,255,289,281,303],
[300,298,0,237,283,255,274,321],
[259,262,313,0,295,308,297,299],
[263,295,267,255,0,284,277,284],
[290,261,295,242,266,0,245,279],
[300,269,276,253,273,305,0,334],
[265,247,229,251,266,271,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,298,279,305,282,296,270],
[244,0,259,227,257,254,273,259],
[252,291,0,260,282,233,265,258],
[271,323,290,0,291,293,313,284],
[245,293,268,259,0,252,265,263],
[268,296,317,257,298,0,281,275],
[254,277,285,237,285,269,0,262],
[280,291,292,266,287,275,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,240,274,263,257,260,247],
[295,0,250,289,293,268,263,273],
[310,300,0,282,296,270,280,265],
[276,261,268,0,269,266,246,262],
[287,257,254,281,0,274,254,272],
[293,282,280,284,276,0,273,281],
[290,287,270,304,296,277,0,276],
[303,277,285,288,278,269,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,259,285,273,296,272,305],
[258,0,277,287,255,260,263,278],
[291,273,0,282,277,286,280,294],
[265,263,268,0,239,276,258,269],
[277,295,273,311,0,297,295,310],
[254,290,264,274,253,0,253,280],
[278,287,270,292,255,297,0,310],
[245,272,256,281,240,270,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,370,222,240,331,242,210],
[320,0,335,314,309,343,308,214],
[180,215,0,195,201,238,161,125],
[328,236,355,0,266,282,242,207],
[310,241,349,284,0,330,239,308],
[219,207,312,268,220,0,271,201],
[308,242,389,308,311,279,0,257],
[340,336,425,343,242,349,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,260,289,271,271,289,292],
[299,0,284,303,286,275,277,291],
[290,266,0,279,276,274,288,284],
[261,247,271,0,279,255,277,286],
[279,264,274,271,0,253,283,297],
[279,275,276,295,297,0,278,291],
[261,273,262,273,267,272,0,284],
[258,259,266,264,253,259,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,255,203,283,226,249,167],
[281,0,189,190,242,269,289,281],
[295,361,0,277,274,293,336,282],
[347,360,273,0,321,312,386,323],
[267,308,276,229,0,224,285,211],
[324,281,257,238,326,0,302,323],
[301,261,214,164,265,248,0,267],
[383,269,268,227,339,227,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,288,315,259,231,280,276],
[251,0,321,329,298,299,266,292],
[262,229,0,282,292,268,235,237],
[235,221,268,0,239,262,252,235],
[291,252,258,311,0,241,264,224],
[319,251,282,288,309,0,263,323],
[270,284,315,298,286,287,0,278],
[274,258,313,315,326,227,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,277,274,281,289,280,286],
[255,0,286,273,280,272,261,289],
[273,264,0,254,277,272,261,271],
[276,277,296,0,282,292,268,296],
[269,270,273,268,0,279,268,285],
[261,278,278,258,271,0,276,289],
[270,289,289,282,282,274,0,282],
[264,261,279,254,265,261,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,290,291,273,278,258,279],
[253,0,268,252,270,259,246,257],
[260,282,0,273,250,272,269,281],
[259,298,277,0,270,265,257,272],
[277,280,300,280,0,283,270,278],
[272,291,278,285,267,0,278,273],
[292,304,281,293,280,272,0,277],
[271,293,269,278,272,277,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,275,235,274,264,303,215],
[316,0,303,350,301,298,325,238],
[275,247,0,268,206,251,330,233],
[315,200,282,0,222,235,335,232],
[276,249,344,328,0,289,310,277],
[286,252,299,315,261,0,324,260],
[247,225,220,215,240,226,0,214],
[335,312,317,318,273,290,336,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,275,258,260,260,253,264],
[294,0,275,260,269,256,269,275],
[275,275,0,274,240,260,273,256],
[292,290,276,0,281,257,284,272],
[290,281,310,269,0,298,276,286],
[290,294,290,293,252,0,288,303],
[297,281,277,266,274,262,0,270],
[286,275,294,278,264,247,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,272,264,255,278,265,256],
[277,0,269,267,253,263,285,272],
[278,281,0,261,278,275,279,264],
[286,283,289,0,270,280,280,277],
[295,297,272,280,0,286,275,267],
[272,287,275,270,264,0,278,276],
[285,265,271,270,275,272,0,258],
[294,278,286,273,283,274,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,338,279,275,247,333,296],
[235,0,277,209,272,216,347,276],
[212,273,0,182,221,156,267,220],
[271,341,368,0,279,324,354,336],
[275,278,329,271,0,230,296,287],
[303,334,394,226,320,0,309,337],
[217,203,283,196,254,241,0,238],
[254,274,330,214,263,213,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,287,289,264,260,273,257],
[281,0,288,285,268,275,270,260],
[263,262,0,288,277,269,261,258],
[261,265,262,0,272,267,269,251],
[286,282,273,278,0,269,273,278],
[290,275,281,283,281,0,271,273],
[277,280,289,281,277,279,0,270],
[293,290,292,299,272,277,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,257,280,264,290,269,284],
[234,0,255,252,248,268,253,255],
[293,295,0,282,269,289,282,284],
[270,298,268,0,280,296,278,280],
[286,302,281,270,0,300,268,308],
[260,282,261,254,250,0,262,271],
[281,297,268,272,282,288,0,272],
[266,295,266,270,242,279,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,269,275,286,263,263,275],
[298,0,274,285,292,293,282,287],
[281,276,0,287,287,276,265,277],
[275,265,263,0,289,278,271,279],
[264,258,263,261,0,258,243,258],
[287,257,274,272,292,0,272,276],
[287,268,285,279,307,278,0,284],
[275,263,273,271,292,274,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,281,271,262,250,302,297],
[270,0,284,298,280,284,302,319],
[269,266,0,281,253,255,282,294],
[279,252,269,0,273,257,274,287],
[288,270,297,277,0,272,323,340],
[300,266,295,293,278,0,264,312],
[248,248,268,276,227,286,0,275],
[253,231,256,263,210,238,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,279,280,307,290,299,268],
[245,0,244,275,244,247,266,242],
[271,306,0,286,299,285,299,304],
[270,275,264,0,273,258,306,260],
[243,306,251,277,0,263,298,245],
[260,303,265,292,287,0,289,270],
[251,284,251,244,252,261,0,251],
[282,308,246,290,305,280,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,269,269,257,278,288,297],
[284,0,278,293,279,272,297,291],
[281,272,0,291,269,287,299,290],
[281,257,259,0,270,279,288,280],
[293,271,281,280,0,285,288,287],
[272,278,263,271,265,0,263,282],
[262,253,251,262,262,287,0,283],
[253,259,260,270,263,268,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,299,269,276,272,248,282],
[260,0,287,249,270,266,262,280],
[251,263,0,264,260,263,270,269],
[281,301,286,0,278,272,267,278],
[274,280,290,272,0,277,289,277],
[278,284,287,278,273,0,274,300],
[302,288,280,283,261,276,0,284],
[268,270,281,272,273,250,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,270,263,286,265,251,271],
[300,0,299,275,308,288,275,282],
[280,251,0,261,279,282,253,257],
[287,275,289,0,290,283,271,266],
[264,242,271,260,0,271,264,263],
[285,262,268,267,279,0,268,267],
[299,275,297,279,286,282,0,291],
[279,268,293,284,287,283,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,271,311,298,215,273,303],
[294,0,279,345,281,263,330,309],
[279,271,0,328,301,306,283,334],
[239,205,222,0,244,212,227,239],
[252,269,249,306,0,240,294,246],
[335,287,244,338,310,0,311,337],
[277,220,267,323,256,239,0,313],
[247,241,216,311,304,213,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,289,267,270,267,263,261],
[283,0,307,289,278,258,285,268],
[261,243,0,280,290,262,279,246],
[283,261,270,0,258,258,261,271],
[280,272,260,292,0,275,268,268],
[283,292,288,292,275,0,280,288],
[287,265,271,289,282,270,0,268],
[289,282,304,279,282,262,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,282,286,282,280,264,262],
[274,0,269,271,299,266,249,259],
[268,281,0,283,286,275,278,282],
[264,279,267,0,285,276,243,255],
[268,251,264,265,0,278,260,270],
[270,284,275,274,272,0,282,282],
[286,301,272,307,290,268,0,280],
[288,291,268,295,280,268,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,282,271,281,237,280,278],
[274,0,249,287,284,250,265,286],
[268,301,0,287,277,279,291,280],
[279,263,263,0,271,254,259,270],
[269,266,273,279,0,248,269,277],
[313,300,271,296,302,0,296,283],
[270,285,259,291,281,254,0,264],
[272,264,270,280,273,267,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,278,256,273,269,261,290],
[273,0,273,256,266,264,267,273],
[272,277,0,270,281,276,279,284],
[294,294,280,0,273,258,284,280],
[277,284,269,277,0,278,280,278],
[281,286,274,292,272,0,283,284],
[289,283,271,266,270,267,0,272],
[260,277,266,270,272,266,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,287,284,276,299,286,273],
[270,0,273,295,272,273,280,279],
[263,277,0,280,278,268,266,256],
[266,255,270,0,272,261,244,248],
[274,278,272,278,0,256,264,255],
[251,277,282,289,294,0,257,278],
[264,270,284,306,286,293,0,291],
[277,271,294,302,295,272,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,280,276,275,262,270,262],
[281,0,271,283,267,281,279,277],
[270,279,0,280,272,276,282,271],
[274,267,270,0,271,273,282,273],
[275,283,278,279,0,273,286,295],
[288,269,274,277,277,0,284,291],
[280,271,268,268,264,266,0,289],
[288,273,279,277,255,259,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,299,338,327,300,280,334],
[282,0,312,283,309,256,274,285],
[251,238,0,280,332,261,287,301],
[212,267,270,0,287,280,247,261],
[223,241,218,263,0,255,253,253],
[250,294,289,270,295,0,268,294],
[270,276,263,303,297,282,0,300],
[216,265,249,289,297,256,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,240,272,292,333,310,277],
[287,0,290,275,279,323,312,247],
[310,260,0,265,284,327,320,257],
[278,275,285,0,244,302,341,286],
[258,271,266,306,0,299,320,279],
[217,227,223,248,251,0,260,222],
[240,238,230,209,230,290,0,245],
[273,303,293,264,271,328,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,287,273,294,261,285,285],
[271,0,244,248,280,247,291,275],
[263,306,0,300,295,304,292,311],
[277,302,250,0,264,281,286,265],
[256,270,255,286,0,261,276,293],
[289,303,246,269,289,0,252,280],
[265,259,258,264,274,298,0,288],
[265,275,239,285,257,270,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,289,285,308,300,291,305],
[288,0,278,249,301,259,282,293],
[261,272,0,289,309,295,285,286],
[265,301,261,0,305,306,293,292],
[242,249,241,245,0,231,267,249],
[250,291,255,244,319,0,252,266],
[259,268,265,257,283,298,0,273],
[245,257,264,258,301,284,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,272,264,257,270,249,269],
[276,0,265,262,272,270,250,276],
[278,285,0,273,281,291,267,286],
[286,288,277,0,280,287,276,252],
[293,278,269,270,0,297,260,276],
[280,280,259,263,253,0,265,274],
[301,300,283,274,290,285,0,291],
[281,274,264,298,274,276,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,265,261,252,259,367,298],
[308,0,332,266,284,294,267,319],
[285,218,0,267,210,236,285,321],
[289,284,283,0,275,250,348,322],
[298,266,340,275,0,232,300,298],
[291,256,314,300,318,0,333,324],
[183,283,265,202,250,217,0,228],
[252,231,229,228,252,226,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,283,278,269,273,288,279],
[276,0,269,284,286,291,294,281],
[267,281,0,269,270,269,296,279],
[272,266,281,0,266,273,298,268],
[281,264,280,284,0,271,300,273],
[277,259,281,277,279,0,299,278],
[262,256,254,252,250,251,0,268],
[271,269,271,282,277,272,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,266,273,270,269,256,277],
[274,0,290,272,280,265,265,303],
[284,260,0,294,278,276,290,290],
[277,278,256,0,265,248,250,275],
[280,270,272,285,0,286,265,296],
[281,285,274,302,264,0,277,279],
[294,285,260,300,285,273,0,300],
[273,247,260,275,254,271,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,277,281,287,295,269,296],
[271,0,255,271,288,276,276,280],
[273,295,0,280,281,278,273,301],
[269,279,270,0,292,282,271,306],
[263,262,269,258,0,278,260,292],
[255,274,272,268,272,0,259,283],
[281,274,277,279,290,291,0,277],
[254,270,249,244,258,267,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,244,256,270,263,252,253],
[300,0,261,268,294,268,264,273],
[306,289,0,279,306,281,266,291],
[294,282,271,0,302,277,270,261],
[280,256,244,248,0,268,264,277],
[287,282,269,273,282,0,263,271],
[298,286,284,280,286,287,0,269],
[297,277,259,289,273,279,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,274,265,270,285,270,265],
[283,0,278,280,268,282,257,287],
[276,272,0,271,257,263,253,264],
[285,270,279,0,271,268,281,278],
[280,282,293,279,0,282,267,261],
[265,268,287,282,268,0,281,254],
[280,293,297,269,283,269,0,272],
[285,263,286,272,289,296,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,271,291,260,249,273,259],
[287,0,275,309,284,271,307,284],
[279,275,0,281,262,296,298,262],
[259,241,269,0,263,253,270,255],
[290,266,288,287,0,279,307,254],
[301,279,254,297,271,0,290,286],
[277,243,252,280,243,260,0,254],
[291,266,288,295,296,264,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,257,281,262,284,290,285],
[245,0,239,256,254,243,283,247],
[293,311,0,294,255,279,261,258],
[269,294,256,0,253,266,273,256],
[288,296,295,297,0,298,302,272],
[266,307,271,284,252,0,284,283],
[260,267,289,277,248,266,0,265],
[265,303,292,294,278,267,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,244,262,270,252,236,262],
[290,0,266,272,290,277,260,274],
[306,284,0,292,286,291,266,293],
[288,278,258,0,285,261,268,274],
[280,260,264,265,0,259,259,263],
[298,273,259,289,291,0,277,297],
[314,290,284,282,291,273,0,284],
[288,276,257,276,287,253,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,295,272,291,317,295,263],
[242,0,238,227,266,270,228,284],
[255,312,0,309,302,292,278,294],
[278,323,241,0,287,290,271,275],
[259,284,248,263,0,293,304,284],
[233,280,258,260,257,0,242,269],
[255,322,272,279,246,308,0,301],
[287,266,256,275,266,281,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,265,264,275,269,257,265],
[277,0,317,286,273,299,285,277],
[285,233,0,238,243,243,240,253],
[286,264,312,0,270,277,261,285],
[275,277,307,280,0,300,256,291],
[281,251,307,273,250,0,293,254],
[293,265,310,289,294,257,0,280],
[285,273,297,265,259,296,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,289,278,310,297,278,289],
[285,0,253,274,296,286,271,282],
[261,297,0,283,293,301,286,288],
[272,276,267,0,297,275,285,270],
[240,254,257,253,0,260,272,251],
[253,264,249,275,290,0,273,282],
[272,279,264,265,278,277,0,278],
[261,268,262,280,299,268,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,299,279,275,271,298,245],
[277,0,274,282,266,266,285,285],
[251,276,0,278,253,271,263,245],
[271,268,272,0,255,272,254,264],
[275,284,297,295,0,277,274,260],
[279,284,279,278,273,0,280,255],
[252,265,287,296,276,270,0,245],
[305,265,305,286,290,295,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,282,239,250,254,255,284],
[278,0,272,260,270,251,257,273],
[268,278,0,214,276,272,242,284],
[311,290,336,0,272,275,287,293],
[300,280,274,278,0,288,267,289],
[296,299,278,275,262,0,260,296],
[295,293,308,263,283,290,0,280],
[266,277,266,257,261,254,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,267,238,258,242,243,270],
[286,0,266,261,293,282,265,286],
[283,284,0,253,247,293,277,279],
[312,289,297,0,299,283,275,280],
[292,257,303,251,0,257,293,287],
[308,268,257,267,293,0,296,281],
[307,285,273,275,257,254,0,269],
[280,264,271,270,263,269,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,274,297,248,250,267,282],
[233,0,292,228,266,306,295,271],
[276,258,0,287,251,232,280,288],
[253,322,263,0,253,269,332,268],
[302,284,299,297,0,287,270,300],
[300,244,318,281,263,0,260,264],
[283,255,270,218,280,290,0,300],
[268,279,262,282,250,286,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,290,280,286,281,275,293],
[272,0,304,288,281,288,272,284],
[260,246,0,273,278,261,272,280],
[270,262,277,0,281,260,279,279],
[264,269,272,269,0,272,280,274],
[269,262,289,290,278,0,283,274],
[275,278,278,271,270,267,0,274],
[257,266,270,271,276,276,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,223,250,238,229,232,240],
[293,0,274,310,273,263,277,239],
[327,276,0,281,266,268,257,254],
[300,240,269,0,261,257,249,228],
[312,277,284,289,0,282,273,264],
[321,287,282,293,268,0,269,256],
[318,273,293,301,277,281,0,281],
[310,311,296,322,286,294,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,274,292,295,263,288,275],
[285,0,283,290,300,280,268,283],
[276,267,0,267,283,271,271,252],
[258,260,283,0,279,261,263,267],
[255,250,267,271,0,260,269,262],
[287,270,279,289,290,0,299,298],
[262,282,279,287,281,251,0,290],
[275,267,298,283,288,252,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,246,278,267,263,232,252],
[281,0,300,285,282,277,262,257],
[304,250,0,264,277,265,268,270],
[272,265,286,0,278,286,282,276],
[283,268,273,272,0,262,292,245],
[287,273,285,264,288,0,262,279],
[318,288,282,268,258,288,0,279],
[298,293,280,274,305,271,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,284,271,278,305,256,331],
[242,0,265,246,297,304,243,345],
[266,285,0,273,268,273,278,338],
[279,304,277,0,306,266,252,339],
[272,253,282,244,0,307,224,349],
[245,246,277,284,243,0,227,342],
[294,307,272,298,326,323,0,366],
[219,205,212,211,201,208,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,316,312,296,302,315,286],
[275,0,286,297,290,289,277,278],
[234,264,0,264,283,279,275,271],
[238,253,286,0,280,281,266,280],
[254,260,267,270,0,281,294,280],
[248,261,271,269,269,0,260,253],
[235,273,275,284,256,290,0,277],
[264,272,279,270,270,297,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,286,277,270,280,261,271],
[282,0,308,280,287,275,278,293],
[264,242,0,256,257,267,262,278],
[273,270,294,0,279,277,255,277],
[280,263,293,271,0,248,269,275],
[270,275,283,273,302,0,266,272],
[289,272,288,295,281,284,0,295],
[279,257,272,273,275,278,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,289,259,276,241,243,253],
[333,0,304,294,310,284,297,270],
[261,246,0,235,275,248,275,282],
[291,256,315,0,278,233,294,294],
[274,240,275,272,0,250,201,250],
[309,266,302,317,300,0,333,289],
[307,253,275,256,349,217,0,242],
[297,280,268,256,300,261,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,277,279,275,258,263,250],
[262,0,279,256,275,278,261,255],
[273,271,0,279,266,269,272,274],
[271,294,271,0,281,278,271,272],
[275,275,284,269,0,270,275,273],
[292,272,281,272,280,0,289,269],
[287,289,278,279,275,261,0,284],
[300,295,276,278,277,281,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,283,265,269,265,278,266],
[272,0,284,283,281,262,263,262],
[267,266,0,289,284,267,267,276],
[285,267,261,0,289,261,255,271],
[281,269,266,261,0,263,249,270],
[285,288,283,289,287,0,273,254],
[272,287,283,295,301,277,0,282],
[284,288,274,279,280,296,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,288,293,287,290,282,275],
[260,0,270,270,258,261,254,260],
[262,280,0,275,271,285,280,262],
[257,280,275,0,269,286,272,262],
[263,292,279,281,0,281,272,268],
[260,289,265,264,269,0,258,259],
[268,296,270,278,278,292,0,273],
[275,290,288,288,282,291,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,260,259,277,268,224,266],
[315,0,306,266,305,293,288,303],
[290,244,0,238,267,270,266,254],
[291,284,312,0,282,282,259,268],
[273,245,283,268,0,272,275,245],
[282,257,280,268,278,0,279,268],
[326,262,284,291,275,271,0,278],
[284,247,296,282,305,282,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,281,252,269,281,301,283],
[255,0,344,314,276,265,297,336],
[269,206,0,239,215,190,235,227],
[298,236,311,0,271,240,309,259],
[281,274,335,279,0,261,326,330],
[269,285,360,310,289,0,310,300],
[249,253,315,241,224,240,0,271],
[267,214,323,291,220,250,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,307,275,244,297,300,288],
[272,0,277,273,275,277,236,295],
[243,273,0,279,294,298,270,299],
[275,277,271,0,337,286,269,328],
[306,275,256,213,0,237,261,278],
[253,273,252,264,313,0,260,256],
[250,314,280,281,289,290,0,309],
[262,255,251,222,272,294,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,237,273,333,269,301,265],
[332,0,267,351,341,303,348,316],
[313,283,0,290,362,264,316,292],
[277,199,260,0,270,233,273,267],
[217,209,188,280,0,254,259,256],
[281,247,286,317,296,0,291,281],
[249,202,234,277,291,259,0,264],
[285,234,258,283,294,269,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,281,266,259,260,256,273],
[288,0,288,267,256,266,273,267],
[269,262,0,273,237,243,269,266],
[284,283,277,0,255,273,268,271],
[291,294,313,295,0,273,289,274],
[290,284,307,277,277,0,300,275],
[294,277,281,282,261,250,0,273],
[277,283,284,279,276,275,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,267,310,235,257,271,237],
[249,0,258,227,232,234,228,215],
[283,292,0,286,265,239,238,262],
[240,323,264,0,250,218,238,206],
[315,318,285,300,0,279,272,299],
[293,316,311,332,271,0,312,307],
[279,322,312,312,278,238,0,279],
[313,335,288,344,251,243,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,310,301,282,320,320,272],
[281,0,308,292,273,299,280,293],
[240,242,0,280,263,297,263,268],
[249,258,270,0,273,327,294,295],
[268,277,287,277,0,304,284,278],
[230,251,253,223,246,0,238,245],
[230,270,287,256,266,312,0,272],
[278,257,282,255,272,305,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,284,285,306,273,287,287],
[268,0,279,274,279,275,266,277],
[266,271,0,286,280,291,261,294],
[265,276,264,0,266,272,274,267],
[244,271,270,284,0,276,250,270],
[277,275,259,278,274,0,261,275],
[263,284,289,276,300,289,0,284],
[263,273,256,283,280,275,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,304,270,249,290,319,267],
[271,0,321,266,297,266,301,295],
[246,229,0,273,235,237,290,269],
[280,284,277,0,254,266,309,300],
[301,253,315,296,0,269,298,325],
[260,284,313,284,281,0,300,308],
[231,249,260,241,252,250,0,286],
[283,255,281,250,225,242,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,287,304,327,291,270,301],
[273,0,303,305,303,314,283,303],
[263,247,0,296,282,290,260,279],
[246,245,254,0,289,265,252,258],
[223,247,268,261,0,277,248,274],
[259,236,260,285,273,0,263,268],
[280,267,290,298,302,287,0,272],
[249,247,271,292,276,282,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,258,274,246,293,258,231],
[287,0,305,283,303,315,305,264],
[292,245,0,289,277,314,300,257],
[276,267,261,0,248,281,231,254],
[304,247,273,302,0,327,281,289],
[257,235,236,269,223,0,239,260],
[292,245,250,319,269,311,0,252],
[319,286,293,296,261,290,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,282,281,285,282,296,271],
[258,0,275,262,273,266,266,260],
[268,275,0,270,276,287,291,268],
[269,288,280,0,279,287,277,273],
[265,277,274,271,0,289,282,284],
[268,284,263,263,261,0,270,267],
[254,284,259,273,268,280,0,264],
[279,290,282,277,266,283,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,273,258,270,284,275,282],
[282,0,271,270,285,297,280,283],
[277,279,0,277,278,303,268,263],
[292,280,273,0,277,300,288,272],
[280,265,272,273,0,309,272,283],
[266,253,247,250,241,0,253,247],
[275,270,282,262,278,297,0,265],
[268,267,287,278,267,303,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,369,271,237,286,303,339,220],
[181,0,285,234,284,257,262,235],
[279,265,0,272,246,214,285,286],
[313,316,278,0,321,285,332,234],
[264,266,304,229,0,202,310,222],
[247,293,336,265,348,0,356,267],
[211,288,265,218,240,194,0,198],
[330,315,264,316,328,283,352,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,290,256,266,264,274,240],
[298,0,296,274,273,254,290,276],
[260,254,0,249,277,220,244,253],
[294,276,301,0,298,266,288,262],
[284,277,273,252,0,257,268,244],
[286,296,330,284,293,0,313,274],
[276,260,306,262,282,237,0,262],
[310,274,297,288,306,276,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,248,258,263,259,249,252],
[308,0,281,279,282,275,279,272],
[302,269,0,280,289,279,282,272],
[292,271,270,0,288,266,273,275],
[287,268,261,262,0,277,260,280],
[291,275,271,284,273,0,276,287],
[301,271,268,277,290,274,0,282],
[298,278,278,275,270,263,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,336,320,303,264,321,356],
[267,0,227,252,289,250,260,293],
[214,323,0,260,291,221,317,291],
[230,298,290,0,331,315,303,325],
[247,261,259,219,0,281,303,279],
[286,300,329,235,269,0,247,273],
[229,290,233,247,247,303,0,256],
[194,257,259,225,271,277,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,256,262,292,275,277,260],
[269,0,267,248,304,269,255,263],
[294,283,0,267,302,287,275,292],
[288,302,283,0,308,285,280,275],
[258,246,248,242,0,255,253,268],
[275,281,263,265,295,0,269,280],
[273,295,275,270,297,281,0,264],
[290,287,258,275,282,270,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,281,293,256,274,290,289],
[270,0,277,280,277,251,281,282],
[269,273,0,283,255,254,280,274],
[257,270,267,0,256,260,274,285],
[294,273,295,294,0,280,291,286],
[276,299,296,290,270,0,288,292],
[260,269,270,276,259,262,0,287],
[261,268,276,265,264,258,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,210,437,225,204,330,418],
[317,0,317,204,397,317,251,378],
[340,233,0,340,375,260,278,321],
[113,346,210,0,338,272,214,434],
[325,153,175,212,0,325,153,212],
[346,233,290,278,225,0,233,259],
[220,299,272,336,397,317,0,378],
[132,172,229,116,338,291,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,239,259,257,265,257,260],
[271,0,250,262,272,262,247,283],
[311,300,0,261,293,291,278,288],
[291,288,289,0,286,274,262,295],
[293,278,257,264,0,248,244,264],
[285,288,259,276,302,0,260,275],
[293,303,272,288,306,290,0,294],
[290,267,262,255,286,275,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,275,281,284,270,260,261],
[280,0,253,283,295,270,270,257],
[275,297,0,301,296,280,254,279],
[269,267,249,0,278,282,264,272],
[266,255,254,272,0,266,256,252],
[280,280,270,268,284,0,258,278],
[290,280,296,286,294,292,0,271],
[289,293,271,278,298,272,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,284,289,269,298,270,281],
[274,0,296,288,289,291,277,277],
[266,254,0,273,250,255,257,260],
[261,262,277,0,270,271,258,260],
[281,261,300,280,0,275,261,273],
[252,259,295,279,275,0,258,265],
[280,273,293,292,289,292,0,276],
[269,273,290,290,277,285,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,251,269,259,231,285,215],
[358,0,299,313,314,268,281,301],
[299,251,0,306,294,258,275,298],
[281,237,244,0,259,306,252,194],
[291,236,256,291,0,237,264,222],
[319,282,292,244,313,0,284,297],
[265,269,275,298,286,266,0,293],
[335,249,252,356,328,253,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,244,270,271,269,254,259],
[288,0,288,281,287,295,269,276],
[306,262,0,283,287,294,272,288],
[280,269,267,0,288,280,287,295],
[279,263,263,262,0,278,283,266],
[281,255,256,270,272,0,260,254],
[296,281,278,263,267,290,0,263],
[291,274,262,255,284,296,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,281,315,276,278,280,286],
[293,0,253,298,291,274,266,289],
[269,297,0,294,288,270,267,270],
[235,252,256,0,268,244,227,238],
[274,259,262,282,0,306,269,265],
[272,276,280,306,244,0,263,244],
[270,284,283,323,281,287,0,271],
[264,261,280,312,285,306,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,292,288,286,280,317,279],
[275,0,257,235,250,267,262,266],
[258,293,0,250,282,254,301,267],
[262,315,300,0,300,283,295,282],
[264,300,268,250,0,282,293,263],
[270,283,296,267,268,0,281,299],
[233,288,249,255,257,269,0,281],
[271,284,283,268,287,251,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,278,284,256,256,273,271],
[281,0,276,276,254,279,268,281],
[272,274,0,281,272,264,299,272],
[266,274,269,0,280,260,247,280],
[294,296,278,270,0,278,265,278],
[294,271,286,290,272,0,297,263],
[277,282,251,303,285,253,0,266],
[279,269,278,270,272,287,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,311,289,266,284,309,255],
[280,0,307,273,287,263,310,272],
[239,243,0,264,260,232,284,252],
[261,277,286,0,279,276,290,274],
[284,263,290,271,0,257,304,237],
[266,287,318,274,293,0,304,286],
[241,240,266,260,246,246,0,247],
[295,278,298,276,313,264,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,306,287,292,290,261,324],
[254,0,265,251,238,295,244,252],
[244,285,0,236,263,275,274,264],
[263,299,314,0,304,317,292,322],
[258,312,287,246,0,313,276,273],
[260,255,275,233,237,0,237,235],
[289,306,276,258,274,313,0,297],
[226,298,286,228,277,315,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,271,280,280,272,284,287],
[275,0,264,288,268,270,271,283],
[279,286,0,281,291,267,285,286],
[270,262,269,0,267,297,293,286],
[270,282,259,283,0,274,282,281],
[278,280,283,253,276,0,279,275],
[266,279,265,257,268,271,0,269],
[263,267,264,264,269,275,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,251,246,282,304,210,278],
[323,0,316,290,298,308,258,306],
[299,234,0,261,258,291,239,280],
[304,260,289,0,273,283,264,286],
[268,252,292,277,0,260,275,271],
[246,242,259,267,290,0,256,283],
[340,292,311,286,275,294,0,296],
[272,244,270,264,279,267,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,268,277,281,313,284,280],
[263,0,263,269,270,275,297,266],
[282,287,0,271,266,294,290,275],
[273,281,279,0,278,289,268,257],
[269,280,284,272,0,292,267,257],
[237,275,256,261,258,0,290,234],
[266,253,260,282,283,260,0,245],
[270,284,275,293,293,316,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,280,292,289,294,291,292],
[277,0,272,280,283,282,280,273],
[270,278,0,283,284,280,275,288],
[258,270,267,0,267,277,267,263],
[261,267,266,283,0,282,274,271],
[256,268,270,273,268,0,278,278],
[259,270,275,283,276,272,0,273],
[258,277,262,287,279,272,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,254,263,276,285,270,262],
[288,0,266,261,290,273,273,283],
[296,284,0,261,276,285,269,272],
[287,289,289,0,290,289,270,282],
[274,260,274,260,0,277,276,270],
[265,277,265,261,273,0,264,261],
[280,277,281,280,274,286,0,269],
[288,267,278,268,280,289,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,269,280,265,264,258,285],
[233,0,247,241,232,242,255,252],
[281,303,0,289,257,266,267,273],
[270,309,261,0,260,270,267,265],
[285,318,293,290,0,273,285,300],
[286,308,284,280,277,0,269,281],
[292,295,283,283,265,281,0,279],
[265,298,277,285,250,269,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,257,272,261,283,265,263],
[281,0,281,279,265,291,285,279],
[293,269,0,291,282,303,275,278],
[278,271,259,0,271,304,281,251],
[289,285,268,279,0,297,284,259],
[267,259,247,246,253,0,259,248],
[285,265,275,269,266,291,0,282],
[287,271,272,299,291,302,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,254,258,266,273,267,269],
[274,0,261,269,262,271,276,269],
[296,289,0,293,268,301,293,283],
[292,281,257,0,264,279,272,277],
[284,288,282,286,0,273,278,279],
[277,279,249,271,277,0,277,264],
[283,274,257,278,272,273,0,277],
[281,281,267,273,271,286,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,283,269,275,291,294,278],
[255,0,258,263,277,284,280,255],
[267,292,0,284,279,287,274,271],
[281,287,266,0,281,298,271,273],
[275,273,271,269,0,300,269,271],
[259,266,263,252,250,0,268,265],
[256,270,276,279,281,282,0,273],
[272,295,279,277,279,285,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,279,260,289,284,256,284],
[277,0,248,280,280,262,267,267],
[271,302,0,275,304,285,270,295],
[290,270,275,0,273,276,264,281],
[261,270,246,277,0,262,244,272],
[266,288,265,274,288,0,301,301],
[294,283,280,286,306,249,0,306],
[266,283,255,269,278,249,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,262,257,273,265,282,255],
[313,0,269,280,285,281,305,277],
[288,281,0,280,276,271,279,272],
[293,270,270,0,261,273,297,266],
[277,265,274,289,0,278,297,252],
[285,269,279,277,272,0,290,259],
[268,245,271,253,253,260,0,232],
[295,273,278,284,298,291,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,284,285,286,267,296,262],
[264,0,261,294,271,283,277,289],
[266,289,0,296,280,279,277,270],
[265,256,254,0,270,283,276,252],
[264,279,270,280,0,259,267,265],
[283,267,271,267,291,0,302,287],
[254,273,273,274,283,248,0,251],
[288,261,280,298,285,263,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,261,253,290,284,251,254],
[297,0,302,291,290,284,286,267],
[289,248,0,267,301,247,259,254],
[297,259,283,0,301,284,265,272],
[260,260,249,249,0,292,238,251],
[266,266,303,266,258,0,250,257],
[299,264,291,285,312,300,0,283],
[296,283,296,278,299,293,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,271,271,283,279,281,284],
[288,0,281,269,304,276,306,289],
[279,269,0,279,300,284,283,290],
[279,281,271,0,286,289,284,305],
[267,246,250,264,0,266,247,262],
[271,274,266,261,284,0,274,280],
[269,244,267,266,303,276,0,273],
[266,261,260,245,288,270,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,283,254,276,271,279,273],
[300,0,284,270,279,280,288,279],
[267,266,0,277,277,258,270,281],
[296,280,273,0,303,291,306,286],
[274,271,273,247,0,274,271,262],
[279,270,292,259,276,0,291,273],
[271,262,280,244,279,259,0,269],
[277,271,269,264,288,277,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,278,280,276,261,274,271],
[255,0,271,274,282,279,269,262],
[272,279,0,285,280,272,275,266],
[270,276,265,0,272,265,281,262],
[274,268,270,278,0,268,281,257],
[289,271,278,285,282,0,269,280],
[276,281,275,269,269,281,0,286],
[279,288,284,288,293,270,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,247,278,234,214,245,282],
[321,0,266,316,333,300,320,332],
[303,284,0,257,248,326,310,287],
[272,234,293,0,227,238,269,301],
[316,217,302,323,0,275,321,331],
[336,250,224,312,275,0,313,295],
[305,230,240,281,229,237,0,304],
[268,218,263,249,219,255,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,270,271,257,280,289,318],
[278,0,293,303,274,289,307,348],
[280,257,0,265,226,261,281,296],
[279,247,285,0,292,286,277,336],
[293,276,324,258,0,288,326,324],
[270,261,289,264,262,0,272,293],
[261,243,269,273,224,278,0,262],
[232,202,254,214,226,257,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,266,248,260,257,271,261],
[276,0,243,257,263,261,261,243],
[284,307,0,281,273,278,278,273],
[302,293,269,0,288,269,292,289],
[290,287,277,262,0,266,276,267],
[293,289,272,281,284,0,285,284],
[279,289,272,258,274,265,0,254],
[289,307,277,261,283,266,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,267,255,260,272,274,279],
[279,0,280,267,286,275,282,283],
[283,270,0,250,246,277,282,266],
[295,283,300,0,284,275,288,282],
[290,264,304,266,0,272,298,287],
[278,275,273,275,278,0,281,288],
[276,268,268,262,252,269,0,277],
[271,267,284,268,263,262,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,287,272,289,284,283,290],
[251,0,262,262,300,288,282,285],
[263,288,0,250,295,295,284,281],
[278,288,300,0,308,257,303,289],
[261,250,255,242,0,256,253,274],
[266,262,255,293,294,0,275,294],
[267,268,266,247,297,275,0,270],
[260,265,269,261,276,256,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,291,270,290,280,282,286],
[273,0,302,280,316,290,278,280],
[259,248,0,280,262,273,265,279],
[280,270,270,0,274,279,291,271],
[260,234,288,276,0,268,254,271],
[270,260,277,271,282,0,274,272],
[268,272,285,259,296,276,0,282],
[264,270,271,279,279,278,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,277,271,297,294,278,286],
[278,0,282,275,292,285,289,272],
[273,268,0,275,275,300,269,269],
[279,275,275,0,291,285,271,276],
[253,258,275,259,0,280,247,249],
[256,265,250,265,270,0,254,272],
[272,261,281,279,303,296,0,295],
[264,278,281,274,301,278,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,277,257,263,276,275,268],
[287,0,272,275,277,285,288,284],
[273,278,0,257,265,290,282,276],
[293,275,293,0,283,300,294,289],
[287,273,285,267,0,285,302,286],
[274,265,260,250,265,0,264,282],
[275,262,268,256,248,286,0,280],
[282,266,274,261,264,268,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,311,307,325,293,315,275],
[239,0,263,264,263,297,318,245],
[239,287,0,281,299,294,288,249],
[243,286,269,0,272,286,305,254],
[225,287,251,278,0,295,300,256],
[257,253,256,264,255,0,275,245],
[235,232,262,245,250,275,0,224],
[275,305,301,296,294,305,326,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,265,284,281,279,271,275],
[277,0,279,263,290,270,254,273],
[285,271,0,262,293,283,279,264],
[266,287,288,0,285,303,288,287],
[269,260,257,265,0,286,269,251],
[271,280,267,247,264,0,263,262],
[279,296,271,262,281,287,0,275],
[275,277,286,263,299,288,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,272,280,274,293,270,268],
[272,0,282,286,283,272,290,279],
[278,268,0,264,259,262,259,263],
[270,264,286,0,262,281,270,269],
[276,267,291,288,0,276,268,272],
[257,278,288,269,274,0,288,258],
[280,260,291,280,282,262,0,269],
[282,271,287,281,278,292,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,276,269,274,275,286,284],
[273,0,294,288,289,297,292,284],
[274,256,0,295,271,292,263,283],
[281,262,255,0,302,286,282,273],
[276,261,279,248,0,283,276,263],
[275,253,258,264,267,0,267,266],
[264,258,287,268,274,283,0,263],
[266,266,267,277,287,284,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,286,274,310,307,296,285],
[245,0,239,242,237,275,259,253],
[264,311,0,248,279,300,273,268],
[276,308,302,0,272,285,274,262],
[240,313,271,278,0,280,266,249],
[243,275,250,265,270,0,275,256],
[254,291,277,276,284,275,0,279],
[265,297,282,288,301,294,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,305,296,292,278,287,269],
[263,0,284,287,275,254,292,292],
[245,266,0,277,259,246,283,280],
[254,263,273,0,262,268,273,267],
[258,275,291,288,0,282,299,276],
[272,296,304,282,268,0,293,263],
[263,258,267,277,251,257,0,272],
[281,258,270,283,274,287,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,302,293,291,275,301,302],
[258,0,288,269,291,271,258,288],
[248,262,0,263,253,252,288,270],
[257,281,287,0,272,249,285,267],
[259,259,297,278,0,256,277,274],
[275,279,298,301,294,0,304,282],
[249,292,262,265,273,246,0,255],
[248,262,280,283,276,268,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,287,243,301,311,278,295],
[255,0,195,265,355,277,240,382],
[263,355,0,297,291,293,263,246],
[307,285,253,0,320,373,282,311],
[249,195,259,230,0,317,268,280],
[239,273,257,177,233,0,338,316],
[272,310,287,268,282,212,0,331],
[255,168,304,239,270,234,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,267,286,260,270,280,259],
[270,0,271,291,251,257,264,256],
[283,279,0,279,256,265,268,269],
[264,259,271,0,244,252,262,238],
[290,299,294,306,0,273,274,277],
[280,293,285,298,277,0,274,262],
[270,286,282,288,276,276,0,287],
[291,294,281,312,273,288,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,289,254,282,261,259,273],
[265,0,265,260,268,268,257,270],
[261,285,0,261,254,252,256,255],
[296,290,289,0,285,281,260,279],
[268,282,296,265,0,270,282,269],
[289,282,298,269,280,0,280,298],
[291,293,294,290,268,270,0,288],
[277,280,295,271,281,252,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,238,240,235,241,236,243],
[300,0,298,245,248,252,267,245],
[312,252,0,248,244,254,258,264],
[310,305,302,0,275,277,279,277],
[315,302,306,275,0,293,265,292],
[309,298,296,273,257,0,270,240],
[314,283,292,271,285,280,0,286],
[307,305,286,273,258,310,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,269,275,312,250,285,285],
[252,0,299,300,275,275,251,269],
[281,251,0,276,332,282,251,279],
[275,250,274,0,305,246,256,271],
[238,275,218,245,0,262,266,241],
[300,275,268,304,288,0,241,293],
[265,299,299,294,284,309,0,268],
[265,281,271,279,309,257,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,258,268,263,267,261,268],
[256,0,258,263,271,278,260,269],
[292,292,0,266,279,280,274,292],
[282,287,284,0,280,274,269,277],
[287,279,271,270,0,276,275,278],
[283,272,270,276,274,0,263,281],
[289,290,276,281,275,287,0,283],
[282,281,258,273,272,269,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,251,266,256,260,265,275],
[304,0,270,306,295,292,271,308],
[299,280,0,275,283,284,280,290],
[284,244,275,0,256,274,276,266],
[294,255,267,294,0,289,281,296],
[290,258,266,276,261,0,262,295],
[285,279,270,274,269,288,0,303],
[275,242,260,284,254,255,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,278,272,288,221,218,232],
[291,0,254,300,306,270,284,341],
[272,296,0,309,226,249,330,346],
[278,250,241,0,281,228,216,313],
[262,244,324,269,0,259,260,267],
[329,280,301,322,291,0,258,351],
[332,266,220,334,290,292,0,341],
[318,209,204,237,283,199,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,282,271,304,233,275,281],
[289,0,259,244,300,290,269,269],
[268,291,0,243,265,274,315,261],
[279,306,307,0,304,268,272,270],
[246,250,285,246,0,241,277,235],
[317,260,276,282,309,0,339,263],
[275,281,235,278,273,211,0,252],
[269,281,289,280,315,287,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,282,288,290,273,249,256],
[265,0,302,287,274,263,237,275],
[268,248,0,291,279,270,237,235],
[262,263,259,0,266,269,260,277],
[260,276,271,284,0,293,269,278],
[277,287,280,281,257,0,232,267],
[301,313,313,290,281,318,0,261],
[294,275,315,273,272,283,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,278,259,263,257,291,285],
[301,0,293,273,270,286,294,291],
[272,257,0,275,267,278,293,291],
[291,277,275,0,257,271,296,296],
[287,280,283,293,0,275,304,298],
[293,264,272,279,275,0,294,289],
[259,256,257,254,246,256,0,288],
[265,259,259,254,252,261,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,298,270,283,289,284,287],
[270,0,276,276,279,288,274,271],
[252,274,0,266,271,271,268,275],
[280,274,284,0,268,281,273,284],
[267,271,279,282,0,268,261,271],
[261,262,279,269,282,0,260,273],
[266,276,282,277,289,290,0,271],
[263,279,275,266,279,277,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,354,339,305,366,246,291,276],
[196,0,292,271,264,238,272,265],
[211,258,0,236,250,234,283,274],
[245,279,314,0,306,263,261,289],
[184,286,300,244,0,232,224,276],
[304,312,316,287,318,0,252,234],
[259,278,267,289,326,298,0,303],
[274,285,276,261,274,316,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,274,269,283,280,232,245],
[262,0,259,258,272,251,237,259],
[276,291,0,277,258,265,263,253],
[281,292,273,0,285,248,277,266],
[267,278,292,265,0,282,270,261],
[270,299,285,302,268,0,272,269],
[318,313,287,273,280,278,0,289],
[305,291,297,284,289,281,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,268,278,262,301,302,289],
[261,0,273,295,275,293,280,260],
[282,277,0,284,268,298,311,274],
[272,255,266,0,239,274,262,268],
[288,275,282,311,0,297,297,283],
[249,257,252,276,253,0,272,256],
[248,270,239,288,253,278,0,254],
[261,290,276,282,267,294,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,273,260,281,261,239,241],
[274,0,245,252,290,273,256,260],
[277,305,0,281,324,292,269,272],
[290,298,269,0,311,291,284,303],
[269,260,226,239,0,244,254,247],
[289,277,258,259,306,0,282,268],
[311,294,281,266,296,268,0,255],
[309,290,278,247,303,282,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,219,263,322,257,262,221],
[296,0,248,280,262,257,247,323],
[331,302,0,316,313,271,317,297],
[287,270,234,0,277,232,240,240],
[228,288,237,273,0,229,261,304],
[293,293,279,318,321,0,313,265],
[288,303,233,310,289,237,0,315],
[329,227,253,310,246,285,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,253,290,274,249,261,250],
[264,0,256,278,251,252,237,263],
[297,294,0,320,293,269,271,287],
[260,272,230,0,259,233,257,248],
[276,299,257,291,0,261,289,265],
[301,298,281,317,289,0,296,271],
[289,313,279,293,261,254,0,272],
[300,287,263,302,285,279,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,264,269,235,257,268,253],
[294,0,280,287,269,274,268,279],
[286,270,0,304,276,293,273,292],
[281,263,246,0,261,251,263,285],
[315,281,274,289,0,292,291,281],
[293,276,257,299,258,0,283,295],
[282,282,277,287,259,267,0,297],
[297,271,258,265,269,255,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,248,288,277,248,272,259],
[264,0,214,254,256,252,234,239],
[302,336,0,283,299,281,274,274],
[262,296,267,0,277,242,267,295],
[273,294,251,273,0,246,249,269],
[302,298,269,308,304,0,286,280],
[278,316,276,283,301,264,0,274],
[291,311,276,255,281,270,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,300,303,261,278,287,276],
[278,0,276,273,290,268,276,249],
[250,274,0,252,241,263,280,272],
[247,277,298,0,243,246,274,249],
[289,260,309,307,0,285,257,269],
[272,282,287,304,265,0,302,292],
[263,274,270,276,293,248,0,259],
[274,301,278,301,281,258,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,286,258,269,237,253,249],
[265,0,265,280,268,247,274,282],
[264,285,0,263,287,263,271,247],
[292,270,287,0,275,257,279,262],
[281,282,263,275,0,262,283,263],
[313,303,287,293,288,0,287,259],
[297,276,279,271,267,263,0,255],
[301,268,303,288,287,291,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,254,274,276,262,272,268],
[282,0,265,278,275,266,282,294],
[296,285,0,269,286,277,274,279],
[276,272,281,0,257,279,279,284],
[274,275,264,293,0,274,285,288],
[288,284,273,271,276,0,275,285],
[278,268,276,271,265,275,0,286],
[282,256,271,266,262,265,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,280,260,258,236,284,257],
[272,0,297,223,282,262,287,236],
[270,253,0,227,253,265,258,249],
[290,327,323,0,313,255,311,257],
[292,268,297,237,0,229,306,278],
[314,288,285,295,321,0,285,257],
[266,263,292,239,244,265,0,208],
[293,314,301,293,272,293,342,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,293,291,247,286,276,301],
[266,0,277,284,267,261,265,270],
[257,273,0,282,241,269,256,283],
[259,266,268,0,237,274,252,259],
[303,283,309,313,0,298,274,301],
[264,289,281,276,252,0,256,269],
[274,285,294,298,276,294,0,287],
[249,280,267,291,249,281,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,218,245,217,194,171,119],
[371,0,270,349,245,283,315,307],
[332,280,0,310,219,261,259,254],
[305,201,240,0,317,299,216,237],
[333,305,331,233,0,257,230,247],
[356,267,289,251,293,0,192,212],
[379,235,291,334,320,358,0,195],
[431,243,296,313,303,338,355,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,201,191,180,218,201,236],
[284,0,216,239,260,226,290,296],
[349,334,0,328,258,278,279,275],
[359,311,222,0,266,245,262,261],
[370,290,292,284,0,288,249,297],
[332,324,272,305,262,0,210,286],
[349,260,271,288,301,340,0,289],
[314,254,275,289,253,264,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,291,275,275,278,261,272],
[257,0,278,262,276,276,284,274],
[259,272,0,279,273,261,278,275],
[275,288,271,0,278,274,287,294],
[275,274,277,272,0,261,273,284],
[272,274,289,276,289,0,283,284],
[289,266,272,263,277,267,0,288],
[278,276,275,256,266,266,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,295,293,258,240,255,247],
[317,0,339,399,288,286,344,275],
[255,211,0,295,234,243,267,258],
[257,151,255,0,246,220,237,232],
[292,262,316,304,0,288,307,324],
[310,264,307,330,262,0,318,306],
[295,206,283,313,243,232,0,253],
[303,275,292,318,226,244,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,280,283,286,264,258,258],
[251,0,297,232,272,262,247,281],
[270,253,0,268,289,279,278,266],
[267,318,282,0,321,277,255,273],
[264,278,261,229,0,234,222,243],
[286,288,271,273,316,0,232,290],
[292,303,272,295,328,318,0,302],
[292,269,284,277,307,260,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,293,302,274,279,277,285],
[269,0,290,275,271,297,257,291],
[257,260,0,270,284,282,278,275],
[248,275,280,0,277,287,254,268],
[276,279,266,273,0,292,260,273],
[271,253,268,263,258,0,262,284],
[273,293,272,296,290,288,0,292],
[265,259,275,282,277,266,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,266,275,270,248,278,273],
[283,0,279,278,279,255,293,283],
[284,271,0,281,271,260,292,285],
[275,272,269,0,283,252,278,277],
[280,271,279,267,0,275,281,285],
[302,295,290,298,275,0,296,293],
[272,257,258,272,269,254,0,279],
[277,267,265,273,265,257,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,259,250,239,266,245,272],
[285,0,267,282,238,250,243,226],
[291,283,0,297,296,255,254,265],
[300,268,253,0,266,252,252,244],
[311,312,254,284,0,299,292,306],
[284,300,295,298,251,0,272,274],
[305,307,296,298,258,278,0,272],
[278,324,285,306,244,276,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,286,279,273,278,278,276],
[266,0,269,276,263,294,284,284],
[264,281,0,283,275,282,282,278],
[271,274,267,0,274,261,271,281],
[277,287,275,276,0,292,278,303],
[272,256,268,289,258,0,261,275],
[272,266,268,279,272,289,0,285],
[274,266,272,269,247,275,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,345,260,304,307,271,327,428],
[205,0,160,253,249,211,224,340],
[290,390,0,250,336,277,357,422],
[246,297,300,0,227,260,304,432],
[243,301,214,323,0,255,328,380],
[279,339,273,290,295,0,276,340],
[223,326,193,246,222,274,0,319],
[122,210,128,118,170,210,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,273,307,323,303,277,280],
[225,0,234,263,281,269,242,247],
[277,316,0,264,319,312,259,293],
[243,287,286,0,306,290,243,275],
[227,269,231,244,0,240,248,266],
[247,281,238,260,310,0,253,273],
[273,308,291,307,302,297,0,265],
[270,303,257,275,284,277,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,266,285,284,295,283,281],
[280,0,279,284,275,290,299,286],
[284,271,0,293,287,294,286,292],
[265,266,257,0,265,270,273,265],
[266,275,263,285,0,290,280,287],
[255,260,256,280,260,0,268,259],
[267,251,264,277,270,282,0,271],
[269,264,258,285,263,291,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,291,265,259,304,251,273],
[265,0,328,264,272,293,287,245],
[259,222,0,241,231,263,275,236],
[285,286,309,0,252,299,282,268],
[291,278,319,298,0,252,308,274],
[246,257,287,251,298,0,279,277],
[299,263,275,268,242,271,0,246],
[277,305,314,282,276,273,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,387,286,267,269,283,250,270],
[163,0,339,284,259,263,250,323],
[264,211,0,262,267,237,267,241],
[283,266,288,0,370,301,276,268],
[281,291,283,180,0,237,209,224],
[267,287,313,249,313,0,279,240],
[300,300,283,274,341,271,0,256],
[280,227,309,282,326,310,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,281,284,265,269,264,274],
[266,0,296,260,262,281,282,294],
[269,254,0,265,264,240,282,262],
[266,290,285,0,261,267,239,276],
[285,288,286,289,0,294,271,287],
[281,269,310,283,256,0,272,285],
[286,268,268,311,279,278,0,286],
[276,256,288,274,263,265,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,291,278,274,318,294,320],
[242,0,253,208,279,242,280,291],
[259,297,0,232,250,266,274,306],
[272,342,318,0,306,324,326,329],
[276,271,300,244,0,301,298,317],
[232,308,284,226,249,0,280,324],
[256,270,276,224,252,270,0,290],
[230,259,244,221,233,226,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,277,284,294,279,274,274],
[256,0,269,278,265,269,279,277],
[273,281,0,295,291,281,277,282],
[266,272,255,0,271,275,274,288],
[256,285,259,279,0,272,270,260],
[271,281,269,275,278,0,281,269],
[276,271,273,276,280,269,0,285],
[276,273,268,262,290,281,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,281,265,295,265,289,297],
[272,0,275,279,283,260,304,304],
[269,275,0,277,280,276,285,293],
[285,271,273,0,269,259,304,297],
[255,267,270,281,0,253,309,282],
[285,290,274,291,297,0,296,313],
[261,246,265,246,241,254,0,291],
[253,246,257,253,268,237,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,293,288,276,260,277,278],
[285,0,264,285,285,276,267,251],
[257,286,0,286,278,254,265,269],
[262,265,264,0,262,251,260,264],
[274,265,272,288,0,294,281,270],
[290,274,296,299,256,0,296,279],
[273,283,285,290,269,254,0,274],
[272,299,281,286,280,271,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,289,291,282,268,275,281],
[262,0,285,264,268,268,264,270],
[261,265,0,255,286,276,274,262],
[259,286,295,0,279,287,275,266],
[268,282,264,271,0,287,291,269],
[282,282,274,263,263,0,290,287],
[275,286,276,275,259,260,0,262],
[269,280,288,284,281,263,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,286,281,272,284,282,267],
[286,0,286,285,303,285,293,264],
[264,264,0,273,272,274,263,259],
[269,265,277,0,273,263,262,251],
[278,247,278,277,0,254,257,242],
[266,265,276,287,296,0,280,265],
[268,257,287,288,293,270,0,278],
[283,286,291,299,308,285,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,269,270,272,254,293,287],
[266,0,247,246,236,269,245,268],
[281,303,0,261,288,252,262,259],
[280,304,289,0,305,270,295,283],
[278,314,262,245,0,260,285,307],
[296,281,298,280,290,0,267,311],
[257,305,288,255,265,283,0,287],
[263,282,291,267,243,239,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,308,436,322,331,331,369],
[320,0,264,334,307,309,278,238],
[242,286,0,371,310,312,263,425],
[114,216,179,0,238,273,166,179],
[228,243,240,312,0,233,252,289],
[219,241,238,277,317,0,242,340],
[219,272,287,384,298,308,0,282],
[181,312,125,371,261,210,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,277,304,285,274,288,267],
[278,0,294,291,260,285,278,277],
[273,256,0,284,258,275,277,275],
[246,259,266,0,252,259,256,267],
[265,290,292,298,0,268,277,288],
[276,265,275,291,282,0,278,283],
[262,272,273,294,273,272,0,268],
[283,273,275,283,262,267,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,263,272,289,290,245,287],
[253,0,261,257,265,283,239,257],
[287,289,0,280,286,313,275,286],
[278,293,270,0,280,286,261,286],
[261,285,264,270,0,291,253,273],
[260,267,237,264,259,0,248,263],
[305,311,275,289,297,302,0,293],
[263,293,264,264,277,287,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,287,297,317,282,280,264],
[271,0,302,316,313,273,288,284],
[263,248,0,283,311,272,263,277],
[253,234,267,0,276,259,263,270],
[233,237,239,274,0,230,237,259],
[268,277,278,291,320,0,259,290],
[270,262,287,287,313,291,0,293],
[286,266,273,280,291,260,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,260,262,259,253,273,244],
[291,0,281,268,267,260,268,263],
[290,269,0,270,273,260,274,264],
[288,282,280,0,269,247,263,265],
[291,283,277,281,0,270,267,266],
[297,290,290,303,280,0,275,274],
[277,282,276,287,283,275,0,277],
[306,287,286,285,284,276,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,300,230,263,234,226,251],
[299,0,309,277,276,235,284,227],
[250,241,0,220,202,214,192,192],
[320,273,330,0,310,305,245,289],
[287,274,348,240,0,286,269,269],
[316,315,336,245,264,0,254,273],
[324,266,358,305,281,296,0,299],
[299,323,358,261,281,277,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,351,274,206,256,342,263,281],
[199,0,406,271,297,276,366,209],
[276,144,0,296,309,230,366,260],
[344,279,254,0,272,291,372,293],
[294,253,241,278,0,255,375,312],
[208,274,320,259,295,0,318,235],
[287,184,184,178,175,232,0,221],
[269,341,290,257,238,315,329,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,275,239,194,233,310,222],
[332,0,253,276,267,325,256,285],
[275,297,0,246,305,264,260,327],
[311,274,304,0,308,267,264,271],
[356,283,245,242,0,331,291,318],
[317,225,286,283,219,0,286,276],
[240,294,290,286,259,264,0,264],
[328,265,223,279,232,274,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,275,287,308,301,287,293],
[276,0,300,259,284,297,281,280],
[275,250,0,251,291,277,269,264],
[263,291,299,0,284,297,263,293],
[242,266,259,266,0,276,270,262],
[249,253,273,253,274,0,246,262],
[263,269,281,287,280,304,0,280],
[257,270,286,257,288,288,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,304,279,285,245,258,282],
[264,0,334,294,311,287,292,286],
[246,216,0,288,259,262,238,250],
[271,256,262,0,233,261,262,302],
[265,239,291,317,0,296,283,313],
[305,263,288,289,254,0,283,284],
[292,258,312,288,267,267,0,315],
[268,264,300,248,237,266,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,242,237,267,276,262,275],
[299,0,276,232,261,283,293,271],
[308,274,0,280,278,318,269,275],
[313,318,270,0,266,309,296,293],
[283,289,272,284,0,315,296,280],
[274,267,232,241,235,0,274,290],
[288,257,281,254,254,276,0,266],
[275,279,275,257,270,260,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,280,319,280,324,275,278],
[259,0,235,318,294,308,265,256],
[270,315,0,330,294,351,321,293],
[231,232,220,0,233,265,227,225],
[270,256,256,317,0,299,274,287],
[226,242,199,285,251,0,222,220],
[275,285,229,323,276,328,0,262],
[272,294,257,325,263,330,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,256,271,278,276,280,275],
[265,0,264,258,262,269,268,278],
[294,286,0,273,288,295,275,288],
[279,292,277,0,284,262,249,258],
[272,288,262,266,0,265,276,263],
[274,281,255,288,285,0,278,273],
[270,282,275,301,274,272,0,275],
[275,272,262,292,287,277,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,262,266,282,250,263,271],
[289,0,294,267,278,267,271,275],
[288,256,0,251,272,279,251,277],
[284,283,299,0,271,282,267,290],
[268,272,278,279,0,266,271,275],
[300,283,271,268,284,0,277,284],
[287,279,299,283,279,273,0,277],
[279,275,273,260,275,266,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,280,294,290,289,311,264],
[247,0,303,284,277,261,268,246],
[270,247,0,282,282,239,331,281],
[256,266,268,0,296,300,274,250],
[260,273,268,254,0,253,274,302],
[261,289,311,250,297,0,290,287],
[239,282,219,276,276,260,0,249],
[286,304,269,300,248,263,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,268,258,266,295,286,274],
[298,0,275,273,297,321,310,289],
[282,275,0,298,286,282,299,268],
[292,277,252,0,275,288,271,279],
[284,253,264,275,0,285,282,289],
[255,229,268,262,265,0,289,277],
[264,240,251,279,268,261,0,263],
[276,261,282,271,261,273,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,310,248,214,223,270,257],
[285,0,346,312,252,292,317,292],
[240,204,0,192,183,175,210,207],
[302,238,358,0,240,297,335,274],
[336,298,367,310,0,275,289,268],
[327,258,375,253,275,0,302,266],
[280,233,340,215,261,248,0,257],
[293,258,343,276,282,284,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,297,284,276,282,271,276],
[272,0,293,291,289,274,265,278],
[253,257,0,289,270,267,260,260],
[266,259,261,0,243,260,252,248],
[274,261,280,307,0,274,270,271],
[268,276,283,290,276,0,254,265],
[279,285,290,298,280,296,0,266],
[274,272,290,302,279,285,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,283,283,289,293,297,270],
[285,0,285,275,278,295,301,288],
[267,265,0,286,266,287,283,263],
[267,275,264,0,276,277,289,265],
[261,272,284,274,0,287,291,271],
[257,255,263,273,263,0,270,242],
[253,249,267,261,259,280,0,259],
[280,262,287,285,279,308,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,326,326,253,355,304,393,300],
[224,0,296,157,226,268,334,244],
[224,254,0,287,325,304,306,289],
[297,393,263,0,308,271,311,296],
[195,324,225,242,0,266,295,269],
[246,282,246,279,284,0,309,269],
[157,216,244,239,255,241,0,207],
[250,306,261,254,281,281,343,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,309,262,229,251,304,257],
[291,0,340,264,268,273,310,261],
[241,210,0,254,233,238,313,233],
[288,286,296,0,270,291,322,275],
[321,282,317,280,0,300,340,268],
[299,277,312,259,250,0,327,278],
[246,240,237,228,210,223,0,221],
[293,289,317,275,282,272,329,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,269,276,291,296,279,296],
[272,0,271,270,301,277,272,282],
[281,279,0,270,286,291,280,258],
[274,280,280,0,299,278,276,286],
[259,249,264,251,0,262,281,273],
[254,273,259,272,288,0,287,282],
[271,278,270,274,269,263,0,274],
[254,268,292,264,277,268,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,255,270,262,245,285,268],
[302,0,268,294,266,282,291,283],
[295,282,0,278,275,300,304,298],
[280,256,272,0,259,275,287,268],
[288,284,275,291,0,284,284,293],
[305,268,250,275,266,0,274,270],
[265,259,246,263,266,276,0,277],
[282,267,252,282,257,280,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,252,298,271,282,287,274],
[307,0,262,311,286,286,288,285],
[298,288,0,303,311,268,287,291],
[252,239,247,0,246,245,254,259],
[279,264,239,304,0,264,281,281],
[268,264,282,305,286,0,291,273],
[263,262,263,296,269,259,0,267],
[276,265,259,291,269,277,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,282,253,185,268,261,180],
[283,0,234,289,293,298,267,256],
[268,316,0,289,262,266,266,264],
[297,261,261,0,210,239,214,277],
[365,257,288,340,0,279,261,293],
[282,252,284,311,271,0,220,246],
[289,283,284,336,289,330,0,266],
[370,294,286,273,257,304,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,265,225,277,247,234,257],
[316,0,292,275,311,260,266,277],
[285,258,0,251,275,245,248,286],
[325,275,299,0,302,294,283,318],
[273,239,275,248,0,244,227,276],
[303,290,305,256,306,0,269,285],
[316,284,302,267,323,281,0,302],
[293,273,264,232,274,265,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,284,279,281,288,289,272],
[251,0,261,266,280,258,270,262],
[266,289,0,269,288,268,288,267],
[271,284,281,0,284,283,279,267],
[269,270,262,266,0,262,270,266],
[262,292,282,267,288,0,277,277],
[261,280,262,271,280,273,0,269],
[278,288,283,283,284,273,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,260,282,257,282,269,303],
[292,0,313,283,311,282,287,264],
[290,237,0,256,247,248,256,280],
[268,267,294,0,257,279,277,290],
[293,239,303,293,0,307,286,271],
[268,268,302,271,243,0,302,292],
[281,263,294,273,264,248,0,314],
[247,286,270,260,279,258,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,289,285,281,289,259,300],
[284,0,298,278,282,300,270,300],
[261,252,0,270,251,260,247,261],
[265,272,280,0,281,285,275,282],
[269,268,299,269,0,291,273,290],
[261,250,290,265,259,0,264,278],
[291,280,303,275,277,286,0,308],
[250,250,289,268,260,272,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,300,317,283,290,276,288],
[327,0,248,300,248,335,260,309],
[250,302,0,308,279,250,296,254],
[233,250,242,0,268,279,291,246],
[267,302,271,282,0,279,265,293],
[260,215,300,271,271,0,272,224],
[274,290,254,259,285,278,0,286],
[262,241,296,304,257,326,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,289,291,275,294,267,278],
[273,0,266,285,281,258,253,266],
[261,284,0,302,268,270,274,268],
[259,265,248,0,250,257,257,272],
[275,269,282,300,0,276,286,265],
[256,292,280,293,274,0,262,273],
[283,297,276,293,264,288,0,268],
[272,284,282,278,285,277,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,230,288,266,235,252,239],
[273,0,248,286,264,243,271,281],
[320,302,0,278,270,256,291,287],
[262,264,272,0,282,283,272,267],
[284,286,280,268,0,262,281,274],
[315,307,294,267,288,0,301,286],
[298,279,259,278,269,249,0,253],
[311,269,263,283,276,264,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,277,278,282,284,281,279],
[282,0,268,274,282,285,278,282],
[273,282,0,276,288,301,286,310],
[272,276,274,0,267,271,269,297],
[268,268,262,283,0,289,272,296],
[266,265,249,279,261,0,279,277],
[269,272,264,281,278,271,0,291],
[271,268,240,253,254,273,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,253,266,230,203,198,242],
[340,0,296,270,296,281,311,280],
[297,254,0,255,218,229,231,245],
[284,280,295,0,274,285,272,238],
[320,254,332,276,0,312,263,265],
[347,269,321,265,238,0,264,308],
[352,239,319,278,287,286,0,272],
[308,270,305,312,285,242,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,269,277,282,267,280,274],
[267,0,256,267,259,249,281,280],
[281,294,0,277,288,279,266,271],
[273,283,273,0,281,256,271,270],
[268,291,262,269,0,271,282,287],
[283,301,271,294,279,0,284,282],
[270,269,284,279,268,266,0,282],
[276,270,279,280,263,268,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,295,306,272,286,324,295],
[237,0,235,271,273,287,304,252],
[255,315,0,275,290,302,292,288],
[244,279,275,0,270,292,288,264],
[278,277,260,280,0,292,295,266],
[264,263,248,258,258,0,273,269],
[226,246,258,262,255,277,0,247],
[255,298,262,286,284,281,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,267,276,279,257,284,201],
[332,0,288,254,236,317,287,212],
[283,262,0,277,280,340,335,259],
[274,296,273,0,330,314,326,313],
[271,314,270,220,0,284,234,248],
[293,233,210,236,266,0,274,229],
[266,263,215,224,316,276,0,249],
[349,338,291,237,302,321,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,285,287,274,264,265,276],
[314,0,287,298,259,294,276,277],
[265,263,0,263,270,248,243,266],
[263,252,287,0,266,257,275,259],
[276,291,280,284,0,281,245,292],
[286,256,302,293,269,0,258,256],
[285,274,307,275,305,292,0,306],
[274,273,284,291,258,294,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,307,274,260,275,322,337],
[263,0,254,262,263,270,277,295],
[243,296,0,277,268,259,300,302],
[276,288,273,0,280,263,297,300],
[290,287,282,270,0,265,278,303],
[275,280,291,287,285,0,272,288],
[228,273,250,253,272,278,0,292],
[213,255,248,250,247,262,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,295,299,298,278,277,260],
[274,0,269,269,277,284,249,260],
[255,281,0,274,263,272,247,222],
[251,281,276,0,277,296,230,262],
[252,273,287,273,0,274,244,249],
[272,266,278,254,276,0,239,243],
[273,301,303,320,306,311,0,275],
[290,290,328,288,301,307,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,314,296,265,305,315,292],
[255,0,319,306,282,297,311,320],
[236,231,0,281,242,256,260,302],
[254,244,269,0,282,276,277,294],
[285,268,308,268,0,272,276,288],
[245,253,294,274,278,0,272,296],
[235,239,290,273,274,278,0,263],
[258,230,248,256,262,254,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,333,320,278,292,296,275,287],
[217,0,241,239,232,232,235,244],
[230,309,0,226,283,268,257,292],
[272,311,324,0,269,284,275,254],
[258,318,267,281,0,277,296,260],
[254,318,282,266,273,0,279,273],
[275,315,293,275,254,271,0,288],
[263,306,258,296,290,277,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,278,270,258,292,272,283],
[296,0,262,280,264,292,280,259],
[272,288,0,271,263,290,284,261],
[280,270,279,0,287,316,287,290],
[292,286,287,263,0,316,287,298],
[258,258,260,234,234,0,254,247],
[278,270,266,263,263,296,0,271],
[267,291,289,260,252,303,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,281,278,275,291,277,280],
[250,0,272,253,256,273,268,260],
[269,278,0,275,273,267,285,279],
[272,297,275,0,274,288,286,285],
[275,294,277,276,0,294,285,275],
[259,277,283,262,256,0,263,268],
[273,282,265,264,265,287,0,275],
[270,290,271,265,275,282,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,267,306,316,309,272,320],
[254,0,281,297,309,313,275,314],
[283,269,0,284,329,298,292,321],
[244,253,266,0,285,271,250,300],
[234,241,221,265,0,261,247,253],
[241,237,252,279,289,0,259,298],
[278,275,258,300,303,291,0,292],
[230,236,229,250,297,252,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,288,295,292,283,296,265],
[269,0,291,303,290,271,303,253],
[262,259,0,276,265,263,276,229],
[255,247,274,0,274,243,290,254],
[258,260,285,276,0,261,296,248],
[267,279,287,307,289,0,312,276],
[254,247,274,260,254,238,0,236],
[285,297,321,296,302,274,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,295,285,289,304,297,286],
[283,0,282,293,303,295,283,271],
[255,268,0,284,267,293,280,271],
[265,257,266,0,298,301,277,276],
[261,247,283,252,0,268,277,262],
[246,255,257,249,282,0,283,263],
[253,267,270,273,273,267,0,238],
[264,279,279,274,288,287,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,241,241,223,256,193,220],
[346,0,266,271,248,328,241,312],
[309,284,0,268,270,252,224,298],
[309,279,282,0,273,330,264,315],
[327,302,280,277,0,265,278,330],
[294,222,298,220,285,0,250,321],
[357,309,326,286,272,300,0,357],
[330,238,252,235,220,229,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,301,283,305,307,269,300],
[260,0,261,263,287,262,247,260],
[249,289,0,265,276,244,252,241],
[267,287,285,0,276,269,282,267],
[245,263,274,274,0,255,250,248],
[243,288,306,281,295,0,269,258],
[281,303,298,268,300,281,0,285],
[250,290,309,283,302,292,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,307,275,296,296,294,293],
[259,0,288,256,258,273,292,253],
[243,262,0,280,302,272,292,281],
[275,294,270,0,277,288,280,268],
[254,292,248,273,0,260,272,231],
[254,277,278,262,290,0,274,278],
[256,258,258,270,278,276,0,254],
[257,297,269,282,319,272,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,310,271,340,277,300,340],
[232,0,254,218,233,230,221,259],
[240,296,0,252,296,273,311,285],
[279,332,298,0,298,267,274,320],
[210,317,254,252,0,254,237,298],
[273,320,277,283,296,0,249,327],
[250,329,239,276,313,301,0,310],
[210,291,265,230,252,223,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,280,292,284,276,292,272],
[261,0,258,266,285,258,270,269],
[270,292,0,272,285,285,282,292],
[258,284,278,0,285,281,275,296],
[266,265,265,265,0,261,273,270],
[274,292,265,269,289,0,270,283],
[258,280,268,275,277,280,0,272],
[278,281,258,254,280,267,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,209,298,279,289,343,278],
[288,0,289,259,220,314,369,327],
[341,261,0,313,238,326,294,278],
[252,291,237,0,212,229,232,240],
[271,330,312,338,0,256,321,289],
[261,236,224,321,294,0,325,278],
[207,181,256,318,229,225,0,244],
[272,223,272,310,261,272,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,256,286,286,276,290,278],
[251,0,239,270,295,226,247,249],
[294,311,0,310,308,297,294,261],
[264,280,240,0,303,253,252,265],
[264,255,242,247,0,255,261,247],
[274,324,253,297,295,0,288,265],
[260,303,256,298,289,262,0,280],
[272,301,289,285,303,285,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,278,284,275,289,273,276],
[259,0,276,273,238,267,261,261],
[272,274,0,275,277,263,282,243],
[266,277,275,0,269,273,276,260],
[275,312,273,281,0,312,273,266],
[261,283,287,277,238,0,235,250],
[277,289,268,274,277,315,0,240],
[274,289,307,290,284,300,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,293,308,299,292,275,282],
[269,0,297,283,286,288,284,260],
[257,253,0,295,300,284,285,277],
[242,267,255,0,270,267,262,247],
[251,264,250,280,0,272,262,246],
[258,262,266,283,278,0,263,254],
[275,266,265,288,288,287,0,263],
[268,290,273,303,304,296,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,237,265,252,348,353,404],
[269,0,300,326,240,246,310,356],
[313,250,0,368,275,265,363,370],
[285,224,182,0,219,241,296,353],
[298,310,275,331,0,302,332,347],
[202,304,285,309,248,0,303,326],
[197,240,187,254,218,247,0,252],
[146,194,180,197,203,224,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,262,252,265,275,265,254],
[295,0,264,265,285,267,277,251],
[288,286,0,261,300,294,278,280],
[298,285,289,0,304,289,288,265],
[285,265,250,246,0,265,265,262],
[275,283,256,261,285,0,268,264],
[285,273,272,262,285,282,0,270],
[296,299,270,285,288,286,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,278,298,234,277,268,255],
[282,0,297,282,241,246,245,273],
[272,253,0,275,239,253,252,304],
[252,268,275,0,241,251,246,248],
[316,309,311,309,0,266,277,297],
[273,304,297,299,284,0,298,282],
[282,305,298,304,273,252,0,317],
[295,277,246,302,253,268,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,253,220,298,277,213,256],
[332,0,309,296,342,322,255,305],
[297,241,0,249,307,258,213,252],
[330,254,301,0,355,270,300,303],
[252,208,243,195,0,227,214,215],
[273,228,292,280,323,0,285,270],
[337,295,337,250,336,265,0,247],
[294,245,298,247,335,280,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,231,284,344,278,314,298],
[239,0,235,245,329,161,299,253],
[319,315,0,298,309,258,274,283],
[266,305,252,0,370,204,285,288],
[206,221,241,180,0,200,226,241],
[272,389,292,346,350,0,297,319],
[236,251,276,265,324,253,0,276],
[252,297,267,262,309,231,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,331,264,277,285,280,318,299],
[219,0,305,282,280,322,286,299],
[286,245,0,276,321,310,279,338],
[273,268,274,0,235,289,250,307],
[265,270,229,315,0,289,242,288],
[270,228,240,261,261,0,260,271],
[232,264,271,300,308,290,0,311],
[251,251,212,243,262,279,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,289,268,290,276,278,260],
[272,0,286,288,302,291,274,286],
[261,264,0,285,292,276,273,274],
[282,262,265,0,281,275,245,260],
[260,248,258,269,0,265,249,246],
[274,259,274,275,285,0,277,279],
[272,276,277,305,301,273,0,268],
[290,264,276,290,304,271,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,291,251,259,359,275,294],
[237,0,246,258,229,287,310,316],
[259,304,0,229,245,293,214,282],
[299,292,321,0,275,278,327,338],
[291,321,305,275,0,249,273,302],
[191,263,257,272,301,0,225,246],
[275,240,336,223,277,325,0,300],
[256,234,268,212,248,304,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,280,259,255,261,240,266],
[277,0,256,289,263,260,252,245],
[270,294,0,297,285,298,282,294],
[291,261,253,0,262,269,243,269],
[295,287,265,288,0,251,248,282],
[289,290,252,281,299,0,251,262],
[310,298,268,307,302,299,0,301],
[284,305,256,281,268,288,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,278,282,273,286,287,282],
[267,0,278,270,267,272,275,265],
[272,272,0,283,284,301,299,260],
[268,280,267,0,269,286,284,272],
[277,283,266,281,0,292,299,287],
[264,278,249,264,258,0,261,258],
[263,275,251,266,251,289,0,275],
[268,285,290,278,263,292,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,272,333,279,280,302,312],
[289,0,292,324,249,268,269,259],
[278,258,0,317,274,240,281,342],
[217,226,233,0,256,217,221,247],
[271,301,276,294,0,224,281,286],
[270,282,310,333,326,0,292,276],
[248,281,269,329,269,258,0,265],
[238,291,208,303,264,274,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,283,289,283,269,270,290],
[249,0,255,279,260,282,266,268],
[267,295,0,301,262,291,257,303],
[261,271,249,0,260,261,262,293],
[267,290,288,290,0,294,294,280],
[281,268,259,289,256,0,268,275],
[280,284,293,288,256,282,0,280],
[260,282,247,257,270,275,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,275,279,275,281,282,280],
[262,0,244,255,275,250,259,275],
[275,306,0,276,288,258,259,274],
[271,295,274,0,265,273,272,272],
[275,275,262,285,0,276,272,271],
[269,300,292,277,274,0,278,271],
[268,291,291,278,278,272,0,282],
[270,275,276,278,279,279,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,274,296,271,280,301,290],
[258,0,247,265,236,252,253,261],
[276,303,0,304,278,267,291,291],
[254,285,246,0,279,263,273,280],
[279,314,272,271,0,278,263,291],
[270,298,283,287,272,0,278,298],
[249,297,259,277,287,272,0,295],
[260,289,259,270,259,252,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,293,317,314,269,347,279],
[227,0,246,285,249,275,358,258],
[257,304,0,352,304,236,300,283],
[233,265,198,0,225,250,266,234],
[236,301,246,325,0,206,346,260],
[281,275,314,300,344,0,352,300],
[203,192,250,284,204,198,0,259],
[271,292,267,316,290,250,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,250,271,271,272,260,242],
[287,0,274,273,275,270,273,253],
[300,276,0,287,281,280,265,264],
[279,277,263,0,272,260,271,261],
[279,275,269,278,0,275,266,267],
[278,280,270,290,275,0,280,251],
[290,277,285,279,284,270,0,283],
[308,297,286,289,283,299,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,264,285,333,270,273,279],
[264,0,297,311,291,286,285,288],
[286,253,0,286,306,278,260,269],
[265,239,264,0,271,273,237,282],
[217,259,244,279,0,252,241,248],
[280,264,272,277,298,0,244,272],
[277,265,290,313,309,306,0,261],
[271,262,281,268,302,278,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,294,280,278,274,289,281],
[273,0,284,270,273,264,281,275],
[256,266,0,270,282,264,268,256],
[270,280,280,0,266,266,268,253],
[272,277,268,284,0,272,281,273],
[276,286,286,284,278,0,299,261],
[261,269,282,282,269,251,0,278],
[269,275,294,297,277,289,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,266,261,270,246,254,276],
[299,0,289,270,280,277,294,277],
[284,261,0,256,270,260,249,278],
[289,280,294,0,258,266,289,287],
[280,270,280,292,0,259,281,286],
[304,273,290,284,291,0,287,302],
[296,256,301,261,269,263,0,273],
[274,273,272,263,264,248,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,282,280,241,275,287,287],
[293,0,273,261,256,264,260,248],
[268,277,0,251,244,260,284,225],
[270,289,299,0,263,265,268,257],
[309,294,306,287,0,283,308,261],
[275,286,290,285,267,0,303,269],
[263,290,266,282,242,247,0,262],
[263,302,325,293,289,281,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,252,264,276,285,275,258],
[283,0,268,249,271,296,263,271],
[298,282,0,284,286,308,300,268],
[286,301,266,0,309,324,321,302],
[274,279,264,241,0,278,287,278],
[265,254,242,226,272,0,264,256],
[275,287,250,229,263,286,0,270],
[292,279,282,248,272,294,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,344,297,307,298,308,269,280],
[206,0,288,253,255,255,229,250],
[253,262,0,283,266,268,251,262],
[243,297,267,0,283,253,249,268],
[252,295,284,267,0,271,259,254],
[242,295,282,297,279,0,258,255],
[281,321,299,301,291,292,0,273],
[270,300,288,282,296,295,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,298,277,296,273,271,307],
[270,0,298,286,287,294,277,297],
[252,252,0,272,278,289,255,282],
[273,264,278,0,290,288,278,287],
[254,263,272,260,0,269,269,287],
[277,256,261,262,281,0,272,279],
[279,273,295,272,281,278,0,291],
[243,253,268,263,263,271,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,248,285,384,278,297,281],
[324,0,340,218,379,325,236,383],
[302,210,0,236,337,254,313,280],
[265,332,314,0,381,343,266,304],
[166,171,213,169,0,269,200,248],
[272,225,296,207,281,0,281,283],
[253,314,237,284,350,269,0,272],
[269,167,270,246,302,267,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,271,281,283,297,278,285],
[269,0,280,269,277,271,267,273],
[279,270,0,241,264,271,277,267],
[269,281,309,0,279,274,250,280],
[267,273,286,271,0,272,259,275],
[253,279,279,276,278,0,289,293],
[272,283,273,300,291,261,0,267],
[265,277,283,270,275,257,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,270,284,263,301,275,269],
[267,0,278,270,265,283,271,265],
[280,272,0,276,281,287,280,265],
[266,280,274,0,254,279,265,263],
[287,285,269,296,0,294,279,275],
[249,267,263,271,256,0,262,245],
[275,279,270,285,271,288,0,269],
[281,285,285,287,275,305,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,231,279,303,260,275,254],
[273,0,235,267,308,272,291,242],
[319,315,0,304,337,287,305,271],
[271,283,246,0,284,265,285,250],
[247,242,213,266,0,257,270,257],
[290,278,263,285,293,0,286,275],
[275,259,245,265,280,264,0,203],
[296,308,279,300,293,275,347,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,250,259,299,250,397,281],
[276,0,292,286,252,243,367,274],
[300,258,0,297,228,241,343,277],
[291,264,253,0,245,246,353,273],
[251,298,322,305,0,299,399,357],
[300,307,309,304,251,0,425,341],
[153,183,207,197,151,125,0,196],
[269,276,273,277,193,209,354,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,264,277,261,261,271,272],
[283,0,280,274,274,264,287,284],
[286,270,0,284,282,278,291,290],
[273,276,266,0,274,256,277,289],
[289,276,268,276,0,268,277,298],
[289,286,272,294,282,0,299,284],
[279,263,259,273,273,251,0,279],
[278,266,260,261,252,266,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,270,289,281,280,267,281],
[261,0,279,292,267,273,278,296],
[280,271,0,276,265,240,257,282],
[261,258,274,0,262,263,253,267],
[269,283,285,288,0,275,266,293],
[270,277,310,287,275,0,277,291],
[283,272,293,297,284,273,0,305],
[269,254,268,283,257,259,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,266,237,175,298,301,257],
[323,0,282,324,267,272,320,263],
[284,268,0,276,289,288,301,232],
[313,226,274,0,273,276,286,283],
[375,283,261,277,0,279,341,278],
[252,278,262,274,271,0,308,238],
[249,230,249,264,209,242,0,219],
[293,287,318,267,272,312,331,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,267,272,247,279,256,251],
[265,0,275,259,251,256,248,267],
[283,275,0,289,249,273,285,281],
[278,291,261,0,259,275,247,267],
[303,299,301,291,0,271,277,301],
[271,294,277,275,279,0,256,270],
[294,302,265,303,273,294,0,286],
[299,283,269,283,249,280,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,268,270,248,254,260,240],
[308,0,278,265,275,268,268,286],
[282,272,0,269,271,267,260,269],
[280,285,281,0,277,284,281,272],
[302,275,279,273,0,286,285,293],
[296,282,283,266,264,0,267,266],
[290,282,290,269,265,283,0,283],
[310,264,281,278,257,284,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,277,288,269,277,319,293],
[261,0,259,255,249,257,247,220],
[273,291,0,234,264,220,242,275],
[262,295,316,0,316,292,300,254],
[281,301,286,234,0,200,315,274],
[273,293,330,258,350,0,287,261],
[231,303,308,250,235,263,0,262],
[257,330,275,296,276,289,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,297,301,281,271,285,290],
[282,0,302,291,283,278,256,292],
[253,248,0,277,261,254,266,278],
[249,259,273,0,241,251,256,276],
[269,267,289,309,0,260,273,297],
[279,272,296,299,290,0,285,291],
[265,294,284,294,277,265,0,300],
[260,258,272,274,253,259,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,287,284,288,275,292,275],
[247,0,297,294,241,257,263,250],
[263,253,0,274,263,256,269,251],
[266,256,276,0,256,251,257,255],
[262,309,287,294,0,278,271,265],
[275,293,294,299,272,0,274,268],
[258,287,281,293,279,276,0,284],
[275,300,299,295,285,282,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,264,220,248,277,245,275],
[296,0,281,250,260,294,269,275],
[286,269,0,257,242,270,263,264],
[330,300,293,0,267,301,279,315],
[302,290,308,283,0,294,269,280],
[273,256,280,249,256,0,247,265],
[305,281,287,271,281,303,0,280],
[275,275,286,235,270,285,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,264,279,261,257,266,295],
[269,0,269,253,274,273,281,285],
[286,281,0,264,273,284,286,302],
[271,297,286,0,276,277,278,303],
[289,276,277,274,0,282,276,310],
[293,277,266,273,268,0,269,300],
[284,269,264,272,274,281,0,281],
[255,265,248,247,240,250,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,274,278,271,259,280,270],
[259,0,278,269,258,250,262,272],
[276,272,0,267,280,285,291,270],
[272,281,283,0,264,270,293,283],
[279,292,270,286,0,268,274,262],
[291,300,265,280,282,0,284,292],
[270,288,259,257,276,266,0,261],
[280,278,280,267,288,258,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,269,279,274,282,268,260],
[271,0,299,261,294,276,275,260],
[281,251,0,259,268,280,263,275],
[271,289,291,0,281,292,297,277],
[276,256,282,269,0,287,297,291],
[268,274,270,258,263,0,272,251],
[282,275,287,253,253,278,0,271],
[290,290,275,273,259,299,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,291,279,289,297,271,295],
[237,0,277,269,248,255,229,255],
[259,273,0,266,267,271,265,288],
[271,281,284,0,286,267,243,276],
[261,302,283,264,0,263,264,267],
[253,295,279,283,287,0,239,280],
[279,321,285,307,286,311,0,264],
[255,295,262,274,283,270,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,269,275,261,288,268,287],
[262,0,277,245,246,265,267,260],
[281,273,0,300,284,297,273,265],
[275,305,250,0,272,263,284,284],
[289,304,266,278,0,301,291,282],
[262,285,253,287,249,0,255,264],
[282,283,277,266,259,295,0,285],
[263,290,285,266,268,286,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,265,258,272,280,260,276],
[286,0,268,273,276,269,260,285],
[285,282,0,269,288,261,280,300],
[292,277,281,0,269,291,277,296],
[278,274,262,281,0,275,282,284],
[270,281,289,259,275,0,269,289],
[290,290,270,273,268,281,0,290],
[274,265,250,254,266,261,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,266,276,280,283,320,299],
[275,0,269,273,279,280,308,291],
[284,281,0,271,270,316,296,307],
[274,277,279,0,269,296,279,325],
[270,271,280,281,0,315,299,335],
[267,270,234,254,235,0,262,274],
[230,242,254,271,251,288,0,263],
[251,259,243,225,215,276,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,269,255,230,260,231,266],
[289,0,276,275,261,276,251,286],
[281,274,0,261,266,290,285,295],
[295,275,289,0,277,289,265,292],
[320,289,284,273,0,290,279,306],
[290,274,260,261,260,0,258,309],
[319,299,265,285,271,292,0,290],
[284,264,255,258,244,241,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,286,289,275,281,278,269],
[265,0,304,299,279,265,277,290],
[264,246,0,254,297,250,259,291],
[261,251,296,0,254,248,275,291],
[275,271,253,296,0,249,303,250],
[269,285,300,302,301,0,281,287],
[272,273,291,275,247,269,0,294],
[281,260,259,259,300,263,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,281,287,311,266,284,322],
[249,0,262,251,302,215,246,307],
[269,288,0,264,297,243,282,302],
[263,299,286,0,268,261,269,267],
[239,248,253,282,0,257,245,279],
[284,335,307,289,293,0,274,324],
[266,304,268,281,305,276,0,303],
[228,243,248,283,271,226,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,273,273,256,312,274,308],
[285,0,319,300,300,293,297,273],
[277,231,0,258,260,282,279,287],
[277,250,292,0,276,289,288,290],
[294,250,290,274,0,265,290,302],
[238,257,268,261,285,0,298,279],
[276,253,271,262,260,252,0,249],
[242,277,263,260,248,271,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,306,275,281,291,275,271],
[261,0,282,265,262,266,271,277],
[244,268,0,257,271,275,274,262],
[275,285,293,0,299,282,271,277],
[269,288,279,251,0,254,268,259],
[259,284,275,268,296,0,273,264],
[275,279,276,279,282,277,0,267],
[279,273,288,273,291,286,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,263,263,258,253,248,262],
[273,0,263,245,245,265,247,270],
[287,287,0,279,275,270,257,280],
[287,305,271,0,275,278,273,276],
[292,305,275,275,0,277,282,282],
[297,285,280,272,273,0,278,270],
[302,303,293,277,268,272,0,284],
[288,280,270,274,268,280,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,285,269,282,285,293,261],
[264,0,261,273,274,269,293,269],
[265,289,0,263,280,277,286,280],
[281,277,287,0,274,270,275,273],
[268,276,270,276,0,274,286,266],
[265,281,273,280,276,0,288,292],
[257,257,264,275,264,262,0,265],
[289,281,270,277,284,258,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,274,300,358,234,247,281],
[280,0,302,291,349,297,252,306],
[276,248,0,262,316,245,218,270],
[250,259,288,0,359,267,275,307],
[192,201,234,191,0,204,177,197],
[316,253,305,283,346,0,241,266],
[303,298,332,275,373,309,0,321],
[269,244,280,243,353,284,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,288,281,248,263,240,282],
[275,0,277,295,252,253,243,284],
[262,273,0,275,255,254,227,266],
[269,255,275,0,243,256,250,282],
[302,298,295,307,0,267,263,280],
[287,297,296,294,283,0,275,285],
[310,307,323,300,287,275,0,297],
[268,266,284,268,270,265,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,272,254,277,260,281,273],
[275,0,290,275,290,303,285,288],
[278,260,0,262,279,282,262,273],
[296,275,288,0,266,267,285,276],
[273,260,271,284,0,263,269,288],
[290,247,268,283,287,0,281,293],
[269,265,288,265,281,269,0,270],
[277,262,277,274,262,257,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,286,282,286,283,268,287],
[260,0,292,276,275,299,275,278],
[264,258,0,260,266,274,275,291],
[268,274,290,0,285,294,274,295],
[264,275,284,265,0,278,279,282],
[267,251,276,256,272,0,256,272],
[282,275,275,276,271,294,0,288],
[263,272,259,255,268,278,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,291,299,317,293,264,292],
[273,0,279,281,281,288,288,277],
[259,271,0,275,279,286,261,286],
[251,269,275,0,305,282,277,274],
[233,269,271,245,0,284,271,273],
[257,262,264,268,266,0,272,280],
[286,262,289,273,279,278,0,260],
[258,273,264,276,277,270,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,272,269,285,284,269,276],
[271,0,264,256,292,283,286,290],
[278,286,0,290,308,277,278,274],
[281,294,260,0,297,283,283,285],
[265,258,242,253,0,246,269,271],
[266,267,273,267,304,0,274,264],
[281,264,272,267,281,276,0,274],
[274,260,276,265,279,286,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,294,272,309,285,274,282],
[250,0,279,283,305,320,290,246],
[256,271,0,290,306,259,282,257],
[278,267,260,0,305,305,283,276],
[241,245,244,245,0,261,284,223],
[265,230,291,245,289,0,280,281],
[276,260,268,267,266,270,0,262],
[268,304,293,274,327,269,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,294,302,300,286,287,282],
[279,0,304,293,291,293,267,302],
[256,246,0,257,280,255,269,284],
[248,257,293,0,286,265,288,301],
[250,259,270,264,0,259,278,280],
[264,257,295,285,291,0,286,289],
[263,283,281,262,272,264,0,285],
[268,248,266,249,270,261,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,248,267,296,273,273,243],
[295,0,284,280,285,274,288,245],
[302,266,0,266,280,262,297,248],
[283,270,284,0,294,275,284,274],
[254,265,270,256,0,245,265,233],
[277,276,288,275,305,0,325,282],
[277,262,253,266,285,225,0,242],
[307,305,302,276,317,268,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,339,262,267,291,296,277],
[230,0,293,252,236,247,246,243],
[211,257,0,264,213,276,235,265],
[288,298,286,0,258,266,273,238],
[283,314,337,292,0,272,302,298],
[259,303,274,284,278,0,255,247],
[254,304,315,277,248,295,0,271],
[273,307,285,312,252,303,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,266,280,275,276,297,290],
[288,0,292,296,267,260,293,293],
[284,258,0,284,284,261,291,285],
[270,254,266,0,272,266,265,272],
[275,283,266,278,0,271,313,303],
[274,290,289,284,279,0,308,298],
[253,257,259,285,237,242,0,259],
[260,257,265,278,247,252,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,268,269,259,278,264,276],
[265,0,272,261,274,279,260,275],
[282,278,0,272,275,289,267,268],
[281,289,278,0,274,294,281,273],
[291,276,275,276,0,291,275,270],
[272,271,261,256,259,0,258,271],
[286,290,283,269,275,292,0,280],
[274,275,282,277,280,279,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,301,279,274,283,289,291],
[269,0,287,284,294,269,295,288],
[249,263,0,265,257,265,283,257],
[271,266,285,0,274,285,278,280],
[276,256,293,276,0,282,271,276],
[267,281,285,265,268,0,274,278],
[261,255,267,272,279,276,0,281],
[259,262,293,270,274,272,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,264,257,260,260,279,266],
[287,0,282,275,271,285,293,270],
[286,268,0,256,260,283,275,278],
[293,275,294,0,290,290,302,285],
[290,279,290,260,0,298,294,284],
[290,265,267,260,252,0,280,268],
[271,257,275,248,256,270,0,255],
[284,280,272,265,266,282,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,287,289,275,255,263,276],
[275,0,273,274,274,270,270,271],
[263,277,0,273,286,261,274,279],
[261,276,277,0,286,268,284,265],
[275,276,264,264,0,277,277,266],
[295,280,289,282,273,0,288,289],
[287,280,276,266,273,262,0,274],
[274,279,271,285,284,261,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,274,267,293,267,247,257],
[301,0,275,306,281,302,300,299],
[276,275,0,327,295,271,257,297],
[283,244,223,0,284,276,236,305],
[257,269,255,266,0,311,251,279],
[283,248,279,274,239,0,224,253],
[303,250,293,314,299,326,0,318],
[293,251,253,245,271,297,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,288,294,290,274,291,271],
[282,0,295,298,280,263,303,289],
[262,255,0,277,261,259,275,260],
[256,252,273,0,266,266,285,250],
[260,270,289,284,0,269,279,286],
[276,287,291,284,281,0,306,268],
[259,247,275,265,271,244,0,260],
[279,261,290,300,264,282,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,287,273,294,296,301,296],
[257,0,296,274,270,285,283,288],
[263,254,0,270,263,277,295,289],
[277,276,280,0,264,276,269,261],
[256,280,287,286,0,288,275,276],
[254,265,273,274,262,0,276,275],
[249,267,255,281,275,274,0,277],
[254,262,261,289,274,275,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,272,273,265,271,276,286],
[287,0,267,258,268,276,271,291],
[278,283,0,264,283,296,282,308],
[277,292,286,0,273,298,277,297],
[285,282,267,277,0,288,279,303],
[279,274,254,252,262,0,262,283],
[274,279,268,273,271,288,0,307],
[264,259,242,253,247,267,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,230,257,284,270,266,244],
[302,0,265,289,254,261,256,275],
[320,285,0,221,272,292,260,251],
[293,261,329,0,307,292,322,293],
[266,296,278,243,0,254,329,249],
[280,289,258,258,296,0,278,293],
[284,294,290,228,221,272,0,228],
[306,275,299,257,301,257,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,273,257,280,259,257,268],
[283,0,263,282,291,270,271,274],
[277,287,0,265,302,268,264,255],
[293,268,285,0,306,270,278,253],
[270,259,248,244,0,250,247,235],
[291,280,282,280,300,0,287,271],
[293,279,286,272,303,263,0,288],
[282,276,295,297,315,279,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,306,263,262,210,235,253],
[308,0,324,299,292,274,231,285],
[244,226,0,285,240,229,228,232],
[287,251,265,0,251,234,225,261],
[288,258,310,299,0,251,259,274],
[340,276,321,316,299,0,263,292],
[315,319,322,325,291,287,0,271],
[297,265,318,289,276,258,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,262,276,251,299,267,278],
[270,0,273,283,257,294,271,286],
[288,277,0,284,265,297,276,281],
[274,267,266,0,250,293,251,260],
[299,293,285,300,0,305,270,292],
[251,256,253,257,245,0,250,263],
[283,279,274,299,280,300,0,283],
[272,264,269,290,258,287,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,265,290,252,231,282,252],
[279,0,221,276,276,252,272,232],
[285,329,0,305,274,260,294,266],
[260,274,245,0,227,274,251,262],
[298,274,276,323,0,271,296,285],
[319,298,290,276,279,0,275,258],
[268,278,256,299,254,275,0,265],
[298,318,284,288,265,292,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,253,248,281,256,237,276],
[258,0,258,264,257,275,265,277],
[297,292,0,275,271,264,302,268],
[302,286,275,0,262,270,276,256],
[269,293,279,288,0,270,281,281],
[294,275,286,280,280,0,290,299],
[313,285,248,274,269,260,0,289],
[274,273,282,294,269,251,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,269,258,276,252,285,285],
[279,0,259,255,261,262,285,289],
[281,291,0,268,287,285,290,294],
[292,295,282,0,278,268,288,303],
[274,289,263,272,0,268,277,297],
[298,288,265,282,282,0,306,300],
[265,265,260,262,273,244,0,279],
[265,261,256,247,253,250,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,284,273,268,273,276,278],
[274,0,281,282,278,280,275,293],
[266,269,0,262,264,272,274,267],
[277,268,288,0,280,279,283,304],
[282,272,286,270,0,285,284,292],
[277,270,278,271,265,0,285,290],
[274,275,276,267,266,265,0,282],
[272,257,283,246,258,260,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,260,277,226,263,273,264],
[333,0,278,278,257,278,296,278],
[290,272,0,283,266,278,287,275],
[273,272,267,0,244,294,318,256],
[324,293,284,306,0,277,275,251],
[287,272,272,256,273,0,293,265],
[277,254,263,232,275,257,0,236],
[286,272,275,294,299,285,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,285,263,286,278,296,290],
[282,0,271,265,288,280,307,266],
[265,279,0,267,259,252,284,269],
[287,285,283,0,272,277,290,284],
[264,262,291,278,0,265,296,257],
[272,270,298,273,285,0,302,272],
[254,243,266,260,254,248,0,245],
[260,284,281,266,293,278,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,251,276,270,266,273,263],
[273,0,245,268,270,259,281,261],
[299,305,0,307,288,273,296,285],
[274,282,243,0,277,279,268,264],
[280,280,262,273,0,265,261,267],
[284,291,277,271,285,0,293,270],
[277,269,254,282,289,257,0,277],
[287,289,265,286,283,280,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,281,286,275,321,266,316],
[275,0,289,275,285,292,273,304],
[269,261,0,275,299,273,288,296],
[264,275,275,0,294,328,284,283],
[275,265,251,256,0,304,278,309],
[229,258,277,222,246,0,258,290],
[284,277,262,266,272,292,0,300],
[234,246,254,267,241,260,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,289,297,280,290,313,266],
[252,0,282,301,278,264,282,273],
[261,268,0,289,265,298,274,280],
[253,249,261,0,282,256,284,264],
[270,272,285,268,0,263,271,273],
[260,286,252,294,287,0,297,293],
[237,268,276,266,279,253,0,260],
[284,277,270,286,277,257,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,294,267,290,288,287,300],
[275,0,306,277,279,293,280,281],
[256,244,0,266,259,259,272,264],
[283,273,284,0,285,289,285,296],
[260,271,291,265,0,278,282,273],
[262,257,291,261,272,0,269,278],
[263,270,278,265,268,281,0,285],
[250,269,286,254,277,272,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,271,289,274,291,272,278],
[268,0,268,284,267,284,280,286],
[279,282,0,284,275,288,281,277],
[261,266,266,0,255,287,276,279],
[276,283,275,295,0,288,289,283],
[259,266,262,263,262,0,274,265],
[278,270,269,274,261,276,0,271],
[272,264,273,271,267,285,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,390,418,418,267,273,171,179],
[160,0,322,230,160,241,101,209],
[132,228,0,137,111,88,83,88],
[132,320,413,0,160,272,73,213],
[283,390,439,390,0,273,356,273],
[277,309,462,278,277,0,150,150],
[379,449,467,477,194,400,0,360],
[371,341,462,337,277,400,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,252,257,265,260,281,249],
[262,0,257,263,278,241,281,252],
[298,293,0,296,257,271,302,290],
[293,287,254,0,285,272,276,228],
[285,272,293,265,0,260,283,259],
[290,309,279,278,290,0,276,268],
[269,269,248,274,267,274,0,255],
[301,298,260,322,291,282,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,262,282,279,286,281,285],
[282,0,278,281,274,271,276,293],
[288,272,0,275,271,284,277,283],
[268,269,275,0,279,266,259,288],
[271,276,279,271,0,263,277,285],
[264,279,266,284,287,0,276,280],
[269,274,273,291,273,274,0,276],
[265,257,267,262,265,270,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,275,270,288,263,276,290],
[284,0,274,292,275,281,292,276],
[275,276,0,286,290,261,283,275],
[280,258,264,0,264,263,276,277],
[262,275,260,286,0,256,283,264],
[287,269,289,287,294,0,288,291],
[274,258,267,274,267,262,0,281],
[260,274,275,273,286,259,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,292,277,269,273,272,291],
[259,0,266,247,249,256,270,268],
[258,284,0,267,265,249,277,280],
[273,303,283,0,270,265,269,266],
[281,301,285,280,0,264,294,292],
[277,294,301,285,286,0,268,276],
[278,280,273,281,256,282,0,283],
[259,282,270,284,258,274,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,270,304,276,297,314,279],
[267,0,285,296,303,272,308,230],
[280,265,0,295,302,284,302,259],
[246,254,255,0,258,255,283,270],
[274,247,248,292,0,256,271,254],
[253,278,266,295,294,0,316,259],
[236,242,248,267,279,234,0,236],
[271,320,291,280,296,291,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,273,267,269,264,259,289],
[291,0,254,264,250,267,268,285],
[277,296,0,270,267,264,286,285],
[283,286,280,0,285,290,271,292],
[281,300,283,265,0,277,298,322],
[286,283,286,260,273,0,277,293],
[291,282,264,279,252,273,0,281],
[261,265,265,258,228,257,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,319,329,212,320,324,329],
[377,0,336,402,292,230,256,314],
[231,214,0,314,207,339,220,281],
[221,148,236,0,119,198,208,145],
[338,258,343,431,0,252,313,338],
[230,320,211,352,298,0,241,237],
[226,294,330,342,237,309,0,191],
[221,236,269,405,212,313,359,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,291,285,291,265,303,311],
[264,0,292,283,293,279,311,301],
[259,258,0,277,273,275,300,270],
[265,267,273,0,272,271,285,296],
[259,257,277,278,0,279,297,280],
[285,271,275,279,271,0,299,297],
[247,239,250,265,253,251,0,265],
[239,249,280,254,270,253,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,276,278,277,266,275,278],
[240,0,260,258,250,270,257,271],
[274,290,0,249,248,261,270,270],
[272,292,301,0,270,282,290,293],
[273,300,302,280,0,290,295,302],
[284,280,289,268,260,0,269,290],
[275,293,280,260,255,281,0,302],
[272,279,280,257,248,260,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,252,277,261,254,259,251],
[287,0,289,280,273,266,273,283],
[298,261,0,282,254,247,274,288],
[273,270,268,0,270,260,261,252],
[289,277,296,280,0,254,286,263],
[296,284,303,290,296,0,268,302],
[291,277,276,289,264,282,0,273],
[299,267,262,298,287,248,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,279,336,332,382,269,273],
[324,0,328,258,291,379,304,288],
[271,222,0,267,281,360,367,265],
[214,292,283,0,234,335,279,269],
[218,259,269,316,0,312,322,230],
[168,171,190,215,238,0,192,147],
[281,246,183,271,228,358,0,218],
[277,262,285,281,320,403,332,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,273,281,265,275,269,262],
[263,0,277,268,257,263,272,273],
[277,273,0,265,269,272,266,284],
[269,282,285,0,266,275,278,290],
[285,293,281,284,0,273,282,279],
[275,287,278,275,277,0,288,268],
[281,278,284,272,268,262,0,280],
[288,277,266,260,271,282,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,287,287,284,290,292,271],
[278,0,298,294,286,280,292,272],
[263,252,0,283,264,278,259,275],
[263,256,267,0,296,307,291,262],
[266,264,286,254,0,283,278,270],
[260,270,272,243,267,0,286,247],
[258,258,291,259,272,264,0,267],
[279,278,275,288,280,303,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,275,296,246,279,271,318],
[270,0,280,289,284,288,264,282],
[275,270,0,283,264,297,235,292],
[254,261,267,0,280,282,246,266],
[304,266,286,270,0,270,280,303],
[271,262,253,268,280,0,270,254],
[279,286,315,304,270,280,0,309],
[232,268,258,284,247,296,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,257,273,250,275,247,263],
[264,0,259,268,239,256,231,260],
[293,291,0,304,269,281,261,277],
[277,282,246,0,275,270,259,269],
[300,311,281,275,0,283,276,286],
[275,294,269,280,267,0,247,276],
[303,319,289,291,274,303,0,288],
[287,290,273,281,264,274,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,285,285,257,274,280,260],
[291,0,274,283,274,270,277,275],
[265,276,0,258,258,271,275,263],
[265,267,292,0,257,275,272,268],
[293,276,292,293,0,289,270,273],
[276,280,279,275,261,0,269,274],
[270,273,275,278,280,281,0,278],
[290,275,287,282,277,276,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,255,263,251,291,259,253],
[341,0,275,270,274,316,281,272],
[295,275,0,278,317,291,251,234],
[287,280,272,0,298,339,273,290],
[299,276,233,252,0,256,268,233],
[259,234,259,211,294,0,246,240],
[291,269,299,277,282,304,0,241],
[297,278,316,260,317,310,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,272,273,280,289,279,286],
[276,0,274,280,281,276,271,285],
[278,276,0,268,271,284,274,283],
[277,270,282,0,271,276,288,275],
[270,269,279,279,0,286,265,275],
[261,274,266,274,264,0,271,269],
[271,279,276,262,285,279,0,274],
[264,265,267,275,275,281,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,262,268,259,271,251,261],
[274,0,278,293,289,296,272,288],
[288,272,0,284,289,293,276,290],
[282,257,266,0,270,278,279,269],
[291,261,261,280,0,287,250,274],
[279,254,257,272,263,0,268,285],
[299,278,274,271,300,282,0,279],
[289,262,260,281,276,265,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,248,262,277,270,300,281],
[269,0,254,274,288,277,283,277],
[302,296,0,273,262,278,327,267],
[288,276,277,0,254,259,260,292],
[273,262,288,296,0,266,305,304],
[280,273,272,291,284,0,288,325],
[250,267,223,290,245,262,0,240],
[269,273,283,258,246,225,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,269,296,301,255,256,268],
[253,0,247,278,251,268,251,245],
[281,303,0,283,321,271,268,299],
[254,272,267,0,276,280,248,274],
[249,299,229,274,0,256,239,272],
[295,282,279,270,294,0,282,309],
[294,299,282,302,311,268,0,289],
[282,305,251,276,278,241,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,255,268,256,261,260,268],
[264,0,272,265,251,259,268,268],
[295,278,0,275,269,271,269,282],
[282,285,275,0,268,260,277,282],
[294,299,281,282,0,280,285,275],
[289,291,279,290,270,0,278,281],
[290,282,281,273,265,272,0,280],
[282,282,268,268,275,269,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,275,265,260,268,265,266],
[268,0,262,269,261,279,272,254],
[275,288,0,288,275,266,279,271],
[285,281,262,0,269,260,270,262],
[290,289,275,281,0,280,301,274],
[282,271,284,290,270,0,291,279],
[285,278,271,280,249,259,0,255],
[284,296,279,288,276,271,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,306,293,311,271,313,315],
[263,0,273,271,268,275,295,271],
[244,277,0,294,258,240,273,272],
[257,279,256,0,262,248,273,268],
[239,282,292,288,0,251,269,280],
[279,275,310,302,299,0,315,300],
[237,255,277,277,281,235,0,258],
[235,279,278,282,270,250,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,278,286,281,280,283,274],
[272,0,291,285,284,272,282,277],
[272,259,0,271,262,269,279,274],
[264,265,279,0,270,261,289,268],
[269,266,288,280,0,273,273,260],
[270,278,281,289,277,0,280,260],
[267,268,271,261,277,270,0,268],
[276,273,276,282,290,290,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,291,280,295,279,277,285],
[276,0,281,286,321,311,273,296],
[259,269,0,254,277,291,282,274],
[270,264,296,0,295,319,270,278],
[255,229,273,255,0,286,294,265],
[271,239,259,231,264,0,260,282],
[273,277,268,280,256,290,0,297],
[265,254,276,272,285,268,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,269,273,279,307,277,270],
[280,0,263,251,257,294,258,278],
[281,287,0,266,261,317,266,258],
[277,299,284,0,270,327,241,281],
[271,293,289,280,0,328,287,285],
[243,256,233,223,222,0,247,235],
[273,292,284,309,263,303,0,265],
[280,272,292,269,265,315,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,265,276,292,281,276,281],
[276,0,266,278,284,268,274,270],
[285,284,0,275,300,277,271,283],
[274,272,275,0,276,266,260,272],
[258,266,250,274,0,243,263,255],
[269,282,273,284,307,0,282,272],
[274,276,279,290,287,268,0,276],
[269,280,267,278,295,278,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,325,300,319,270,311,314],
[289,0,309,257,339,294,286,314],
[225,241,0,279,314,313,287,297],
[250,293,271,0,283,262,260,321],
[231,211,236,267,0,253,249,240],
[280,256,237,288,297,0,262,308],
[239,264,263,290,301,288,0,287],
[236,236,253,229,310,242,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,267,305,286,275,289,310],
[289,0,266,292,302,272,265,314],
[283,284,0,309,299,267,281,306],
[245,258,241,0,242,242,224,275],
[264,248,251,308,0,273,284,279],
[275,278,283,308,277,0,255,315],
[261,285,269,326,266,295,0,297],
[240,236,244,275,271,235,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,246,266,264,250,259,261],
[284,0,265,284,279,271,270,286],
[304,285,0,276,291,278,290,272],
[284,266,274,0,268,264,261,260],
[286,271,259,282,0,271,271,266],
[300,279,272,286,279,0,284,278],
[291,280,260,289,279,266,0,279],
[289,264,278,290,284,272,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,283,276,285,322,284,256],
[283,0,274,269,278,314,261,264],
[267,276,0,279,312,298,273,288],
[274,281,271,0,307,300,284,248],
[265,272,238,243,0,279,280,248],
[228,236,252,250,271,0,250,263],
[266,289,277,266,270,300,0,274],
[294,286,262,302,302,287,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,271,250,285,275,260,297],
[288,0,244,265,262,274,269,316],
[279,306,0,245,275,268,262,311],
[300,285,305,0,274,283,273,318],
[265,288,275,276,0,293,292,329],
[275,276,282,267,257,0,293,323],
[290,281,288,277,258,257,0,296],
[253,234,239,232,221,227,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,271,327,280,262,282,246],
[239,0,263,291,253,238,204,213],
[279,287,0,323,296,244,255,220],
[223,259,227,0,241,224,235,202],
[270,297,254,309,0,222,243,240],
[288,312,306,326,328,0,283,271],
[268,346,295,315,307,267,0,283],
[304,337,330,348,310,279,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,285,280,265,296,306,299],
[249,0,273,259,261,268,253,277],
[265,277,0,248,253,270,266,270],
[270,291,302,0,279,313,314,300],
[285,289,297,271,0,304,282,305],
[254,282,280,237,246,0,269,291],
[244,297,284,236,268,281,0,303],
[251,273,280,250,245,259,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,287,288,252,276,282,273],
[264,0,277,287,264,277,269,276],
[263,273,0,272,269,276,263,254],
[262,263,278,0,256,279,278,280],
[298,286,281,294,0,264,273,266],
[274,273,274,271,286,0,265,262],
[268,281,287,272,277,285,0,275],
[277,274,296,270,284,288,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,272,287,275,304,295,292],
[267,0,269,268,263,276,264,269],
[278,281,0,288,274,279,279,274],
[263,282,262,0,274,281,275,284],
[275,287,276,276,0,299,288,292],
[246,274,271,269,251,0,263,274],
[255,286,271,275,262,287,0,268],
[258,281,276,266,258,276,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,289,299,275,275,271,287],
[283,0,288,301,260,271,284,273],
[261,262,0,278,240,253,268,270],
[251,249,272,0,234,248,263,248],
[275,290,310,316,0,284,296,291],
[275,279,297,302,266,0,293,291],
[279,266,282,287,254,257,0,274],
[263,277,280,302,259,259,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,303,273,305,274,299,268],
[269,0,275,264,287,265,279,268],
[247,275,0,261,258,258,275,247],
[277,286,289,0,287,247,301,269],
[245,263,292,263,0,287,288,265],
[276,285,292,303,263,0,309,289],
[251,271,275,249,262,241,0,268],
[282,282,303,281,285,261,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,265,259,257,279,261,275],
[278,0,291,284,272,277,269,267],
[285,259,0,244,265,267,286,279],
[291,266,306,0,272,279,279,286],
[293,278,285,278,0,279,266,282],
[271,273,283,271,271,0,271,276],
[289,281,264,271,284,279,0,293],
[275,283,271,264,268,274,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,264,272,252,281,298,305],
[259,0,291,262,254,293,276,294],
[286,259,0,245,243,272,267,281],
[278,288,305,0,295,291,273,293],
[298,296,307,255,0,289,263,295],
[269,257,278,259,261,0,258,290],
[252,274,283,277,287,292,0,293],
[245,256,269,257,255,260,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,279,276,272,267,279,267],
[292,0,299,284,275,282,294,294],
[271,251,0,268,282,281,271,275],
[274,266,282,0,289,274,272,279],
[278,275,268,261,0,271,279,264],
[283,268,269,276,279,0,289,273],
[271,256,279,278,271,261,0,262],
[283,256,275,271,286,277,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,263,255,268,283,288,272],
[275,0,273,239,254,262,256,261],
[287,277,0,273,275,274,283,281],
[295,311,277,0,285,279,273,276],
[282,296,275,265,0,291,266,283],
[267,288,276,271,259,0,279,268],
[262,294,267,277,284,271,0,277],
[278,289,269,274,267,282,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,285,256,230,266,273,279],
[286,0,289,300,271,295,289,289],
[265,261,0,259,242,277,268,293],
[294,250,291,0,289,272,287,285],
[320,279,308,261,0,273,286,283],
[284,255,273,278,277,0,292,280],
[277,261,282,263,264,258,0,285],
[271,261,257,265,267,270,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,266,267,304,275,293,265],
[251,0,256,251,257,264,268,247],
[284,294,0,287,308,261,288,279],
[283,299,263,0,291,263,285,259],
[246,293,242,259,0,266,278,236],
[275,286,289,287,284,0,281,269],
[257,282,262,265,272,269,0,236],
[285,303,271,291,314,281,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,267,273,282,272,271,274],
[259,0,256,272,291,268,272,271],
[283,294,0,273,301,268,287,283],
[277,278,277,0,298,272,267,266],
[268,259,249,252,0,268,257,265],
[278,282,282,278,282,0,274,293],
[279,278,263,283,293,276,0,266],
[276,279,267,284,285,257,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,305,286,297,298,292,273],
[278,0,264,307,306,285,311,276],
[245,286,0,297,280,277,268,258],
[264,243,253,0,271,270,292,210],
[253,244,270,279,0,261,245,266],
[252,265,273,280,289,0,286,237],
[258,239,282,258,305,264,0,230],
[277,274,292,340,284,313,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,280,274,291,280,276,284],
[285,0,273,297,301,285,274,295],
[270,277,0,298,288,300,295,311],
[276,253,252,0,282,262,281,290],
[259,249,262,268,0,255,277,274],
[270,265,250,288,295,0,296,285],
[274,276,255,269,273,254,0,258],
[266,255,239,260,276,265,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,295,277,277,302,301,286],
[276,0,284,270,284,278,294,281],
[255,266,0,275,268,282,295,296],
[273,280,275,0,273,297,301,297],
[273,266,282,277,0,283,312,296],
[248,272,268,253,267,0,290,265],
[249,256,255,249,238,260,0,261],
[264,269,254,253,254,285,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,259,262,266,268,267,254],
[296,0,280,273,253,273,276,273],
[291,270,0,275,254,261,261,278],
[288,277,275,0,280,275,268,268],
[284,297,296,270,0,289,282,266],
[282,277,289,275,261,0,284,274],
[283,274,289,282,268,266,0,279],
[296,277,272,282,284,276,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,274,278,255,271,263,267],
[277,0,272,288,271,277,260,265],
[276,278,0,284,273,275,264,277],
[272,262,266,0,264,263,246,270],
[295,279,277,286,0,287,259,269],
[279,273,275,287,263,0,259,263],
[287,290,286,304,291,291,0,275],
[283,285,273,280,281,287,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,271,283,283,282,288,283],
[275,0,259,274,259,252,262,267],
[279,291,0,272,279,282,291,279],
[267,276,278,0,258,237,258,276],
[267,291,271,292,0,270,280,292],
[268,298,268,313,280,0,285,288],
[262,288,259,292,270,265,0,262],
[267,283,271,274,258,262,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,287,272,255,268,246,269],
[314,0,298,324,298,304,266,292],
[263,252,0,271,261,244,253,258],
[278,226,279,0,253,269,235,249],
[295,252,289,297,0,267,256,264],
[282,246,306,281,283,0,275,270],
[304,284,297,315,294,275,0,287],
[281,258,292,301,286,280,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,288,294,290,281,254,289],
[293,0,304,270,297,270,286,296],
[262,246,0,279,281,248,261,272],
[256,280,271,0,281,270,265,275],
[260,253,269,269,0,248,273,272],
[269,280,302,280,302,0,271,301],
[296,264,289,285,277,279,0,308],
[261,254,278,275,278,249,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,234,375,302,358,291,239],
[267,0,295,299,313,285,325,265],
[316,255,0,426,307,359,299,307],
[175,251,124,0,223,214,246,206],
[248,237,243,327,0,235,274,265],
[192,265,191,336,315,0,296,283],
[259,225,251,304,276,254,0,215],
[311,285,243,344,285,267,335,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,266,285,305,254,263,268],
[240,0,259,285,271,234,273,267],
[284,291,0,305,269,259,278,300],
[265,265,245,0,275,231,287,267],
[245,279,281,275,0,272,266,240],
[296,316,291,319,278,0,300,263],
[287,277,272,263,284,250,0,212],
[282,283,250,283,310,287,338,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,263,243,274,281,261,256],
[257,0,264,250,252,283,281,276],
[287,286,0,258,271,297,272,263],
[307,300,292,0,288,276,269,278],
[276,298,279,262,0,275,293,268],
[269,267,253,274,275,0,286,263],
[289,269,278,281,257,264,0,264],
[294,274,287,272,282,287,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,285,293,270,279,297,274],
[270,0,281,293,296,286,293,300],
[265,269,0,274,261,256,287,273],
[257,257,276,0,286,283,281,285],
[280,254,289,264,0,283,295,274],
[271,264,294,267,267,0,298,285],
[253,257,263,269,255,252,0,257],
[276,250,277,265,276,265,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,280,288,264,270,249,282],
[264,0,259,244,237,270,248,278],
[270,291,0,275,253,273,261,295],
[262,306,275,0,265,271,238,294],
[286,313,297,285,0,273,289,291],
[280,280,277,279,277,0,252,278],
[301,302,289,312,261,298,0,283],
[268,272,255,256,259,272,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,230,269,263,269,302,322],
[295,0,276,308,285,269,292,332],
[320,274,0,325,320,279,320,321],
[281,242,225,0,247,235,242,280],
[287,265,230,303,0,270,270,305],
[281,281,271,315,280,0,278,328],
[248,258,230,308,280,272,0,283],
[228,218,229,270,245,222,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,260,263,276,277,291,263],
[282,0,272,289,278,274,300,268],
[290,278,0,274,275,299,287,279],
[287,261,276,0,274,285,288,275],
[274,272,275,276,0,276,290,279],
[273,276,251,265,274,0,283,269],
[259,250,263,262,260,267,0,268],
[287,282,271,275,271,281,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,275,260,270,265,261,267],
[272,0,277,277,269,261,262,277],
[275,273,0,263,264,287,269,282],
[290,273,287,0,268,267,283,294],
[280,281,286,282,0,265,287,293],
[285,289,263,283,285,0,291,305],
[289,288,281,267,263,259,0,295],
[283,273,268,256,257,245,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,280,262,288,300,284,280],
[269,0,290,276,296,289,288,271],
[270,260,0,264,284,258,263,251],
[288,274,286,0,297,268,275,275],
[262,254,266,253,0,277,268,266],
[250,261,292,282,273,0,255,274],
[266,262,287,275,282,295,0,272],
[270,279,299,275,284,276,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,290,273,236,259,267,272],
[309,0,300,295,278,296,280,260],
[260,250,0,280,243,276,249,261],
[277,255,270,0,230,268,254,240],
[314,272,307,320,0,278,297,300],
[291,254,274,282,272,0,273,258],
[283,270,301,296,253,277,0,277],
[278,290,289,310,250,292,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,283,288,272,309,274,406],
[247,0,323,303,314,305,266,367],
[267,227,0,286,238,306,281,284],
[262,247,264,0,228,241,221,372],
[278,236,312,322,0,278,330,454],
[241,245,244,309,272,0,334,382],
[276,284,269,329,220,216,0,335],
[144,183,266,178,96,168,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,284,310,285,329,254,266],
[285,0,252,292,272,291,288,297],
[266,298,0,238,272,288,268,246],
[240,258,312,0,240,260,287,311],
[265,278,278,310,0,264,252,302],
[221,259,262,290,286,0,308,303],
[296,262,282,263,298,242,0,308],
[284,253,304,239,248,247,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,270,250,277,270,251,269],
[282,0,290,290,298,309,274,279],
[280,260,0,262,295,276,291,277],
[300,260,288,0,302,277,280,268],
[273,252,255,248,0,280,265,254],
[280,241,274,273,270,0,260,273],
[299,276,259,270,285,290,0,294],
[281,271,273,282,296,277,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,277,306,275,268,262,277],
[263,0,265,272,291,264,286,257],
[273,285,0,291,262,270,294,273],
[244,278,259,0,253,299,273,266],
[275,259,288,297,0,281,284,275],
[282,286,280,251,269,0,299,285],
[288,264,256,277,266,251,0,295],
[273,293,277,284,275,265,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,270,268,273,286,258,275],
[280,0,283,281,280,291,275,271],
[280,267,0,260,272,279,270,270],
[282,269,290,0,268,291,276,282],
[277,270,278,282,0,284,272,276],
[264,259,271,259,266,0,246,263],
[292,275,280,274,278,304,0,291],
[275,279,280,268,274,287,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,266,280,260,262,261,258],
[292,0,276,281,270,277,274,290],
[284,274,0,288,278,279,274,276],
[270,269,262,0,271,261,262,262],
[290,280,272,279,0,287,271,276],
[288,273,271,289,263,0,263,278],
[289,276,276,288,279,287,0,272],
[292,260,274,288,274,272,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,286,300,271,291,302,285],
[232,0,257,271,264,289,262,256],
[264,293,0,267,275,276,290,271],
[250,279,283,0,242,272,279,250],
[279,286,275,308,0,291,286,278],
[259,261,274,278,259,0,289,258],
[248,288,260,271,264,261,0,256],
[265,294,279,300,272,292,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,279,257,274,273,282,274],
[261,0,278,283,277,273,277,278],
[271,272,0,272,281,266,282,280],
[293,267,278,0,286,253,279,282],
[276,273,269,264,0,284,280,269],
[277,277,284,297,266,0,293,285],
[268,273,268,271,270,257,0,265],
[276,272,270,268,281,265,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,259,269,242,243,240,244],
[269,0,238,214,258,256,229,289],
[291,312,0,246,267,255,266,244],
[281,336,304,0,277,287,272,267],
[308,292,283,273,0,289,292,268],
[307,294,295,263,261,0,301,289],
[310,321,284,278,258,249,0,284],
[306,261,306,283,282,261,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,271,271,270,294,270,281],
[281,0,293,270,282,298,289,277],
[279,257,0,257,269,280,269,265],
[279,280,293,0,282,267,263,283],
[280,268,281,268,0,280,288,272],
[256,252,270,283,270,0,256,267],
[280,261,281,287,262,294,0,282],
[269,273,285,267,278,283,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,270,270,254,248,256,318],
[286,0,306,289,311,278,252,305],
[280,244,0,285,263,269,280,312],
[280,261,265,0,261,259,269,293],
[296,239,287,289,0,278,277,325],
[302,272,281,291,272,0,288,290],
[294,298,270,281,273,262,0,302],
[232,245,238,257,225,260,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,264,263,282,295,275,284],
[252,0,264,278,294,283,280,281],
[286,286,0,281,295,272,285,288],
[287,272,269,0,295,296,288,288],
[268,256,255,255,0,269,261,280],
[255,267,278,254,281,0,251,276],
[275,270,265,262,289,299,0,278],
[266,269,262,262,270,274,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,275,261,288,284,265,279],
[275,0,268,254,240,257,245,254],
[275,282,0,273,244,275,253,273],
[289,296,277,0,246,268,285,269],
[262,310,306,304,0,285,295,295],
[266,293,275,282,265,0,279,260],
[285,305,297,265,255,271,0,273],
[271,296,277,281,255,290,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,267,260,260,303,286,277],
[279,0,253,265,266,301,268,257],
[283,297,0,292,261,284,265,277],
[290,285,258,0,253,293,273,250],
[290,284,289,297,0,318,306,274],
[247,249,266,257,232,0,271,239],
[264,282,285,277,244,279,0,252],
[273,293,273,300,276,311,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,270,261,255,255,261,247],
[289,0,276,271,269,277,280,271],
[280,274,0,266,292,266,285,280],
[289,279,284,0,263,275,292,262],
[295,281,258,287,0,275,265,271],
[295,273,284,275,275,0,279,280],
[289,270,265,258,285,271,0,271],
[303,279,270,288,279,270,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,193,256,273,247,298,267],
[303,0,215,275,275,247,292,305],
[357,335,0,288,303,244,329,296],
[294,275,262,0,326,294,318,231],
[277,275,247,224,0,242,322,275],
[303,303,306,256,308,0,313,284],
[252,258,221,232,228,237,0,239],
[283,245,254,319,275,266,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,284,269,262,280,285,269],
[281,0,269,248,262,269,281,261],
[266,281,0,275,271,280,301,269],
[281,302,275,0,275,288,283,274],
[288,288,279,275,0,293,300,305],
[270,281,270,262,257,0,282,263],
[265,269,249,267,250,268,0,276],
[281,289,281,276,245,287,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,196,285,251,219,257,250],
[256,0,208,231,182,207,130,257],
[354,342,0,272,260,321,285,306],
[265,319,278,0,336,290,267,335],
[299,368,290,214,0,291,196,319],
[331,343,229,260,259,0,178,365],
[293,420,265,283,354,372,0,380],
[300,293,244,215,231,185,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,285,289,265,295,273,254],
[276,0,269,272,247,300,265,273],
[265,281,0,290,285,287,283,295],
[261,278,260,0,277,303,257,270],
[285,303,265,273,0,313,306,280],
[255,250,263,247,237,0,271,252],
[277,285,267,293,244,279,0,295],
[296,277,255,280,270,298,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,275,298,274,281,274,291],
[270,0,273,291,290,283,288,278],
[275,277,0,296,268,283,295,279],
[252,259,254,0,267,262,264,263],
[276,260,282,283,0,274,281,275],
[269,267,267,288,276,0,295,263],
[276,262,255,286,269,255,0,273],
[259,272,271,287,275,287,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,275,276,267,272,268,271],
[284,0,277,268,265,263,271,270],
[275,273,0,257,274,272,267,280],
[274,282,293,0,269,269,297,281],
[283,285,276,281,0,271,286,285],
[278,287,278,281,279,0,272,294],
[282,279,283,253,264,278,0,277],
[279,280,270,269,265,256,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,245,238,277,241,287,230],
[282,0,288,283,320,280,255,236],
[305,262,0,299,306,296,293,334],
[312,267,251,0,338,278,284,254],
[273,230,244,212,0,247,278,250],
[309,270,254,272,303,0,326,249],
[263,295,257,266,272,224,0,254],
[320,314,216,296,300,301,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,331,240,226,263,257,238,266],
[219,0,233,243,268,263,242,250],
[310,317,0,300,264,283,279,264],
[324,307,250,0,301,235,278,269],
[287,282,286,249,0,274,279,259],
[293,287,267,315,276,0,287,296],
[312,308,271,272,271,263,0,292],
[284,300,286,281,291,254,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,271,287,259,273,306,293],
[270,0,262,288,273,288,312,297],
[279,288,0,296,247,300,294,279],
[263,262,254,0,269,275,286,277],
[291,277,303,281,0,273,314,309],
[277,262,250,275,277,0,294,293],
[244,238,256,264,236,256,0,298],
[257,253,271,273,241,257,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,283,270,256,302,320,280],
[302,0,273,318,324,317,307,278],
[267,277,0,271,228,317,320,273],
[280,232,279,0,271,321,281,279],
[294,226,322,279,0,323,287,265],
[248,233,233,229,227,0,194,227],
[230,243,230,269,263,356,0,257],
[270,272,277,271,285,323,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,236,208,253,321,308,234],
[239,0,294,279,350,292,313,300],
[314,256,0,299,324,310,346,274],
[342,271,251,0,281,338,279,270],
[297,200,226,269,0,311,194,250],
[229,258,240,212,239,0,215,233],
[242,237,204,271,356,335,0,275],
[316,250,276,280,300,317,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,292,284,280,281,276,274],
[275,0,278,299,278,267,260,288],
[258,272,0,299,275,265,288,282],
[266,251,251,0,285,247,251,273],
[270,272,275,265,0,276,275,265],
[269,283,285,303,274,0,279,298],
[274,290,262,299,275,271,0,289],
[276,262,268,277,285,252,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,259,241,267,271,254,250],
[317,0,284,291,257,278,263,251],
[291,266,0,273,274,295,255,248],
[309,259,277,0,291,296,284,252],
[283,293,276,259,0,261,268,246],
[279,272,255,254,289,0,253,246],
[296,287,295,266,282,297,0,287],
[300,299,302,298,304,304,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,265,258,295,251,266,265],
[288,0,281,272,297,258,276,278],
[285,269,0,277,289,267,269,278],
[292,278,273,0,286,273,279,279],
[255,253,261,264,0,252,262,259],
[299,292,283,277,298,0,293,273],
[284,274,281,271,288,257,0,279],
[285,272,272,271,291,277,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,287,266,304,265,263,286],
[261,0,305,274,288,295,301,283],
[263,245,0,229,297,255,271,248],
[284,276,321,0,266,253,289,264],
[246,262,253,284,0,274,268,246],
[285,255,295,297,276,0,300,250],
[287,249,279,261,282,250,0,274],
[264,267,302,286,304,300,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,271,284,280,274,278,262],
[291,0,277,288,275,262,283,297],
[279,273,0,290,276,283,281,288],
[266,262,260,0,276,268,271,286],
[270,275,274,274,0,269,288,282],
[276,288,267,282,281,0,260,270],
[272,267,269,279,262,290,0,270],
[288,253,262,264,268,280,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,301,281,268,295,242,309],
[261,0,289,270,280,287,255,310],
[249,261,0,267,278,278,286,290],
[269,280,283,0,284,289,279,282],
[282,270,272,266,0,275,269,293],
[255,263,272,261,275,0,268,308],
[308,295,264,271,281,282,0,305],
[241,240,260,268,257,242,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,268,288,265,280,281,292],
[268,0,288,299,280,304,283,301],
[282,262,0,293,260,280,264,289],
[262,251,257,0,258,269,267,289],
[285,270,290,292,0,310,293,298],
[270,246,270,281,240,0,252,278],
[269,267,286,283,257,298,0,293],
[258,249,261,261,252,272,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,273,298,268,268,299,310],
[258,0,256,273,253,257,254,291],
[277,294,0,317,283,277,271,305],
[252,277,233,0,255,263,270,267],
[282,297,267,295,0,280,299,285],
[282,293,273,287,270,0,273,274],
[251,296,279,280,251,277,0,285],
[240,259,245,283,265,276,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,240,265,262,242,256,266],
[290,0,266,274,265,272,281,283],
[310,284,0,272,279,296,291,289],
[285,276,278,0,260,255,274,278],
[288,285,271,290,0,270,285,280],
[308,278,254,295,280,0,270,294],
[294,269,259,276,265,280,0,290],
[284,267,261,272,270,256,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,273,291,273,285,263,263],
[302,0,296,301,293,274,271,276],
[277,254,0,271,284,257,269,263],
[259,249,279,0,293,268,273,251],
[277,257,266,257,0,266,267,258],
[265,276,293,282,284,0,272,268],
[287,279,281,277,283,278,0,270],
[287,274,287,299,292,282,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,290,269,283,292,264,313],
[238,0,249,244,249,250,252,254],
[260,301,0,287,275,264,271,283],
[281,306,263,0,290,286,285,291],
[267,301,275,260,0,281,277,284],
[258,300,286,264,269,0,280,290],
[286,298,279,265,273,270,0,278],
[237,296,267,259,266,260,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,252,288,293,263,268,268],
[296,0,277,298,303,287,274,277],
[298,273,0,280,292,264,268,265],
[262,252,270,0,275,255,261,248],
[257,247,258,275,0,257,274,250],
[287,263,286,295,293,0,275,266],
[282,276,282,289,276,275,0,247],
[282,273,285,302,300,284,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,279,271,276,286,267,277],
[295,0,279,300,288,294,283,273],
[271,271,0,294,296,315,271,268],
[279,250,256,0,272,284,267,265],
[274,262,254,278,0,292,254,250],
[264,256,235,266,258,0,253,250],
[283,267,279,283,296,297,0,280],
[273,277,282,285,300,300,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,266,315,290,293,275,269],
[259,0,295,328,279,301,297,280],
[284,255,0,293,282,246,279,253],
[235,222,257,0,233,234,258,207],
[260,271,268,317,0,259,261,274],
[257,249,304,316,291,0,237,254],
[275,253,271,292,289,313,0,237],
[281,270,297,343,276,296,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,277,285,296,281,266,270],
[267,0,240,258,281,269,241,272],
[273,310,0,281,315,272,275,288],
[265,292,269,0,294,284,278,283],
[254,269,235,256,0,254,254,262],
[269,281,278,266,296,0,266,281],
[284,309,275,272,296,284,0,280],
[280,278,262,267,288,269,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,274,265,272,261,243,261],
[268,0,271,262,261,280,270,254],
[276,279,0,262,271,280,261,261],
[285,288,288,0,274,289,265,259],
[278,289,279,276,0,263,266,259],
[289,270,270,261,287,0,270,282],
[307,280,289,285,284,280,0,273],
[289,296,289,291,291,268,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,285,263,268,273,273,279],
[276,0,268,272,271,282,277,270],
[265,282,0,265,273,269,279,255],
[287,278,285,0,285,282,273,284],
[282,279,277,265,0,276,276,284],
[277,268,281,268,274,0,273,277],
[277,273,271,277,274,277,0,269],
[271,280,295,266,266,273,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,266,260,279,269,274,286],
[277,0,265,287,284,270,278,274],
[284,285,0,296,267,276,286,280],
[290,263,254,0,262,266,269,276],
[271,266,283,288,0,284,275,282],
[281,280,274,284,266,0,271,278],
[276,272,264,281,275,279,0,293],
[264,276,270,274,268,272,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,152,269,227,64,286,139],
[379,0,120,266,324,256,454,334],
[398,430,0,341,535,211,398,338],
[281,284,209,0,353,342,353,236],
[323,226,15,197,0,151,263,194],
[486,294,339,208,399,0,483,310],
[264,96,152,197,287,67,0,15],
[411,216,212,314,356,240,535,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,287,279,276,306,271,282],
[272,0,270,263,278,286,270,285],
[263,280,0,279,278,304,291,286],
[271,287,271,0,279,299,256,273],
[274,272,272,271,0,302,276,280],
[244,264,246,251,248,0,263,258],
[279,280,259,294,274,287,0,270],
[268,265,264,277,270,292,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,276,248,272,273,277,292],
[271,0,272,249,278,279,267,274],
[274,278,0,276,272,261,272,286],
[302,301,274,0,277,286,259,278],
[278,272,278,273,0,280,282,277],
[277,271,289,264,270,0,266,272],
[273,283,278,291,268,284,0,278],
[258,276,264,272,273,278,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,294,283,263,295,294,304],
[263,0,284,292,279,289,279,298],
[256,266,0,282,263,275,245,277],
[267,258,268,0,242,257,272,274],
[287,271,287,308,0,296,292,313],
[255,261,275,293,254,0,263,274],
[256,271,305,278,258,287,0,272],
[246,252,273,276,237,276,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,308,273,273,259,289,233],
[269,0,297,280,272,291,269,274],
[242,253,0,267,247,253,250,236],
[277,270,283,0,255,300,259,276],
[277,278,303,295,0,306,269,262],
[291,259,297,250,244,0,263,276],
[261,281,300,291,281,287,0,276],
[317,276,314,274,288,274,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,245,294,269,266,278,270],
[255,0,243,266,241,249,262,259],
[305,307,0,314,265,315,274,282],
[256,284,236,0,248,264,257,242],
[281,309,285,302,0,317,264,276],
[284,301,235,286,233,0,280,245],
[272,288,276,293,286,270,0,255],
[280,291,268,308,274,305,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,293,301,284,333,302,267],
[265,0,245,277,238,271,280,263],
[257,305,0,299,292,296,300,266],
[249,273,251,0,250,274,269,251],
[266,312,258,300,0,258,302,279],
[217,279,254,276,292,0,279,258],
[248,270,250,281,248,271,0,240],
[283,287,284,299,271,292,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,275,248,275,288,286,294],
[281,0,293,271,301,268,288,290],
[275,257,0,265,282,257,262,269],
[302,279,285,0,298,283,260,287],
[275,249,268,252,0,281,265,307],
[262,282,293,267,269,0,263,291],
[264,262,288,290,285,287,0,308],
[256,260,281,263,243,259,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,327,306,290,233,265,260],
[284,0,320,252,321,287,266,278],
[223,230,0,227,265,217,269,226],
[244,298,323,0,327,259,305,284],
[260,229,285,223,0,215,215,208],
[317,263,333,291,335,0,253,279],
[285,284,281,245,335,297,0,263],
[290,272,324,266,342,271,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,273,256,292,258,272,282],
[257,0,251,253,253,227,254,266],
[277,299,0,264,297,281,268,289],
[294,297,286,0,307,257,296,311],
[258,297,253,243,0,234,244,270],
[292,323,269,293,316,0,295,294],
[278,296,282,254,306,255,0,281],
[268,284,261,239,280,256,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,267,272,235,241,247,250],
[295,0,269,263,274,265,252,280],
[283,281,0,304,285,275,299,287],
[278,287,246,0,256,269,274,255],
[315,276,265,294,0,295,280,283],
[309,285,275,281,255,0,280,254],
[303,298,251,276,270,270,0,247],
[300,270,263,295,267,296,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,248,254,265,228,244,257],
[300,0,280,272,300,273,277,288],
[302,270,0,313,281,250,264,277],
[296,278,237,0,269,252,249,264],
[285,250,269,281,0,258,263,261],
[322,277,300,298,292,0,271,275],
[306,273,286,301,287,279,0,298],
[293,262,273,286,289,275,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,277,272,286,268,259,283],
[292,0,261,260,294,263,267,269],
[273,289,0,256,284,274,289,275],
[278,290,294,0,305,287,275,290],
[264,256,266,245,0,243,271,269],
[282,287,276,263,307,0,272,284],
[291,283,261,275,279,278,0,269],
[267,281,275,260,281,266,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,277,297,271,298,280,277],
[267,0,254,275,241,282,267,247],
[273,296,0,271,284,279,264,285],
[253,275,279,0,256,274,236,244],
[279,309,266,294,0,278,267,257],
[252,268,271,276,272,0,270,267],
[270,283,286,314,283,280,0,276],
[273,303,265,306,293,283,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,288,290,285,268,303,306],
[274,0,257,262,271,245,260,295],
[262,293,0,334,302,286,251,282],
[260,288,216,0,263,246,246,255],
[265,279,248,287,0,258,263,266],
[282,305,264,304,292,0,284,290],
[247,290,299,304,287,266,0,284],
[244,255,268,295,284,260,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,400,353,203,297,324,257],
[254,0,289,284,274,339,303,299],
[150,261,0,284,141,290,256,251],
[197,266,266,0,228,298,273,267],
[347,276,409,322,0,317,357,265],
[253,211,260,252,233,0,230,249],
[226,247,294,277,193,320,0,257],
[293,251,299,283,285,301,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,270,301,287,287,300,302],
[273,0,284,282,285,294,292,280],
[280,266,0,287,277,283,296,289],
[249,268,263,0,285,273,306,253],
[263,265,273,265,0,274,286,248],
[263,256,267,277,276,0,272,269],
[250,258,254,244,264,278,0,272],
[248,270,261,297,302,281,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,292,263,275,265,267,283],
[272,0,275,293,275,261,275,275],
[258,275,0,285,270,273,273,260],
[287,257,265,0,279,255,261,268],
[275,275,280,271,0,276,258,260],
[285,289,277,295,274,0,281,283],
[283,275,277,289,292,269,0,264],
[267,275,290,282,290,267,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,260,378,257,201,292,381],
[245,0,245,394,274,291,302,376],
[290,305,0,363,309,267,234,369],
[172,156,187,0,181,188,226,224],
[293,276,241,369,0,302,331,342],
[349,259,283,362,248,0,307,304],
[258,248,316,324,219,243,0,267],
[169,174,181,326,208,246,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,274,256,258,268,266,267],
[287,0,285,276,258,274,283,268],
[276,265,0,280,273,284,277,275],
[294,274,270,0,267,273,276,269],
[292,292,277,283,0,275,294,276],
[282,276,266,277,275,0,280,269],
[284,267,273,274,256,270,0,281],
[283,282,275,281,274,281,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,254,279,334,237,319,297],
[333,0,260,288,316,261,278,317],
[296,290,0,305,331,277,269,306],
[271,262,245,0,283,285,283,226],
[216,234,219,267,0,239,244,230],
[313,289,273,265,311,0,296,305],
[231,272,281,267,306,254,0,244],
[253,233,244,324,320,245,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,318,277,310,271,324,293],
[288,0,309,268,298,282,316,298],
[232,241,0,257,287,255,282,229],
[273,282,293,0,312,285,281,291],
[240,252,263,238,0,271,283,274],
[279,268,295,265,279,0,303,279],
[226,234,268,269,267,247,0,276],
[257,252,321,259,276,271,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,287,284,296,293,279,287],
[279,0,274,280,280,291,285,289],
[263,276,0,259,271,284,282,277],
[266,270,291,0,282,281,283,294],
[254,270,279,268,0,293,284,297],
[257,259,266,269,257,0,263,273],
[271,265,268,267,266,287,0,278],
[263,261,273,256,253,277,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,274,282,272,271,278,284],
[301,0,291,315,307,275,281,277],
[276,259,0,264,283,268,284,262],
[268,235,286,0,267,260,287,274],
[278,243,267,283,0,266,270,278],
[279,275,282,290,284,0,294,263],
[272,269,266,263,280,256,0,256],
[266,273,288,276,272,287,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,273,277,283,280,284,275],
[247,0,269,259,265,254,259,255],
[277,281,0,279,275,270,277,270],
[273,291,271,0,272,282,265,278],
[267,285,275,278,0,265,254,273],
[270,296,280,268,285,0,288,274],
[266,291,273,285,296,262,0,258],
[275,295,280,272,277,276,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,294,278,273,282,273,270],
[261,0,273,272,261,274,270,266],
[256,277,0,279,280,275,273,275],
[272,278,271,0,268,270,260,273],
[277,289,270,282,0,270,273,265],
[268,276,275,280,280,0,269,277],
[277,280,277,290,277,281,0,274],
[280,284,275,277,285,273,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,278,275,283,295,289,280],
[247,0,289,261,268,292,262,260],
[272,261,0,262,272,291,281,278],
[275,289,288,0,291,297,290,270],
[267,282,278,259,0,285,296,279],
[255,258,259,253,265,0,269,268],
[261,288,269,260,254,281,0,268],
[270,290,272,280,271,282,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,275,282,277,296,281,303],
[277,0,278,293,265,295,278,284],
[275,272,0,303,254,286,289,296],
[268,257,247,0,236,268,267,250],
[273,285,296,314,0,293,294,309],
[254,255,264,282,257,0,284,289],
[269,272,261,283,256,266,0,253],
[247,266,254,300,241,261,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,271,280,271,270,272,259],
[262,0,287,265,266,269,265,278],
[279,263,0,278,276,273,272,260],
[270,285,272,0,269,286,279,277],
[279,284,274,281,0,269,279,288],
[280,281,277,264,281,0,273,250],
[278,285,278,271,271,277,0,272],
[291,272,290,273,262,300,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,240,292,245,252,285,258],
[252,0,242,230,255,273,284,301],
[310,308,0,285,317,269,322,338],
[258,320,265,0,279,260,269,313],
[305,295,233,271,0,277,285,322],
[298,277,281,290,273,0,303,344],
[265,266,228,281,265,247,0,275],
[292,249,212,237,228,206,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,314,351,292,281,284,274],
[232,0,267,264,272,294,270,250],
[236,283,0,291,299,303,285,261],
[199,286,259,0,225,292,243,244],
[258,278,251,325,0,335,275,289],
[269,256,247,258,215,0,297,268],
[266,280,265,307,275,253,0,280],
[276,300,289,306,261,282,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,275,299,258,243,293,286],
[263,0,266,287,283,247,258,258],
[275,284,0,298,276,269,279,275],
[251,263,252,0,240,248,285,250],
[292,267,274,310,0,283,305,288],
[307,303,281,302,267,0,315,291],
[257,292,271,265,245,235,0,279],
[264,292,275,300,262,259,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,278,271,303,293,289,281],
[268,0,270,267,283,280,288,290],
[272,280,0,252,279,288,274,277],
[279,283,298,0,279,285,275,288],
[247,267,271,271,0,265,261,273],
[257,270,262,265,285,0,275,289],
[261,262,276,275,289,275,0,285],
[269,260,273,262,277,261,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,281,282,280,275,270,273],
[282,0,295,280,274,274,277,262],
[269,255,0,267,260,263,280,263],
[268,270,283,0,275,272,285,273],
[270,276,290,275,0,270,276,268],
[275,276,287,278,280,0,290,278],
[280,273,270,265,274,260,0,270],
[277,288,287,277,282,272,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,275,300,296,283,331,275],
[252,0,261,265,280,266,299,245],
[275,289,0,265,304,282,298,262],
[250,285,285,0,301,267,312,284],
[254,270,246,249,0,256,279,239],
[267,284,268,283,294,0,312,264],
[219,251,252,238,271,238,0,246],
[275,305,288,266,311,286,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,269,282,272,276,277,285],
[280,0,265,273,262,273,270,284],
[281,285,0,280,276,279,270,281],
[268,277,270,0,276,275,266,278],
[278,288,274,274,0,291,276,278],
[274,277,271,275,259,0,266,276],
[273,280,280,284,274,284,0,268],
[265,266,269,272,272,274,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,260,276,284,278,276,281],
[294,0,279,271,278,285,291,311],
[290,271,0,272,280,287,288,298],
[274,279,278,0,269,282,266,270],
[266,272,270,281,0,272,281,280],
[272,265,263,268,278,0,286,279],
[274,259,262,284,269,264,0,263],
[269,239,252,280,270,271,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,267,254,259,256,259,252],
[272,0,274,251,258,242,256,263],
[283,276,0,253,281,279,295,262],
[296,299,297,0,289,287,284,270],
[291,292,269,261,0,272,281,271],
[294,308,271,263,278,0,284,275],
[291,294,255,266,269,266,0,262],
[298,287,288,280,279,275,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,260,250,253,236,254,269],
[294,0,257,283,250,251,278,282],
[290,293,0,274,286,249,275,287],
[300,267,276,0,259,248,280,279],
[297,300,264,291,0,275,286,282],
[314,299,301,302,275,0,297,295],
[296,272,275,270,264,253,0,269],
[281,268,263,271,268,255,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,232,257,256,235,275,252],
[321,0,257,273,283,290,277,299],
[318,293,0,310,294,266,281,334],
[293,277,240,0,273,250,259,300],
[294,267,256,277,0,260,279,276],
[315,260,284,300,290,0,281,310],
[275,273,269,291,271,269,0,298],
[298,251,216,250,274,240,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,285,282,291,288,271,265],
[270,0,273,271,288,260,276,280],
[265,277,0,278,266,283,254,274],
[268,279,272,0,278,283,243,266],
[259,262,284,272,0,256,250,280],
[262,290,267,267,294,0,261,269],
[279,274,296,307,300,289,0,290],
[285,270,276,284,270,281,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,305,263,288,296,285,293],
[241,0,240,228,260,266,240,269],
[245,310,0,271,274,290,297,293],
[287,322,279,0,294,289,264,289],
[262,290,276,256,0,268,265,264],
[254,284,260,261,282,0,254,281],
[265,310,253,286,285,296,0,246],
[257,281,257,261,286,269,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,272,275,284,272,278,271],
[271,0,275,274,287,265,268,272],
[278,275,0,280,261,267,247,278],
[275,276,270,0,274,269,245,278],
[266,263,289,276,0,273,268,280],
[278,285,283,281,277,0,262,292],
[272,282,303,305,282,288,0,282],
[279,278,272,272,270,258,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,275,268,283,283,269,277],
[264,0,271,280,278,271,254,291],
[275,279,0,284,289,280,268,298],
[282,270,266,0,272,282,272,267],
[267,272,261,278,0,273,259,281],
[267,279,270,268,277,0,279,266],
[281,296,282,278,291,271,0,278],
[273,259,252,283,269,284,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,269,294,271,258,268,290],
[267,0,270,235,254,258,249,259],
[281,280,0,292,272,273,288,247],
[256,315,258,0,258,272,282,254],
[279,296,278,292,0,287,300,261],
[292,292,277,278,263,0,271,266],
[282,301,262,268,250,279,0,282],
[260,291,303,296,289,284,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,289,264,285,283,273,296],
[276,0,293,261,276,270,274,287],
[261,257,0,259,264,260,273,283],
[286,289,291,0,275,283,275,296],
[265,274,286,275,0,287,276,299],
[267,280,290,267,263,0,274,292],
[277,276,277,275,274,276,0,312],
[254,263,267,254,251,258,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,276,287,261,283,291,304],
[269,0,276,301,271,297,289,296],
[274,274,0,277,283,278,289,281],
[263,249,273,0,265,284,262,294],
[289,279,267,285,0,294,290,283],
[267,253,272,266,256,0,263,285],
[259,261,261,288,260,287,0,276],
[246,254,269,256,267,265,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,287,259,296,312,272,303],
[290,0,283,257,307,296,275,273],
[263,267,0,256,266,253,278,263],
[291,293,294,0,275,297,282,270],
[254,243,284,275,0,303,268,288],
[238,254,297,253,247,0,253,251],
[278,275,272,268,282,297,0,277],
[247,277,287,280,262,299,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,272,289,255,271,298,264],
[305,0,280,305,298,302,267,286],
[278,270,0,283,257,286,291,271],
[261,245,267,0,253,245,254,261],
[295,252,293,297,0,275,289,291],
[279,248,264,305,275,0,275,268],
[252,283,259,296,261,275,0,267],
[286,264,279,289,259,282,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,266,295,284,278,274,290],
[273,0,273,278,243,253,262,278],
[284,277,0,298,280,277,274,303],
[255,272,252,0,255,266,260,248],
[266,307,270,295,0,264,287,292],
[272,297,273,284,286,0,270,287],
[276,288,276,290,263,280,0,278],
[260,272,247,302,258,263,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,215,278,254,311,282,304],
[287,0,290,275,356,316,267,333],
[335,260,0,309,269,326,268,301],
[272,275,241,0,293,304,278,277],
[296,194,281,257,0,308,234,293],
[239,234,224,246,242,0,270,265],
[268,283,282,272,316,280,0,298],
[246,217,249,273,257,285,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,251,202,280,219,183,201],
[317,0,263,296,302,252,262,235],
[299,287,0,242,257,237,168,182],
[348,254,308,0,224,215,216,191],
[270,248,293,326,0,308,275,325],
[331,298,313,335,242,0,223,230],
[367,288,382,334,275,327,0,229],
[349,315,368,359,225,320,321,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,258,266,263,263,282,279],
[273,0,262,264,281,269,283,275],
[292,288,0,279,285,275,291,273],
[284,286,271,0,290,278,285,287],
[287,269,265,260,0,269,279,279],
[287,281,275,272,281,0,293,266],
[268,267,259,265,271,257,0,274],
[271,275,277,263,271,284,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,275,259,269,282,262,267],
[281,0,301,286,249,297,263,295],
[275,249,0,267,270,288,260,275],
[291,264,283,0,265,322,273,282],
[281,301,280,285,0,284,247,281],
[268,253,262,228,266,0,252,245],
[288,287,290,277,303,298,0,269],
[283,255,275,268,269,305,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,265,284,255,265,299,269],
[266,0,252,293,271,250,308,246],
[285,298,0,300,270,284,315,290],
[266,257,250,0,269,250,269,252],
[295,279,280,281,0,264,277,289],
[285,300,266,300,286,0,287,287],
[251,242,235,281,273,263,0,261],
[281,304,260,298,261,263,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,259,355,298,305,278,297],
[258,0,287,283,246,264,232,272],
[291,263,0,288,276,258,257,266],
[195,267,262,0,249,254,227,209],
[252,304,274,301,0,264,262,264],
[245,286,292,296,286,0,259,253],
[272,318,293,323,288,291,0,280],
[253,278,284,341,286,297,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,261,271,275,267,291,284],
[271,0,274,282,282,266,281,275],
[289,276,0,278,280,265,272,285],
[279,268,272,0,273,264,272,270],
[275,268,270,277,0,255,270,279],
[283,284,285,286,295,0,269,297],
[259,269,278,278,280,281,0,276],
[266,275,265,280,271,253,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,289,266,277,288,266,275],
[272,0,283,279,279,274,277,281],
[261,267,0,268,252,272,259,274],
[284,271,282,0,285,287,262,282],
[273,271,298,265,0,283,266,280],
[262,276,278,263,267,0,265,266],
[284,273,291,288,284,285,0,273],
[275,269,276,268,270,284,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,264,264,283,279,241,257],
[282,0,277,265,287,275,289,288],
[286,273,0,270,288,311,290,244],
[286,285,280,0,273,305,275,278],
[267,263,262,277,0,283,279,250],
[271,275,239,245,267,0,268,252],
[309,261,260,275,271,282,0,271],
[293,262,306,272,300,298,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,267,278,278,260,305,286],
[265,0,280,285,285,284,304,284],
[283,270,0,263,286,281,292,276],
[272,265,287,0,288,266,297,301],
[272,265,264,262,0,258,286,271],
[290,266,269,284,292,0,303,295],
[245,246,258,253,264,247,0,274],
[264,266,274,249,279,255,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,280,277,275,303,279,274],
[269,0,268,256,266,290,264,257],
[270,282,0,259,273,269,267,278],
[273,294,291,0,287,285,270,262],
[275,284,277,263,0,283,281,253],
[247,260,281,265,267,0,265,245],
[271,286,283,280,269,285,0,269],
[276,293,272,288,297,305,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,291,264,260,285,272,294],
[280,0,290,261,270,285,282,288],
[259,260,0,264,252,267,268,274],
[286,289,286,0,285,275,287,301],
[290,280,298,265,0,283,280,288],
[265,265,283,275,267,0,282,292],
[278,268,282,263,270,268,0,280],
[256,262,276,249,262,258,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,264,282,282,292,272,263],
[292,0,284,290,258,274,266,260],
[286,266,0,276,279,288,275,278],
[268,260,274,0,253,260,273,269],
[268,292,271,297,0,264,273,283],
[258,276,262,290,286,0,266,267],
[278,284,275,277,277,284,0,293],
[287,290,272,281,267,283,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,289,290,287,287,282,270],
[259,0,249,271,249,210,252,257],
[261,301,0,286,244,231,245,264],
[260,279,264,0,249,258,270,258],
[263,301,306,301,0,258,264,277],
[263,340,319,292,292,0,275,300],
[268,298,305,280,286,275,0,291],
[280,293,286,292,273,250,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,288,268,276,268,265,277],
[252,0,249,264,269,267,258,259],
[262,301,0,268,275,282,267,284],
[282,286,282,0,290,282,264,290],
[274,281,275,260,0,267,273,264],
[282,283,268,268,283,0,270,270],
[285,292,283,286,277,280,0,272],
[273,291,266,260,286,280,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,251,283,271,255,245,261],
[293,0,260,276,263,240,222,259],
[299,290,0,267,273,263,287,268],
[267,274,283,0,292,245,240,287],
[279,287,277,258,0,262,248,244],
[295,310,287,305,288,0,261,275],
[305,328,263,310,302,289,0,295],
[289,291,282,263,306,275,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,284,278,276,276,273,277],
[273,0,296,311,294,293,275,288],
[266,254,0,285,274,273,274,265],
[272,239,265,0,248,266,272,250],
[274,256,276,302,0,276,273,264],
[274,257,277,284,274,0,285,282],
[277,275,276,278,277,265,0,266],
[273,262,285,300,286,268,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,282,282,285,293,267,292],
[246,0,269,274,243,259,263,262],
[268,281,0,270,272,264,268,277],
[268,276,280,0,269,267,248,277],
[265,307,278,281,0,281,261,267],
[257,291,286,283,269,0,277,279],
[283,287,282,302,289,273,0,283],
[258,288,273,273,283,271,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,309,287,265,283,285,290],
[271,0,292,274,259,277,282,272],
[241,258,0,271,252,251,256,257],
[263,276,279,0,280,277,276,279],
[285,291,298,270,0,279,292,294],
[267,273,299,273,271,0,267,283],
[265,268,294,274,258,283,0,272],
[260,278,293,271,256,267,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,304,280,274,268,255,301],
[255,0,269,245,240,261,236,264],
[246,281,0,248,247,252,259,257],
[270,305,302,0,251,264,258,291],
[276,310,303,299,0,262,276,279],
[282,289,298,286,288,0,270,291],
[295,314,291,292,274,280,0,284],
[249,286,293,259,271,259,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,264,273,275,258,275,284],
[278,0,271,276,277,256,272,260],
[286,279,0,263,283,261,283,268],
[277,274,287,0,307,276,281,277],
[275,273,267,243,0,248,270,268],
[292,294,289,274,302,0,286,288],
[275,278,267,269,280,264,0,275],
[266,290,282,273,282,262,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,329,297,261,282,287,274,262],
[221,0,225,265,277,248,231,267],
[253,325,0,296,300,305,281,285],
[289,285,254,0,286,257,257,297],
[268,273,250,264,0,253,271,261],
[263,302,245,293,297,0,277,311],
[276,319,269,293,279,273,0,274],
[288,283,265,253,289,239,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,269,271,272,271,271,276],
[278,0,275,285,264,287,277,282],
[281,275,0,280,280,270,268,286],
[279,265,270,0,265,252,267,271],
[278,286,270,285,0,275,279,284],
[279,263,280,298,275,0,272,270],
[279,273,282,283,271,278,0,286],
[274,268,264,279,266,280,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,289,270,278,302,284,289],
[268,0,276,257,269,282,267,268],
[261,274,0,250,279,275,262,268],
[280,293,300,0,292,303,279,273],
[272,281,271,258,0,280,263,275],
[248,268,275,247,270,0,244,269],
[266,283,288,271,287,306,0,291],
[261,282,282,277,275,281,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,232,288,276,247,273,291],
[284,0,288,292,256,273,274,295],
[318,262,0,307,257,279,267,284],
[262,258,243,0,274,259,270,281],
[274,294,293,276,0,294,300,287],
[303,277,271,291,256,0,255,301],
[277,276,283,280,250,295,0,270],
[259,255,266,269,263,249,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,269,269,288,262,292,268],
[278,0,250,243,249,247,280,280],
[281,300,0,277,270,273,281,258],
[281,307,273,0,279,271,277,288],
[262,301,280,271,0,286,314,290],
[288,303,277,279,264,0,296,293],
[258,270,269,273,236,254,0,287],
[282,270,292,262,260,257,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,285,260,270,263,254,269],
[261,0,266,251,280,256,269,259],
[265,284,0,266,298,274,264,287],
[290,299,284,0,302,274,280,296],
[280,270,252,248,0,260,256,289],
[287,294,276,276,290,0,273,298],
[296,281,286,270,294,277,0,291],
[281,291,263,254,261,252,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,276,255,314,384,367,461],
[283,0,374,406,283,372,250,367],
[274,176,0,268,187,390,237,473],
[295,144,282,0,289,261,243,262],
[236,267,363,261,0,384,236,447],
[166,178,160,289,166,0,250,277],
[183,300,313,307,314,300,0,313],
[89,183,77,288,103,273,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,279,323,306,174,228,291],
[317,0,270,388,317,253,279,282],
[271,280,0,208,236,138,274,314],
[227,162,342,0,227,182,242,247],
[244,233,314,323,0,174,203,245],
[376,297,412,368,376,0,194,336],
[322,271,276,308,347,356,0,312],
[259,268,236,303,305,214,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,267,336,202,167,316,183],
[370,0,265,461,384,200,335,251],
[283,285,0,418,329,208,259,259],
[214,89,132,0,300,116,251,202],
[348,166,221,250,0,140,313,137],
[383,350,342,434,410,0,270,235],
[234,215,291,299,237,280,0,277],
[367,299,291,348,413,315,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,259,282,258,252,257,267],
[287,0,280,328,265,255,289,293],
[291,270,0,314,288,250,265,277],
[268,222,236,0,249,245,243,284],
[292,285,262,301,0,264,249,295],
[298,295,300,305,286,0,273,292],
[293,261,285,307,301,277,0,304],
[283,257,273,266,255,258,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,237,236,210,273,176,207],
[313,0,300,269,217,309,246,281],
[313,250,0,319,247,272,243,208],
[314,281,231,0,256,289,234,286],
[340,333,303,294,0,257,264,243],
[277,241,278,261,293,0,181,200],
[374,304,307,316,286,369,0,267],
[343,269,342,264,307,350,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,262,271,260,290,278,258],
[312,0,289,289,285,308,296,266],
[288,261,0,258,260,281,281,249],
[279,261,292,0,277,297,282,276],
[290,265,290,273,0,297,297,274],
[260,242,269,253,253,0,277,243],
[272,254,269,268,253,273,0,274],
[292,284,301,274,276,307,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,311,279,287,285,296,271],
[269,0,296,270,282,267,293,271],
[239,254,0,246,228,232,254,239],
[271,280,304,0,263,278,275,278],
[263,268,322,287,0,278,273,257],
[265,283,318,272,272,0,271,259],
[254,257,296,275,277,279,0,260],
[279,279,311,272,293,291,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,273,258,277,281,275,251],
[269,0,251,272,260,257,260,261],
[277,299,0,275,294,273,257,276],
[292,278,275,0,287,281,266,275],
[273,290,256,263,0,259,259,257],
[269,293,277,269,291,0,259,272],
[275,290,293,284,291,291,0,276],
[299,289,274,275,293,278,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,265,300,291,261,278,276],
[287,0,274,277,276,278,275,291],
[285,276,0,313,255,285,291,283],
[250,273,237,0,261,247,255,282],
[259,274,295,289,0,272,281,281],
[289,272,265,303,278,0,273,295],
[272,275,259,295,269,277,0,285],
[274,259,267,268,269,255,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,237,227,261,261,228,250],
[308,0,268,279,302,317,251,265],
[313,282,0,279,300,299,274,269],
[323,271,271,0,306,299,233,275],
[289,248,250,244,0,299,240,258],
[289,233,251,251,251,0,207,230],
[322,299,276,317,310,343,0,263],
[300,285,281,275,292,320,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,216,203,189,288,249,243],
[306,0,200,223,223,280,270,248],
[334,350,0,275,280,328,307,285],
[347,327,275,0,294,321,342,267],
[361,327,270,256,0,295,306,305],
[262,270,222,229,255,0,288,238],
[301,280,243,208,244,262,0,228],
[307,302,265,283,245,312,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,302,270,290,302,327,278],
[248,0,330,260,279,285,289,287],
[248,220,0,240,260,244,289,250],
[280,290,310,0,269,309,306,277],
[260,271,290,281,0,288,304,242],
[248,265,306,241,262,0,280,259],
[223,261,261,244,246,270,0,259],
[272,263,300,273,308,291,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,286,296,263,282,315,267],
[249,0,233,269,278,297,290,266],
[264,317,0,280,322,315,308,293],
[254,281,270,0,276,290,310,263],
[287,272,228,274,0,285,302,280],
[268,253,235,260,265,0,286,267],
[235,260,242,240,248,264,0,233],
[283,284,257,287,270,283,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,246,321,279,321,223,265],
[252,0,270,314,288,295,271,240],
[304,280,0,289,248,323,232,249],
[229,236,261,0,235,301,278,245],
[271,262,302,315,0,334,262,273],
[229,255,227,249,216,0,194,250],
[327,279,318,272,288,356,0,337],
[285,310,301,305,277,300,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,309,247,290,261,275,288],
[279,0,265,262,266,285,267,240],
[241,285,0,245,293,267,262,237],
[303,288,305,0,281,271,328,311],
[260,284,257,269,0,278,278,290],
[289,265,283,279,272,0,273,235],
[275,283,288,222,272,277,0,253],
[262,310,313,239,260,315,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,260,237,288,247,264,256],
[298,0,265,261,286,274,284,247],
[290,285,0,262,297,280,283,257],
[313,289,288,0,309,272,288,287],
[262,264,253,241,0,238,272,238],
[303,276,270,278,312,0,266,265],
[286,266,267,262,278,284,0,251],
[294,303,293,263,312,285,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,248,260,265,272,263,272],
[300,0,262,275,281,276,270,271],
[302,288,0,287,275,288,277,279],
[290,275,263,0,258,276,262,265],
[285,269,275,292,0,287,275,277],
[278,274,262,274,263,0,271,266],
[287,280,273,288,275,279,0,283],
[278,279,271,285,273,284,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,217,243,293,264,232,247],
[272,0,265,307,241,216,255,254],
[333,285,0,270,322,310,309,285],
[307,243,280,0,245,264,276,315],
[257,309,228,305,0,251,226,323],
[286,334,240,286,299,0,256,301],
[318,295,241,274,324,294,0,318],
[303,296,265,235,227,249,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,268,295,254,277,262,312],
[264,0,289,284,239,276,275,291],
[282,261,0,317,265,286,267,300],
[255,266,233,0,244,262,243,278],
[296,311,285,306,0,296,267,305],
[273,274,264,288,254,0,266,285],
[288,275,283,307,283,284,0,303],
[238,259,250,272,245,265,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,301,267,277,254,277,287],
[283,0,270,292,287,276,291,272],
[249,280,0,257,274,269,280,255],
[283,258,293,0,280,230,279,272],
[273,263,276,270,0,233,259,261],
[296,274,281,320,317,0,313,279],
[273,259,270,271,291,237,0,266],
[263,278,295,278,289,271,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,240,262,251,250,244,223],
[293,0,229,268,270,255,281,247],
[310,321,0,309,300,304,274,300],
[288,282,241,0,296,277,290,267],
[299,280,250,254,0,285,258,259],
[300,295,246,273,265,0,255,250],
[306,269,276,260,292,295,0,267],
[327,303,250,283,291,300,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,209,301,180,312,309,291],
[293,0,230,316,187,263,319,245],
[341,320,0,390,323,361,243,368],
[249,234,160,0,232,270,184,282],
[370,363,227,318,0,314,295,237],
[238,287,189,280,236,0,306,266],
[241,231,307,366,255,244,0,279],
[259,305,182,268,313,284,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,298,274,304,290,285,285],
[257,0,269,273,284,266,263,266],
[252,281,0,262,278,247,275,271],
[276,277,288,0,295,274,286,278],
[246,266,272,255,0,250,262,260],
[260,284,303,276,300,0,288,292],
[265,287,275,264,288,262,0,276],
[265,284,279,272,290,258,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,260,275,280,272,298,293],
[288,0,264,273,283,284,281,298],
[290,286,0,289,281,272,295,293],
[275,277,261,0,271,268,291,276],
[270,267,269,279,0,286,296,282],
[278,266,278,282,264,0,287,278],
[252,269,255,259,254,263,0,266],
[257,252,257,274,268,272,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,243,285,273,284,239,279],
[243,0,288,279,263,272,242,274],
[307,262,0,270,296,292,284,288],
[265,271,280,0,279,289,242,300],
[277,287,254,271,0,272,280,267],
[266,278,258,261,278,0,281,285],
[311,308,266,308,270,269,0,287],
[271,276,262,250,283,265,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,304,282,299,274,286,313],
[258,0,262,266,288,273,262,280],
[246,288,0,275,289,281,264,291],
[268,284,275,0,294,259,274,281],
[251,262,261,256,0,243,236,283],
[276,277,269,291,307,0,272,283],
[264,288,286,276,314,278,0,298],
[237,270,259,269,267,267,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,275,252,269,286,260,269],
[273,0,266,241,264,252,271,266],
[275,284,0,257,258,252,297,243],
[298,309,293,0,289,313,244,281],
[281,286,292,261,0,267,266,293],
[264,298,298,237,283,0,255,270],
[290,279,253,306,284,295,0,284],
[281,284,307,269,257,280,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,279,279,279,290,270,282],
[256,0,291,272,254,269,268,267],
[271,259,0,292,274,279,283,272],
[271,278,258,0,259,280,296,291],
[271,296,276,291,0,295,267,313],
[260,281,271,270,255,0,253,256],
[280,282,267,254,283,297,0,277],
[268,283,278,259,237,294,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,290,289,276,265,268,279],
[288,0,290,279,274,282,281,279],
[260,260,0,275,260,275,276,269],
[261,271,275,0,264,259,268,265],
[274,276,290,286,0,278,276,280],
[285,268,275,291,272,0,269,266],
[282,269,274,282,274,281,0,281],
[271,271,281,285,270,284,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,271,265,268,243,312,255],
[258,0,279,277,268,216,282,222],
[279,271,0,262,281,241,312,207],
[285,273,288,0,270,269,307,235],
[282,282,269,280,0,289,305,239],
[307,334,309,281,261,0,331,284],
[238,268,238,243,245,219,0,192],
[295,328,343,315,311,266,358,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,302,291,282,313,273,295],
[285,0,270,286,281,276,290,277],
[248,280,0,268,271,275,260,287],
[259,264,282,0,273,279,261,296],
[268,269,279,277,0,275,265,289],
[237,274,275,271,275,0,262,259],
[277,260,290,289,285,288,0,250],
[255,273,263,254,261,291,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,273,259,275,273,267,268],
[277,0,277,269,284,286,277,285],
[277,273,0,268,278,277,288,287],
[291,281,282,0,274,280,282,281],
[275,266,272,276,0,272,267,275],
[277,264,273,270,278,0,267,258],
[283,273,262,268,283,283,0,275],
[282,265,263,269,275,292,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,294,288,290,278,262,288],
[274,0,276,287,281,275,283,275],
[256,274,0,262,261,251,238,252],
[262,263,288,0,276,261,272,266],
[260,269,289,274,0,280,277,269],
[272,275,299,289,270,0,264,278],
[288,267,312,278,273,286,0,264],
[262,275,298,284,281,272,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,294,286,267,317,267,287],
[289,0,297,286,284,264,249,216],
[256,253,0,273,262,298,251,272],
[264,264,277,0,255,250,229,254],
[283,266,288,295,0,298,289,250],
[233,286,252,300,252,0,264,271],
[283,301,299,321,261,286,0,266],
[263,334,278,296,300,279,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,293,302,274,262,284,325],
[253,0,274,273,241,265,273,269],
[257,276,0,286,245,277,277,263],
[248,277,264,0,261,254,250,273],
[276,309,305,289,0,275,326,319],
[288,285,273,296,275,0,274,321],
[266,277,273,300,224,276,0,275],
[225,281,287,277,231,229,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,193,203,285,232,216,291],
[316,0,241,283,274,285,274,318],
[357,309,0,321,284,272,281,295],
[347,267,229,0,293,256,320,298],
[265,276,266,257,0,288,255,282],
[318,265,278,294,262,0,269,293],
[334,276,269,230,295,281,0,296],
[259,232,255,252,268,257,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,265,265,259,290,254,281],
[273,0,257,255,271,277,275,265],
[285,293,0,280,262,298,261,281],
[285,295,270,0,281,289,268,277],
[291,279,288,269,0,300,269,272],
[260,273,252,261,250,0,258,261],
[296,275,289,282,281,292,0,276],
[269,285,269,273,278,289,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,274,288,259,242,288,235],
[284,0,270,271,270,275,250,245],
[276,280,0,261,293,260,320,239],
[262,279,289,0,253,286,292,242],
[291,280,257,297,0,277,302,222],
[308,275,290,264,273,0,312,276],
[262,300,230,258,248,238,0,251],
[315,305,311,308,328,274,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,275,268,248,273,266,303],
[278,0,258,272,262,257,264,301],
[275,292,0,270,275,283,265,296],
[282,278,280,0,269,271,291,310],
[302,288,275,281,0,263,271,312],
[277,293,267,279,287,0,275,302],
[284,286,285,259,279,275,0,294],
[247,249,254,240,238,248,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,273,269,275,259,274,250],
[297,0,296,276,280,296,304,267],
[277,254,0,263,275,286,269,263],
[281,274,287,0,287,280,291,241],
[275,270,275,263,0,281,287,255],
[291,254,264,270,269,0,279,276],
[276,246,281,259,263,271,0,253],
[300,283,287,309,295,274,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,294,265,291,262,279,290],
[277,0,281,256,284,271,266,284],
[256,269,0,268,267,274,268,269],
[285,294,282,0,289,264,279,304],
[259,266,283,261,0,261,271,270],
[288,279,276,286,289,0,272,302],
[271,284,282,271,279,278,0,301],
[260,266,281,246,280,248,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,270,229,242,257,237,277],
[275,0,244,251,253,258,268,246],
[280,306,0,276,273,293,293,259],
[321,299,274,0,248,278,267,266],
[308,297,277,302,0,302,295,252],
[293,292,257,272,248,0,291,264],
[313,282,257,283,255,259,0,276],
[273,304,291,284,298,286,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,277,285,272,278,284,278],
[283,0,294,274,278,287,271,263],
[273,256,0,263,258,284,279,249],
[265,276,287,0,272,268,266,258],
[278,272,292,278,0,268,270,258],
[272,263,266,282,282,0,276,264],
[266,279,271,284,280,274,0,285],
[272,287,301,292,292,286,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,262,272,271,280,276,264],
[287,0,266,258,272,255,285,259],
[288,284,0,263,276,271,289,263],
[278,292,287,0,261,281,294,275],
[279,278,274,289,0,267,290,263],
[270,295,279,269,283,0,278,273],
[274,265,261,256,260,272,0,274],
[286,291,287,275,287,277,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,261,255,275,278,270,274],
[298,0,276,267,279,283,270,281],
[289,274,0,274,286,275,262,277],
[295,283,276,0,279,281,286,274],
[275,271,264,271,0,281,243,270],
[272,267,275,269,269,0,280,274],
[280,280,288,264,307,270,0,284],
[276,269,273,276,280,276,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,291,283,292,283,273,298],
[271,0,290,279,280,285,255,314],
[259,260,0,249,261,282,283,295],
[267,271,301,0,278,287,288,310],
[258,270,289,272,0,290,266,293],
[267,265,268,263,260,0,267,272],
[277,295,267,262,284,283,0,300],
[252,236,255,240,257,278,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,290,282,268,273,290,274],
[252,0,252,271,278,241,297,253],
[260,298,0,289,282,283,288,283],
[268,279,261,0,264,272,284,256],
[282,272,268,286,0,268,285,270],
[277,309,267,278,282,0,291,278],
[260,253,262,266,265,259,0,257],
[276,297,267,294,280,272,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,266,262,284,254,289,294],
[265,0,258,265,271,251,264,248],
[284,292,0,290,307,285,287,275],
[288,285,260,0,286,251,274,282],
[266,279,243,264,0,262,279,281],
[296,299,265,299,288,0,289,304],
[261,286,263,276,271,261,0,298],
[256,302,275,268,269,246,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,271,255,273,238,241,257],
[281,0,299,276,290,265,285,277],
[279,251,0,255,269,251,245,264],
[295,274,295,0,294,252,271,277],
[277,260,281,256,0,243,273,281],
[312,285,299,298,307,0,275,277],
[309,265,305,279,277,275,0,274],
[293,273,286,273,269,273,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,250,193,259,259,214,287],
[306,0,291,260,273,238,230,288],
[300,259,0,293,266,279,258,347],
[357,290,257,0,333,263,276,348],
[291,277,284,217,0,272,237,278],
[291,312,271,287,278,0,263,315],
[336,320,292,274,313,287,0,288],
[263,262,203,202,272,235,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,301,288,246,271,260,296],
[272,0,294,280,264,262,271,275],
[249,256,0,266,257,259,256,279],
[262,270,284,0,247,257,254,272],
[304,286,293,303,0,299,271,301],
[279,288,291,293,251,0,281,303],
[290,279,294,296,279,269,0,293],
[254,275,271,278,249,247,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,279,321,285,299,266,286],
[265,0,277,307,266,300,263,291],
[271,273,0,306,288,289,284,293],
[229,243,244,0,227,272,268,251],
[265,284,262,323,0,292,309,283],
[251,250,261,278,258,0,256,268],
[284,287,266,282,241,294,0,286],
[264,259,257,299,267,282,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,271,260,263,257,262,266],
[305,0,263,272,279,277,258,283],
[279,287,0,291,270,264,283,283],
[290,278,259,0,268,273,260,272],
[287,271,280,282,0,254,278,291],
[293,273,286,277,296,0,280,294],
[288,292,267,290,272,270,0,263],
[284,267,267,278,259,256,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,271,260,272,276,265,301],
[304,0,313,307,259,282,288,281],
[279,237,0,298,282,264,254,277],
[290,243,252,0,230,263,254,250],
[278,291,268,320,0,263,299,262],
[274,268,286,287,287,0,296,299],
[285,262,296,296,251,254,0,267],
[249,269,273,300,288,251,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,256,263,264,283,257,256],
[288,0,271,270,270,252,275,247],
[294,279,0,285,274,288,270,291],
[287,280,265,0,278,278,263,272],
[286,280,276,272,0,279,270,280],
[267,298,262,272,271,0,283,282],
[293,275,280,287,280,267,0,287],
[294,303,259,278,270,268,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,284,292,303,274,319,301],
[257,0,255,277,284,259,254,248],
[266,295,0,297,277,278,275,273],
[258,273,253,0,279,267,275,261],
[247,266,273,271,0,273,256,273],
[276,291,272,283,277,0,298,266],
[231,296,275,275,294,252,0,275],
[249,302,277,289,277,284,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,267,291,295,266,269,276],
[277,0,280,290,278,262,268,275],
[283,270,0,278,290,269,269,266],
[259,260,272,0,280,253,275,272],
[255,272,260,270,0,255,247,261],
[284,288,281,297,295,0,272,291],
[281,282,281,275,303,278,0,287],
[274,275,284,278,289,259,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,268,372,277,310,324,305],
[260,0,292,368,254,325,301,269],
[282,258,0,326,300,297,295,260],
[178,182,224,0,237,293,279,262],
[273,296,250,313,0,315,317,265],
[240,225,253,257,235,0,322,225],
[226,249,255,271,233,228,0,191],
[245,281,290,288,285,325,359,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,263,242,265,268,269,251],
[304,0,281,277,288,272,288,280],
[287,269,0,258,276,277,271,253],
[308,273,292,0,296,293,299,279],
[285,262,274,254,0,272,283,248],
[282,278,273,257,278,0,280,272],
[281,262,279,251,267,270,0,263],
[299,270,297,271,302,278,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,281,276,265,254,285,291],
[270,0,265,277,273,255,288,284],
[269,285,0,282,288,281,272,304],
[274,273,268,0,261,263,279,294],
[285,277,262,289,0,267,295,291],
[296,295,269,287,283,0,282,304],
[265,262,278,271,255,268,0,269],
[259,266,246,256,259,246,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,263,329,276,323,351,361],
[284,0,268,288,329,308,330,289],
[287,282,0,314,320,328,350,261],
[221,262,236,0,255,342,378,302],
[274,221,230,295,0,291,315,300],
[227,242,222,208,259,0,309,284],
[199,220,200,172,235,241,0,240],
[189,261,289,248,250,266,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,281,297,263,282,272,296],
[268,0,278,289,276,273,290,308],
[269,272,0,272,289,279,269,295],
[253,261,278,0,275,264,294,291],
[287,274,261,275,0,295,285,288],
[268,277,271,286,255,0,280,291],
[278,260,281,256,265,270,0,288],
[254,242,255,259,262,259,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,297,300,282,258,285,283],
[267,0,286,287,263,277,283,252],
[253,264,0,283,273,246,251,269],
[250,263,267,0,286,255,284,270],
[268,287,277,264,0,276,273,273],
[292,273,304,295,274,0,301,279],
[265,267,299,266,277,249,0,268],
[267,298,281,280,277,271,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,284,288,288,288,274,289],
[291,0,283,280,296,264,286,281],
[266,267,0,278,295,272,291,289],
[262,270,272,0,276,268,266,279],
[262,254,255,274,0,273,265,262],
[262,286,278,282,277,0,272,266],
[276,264,259,284,285,278,0,276],
[261,269,261,271,288,284,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,284,297,293,269,283,281],
[261,0,294,249,282,275,278,279],
[266,256,0,229,271,256,260,248],
[253,301,321,0,286,290,285,291],
[257,268,279,264,0,276,284,257],
[281,275,294,260,274,0,295,237],
[267,272,290,265,266,255,0,239],
[269,271,302,259,293,313,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,272,278,245,272,244,261],
[300,0,294,311,296,272,281,288],
[278,256,0,284,283,272,257,267],
[272,239,266,0,269,254,266,273],
[305,254,267,281,0,278,283,291],
[278,278,278,296,272,0,274,261],
[306,269,293,284,267,276,0,293],
[289,262,283,277,259,289,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,274,262,258,278,278,247],
[289,0,303,297,289,276,304,273],
[276,247,0,277,255,263,290,250],
[288,253,273,0,250,272,308,264],
[292,261,295,300,0,272,305,294],
[272,274,287,278,278,0,281,272],
[272,246,260,242,245,269,0,251],
[303,277,300,286,256,278,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,284,295,277,296,275,278],
[265,0,278,275,246,269,260,270],
[266,272,0,254,243,281,270,254],
[255,275,296,0,248,285,272,265],
[273,304,307,302,0,306,293,282],
[254,281,269,265,244,0,247,249],
[275,290,280,278,257,303,0,240],
[272,280,296,285,268,301,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,292,307,299,272,268,290],
[260,0,272,267,278,257,260,256],
[258,278,0,268,271,256,270,268],
[243,283,282,0,276,265,281,268],
[251,272,279,274,0,257,264,273],
[278,293,294,285,293,0,263,284],
[282,290,280,269,286,287,0,281],
[260,294,282,282,277,266,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,288,286,282,262,313,264],
[296,0,306,293,269,246,275,277],
[262,244,0,259,269,270,290,246],
[264,257,291,0,280,272,280,256],
[268,281,281,270,0,292,302,247],
[288,304,280,278,258,0,315,287],
[237,275,260,270,248,235,0,224],
[286,273,304,294,303,263,326,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,293,279,281,294,279,298],
[285,0,286,271,294,280,283,310],
[257,264,0,262,261,276,274,269],
[271,279,288,0,291,285,274,299],
[269,256,289,259,0,265,277,270],
[256,270,274,265,285,0,275,277],
[271,267,276,276,273,275,0,269],
[252,240,281,251,280,273,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,272,300,283,281,271,275],
[268,0,287,299,270,279,267,262],
[278,263,0,291,255,285,269,252],
[250,251,259,0,262,271,254,254],
[267,280,295,288,0,275,254,267],
[269,271,265,279,275,0,273,263],
[279,283,281,296,296,277,0,275],
[275,288,298,296,283,287,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,269,266,258,282,265,266],
[292,0,302,286,266,306,285,292],
[281,248,0,286,246,265,288,294],
[284,264,264,0,290,260,286,299],
[292,284,304,260,0,274,295,293],
[268,244,285,290,276,0,285,295],
[285,265,262,264,255,265,0,300],
[284,258,256,251,257,255,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,269,257,282,276,276,271],
[276,0,287,288,296,266,277,264],
[281,263,0,266,293,232,298,277],
[293,262,284,0,302,258,294,284],
[268,254,257,248,0,258,251,248],
[274,284,318,292,292,0,308,271],
[274,273,252,256,299,242,0,249],
[279,286,273,266,302,279,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,325,264,292,305,301,296],
[252,0,309,262,269,292,282,290],
[225,241,0,257,234,274,264,257],
[286,288,293,0,253,271,292,292],
[258,281,316,297,0,305,306,285],
[245,258,276,279,245,0,268,255],
[249,268,286,258,244,282,0,286],
[254,260,293,258,265,295,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,271,263,276,298,271,262],
[306,0,282,290,282,262,261,280],
[279,268,0,266,259,262,259,267],
[287,260,284,0,300,294,273,283],
[274,268,291,250,0,260,276,284],
[252,288,288,256,290,0,248,273],
[279,289,291,277,274,302,0,294],
[288,270,283,267,266,277,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,288,272,267,275,270,283],
[291,0,277,287,262,294,273,270],
[262,273,0,271,249,273,260,261],
[278,263,279,0,269,281,276,266],
[283,288,301,281,0,287,287,275],
[275,256,277,269,263,0,268,259],
[280,277,290,274,263,282,0,268],
[267,280,289,284,275,291,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,295,276,263,304,288,264],
[309,0,269,291,297,305,241,277],
[255,281,0,287,246,325,235,251],
[274,259,263,0,246,299,216,244],
[287,253,304,304,0,319,255,276],
[246,245,225,251,231,0,218,241],
[262,309,315,334,295,332,0,314],
[286,273,299,306,274,309,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,275,300,282,275,276,275],
[272,0,280,276,271,285,282,263],
[275,270,0,282,263,267,275,267],
[250,274,268,0,247,267,272,255],
[268,279,287,303,0,280,276,262],
[275,265,283,283,270,0,260,258],
[274,268,275,278,274,290,0,259],
[275,287,283,295,288,292,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,343,330,354,252,288,350,322],
[207,0,294,258,279,280,386,266],
[220,256,0,305,249,312,247,253],
[196,292,245,0,353,299,310,291],
[298,271,301,197,0,322,293,275],
[262,270,238,251,228,0,289,303],
[200,164,303,240,257,261,0,296],
[228,284,297,259,275,247,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,285,276,268,283,290,278],
[272,0,299,287,278,293,273,295],
[265,251,0,265,267,293,290,270],
[274,263,285,0,267,278,279,279],
[282,272,283,283,0,284,279,274],
[267,257,257,272,266,0,269,276],
[260,277,260,271,271,281,0,285],
[272,255,280,271,276,274,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,298,281,279,273,267,277],
[264,0,264,265,280,277,283,270],
[252,286,0,270,270,271,292,268],
[269,285,280,0,273,264,257,288],
[271,270,280,277,0,278,268,260],
[277,273,279,286,272,0,286,250],
[283,267,258,293,282,264,0,276],
[273,280,282,262,290,300,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,278,287,274,294,282,279],
[278,0,269,283,297,287,293,280],
[272,281,0,283,266,291,288,282],
[263,267,267,0,275,287,278,284],
[276,253,284,275,0,281,292,285],
[256,263,259,263,269,0,279,272],
[268,257,262,272,258,271,0,266],
[271,270,268,266,265,278,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,286,274,270,297,283,276],
[279,0,285,268,287,299,278,278],
[264,265,0,277,280,289,284,279],
[276,282,273,0,273,283,291,274],
[280,263,270,277,0,279,284,280],
[253,251,261,267,271,0,272,283],
[267,272,266,259,266,278,0,278],
[274,272,271,276,270,267,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,276,294,267,287,276,268],
[267,0,289,279,264,260,265,286],
[274,261,0,277,272,271,264,292],
[256,271,273,0,260,253,288,273],
[283,286,278,290,0,273,278,302],
[263,290,279,297,277,0,283,284],
[274,285,286,262,272,267,0,285],
[282,264,258,277,248,266,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,294,313,277,289,270,286],
[253,0,291,290,286,294,270,279],
[256,259,0,282,269,283,244,259],
[237,260,268,0,286,295,278,257],
[273,264,281,264,0,306,258,296],
[261,256,267,255,244,0,241,238],
[280,280,306,272,292,309,0,291],
[264,271,291,293,254,312,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,197,198,178,188,196,248],
[355,0,271,263,235,276,262,342],
[353,279,0,294,167,244,220,263],
[352,287,256,0,259,261,251,322],
[372,315,383,291,0,270,289,307],
[362,274,306,289,280,0,303,354],
[354,288,330,299,261,247,0,296],
[302,208,287,228,243,196,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,295,273,302,271,285,262],
[258,0,251,265,275,263,257,251],
[255,299,0,273,281,277,286,261],
[277,285,277,0,296,263,269,271],
[248,275,269,254,0,249,252,265],
[279,287,273,287,301,0,280,276],
[265,293,264,281,298,270,0,265],
[288,299,289,279,285,274,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,284,297,270,284,284,274],
[270,0,287,282,266,281,283,267],
[266,263,0,289,276,281,283,276],
[253,268,261,0,262,253,263,244],
[280,284,274,288,0,291,279,296],
[266,269,269,297,259,0,265,272],
[266,267,267,287,271,285,0,273],
[276,283,274,306,254,278,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,317,299,286,309,265,315],
[282,0,294,268,286,280,254,300],
[233,256,0,266,266,275,263,328],
[251,282,284,0,273,270,288,304],
[264,264,284,277,0,290,257,273],
[241,270,275,280,260,0,237,276],
[285,296,287,262,293,313,0,276],
[235,250,222,246,277,274,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,285,278,274,272,252,277],
[281,0,262,284,278,286,279,284],
[265,288,0,323,274,285,295,280],
[272,266,227,0,259,276,268,245],
[276,272,276,291,0,270,252,272],
[278,264,265,274,280,0,295,290],
[298,271,255,282,298,255,0,263],
[273,266,270,305,278,260,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,288,292,267,312,334,342],
[242,0,273,328,291,302,347,339],
[262,277,0,318,260,294,265,268],
[258,222,232,0,223,253,284,285],
[283,259,290,327,0,307,300,316],
[238,248,256,297,243,0,314,301],
[216,203,285,266,250,236,0,239],
[208,211,282,265,234,249,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,284,273,274,268,279,278],
[263,0,276,269,274,270,277,271],
[266,274,0,270,264,271,273,279],
[277,281,280,0,261,276,277,284],
[276,276,286,289,0,288,299,272],
[282,280,279,274,262,0,271,271],
[271,273,277,273,251,279,0,258],
[272,279,271,266,278,279,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,293,251,260,255,260,270],
[270,0,276,262,275,276,248,258],
[257,274,0,243,272,251,252,252],
[299,288,307,0,321,261,268,285],
[290,275,278,229,0,259,250,278],
[295,274,299,289,291,0,286,292],
[290,302,298,282,300,264,0,294],
[280,292,298,265,272,258,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,236,243,276,302,251,266],
[318,0,289,298,333,351,272,289],
[314,261,0,262,342,316,282,291],
[307,252,288,0,325,320,326,282],
[274,217,208,225,0,238,223,208],
[248,199,234,230,312,0,239,266],
[299,278,268,224,327,311,0,301],
[284,261,259,268,342,284,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,278,293,259,276,291,296],
[268,0,260,275,243,267,275,274],
[272,290,0,256,294,280,288,278],
[257,275,294,0,260,278,279,278],
[291,307,256,290,0,276,286,286],
[274,283,270,272,274,0,275,283],
[259,275,262,271,264,275,0,291],
[254,276,272,272,264,267,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,283,265,324,276,238,220],
[249,0,237,265,289,290,235,206],
[267,313,0,316,296,294,261,304],
[285,285,234,0,299,308,288,260],
[226,261,254,251,0,282,207,243],
[274,260,256,242,268,0,194,197],
[312,315,289,262,343,356,0,280],
[330,344,246,290,307,353,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,324,302,399,237,299,272,272],
[226,0,253,285,207,228,283,147],
[248,297,0,333,282,319,321,216],
[151,265,217,0,215,269,217,181],
[313,343,268,335,0,349,333,318],
[251,322,231,281,201,0,266,231],
[278,267,229,333,217,284,0,202],
[278,403,334,369,232,319,348,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,289,279,237,240,246,298],
[286,0,309,283,288,283,296,268],
[261,241,0,299,280,275,262,262],
[271,267,251,0,242,249,263,258],
[313,262,270,308,0,286,292,289],
[310,267,275,301,264,0,222,285],
[304,254,288,287,258,328,0,294],
[252,282,288,292,261,265,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,274,255,274,292,268,258],
[278,0,276,286,297,280,273,272],
[276,274,0,267,278,291,273,269],
[295,264,283,0,298,302,286,282],
[276,253,272,252,0,297,289,254],
[258,270,259,248,253,0,271,242],
[282,277,277,264,261,279,0,274],
[292,278,281,268,296,308,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,267,281,263,273,278,262],
[281,0,274,276,267,294,281,273],
[283,276,0,294,285,287,288,257],
[269,274,256,0,255,270,264,259],
[287,283,265,295,0,288,280,275],
[277,256,263,280,262,0,274,253],
[272,269,262,286,270,276,0,264],
[288,277,293,291,275,297,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,263,263,259,266,258,284],
[283,0,259,250,242,263,259,279],
[287,291,0,257,260,271,280,266],
[287,300,293,0,270,283,278,284],
[291,308,290,280,0,284,258,278],
[284,287,279,267,266,0,273,279],
[292,291,270,272,292,277,0,283],
[266,271,284,266,272,271,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,276,279,273,267,251,282],
[266,0,266,246,276,255,254,252],
[274,284,0,273,274,277,288,272],
[271,304,277,0,274,268,262,271],
[277,274,276,276,0,275,264,266],
[283,295,273,282,275,0,270,287],
[299,296,262,288,286,280,0,285],
[268,298,278,279,284,263,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,258,293,263,246,281,240],
[295,0,265,285,271,261,269,248],
[292,285,0,277,292,246,247,236],
[257,265,273,0,262,262,217,227],
[287,279,258,288,0,295,278,243],
[304,289,304,288,255,0,305,278],
[269,281,303,333,272,245,0,272],
[310,302,314,323,307,272,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,284,268,262,289,275,264],
[268,0,269,269,273,258,273,279],
[266,281,0,282,262,284,281,276],
[282,281,268,0,280,281,287,273],
[288,277,288,270,0,283,276,262],
[261,292,266,269,267,0,275,263],
[275,277,269,263,274,275,0,271],
[286,271,274,277,288,287,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,300,327,278,261,322,302],
[247,0,276,307,271,238,291,223],
[250,274,0,277,222,226,261,189],
[223,243,273,0,261,235,294,264],
[272,279,328,289,0,254,269,305],
[289,312,324,315,296,0,309,273],
[228,259,289,256,281,241,0,236],
[248,327,361,286,245,277,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,250,274,273,270,234,281],
[300,0,223,278,282,261,281,258],
[300,327,0,245,233,272,258,259],
[276,272,305,0,312,293,303,302],
[277,268,317,238,0,268,298,343],
[280,289,278,257,282,0,303,300],
[316,269,292,247,252,247,0,293],
[269,292,291,248,207,250,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,292,275,262,278,296,282],
[267,0,279,279,284,286,315,288],
[258,271,0,265,258,275,273,270],
[275,271,285,0,262,289,297,286],
[288,266,292,288,0,284,309,294],
[272,264,275,261,266,0,278,265],
[254,235,277,253,241,272,0,274],
[268,262,280,264,256,285,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,310,278,257,294,294,317],
[229,0,274,270,265,271,282,305],
[240,276,0,252,261,277,281,277],
[272,280,298,0,282,288,303,314],
[293,285,289,268,0,270,315,304],
[256,279,273,262,280,0,300,290],
[256,268,269,247,235,250,0,298],
[233,245,273,236,246,260,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,283,294,274,289,309,292],
[261,0,275,294,277,280,280,277],
[267,275,0,305,280,286,284,271],
[256,256,245,0,279,280,276,252],
[276,273,270,271,0,291,292,283],
[261,270,264,270,259,0,286,293],
[241,270,266,274,258,264,0,283],
[258,273,279,298,267,257,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,285,257,298,287,291,272],
[286,0,304,267,305,266,300,275],
[265,246,0,280,271,257,278,263],
[293,283,270,0,283,278,292,263],
[252,245,279,267,0,251,269,265],
[263,284,293,272,299,0,308,278],
[259,250,272,258,281,242,0,250],
[278,275,287,287,285,272,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,267,274,270,279,251,254],
[271,0,275,261,264,276,267,253],
[283,275,0,258,271,278,258,272],
[276,289,292,0,278,295,281,265],
[280,286,279,272,0,286,256,277],
[271,274,272,255,264,0,265,266],
[299,283,292,269,294,285,0,281],
[296,297,278,285,273,284,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,262,263,254,271,268,253],
[295,0,288,246,276,246,247,258],
[288,262,0,260,255,261,252,278],
[287,304,290,0,248,278,255,269],
[296,274,295,302,0,303,293,272],
[279,304,289,272,247,0,267,247],
[282,303,298,295,257,283,0,276],
[297,292,272,281,278,303,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,285,259,284,296,292,279],
[271,0,277,248,283,268,259,263],
[265,273,0,248,297,268,259,275],
[291,302,302,0,297,302,271,259],
[266,267,253,253,0,297,275,259],
[254,282,282,248,253,0,250,248],
[258,291,291,279,275,300,0,274],
[271,287,275,291,291,302,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,260,305,276,264,264,280],
[262,0,274,294,256,291,271,315],
[290,276,0,324,290,329,266,321],
[245,256,226,0,236,273,254,266],
[274,294,260,314,0,286,285,303],
[286,259,221,277,264,0,262,267],
[286,279,284,296,265,288,0,267],
[270,235,229,284,247,283,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,287,281,261,257,281,286],
[266,0,263,277,248,243,287,268],
[263,287,0,286,242,255,262,275],
[269,273,264,0,250,277,267,282],
[289,302,308,300,0,250,290,289],
[293,307,295,273,300,0,278,290],
[269,263,288,283,260,272,0,287],
[264,282,275,268,261,260,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,272,272,268,280,276,268],
[265,0,269,258,276,276,283,267],
[278,281,0,275,272,291,286,272],
[278,292,275,0,275,273,295,278],
[282,274,278,275,0,281,285,271],
[270,274,259,277,269,0,279,257],
[274,267,264,255,265,271,0,264],
[282,283,278,272,279,293,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,312,285,289,292,267,303],
[274,0,322,285,284,287,281,287],
[238,228,0,268,254,259,238,264],
[265,265,282,0,282,292,261,272],
[261,266,296,268,0,305,259,294],
[258,263,291,258,245,0,239,279],
[283,269,312,289,291,311,0,318],
[247,263,286,278,256,271,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,278,264,284,282,271,298],
[275,0,265,249,278,262,262,276],
[272,285,0,277,295,269,279,283],
[286,301,273,0,291,266,293,278],
[266,272,255,259,0,272,277,272],
[268,288,281,284,278,0,269,279],
[279,288,271,257,273,281,0,274],
[252,274,267,272,278,271,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,252,260,268,271,269,258],
[263,0,261,254,247,249,265,245],
[298,289,0,274,297,277,283,285],
[290,296,276,0,284,284,304,267],
[282,303,253,266,0,276,288,269],
[279,301,273,266,274,0,276,266],
[281,285,267,246,262,274,0,267],
[292,305,265,283,281,284,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,284,288,275,284,309,275],
[273,0,285,272,272,265,293,253],
[266,265,0,286,278,255,265,276],
[262,278,264,0,281,259,266,255],
[275,278,272,269,0,278,271,274],
[266,285,295,291,272,0,279,288],
[241,257,285,284,279,271,0,278],
[275,297,274,295,276,262,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,264,309,250,279,272,264],
[276,0,289,304,279,295,261,274],
[286,261,0,290,279,294,280,274],
[241,246,260,0,233,282,246,250],
[300,271,271,317,0,303,278,287],
[271,255,256,268,247,0,242,267],
[278,289,270,304,272,308,0,281],
[286,276,276,300,263,283,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,293,227,272,246,244,230],
[237,0,234,219,238,263,225,225],
[257,316,0,198,240,215,227,230],
[323,331,352,0,304,320,275,289],
[278,312,310,246,0,281,238,273],
[304,287,335,230,269,0,265,270],
[306,325,323,275,312,285,0,306],
[320,325,320,261,277,280,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,273,303,276,294,306,284],
[266,0,274,294,271,285,283,278],
[277,276,0,286,261,275,298,272],
[247,256,264,0,241,270,265,253],
[274,279,289,309,0,282,280,266],
[256,265,275,280,268,0,283,264],
[244,267,252,285,270,267,0,281],
[266,272,278,297,284,286,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,282,253,262,271,261,266],
[257,0,282,264,257,268,254,264],
[268,268,0,245,253,250,247,260],
[297,286,305,0,270,291,286,279],
[288,293,297,280,0,254,274,261],
[279,282,300,259,296,0,274,272],
[289,296,303,264,276,276,0,284],
[284,286,290,271,289,278,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,261,252,245,247,242,273],
[294,0,295,266,292,279,271,275],
[289,255,0,274,283,254,267,284],
[298,284,276,0,291,299,261,280],
[305,258,267,259,0,254,258,282],
[303,271,296,251,296,0,280,266],
[308,279,283,289,292,270,0,283],
[277,275,266,270,268,284,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,282,278,328,288,253,296],
[254,0,256,283,305,287,229,235],
[268,294,0,296,285,279,285,262],
[272,267,254,0,291,271,257,251],
[222,245,265,259,0,280,244,248],
[262,263,271,279,270,0,265,255],
[297,321,265,293,306,285,0,288],
[254,315,288,299,302,295,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,328,313,339,296,311,256],
[239,0,274,254,252,243,236,243],
[222,276,0,263,268,246,272,271],
[237,296,287,0,258,273,248,274],
[211,298,282,292,0,279,278,298],
[254,307,304,277,271,0,252,268],
[239,314,278,302,272,298,0,273],
[294,307,279,276,252,282,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,277,281,269,258,264,266],
[280,0,290,285,270,264,265,296],
[273,260,0,269,262,282,261,280],
[269,265,281,0,247,265,276,274],
[281,280,288,303,0,269,275,289],
[292,286,268,285,281,0,266,293],
[286,285,289,274,275,284,0,296],
[284,254,270,276,261,257,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,268,276,288,246,246,256],
[291,0,237,258,285,251,259,253],
[282,313,0,290,330,262,278,281],
[274,292,260,0,288,267,238,266],
[262,265,220,262,0,215,267,249],
[304,299,288,283,335,0,264,285],
[304,291,272,312,283,286,0,265],
[294,297,269,284,301,265,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,267,266,323,264,219,266],
[281,0,267,260,318,286,227,305],
[283,283,0,280,289,324,264,299],
[284,290,270,0,308,261,282,321],
[227,232,261,242,0,221,207,212],
[286,264,226,289,329,0,287,269],
[331,323,286,268,343,263,0,309],
[284,245,251,229,338,281,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,270,266,268,256,278,276],
[279,0,278,278,271,274,286,281],
[280,272,0,279,255,275,290,291],
[284,272,271,0,258,256,274,278],
[282,279,295,292,0,299,268,311],
[294,276,275,294,251,0,282,299],
[272,264,260,276,282,268,0,281],
[274,269,259,272,239,251,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,282,291,262,280,288,277],
[283,0,281,277,263,272,280,272],
[268,269,0,290,281,274,281,276],
[259,273,260,0,267,259,292,280],
[288,287,269,283,0,282,306,278],
[270,278,276,291,268,0,286,302],
[262,270,269,258,244,264,0,269],
[273,278,274,270,272,248,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,283,255,245,250,243,243],
[294,0,283,273,280,277,271,294],
[267,267,0,259,263,276,264,288],
[295,277,291,0,253,243,277,303],
[305,270,287,297,0,280,274,301],
[300,273,274,307,270,0,283,299],
[307,279,286,273,276,267,0,287],
[307,256,262,247,249,251,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,266,242,250,258,277,247],
[294,0,263,255,253,271,269,244],
[284,287,0,262,264,255,268,265],
[308,295,288,0,281,274,298,264],
[300,297,286,269,0,269,295,270],
[292,279,295,276,281,0,293,275],
[273,281,282,252,255,257,0,249],
[303,306,285,286,280,275,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,256,262,262,281,270,269],
[265,0,273,278,254,268,276,270],
[294,277,0,289,272,276,278,302],
[288,272,261,0,270,271,287,297],
[288,296,278,280,0,274,285,290],
[269,282,274,279,276,0,275,286],
[280,274,272,263,265,275,0,289],
[281,280,248,253,260,264,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,279,283,289,284,288,271],
[260,0,279,273,301,271,278,264],
[271,271,0,271,280,266,287,250],
[267,277,279,0,271,252,286,266],
[261,249,270,279,0,260,273,260],
[266,279,284,298,290,0,285,278],
[262,272,263,264,277,265,0,259],
[279,286,300,284,290,272,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,301,275,279,298,273,282],
[271,0,293,270,272,277,250,270],
[249,257,0,247,259,260,264,247],
[275,280,303,0,271,289,277,272],
[271,278,291,279,0,281,285,264],
[252,273,290,261,269,0,264,271],
[277,300,286,273,265,286,0,286],
[268,280,303,278,286,279,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,292,275,309,304,289,289],
[251,0,265,252,262,280,259,272],
[258,285,0,257,265,273,278,257],
[275,298,293,0,293,317,303,307],
[241,288,285,257,0,304,274,291],
[246,270,277,233,246,0,261,268],
[261,291,272,247,276,289,0,283],
[261,278,293,243,259,282,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,276,278,277,278,305,270],
[261,0,256,284,262,269,288,273],
[274,294,0,299,269,271,308,286],
[272,266,251,0,260,269,272,273],
[273,288,281,290,0,285,310,289],
[272,281,279,281,265,0,312,274],
[245,262,242,278,240,238,0,270],
[280,277,264,277,261,276,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,268,278,266,311,310,289],
[254,0,275,308,240,274,301,287],
[282,275,0,309,280,294,277,294],
[272,242,241,0,236,275,274,267],
[284,310,270,314,0,310,323,289],
[239,276,256,275,240,0,278,269],
[240,249,273,276,227,272,0,286],
[261,263,256,283,261,281,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,230,245,237,248,263,248],
[301,0,278,271,273,250,252,255],
[320,272,0,275,265,276,284,268],
[305,279,275,0,296,253,271,263],
[313,277,285,254,0,280,270,270],
[302,300,274,297,270,0,290,289],
[287,298,266,279,280,260,0,262],
[302,295,282,287,280,261,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,266,274,292,296,298,286],
[288,0,269,274,275,281,301,277],
[284,281,0,266,281,280,301,271],
[276,276,284,0,284,283,298,275],
[258,275,269,266,0,282,285,279],
[254,269,270,267,268,0,275,281],
[252,249,249,252,265,275,0,279],
[264,273,279,275,271,269,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,282,290,253,289,285,308],
[255,0,279,279,272,261,290,285],
[268,271,0,246,263,266,281,288],
[260,271,304,0,291,259,293,287],
[297,278,287,259,0,264,306,286],
[261,289,284,291,286,0,277,276],
[265,260,269,257,244,273,0,316],
[242,265,262,263,264,274,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,253,299,237,250,315,300],
[248,0,247,277,237,234,272,267],
[297,303,0,307,269,293,317,292],
[251,273,243,0,281,260,297,260],
[313,313,281,269,0,308,305,276],
[300,316,257,290,242,0,295,301],
[235,278,233,253,245,255,0,224],
[250,283,258,290,274,249,326,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,233,274,252,259,259,248],
[267,0,265,300,279,289,261,279],
[317,285,0,299,272,298,309,302],
[276,250,251,0,246,244,247,261],
[298,271,278,304,0,289,272,295],
[291,261,252,306,261,0,282,267],
[291,289,241,303,278,268,0,286],
[302,271,248,289,255,283,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,69,152,275,264,335,217],
[271,0,150,233,141,345,190,264],
[481,400,0,264,313,264,458,255],
[398,317,286,0,255,456,317,255],
[275,409,237,295,0,407,194,279],
[286,205,286,94,143,0,288,143],
[215,360,92,233,356,262,0,298],
[333,286,295,295,271,407,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,261,276,295,276,304,281],
[261,0,266,274,264,266,288,273],
[289,284,0,290,283,275,282,271],
[274,276,260,0,287,264,280,270],
[255,286,267,263,0,262,300,269],
[274,284,275,286,288,0,287,272],
[246,262,268,270,250,263,0,260],
[269,277,279,280,281,278,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,288,301,259,265,288,268],
[290,0,299,271,281,288,279,274],
[262,251,0,273,267,281,266,255],
[249,279,277,0,260,300,287,263],
[291,269,283,290,0,295,290,289],
[285,262,269,250,255,0,273,293],
[262,271,284,263,260,277,0,275],
[282,276,295,287,261,257,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,284,277,279,282,273,260],
[272,0,254,284,258,268,252,254],
[266,296,0,273,283,280,275,269],
[273,266,277,0,258,262,260,263],
[271,292,267,292,0,293,277,277],
[268,282,270,288,257,0,259,266],
[277,298,275,290,273,291,0,264],
[290,296,281,287,273,284,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,324,280,263,296,221,319],
[267,0,382,248,278,341,264,306],
[226,168,0,201,219,233,246,213],
[270,302,349,0,262,307,285,262],
[287,272,331,288,0,305,259,305],
[254,209,317,243,245,0,258,216],
[329,286,304,265,291,292,0,211],
[231,244,337,288,245,334,339,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,268,275,279,253,289,261],
[284,0,273,280,277,269,301,277],
[282,277,0,277,273,272,285,277],
[275,270,273,0,259,258,297,271],
[271,273,277,291,0,257,283,262],
[297,281,278,292,293,0,274,270],
[261,249,265,253,267,276,0,266],
[289,273,273,279,288,280,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,304,334,286,283,273,296],
[274,0,253,294,315,281,312,280],
[246,297,0,271,289,260,271,250],
[216,256,279,0,287,245,256,232],
[264,235,261,263,0,299,288,247],
[267,269,290,305,251,0,304,260],
[277,238,279,294,262,246,0,285],
[254,270,300,318,303,290,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,275,261,285,279,260,262],
[277,0,273,269,265,265,278,275],
[275,277,0,279,262,280,277,274],
[289,281,271,0,273,273,271,285],
[265,285,288,277,0,278,286,277],
[271,285,270,277,272,0,269,271],
[290,272,273,279,264,281,0,271],
[288,275,276,265,273,279,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,268,255,244,266,278,289],
[248,0,247,248,224,240,259,277],
[282,303,0,271,280,289,282,295],
[295,302,279,0,283,278,273,299],
[306,326,270,267,0,268,272,302],
[284,310,261,272,282,0,268,289],
[272,291,268,277,278,282,0,303],
[261,273,255,251,248,261,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,288,259,288,315,283,285],
[275,0,268,272,269,272,285,253],
[262,282,0,228,272,297,313,278],
[291,278,322,0,327,285,273,284],
[262,281,278,223,0,271,279,238],
[235,278,253,265,279,0,237,251],
[267,265,237,277,271,313,0,242],
[265,297,272,266,312,299,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,271,279,291,279,298,283],
[266,0,273,271,286,269,274,257],
[279,277,0,275,289,277,285,278],
[271,279,275,0,285,282,269,271],
[259,264,261,265,0,248,270,265],
[271,281,273,268,302,0,295,253],
[252,276,265,281,280,255,0,267],
[267,293,272,279,285,297,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,310,274,303,275,322,282],
[243,0,288,236,273,234,275,284],
[240,262,0,227,270,242,281,270],
[276,314,323,0,302,255,331,300],
[247,277,280,248,0,234,263,255],
[275,316,308,295,316,0,326,305],
[228,275,269,219,287,224,0,292],
[268,266,280,250,295,245,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,246,267,256,265,283,256],
[278,0,236,273,267,278,257,276],
[304,314,0,288,284,298,292,267],
[283,277,262,0,278,288,291,283],
[294,283,266,272,0,292,282,274],
[285,272,252,262,258,0,286,255],
[267,293,258,259,268,264,0,258],
[294,274,283,267,276,295,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,249,274,283,249,291,270],
[279,0,279,268,281,276,283,276],
[301,271,0,284,304,276,300,267],
[276,282,266,0,290,264,286,269],
[267,269,246,260,0,265,262,248],
[301,274,274,286,285,0,276,301],
[259,267,250,264,288,274,0,264],
[280,274,283,281,302,249,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,287,315,284,272,275,281],
[266,0,270,300,261,281,267,272],
[263,280,0,289,288,255,262,270],
[235,250,261,0,279,271,266,267],
[266,289,262,271,0,292,244,250],
[278,269,295,279,258,0,263,292],
[275,283,288,284,306,287,0,295],
[269,278,280,283,300,258,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,258,235,247,250,263,234],
[294,0,271,282,290,273,295,282],
[292,279,0,268,269,261,286,270],
[315,268,282,0,286,295,292,273],
[303,260,281,264,0,276,287,266],
[300,277,289,255,274,0,281,269],
[287,255,264,258,263,269,0,256],
[316,268,280,277,284,281,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,247,293,284,251,285,247],
[301,0,306,329,299,244,304,264],
[303,244,0,316,286,283,289,263],
[257,221,234,0,270,247,234,223],
[266,251,264,280,0,254,282,257],
[299,306,267,303,296,0,256,303],
[265,246,261,316,268,294,0,260],
[303,286,287,327,293,247,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,275,257,287,253,283,262],
[284,0,275,265,295,257,283,258],
[275,275,0,276,274,257,287,270],
[293,285,274,0,310,273,291,282],
[263,255,276,240,0,248,260,249],
[297,293,293,277,302,0,273,287],
[267,267,263,259,290,277,0,273],
[288,292,280,268,301,263,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,281,280,305,278,273,277],
[264,0,296,270,275,245,283,283],
[269,254,0,260,274,264,264,261],
[270,280,290,0,263,250,271,271],
[245,275,276,287,0,258,287,266],
[272,305,286,300,292,0,296,276],
[277,267,286,279,263,254,0,270],
[273,267,289,279,284,274,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,278,304,255,286,301,288],
[258,0,263,272,285,273,315,316],
[272,287,0,290,261,310,323,304],
[246,278,260,0,244,256,275,280],
[295,265,289,306,0,298,293,299],
[264,277,240,294,252,0,298,295],
[249,235,227,275,257,252,0,269],
[262,234,246,270,251,255,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,283,281,274,271,284,277],
[272,0,282,290,283,286,269,265],
[267,268,0,293,272,282,278,271],
[269,260,257,0,276,264,258,252],
[276,267,278,274,0,262,289,290],
[279,264,268,286,288,0,285,289],
[266,281,272,292,261,265,0,268],
[273,285,279,298,260,261,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,284,281,314,266,269,267],
[257,0,266,274,278,261,253,257],
[266,284,0,279,292,269,265,260],
[269,276,271,0,281,265,265,265],
[236,272,258,269,0,257,267,273],
[284,289,281,285,293,0,286,274],
[281,297,285,285,283,264,0,279],
[283,293,290,285,277,276,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,269,290,272,259,261,267],
[279,0,287,301,297,275,278,274],
[281,263,0,296,282,286,272,295],
[260,249,254,0,256,251,235,248],
[278,253,268,294,0,262,282,276],
[291,275,264,299,288,0,273,280],
[289,272,278,315,268,277,0,287],
[283,276,255,302,274,270,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,259,285,263,244,286,272],
[271,0,271,282,275,256,262,249],
[291,279,0,288,269,261,299,258],
[265,268,262,0,244,249,261,257],
[287,275,281,306,0,281,273,271],
[306,294,289,301,269,0,288,290],
[264,288,251,289,277,262,0,264],
[278,301,292,293,279,260,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,248,285,276,274,269,299],
[263,0,274,258,283,257,263,283],
[302,276,0,288,286,297,264,279],
[265,292,262,0,278,287,289,308],
[274,267,264,272,0,298,276,274],
[276,293,253,263,252,0,294,270],
[281,287,286,261,274,256,0,280],
[251,267,271,242,276,280,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,286,272,284,275,274,267],
[281,0,292,280,300,297,265,295],
[264,258,0,287,282,249,269,289],
[278,270,263,0,284,253,295,268],
[266,250,268,266,0,271,255,282],
[275,253,301,297,279,0,298,282],
[276,285,281,255,295,252,0,276],
[283,255,261,282,268,268,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,266,269,309,277,289,272],
[273,0,240,244,283,285,275,276],
[284,310,0,281,300,295,317,271],
[281,306,269,0,296,308,314,287],
[241,267,250,254,0,251,272,259],
[273,265,255,242,299,0,289,263],
[261,275,233,236,278,261,0,267],
[278,274,279,263,291,287,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,261,260,269,300,251,262],
[298,0,283,285,279,305,273,287],
[289,267,0,265,276,290,274,307],
[290,265,285,0,269,295,274,272],
[281,271,274,281,0,297,282,264],
[250,245,260,255,253,0,287,288],
[299,277,276,276,268,263,0,313],
[288,263,243,278,286,262,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,275,278,307,310,287,280],
[256,0,268,261,256,303,259,264],
[275,282,0,283,274,276,262,282],
[272,289,267,0,261,287,276,273],
[243,294,276,289,0,281,282,281],
[240,247,274,263,269,0,273,256],
[263,291,288,274,268,277,0,277],
[270,286,268,277,269,294,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,299,291,270,309,277,279],
[271,0,299,301,296,293,316,344],
[251,251,0,245,255,261,279,245],
[259,249,305,0,262,266,295,269],
[280,254,295,288,0,287,280,279],
[241,257,289,284,263,0,255,265],
[273,234,271,255,270,295,0,253],
[271,206,305,281,271,285,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,251,276,270,267,264,259],
[292,0,270,268,272,276,273,245],
[299,280,0,269,290,292,284,292],
[274,282,281,0,277,276,273,273],
[280,278,260,273,0,301,279,285],
[283,274,258,274,249,0,260,296],
[286,277,266,277,271,290,0,282],
[291,305,258,277,265,254,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,263,308,232,293,278,261],
[268,0,212,228,240,261,248,282],
[287,338,0,309,247,285,252,323],
[242,322,241,0,227,237,235,277],
[318,310,303,323,0,325,267,296],
[257,289,265,313,225,0,236,262],
[272,302,298,315,283,314,0,309],
[289,268,227,273,254,288,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,273,262,265,258,241,235],
[251,0,267,259,260,239,244,233],
[277,283,0,264,271,279,250,265],
[288,291,286,0,279,271,252,270],
[285,290,279,271,0,266,250,264],
[292,311,271,279,284,0,283,296],
[309,306,300,298,300,267,0,270],
[315,317,285,280,286,254,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,273,235,251,269,235,297],
[317,0,324,282,279,280,271,279],
[277,226,0,226,235,251,239,261],
[315,268,324,0,269,275,297,283],
[299,271,315,281,0,311,251,243],
[281,270,299,275,239,0,262,299],
[315,279,311,253,299,288,0,306],
[253,271,289,267,307,251,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,281,291,275,288,295,291],
[253,0,277,267,269,280,281,271],
[269,273,0,276,284,274,290,285],
[259,283,274,0,285,262,275,292],
[275,281,266,265,0,266,277,278],
[262,270,276,288,284,0,300,284],
[255,269,260,275,273,250,0,269],
[259,279,265,258,272,266,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,309,274,295,300,267,276],
[290,0,287,281,300,305,274,286],
[241,263,0,262,276,284,250,274],
[276,269,288,0,292,280,264,310],
[255,250,274,258,0,270,259,275],
[250,245,266,270,280,0,261,261],
[283,276,300,286,291,289,0,268],
[274,264,276,240,275,289,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,258,276,270,265,266,281],
[290,0,281,304,275,288,271,287],
[292,269,0,275,314,275,291,288],
[274,246,275,0,287,278,288,289],
[280,275,236,263,0,270,262,292],
[285,262,275,272,280,0,271,289],
[284,279,259,262,288,279,0,286],
[269,263,262,261,258,261,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,278,269,266,278,297,257],
[264,0,266,270,265,263,279,258],
[272,284,0,275,268,267,293,282],
[281,280,275,0,284,275,311,263],
[284,285,282,266,0,265,285,272],
[272,287,283,275,285,0,283,272],
[253,271,257,239,265,267,0,259],
[293,292,268,287,278,278,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,274,275,275,287,278,276],
[274,0,279,285,290,295,272,281],
[276,271,0,284,281,273,271,278],
[275,265,266,0,265,283,269,271],
[275,260,269,285,0,278,264,265],
[263,255,277,267,272,0,270,270],
[272,278,279,281,286,280,0,267],
[274,269,272,279,285,280,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,248,237,252,236,248,246],
[309,0,317,299,272,275,284,262],
[302,233,0,266,262,275,253,263],
[313,251,284,0,270,262,255,250],
[298,278,288,280,0,277,256,266],
[314,275,275,288,273,0,292,274],
[302,266,297,295,294,258,0,293],
[304,288,287,300,284,276,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,364,322,280,289,303,275,274],
[186,0,271,206,248,254,218,215],
[228,279,0,222,252,271,264,255],
[270,344,328,0,295,297,270,301],
[261,302,298,255,0,276,274,274],
[247,296,279,253,274,0,269,255],
[275,332,286,280,276,281,0,264],
[276,335,295,249,276,295,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,255,277,226,277,276,259],
[279,0,278,251,250,284,303,282],
[295,272,0,260,275,285,274,280],
[273,299,290,0,277,282,295,288],
[324,300,275,273,0,305,294,305],
[273,266,265,268,245,0,292,260],
[274,247,276,255,256,258,0,276],
[291,268,270,262,245,290,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,268,249,253,284,256,250],
[284,0,283,266,275,274,278,276],
[282,267,0,266,287,268,273,258],
[301,284,284,0,284,296,286,275],
[297,275,263,266,0,275,274,270],
[266,276,282,254,275,0,271,259],
[294,272,277,264,276,279,0,269],
[300,274,292,275,280,291,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,299,252,279,305,255,275],
[278,0,289,278,296,275,243,267],
[251,261,0,229,270,281,223,273],
[298,272,321,0,298,302,269,278],
[271,254,280,252,0,276,256,264],
[245,275,269,248,274,0,242,242],
[295,307,327,281,294,308,0,273],
[275,283,277,272,286,308,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,275,268,258,317,262,282],
[263,0,268,252,268,291,251,252],
[275,282,0,284,269,267,284,258],
[282,298,266,0,291,269,270,259],
[292,282,281,259,0,279,267,245],
[233,259,283,281,271,0,272,270],
[288,299,266,280,283,278,0,265],
[268,298,292,291,305,280,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,265,319,302,291,252,319],
[291,0,276,322,291,286,258,306],
[285,274,0,321,277,302,296,284],
[231,228,229,0,265,248,221,263],
[248,259,273,285,0,304,253,294],
[259,264,248,302,246,0,242,281],
[298,292,254,329,297,308,0,304],
[231,244,266,287,256,269,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,262,265,289,270,255,281],
[279,0,254,260,261,281,290,265],
[288,296,0,287,279,290,269,268],
[285,290,263,0,286,294,282,263],
[261,289,271,264,0,288,267,267],
[280,269,260,256,262,0,277,241],
[295,260,281,268,283,273,0,247],
[269,285,282,287,283,309,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,227,274,229,268,253,302],
[296,0,314,281,284,247,235,293],
[323,236,0,263,244,282,289,300],
[276,269,287,0,265,260,263,316],
[321,266,306,285,0,300,245,298],
[282,303,268,290,250,0,225,279],
[297,315,261,287,305,325,0,310],
[248,257,250,234,252,271,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,279,284,277,294,283,264],
[268,0,279,272,291,283,275,289],
[271,271,0,277,264,264,270,267],
[266,278,273,0,280,283,280,286],
[273,259,286,270,0,273,265,267],
[256,267,286,267,277,0,264,253],
[267,275,280,270,285,286,0,257],
[286,261,283,264,283,297,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,275,309,278,287,287,311],
[290,0,275,306,279,291,280,283],
[275,275,0,296,283,287,281,277],
[241,244,254,0,265,272,275,260],
[272,271,267,285,0,286,291,280],
[263,259,263,278,264,0,266,281],
[263,270,269,275,259,284,0,270],
[239,267,273,290,270,269,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,288,282,298,280,273,260],
[241,0,284,263,266,260,278,252],
[262,266,0,248,282,256,247,256],
[268,287,302,0,297,287,254,281],
[252,284,268,253,0,262,252,244],
[270,290,294,263,288,0,261,268],
[277,272,303,296,298,289,0,280],
[290,298,294,269,306,282,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,243,275,294,285,267,265],
[265,0,277,283,280,265,273,276],
[307,273,0,289,298,273,276,287],
[275,267,261,0,263,292,268,267],
[256,270,252,287,0,271,279,267],
[265,285,277,258,279,0,276,285],
[283,277,274,282,271,274,0,278],
[285,274,263,283,283,265,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,270,272,276,287,268,271],
[284,0,274,272,280,285,255,287],
[280,276,0,277,269,275,270,288],
[278,278,273,0,272,286,268,288],
[274,270,281,278,0,289,276,287],
[263,265,275,264,261,0,260,272],
[282,295,280,282,274,290,0,290],
[279,263,262,262,263,278,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,284,310,273,280,278,293],
[243,0,271,294,280,286,285,284],
[266,279,0,319,266,269,281,288],
[240,256,231,0,249,256,269,247],
[277,270,284,301,0,282,270,304],
[270,264,281,294,268,0,285,278],
[272,265,269,281,280,265,0,283],
[257,266,262,303,246,272,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,279,280,278,271,280,267],
[266,0,282,282,262,262,274,272],
[271,268,0,287,272,262,273,263],
[270,268,263,0,280,276,282,261],
[272,288,278,270,0,262,275,277],
[279,288,288,274,288,0,278,286],
[270,276,277,268,275,272,0,275],
[283,278,287,289,273,264,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,330,335,366,375,259,361],
[108,0,203,152,239,204,61,151],
[220,347,0,291,303,253,275,281],
[215,398,259,0,316,200,193,248],
[184,311,247,234,0,217,176,239],
[175,346,297,350,333,0,224,234],
[291,489,275,357,374,326,0,349],
[189,399,269,302,311,316,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,247,302,290,260,289,288],
[277,0,303,320,289,291,306,272],
[303,247,0,332,317,278,306,274],
[248,230,218,0,265,235,271,250],
[260,261,233,285,0,267,269,268],
[290,259,272,315,283,0,267,281],
[261,244,244,279,281,283,0,275],
[262,278,276,300,282,269,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,279,302,263,279,292,298],
[255,0,262,276,254,257,268,265],
[271,288,0,271,270,271,284,295],
[248,274,279,0,269,257,276,268],
[287,296,280,281,0,285,274,278],
[271,293,279,293,265,0,287,279],
[258,282,266,274,276,263,0,280],
[252,285,255,282,272,271,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,198,293,234,371,237,152],
[301,0,298,375,391,417,259,210],
[352,252,0,208,421,337,249,283],
[257,175,342,0,272,391,284,222],
[316,159,129,278,0,325,139,162],
[179,133,213,159,225,0,129,152],
[313,291,301,266,411,421,0,168],
[398,340,267,328,388,398,382,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,274,266,270,272,269,267],
[282,0,282,294,289,312,271,281],
[276,268,0,268,286,291,274,286],
[284,256,282,0,298,300,287,264],
[280,261,264,252,0,286,282,285],
[278,238,259,250,264,0,264,262],
[281,279,276,263,268,286,0,273],
[283,269,264,286,265,288,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,282,262,277,285,281,297],
[268,0,279,259,265,273,275,289],
[268,271,0,277,275,284,272,284],
[288,291,273,0,279,289,294,298],
[273,285,275,271,0,280,276,303],
[265,277,266,261,270,0,284,279],
[269,275,278,256,274,266,0,285],
[253,261,266,252,247,271,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,329,267,282,262,290,325,272],
[221,0,241,253,248,254,319,261],
[283,309,0,257,296,309,331,306],
[268,297,293,0,263,301,301,272],
[288,302,254,287,0,270,301,241],
[260,296,241,249,280,0,309,287],
[225,231,219,249,249,241,0,268],
[278,289,244,278,309,263,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,277,263,284,296,289,281],
[290,0,243,273,291,259,261,270],
[273,307,0,290,280,317,270,286],
[287,277,260,0,286,311,285,282],
[266,259,270,264,0,300,234,260],
[254,291,233,239,250,0,235,265],
[261,289,280,265,316,315,0,293],
[269,280,264,268,290,285,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,303,313,263,294,291,280],
[246,0,263,289,249,273,249,255],
[247,287,0,269,263,274,249,257],
[237,261,281,0,256,264,261,251],
[287,301,287,294,0,274,288,285],
[256,277,276,286,276,0,256,267],
[259,301,301,289,262,294,0,268],
[270,295,293,299,265,283,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,272,258,268,265,249,273],
[264,0,279,252,280,218,275,253],
[278,271,0,265,246,235,272,253],
[292,298,285,0,282,251,298,263],
[282,270,304,268,0,259,278,264],
[285,332,315,299,291,0,263,276],
[301,275,278,252,272,287,0,260],
[277,297,297,287,286,274,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,267,261,257,269,291,248],
[310,0,295,276,263,279,302,282],
[283,255,0,256,258,269,293,229],
[289,274,294,0,285,300,298,264],
[293,287,292,265,0,310,300,277],
[281,271,281,250,240,0,265,251],
[259,248,257,252,250,285,0,252],
[302,268,321,286,273,299,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,270,280,289,305,298,282],
[269,0,287,300,318,293,296,286],
[280,263,0,283,290,273,280,276],
[270,250,267,0,287,264,288,260],
[261,232,260,263,0,252,262,261],
[245,257,277,286,298,0,282,276],
[252,254,270,262,288,268,0,254],
[268,264,274,290,289,274,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,263,288,267,278,304,281],
[272,0,255,285,265,253,290,256],
[287,295,0,293,293,259,290,265],
[262,265,257,0,270,257,283,282],
[283,285,257,280,0,282,297,251],
[272,297,291,293,268,0,322,302],
[246,260,260,267,253,228,0,234],
[269,294,285,268,299,248,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,282,248,281,292,282,258],
[276,0,277,277,275,278,312,291],
[268,273,0,278,263,267,307,279],
[302,273,272,0,291,277,300,272],
[269,275,287,259,0,281,303,286],
[258,272,283,273,269,0,294,257],
[268,238,243,250,247,256,0,275],
[292,259,271,278,264,293,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,212,223,241,364,245,242],
[267,0,275,310,320,291,364,290],
[338,275,0,187,272,274,272,251],
[327,240,363,0,251,329,280,274],
[309,230,278,299,0,398,326,320],
[186,259,276,221,152,0,242,182],
[305,186,278,270,224,308,0,228],
[308,260,299,276,230,368,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,261,302,273,266,280,257],
[289,0,264,276,280,274,270,268],
[289,286,0,269,262,291,296,275],
[248,274,281,0,262,268,269,254],
[277,270,288,288,0,274,302,259],
[284,276,259,282,276,0,286,266],
[270,280,254,281,248,264,0,271],
[293,282,275,296,291,284,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,262,276,294,248,271,268],
[252,0,241,274,256,248,278,263],
[288,309,0,278,297,278,295,275],
[274,276,272,0,279,265,270,267],
[256,294,253,271,0,258,274,243],
[302,302,272,285,292,0,276,283],
[279,272,255,280,276,274,0,261],
[282,287,275,283,307,267,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,260,261,254,274,255,282],
[270,0,265,257,270,264,270,271],
[290,285,0,259,267,288,273,284],
[289,293,291,0,271,277,276,291],
[296,280,283,279,0,269,279,281],
[276,286,262,273,281,0,281,281],
[295,280,277,274,271,269,0,287],
[268,279,266,259,269,269,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,261,271,281,274,249,239],
[301,0,299,303,316,309,305,267],
[289,251,0,261,287,270,268,244],
[279,247,289,0,294,275,279,257],
[269,234,263,256,0,267,223,242],
[276,241,280,275,283,0,258,255],
[301,245,282,271,327,292,0,283],
[311,283,306,293,308,295,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,287,274,262,261,280,262],
[264,0,285,260,268,250,269,254],
[263,265,0,279,270,278,293,246],
[276,290,271,0,284,275,284,250],
[288,282,280,266,0,285,289,256],
[289,300,272,275,265,0,273,289],
[270,281,257,266,261,277,0,254],
[288,296,304,300,294,261,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,277,259,252,277,299,291],
[269,0,273,262,277,259,301,282],
[273,277,0,247,261,273,271,258],
[291,288,303,0,275,285,277,311],
[298,273,289,275,0,284,284,298],
[273,291,277,265,266,0,277,270],
[251,249,279,273,266,273,0,263],
[259,268,292,239,252,280,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,272,253,274,269,271,256],
[286,0,270,272,283,280,283,283],
[278,280,0,264,272,272,283,280],
[297,278,286,0,297,300,274,278],
[276,267,278,253,0,277,279,257],
[281,270,278,250,273,0,271,273],
[279,267,267,276,271,279,0,276],
[294,267,270,272,293,277,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,295,234,255,279,306,265],
[243,0,273,266,246,267,268,285],
[255,277,0,248,225,254,268,248],
[316,284,302,0,250,236,316,235],
[295,304,325,300,0,317,267,267],
[271,283,296,314,233,0,281,259],
[244,282,282,234,283,269,0,227],
[285,265,302,315,283,291,323,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,286,286,263,289,267,241],
[300,0,268,292,255,287,255,249],
[264,282,0,321,286,288,277,287],
[264,258,229,0,259,283,258,241],
[287,295,264,291,0,281,256,278],
[261,263,262,267,269,0,260,263],
[283,295,273,292,294,290,0,249],
[309,301,263,309,272,287,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,283,261,283,273,273,261],
[250,0,263,295,288,279,254,263],
[267,287,0,286,301,295,252,261],
[289,255,264,0,296,289,278,274],
[267,262,249,254,0,269,251,268],
[277,271,255,261,281,0,266,256],
[277,296,298,272,299,284,0,278],
[289,287,289,276,282,294,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,266,279,294,279,272,263],
[292,0,300,289,289,270,280,279],
[284,250,0,298,299,283,285,266],
[271,261,252,0,281,269,270,265],
[256,261,251,269,0,258,283,256],
[271,280,267,281,292,0,274,271],
[278,270,265,280,267,276,0,265],
[287,271,284,285,294,279,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,260,272,248,288,269,273],
[288,0,267,277,262,274,275,292],
[290,283,0,283,267,295,272,292],
[278,273,267,0,250,275,257,282],
[302,288,283,300,0,291,273,293],
[262,276,255,275,259,0,273,275],
[281,275,278,293,277,277,0,286],
[277,258,258,268,257,275,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,282,279,272,264,283,285],
[269,0,269,256,272,266,261,270],
[268,281,0,260,262,275,276,281],
[271,294,290,0,279,288,274,289],
[278,278,288,271,0,270,285,277],
[286,284,275,262,280,0,287,283],
[267,289,274,276,265,263,0,276],
[265,280,269,261,273,267,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,206,170,341,334,368,320],
[265,0,294,265,157,230,288,239],
[344,256,0,251,314,341,388,326],
[380,285,299,0,239,366,377,261],
[209,393,236,311,0,188,256,197],
[216,320,209,184,362,0,237,309],
[182,262,162,173,294,313,0,298],
[230,311,224,289,353,241,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,255,240,251,260,291,272],
[278,0,268,275,267,274,308,278],
[295,282,0,297,291,268,300,285],
[310,275,253,0,278,288,306,285],
[299,283,259,272,0,274,279,289],
[290,276,282,262,276,0,305,284],
[259,242,250,244,271,245,0,270],
[278,272,265,265,261,266,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,217,323,290,319,417,310],
[276,0,195,285,240,357,367,337],
[333,355,0,436,246,292,334,430],
[227,265,114,0,222,202,316,179],
[260,310,304,328,0,385,374,369],
[231,193,258,348,165,0,326,219],
[133,183,216,234,176,224,0,266],
[240,213,120,371,181,331,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,266,262,290,276,278,258],
[260,0,256,287,266,267,294,274],
[284,294,0,267,300,275,278,290],
[288,263,283,0,282,281,285,262],
[260,284,250,268,0,277,267,256],
[274,283,275,269,273,0,259,251],
[272,256,272,265,283,291,0,254],
[292,276,260,288,294,299,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,254,323,278,260,279,217],
[262,0,265,347,223,264,292,222],
[296,285,0,367,286,299,269,236],
[227,203,183,0,245,191,169,178],
[272,327,264,305,0,244,256,232],
[290,286,251,359,306,0,304,277],
[271,258,281,381,294,246,0,269],
[333,328,314,372,318,273,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,302,269,263,290,301,287],
[273,0,299,270,274,297,283,294],
[248,251,0,278,251,272,287,289],
[281,280,272,0,277,300,285,281],
[287,276,299,273,0,321,308,290],
[260,253,278,250,229,0,281,258],
[249,267,263,265,242,269,0,276],
[263,256,261,269,260,292,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,267,308,267,272,253,300],
[308,0,289,324,264,285,278,293],
[283,261,0,290,277,285,291,307],
[242,226,260,0,283,266,262,262],
[283,286,273,267,0,263,262,268],
[278,265,265,284,287,0,271,287],
[297,272,259,288,288,279,0,306],
[250,257,243,288,282,263,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,215,301,262,284,222,249],
[301,0,276,293,317,365,262,292],
[335,274,0,366,307,369,309,349],
[249,257,184,0,279,306,274,280],
[288,233,243,271,0,317,276,265],
[266,185,181,244,233,0,222,229],
[328,288,241,276,274,328,0,301],
[301,258,201,270,285,321,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,298,272,282,282,263,285],
[271,0,290,279,276,288,291,258],
[252,260,0,259,273,290,282,242],
[278,271,291,0,269,294,275,285],
[268,274,277,281,0,284,274,266],
[268,262,260,256,266,0,254,263],
[287,259,268,275,276,296,0,287],
[265,292,308,265,284,287,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,299,304,283,274,259,305],
[265,0,259,254,282,227,263,292],
[251,291,0,296,254,246,241,294],
[246,296,254,0,293,240,270,288],
[267,268,296,257,0,262,273,284],
[276,323,304,310,288,0,275,311],
[291,287,309,280,277,275,0,290],
[245,258,256,262,266,239,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,267,282,266,287,283,284],
[271,0,280,264,274,286,282,271],
[283,270,0,257,272,291,263,284],
[268,286,293,0,286,287,271,269],
[284,276,278,264,0,277,272,295],
[263,264,259,263,273,0,261,276],
[267,268,287,279,278,289,0,288],
[266,279,266,281,255,274,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,262,244,252,250,266,267],
[297,0,270,269,291,269,268,286],
[288,280,0,277,285,257,266,298],
[306,281,273,0,303,282,281,309],
[298,259,265,247,0,271,271,274],
[300,281,293,268,279,0,287,282],
[284,282,284,269,279,263,0,302],
[283,264,252,241,276,268,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,264,246,235,285,248,248],
[278,0,260,216,272,289,260,283],
[286,290,0,276,284,332,260,269],
[304,334,274,0,318,321,306,264],
[315,278,266,232,0,319,267,259],
[265,261,218,229,231,0,251,220],
[302,290,290,244,283,299,0,281],
[302,267,281,286,291,330,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,286,257,281,282,275,264],
[280,0,253,259,308,318,286,264],
[264,297,0,264,288,275,306,307],
[293,291,286,0,297,318,297,273],
[269,242,262,253,0,272,289,263],
[268,232,275,232,278,0,277,275],
[275,264,244,253,261,273,0,274],
[286,286,243,277,287,275,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,293,295,306,258,253,256],
[263,0,296,322,282,248,224,263],
[257,254,0,291,262,249,239,292],
[255,228,259,0,292,236,196,226],
[244,268,288,258,0,253,224,302],
[292,302,301,314,297,0,283,272],
[297,326,311,354,326,267,0,276],
[294,287,258,324,248,278,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,265,271,298,262,269,261],
[258,0,241,236,270,241,243,248],
[285,309,0,232,294,295,276,282],
[279,314,318,0,299,285,257,304],
[252,280,256,251,0,276,272,267],
[288,309,255,265,274,0,257,272],
[281,307,274,293,278,293,0,268],
[289,302,268,246,283,278,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,274,280,246,264,256,217],
[287,0,225,329,246,282,287,234],
[276,325,0,331,290,294,272,236],
[270,221,219,0,242,253,249,231],
[304,304,260,308,0,282,272,284],
[286,268,256,297,268,0,301,241],
[294,263,278,301,278,249,0,230],
[333,316,314,319,266,309,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,261,264,248,271,262,265],
[280,0,269,266,258,262,275,279],
[289,281,0,278,298,285,288,267],
[286,284,272,0,279,292,288,269],
[302,292,252,271,0,285,283,274],
[279,288,265,258,265,0,276,267],
[288,275,262,262,267,274,0,275],
[285,271,283,281,276,283,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,283,270,278,289,253,278],
[268,0,261,274,271,279,241,281],
[267,289,0,281,276,285,270,280],
[280,276,269,0,274,289,285,293],
[272,279,274,276,0,278,264,281],
[261,271,265,261,272,0,229,269],
[297,309,280,265,286,321,0,286],
[272,269,270,257,269,281,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,294,284,273,273,293,260],
[280,0,301,280,279,288,288,271],
[256,249,0,272,252,268,274,252],
[266,270,278,0,271,277,286,271],
[277,271,298,279,0,288,274,277],
[277,262,282,273,262,0,292,271],
[257,262,276,264,276,258,0,259],
[290,279,298,279,273,279,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,278,294,268,284,250,293],
[263,0,229,257,223,237,241,235],
[272,321,0,308,301,270,295,272],
[256,293,242,0,288,239,273,285],
[282,327,249,262,0,259,255,251],
[266,313,280,311,291,0,271,267],
[300,309,255,277,295,279,0,245],
[257,315,278,265,299,283,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,290,276,281,273,269,304],
[284,0,289,282,297,275,276,294],
[260,261,0,263,272,283,273,287],
[274,268,287,0,296,276,285,294],
[269,253,278,254,0,257,265,282],
[277,275,267,274,293,0,268,291],
[281,274,277,265,285,282,0,276],
[246,256,263,256,268,259,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,296,317,256,315,301,284],
[270,0,305,293,283,319,285,310],
[254,245,0,267,239,304,270,278],
[233,257,283,0,209,267,266,266],
[294,267,311,341,0,301,282,300],
[235,231,246,283,249,0,238,252],
[249,265,280,284,268,312,0,280],
[266,240,272,284,250,298,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,274,271,266,276,283,280],
[262,0,273,274,258,289,291,274],
[276,277,0,276,267,277,281,272],
[279,276,274,0,283,287,270,275],
[284,292,283,267,0,283,286,274],
[274,261,273,263,267,0,270,270],
[267,259,269,280,264,280,0,272],
[270,276,278,275,276,280,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,238,309,252,325,309,251],
[306,0,262,299,253,316,270,280],
[312,288,0,323,279,319,342,275],
[241,251,227,0,249,253,264,226],
[298,297,271,301,0,237,288,255],
[225,234,231,297,313,0,249,234],
[241,280,208,286,262,301,0,234],
[299,270,275,324,295,316,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,269,255,251,262,262,261],
[298,0,273,268,266,266,277,284],
[281,277,0,287,267,290,271,274],
[295,282,263,0,264,275,274,286],
[299,284,283,286,0,272,280,277],
[288,284,260,275,278,0,282,280],
[288,273,279,276,270,268,0,282],
[289,266,276,264,273,270,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,285,274,266,270,290,297],
[292,0,275,269,284,317,295,282],
[265,275,0,286,282,287,289,296],
[276,281,264,0,261,304,293,269],
[284,266,268,289,0,290,279,283],
[280,233,263,246,260,0,287,269],
[260,255,261,257,271,263,0,267],
[253,268,254,281,267,281,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,294,277,296,267,261,275],
[272,0,274,241,291,239,238,258],
[256,276,0,233,272,245,242,245],
[273,309,317,0,295,274,280,300],
[254,259,278,255,0,256,253,254],
[283,311,305,276,294,0,280,266],
[289,312,308,270,297,270,0,299],
[275,292,305,250,296,284,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,303,275,280,283,294,299],
[264,0,291,273,294,267,288,268],
[247,259,0,247,280,250,295,278],
[275,277,303,0,298,273,292,273],
[270,256,270,252,0,262,299,265],
[267,283,300,277,288,0,301,283],
[256,262,255,258,251,249,0,253],
[251,282,272,277,285,267,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,417,333,267,177,224,279],
[248,0,410,343,253,167,169,297],
[133,140,0,220,177,116,180,225],
[217,207,330,0,196,173,199,293],
[283,297,373,354,0,243,228,291],
[373,383,434,377,307,0,228,315],
[326,381,370,351,322,322,0,266],
[271,253,325,257,259,235,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,278,266,275,264,261,272],
[298,0,282,273,275,279,284,290],
[272,268,0,269,266,279,273,283],
[284,277,281,0,290,276,272,271],
[275,275,284,260,0,263,269,269],
[286,271,271,274,287,0,266,258],
[289,266,277,278,281,284,0,274],
[278,260,267,279,281,292,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,297,273,278,276,280,287],
[252,0,279,274,257,261,271,270],
[253,271,0,293,264,251,265,301],
[277,276,257,0,264,273,273,285],
[272,293,286,286,0,281,271,298],
[274,289,299,277,269,0,286,307],
[270,279,285,277,279,264,0,272],
[263,280,249,265,252,243,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,294,285,280,283,294,275],
[266,0,286,291,259,286,298,279],
[256,264,0,307,251,259,308,274],
[265,259,243,0,259,266,277,296],
[270,291,299,291,0,280,299,292],
[267,264,291,284,270,0,275,261],
[256,252,242,273,251,275,0,264],
[275,271,276,254,258,289,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,265,275,277,314,320,280],
[316,0,308,232,302,326,315,259],
[285,242,0,230,268,303,281,206],
[275,318,320,0,283,318,307,278],
[273,248,282,267,0,335,304,229],
[236,224,247,232,215,0,218,201],
[230,235,269,243,246,332,0,236],
[270,291,344,272,321,349,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,235,279,284,255,283,274],
[282,0,244,292,255,252,284,278],
[315,306,0,278,304,270,281,312],
[271,258,272,0,269,281,312,276],
[266,295,246,281,0,235,251,275],
[295,298,280,269,315,0,303,309],
[267,266,269,238,299,247,0,290],
[276,272,238,274,275,241,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,264,259,219,266,247,260],
[311,0,313,299,250,325,311,287],
[286,237,0,269,252,269,266,237],
[291,251,281,0,273,306,308,300],
[331,300,298,277,0,314,312,263],
[284,225,281,244,236,0,236,257],
[303,239,284,242,238,314,0,241],
[290,263,313,250,287,293,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,289,280,274,270,281,286],
[268,0,276,278,271,265,262,262],
[261,274,0,290,279,277,279,276],
[270,272,260,0,266,269,279,279],
[276,279,271,284,0,261,272,271],
[280,285,273,281,289,0,282,276],
[269,288,271,271,278,268,0,275],
[264,288,274,271,279,274,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,258,253,278,247,271,254],
[303,0,281,253,265,250,244,274],
[292,269,0,262,258,271,272,265],
[297,297,288,0,293,269,273,298],
[272,285,292,257,0,276,285,282],
[303,300,279,281,274,0,286,287],
[279,306,278,277,265,264,0,282],
[296,276,285,252,268,263,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,282,293,300,271,288,279],
[260,0,265,276,285,273,272,279],
[268,285,0,293,289,276,287,293],
[257,274,257,0,280,272,267,271],
[250,265,261,270,0,263,267,274],
[279,277,274,278,287,0,278,268],
[262,278,263,283,283,272,0,265],
[271,271,257,279,276,282,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,213,256,318,214,261,250],
[317,0,232,295,318,296,301,268],
[337,318,0,334,319,248,255,319],
[294,255,216,0,287,222,268,280],
[232,232,231,263,0,230,264,225],
[336,254,302,328,320,0,287,301],
[289,249,295,282,286,263,0,306],
[300,282,231,270,325,249,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,300,314,261,287,285,292],
[268,0,296,276,278,278,270,285],
[250,254,0,263,260,273,288,279],
[236,274,287,0,277,281,274,286],
[289,272,290,273,0,289,264,286],
[263,272,277,269,261,0,270,270],
[265,280,262,276,286,280,0,286],
[258,265,271,264,264,280,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,261,271,261,264,262,254],
[294,0,280,275,290,288,274,287],
[289,270,0,284,280,286,267,270],
[279,275,266,0,274,278,264,267],
[289,260,270,276,0,278,267,275],
[286,262,264,272,272,0,265,252],
[288,276,283,286,283,285,0,271],
[296,263,280,283,275,298,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,310,293,288,280,268,286],
[265,0,296,247,250,267,270,278],
[240,254,0,259,263,254,255,252],
[257,303,291,0,270,282,263,276],
[262,300,287,280,0,299,257,293],
[270,283,296,268,251,0,277,299],
[282,280,295,287,293,273,0,289],
[264,272,298,274,257,251,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,300,264,277,247,234,239],
[297,0,229,290,276,304,321,215],
[250,321,0,235,306,198,309,234],
[286,260,315,0,297,279,243,235],
[273,274,244,253,0,218,244,258],
[303,246,352,271,332,0,323,233],
[316,229,241,307,306,227,0,299],
[311,335,316,315,292,317,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,282,269,307,286,278,299],
[281,0,266,275,290,264,272,285],
[268,284,0,259,300,276,252,295],
[281,275,291,0,289,277,277,284],
[243,260,250,261,0,248,261,281],
[264,286,274,273,302,0,271,298],
[272,278,298,273,289,279,0,292],
[251,265,255,266,269,252,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,311,291,301,296,310,292],
[293,0,312,291,306,268,308,275],
[239,238,0,279,274,281,271,263],
[259,259,271,0,279,264,272,279],
[249,244,276,271,0,254,268,249],
[254,282,269,286,296,0,274,269],
[240,242,279,278,282,276,0,247],
[258,275,287,271,301,281,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,279,261,246,265,276,231],
[268,0,279,283,292,269,277,258],
[271,271,0,257,271,262,275,258],
[289,267,293,0,273,264,283,266],
[304,258,279,277,0,270,283,281],
[285,281,288,286,280,0,295,267],
[274,273,275,267,267,255,0,273],
[319,292,292,284,269,283,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,276,270,281,294,305,278],
[254,0,255,292,270,258,285,246],
[274,295,0,272,286,277,295,271],
[280,258,278,0,273,287,303,292],
[269,280,264,277,0,268,261,266],
[256,292,273,263,282,0,251,256],
[245,265,255,247,289,299,0,280],
[272,304,279,258,284,294,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,289,296,274,290,301,290],
[260,0,254,263,267,264,283,266],
[261,296,0,286,280,271,292,292],
[254,287,264,0,276,281,279,272],
[276,283,270,274,0,275,285,277],
[260,286,279,269,275,0,298,276],
[249,267,258,271,265,252,0,264],
[260,284,258,278,273,274,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,255,287,272,254,275,273],
[283,0,258,288,263,276,287,277],
[295,292,0,287,291,280,278,267],
[263,262,263,0,271,256,264,261],
[278,287,259,279,0,283,285,278],
[296,274,270,294,267,0,276,285],
[275,263,272,286,265,274,0,282],
[277,273,283,289,272,265,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,297,285,269,281,270,279],
[264,0,301,274,260,259,272,260],
[253,249,0,245,260,263,261,258],
[265,276,305,0,270,265,268,284],
[281,290,290,280,0,267,279,276],
[269,291,287,285,283,0,279,269],
[280,278,289,282,271,271,0,271],
[271,290,292,266,274,281,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,291,266,284,266,277,277],
[286,0,299,285,308,279,294,268],
[259,251,0,251,268,249,266,250],
[284,265,299,0,295,266,272,272],
[266,242,282,255,0,254,264,279],
[284,271,301,284,296,0,284,303],
[273,256,284,278,286,266,0,264],
[273,282,300,278,271,247,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,226,290,232,217,239,177],
[369,0,280,297,278,284,271,351],
[324,270,0,305,302,267,284,242],
[260,253,245,0,246,189,197,311],
[318,272,248,304,0,256,270,264],
[333,266,283,361,294,0,222,244],
[311,279,266,353,280,328,0,281],
[373,199,308,239,286,306,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,269,282,278,267,273,267],
[284,0,256,273,288,282,266,289],
[281,294,0,276,278,275,265,275],
[268,277,274,0,284,263,280,269],
[272,262,272,266,0,262,260,302],
[283,268,275,287,288,0,275,281],
[277,284,285,270,290,275,0,287],
[283,261,275,281,248,269,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,275,319,283,304,318,300],
[264,0,255,250,241,256,262,272],
[275,295,0,295,266,295,287,295],
[231,300,255,0,248,259,271,316],
[267,309,284,302,0,319,278,295],
[246,294,255,291,231,0,243,256],
[232,288,263,279,272,307,0,267],
[250,278,255,234,255,294,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,288,274,262,272,274,259],
[270,0,254,246,256,267,256,231],
[262,296,0,255,286,270,264,281],
[276,304,295,0,275,274,279,268],
[288,294,264,275,0,289,266,249],
[278,283,280,276,261,0,266,270],
[276,294,286,271,284,284,0,280],
[291,319,269,282,301,280,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,265,282,290,256,295,267],
[268,0,283,267,311,228,266,266],
[285,267,0,270,278,236,280,301],
[268,283,280,0,320,276,284,279],
[260,239,272,230,0,231,261,223],
[294,322,314,274,319,0,275,282],
[255,284,270,266,289,275,0,275],
[283,284,249,271,327,268,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,267,227,228,262,208,254],
[285,0,239,224,201,230,235,234],
[283,311,0,253,245,261,237,297],
[323,326,297,0,233,276,287,283],
[322,349,305,317,0,292,225,313],
[288,320,289,274,258,0,182,278],
[342,315,313,263,325,368,0,321],
[296,316,253,267,237,272,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,274,269,258,259,252,280],
[286,0,286,292,260,289,280,288],
[276,264,0,289,274,263,264,266],
[281,258,261,0,245,271,277,264],
[292,290,276,305,0,259,257,288],
[291,261,287,279,291,0,280,290],
[298,270,286,273,293,270,0,300],
[270,262,284,286,262,260,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,277,243,251,260,248,279],
[271,0,299,274,272,261,272,287],
[273,251,0,246,255,262,271,276],
[307,276,304,0,275,289,275,305],
[299,278,295,275,0,280,284,303],
[290,289,288,261,270,0,275,286],
[302,278,279,275,266,275,0,298],
[271,263,274,245,247,264,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,227,257,236,252,247,247],
[309,0,264,317,285,285,295,294],
[323,286,0,331,314,264,301,290],
[293,233,219,0,253,254,278,260],
[314,265,236,297,0,276,272,270],
[298,265,286,296,274,0,300,281],
[303,255,249,272,278,250,0,263],
[303,256,260,290,280,269,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,289,305,269,284,304,306],
[288,0,246,373,287,323,309,306],
[261,304,0,330,320,330,284,319],
[245,177,220,0,258,254,220,268],
[281,263,230,292,0,272,268,260],
[266,227,220,296,278,0,292,293],
[246,241,266,330,282,258,0,276],
[244,244,231,282,290,257,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,270,275,255,297,335,318],
[257,0,262,252,276,281,303,274],
[280,288,0,273,248,288,296,290],
[275,298,277,0,273,319,343,302],
[295,274,302,277,0,286,310,307],
[253,269,262,231,264,0,302,278],
[215,247,254,207,240,248,0,241],
[232,276,260,248,243,272,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,300,254,259,263,280,269],
[247,0,257,243,282,239,278,276],
[250,293,0,255,257,279,303,274],
[296,307,295,0,303,260,287,282],
[291,268,293,247,0,266,283,271],
[287,311,271,290,284,0,289,287],
[270,272,247,263,267,261,0,261],
[281,274,276,268,279,263,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,286,276,285,279,263,268],
[280,0,278,260,255,272,260,262],
[264,272,0,263,270,277,255,269],
[274,290,287,0,282,285,277,266],
[265,295,280,268,0,272,270,286],
[271,278,273,265,278,0,264,263],
[287,290,295,273,280,286,0,277],
[282,288,281,284,264,287,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,264,269,288,289,277,282],
[284,0,284,264,284,287,298,299],
[286,266,0,276,293,283,281,283],
[281,286,274,0,277,291,289,304],
[262,266,257,273,0,281,292,283],
[261,263,267,259,269,0,266,278],
[273,252,269,261,258,284,0,287],
[268,251,267,246,267,272,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,353,320,283,282,277,337,274],
[197,0,214,182,252,199,233,230],
[230,336,0,253,298,271,291,286],
[267,368,297,0,315,253,300,306],
[268,298,252,235,0,186,240,252],
[273,351,279,297,364,0,327,306],
[213,317,259,250,310,223,0,285],
[276,320,264,244,298,244,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,245,282,277,249,281,286],
[239,0,241,257,261,255,268,262],
[305,309,0,284,271,295,286,301],
[268,293,266,0,266,271,274,270],
[273,289,279,284,0,274,288,268],
[301,295,255,279,276,0,253,263],
[269,282,264,276,262,297,0,275],
[264,288,249,280,282,287,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,281,265,277,275,275,270],
[259,0,282,257,272,266,272,272],
[269,268,0,279,286,286,276,273],
[285,293,271,0,295,270,279,284],
[273,278,264,255,0,267,262,269],
[275,284,264,280,283,0,289,276],
[275,278,274,271,288,261,0,277],
[280,278,277,266,281,274,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,271,279,269,274,287,279],
[277,0,274,277,255,285,280,285],
[279,276,0,247,278,291,277,276],
[271,273,303,0,275,286,296,297],
[281,295,272,275,0,295,284,306],
[276,265,259,264,255,0,292,285],
[263,270,273,254,266,258,0,275],
[271,265,274,253,244,265,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,273,267,294,285,279,307],
[256,0,264,265,279,275,261,299],
[277,286,0,266,290,276,274,300],
[283,285,284,0,272,274,285,302],
[256,271,260,278,0,265,276,301],
[265,275,274,276,285,0,271,291],
[271,289,276,265,274,279,0,293],
[243,251,250,248,249,259,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,259,270,268,269,264,229],
[255,0,242,262,229,280,256,236],
[291,308,0,287,252,288,264,278],
[280,288,263,0,238,265,257,244],
[282,321,298,312,0,310,296,274],
[281,270,262,285,240,0,277,250],
[286,294,286,293,254,273,0,279],
[321,314,272,306,276,300,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,269,255,249,298,271,250],
[293,0,294,270,268,307,288,285],
[281,256,0,253,254,299,260,261],
[295,280,297,0,275,291,283,272],
[301,282,296,275,0,300,289,282],
[252,243,251,259,250,0,269,246],
[279,262,290,267,261,281,0,244],
[300,265,289,278,268,304,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,283,282,276,294,291,301],
[286,0,272,290,279,277,297,292],
[267,278,0,294,273,259,266,250],
[268,260,256,0,276,253,272,258],
[274,271,277,274,0,264,292,249],
[256,273,291,297,286,0,281,267],
[259,253,284,278,258,269,0,269],
[249,258,300,292,301,283,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,278,269,264,290,278,293],
[267,0,289,271,271,271,272,283],
[272,261,0,278,250,276,276,272],
[281,279,272,0,272,276,290,269],
[286,279,300,278,0,275,284,287],
[260,279,274,274,275,0,290,285],
[272,278,274,260,266,260,0,265],
[257,267,278,281,263,265,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,278,273,285,282,260,283],
[269,0,262,268,260,269,262,284],
[272,288,0,282,281,271,262,266],
[277,282,268,0,272,272,276,271],
[265,290,269,278,0,292,284,285],
[268,281,279,278,258,0,266,296],
[290,288,288,274,266,284,0,294],
[267,266,284,279,265,254,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,271,264,270,280,279,280],
[290,0,280,284,275,274,283,280],
[279,270,0,262,291,259,296,273],
[286,266,288,0,284,283,291,284],
[280,275,259,266,0,271,274,262],
[270,276,291,267,279,0,281,272],
[271,267,254,259,276,269,0,272],
[270,270,277,266,288,278,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,273,259,280,275,288,267],
[290,0,275,272,292,280,268,271],
[277,275,0,257,273,282,276,263],
[291,278,293,0,274,282,280,280],
[270,258,277,276,0,287,284,282],
[275,270,268,268,263,0,267,276],
[262,282,274,270,266,283,0,273],
[283,279,287,270,268,274,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,315,296,264,291,250,284],
[320,0,320,289,328,341,263,292],
[235,230,0,285,262,224,224,244],
[254,261,265,0,257,242,236,289],
[286,222,288,293,0,228,198,276],
[259,209,326,308,322,0,235,280],
[300,287,326,314,352,315,0,275],
[266,258,306,261,274,270,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,304,278,280,275,267,268],
[284,0,284,281,284,259,277,284],
[246,266,0,277,276,253,269,245],
[272,269,273,0,273,242,266,255],
[270,266,274,277,0,262,268,259],
[275,291,297,308,288,0,279,277],
[283,273,281,284,282,271,0,273],
[282,266,305,295,291,273,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,272,323,285,299,280,311],
[269,0,286,280,283,283,297,301],
[278,264,0,313,277,301,289,295],
[227,270,237,0,284,281,266,247],
[265,267,273,266,0,245,280,273],
[251,267,249,269,305,0,280,268],
[270,253,261,284,270,270,0,264],
[239,249,255,303,277,282,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,311,328,335,285,266,269],
[266,0,325,321,260,274,279,298],
[239,225,0,278,279,227,245,277],
[222,229,272,0,284,232,263,299],
[215,290,271,266,0,252,243,252],
[265,276,323,318,298,0,286,274],
[284,271,305,287,307,264,0,302],
[281,252,273,251,298,276,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,305,266,278,261,314,305],
[262,0,275,261,284,278,277,257],
[245,275,0,251,269,255,305,263],
[284,289,299,0,285,271,301,320],
[272,266,281,265,0,269,282,288],
[289,272,295,279,281,0,311,289],
[236,273,245,249,268,239,0,243],
[245,293,287,230,262,261,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,249,301,293,288,275,254],
[282,0,288,278,263,293,280,276],
[301,262,0,294,284,295,301,297],
[249,272,256,0,271,271,274,290],
[257,287,266,279,0,273,271,237],
[262,257,255,279,277,0,293,254],
[275,270,249,276,279,257,0,278],
[296,274,253,260,313,296,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,179,134,240,203,145,128],
[317,0,224,252,221,192,199,181],
[371,326,0,229,291,264,220,282],
[416,298,321,0,234,361,256,332],
[310,329,259,316,0,272,164,214],
[347,358,286,189,278,0,340,270],
[405,351,330,294,386,210,0,273],
[422,369,268,218,336,280,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,287,288,270,271,272,294],
[278,0,288,282,261,255,252,284],
[263,262,0,274,282,265,260,284],
[262,268,276,0,293,253,265,281],
[280,289,268,257,0,275,281,272],
[279,295,285,297,275,0,260,288],
[278,298,290,285,269,290,0,304],
[256,266,266,269,278,262,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,296,293,317,265,272,299],
[253,0,255,246,303,255,276,249],
[254,295,0,293,263,239,199,279],
[257,304,257,0,282,243,222,305],
[233,247,287,268,0,283,250,264],
[285,295,311,307,267,0,290,285],
[278,274,351,328,300,260,0,290],
[251,301,271,245,286,265,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,274,273,288,280,279,277],
[271,0,271,265,269,280,274,250],
[276,279,0,269,280,278,273,282],
[277,285,281,0,263,281,267,273],
[262,281,270,287,0,270,272,262],
[270,270,272,269,280,0,279,267],
[271,276,277,283,278,271,0,251],
[273,300,268,277,288,283,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,288,274,271,275,281,276],
[251,0,278,275,267,279,279,278],
[262,272,0,287,261,271,284,267],
[276,275,263,0,249,261,282,265],
[279,283,289,301,0,289,275,251],
[275,271,279,289,261,0,307,273],
[269,271,266,268,275,243,0,253],
[274,272,283,285,299,277,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,223,280,293,259,273,289],
[282,0,265,298,304,323,283,311],
[327,285,0,291,342,286,275,310],
[270,252,259,0,310,270,253,302],
[257,246,208,240,0,232,236,261],
[291,227,264,280,318,0,267,336],
[277,267,275,297,314,283,0,297],
[261,239,240,248,289,214,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,273,285,266,297,272,283],
[291,0,266,297,285,296,284,261],
[277,284,0,283,271,295,275,276],
[265,253,267,0,268,277,275,273],
[284,265,279,282,0,295,281,279],
[253,254,255,273,255,0,249,258],
[278,266,275,275,269,301,0,249],
[267,289,274,277,271,292,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,274,276,279,276,287,287],
[268,0,281,278,284,263,275,272],
[276,269,0,271,280,255,280,275],
[274,272,279,0,265,258,276,279],
[271,266,270,285,0,260,283,289],
[274,287,295,292,290,0,293,282],
[263,275,270,274,267,257,0,263],
[263,278,275,271,261,268,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,242,268,260,242,270,247],
[283,0,262,271,275,289,279,262],
[308,288,0,308,312,273,294,278],
[282,279,242,0,258,256,293,254],
[290,275,238,292,0,263,252,277],
[308,261,277,294,287,0,301,269],
[280,271,256,257,298,249,0,268],
[303,288,272,296,273,281,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,283,276,275,306,280,296],
[275,0,279,277,271,295,277,292],
[267,271,0,281,283,296,265,291],
[274,273,269,0,290,282,275,275],
[275,279,267,260,0,282,270,286],
[244,255,254,268,268,0,249,280],
[270,273,285,275,280,301,0,299],
[254,258,259,275,264,270,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,303,318,272,302,354,292],
[245,0,283,297,271,285,329,288],
[247,267,0,248,286,317,281,267],
[232,253,302,0,278,227,302,303],
[278,279,264,272,0,297,329,288],
[248,265,233,323,253,0,294,309],
[196,221,269,248,221,256,0,238],
[258,262,283,247,262,241,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,259,280,274,259,269,271],
[282,0,270,265,284,257,283,287],
[291,280,0,283,264,291,299,276],
[270,285,267,0,271,266,281,274],
[276,266,286,279,0,271,295,281],
[291,293,259,284,279,0,293,299],
[281,267,251,269,255,257,0,283],
[279,263,274,276,269,251,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,270,258,256,259,270,301],
[272,0,264,262,260,277,273,295],
[280,286,0,293,273,296,270,304],
[292,288,257,0,289,275,282,266],
[294,290,277,261,0,265,289,291],
[291,273,254,275,285,0,288,309],
[280,277,280,268,261,262,0,306],
[249,255,246,284,259,241,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,273,274,287,270,266,271],
[294,0,286,290,290,299,275,269],
[277,264,0,262,292,267,249,261],
[276,260,288,0,287,263,263,267],
[263,260,258,263,0,271,250,263],
[280,251,283,287,279,0,260,269],
[284,275,301,287,300,290,0,282],
[279,281,289,283,287,281,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,298,284,268,263,245,260],
[266,0,288,316,270,259,249,272],
[252,262,0,292,261,240,238,243],
[266,234,258,0,246,243,234,224],
[282,280,289,304,0,267,268,258],
[287,291,310,307,283,0,267,279],
[305,301,312,316,282,283,0,265],
[290,278,307,326,292,271,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,273,280,290,287,285,278],
[267,0,261,284,267,272,261,264],
[277,289,0,293,297,297,269,291],
[270,266,257,0,265,279,258,264],
[260,283,253,285,0,270,282,249],
[263,278,253,271,280,0,281,256],
[265,289,281,292,268,269,0,281],
[272,286,259,286,301,294,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,264,290,267,281,254,259],
[248,0,249,252,238,260,250,253],
[286,301,0,291,280,273,282,281],
[260,298,259,0,273,278,272,255],
[283,312,270,277,0,287,268,266],
[269,290,277,272,263,0,292,272],
[296,300,268,278,282,258,0,270],
[291,297,269,295,284,278,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,259,284,276,292,282,273],
[276,0,254,267,262,283,276,267],
[291,296,0,282,292,293,257,293],
[266,283,268,0,274,276,272,256],
[274,288,258,276,0,277,269,288],
[258,267,257,274,273,0,270,264],
[268,274,293,278,281,280,0,276],
[277,283,257,294,262,286,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,280,261,255,265,264,257],
[266,0,263,277,254,272,264,271],
[270,287,0,254,261,267,271,263],
[289,273,296,0,272,275,311,293],
[295,296,289,278,0,267,265,265],
[285,278,283,275,283,0,295,279],
[286,286,279,239,285,255,0,254],
[293,279,287,257,285,271,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,550,406,417,256,510,389,286],
[0,0,406,161,0,322,389,182],
[144,144,0,201,40,269,40,286],
[133,389,349,0,296,493,389,125],
[294,550,510,254,0,379,446,286],
[40,228,281,57,171,0,171,182],
[161,161,510,161,104,379,0,286],
[264,368,264,425,264,368,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,330,308,341,200,329,383,327],
[220,0,248,245,273,265,348,273],
[242,302,0,295,227,350,386,271],
[209,305,255,0,312,248,322,316],
[350,277,323,238,0,260,293,282],
[221,285,200,302,290,0,380,299],
[167,202,164,228,257,170,0,258],
[223,277,279,234,268,251,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,272,279,283,282,309,264],
[276,0,284,280,263,295,288,283],
[278,266,0,262,279,272,264,276],
[271,270,288,0,267,285,256,268],
[267,287,271,283,0,265,274,259],
[268,255,278,265,285,0,275,255],
[241,262,286,294,276,275,0,280],
[286,267,274,282,291,295,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,269,271,250,269,261,274],
[272,0,260,276,249,272,272,276],
[281,290,0,269,280,284,280,285],
[279,274,281,0,258,269,284,273],
[300,301,270,292,0,295,293,288],
[281,278,266,281,255,0,290,285],
[289,278,270,266,257,260,0,293],
[276,274,265,277,262,265,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,217,252,261,254,260,271],
[316,0,293,314,305,321,268,331],
[333,257,0,310,319,306,309,319],
[298,236,240,0,272,293,271,287],
[289,245,231,278,0,248,285,284],
[296,229,244,257,302,0,294,266],
[290,282,241,279,265,256,0,266],
[279,219,231,263,266,284,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,259,284,319,285,314,286],
[252,0,279,334,318,316,268,326],
[291,271,0,266,329,282,270,299],
[266,216,284,0,332,264,286,270],
[231,232,221,218,0,218,304,273],
[265,234,268,286,332,0,306,331],
[236,282,280,264,246,244,0,274],
[264,224,251,280,277,219,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,255,262,227,261,262,273],
[314,0,275,254,304,290,307,314],
[295,275,0,244,245,248,298,285],
[288,296,306,0,274,287,291,313],
[323,246,305,276,0,294,310,324],
[289,260,302,263,256,0,291,287],
[288,243,252,259,240,259,0,279],
[277,236,265,237,226,263,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,277,264,272,289,255,263],
[265,0,276,245,276,264,272,246],
[273,274,0,259,283,281,251,250],
[286,305,291,0,264,258,256,241],
[278,274,267,286,0,287,247,277],
[261,286,269,292,263,0,292,233],
[295,278,299,294,303,258,0,265],
[287,304,300,309,273,317,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,276,270,265,283,274,295],
[272,0,267,269,274,287,265,277],
[274,283,0,280,299,298,287,316],
[280,281,270,0,283,290,267,286],
[285,276,251,267,0,264,271,280],
[267,263,252,260,286,0,261,290],
[276,285,263,283,279,289,0,297],
[255,273,234,264,270,260,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,253,254,259,278,259,263],
[291,0,278,269,282,288,296,287],
[297,272,0,278,268,296,297,262],
[296,281,272,0,285,280,292,271],
[291,268,282,265,0,277,287,268],
[272,262,254,270,273,0,285,266],
[291,254,253,258,263,265,0,265],
[287,263,288,279,282,284,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,252,275,280,247,268,256],
[275,0,266,271,266,267,270,262],
[298,284,0,277,283,260,301,276],
[275,279,273,0,259,260,267,267],
[270,284,267,291,0,276,288,279],
[303,283,290,290,274,0,289,292],
[282,280,249,283,262,261,0,265],
[294,288,274,283,271,258,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,282,270,284,274,291,263],
[276,0,282,279,279,274,274,265],
[268,268,0,275,280,271,264,257],
[280,271,275,0,298,293,266,269],
[266,271,270,252,0,268,264,262],
[276,276,279,257,282,0,258,267],
[259,276,286,284,286,292,0,285],
[287,285,293,281,288,283,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,267,259,234,305,267,317],
[268,0,284,307,238,315,255,280],
[283,266,0,260,229,319,262,287],
[291,243,290,0,281,298,278,320],
[316,312,321,269,0,322,293,323],
[245,235,231,252,228,0,230,233],
[283,295,288,272,257,320,0,318],
[233,270,263,230,227,317,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,277,266,273,283,264,252],
[259,0,243,262,266,255,258,242],
[273,307,0,253,310,252,260,256],
[284,288,297,0,289,271,279,283],
[277,284,240,261,0,253,254,255],
[267,295,298,279,297,0,278,254],
[286,292,290,271,296,272,0,262],
[298,308,294,267,295,296,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,221,276,281,260,272,255,287],
[329,0,308,261,278,284,331,337],
[274,242,0,252,256,241,292,319],
[269,289,298,0,216,260,297,317],
[290,272,294,334,0,258,309,323],
[278,266,309,290,292,0,363,351],
[295,219,258,253,241,187,0,294],
[263,213,231,233,227,199,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,261,270,304,274,276,277],
[271,0,263,266,294,283,282,271],
[289,287,0,282,301,282,300,273],
[280,284,268,0,307,281,310,285],
[246,256,249,243,0,251,256,265],
[276,267,268,269,299,0,282,265],
[274,268,250,240,294,268,0,274],
[273,279,277,265,285,285,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,337,361,334,265,250,307,266],
[213,0,379,295,316,351,330,386],
[189,171,0,257,200,216,290,262],
[216,255,293,0,299,294,246,373],
[285,234,350,251,0,172,283,374],
[300,199,334,256,378,0,280,371],
[243,220,260,304,267,270,0,371],
[284,164,288,177,176,179,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,269,283,285,266,292,279],
[255,0,251,241,278,263,259,251],
[281,299,0,271,272,280,295,295],
[267,309,279,0,262,263,290,258],
[265,272,278,288,0,259,289,300],
[284,287,270,287,291,0,297,276],
[258,291,255,260,261,253,0,277],
[271,299,255,292,250,274,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,280,271,274,298,270,280],
[288,0,290,291,281,300,265,291],
[270,260,0,246,265,277,254,267],
[279,259,304,0,295,296,291,283],
[276,269,285,255,0,300,279,276],
[252,250,273,254,250,0,251,272],
[280,285,296,259,271,299,0,307],
[270,259,283,267,274,278,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,215,271,236,290,170,219],
[405,0,308,334,379,364,331,266],
[335,242,0,306,295,241,366,283],
[279,216,244,0,285,287,175,293],
[314,171,255,265,0,302,299,254],
[260,186,309,263,248,0,239,264],
[380,219,184,375,251,311,0,250],
[331,284,267,257,296,286,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,282,276,280,254,274,277],
[282,0,292,294,286,273,278,284],
[268,258,0,273,274,258,277,277],
[274,256,277,0,270,255,269,277],
[270,264,276,280,0,275,276,268],
[296,277,292,295,275,0,294,293],
[276,272,273,281,274,256,0,270],
[273,266,273,273,282,257,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,300,319,295,293,318,262],
[240,0,265,272,269,279,280,268],
[250,285,0,253,264,294,294,215],
[231,278,297,0,313,305,285,309],
[255,281,286,237,0,302,278,230],
[257,271,256,245,248,0,281,269],
[232,270,256,265,272,269,0,242],
[288,282,335,241,320,281,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,289,283,294,286,281,304],
[284,0,285,295,294,280,270,306],
[261,265,0,278,276,267,274,282],
[267,255,272,0,267,269,260,288],
[256,256,274,283,0,273,265,284],
[264,270,283,281,277,0,276,273],
[269,280,276,290,285,274,0,289],
[246,244,268,262,266,277,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,252,282,272,286,276,289],
[261,0,261,297,275,282,268,282],
[298,289,0,300,291,300,274,292],
[268,253,250,0,276,280,269,269],
[278,275,259,274,0,265,267,268],
[264,268,250,270,285,0,279,274],
[274,282,276,281,283,271,0,273],
[261,268,258,281,282,276,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,296,243,240,295,244,263],
[312,0,341,256,296,323,277,301],
[254,209,0,215,240,262,188,229],
[307,294,335,0,314,326,265,297],
[310,254,310,236,0,280,258,255],
[255,227,288,224,270,0,226,229],
[306,273,362,285,292,324,0,272],
[287,249,321,253,295,321,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,265,297,294,260,270,281],
[299,0,283,265,282,269,276,266],
[285,267,0,278,284,277,266,273],
[253,285,272,0,266,277,269,272],
[256,268,266,284,0,247,246,275],
[290,281,273,273,303,0,289,284],
[280,274,284,281,304,261,0,276],
[269,284,277,278,275,266,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,283,255,266,278,260,251],
[287,0,295,264,265,283,268,268],
[267,255,0,259,270,257,247,253],
[295,286,291,0,278,309,281,273],
[284,285,280,272,0,307,281,267],
[272,267,293,241,243,0,247,248],
[290,282,303,269,269,303,0,281],
[299,282,297,277,283,302,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,295,233,227,275,289,308],
[265,0,237,240,243,332,243,255],
[255,313,0,198,215,284,207,251],
[317,310,352,0,261,289,247,327],
[323,307,335,289,0,297,255,301],
[275,218,266,261,253,0,214,289],
[261,307,343,303,295,336,0,275],
[242,295,299,223,249,261,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,299,299,267,302,293,281],
[231,0,266,263,247,258,240,228],
[251,284,0,255,238,247,244,246],
[251,287,295,0,234,292,257,259],
[283,303,312,316,0,262,287,245],
[248,292,303,258,288,0,269,255],
[257,310,306,293,263,281,0,265],
[269,322,304,291,305,295,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,254,249,247,262,273,262],
[282,0,270,250,275,287,280,276],
[296,280,0,263,262,289,275,276],
[301,300,287,0,274,307,273,297],
[303,275,288,276,0,301,288,291],
[288,263,261,243,249,0,252,267],
[277,270,275,277,262,298,0,274],
[288,274,274,253,259,283,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,265,264,282,285,282,308],
[254,0,267,278,293,254,255,278],
[285,283,0,282,273,298,305,301],
[286,272,268,0,270,310,276,291],
[268,257,277,280,0,284,290,285],
[265,296,252,240,266,0,242,272],
[268,295,245,274,260,308,0,311],
[242,272,249,259,265,278,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,289,281,295,259,270,280],
[277,0,260,269,285,264,271,279],
[261,290,0,293,295,262,268,288],
[269,281,257,0,292,273,260,284],
[255,265,255,258,0,243,266,269],
[291,286,288,277,307,0,281,271],
[280,279,282,290,284,269,0,301],
[270,271,262,266,281,279,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,334,309,305,205,295,291,338],
[216,0,255,270,220,272,280,249],
[241,295,0,280,287,324,330,360],
[245,280,270,0,257,222,294,324],
[345,330,263,293,0,287,374,363],
[255,278,226,328,263,0,301,295],
[259,270,220,256,176,249,0,317],
[212,301,190,226,187,255,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,254,276,271,266,286,259],
[283,0,292,275,290,278,297,269],
[296,258,0,278,251,263,278,275],
[274,275,272,0,288,251,295,277],
[279,260,299,262,0,263,246,280],
[284,272,287,299,287,0,277,276],
[264,253,272,255,304,273,0,277],
[291,281,275,273,270,274,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,248,270,279,276,280,267],
[289,0,306,286,302,301,272,278],
[302,244,0,288,276,285,283,288],
[280,264,262,0,272,267,278,265],
[271,248,274,278,0,270,245,284],
[274,249,265,283,280,0,257,281],
[270,278,267,272,305,293,0,289],
[283,272,262,285,266,269,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,342,298,332,270,283,339,332],
[208,0,237,306,247,240,311,257],
[252,313,0,296,256,251,293,290],
[218,244,254,0,289,276,283,250],
[280,303,294,261,0,228,274,310],
[267,310,299,274,322,0,334,311],
[211,239,257,267,276,216,0,283],
[218,293,260,300,240,239,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,275,276,275,304,294,259],
[252,0,273,270,257,294,300,257],
[275,277,0,267,270,317,298,259],
[274,280,283,0,274,306,297,264],
[275,293,280,276,0,314,287,280],
[246,256,233,244,236,0,271,230],
[256,250,252,253,263,279,0,253],
[291,293,291,286,270,320,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,256,269,264,273,275,273],
[281,0,243,258,275,262,272,255],
[294,307,0,267,286,290,285,289],
[281,292,283,0,273,289,294,283],
[286,275,264,277,0,272,276,285],
[277,288,260,261,278,0,301,284],
[275,278,265,256,274,249,0,263],
[277,295,261,267,265,266,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,284,303,295,267,271,252],
[285,0,279,269,281,268,280,284],
[266,271,0,260,278,247,241,264],
[247,281,290,0,264,279,247,297],
[255,269,272,286,0,240,268,254],
[283,282,303,271,310,0,241,287],
[279,270,309,303,282,309,0,287],
[298,266,286,253,296,263,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,285,270,291,266,309,265],
[267,0,270,263,217,236,255,257],
[265,280,0,271,254,264,268,252],
[280,287,279,0,271,271,272,285],
[259,333,296,279,0,269,292,286],
[284,314,286,279,281,0,288,260],
[241,295,282,278,258,262,0,253],
[285,293,298,265,264,290,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,281,267,270,284,280,286],
[275,0,285,287,284,279,286,303],
[269,265,0,280,276,274,280,286],
[283,263,270,0,266,269,269,302],
[280,266,274,284,0,277,296,312],
[266,271,276,281,273,0,260,283],
[270,264,270,281,254,290,0,282],
[264,247,264,248,238,267,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,278,273,295,256,278,271],
[295,0,294,273,294,266,282,284],
[272,256,0,266,288,262,272,268],
[277,277,284,0,279,250,255,283],
[255,256,262,271,0,237,247,267],
[294,284,288,300,313,0,267,313],
[272,268,278,295,303,283,0,285],
[279,266,282,267,283,237,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,238,273,218,202,302,266],
[312,0,260,307,268,292,282,346],
[312,290,0,323,278,263,301,319],
[277,243,227,0,255,211,297,271],
[332,282,272,295,0,300,315,302],
[348,258,287,339,250,0,325,316],
[248,268,249,253,235,225,0,301],
[284,204,231,279,248,234,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,255,288,297,260,308,287],
[269,0,282,277,292,265,294,261],
[295,268,0,265,262,269,276,247],
[262,273,285,0,273,283,302,260],
[253,258,288,277,0,278,331,244],
[290,285,281,267,272,0,318,280],
[242,256,274,248,219,232,0,249],
[263,289,303,290,306,270,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,270,255,282,287,284,289],
[259,0,269,261,284,278,263,278],
[280,281,0,276,290,275,280,279],
[295,289,274,0,313,298,299,297],
[268,266,260,237,0,261,269,277],
[263,272,275,252,289,0,262,279],
[266,287,270,251,281,288,0,291],
[261,272,271,253,273,271,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,278,276,285,267,262,288],
[286,0,274,288,285,293,295,312],
[272,276,0,285,295,284,289,297],
[274,262,265,0,292,286,259,265],
[265,265,255,258,0,278,259,272],
[283,257,266,264,272,0,262,292],
[288,255,261,291,291,288,0,290],
[262,238,253,285,278,258,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,275,276,258,272,263,282],
[278,0,294,283,256,291,281,290],
[275,256,0,265,267,263,266,281],
[274,267,285,0,277,280,277,278],
[292,294,283,273,0,288,276,294],
[278,259,287,270,262,0,269,279],
[287,269,284,273,274,281,0,295],
[268,260,269,272,256,271,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,278,264,267,268,306,268],
[276,0,274,283,278,276,300,288],
[272,276,0,256,264,267,309,274],
[286,267,294,0,294,274,300,295],
[283,272,286,256,0,294,303,281],
[282,274,283,276,256,0,281,260],
[244,250,241,250,247,269,0,254],
[282,262,276,255,269,290,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,268,332,248,255,247,287],
[255,0,217,271,187,203,266,215],
[282,333,0,310,275,287,332,353],
[218,279,240,0,190,235,280,257],
[302,363,275,360,0,299,334,275],
[295,347,263,315,251,0,313,223],
[303,284,218,270,216,237,0,241],
[263,335,197,293,275,327,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,281,285,278,287,280,270],
[273,0,281,277,264,295,279,283],
[269,269,0,284,272,260,280,285],
[265,273,266,0,269,265,273,267],
[272,286,278,281,0,283,292,280],
[263,255,290,285,267,0,271,253],
[270,271,270,277,258,279,0,291],
[280,267,265,283,270,297,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,278,273,275,295,280,266],
[242,0,273,279,250,258,264,237],
[272,277,0,280,259,272,263,256],
[277,271,270,0,246,262,264,225],
[275,300,291,304,0,264,272,277],
[255,292,278,288,286,0,283,250],
[270,286,287,286,278,267,0,270],
[284,313,294,325,273,300,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,258,255,273,256,237,289],
[308,0,242,230,303,282,267,267],
[292,308,0,276,285,294,267,291],
[295,320,274,0,280,319,277,288],
[277,247,265,270,0,273,255,294],
[294,268,256,231,277,0,222,246],
[313,283,283,273,295,328,0,309],
[261,283,259,262,256,304,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,283,279,280,269,293,270],
[269,0,262,268,276,270,285,269],
[267,288,0,264,270,269,285,283],
[271,282,286,0,286,271,305,286],
[270,274,280,264,0,268,287,269],
[281,280,281,279,282,0,291,275],
[257,265,265,245,263,259,0,259],
[280,281,267,264,281,275,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,273,254,264,269,280,273],
[300,0,275,289,293,292,285,299],
[277,275,0,278,286,278,276,287],
[296,261,272,0,276,288,274,296],
[286,257,264,274,0,274,272,286],
[281,258,272,262,276,0,278,297],
[270,265,274,276,278,272,0,269],
[277,251,263,254,264,253,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,278,283,266,264,259,258],
[280,0,295,276,274,278,264,261],
[272,255,0,292,262,288,275,254],
[267,274,258,0,268,259,274,254],
[284,276,288,282,0,283,290,275],
[286,272,262,291,267,0,257,280],
[291,286,275,276,260,293,0,277],
[292,289,296,296,275,270,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,259,255,279,268,254,273],
[283,0,283,266,275,279,280,304],
[291,267,0,245,278,301,237,285],
[295,284,305,0,276,290,261,287],
[271,275,272,274,0,270,264,266],
[282,271,249,260,280,0,252,272],
[296,270,313,289,286,298,0,264],
[277,246,265,263,284,278,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,253,264,267,279,264,322],
[260,0,273,234,283,296,219,256],
[297,277,0,257,287,236,326,296],
[286,316,293,0,363,261,362,349],
[283,267,263,187,0,276,283,241],
[271,254,314,289,274,0,320,274],
[286,331,224,188,267,230,0,342],
[228,294,254,201,309,276,208,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,260,311,290,317,265,275],
[278,0,248,293,263,307,289,293],
[290,302,0,352,261,314,293,303],
[239,257,198,0,221,257,230,218],
[260,287,289,329,0,313,284,266],
[233,243,236,293,237,0,252,250],
[285,261,257,320,266,298,0,274],
[275,257,247,332,284,300,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,197,201,247,297,243,251],
[368,0,354,234,398,321,369,312],
[353,196,0,282,405,322,181,280],
[349,316,268,0,391,355,194,343],
[303,152,145,159,0,312,194,211],
[253,229,228,195,238,0,122,194],
[307,181,369,356,356,428,0,261],
[299,238,270,207,339,356,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,278,237,253,258,268,271],
[312,0,292,290,241,268,272,282],
[272,258,0,255,249,215,260,262],
[313,260,295,0,255,288,257,285],
[297,309,301,295,0,272,311,303],
[292,282,335,262,278,0,281,299],
[282,278,290,293,239,269,0,270],
[279,268,288,265,247,251,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,265,291,275,285,308,280],
[248,0,235,257,246,277,270,262],
[285,315,0,284,292,274,311,292],
[259,293,266,0,261,264,297,276],
[275,304,258,289,0,287,308,276],
[265,273,276,286,263,0,297,289],
[242,280,239,253,242,253,0,239],
[270,288,258,274,274,261,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,250,266,234,244,246,246],
[327,0,294,315,282,302,262,275],
[300,256,0,276,252,283,273,282],
[284,235,274,0,270,273,240,276],
[316,268,298,280,0,286,266,282],
[306,248,267,277,264,0,254,283],
[304,288,277,310,284,296,0,262],
[304,275,268,274,268,267,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,286,287,263,283,248,253],
[280,0,264,271,279,273,255,251],
[264,286,0,271,255,264,251,242],
[263,279,279,0,269,278,275,255],
[287,271,295,281,0,296,251,272],
[267,277,286,272,254,0,246,279],
[302,295,299,275,299,304,0,275],
[297,299,308,295,278,271,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,276,288,266,282,275,281],
[295,0,303,251,253,300,233,301],
[274,247,0,257,225,255,222,286],
[262,299,293,0,275,280,256,284],
[284,297,325,275,0,280,243,315],
[268,250,295,270,270,0,263,275],
[275,317,328,294,307,287,0,327],
[269,249,264,266,235,275,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,268,292,291,279,297,269],
[268,0,270,304,260,277,286,269],
[282,280,0,305,291,271,311,279],
[258,246,245,0,287,264,280,271],
[259,290,259,263,0,262,292,253],
[271,273,279,286,288,0,308,280],
[253,264,239,270,258,242,0,254],
[281,281,271,279,297,270,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,290,245,201,300,281,267],
[285,0,224,256,225,301,257,237],
[260,326,0,266,241,293,293,247],
[305,294,284,0,245,329,280,276],
[349,325,309,305,0,322,311,271],
[250,249,257,221,228,0,235,248],
[269,293,257,270,239,315,0,235],
[283,313,303,274,279,302,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,252,268,277,271,264,284],
[291,0,280,263,275,275,261,291],
[298,270,0,277,292,289,285,288],
[282,287,273,0,269,279,265,293],
[273,275,258,281,0,279,255,288],
[279,275,261,271,271,0,277,284],
[286,289,265,285,295,273,0,282],
[266,259,262,257,262,266,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,284,280,266,268,269,273],
[277,0,267,279,286,274,259,271],
[266,283,0,262,281,278,263,260],
[270,271,288,0,269,264,261,290],
[284,264,269,281,0,279,266,270],
[282,276,272,286,271,0,278,269],
[281,291,287,289,284,272,0,283],
[277,279,290,260,280,281,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,262,285,302,299,264,298],
[278,0,300,274,283,291,301,313],
[288,250,0,273,283,295,299,287],
[265,276,277,0,280,285,301,311],
[248,267,267,270,0,278,266,268],
[251,259,255,265,272,0,252,280],
[286,249,251,249,284,298,0,292],
[252,237,263,239,282,270,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,231,244,265,262,250,246],
[275,0,253,277,256,277,257,281],
[319,297,0,283,273,281,262,269],
[306,273,267,0,279,260,284,252],
[285,294,277,271,0,275,259,275],
[288,273,269,290,275,0,266,246],
[300,293,288,266,291,284,0,264],
[304,269,281,298,275,304,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,269,278,283,264,263,294],
[263,0,267,275,270,262,266,291],
[281,283,0,285,281,276,271,285],
[272,275,265,0,273,257,263,289],
[267,280,269,277,0,273,267,292],
[286,288,274,293,277,0,283,301],
[287,284,279,287,283,267,0,289],
[256,259,265,261,258,249,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,299,294,294,287,287,270],
[272,0,306,297,300,290,298,305],
[251,244,0,260,273,267,277,272],
[256,253,290,0,285,259,281,284],
[256,250,277,265,0,272,273,256],
[263,260,283,291,278,0,283,279],
[263,252,273,269,277,267,0,277],
[280,245,278,266,294,271,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,277,273,257,255,264,269],
[283,0,279,292,278,290,290,275],
[273,271,0,271,269,264,268,267],
[277,258,279,0,263,279,289,286],
[293,272,281,287,0,297,287,286],
[295,260,286,271,253,0,282,281],
[286,260,282,261,263,268,0,275],
[281,275,283,264,264,269,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,265,275,269,272,269,281],
[265,0,230,245,276,272,266,248],
[285,320,0,279,290,279,285,275],
[275,305,271,0,276,278,271,276],
[281,274,260,274,0,273,277,250],
[278,278,271,272,277,0,274,271],
[281,284,265,279,273,276,0,264],
[269,302,275,274,300,279,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,296,274,233,273,282,286],
[258,0,284,294,258,259,248,265],
[254,266,0,246,235,217,235,235],
[276,256,304,0,269,244,255,261],
[317,292,315,281,0,273,269,284],
[277,291,333,306,277,0,271,265],
[268,302,315,295,281,279,0,300],
[264,285,315,289,266,285,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,244,273,258,278,260,272],
[274,0,258,271,280,284,277,285],
[306,292,0,274,289,301,321,293],
[277,279,276,0,273,280,315,286],
[292,270,261,277,0,273,295,296],
[272,266,249,270,277,0,296,275],
[290,273,229,235,255,254,0,278],
[278,265,257,264,254,275,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,279,255,259,249,280,276],
[294,0,288,269,290,289,258,295],
[271,262,0,272,266,265,276,286],
[295,281,278,0,301,274,282,288],
[291,260,284,249,0,256,274,281],
[301,261,285,276,294,0,282,296],
[270,292,274,268,276,268,0,292],
[274,255,264,262,269,254,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,272,284,314,260,252,261],
[275,0,268,269,268,240,253,234],
[278,282,0,284,297,248,278,285],
[266,281,266,0,277,270,248,273],
[236,282,253,273,0,275,263,271],
[290,310,302,280,275,0,273,260],
[298,297,272,302,287,277,0,283],
[289,316,265,277,279,290,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,279,263,253,261,265,253],
[278,0,280,262,279,269,243,272],
[271,270,0,233,276,249,244,268],
[287,288,317,0,285,296,265,278],
[297,271,274,265,0,273,258,287],
[289,281,301,254,277,0,257,285],
[285,307,306,285,292,293,0,275],
[297,278,282,272,263,265,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,257,296,278,294,261,224],
[281,0,265,312,270,288,260,276],
[293,285,0,304,289,271,248,263],
[254,238,246,0,260,267,231,234],
[272,280,261,290,0,278,259,252],
[256,262,279,283,272,0,234,270],
[289,290,302,319,291,316,0,275],
[326,274,287,316,298,280,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,305,278,275,292,270,275],
[269,0,269,267,276,282,257,257],
[245,281,0,282,275,269,271,243],
[272,283,268,0,266,291,264,253],
[275,274,275,284,0,285,286,281],
[258,268,281,259,265,0,272,264],
[280,293,279,286,264,278,0,260],
[275,293,307,297,269,286,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,261,295,267,282,273,271],
[292,0,282,299,270,283,270,285],
[289,268,0,296,282,303,275,279],
[255,251,254,0,257,275,266,280],
[283,280,268,293,0,286,278,298],
[268,267,247,275,264,0,275,266],
[277,280,275,284,272,275,0,281],
[279,265,271,270,252,284,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,271,276,277,275,272,271],
[274,0,267,271,270,273,251,267],
[279,283,0,280,266,264,243,276],
[274,279,270,0,266,261,249,278],
[273,280,284,284,0,258,257,294],
[275,277,286,289,292,0,280,295],
[278,299,307,301,293,270,0,294],
[279,283,274,272,256,255,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,284,269,288,264,278,279],
[291,0,294,280,288,272,275,284],
[266,256,0,296,271,271,281,277],
[281,270,254,0,288,280,270,288],
[262,262,279,262,0,274,277,269],
[286,278,279,270,276,0,293,281],
[272,275,269,280,273,257,0,271],
[271,266,273,262,281,269,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,325,267,316,278,253,278],
[293,0,287,255,299,263,256,266],
[225,263,0,250,274,247,254,249],
[283,295,300,0,318,262,267,291],
[234,251,276,232,0,222,258,245],
[272,287,303,288,328,0,296,313],
[297,294,296,283,292,254,0,295],
[272,284,301,259,305,237,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,286,280,291,300,276,284],
[281,0,283,281,302,299,271,280],
[264,267,0,259,280,275,268,275],
[270,269,291,0,297,303,270,279],
[259,248,270,253,0,279,266,253],
[250,251,275,247,271,0,274,253],
[274,279,282,280,284,276,0,264],
[266,270,275,271,297,297,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,251,304,331,259,321,297],
[274,0,291,334,354,299,340,318],
[299,259,0,268,295,259,313,309],
[246,216,282,0,280,278,323,302],
[219,196,255,270,0,269,242,253],
[291,251,291,272,281,0,264,253],
[229,210,237,227,308,286,0,268],
[253,232,241,248,297,297,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,298,275,296,268,260,282],
[270,0,290,271,289,277,286,264],
[252,260,0,278,287,276,258,279],
[275,279,272,0,292,269,268,259],
[254,261,263,258,0,256,269,266],
[282,273,274,281,294,0,276,275],
[290,264,292,282,281,274,0,277],
[268,286,271,291,284,275,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,285,258,246,277,266,278],
[280,0,272,273,278,269,278,295],
[265,278,0,255,271,281,271,292],
[292,277,295,0,272,277,283,282],
[304,272,279,278,0,277,269,295],
[273,281,269,273,273,0,278,277],
[284,272,279,267,281,272,0,278],
[272,255,258,268,255,273,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,260,291,284,280,274,287],
[271,0,274,280,269,265,275,283],
[290,276,0,288,292,292,265,269],
[259,270,262,0,261,252,255,281],
[266,281,258,289,0,256,271,271],
[270,285,258,298,294,0,273,282],
[276,275,285,295,279,277,0,292],
[263,267,281,269,279,268,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,265,264,255,265,273,264],
[278,0,273,273,261,260,281,268],
[285,277,0,283,264,271,284,273],
[286,277,267,0,275,268,281,283],
[295,289,286,275,0,275,280,269],
[285,290,279,282,275,0,291,289],
[277,269,266,269,270,259,0,257],
[286,282,277,267,281,261,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,272,263,265,266,255,262],
[285,0,287,269,284,283,277,265],
[278,263,0,272,265,288,275,284],
[287,281,278,0,273,289,265,286],
[285,266,285,277,0,276,260,296],
[284,267,262,261,274,0,268,273],
[295,273,275,285,290,282,0,289],
[288,285,266,264,254,277,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,286,307,288,256,278,308],
[280,0,298,305,285,279,265,289],
[264,252,0,257,254,258,256,278],
[243,245,293,0,284,241,260,246],
[262,265,296,266,0,246,275,263],
[294,271,292,309,304,0,276,303],
[272,285,294,290,275,274,0,268],
[242,261,272,304,287,247,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,254,274,260,268,268,250],
[265,0,273,272,254,261,244,254],
[296,277,0,262,265,265,275,266],
[276,278,288,0,268,263,274,279],
[290,296,285,282,0,266,274,260],
[282,289,285,287,284,0,276,269],
[282,306,275,276,276,274,0,262],
[300,296,284,271,290,281,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,280,271,275,297,280,275],
[271,0,253,253,268,288,269,271],
[270,297,0,286,286,301,285,286],
[279,297,264,0,278,279,273,289],
[275,282,264,272,0,293,270,280],
[253,262,249,271,257,0,263,266],
[270,281,265,277,280,287,0,271],
[275,279,264,261,270,284,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,268,284,279,284,269,260],
[281,0,284,272,261,263,259,267],
[282,266,0,269,270,277,252,280],
[266,278,281,0,266,275,272,277],
[271,289,280,284,0,278,288,278],
[266,287,273,275,272,0,263,280],
[281,291,298,278,262,287,0,287],
[290,283,270,273,272,270,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,262,247,279,287,268,293],
[285,0,291,264,280,287,295,291],
[288,259,0,249,288,280,251,304],
[303,286,301,0,284,299,270,302],
[271,270,262,266,0,277,255,288],
[263,263,270,251,273,0,259,308],
[282,255,299,280,295,291,0,329],
[257,259,246,248,262,242,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,237,316,256,266,261,240],
[271,0,228,266,267,239,236,249],
[313,322,0,306,285,309,283,252],
[234,284,244,0,248,235,260,230],
[294,283,265,302,0,267,289,278],
[284,311,241,315,283,0,297,262],
[289,314,267,290,261,253,0,265],
[310,301,298,320,272,288,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,273,264,304,270,246,305],
[294,0,275,293,301,300,248,285],
[277,275,0,267,290,290,263,302],
[286,257,283,0,271,264,257,277],
[246,249,260,279,0,269,260,299],
[280,250,260,286,281,0,276,284],
[304,302,287,293,290,274,0,310],
[245,265,248,273,251,266,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,272,264,281,258,236,274],
[268,0,275,245,301,251,251,266],
[278,275,0,272,285,257,245,308],
[286,305,278,0,304,279,272,285],
[269,249,265,246,0,256,236,277],
[292,299,293,271,294,0,282,294],
[314,299,305,278,314,268,0,297],
[276,284,242,265,273,256,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,251,223,258,221,247,259],
[262,0,264,263,221,240,246,269],
[299,286,0,254,266,271,256,260],
[327,287,296,0,282,286,273,293],
[292,329,284,268,0,263,288,323],
[329,310,279,264,287,0,267,309],
[303,304,294,277,262,283,0,300],
[291,281,290,257,227,241,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,278,273,284,271,282,291],
[271,0,262,290,290,284,285,288],
[272,288,0,264,281,268,272,283],
[277,260,286,0,275,260,309,301],
[266,260,269,275,0,274,251,257],
[279,266,282,290,276,0,291,285],
[268,265,278,241,299,259,0,263],
[259,262,267,249,293,265,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,284,323,276,306,310,260],
[246,0,281,300,297,283,263,280],
[266,269,0,304,255,242,248,229],
[227,250,246,0,262,217,269,265],
[274,253,295,288,0,262,293,271],
[244,267,308,333,288,0,279,269],
[240,287,302,281,257,271,0,242],
[290,270,321,285,279,281,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,276,271,257,252,240,251],
[282,0,263,282,275,255,273,277],
[274,287,0,301,252,283,261,277],
[279,268,249,0,255,251,282,250],
[293,275,298,295,0,276,281,294],
[298,295,267,299,274,0,293,269],
[310,277,289,268,269,257,0,262],
[299,273,273,300,256,281,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,239,263,264,257,256,266],
[281,0,261,271,263,254,283,294],
[311,289,0,274,287,278,292,292],
[287,279,276,0,262,263,295,262],
[286,287,263,288,0,282,282,275],
[293,296,272,287,268,0,293,268],
[294,267,258,255,268,257,0,247],
[284,256,258,288,275,282,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,274,272,278,273,276,278],
[256,0,259,271,280,260,267,257],
[276,291,0,285,271,281,287,284],
[278,279,265,0,285,265,276,265],
[272,270,279,265,0,261,278,271],
[277,290,269,285,289,0,269,268],
[274,283,263,274,272,281,0,276],
[272,293,266,285,279,282,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,280,283,266,275,287,305],
[254,0,250,274,255,281,256,295],
[270,300,0,282,288,291,249,306],
[267,276,268,0,268,281,266,298],
[284,295,262,282,0,282,258,311],
[275,269,259,269,268,0,240,285],
[263,294,301,284,292,310,0,325],
[245,255,244,252,239,265,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,286,292,274,282,304,290],
[269,0,268,273,260,272,282,279],
[264,282,0,267,263,268,285,282],
[258,277,283,0,256,267,296,271],
[276,290,287,294,0,281,299,274],
[268,278,282,283,269,0,302,298],
[246,268,265,254,251,248,0,275],
[260,271,268,279,276,252,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,205,252,242,303,245,250],
[299,0,242,275,308,351,252,284],
[345,308,0,232,278,291,291,272],
[298,275,318,0,270,342,348,316],
[308,242,272,280,0,335,283,347],
[247,199,259,208,215,0,230,259],
[305,298,259,202,267,320,0,224],
[300,266,278,234,203,291,326,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,293,277,288,266,251,264],
[273,0,276,263,267,279,287,262],
[257,274,0,260,272,276,269,278],
[273,287,290,0,280,294,279,267],
[262,283,278,270,0,256,258,264],
[284,271,274,256,294,0,294,282],
[299,263,281,271,292,256,0,273],
[286,288,272,283,286,268,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,280,307,290,278,287,273],
[271,0,252,276,289,255,258,259],
[270,298,0,302,275,283,284,289],
[243,274,248,0,275,257,275,254],
[260,261,275,275,0,269,278,268],
[272,295,267,293,281,0,289,285],
[263,292,266,275,272,261,0,288],
[277,291,261,296,282,265,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,280,260,262,272,281,284],
[258,0,269,277,242,269,276,257],
[270,281,0,281,258,268,267,283],
[290,273,269,0,277,275,268,279],
[288,308,292,273,0,286,286,297],
[278,281,282,275,264,0,263,279],
[269,274,283,282,264,287,0,268],
[266,293,267,271,253,271,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,263,246,259,265,256,269],
[286,0,275,280,298,274,286,301],
[287,275,0,285,270,281,276,281],
[304,270,265,0,288,275,278,265],
[291,252,280,262,0,278,271,255],
[285,276,269,275,272,0,288,284],
[294,264,274,272,279,262,0,273],
[281,249,269,285,295,266,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,260,250,275,280,321,302],
[277,0,286,271,291,269,315,278],
[290,264,0,311,330,284,282,276],
[300,279,239,0,311,255,291,280],
[275,259,220,239,0,248,232,286],
[270,281,266,295,302,0,319,311],
[229,235,268,259,318,231,0,267],
[248,272,274,270,264,239,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,304,264,299,286,283,267],
[285,0,279,275,282,296,272,279],
[246,271,0,231,273,258,261,239],
[286,275,319,0,304,274,258,279],
[251,268,277,246,0,260,265,278],
[264,254,292,276,290,0,243,307],
[267,278,289,292,285,307,0,299],
[283,271,311,271,272,243,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,275,289,254,268,211,248],
[280,0,268,307,285,259,278,282],
[275,282,0,294,261,268,256,276],
[261,243,256,0,273,268,217,250],
[296,265,289,277,0,249,231,242],
[282,291,282,282,301,0,284,250],
[339,272,294,333,319,266,0,278],
[302,268,274,300,308,300,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,284,268,261,297,272,292],
[264,0,280,281,256,290,268,289],
[266,270,0,287,256,297,264,284],
[282,269,263,0,268,306,279,274],
[289,294,294,282,0,291,261,296],
[253,260,253,244,259,0,234,274],
[278,282,286,271,289,316,0,291],
[258,261,266,276,254,276,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,320,260,255,284,326,261],
[295,0,337,289,292,325,272,295],
[230,213,0,225,267,245,253,231],
[290,261,325,0,266,289,285,261],
[295,258,283,284,0,299,300,283],
[266,225,305,261,251,0,261,255],
[224,278,297,265,250,289,0,275],
[289,255,319,289,267,295,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,288,255,272,270,255,253],
[264,0,281,232,286,268,247,254],
[262,269,0,255,269,267,233,238],
[295,318,295,0,312,300,275,297],
[278,264,281,238,0,276,254,251],
[280,282,283,250,274,0,237,267],
[295,303,317,275,296,313,0,287],
[297,296,312,253,299,283,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,236,264,268,287,290,295],
[278,0,275,276,275,286,299,309],
[314,275,0,285,285,305,329,311],
[286,274,265,0,258,293,287,311],
[282,275,265,292,0,282,287,295],
[263,264,245,257,268,0,259,290],
[260,251,221,263,263,291,0,296],
[255,241,239,239,255,260,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,305,275,286,279,247,311],
[231,0,261,254,234,256,252,263],
[245,289,0,257,268,305,282,294],
[275,296,293,0,289,295,259,304],
[264,316,282,261,0,279,274,302],
[271,294,245,255,271,0,267,278],
[303,298,268,291,276,283,0,280],
[239,287,256,246,248,272,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,280,302,279,278,276,266],
[271,0,271,278,265,256,254,255],
[270,279,0,279,282,262,272,258],
[248,272,271,0,254,258,252,246],
[271,285,268,296,0,271,277,268],
[272,294,288,292,279,0,282,280],
[274,296,278,298,273,268,0,283],
[284,295,292,304,282,270,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,288,251,281,236,269,277],
[279,0,274,278,284,254,255,279],
[262,276,0,273,256,253,263,278],
[299,272,277,0,273,279,279,297],
[269,266,294,277,0,241,257,275],
[314,296,297,271,309,0,290,300],
[281,295,287,271,293,260,0,286],
[273,271,272,253,275,250,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,275,292,248,259,257,267],
[249,0,267,276,266,235,254,240],
[275,283,0,295,253,269,234,255],
[258,274,255,0,258,255,251,235],
[302,284,297,292,0,271,269,291],
[291,315,281,295,279,0,275,281],
[293,296,316,299,281,275,0,267],
[283,310,295,315,259,269,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,344,262,274,269,294,281,319],
[206,0,247,252,215,227,257,255],
[288,303,0,283,238,275,280,279],
[276,298,267,0,226,247,245,270],
[281,335,312,324,0,266,301,300],
[256,323,275,303,284,0,281,273],
[269,293,270,305,249,269,0,299],
[231,295,271,280,250,277,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,261,261,268,270,282,266],
[263,0,245,252,292,257,275,295],
[289,305,0,270,296,280,292,279],
[289,298,280,0,303,263,305,288],
[282,258,254,247,0,253,289,284],
[280,293,270,287,297,0,290,284],
[268,275,258,245,261,260,0,268],
[284,255,271,262,266,266,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,259,283,283,275,290,270],
[312,0,295,269,281,260,265,275],
[291,255,0,274,288,284,277,290],
[267,281,276,0,283,286,285,284],
[267,269,262,267,0,261,277,272],
[275,290,266,264,289,0,287,275],
[260,285,273,265,273,263,0,263],
[280,275,260,266,278,275,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,268,288,284,327,287,307],
[286,0,281,274,264,296,302,338],
[282,269,0,289,318,305,283,339],
[262,276,261,0,244,303,261,269],
[266,286,232,306,0,301,286,323],
[223,254,245,247,249,0,250,295],
[263,248,267,289,264,300,0,335],
[243,212,211,281,227,255,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,288,226,267,282,260,240],
[247,0,238,231,206,234,242,214],
[262,312,0,284,244,264,244,206],
[324,319,266,0,249,256,312,313],
[283,344,306,301,0,241,301,249],
[268,316,286,294,309,0,303,265],
[290,308,306,238,249,247,0,257],
[310,336,344,237,301,285,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,274,278,284,294,281,278],
[250,0,267,259,261,274,270,265],
[276,283,0,243,275,281,257,268],
[272,291,307,0,285,307,288,282],
[266,289,275,265,0,290,282,261],
[256,276,269,243,260,0,263,273],
[269,280,293,262,268,287,0,261],
[272,285,282,268,289,277,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,336,288,288,266,320,276],
[240,0,266,254,263,212,265,263],
[214,284,0,251,272,232,271,262],
[262,296,299,0,290,253,301,272],
[262,287,278,260,0,280,295,273],
[284,338,318,297,270,0,298,288],
[230,285,279,249,255,252,0,229],
[274,287,288,278,277,262,321,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,289,302,258,279,278,271],
[279,0,293,273,258,252,241,247],
[261,257,0,274,256,240,231,243],
[248,277,276,0,259,255,248,265],
[292,292,294,291,0,282,279,263],
[271,298,310,295,268,0,268,309],
[272,309,319,302,271,282,0,280],
[279,303,307,285,287,241,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,284,241,256,267,242,265],
[305,0,264,301,266,294,283,298],
[266,286,0,259,271,261,277,303],
[309,249,291,0,276,251,297,339],
[294,284,279,274,0,261,284,316],
[283,256,289,299,289,0,327,311],
[308,267,273,253,266,223,0,299],
[285,252,247,211,234,239,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,277,269,245,271,271,283],
[273,0,289,283,249,282,288,285],
[273,261,0,296,254,284,270,269],
[281,267,254,0,244,291,249,278],
[305,301,296,306,0,290,275,293],
[279,268,266,259,260,0,264,311],
[279,262,280,301,275,286,0,291],
[267,265,281,272,257,239,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,284,288,292,271,298,272],
[274,0,254,267,278,263,272,254],
[266,296,0,299,277,278,279,283],
[262,283,251,0,269,264,284,279],
[258,272,273,281,0,270,261,259],
[279,287,272,286,280,0,272,269],
[252,278,271,266,289,278,0,268],
[278,296,267,271,291,281,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,282,282,275,278,276,289],
[258,0,285,279,266,275,261,271],
[268,265,0,276,268,261,266,280],
[268,271,274,0,267,268,266,287],
[275,284,282,283,0,282,274,283],
[272,275,289,282,268,0,277,280],
[274,289,284,284,276,273,0,278],
[261,279,270,263,267,270,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,278,236,265,271,273,263],
[290,0,265,238,272,274,271,267],
[272,285,0,251,276,263,282,294],
[314,312,299,0,278,280,270,309],
[285,278,274,272,0,273,284,289],
[279,276,287,270,277,0,274,284],
[277,279,268,280,266,276,0,280],
[287,283,256,241,261,266,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,279,289,284,272,277,300],
[304,0,294,288,311,285,287,270],
[271,256,0,285,305,277,263,266],
[261,262,265,0,286,257,236,246],
[266,239,245,264,0,259,283,219],
[278,265,273,293,291,0,261,240],
[273,263,287,314,267,289,0,270],
[250,280,284,304,331,310,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,281,281,254,267,277,245],
[275,0,278,273,270,285,286,239],
[269,272,0,280,242,257,270,275],
[269,277,270,0,249,268,253,264],
[296,280,308,301,0,281,285,272],
[283,265,293,282,269,0,289,268],
[273,264,280,297,265,261,0,253],
[305,311,275,286,278,282,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,272,292,286,265,295,251],
[252,0,258,286,260,272,271,257],
[278,292,0,314,279,288,284,264],
[258,264,236,0,262,259,270,242],
[264,290,271,288,0,267,276,252],
[285,278,262,291,283,0,265,280],
[255,279,266,280,274,285,0,259],
[299,293,286,308,298,270,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,264,270,254,273,252,259],
[281,0,274,276,252,280,267,285],
[286,276,0,252,260,275,256,287],
[280,274,298,0,281,295,278,269],
[296,298,290,269,0,300,287,274],
[277,270,275,255,250,0,237,258],
[298,283,294,272,263,313,0,294],
[291,265,263,281,276,292,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,285,262,292,307,277,280],
[258,0,281,262,284,284,268,269],
[265,269,0,223,296,278,270,254],
[288,288,327,0,301,298,289,252],
[258,266,254,249,0,270,251,268],
[243,266,272,252,280,0,266,265],
[273,282,280,261,299,284,0,286],
[270,281,296,298,282,285,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,262,285,277,276,270,272],
[273,0,250,266,261,279,268,286],
[288,300,0,291,272,283,282,286],
[265,284,259,0,273,272,279,291],
[273,289,278,277,0,286,277,285],
[274,271,267,278,264,0,278,267],
[280,282,268,271,273,272,0,260],
[278,264,264,259,265,283,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,284,290,269,281,284,277],
[241,0,248,253,251,258,245,248],
[266,302,0,284,272,265,269,265],
[260,297,266,0,265,286,289,261],
[281,299,278,285,0,285,268,284],
[269,292,285,264,265,0,255,267],
[266,305,281,261,282,295,0,281],
[273,302,285,289,266,283,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,286,277,241,310,302,291],
[288,0,275,303,308,317,305,268],
[264,275,0,310,255,310,277,258],
[273,247,240,0,256,248,288,277],
[309,242,295,294,0,342,276,274],
[240,233,240,302,208,0,282,295],
[248,245,273,262,274,268,0,225],
[259,282,292,273,276,255,325,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,279,277,276,272,266,283],
[259,0,275,255,264,262,264,253],
[271,275,0,262,276,277,274,269],
[273,295,288,0,289,263,286,281],
[274,286,274,261,0,268,277,274],
[278,288,273,287,282,0,268,264],
[284,286,276,264,273,282,0,278],
[267,297,281,269,276,286,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,268,250,272,257,250,278],
[276,0,253,279,260,263,257,260],
[282,297,0,274,275,260,281,286],
[300,271,276,0,271,268,286,260],
[278,290,275,279,0,264,271,289],
[293,287,290,282,286,0,271,291],
[300,293,269,264,279,279,0,271],
[272,290,264,290,261,259,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,287,299,251,238,279,271],
[274,0,303,329,250,275,296,274],
[263,247,0,298,247,227,253,257],
[251,221,252,0,239,214,251,261],
[299,300,303,311,0,260,308,281],
[312,275,323,336,290,0,305,316],
[271,254,297,299,242,245,0,254],
[279,276,293,289,269,234,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,286,282,274,279,276,285],
[265,0,268,279,277,263,239,265],
[264,282,0,283,281,271,256,279],
[268,271,267,0,280,259,262,287],
[276,273,269,270,0,276,260,279],
[271,287,279,291,274,0,249,280],
[274,311,294,288,290,301,0,299],
[265,285,271,263,271,270,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,259,277,265,262,255,233],
[316,0,281,292,294,285,267,263],
[291,269,0,260,288,268,260,248],
[273,258,290,0,256,260,260,266],
[285,256,262,294,0,256,258,250],
[288,265,282,290,294,0,282,275],
[295,283,290,290,292,268,0,263],
[317,287,302,284,300,275,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,332,302,323,295,328,290,270],
[218,0,211,324,266,241,253,232],
[248,339,0,260,268,261,269,267],
[227,226,290,0,257,287,254,298],
[255,284,282,293,0,278,288,254],
[222,309,289,263,272,0,264,254],
[260,297,281,296,262,286,0,277],
[280,318,283,252,296,296,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,276,274,285,277,274,287],
[259,0,257,268,273,270,271,265],
[274,293,0,282,282,280,282,291],
[276,282,268,0,278,274,269,295],
[265,277,268,272,0,278,267,265],
[273,280,270,276,272,0,278,293],
[276,279,268,281,283,272,0,299],
[263,285,259,255,285,257,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,291,321,338,325,309,240],
[250,0,267,310,282,323,311,284],
[259,283,0,360,316,319,310,258],
[229,240,190,0,265,275,234,232],
[212,268,234,285,0,285,318,234],
[225,227,231,275,265,0,305,261],
[241,239,240,316,232,245,0,232],
[310,266,292,318,316,289,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,265,273,258,266,272,264],
[293,0,280,280,280,275,282,282],
[285,270,0,278,281,273,281,288],
[277,270,272,0,261,285,269,296],
[292,270,269,289,0,273,285,289],
[284,275,277,265,277,0,282,283],
[278,268,269,281,265,268,0,287],
[286,268,262,254,261,267,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,273,271,270,259,248,261],
[278,0,276,278,276,280,267,265],
[277,274,0,257,275,284,265,255],
[279,272,293,0,293,249,261,265],
[280,274,275,257,0,270,282,276],
[291,270,266,301,280,0,289,283],
[302,283,285,289,268,261,0,265],
[289,285,295,285,274,267,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,297,281,292,294,267,298],
[248,0,272,264,298,265,243,265],
[253,278,0,275,260,253,277,227],
[269,286,275,0,295,288,253,263],
[258,252,290,255,0,241,248,256],
[256,285,297,262,309,0,242,263],
[283,307,273,297,302,308,0,281],
[252,285,323,287,294,287,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,237,251,252,229,247,252],
[305,0,277,284,287,280,278,275],
[313,273,0,290,263,273,286,284],
[299,266,260,0,261,255,262,272],
[298,263,287,289,0,260,283,276],
[321,270,277,295,290,0,291,289],
[303,272,264,288,267,259,0,281],
[298,275,266,278,274,261,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,292,278,282,253,224,209],
[274,0,287,224,264,254,254,246],
[258,263,0,246,249,263,248,245],
[272,326,304,0,299,292,313,275],
[268,286,301,251,0,252,270,235],
[297,296,287,258,298,0,286,258],
[326,296,302,237,280,264,0,254],
[341,304,305,275,315,292,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,222,314,313,315,358,343],
[322,0,293,340,284,224,326,327],
[328,257,0,286,328,313,356,358],
[236,210,264,0,282,253,280,326],
[237,266,222,268,0,237,282,270],
[235,326,237,297,313,0,267,252],
[192,224,194,270,268,283,0,300],
[207,223,192,224,280,298,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,262,252,273,274,266,274],
[285,0,259,255,279,255,262,268],
[288,291,0,276,295,288,266,287],
[298,295,274,0,293,293,275,283],
[277,271,255,257,0,285,250,254],
[276,295,262,257,265,0,262,257],
[284,288,284,275,300,288,0,270],
[276,282,263,267,296,293,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,279,255,270,275,279,272],
[259,0,263,253,244,273,260,282],
[271,287,0,269,263,242,281,259],
[295,297,281,0,293,297,298,254],
[280,306,287,257,0,278,293,284],
[275,277,308,253,272,0,272,270],
[271,290,269,252,257,278,0,273],
[278,268,291,296,266,280,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,272,304,314,284,256,267],
[268,0,255,257,287,295,237,231],
[278,295,0,276,315,328,300,241],
[246,293,274,0,272,297,229,271],
[236,263,235,278,0,275,244,246],
[266,255,222,253,275,0,243,263],
[294,313,250,321,306,307,0,279],
[283,319,309,279,304,287,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,273,301,298,302,295,311],
[235,0,242,273,271,268,274,281],
[277,308,0,300,292,275,308,306],
[249,277,250,0,281,262,300,310],
[252,279,258,269,0,279,277,281],
[248,282,275,288,271,0,279,289],
[255,276,242,250,273,271,0,281],
[239,269,244,240,269,261,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,277,284,263,261,287,294],
[275,0,280,263,266,292,290,292],
[273,270,0,270,291,267,278,299],
[266,287,280,0,271,266,293,279],
[287,284,259,279,0,261,285,299],
[289,258,283,284,289,0,284,277],
[263,260,272,257,265,266,0,276],
[256,258,251,271,251,273,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,228,262,232,263,254,236],
[296,0,256,264,282,270,275,282],
[322,294,0,278,300,295,281,268],
[288,286,272,0,285,286,260,272],
[318,268,250,265,0,276,271,262],
[287,280,255,264,274,0,269,263],
[296,275,269,290,279,281,0,278],
[314,268,282,278,288,287,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,280,262,275,293,305,271],
[244,0,256,290,258,288,280,267],
[270,294,0,274,273,297,280,285],
[288,260,276,0,255,285,258,279],
[275,292,277,295,0,290,285,287],
[257,262,253,265,260,0,273,296],
[245,270,270,292,265,277,0,270],
[279,283,265,271,263,254,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,290,282,295,293,276,272],
[260,0,282,273,297,268,294,260],
[260,268,0,260,280,261,259,254],
[268,277,290,0,303,287,281,277],
[255,253,270,247,0,265,270,254],
[257,282,289,263,285,0,280,269],
[274,256,291,269,280,270,0,272],
[278,290,296,273,296,281,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,310,300,298,273,316,313],
[265,0,274,283,276,278,316,305],
[240,276,0,294,255,259,290,310],
[250,267,256,0,280,254,290,275],
[252,274,295,270,0,274,295,294],
[277,272,291,296,276,0,309,317],
[234,234,260,260,255,241,0,274],
[237,245,240,275,256,233,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,287,313,274,303,276,303],
[229,0,251,288,243,261,245,257],
[263,299,0,246,303,302,238,253],
[237,262,304,0,260,255,220,257],
[276,307,247,290,0,305,270,283],
[247,289,248,295,245,0,266,279],
[274,305,312,330,280,284,0,331],
[247,293,297,293,267,271,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,261,292,267,285,269,280],
[275,0,277,275,248,312,275,246],
[289,273,0,299,265,317,279,268],
[258,275,251,0,258,262,265,250],
[283,302,285,292,0,313,312,260],
[265,238,233,288,237,0,270,219],
[281,275,271,285,238,280,0,260],
[270,304,282,300,290,331,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,279,250,256,280,261,257],
[312,0,305,267,288,320,289,307],
[271,245,0,263,273,273,269,255],
[300,283,287,0,280,282,283,260],
[294,262,277,270,0,287,264,274],
[270,230,277,268,263,0,275,245],
[289,261,281,267,286,275,0,249],
[293,243,295,290,276,305,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,269,294,282,274,279,279],
[286,0,265,272,284,279,268,273],
[281,285,0,270,283,267,302,287],
[256,278,280,0,263,268,275,260],
[268,266,267,287,0,241,286,265],
[276,271,283,282,309,0,285,275],
[271,282,248,275,264,265,0,264],
[271,277,263,290,285,275,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,276,282,282,287,296,263],
[283,0,250,261,282,260,287,245],
[274,300,0,296,272,294,293,264],
[268,289,254,0,285,280,285,269],
[268,268,278,265,0,261,287,260],
[263,290,256,270,289,0,268,281],
[254,263,257,265,263,282,0,246],
[287,305,286,281,290,269,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,244,279,270,290,274,234],
[300,0,256,303,299,289,264,289],
[306,294,0,310,267,262,261,287],
[271,247,240,0,265,277,238,248],
[280,251,283,285,0,276,281,284],
[260,261,288,273,274,0,276,240],
[276,286,289,312,269,274,0,301],
[316,261,263,302,266,310,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,252,263,283,262,264,259],
[293,0,278,286,302,272,271,280],
[298,272,0,272,294,277,275,276],
[287,264,278,0,282,277,287,276],
[267,248,256,268,0,257,266,255],
[288,278,273,273,293,0,278,258],
[286,279,275,263,284,272,0,271],
[291,270,274,274,295,292,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,276,265,275,303,268,272],
[265,0,260,279,261,275,247,267],
[274,290,0,301,257,296,281,286],
[285,271,249,0,261,286,265,269],
[275,289,293,289,0,300,273,293],
[247,275,254,264,250,0,237,248],
[282,303,269,285,277,313,0,281],
[278,283,264,281,257,302,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,275,276,302,304,257,268],
[263,0,258,260,286,258,253,278],
[275,292,0,284,281,291,287,273],
[274,290,266,0,300,268,287,280],
[248,264,269,250,0,253,237,268],
[246,292,259,282,297,0,264,263],
[293,297,263,263,313,286,0,268],
[282,272,277,270,282,287,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,297,311,279,245,240,283],
[288,0,296,316,305,273,278,305],
[253,254,0,320,328,276,239,249],
[239,234,230,0,263,234,213,244],
[271,245,222,287,0,289,223,255],
[305,277,274,316,261,0,261,262],
[310,272,311,337,327,289,0,315],
[267,245,301,306,295,288,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,264,276,280,256,242,230],
[294,0,283,292,291,273,262,271],
[286,267,0,275,288,278,259,261],
[274,258,275,0,273,267,260,242],
[270,259,262,277,0,273,260,282],
[294,277,272,283,277,0,289,260],
[308,288,291,290,290,261,0,272],
[320,279,289,308,268,290,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,281,240,251,268,285,261],
[290,0,274,290,282,285,302,265],
[269,276,0,247,263,288,285,261],
[310,260,303,0,273,303,310,275],
[299,268,287,277,0,280,292,311],
[282,265,262,247,270,0,276,290],
[265,248,265,240,258,274,0,256],
[289,285,289,275,239,260,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,226,256,228,204,209,260],
[279,0,263,305,279,255,328,329],
[324,287,0,327,302,263,247,343],
[294,245,223,0,253,234,220,306],
[322,271,248,297,0,261,266,326],
[346,295,287,316,289,0,233,353],
[341,222,303,330,284,317,0,374],
[290,221,207,244,224,197,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,286,293,306,304,251,265],
[255,0,265,260,286,290,255,305],
[264,285,0,273,284,289,276,282],
[257,290,277,0,312,322,267,283],
[244,264,266,238,0,251,271,306],
[246,260,261,228,299,0,261,257],
[299,295,274,283,279,289,0,300],
[285,245,268,267,244,293,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,268,281,278,291,274,270],
[282,0,268,272,274,289,271,269],
[282,282,0,268,276,285,260,264],
[269,278,282,0,289,298,293,286],
[272,276,274,261,0,272,278,267],
[259,261,265,252,278,0,283,254],
[276,279,290,257,272,267,0,254],
[280,281,286,264,283,296,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,265,299,283,258,270,266],
[287,0,269,287,269,275,276,295],
[285,281,0,291,284,271,293,305],
[251,263,259,0,238,243,248,269],
[267,281,266,312,0,264,295,274],
[292,275,279,307,286,0,286,303],
[280,274,257,302,255,264,0,274],
[284,255,245,281,276,247,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,264,252,270,267,238,265],
[270,0,251,256,262,269,242,274],
[286,299,0,278,280,277,273,280],
[298,294,272,0,265,281,282,283],
[280,288,270,285,0,277,267,280],
[283,281,273,269,273,0,249,286],
[312,308,277,268,283,301,0,276],
[285,276,270,267,270,264,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,289,273,327,288,312,309],
[251,0,249,257,276,295,289,283],
[261,301,0,307,305,290,303,278],
[277,293,243,0,277,277,314,281],
[223,274,245,273,0,282,283,289],
[262,255,260,273,268,0,278,286],
[238,261,247,236,267,272,0,266],
[241,267,272,269,261,264,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,278,296,286,271,280,273],
[269,0,278,272,281,268,271,266],
[272,272,0,267,273,283,287,266],
[254,278,283,0,296,280,280,281],
[264,269,277,254,0,272,267,261],
[279,282,267,270,278,0,270,271],
[270,279,263,270,283,280,0,270],
[277,284,284,269,289,279,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,289,263,306,268,297,288],
[249,0,231,264,281,250,277,234],
[261,319,0,298,292,251,294,264],
[287,286,252,0,268,279,292,280],
[244,269,258,282,0,212,271,277],
[282,300,299,271,338,0,280,284],
[253,273,256,258,279,270,0,269],
[262,316,286,270,273,266,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,293,289,300,280,282,278],
[275,0,285,284,260,270,267,289],
[257,265,0,267,267,261,267,264],
[261,266,283,0,287,273,272,269],
[250,290,283,263,0,278,273,278],
[270,280,289,277,272,0,282,277],
[268,283,283,278,277,268,0,275],
[272,261,286,281,272,273,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,282,287,287,290,290,274],
[298,0,289,289,263,289,287,281],
[268,261,0,297,270,283,297,289],
[263,261,253,0,256,293,281,269],
[263,287,280,294,0,289,308,290],
[260,261,267,257,261,0,289,261],
[260,263,253,269,242,261,0,272],
[276,269,261,281,260,289,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,295,270,302,275,288,308],
[273,0,274,286,292,284,275,312],
[255,276,0,268,289,275,288,299],
[280,264,282,0,295,273,308,293],
[248,258,261,255,0,250,273,297],
[275,266,275,277,300,0,280,293],
[262,275,262,242,277,270,0,306],
[242,238,251,257,253,257,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,302,299,278,267,278,258],
[259,0,285,270,249,273,280,250],
[248,265,0,269,255,252,266,237],
[251,280,281,0,247,231,253,254],
[272,301,295,303,0,294,271,276],
[283,277,298,319,256,0,270,275],
[272,270,284,297,279,280,0,248],
[292,300,313,296,274,275,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,283,272,264,281,287,268],
[272,0,269,256,250,296,274,260],
[267,281,0,260,276,298,282,262],
[278,294,290,0,297,294,305,269],
[286,300,274,253,0,301,301,277],
[269,254,252,256,249,0,267,248],
[263,276,268,245,249,283,0,249],
[282,290,288,281,273,302,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,210,211,243,221,237,265],
[248,0,206,256,249,199,231,267],
[340,344,0,309,318,266,323,327],
[339,294,241,0,295,283,323,275],
[307,301,232,255,0,295,248,313],
[329,351,284,267,255,0,299,293],
[313,319,227,227,302,251,0,287],
[285,283,223,275,237,257,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,263,276,276,276,290,275],
[278,0,283,300,273,268,303,282],
[287,267,0,275,292,289,281,265],
[274,250,275,0,266,262,281,268],
[274,277,258,284,0,277,284,282],
[274,282,261,288,273,0,284,274],
[260,247,269,269,266,266,0,260],
[275,268,285,282,268,276,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,275,348,414,346,414,344],
[340,0,342,275,550,342,550,341],
[275,208,0,275,345,275,276,69],
[202,275,275,0,344,67,344,274],
[136,0,205,206,0,273,274,274],
[204,208,275,483,277,0,483,274],
[136,0,274,206,276,67,0,139],
[206,209,481,276,276,276,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,266,302,255,281,278,296],
[264,0,271,271,264,268,262,282],
[284,279,0,284,286,272,288,284],
[248,279,266,0,228,268,274,274],
[295,286,264,322,0,296,269,295],
[269,282,278,282,254,0,258,276],
[272,288,262,276,281,292,0,293],
[254,268,266,276,255,274,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,281,284,305,293,276,258],
[268,0,239,265,288,276,245,270],
[269,311,0,307,296,292,265,277],
[266,285,243,0,270,268,253,251],
[245,262,254,280,0,287,261,257],
[257,274,258,282,263,0,235,250],
[274,305,285,297,289,315,0,288],
[292,280,273,299,293,300,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,272,268,269,291,277,262],
[270,0,288,269,248,284,290,238],
[278,262,0,284,277,282,245,289],
[282,281,266,0,290,305,264,272],
[281,302,273,260,0,284,280,275],
[259,266,268,245,266,0,272,263],
[273,260,305,286,270,278,0,285],
[288,312,261,278,275,287,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,287,268,281,272,253,261],
[285,0,311,264,261,272,267,252],
[263,239,0,259,256,250,259,243],
[282,286,291,0,261,267,277,263],
[269,289,294,289,0,275,290,275],
[278,278,300,283,275,0,262,249],
[297,283,291,273,260,288,0,255],
[289,298,307,287,275,301,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,255,244,261,271,238,237],
[284,0,273,266,273,266,242,274],
[295,277,0,253,263,257,264,270],
[306,284,297,0,283,261,296,292],
[289,277,287,267,0,271,258,272],
[279,284,293,289,279,0,267,273],
[312,308,286,254,292,283,0,302],
[313,276,280,258,278,277,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,164,220,164,220,220,275],
[331,0,275,330,276,329,275,330],
[386,275,0,440,165,331,275,332],
[330,220,110,0,165,275,109,166],
[386,274,385,385,0,330,384,275],
[330,221,219,275,220,0,220,220],
[330,275,275,441,166,330,0,330],
[275,220,218,384,275,330,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,292,304,275,298,309,302],
[225,0,230,287,238,267,267,261],
[258,320,0,291,271,291,288,287],
[246,263,259,0,252,269,247,244],
[275,312,279,298,0,278,264,308],
[252,283,259,281,272,0,267,240],
[241,283,262,303,286,283,0,288],
[248,289,263,306,242,310,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,265,280,305,292,281,284],
[278,0,252,290,322,262,293,292],
[285,298,0,296,295,271,296,300],
[270,260,254,0,281,267,278,290],
[245,228,255,269,0,247,255,265],
[258,288,279,283,303,0,277,269],
[269,257,254,272,295,273,0,282],
[266,258,250,260,285,281,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,306,312,273,287,293,288],
[250,0,309,296,271,262,263,290],
[244,241,0,281,271,254,245,265],
[238,254,269,0,273,273,255,262],
[277,279,279,277,0,284,286,271],
[263,288,296,277,266,0,293,262],
[257,287,305,295,264,257,0,257],
[262,260,285,288,279,288,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,270,296,264,271,282,282],
[254,0,266,277,269,275,278,275],
[280,284,0,274,284,264,291,291],
[254,273,276,0,247,275,280,290],
[286,281,266,303,0,279,288,300],
[279,275,286,275,271,0,284,288],
[268,272,259,270,262,266,0,279],
[268,275,259,260,250,262,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,255,284,287,269,283,286],
[259,0,246,279,260,265,273,283],
[295,304,0,292,278,271,278,290],
[266,271,258,0,249,264,268,271],
[263,290,272,301,0,277,277,301],
[281,285,279,286,273,0,284,280],
[267,277,272,282,273,266,0,280],
[264,267,260,279,249,270,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,266,268,281,285,280,267],
[279,0,274,293,280,281,264,252],
[284,276,0,269,262,299,292,276],
[282,257,281,0,276,270,281,253],
[269,270,288,274,0,267,275,251],
[265,269,251,280,283,0,277,264],
[270,286,258,269,275,273,0,260],
[283,298,274,297,299,286,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,278,276,297,262,288,278],
[275,0,294,291,286,277,289,264],
[272,256,0,282,272,263,259,249],
[274,259,268,0,272,257,266,260],
[253,264,278,278,0,260,279,267],
[288,273,287,293,290,0,278,282],
[262,261,291,284,271,272,0,282],
[272,286,301,290,283,268,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,282,291,260,266,269,270],
[286,0,268,308,269,284,274,266],
[268,282,0,277,253,259,266,260],
[259,242,273,0,271,247,269,263],
[290,281,297,279,0,269,276,274],
[284,266,291,303,281,0,278,261],
[281,276,284,281,274,272,0,280],
[280,284,290,287,276,289,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,274,271,279,288,275,263],
[271,0,264,272,271,286,269,259],
[276,286,0,286,262,288,294,280],
[279,278,264,0,260,276,291,248],
[271,279,288,290,0,290,286,283],
[262,264,262,274,260,0,279,266],
[275,281,256,259,264,271,0,249],
[287,291,270,302,267,284,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,284,291,278,315,280,302],
[278,0,287,278,272,295,273,285],
[266,263,0,297,266,280,267,285],
[259,272,253,0,253,271,257,267],
[272,278,284,297,0,313,280,277],
[235,255,270,279,237,0,253,255],
[270,277,283,293,270,297,0,295],
[248,265,265,283,273,295,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,291,275,285,304,277,274],
[270,0,281,288,265,292,265,251],
[259,269,0,278,269,280,276,267],
[275,262,272,0,264,279,283,274],
[265,285,281,286,0,288,282,286],
[246,258,270,271,262,0,257,253],
[273,285,274,267,268,293,0,272],
[276,299,283,276,264,297,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,275,279,281,292,277,265],
[270,0,281,264,275,266,270,259],
[275,269,0,280,292,277,267,263],
[271,286,270,0,273,284,289,280],
[269,275,258,277,0,284,275,272],
[258,284,273,266,266,0,276,284],
[273,280,283,261,275,274,0,266],
[285,291,287,270,278,266,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,235,290,223,287,269,329],
[303,0,263,276,212,270,287,308],
[315,287,0,270,262,280,298,285],
[260,274,280,0,300,289,246,315],
[327,338,288,250,0,349,304,303],
[263,280,270,261,201,0,226,281],
[281,263,252,304,246,324,0,275],
[221,242,265,235,247,269,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,275,297,289,293,297,314],
[269,0,288,265,267,267,307,285],
[275,262,0,288,288,278,307,289],
[253,285,262,0,289,256,305,314],
[261,283,262,261,0,269,256,308],
[257,283,272,294,281,0,288,282],
[253,243,243,245,294,262,0,255],
[236,265,261,236,242,268,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,272,268,283,286,299,291],
[251,0,277,270,296,275,270,292],
[278,273,0,277,306,274,285,300],
[282,280,273,0,307,270,298,283],
[267,254,244,243,0,257,287,270],
[264,275,276,280,293,0,288,300],
[251,280,265,252,263,262,0,274],
[259,258,250,267,280,250,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,274,264,256,290,268,281],
[270,0,294,292,290,303,269,303],
[276,256,0,288,281,291,262,281],
[286,258,262,0,267,297,247,282],
[294,260,269,283,0,280,283,293],
[260,247,259,253,270,0,272,263],
[282,281,288,303,267,278,0,288],
[269,247,269,268,257,287,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,250,242,280,264,292,268],
[296,0,282,272,273,277,278,277],
[300,268,0,285,289,261,302,283],
[308,278,265,0,280,294,300,291],
[270,277,261,270,0,242,295,286],
[286,273,289,256,308,0,292,287],
[258,272,248,250,255,258,0,267],
[282,273,267,259,264,263,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,272,262,262,274,285,277],
[281,0,290,265,263,276,288,259],
[278,260,0,266,264,272,285,253],
[288,285,284,0,260,278,304,261],
[288,287,286,290,0,279,283,256],
[276,274,278,272,271,0,266,261],
[265,262,265,246,267,284,0,250],
[273,291,297,289,294,289,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,289,285,271,248,295,295],
[253,0,250,263,246,253,252,259],
[261,300,0,282,263,287,274,288],
[265,287,268,0,277,267,276,286],
[279,304,287,273,0,276,298,268],
[302,297,263,283,274,0,276,296],
[255,298,276,274,252,274,0,285],
[255,291,262,264,282,254,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,270,270,257,271,268,267],
[281,0,283,275,270,252,295,290],
[280,267,0,265,244,284,271,264],
[280,275,285,0,274,294,300,265],
[293,280,306,276,0,284,292,268],
[279,298,266,256,266,0,260,269],
[282,255,279,250,258,290,0,259],
[283,260,286,285,282,281,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,286,297,267,282,283,292],
[279,0,266,311,288,288,290,298],
[264,284,0,293,268,272,279,295],
[253,239,257,0,271,251,259,258],
[283,262,282,279,0,271,292,275],
[268,262,278,299,279,0,296,264],
[267,260,271,291,258,254,0,278],
[258,252,255,292,275,286,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,246,245,245,306,245,307],
[245,0,305,306,367,183,305,367],
[304,245,0,306,305,304,303,307],
[305,244,244,0,244,243,365,306],
[305,183,245,306,0,245,366,246],
[244,367,246,307,305,0,306,244],
[305,245,247,185,184,244,0,124],
[243,183,243,244,304,306,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,281,282,283,317,267,292],
[262,0,235,257,264,281,243,254],
[269,315,0,317,293,319,279,304],
[268,293,233,0,228,278,225,245],
[267,286,257,322,0,284,243,283],
[233,269,231,272,266,0,266,282],
[283,307,271,325,307,284,0,325],
[258,296,246,305,267,268,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,323,267,279,306,299,279],
[254,0,281,280,281,279,258,233],
[227,269,0,257,242,251,259,245],
[283,270,293,0,289,273,284,257],
[271,269,308,261,0,270,255,255],
[244,271,299,277,280,0,257,257],
[251,292,291,266,295,293,0,260],
[271,317,305,293,295,293,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,282,289,298,268,264,258],
[296,0,324,292,316,272,291,290],
[268,226,0,256,253,237,252,242],
[261,258,294,0,284,263,250,265],
[252,234,297,266,0,249,263,244],
[282,278,313,287,301,0,292,265],
[286,259,298,300,287,258,0,269],
[292,260,308,285,306,285,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,280,300,295,288,289,283],
[276,0,263,288,272,267,284,270],
[270,287,0,300,289,278,283,263],
[250,262,250,0,250,261,255,265],
[255,278,261,300,0,272,283,268],
[262,283,272,289,278,0,275,272],
[261,266,267,295,267,275,0,270],
[267,280,287,285,282,278,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,242,290,279,249,261,285],
[237,0,195,216,185,216,287,260],
[308,355,0,306,275,316,298,337],
[260,334,244,0,267,251,247,283],
[271,365,275,283,0,325,288,318],
[301,334,234,299,225,0,265,289],
[289,263,252,303,262,285,0,293],
[265,290,213,267,232,261,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,288,311,285,269,281,255],
[270,0,262,298,271,250,258,252],
[262,288,0,290,275,298,294,289],
[239,252,260,0,261,260,250,241],
[265,279,275,289,0,285,255,262],
[281,300,252,290,265,0,258,295],
[269,292,256,300,295,292,0,299],
[295,298,261,309,288,255,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,272,283,288,254,280,266],
[268,0,281,281,285,269,268,274],
[278,269,0,280,292,274,291,279],
[267,269,270,0,279,252,284,263],
[262,265,258,271,0,262,262,269],
[296,281,276,298,288,0,300,272],
[270,282,259,266,288,250,0,261],
[284,276,271,287,281,278,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,260,282,266,259,287,256],
[299,0,267,296,283,284,304,283],
[290,283,0,299,291,275,306,285],
[268,254,251,0,267,251,265,260],
[284,267,259,283,0,275,296,283],
[291,266,275,299,275,0,312,269],
[263,246,244,285,254,238,0,246],
[294,267,265,290,267,281,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,260,230,255,300,310,291],
[273,0,255,280,263,264,267,286],
[290,295,0,259,308,303,296,285],
[320,270,291,0,296,269,337,290],
[295,287,242,254,0,287,280,289],
[250,286,247,281,263,0,296,311],
[240,283,254,213,270,254,0,312],
[259,264,265,260,261,239,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,269,284,302,302,291,259],
[286,0,282,265,293,287,296,276],
[281,268,0,270,294,291,267,258],
[266,285,280,0,297,292,265,278],
[248,257,256,253,0,278,269,277],
[248,263,259,258,272,0,268,255],
[259,254,283,285,281,282,0,260],
[291,274,292,272,273,295,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,305,304,281,294,273,286],
[251,0,264,268,289,281,255,273],
[245,286,0,277,257,272,244,289],
[246,282,273,0,267,268,252,269],
[269,261,293,283,0,278,281,276],
[256,269,278,282,272,0,255,278],
[277,295,306,298,269,295,0,293],
[264,277,261,281,274,272,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,265,250,273,259,264,266],
[294,0,291,275,286,282,269,288],
[285,259,0,288,275,273,287,257],
[300,275,262,0,287,280,274,267],
[277,264,275,263,0,253,269,266],
[291,268,277,270,297,0,305,281],
[286,281,263,276,281,245,0,260],
[284,262,293,283,284,269,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,276,277,308,283,266,251],
[295,0,271,278,313,298,265,258],
[274,279,0,267,285,277,265,240],
[273,272,283,0,323,277,267,279],
[242,237,265,227,0,231,236,228],
[267,252,273,273,319,0,250,240],
[284,285,285,283,314,300,0,265],
[299,292,310,271,322,310,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,275,275,273,267,253,263],
[294,0,294,271,285,283,276,281],
[275,256,0,264,273,249,277,260],
[275,279,286,0,274,297,285,272],
[277,265,277,276,0,260,260,268],
[283,267,301,253,290,0,265,283],
[297,274,273,265,290,285,0,275],
[287,269,290,278,282,267,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,252,271,299,267,260,252],
[300,0,307,287,329,281,274,285],
[298,243,0,306,298,278,263,292],
[279,263,244,0,279,287,249,268],
[251,221,252,271,0,232,253,256],
[283,269,272,263,318,0,243,272],
[290,276,287,301,297,307,0,265],
[298,265,258,282,294,278,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,285,264,274,275,261,251],
[269,0,269,266,258,276,254,256],
[265,281,0,258,265,266,264,245],
[286,284,292,0,281,275,261,275],
[276,292,285,269,0,284,267,261],
[275,274,284,275,266,0,275,254],
[289,296,286,289,283,275,0,269],
[299,294,305,275,289,296,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,268,255,274,281,279,275],
[275,0,265,245,269,287,257,250],
[282,285,0,236,286,276,273,262],
[295,305,314,0,270,283,295,302],
[276,281,264,280,0,286,297,290],
[269,263,274,267,264,0,267,280],
[271,293,277,255,253,283,0,280],
[275,300,288,248,260,270,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,270,304,284,274,302,265],
[266,0,271,295,277,289,298,281],
[280,279,0,288,290,263,289,270],
[246,255,262,0,274,259,291,273],
[266,273,260,276,0,262,286,261],
[276,261,287,291,288,0,285,275],
[248,252,261,259,264,265,0,280],
[285,269,280,277,289,275,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,252,248,247,242,264,283],
[302,0,284,257,279,291,296,302],
[298,266,0,262,262,257,265,286],
[302,293,288,0,277,256,323,337],
[303,271,288,273,0,272,303,288],
[308,259,293,294,278,0,337,334],
[286,254,285,227,247,213,0,267],
[267,248,264,213,262,216,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,259,253,255,263,264,252],
[303,0,275,265,255,274,272,274],
[291,275,0,274,265,271,275,276],
[297,285,276,0,274,274,281,270],
[295,295,285,276,0,284,279,268],
[287,276,279,276,266,0,273,276],
[286,278,275,269,271,277,0,281],
[298,276,274,280,282,274,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,283,289,302,277,256,278],
[256,0,276,266,275,266,262,271],
[267,274,0,283,288,259,259,284],
[261,284,267,0,291,267,256,277],
[248,275,262,259,0,279,277,279],
[273,284,291,283,271,0,260,291],
[294,288,291,294,273,290,0,287],
[272,279,266,273,271,259,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,245,259,295,255,259,299],
[269,0,279,276,307,266,271,290],
[305,271,0,292,294,301,286,285],
[291,274,258,0,281,280,266,288],
[255,243,256,269,0,247,269,297],
[295,284,249,270,303,0,264,305],
[291,279,264,284,281,286,0,314],
[251,260,265,262,253,245,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,296,289,294,288,300,278],
[284,0,280,284,288,286,265,280],
[254,270,0,273,273,268,263,266],
[261,266,277,0,268,281,267,270],
[256,262,277,282,0,287,262,255],
[262,264,282,269,263,0,260,268],
[250,285,287,283,288,290,0,284],
[272,270,284,280,295,282,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,307,292,284,282,260,286],
[268,0,279,278,261,284,275,270],
[243,271,0,268,290,284,243,287],
[258,272,282,0,255,281,256,270],
[266,289,260,295,0,282,237,278],
[268,266,266,269,268,0,232,276],
[290,275,307,294,313,318,0,303],
[264,280,263,280,272,274,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,246,262,281,271,259,263],
[278,0,274,281,272,299,287,250],
[304,276,0,278,270,298,288,265],
[288,269,272,0,275,284,288,266],
[269,278,280,275,0,296,277,273],
[279,251,252,266,254,0,260,250],
[291,263,262,262,273,290,0,280],
[287,300,285,284,277,300,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,284,278,271,273,281,287],
[266,0,267,262,263,267,268,257],
[266,283,0,259,251,243,267,263],
[272,288,291,0,271,279,278,273],
[279,287,299,279,0,270,270,283],
[277,283,307,271,280,0,285,247],
[269,282,283,272,280,265,0,268],
[263,293,287,277,267,303,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,253,279,270,250,274,271],
[264,0,276,273,269,256,262,253],
[297,274,0,283,266,254,256,277],
[271,277,267,0,278,266,264,287],
[280,281,284,272,0,275,275,284],
[300,294,296,284,275,0,277,275],
[276,288,294,286,275,273,0,291],
[279,297,273,263,266,275,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,284,275,271,276,261,270],
[283,0,271,270,259,263,279,261],
[266,279,0,269,264,268,269,283],
[275,280,281,0,272,272,275,261],
[279,291,286,278,0,286,268,282],
[274,287,282,278,264,0,261,275],
[289,271,281,275,282,289,0,284],
[280,289,267,289,268,275,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,287,264,264,306,279,279],
[266,0,254,266,253,278,243,285],
[263,296,0,293,291,302,290,283],
[286,284,257,0,286,292,282,273],
[286,297,259,264,0,299,277,276],
[244,272,248,258,251,0,250,237],
[271,307,260,268,273,300,0,277],
[271,265,267,277,274,313,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,272,270,266,278,283,258],
[286,0,261,281,274,291,295,275],
[278,289,0,294,278,289,297,261],
[280,269,256,0,258,287,262,259],
[284,276,272,292,0,283,273,273],
[272,259,261,263,267,0,274,254],
[267,255,253,288,277,276,0,246],
[292,275,289,291,277,296,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,258,276,262,260,252,257],
[269,0,255,270,272,265,267,277],
[292,295,0,289,287,289,267,280],
[274,280,261,0,264,265,259,273],
[288,278,263,286,0,270,278,279],
[290,285,261,285,280,0,247,268],
[298,283,283,291,272,303,0,288],
[293,273,270,277,271,282,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,266,251,259,254,264,276],
[290,0,288,269,259,257,255,253],
[284,262,0,299,247,257,272,273],
[299,281,251,0,283,254,285,262],
[291,291,303,267,0,275,295,277],
[296,293,293,296,275,0,295,291],
[286,295,278,265,255,255,0,267],
[274,297,277,288,273,259,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,137,274,413,204,207,276],
[481,0,277,412,481,412,274,413],
[413,273,0,273,413,204,274,276],
[276,138,277,0,550,343,275,413],
[137,69,137,0,0,204,137,207],
[346,138,346,207,346,0,138,278],
[343,276,276,275,413,412,0,276],
[274,137,274,137,343,272,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,274,258,285,282,278,294],
[289,0,270,268,254,289,279,296],
[276,280,0,266,278,277,279,295],
[292,282,284,0,291,275,265,287],
[265,296,272,259,0,279,285,279],
[268,261,273,275,271,0,277,281],
[272,271,271,285,265,273,0,282],
[256,254,255,263,271,269,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,258,297,265,248,261,284],
[278,0,268,266,283,279,270,286],
[292,282,0,277,279,273,287,317],
[253,284,273,0,290,289,279,303],
[285,267,271,260,0,260,243,289],
[302,271,277,261,290,0,285,310],
[289,280,263,271,307,265,0,274],
[266,264,233,247,261,240,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,271,278,302,280,269,275],
[243,0,274,270,275,257,268,288],
[279,276,0,267,275,299,294,272],
[272,280,283,0,314,291,296,292],
[248,275,275,236,0,277,265,272],
[270,293,251,259,273,0,277,282],
[281,282,256,254,285,273,0,271],
[275,262,278,258,278,268,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,280,287,270,298,282,260],
[272,0,268,286,269,276,253,257],
[270,282,0,272,276,287,281,275],
[263,264,278,0,292,295,267,256],
[280,281,274,258,0,279,279,282],
[252,274,263,255,271,0,259,243],
[268,297,269,283,271,291,0,267],
[290,293,275,294,268,307,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,306,276,291,270,296,300],
[240,0,275,253,263,262,272,247],
[244,275,0,271,286,272,269,247],
[274,297,279,0,258,262,278,259],
[259,287,264,292,0,241,261,266],
[280,288,278,288,309,0,263,264],
[254,278,281,272,289,287,0,270],
[250,303,303,291,284,286,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,287,306,266,246,263,308],
[352,0,305,305,332,311,262,307],
[263,245,0,328,289,266,201,220],
[244,245,222,0,285,290,248,262],
[284,218,261,265,0,240,264,240],
[304,239,284,260,310,0,283,238],
[287,288,349,302,286,267,0,217],
[242,243,330,288,310,312,333,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,272,240,265,283,246,277],
[263,0,270,246,251,287,255,272],
[278,280,0,265,263,293,277,299],
[310,304,285,0,285,318,270,296],
[285,299,287,265,0,304,264,283],
[267,263,257,232,246,0,254,273],
[304,295,273,280,286,296,0,302],
[273,278,251,254,267,277,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,268,272,279,281,290,277],
[281,0,279,271,271,275,281,273],
[282,271,0,276,278,274,292,275],
[278,279,274,0,266,276,276,283],
[271,279,272,284,0,274,272,283],
[269,275,276,274,276,0,269,276],
[260,269,258,274,278,281,0,266],
[273,277,275,267,267,274,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,282,275,267,269,302,266],
[286,0,270,287,293,302,317,289],
[268,280,0,282,274,292,311,258],
[275,263,268,0,258,294,321,272],
[283,257,276,292,0,281,321,269],
[281,248,258,256,269,0,314,254],
[248,233,239,229,229,236,0,229],
[284,261,292,278,281,296,321,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,273,256,276,255,285,285],
[305,0,275,276,285,272,281,280],
[277,275,0,267,282,279,286,292],
[294,274,283,0,308,277,295,282],
[274,265,268,242,0,259,273,285],
[295,278,271,273,291,0,285,288],
[265,269,264,255,277,265,0,265],
[265,270,258,268,265,262,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,308,280,295,287,302,291],
[276,0,300,265,296,297,279,295],
[242,250,0,243,254,272,254,233],
[270,285,307,0,305,270,276,281],
[255,254,296,245,0,268,265,268],
[263,253,278,280,282,0,282,278],
[248,271,296,274,285,268,0,271],
[259,255,317,269,282,272,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,290,271,272,293,271,307],
[271,0,306,290,285,317,310,306],
[260,244,0,275,247,287,272,286],
[279,260,275,0,268,303,288,296],
[278,265,303,282,0,318,278,292],
[257,233,263,247,232,0,229,270],
[279,240,278,262,272,321,0,272],
[243,244,264,254,258,280,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,269,282,297,290,288,268],
[262,0,284,260,284,280,277,266],
[281,266,0,293,292,278,286,285],
[268,290,257,0,321,275,268,272],
[253,266,258,229,0,260,252,252],
[260,270,272,275,290,0,278,289],
[262,273,264,282,298,272,0,265],
[282,284,265,278,298,261,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,277,255,389,356,290,260],
[245,0,264,280,339,340,247,246],
[273,286,0,339,354,353,353,309],
[295,270,211,0,307,336,289,244],
[161,211,196,243,0,306,197,181],
[194,210,197,214,244,0,243,234],
[260,303,197,261,353,307,0,262],
[290,304,241,306,369,316,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,262,278,296,275,286,297],
[274,0,257,242,296,274,262,269],
[288,293,0,280,280,304,261,282],
[272,308,270,0,304,299,284,296],
[254,254,270,246,0,266,271,295],
[275,276,246,251,284,0,252,304],
[264,288,289,266,279,298,0,312],
[253,281,268,254,255,246,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,269,269,290,269,271,268],
[299,0,275,250,299,285,288,281],
[281,275,0,262,279,271,283,288],
[281,300,288,0,293,273,295,275],
[260,251,271,257,0,281,269,281],
[281,265,279,277,269,0,278,284],
[279,262,267,255,281,272,0,274],
[282,269,262,275,269,266,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,289,275,258,283,315,294],
[249,0,301,261,264,264,298,298],
[261,249,0,240,279,257,295,316],
[275,289,310,0,284,287,329,333],
[292,286,271,266,0,259,276,299],
[267,286,293,263,291,0,275,327],
[235,252,255,221,274,275,0,300],
[256,252,234,217,251,223,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,278,279,269,300,287,297],
[257,0,253,270,256,274,260,248],
[272,297,0,285,274,308,276,269],
[271,280,265,0,270,305,260,245],
[281,294,276,280,0,296,280,271],
[250,276,242,245,254,0,251,246],
[263,290,274,290,270,299,0,267],
[253,302,281,305,279,304,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,278,298,306,313,276,272],
[252,0,276,290,283,295,258,260],
[272,274,0,308,301,298,278,272],
[252,260,242,0,278,273,245,277],
[244,267,249,272,0,286,264,262],
[237,255,252,277,264,0,257,262],
[274,292,272,305,286,293,0,277],
[278,290,278,273,288,288,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,261,212,274,285,244,171],
[265,0,232,307,247,244,259,152],
[289,318,0,255,320,301,251,228],
[338,243,295,0,339,338,303,275],
[276,303,230,211,0,268,227,195],
[265,306,249,212,282,0,227,107],
[306,291,299,247,323,323,0,258],
[379,398,322,275,355,443,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,265,317,314,259,300,234],
[234,0,267,253,281,312,286,232],
[285,283,0,268,269,299,301,248],
[233,297,282,0,247,263,281,231],
[236,269,281,303,0,277,401,282],
[291,238,251,287,273,0,289,203],
[250,264,249,269,149,261,0,246],
[316,318,302,319,268,347,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,268,261,276,252,252,256],
[288,0,265,271,275,265,273,272],
[282,285,0,279,284,274,285,243],
[289,279,271,0,290,281,293,276],
[274,275,266,260,0,270,268,267],
[298,285,276,269,280,0,283,264],
[298,277,265,257,282,267,0,260],
[294,278,307,274,283,286,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,268,269,255,243,279,268],
[293,0,289,292,282,242,281,265],
[282,261,0,244,251,255,259,257],
[281,258,306,0,271,277,284,264],
[295,268,299,279,0,247,293,269],
[307,308,295,273,303,0,282,277],
[271,269,291,266,257,268,0,247],
[282,285,293,286,281,273,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,289,293,252,262,285,244],
[287,0,277,279,273,282,313,276],
[261,273,0,299,265,278,326,285],
[257,271,251,0,277,282,233,242],
[298,277,285,273,0,304,276,252],
[288,268,272,268,246,0,243,246],
[265,237,224,317,274,307,0,261],
[306,274,265,308,298,304,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,271,293,259,258,277,267],
[286,0,270,280,250,272,263,272],
[279,280,0,272,254,283,270,273],
[257,270,278,0,252,254,257,268],
[291,300,296,298,0,274,289,270],
[292,278,267,296,276,0,280,285],
[273,287,280,293,261,270,0,273],
[283,278,277,282,280,265,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,282,277,271,281,276,255],
[268,0,280,273,303,276,295,268],
[268,270,0,256,282,277,265,276],
[273,277,294,0,313,294,279,300],
[279,247,268,237,0,277,252,262],
[269,274,273,256,273,0,294,279],
[274,255,285,271,298,256,0,275],
[295,282,274,250,288,271,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,211,208,209,254,299,301],
[302,0,278,232,280,280,324,257],
[339,272,0,251,275,271,367,366],
[342,318,299,0,275,319,365,275],
[341,270,275,275,0,274,344,367],
[296,270,279,231,276,0,252,273],
[251,226,183,185,206,298,0,322],
[249,293,184,275,183,277,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,271,297,296,277,320,266],
[274,0,287,326,317,264,312,325],
[279,263,0,295,296,298,294,291],
[253,224,255,0,251,241,237,254],
[254,233,254,299,0,239,279,284],
[273,286,252,309,311,0,292,281],
[230,238,256,313,271,258,0,272],
[284,225,259,296,266,269,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,286,280,273,252,262,263],
[296,0,288,284,286,271,293,277],
[264,262,0,271,246,253,269,272],
[270,266,279,0,270,253,270,271],
[277,264,304,280,0,281,278,265],
[298,279,297,297,269,0,282,284],
[288,257,281,280,272,268,0,283],
[287,273,278,279,285,266,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,286,283,268,252,261,270],
[262,0,261,250,259,227,251,229],
[264,289,0,267,279,280,245,279],
[267,300,283,0,272,275,263,267],
[282,291,271,278,0,273,279,274],
[298,323,270,275,277,0,279,276],
[289,299,305,287,271,271,0,285],
[280,321,271,283,276,274,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,267,279,252,271,241,254],
[295,0,280,292,274,286,295,295],
[283,270,0,276,290,276,282,274],
[271,258,274,0,278,268,260,282],
[298,276,260,272,0,284,281,280],
[279,264,274,282,266,0,276,280],
[309,255,268,290,269,274,0,275],
[296,255,276,268,270,270,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,282,299,278,276,283,271],
[285,0,278,286,297,293,274,296],
[268,272,0,281,267,286,256,284],
[251,264,269,0,282,269,267,253],
[272,253,283,268,0,266,266,273],
[274,257,264,281,284,0,277,277],
[267,276,294,283,284,273,0,299],
[279,254,266,297,277,273,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,271,272,249,257,242,247],
[292,0,242,281,243,258,284,276],
[279,308,0,267,281,283,268,272],
[278,269,283,0,248,286,285,287],
[301,307,269,302,0,280,299,297],
[293,292,267,264,270,0,249,293],
[308,266,282,265,251,301,0,268],
[303,274,278,263,253,257,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,267,250,309,286,254,247],
[348,0,270,314,308,260,244,256],
[283,280,0,228,293,239,301,223],
[300,236,322,0,286,310,323,278],
[241,242,257,264,0,252,234,250],
[264,290,311,240,298,0,298,283],
[296,306,249,227,316,252,0,246],
[303,294,327,272,300,267,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,243,245,281,290,287,249],
[259,0,280,276,292,318,329,254],
[307,270,0,304,334,254,293,259],
[305,274,246,0,290,288,298,238],
[269,258,216,260,0,267,253,211],
[260,232,296,262,283,0,272,283],
[263,221,257,252,297,278,0,234],
[301,296,291,312,339,267,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,279,252,280,277,278,272],
[267,0,282,265,275,269,263,283],
[271,268,0,271,274,285,263,286],
[298,285,279,0,275,286,260,279],
[270,275,276,275,0,274,269,257],
[273,281,265,264,276,0,256,267],
[272,287,287,290,281,294,0,279],
[278,267,264,271,293,283,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,318,270,279,301,265,292],
[247,0,267,278,254,253,266,245],
[232,283,0,233,267,247,251,248],
[280,272,317,0,264,276,273,263],
[271,296,283,286,0,291,256,267],
[249,297,303,274,259,0,262,276],
[285,284,299,277,294,288,0,255],
[258,305,302,287,283,274,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,262,250,263,287,253,267],
[288,0,291,278,270,272,275,304],
[288,259,0,277,280,283,284,286],
[300,272,273,0,265,302,279,272],
[287,280,270,285,0,284,273,259],
[263,278,267,248,266,0,274,246],
[297,275,266,271,277,276,0,269],
[283,246,264,278,291,304,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,316,277,278,278,242,262],
[276,0,318,293,267,314,249,250],
[234,232,0,236,266,238,229,215],
[273,257,314,0,267,283,248,268],
[272,283,284,283,0,299,288,245],
[272,236,312,267,251,0,230,275],
[308,301,321,302,262,320,0,276],
[288,300,335,282,305,275,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,294,307,288,280,283,275],
[239,0,285,251,260,255,243,279],
[256,265,0,258,273,252,236,256],
[243,299,292,0,292,266,272,280],
[262,290,277,258,0,265,252,280],
[270,295,298,284,285,0,282,285],
[267,307,314,278,298,268,0,302],
[275,271,294,270,270,265,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,299,274,278,263,276,295],
[259,0,291,290,284,278,274,296],
[251,259,0,289,282,269,272,297],
[276,260,261,0,289,273,274,307],
[272,266,268,261,0,268,261,298],
[287,272,281,277,282,0,271,295],
[274,276,278,276,289,279,0,308],
[255,254,253,243,252,255,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,273,273,278,262,280,300],
[256,0,267,263,285,278,274,287],
[277,283,0,265,276,265,270,303],
[277,287,285,0,276,272,277,294],
[272,265,274,274,0,271,271,292],
[288,272,285,278,279,0,273,302],
[270,276,280,273,279,277,0,295],
[250,263,247,256,258,248,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,268,289,277,233,258,249],
[269,0,296,256,285,275,261,280],
[282,254,0,264,256,264,271,254],
[261,294,286,0,270,292,255,272],
[273,265,294,280,0,275,270,268],
[317,275,286,258,275,0,268,261],
[292,289,279,295,280,282,0,264],
[301,270,296,278,282,289,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,224,263,278,247,272,224,264],
[326,0,280,297,274,312,280,283],
[287,270,0,252,255,295,248,313],
[272,253,298,0,267,283,263,280],
[303,276,295,283,0,325,266,287],
[278,238,255,267,225,0,262,244],
[326,270,302,287,284,288,0,339],
[286,267,237,270,263,306,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,290,281,288,305,288,271],
[261,0,270,265,276,291,255,269],
[260,280,0,272,292,287,273,270],
[269,285,278,0,285,294,276,272],
[262,274,258,265,0,291,271,246],
[245,259,263,256,259,0,261,259],
[262,295,277,274,279,289,0,275],
[279,281,280,278,304,291,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,272,270,276,275,270,289],
[283,0,288,276,275,267,280,299],
[278,262,0,276,281,289,282,279],
[280,274,274,0,279,277,283,282],
[274,275,269,271,0,276,289,260],
[275,283,261,273,274,0,273,287],
[280,270,268,267,261,277,0,275],
[261,251,271,268,290,263,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,285,268,245,275,293,257],
[274,0,297,272,281,272,293,280],
[265,253,0,263,254,278,276,247],
[282,278,287,0,260,265,279,269],
[305,269,296,290,0,289,304,291],
[275,278,272,285,261,0,279,280],
[257,257,274,271,246,271,0,267],
[293,270,303,281,259,270,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,268,288,258,260,272,290],
[259,0,268,281,275,283,288,307],
[282,282,0,299,274,282,271,277],
[262,269,251,0,240,252,249,281],
[292,275,276,310,0,271,278,292],
[290,267,268,298,279,0,276,293],
[278,262,279,301,272,274,0,272],
[260,243,273,269,258,257,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,277,271,284,303,298,281],
[302,0,312,287,267,303,300,259],
[273,238,0,257,283,260,266,250],
[279,263,293,0,273,291,299,260],
[266,283,267,277,0,284,285,277],
[247,247,290,259,266,0,300,258],
[252,250,284,251,265,250,0,260],
[269,291,300,290,273,292,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,286,296,265,287,303,277],
[278,0,257,279,263,288,273,276],
[264,293,0,285,275,270,300,289],
[254,271,265,0,250,262,275,271],
[285,287,275,300,0,291,279,280],
[263,262,280,288,259,0,288,287],
[247,277,250,275,271,262,0,268],
[273,274,261,279,270,263,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,277,273,280,266,293,277],
[282,0,290,280,288,274,273,283],
[273,260,0,271,273,270,272,280],
[277,270,279,0,261,280,269,265],
[270,262,277,289,0,288,292,271],
[284,276,280,270,262,0,297,264],
[257,277,278,281,258,253,0,287],
[273,267,270,285,279,286,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,291,269,300,288,283,290],
[275,0,267,320,303,286,299,293],
[259,283,0,276,288,269,262,279],
[281,230,274,0,244,257,294,263],
[250,247,262,306,0,263,296,286],
[262,264,281,293,287,0,273,281],
[267,251,288,256,254,277,0,286],
[260,257,271,287,264,269,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,309,310,275,292,303,332],
[231,0,239,280,235,222,261,260],
[241,311,0,286,253,266,317,287],
[240,270,264,0,230,277,273,259],
[275,315,297,320,0,303,338,303],
[258,328,284,273,247,0,325,275],
[247,289,233,277,212,225,0,276],
[218,290,263,291,247,275,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,266,264,252,257,265,243],
[275,0,272,260,287,273,284,266],
[284,278,0,251,292,269,279,260],
[286,290,299,0,285,272,281,275],
[298,263,258,265,0,268,280,252],
[293,277,281,278,282,0,289,266],
[285,266,271,269,270,261,0,250],
[307,284,290,275,298,284,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,270,245,268,246,263,292],
[296,0,300,278,280,258,270,300],
[280,250,0,261,245,233,238,249],
[305,272,289,0,288,250,274,269],
[282,270,305,262,0,277,287,282],
[304,292,317,300,273,0,299,296],
[287,280,312,276,263,251,0,281],
[258,250,301,281,268,254,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,269,272,269,265,259,278],
[285,0,274,270,265,271,260,265],
[281,276,0,278,265,267,273,267],
[278,280,272,0,263,271,274,268],
[281,285,285,287,0,268,278,280],
[285,279,283,279,282,0,274,277],
[291,290,277,276,272,276,0,281],
[272,285,283,282,270,273,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,280,293,287,273,277,286],
[257,0,254,283,268,250,235,233],
[270,296,0,300,277,281,265,281],
[257,267,250,0,267,245,248,241],
[263,282,273,283,0,259,280,251],
[277,300,269,305,291,0,266,255],
[273,315,285,302,270,284,0,272],
[264,317,269,309,299,295,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,283,276,309,298,301,268],
[287,0,271,270,296,273,287,287],
[267,279,0,242,302,260,291,263],
[274,280,308,0,308,297,296,268],
[241,254,248,242,0,265,285,240],
[252,277,290,253,285,0,304,247],
[249,263,259,254,265,246,0,255],
[282,263,287,282,310,303,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,287,252,288,282,278,291],
[266,0,257,265,257,258,274,261],
[263,293,0,284,284,301,284,287],
[298,285,266,0,274,277,276,303],
[262,293,266,276,0,276,269,291],
[268,292,249,273,274,0,281,279],
[272,276,266,274,281,269,0,277],
[259,289,263,247,259,271,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,308,286,288,296,311,273],
[260,0,279,285,290,283,284,276],
[242,271,0,271,304,292,283,271],
[264,265,279,0,266,287,281,254],
[262,260,246,284,0,263,269,269],
[254,267,258,263,287,0,267,253],
[239,266,267,269,281,283,0,280],
[277,274,279,296,281,297,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,261,273,262,294,278,278],
[262,0,246,262,267,267,252,272],
[289,304,0,265,282,304,277,286],
[277,288,285,0,280,273,267,265],
[288,283,268,270,0,276,280,284],
[256,283,246,277,274,0,255,280],
[272,298,273,283,270,295,0,292],
[272,278,264,285,266,270,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,291,243,263,274,286,282],
[276,0,263,270,278,278,289,267],
[259,287,0,285,289,290,275,261],
[307,280,265,0,263,271,261,274],
[287,272,261,287,0,278,278,292],
[276,272,260,279,272,0,270,276],
[264,261,275,289,272,280,0,264],
[268,283,289,276,258,274,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,253,263,287,269,267,275],
[296,0,285,278,275,284,304,314],
[297,265,0,278,318,286,280,274],
[287,272,272,0,290,288,292,272],
[263,275,232,260,0,243,260,271],
[281,266,264,262,307,0,288,278],
[283,246,270,258,290,262,0,288],
[275,236,276,278,279,272,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,337,203,263,277,269,220],
[272,0,301,238,271,268,246,219],
[213,249,0,204,234,240,224,185],
[347,312,346,0,322,299,271,276],
[287,279,316,228,0,298,213,247],
[273,282,310,251,252,0,242,249],
[281,304,326,279,337,308,0,240],
[330,331,365,274,303,301,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,299,270,267,274,274,273],
[273,0,281,268,264,290,267,267],
[251,269,0,258,263,272,262,259],
[280,282,292,0,263,292,285,283],
[283,286,287,287,0,281,264,265],
[276,260,278,258,269,0,276,265],
[276,283,288,265,286,274,0,283],
[277,283,291,267,285,285,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,267,270,281,283,265,284],
[264,0,281,288,295,265,277,282],
[283,269,0,289,295,259,266,268],
[280,262,261,0,279,260,255,266],
[269,255,255,271,0,245,249,273],
[267,285,291,290,305,0,276,278],
[285,273,284,295,301,274,0,301],
[266,268,282,284,277,272,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,275,276,269,274,285,277],
[259,0,270,270,259,274,252,275],
[275,280,0,257,273,275,276,266],
[274,280,293,0,275,280,266,278],
[281,291,277,275,0,264,278,299],
[276,276,275,270,286,0,281,281],
[265,298,274,284,272,269,0,263],
[273,275,284,272,251,269,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,262,254,255,256,267,259],
[290,0,278,284,271,268,271,269],
[288,272,0,271,270,262,273,268],
[296,266,279,0,292,297,301,291],
[295,279,280,258,0,276,284,278],
[294,282,288,253,274,0,292,282],
[283,279,277,249,266,258,0,262],
[291,281,282,259,272,268,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,285,264,289,278,293,267],
[295,0,295,271,281,284,289,270],
[265,255,0,275,249,263,279,264],
[286,279,275,0,285,280,313,264],
[261,269,301,265,0,291,282,264],
[272,266,287,270,259,0,275,277],
[257,261,271,237,268,275,0,238],
[283,280,286,286,286,273,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,262,261,258,275,263,259],
[272,0,270,273,262,307,276,264],
[288,280,0,288,299,281,294,267],
[289,277,262,0,262,287,261,256],
[292,288,251,288,0,289,270,275],
[275,243,269,263,261,0,272,246],
[287,274,256,289,280,278,0,257],
[291,286,283,294,275,304,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,267,228,233,273,276,298],
[301,0,294,251,251,297,299,294],
[283,256,0,233,256,296,292,247],
[322,299,317,0,270,336,337,286],
[317,299,294,280,0,321,299,268],
[277,253,254,214,229,0,269,228],
[274,251,258,213,251,281,0,268],
[252,256,303,264,282,322,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,284,239,251,278,280,297],
[238,0,285,229,282,304,237,285],
[266,265,0,278,272,296,268,265],
[311,321,272,0,282,316,294,304],
[299,268,278,268,0,278,299,288],
[272,246,254,234,272,0,271,274],
[270,313,282,256,251,279,0,282],
[253,265,285,246,262,276,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,266,282,284,266,247,310],
[262,0,267,264,261,292,298,282],
[284,283,0,269,275,275,278,284],
[268,286,281,0,255,271,270,283],
[266,289,275,295,0,288,289,278],
[284,258,275,279,262,0,270,286],
[303,252,272,280,261,280,0,284],
[240,268,266,267,272,264,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,263,249,243,263,279,296],
[281,0,278,269,259,285,282,276],
[287,272,0,262,271,279,280,301],
[301,281,288,0,280,273,290,301],
[307,291,279,270,0,285,311,302],
[287,265,271,277,265,0,293,307],
[271,268,270,260,239,257,0,287],
[254,274,249,249,248,243,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,268,264,259,272,266,262],
[265,0,251,246,260,288,246,256],
[282,299,0,282,258,302,284,275],
[286,304,268,0,280,314,273,280],
[291,290,292,270,0,299,273,249],
[278,262,248,236,251,0,251,270],
[284,304,266,277,277,299,0,258],
[288,294,275,270,301,280,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,283,253,280,272,268,263],
[286,0,290,289,289,290,272,281],
[267,260,0,256,269,267,260,261],
[297,261,294,0,295,272,289,270],
[270,261,281,255,0,263,251,259],
[278,260,283,278,287,0,265,257],
[282,278,290,261,299,285,0,278],
[287,269,289,280,291,293,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,257,275,271,281,281,264],
[293,0,269,282,284,290,298,284],
[293,281,0,297,289,288,283,262],
[275,268,253,0,266,288,283,269],
[279,266,261,284,0,294,293,264],
[269,260,262,262,256,0,287,272],
[269,252,267,267,257,263,0,246],
[286,266,288,281,286,278,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,284,297,301,289,274,306],
[268,0,267,270,297,288,283,291],
[266,283,0,280,308,297,288,307],
[253,280,270,0,300,271,285,280],
[249,253,242,250,0,273,254,285],
[261,262,253,279,277,0,279,300],
[276,267,262,265,296,271,0,286],
[244,259,243,270,265,250,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,280,262,271,262,264,276],
[277,0,290,262,298,278,299,283],
[270,260,0,269,272,268,266,254],
[288,288,281,0,294,291,271,283],
[279,252,278,256,0,261,258,262],
[288,272,282,259,289,0,270,283],
[286,251,284,279,292,280,0,268],
[274,267,296,267,288,267,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,283,298,303,291,281,264],
[273,0,297,307,309,288,273,292],
[267,253,0,304,312,299,303,311],
[252,243,246,0,269,291,274,274],
[247,241,238,281,0,284,270,276],
[259,262,251,259,266,0,241,242],
[269,277,247,276,280,309,0,253],
[286,258,239,276,274,308,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,271,289,286,280,299,272],
[289,0,275,260,279,257,273,247],
[279,275,0,265,258,260,275,270],
[261,290,285,0,273,267,270,286],
[264,271,292,277,0,273,267,259],
[270,293,290,283,277,0,285,276],
[251,277,275,280,283,265,0,265],
[278,303,280,264,291,274,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,276,262,265,267,275,267],
[293,0,292,279,274,275,283,291],
[274,258,0,255,280,269,270,284],
[288,271,295,0,283,289,286,282],
[285,276,270,267,0,261,274,293],
[283,275,281,261,289,0,275,286],
[275,267,280,264,276,275,0,286],
[283,259,266,268,257,264,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,250,256,253,244,255,276],
[288,0,279,270,269,246,272,286],
[300,271,0,267,279,285,284,291],
[294,280,283,0,274,261,278,294],
[297,281,271,276,0,280,275,287],
[306,304,265,289,270,0,294,297],
[295,278,266,272,275,256,0,297],
[274,264,259,256,263,253,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,300,293,299,271,281,276],
[251,0,282,289,270,269,265,252],
[250,268,0,269,292,277,248,269],
[257,261,281,0,289,273,259,274],
[251,280,258,261,0,263,244,251],
[279,281,273,277,287,0,263,260],
[269,285,302,291,306,287,0,260],
[274,298,281,276,299,290,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,242,258,269,241,247,278],
[305,0,268,303,272,261,276,305],
[308,282,0,309,274,275,265,299],
[292,247,241,0,252,249,263,285],
[281,278,276,298,0,260,244,304],
[309,289,275,301,290,0,267,306],
[303,274,285,287,306,283,0,323],
[272,245,251,265,246,244,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,265,286,263,272,293,270],
[263,0,242,273,252,258,277,281],
[285,308,0,307,275,289,298,308],
[264,277,243,0,257,247,268,263],
[287,298,275,293,0,277,291,285],
[278,292,261,303,273,0,289,279],
[257,273,252,282,259,261,0,274],
[280,269,242,287,265,271,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,252,258,271,268,277,281],
[282,0,244,267,277,259,295,267],
[298,306,0,274,282,277,287,275],
[292,283,276,0,287,272,290,298],
[279,273,268,263,0,265,284,265],
[282,291,273,278,285,0,290,266],
[273,255,263,260,266,260,0,276],
[269,283,275,252,285,284,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,298,294,267,303,266,286],
[271,0,289,287,267,285,276,295],
[252,261,0,284,260,277,264,292],
[256,263,266,0,241,287,261,279],
[283,283,290,309,0,296,259,291],
[247,265,273,263,254,0,264,263],
[284,274,286,289,291,286,0,295],
[264,255,258,271,259,287,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,264,242,271,239,256,247],
[299,0,252,276,281,274,272,259],
[286,298,0,259,277,263,284,233],
[308,274,291,0,285,262,286,264],
[279,269,273,265,0,242,264,258],
[311,276,287,288,308,0,286,275],
[294,278,266,264,286,264,0,254],
[303,291,317,286,292,275,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,279,271,277,281,316,248],
[300,0,253,286,313,314,332,259],
[271,297,0,278,279,281,322,282],
[279,264,272,0,292,281,304,278],
[273,237,271,258,0,253,307,256],
[269,236,269,269,297,0,292,269],
[234,218,228,246,243,258,0,257],
[302,291,268,272,294,281,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,263,284,270,283,277,308],
[275,0,281,274,268,279,249,271],
[287,269,0,250,252,290,269,310],
[266,276,300,0,271,312,277,301],
[280,282,298,279,0,281,253,306],
[267,271,260,238,269,0,271,306],
[273,301,281,273,297,279,0,295],
[242,279,240,249,244,244,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,309,295,263,301,301,288],
[291,0,264,272,289,302,290,281],
[241,286,0,271,291,274,298,288],
[255,278,279,0,293,306,290,282],
[287,261,259,257,0,302,286,271],
[249,248,276,244,248,0,252,280],
[249,260,252,260,264,298,0,283],
[262,269,262,268,279,270,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,328,287,325,273,295,276],
[255,0,285,269,300,266,307,269],
[222,265,0,246,273,244,296,258],
[263,281,304,0,271,263,314,276],
[225,250,277,279,0,262,292,269],
[277,284,306,287,288,0,301,274],
[255,243,254,236,258,249,0,259],
[274,281,292,274,281,276,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,278,281,288,269,260,257],
[274,0,265,284,303,280,271,276],
[272,285,0,285,270,292,276,271],
[269,266,265,0,259,266,265,263],
[262,247,280,291,0,272,279,294],
[281,270,258,284,278,0,266,268],
[290,279,274,285,271,284,0,282],
[293,274,279,287,256,282,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,251,258,280,219,267,281],
[296,0,276,276,298,255,279,277],
[299,274,0,295,285,278,274,285],
[292,274,255,0,266,259,250,287],
[270,252,265,284,0,269,282,275],
[331,295,272,291,281,0,258,297],
[283,271,276,300,268,292,0,289],
[269,273,265,263,275,253,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,290,288,265,286,277,278],
[296,0,308,263,281,285,303,293],
[260,242,0,262,240,262,269,247],
[262,287,288,0,304,262,285,283],
[285,269,310,246,0,274,276,275],
[264,265,288,288,276,0,304,282],
[273,247,281,265,274,246,0,275],
[272,257,303,267,275,268,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,274,269,277,276,268,285],
[269,0,278,273,274,273,256,287],
[276,272,0,276,270,273,269,278],
[281,277,274,0,268,269,277,274],
[273,276,280,282,0,271,267,270],
[274,277,277,281,279,0,271,277],
[282,294,281,273,283,279,0,288],
[265,263,272,276,280,273,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,182,264,208,158,290,236],
[338,0,259,185,262,263,291,156],
[368,291,0,186,236,318,369,263],
[286,365,364,0,261,262,368,234],
[342,288,314,289,0,288,341,263],
[392,287,232,288,262,0,339,313],
[260,259,181,182,209,211,0,234],
[314,394,287,316,287,237,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,277,266,317,293,254,266],
[283,0,273,276,279,275,271,267],
[273,277,0,284,295,281,267,254],
[284,274,266,0,259,255,273,260],
[233,271,255,291,0,247,251,242],
[257,275,269,295,303,0,286,268],
[296,279,283,277,299,264,0,297],
[284,283,296,290,308,282,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,287,282,270,274,284,273],
[265,0,279,278,267,267,269,282],
[263,271,0,286,273,271,270,270],
[268,272,264,0,249,280,271,263],
[280,283,277,301,0,275,282,275],
[276,283,279,270,275,0,268,276],
[266,281,280,279,268,282,0,273],
[277,268,280,287,275,274,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,281,234,292,317,252,282],
[247,0,224,208,249,292,289,231],
[269,326,0,267,296,314,269,276],
[316,342,283,0,316,303,280,269],
[258,301,254,234,0,274,280,249],
[233,258,236,247,276,0,260,246],
[298,261,281,270,270,290,0,278],
[268,319,274,281,301,304,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,280,272,259,253,302,268],
[279,0,292,269,273,278,287,274],
[270,258,0,267,280,269,279,271],
[278,281,283,0,271,271,266,262],
[291,277,270,279,0,279,290,281],
[297,272,281,279,271,0,286,250],
[248,263,271,284,260,264,0,249],
[282,276,279,288,269,300,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,279,271,310,305,294,312],
[257,0,258,264,290,270,280,296],
[271,292,0,275,297,285,298,304],
[279,286,275,0,311,297,309,293],
[240,260,253,239,0,273,275,284],
[245,280,265,253,277,0,264,282],
[256,270,252,241,275,286,0,278],
[238,254,246,257,266,268,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,272,293,288,282,286,286],
[270,0,264,281,257,272,282,285],
[278,286,0,259,255,266,277,269],
[257,269,291,0,288,303,304,294],
[262,293,295,262,0,274,289,284],
[268,278,284,247,276,0,278,289],
[264,268,273,246,261,272,0,287],
[264,265,281,256,266,261,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,289,274,276,277,277,255],
[275,0,299,320,293,287,280,279],
[261,251,0,269,285,284,236,261],
[276,230,281,0,258,273,241,256],
[274,257,265,292,0,279,259,280],
[273,263,266,277,271,0,266,291],
[273,270,314,309,291,284,0,268],
[295,271,289,294,270,259,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,290,376,321,300,385,263],
[227,0,230,277,253,276,348,235],
[260,320,0,391,309,303,375,261],
[174,273,159,0,251,270,290,208],
[229,297,241,299,0,275,362,203],
[250,274,247,280,275,0,327,275],
[165,202,175,260,188,223,0,174],
[287,315,289,342,347,275,376,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,276,267,256,286,275,289],
[285,0,276,282,274,286,263,266],
[274,274,0,275,275,267,263,279],
[283,268,275,0,266,277,262,285],
[294,276,275,284,0,288,265,291],
[264,264,283,273,262,0,256,281],
[275,287,287,288,285,294,0,282],
[261,284,271,265,259,269,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,270,266,270,285,273,281],
[298,0,275,276,267,260,260,294],
[280,275,0,264,263,262,271,282],
[284,274,286,0,273,268,271,292],
[280,283,287,277,0,276,276,273],
[265,290,288,282,274,0,253,285],
[277,290,279,279,274,297,0,294],
[269,256,268,258,277,265,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,275,276,411,275,414,275],
[136,0,274,0,274,136,0,273],
[275,276,0,276,275,276,276,137],
[274,550,274,0,274,411,277,411],
[139,276,275,276,0,276,276,137],
[275,414,274,139,274,0,277,273],
[136,550,274,273,274,273,0,273],
[275,277,413,139,413,277,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,287,292,304,242,264,281],
[292,0,290,297,281,263,283,293],
[263,260,0,273,300,247,266,260],
[258,253,277,0,292,280,277,273],
[246,269,250,258,0,223,279,255],
[308,287,303,270,327,0,301,290],
[286,267,284,273,271,249,0,258],
[269,257,290,277,295,260,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,284,290,267,285,287,302],
[267,0,271,280,292,316,275,300],
[266,279,0,256,228,258,272,292],
[260,270,294,0,274,264,280,313],
[283,258,322,276,0,284,288,283],
[265,234,292,286,266,0,287,312],
[263,275,278,270,262,263,0,300],
[248,250,258,237,267,238,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,280,282,271,269,286,284],
[262,0,273,288,245,261,268,267],
[270,277,0,284,265,255,260,269],
[268,262,266,0,260,246,266,246],
[279,305,285,290,0,288,295,263],
[281,289,295,304,262,0,290,275],
[264,282,290,284,255,260,0,252],
[266,283,281,304,287,275,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,275,196,355,318,196,275],
[310,0,350,272,394,271,314,272],
[275,200,0,276,318,278,317,317],
[354,278,274,0,240,275,200,198],
[195,156,232,310,0,234,192,195],
[232,279,272,275,316,0,314,232],
[354,236,233,350,358,236,0,196],
[275,278,233,352,355,318,354,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,280,263,269,266,258,317],
[267,0,262,261,278,254,271,285],
[270,288,0,269,263,263,261,287],
[287,289,281,0,302,277,269,304],
[281,272,287,248,0,263,245,283],
[284,296,287,273,287,0,290,304],
[292,279,289,281,305,260,0,321],
[233,265,263,246,267,246,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,291,267,287,277,282,291],
[267,0,261,248,259,251,262,267],
[259,289,0,264,259,273,271,275],
[283,302,286,0,269,286,280,290],
[263,291,291,281,0,284,285,280],
[273,299,277,264,266,0,273,297],
[268,288,279,270,265,277,0,294],
[259,283,275,260,270,253,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,263,266,265,278,258,285],
[286,0,275,284,305,302,277,295],
[287,275,0,257,282,299,259,298],
[284,266,293,0,289,295,247,298],
[285,245,268,261,0,262,244,278],
[272,248,251,255,288,0,258,263],
[292,273,291,303,306,292,0,304],
[265,255,252,252,272,287,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,241,240,266,267,253,235],
[282,0,244,259,253,256,271,237],
[309,306,0,271,300,273,302,286],
[310,291,279,0,290,297,299,268],
[284,297,250,260,0,284,255,253],
[283,294,277,253,266,0,282,247],
[297,279,248,251,295,268,0,261],
[315,313,264,282,297,303,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,260,256,255,279,277,265],
[283,0,287,277,274,279,282,292],
[290,263,0,280,261,280,277,284],
[294,273,270,0,281,290,300,283],
[295,276,289,269,0,285,281,280],
[271,271,270,260,265,0,281,268],
[273,268,273,250,269,269,0,265],
[285,258,266,267,270,282,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,280,277,241,254,253,272],
[246,0,253,273,224,252,224,275],
[270,297,0,269,272,280,219,263],
[273,277,281,0,249,244,260,296],
[309,326,278,301,0,305,252,336],
[296,298,270,306,245,0,286,313],
[297,326,331,290,298,264,0,326],
[278,275,287,254,214,237,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,248,305,237,264,301,255],
[330,0,300,252,354,276,313,307],
[302,250,0,292,301,320,290,350],
[245,298,258,0,261,298,288,314],
[313,196,249,289,0,277,247,283],
[286,274,230,252,273,0,285,242],
[249,237,260,262,303,265,0,266],
[295,243,200,236,267,308,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,268,276,273,288,301,259],
[280,0,273,262,254,284,282,262],
[282,277,0,279,280,293,297,274],
[274,288,271,0,270,282,295,284],
[277,296,270,280,0,282,303,279],
[262,266,257,268,268,0,277,251],
[249,268,253,255,247,273,0,256],
[291,288,276,266,271,299,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,292,295,286,270,254,264],
[244,0,263,307,281,274,271,280],
[258,287,0,290,272,269,268,253],
[255,243,260,0,240,239,256,245],
[264,269,278,310,0,276,274,261],
[280,276,281,311,274,0,277,274],
[296,279,282,294,276,273,0,285],
[286,270,297,305,289,276,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,315,324,316,300,357,275],
[243,0,265,276,249,270,299,253],
[235,285,0,290,284,287,314,292],
[226,274,260,0,292,270,311,262],
[234,301,266,258,0,292,355,265],
[250,280,263,280,258,0,317,281],
[193,251,236,239,195,233,0,258],
[275,297,258,288,285,269,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,270,266,285,286,253,310],
[314,0,279,301,274,272,261,311],
[280,271,0,287,314,282,249,291],
[284,249,263,0,283,276,247,279],
[265,276,236,267,0,290,281,280],
[264,278,268,274,260,0,260,282],
[297,289,301,303,269,290,0,293],
[240,239,259,271,270,268,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,243,261,258,268,302,285],
[290,0,269,300,267,255,303,302],
[307,281,0,263,290,270,308,299],
[289,250,287,0,256,272,306,286],
[292,283,260,294,0,275,301,307],
[282,295,280,278,275,0,304,299],
[248,247,242,244,249,246,0,260],
[265,248,251,264,243,251,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,266,264,265,283,270,265],
[277,0,256,249,269,272,260,265],
[284,294,0,265,269,262,257,267],
[286,301,285,0,287,273,276,284],
[285,281,281,263,0,281,276,271],
[267,278,288,277,269,0,267,268],
[280,290,293,274,274,283,0,282],
[285,285,283,266,279,282,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,291,292,265,296,298,293],
[245,0,277,273,232,257,279,276],
[259,273,0,306,262,254,285,261],
[258,277,244,0,240,232,274,249],
[285,318,288,310,0,301,299,274],
[254,293,296,318,249,0,283,263],
[252,271,265,276,251,267,0,250],
[257,274,289,301,276,287,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,285,274,273,276,285,275],
[276,0,267,267,274,272,277,277],
[265,283,0,263,264,274,279,271],
[276,283,287,0,269,261,280,255],
[277,276,286,281,0,253,285,259],
[274,278,276,289,297,0,272,282],
[265,273,271,270,265,278,0,275],
[275,273,279,295,291,268,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,229,249,224,267,249,245],
[300,0,285,282,274,287,296,285],
[321,265,0,252,255,290,295,252],
[301,268,298,0,287,273,264,273],
[326,276,295,263,0,264,296,278],
[283,263,260,277,286,0,279,291],
[301,254,255,286,254,271,0,289],
[305,265,298,277,272,259,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,253,267,283,278,310,245],
[267,0,240,267,282,262,288,262],
[297,310,0,274,309,307,298,292],
[283,283,276,0,301,292,295,266],
[267,268,241,249,0,257,278,243],
[272,288,243,258,293,0,309,270],
[240,262,252,255,272,241,0,230],
[305,288,258,284,307,280,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,279,297,314,285,293,280],
[281,0,303,304,304,270,278,289],
[271,247,0,267,288,263,281,264],
[253,246,283,0,276,258,256,262],
[236,246,262,274,0,251,251,267],
[265,280,287,292,299,0,282,299],
[257,272,269,294,299,268,0,263],
[270,261,286,288,283,251,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,276,279,301,267,267,284],
[274,0,271,273,276,267,267,291],
[274,279,0,297,302,276,259,282],
[271,277,253,0,265,253,280,276],
[249,274,248,285,0,253,253,257],
[283,283,274,297,297,0,285,270],
[283,283,291,270,297,265,0,291],
[266,259,268,274,293,280,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,296,295,299,265,288,270],
[278,0,274,298,289,282,301,281],
[254,276,0,285,289,285,275,264],
[255,252,265,0,284,251,266,247],
[251,261,261,266,0,249,259,273],
[285,268,265,299,301,0,285,288],
[262,249,275,284,291,265,0,263],
[280,269,286,303,277,262,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,318,275,295,290,302,297],
[237,0,292,258,286,273,291,253],
[232,258,0,269,277,251,263,262],
[275,292,281,0,305,272,304,270],
[255,264,273,245,0,229,290,240],
[260,277,299,278,321,0,295,263],
[248,259,287,246,260,255,0,261],
[253,297,288,280,310,287,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,291,287,273,300,283,295],
[235,0,257,241,302,319,219,257],
[259,293,0,297,293,342,291,335],
[263,309,253,0,297,279,275,268],
[277,248,257,253,0,308,264,261],
[250,231,208,271,242,0,233,232],
[267,331,259,275,286,317,0,292],
[255,293,215,282,289,318,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,275,288,288,306,292,292],
[261,0,282,288,285,285,272,286],
[275,268,0,286,284,287,275,271],
[262,262,264,0,278,290,273,276],
[262,265,266,272,0,274,266,274],
[244,265,263,260,276,0,272,267],
[258,278,275,277,284,278,0,266],
[258,264,279,274,276,283,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,284,277,275,274,294,270],
[250,0,279,265,259,286,268,278],
[266,271,0,249,236,272,290,308],
[273,285,301,0,259,284,291,309],
[275,291,314,291,0,288,301,301],
[276,264,278,266,262,0,280,287],
[256,282,260,259,249,270,0,302],
[280,272,242,241,249,263,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,351,260,278,273,259,285],
[259,0,302,257,237,264,264,320],
[199,248,0,237,247,260,216,261],
[290,293,313,0,270,269,232,304],
[272,313,303,280,0,290,255,323],
[277,286,290,281,260,0,276,359],
[291,286,334,318,295,274,0,302],
[265,230,289,246,227,191,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,267,256,277,285,284,265],
[258,0,262,261,263,273,266,270],
[283,288,0,279,274,290,283,284],
[294,289,271,0,283,291,289,283],
[273,287,276,267,0,292,283,268],
[265,277,260,259,258,0,272,266],
[266,284,267,261,267,278,0,286],
[285,280,266,267,282,284,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,272,270,270,277,268,279],
[263,0,269,251,277,284,261,258],
[278,281,0,260,280,259,252,281],
[280,299,290,0,285,297,275,270],
[280,273,270,265,0,278,271,268],
[273,266,291,253,272,0,266,282],
[282,289,298,275,279,284,0,288],
[271,292,269,280,282,268,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,253,256,316,293,289,267],
[268,0,283,275,280,283,277,265],
[297,267,0,290,317,296,276,290],
[294,275,260,0,319,284,305,280],
[234,270,233,231,0,249,260,236],
[257,267,254,266,301,0,287,273],
[261,273,274,245,290,263,0,247],
[283,285,260,270,314,277,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,257,270,304,265,293,270],
[294,0,281,303,304,306,307,265],
[293,269,0,287,286,296,272,276],
[280,247,263,0,287,319,259,265],
[246,246,264,263,0,274,264,259],
[285,244,254,231,276,0,234,255],
[257,243,278,291,286,316,0,263],
[280,285,274,285,291,295,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,274,249,297,273,275,264],
[275,0,282,268,276,282,284,275],
[276,268,0,273,288,278,271,280],
[301,282,277,0,296,284,249,273],
[253,274,262,254,0,261,261,248],
[277,268,272,266,289,0,256,255],
[275,266,279,301,289,294,0,267],
[286,275,270,277,302,295,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,281,279,301,275,287,315],
[272,0,290,277,286,274,295,295],
[269,260,0,260,262,289,256,320],
[271,273,290,0,290,297,287,300],
[249,264,288,260,0,281,254,292],
[275,276,261,253,269,0,261,310],
[263,255,294,263,296,289,0,297],
[235,255,230,250,258,240,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,273,280,289,235,252,293],
[303,0,270,301,299,260,260,306],
[277,280,0,284,318,261,281,303],
[270,249,266,0,282,234,243,274],
[261,251,232,268,0,228,228,270],
[315,290,289,316,322,0,256,316],
[298,290,269,307,322,294,0,324],
[257,244,247,276,280,234,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,196,293,260,325,324,290],
[228,0,227,359,263,259,324,290],
[354,323,0,324,293,226,323,290],
[257,191,226,0,229,225,291,258],
[290,287,257,321,0,290,386,255],
[225,291,324,325,260,0,358,226],
[226,226,227,259,164,192,0,290],
[260,260,260,292,295,324,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,276,260,267,259,283,270],
[283,0,302,273,257,291,273,282],
[274,248,0,264,236,254,275,262],
[290,277,286,0,272,281,303,282],
[283,293,314,278,0,283,298,271],
[291,259,296,269,267,0,295,281],
[267,277,275,247,252,255,0,271],
[280,268,288,268,279,269,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,287,262,282,280,278,281],
[285,0,282,281,268,257,284,286],
[263,268,0,267,255,278,267,267],
[288,269,283,0,276,288,270,284],
[268,282,295,274,0,277,286,274],
[270,293,272,262,273,0,275,267],
[272,266,283,280,264,275,0,267],
[269,264,283,266,276,283,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,274,261,267,278,244,267],
[296,0,286,284,285,292,282,273],
[276,264,0,264,264,266,268,260],
[289,266,286,0,281,272,272,299],
[283,265,286,269,0,290,261,299],
[272,258,284,278,260,0,265,277],
[306,268,282,278,289,285,0,284],
[283,277,290,251,251,273,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,266,249,261,271,263,247],
[300,0,281,283,279,330,291,259],
[284,269,0,253,278,282,263,278],
[301,267,297,0,289,270,285,272],
[289,271,272,261,0,312,278,260],
[279,220,268,280,238,0,251,251],
[287,259,287,265,272,299,0,268],
[303,291,272,278,290,299,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,253,286,282,302,249,265],
[271,0,270,259,293,293,255,291],
[297,280,0,299,272,311,284,282],
[264,291,251,0,312,304,282,287],
[268,257,278,238,0,286,254,292],
[248,257,239,246,264,0,254,275],
[301,295,266,268,296,296,0,280],
[285,259,268,263,258,275,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,330,218,330,328,219,220,328],
[220,0,218,220,109,220,331,218],
[332,332,0,330,330,221,222,330],
[220,330,220,0,109,219,220,220],
[222,441,220,441,0,332,222,220],
[331,330,329,331,218,0,222,329],
[330,219,328,330,328,328,0,328],
[222,332,220,330,330,221,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,293,277,289,286,274,287],
[262,0,291,278,278,272,281,269],
[257,259,0,279,265,241,269,260],
[273,272,271,0,281,254,270,271],
[261,272,285,269,0,278,266,273],
[264,278,309,296,272,0,277,281],
[276,269,281,280,284,273,0,292],
[263,281,290,279,277,269,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,282,262,261,276,266,275],
[287,0,281,275,273,270,272,269],
[268,269,0,279,281,271,289,282],
[288,275,271,0,272,265,269,271],
[289,277,269,278,0,279,285,288],
[274,280,279,285,271,0,281,278],
[284,278,261,281,265,269,0,292],
[275,281,268,279,262,272,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,263,261,270,252,259,252],
[291,0,288,283,270,269,270,277],
[287,262,0,269,250,271,265,267],
[289,267,281,0,260,282,264,251],
[280,280,300,290,0,281,271,273],
[298,281,279,268,269,0,273,264],
[291,280,285,286,279,277,0,274],
[298,273,283,299,277,286,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,281,272,259,250,259,293],
[273,0,275,274,266,267,281,286],
[269,275,0,310,268,278,257,291],
[278,276,240,0,254,253,264,271],
[291,284,282,296,0,283,275,297],
[300,283,272,297,267,0,268,275],
[291,269,293,286,275,282,0,260],
[257,264,259,279,253,275,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,268,286,252,284,265,280],
[278,0,265,266,283,279,254,272],
[282,285,0,284,252,295,272,288],
[264,284,266,0,258,264,243,263],
[298,267,298,292,0,287,275,294],
[266,271,255,286,263,0,257,259],
[285,296,278,307,275,293,0,306],
[270,278,262,287,256,291,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,227,235,235,264,228,273],
[299,0,270,297,289,273,273,305],
[323,280,0,281,272,283,267,286],
[315,253,269,0,269,274,299,304],
[315,261,278,281,0,277,269,304],
[286,277,267,276,273,0,270,313],
[322,277,283,251,281,280,0,286],
[277,245,264,246,246,237,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,298,301,316,270,297,295],
[254,0,264,260,303,256,278,252],
[252,286,0,254,304,265,280,259],
[249,290,296,0,286,268,276,302],
[234,247,246,264,0,263,265,239],
[280,294,285,282,287,0,282,274],
[253,272,270,274,285,268,0,266],
[255,298,291,248,311,276,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,265,287,282,273,298,291],
[277,0,279,289,278,276,292,254],
[285,271,0,297,266,275,284,278],
[263,261,253,0,269,259,276,261],
[268,272,284,281,0,283,274,284],
[277,274,275,291,267,0,270,282],
[252,258,266,274,276,280,0,275],
[259,296,272,289,266,268,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,260,271,262,262,269,268],
[301,0,270,290,293,291,279,270],
[290,280,0,280,301,278,294,275],
[279,260,270,0,289,258,254,270],
[288,257,249,261,0,259,255,256],
[288,259,272,292,291,0,259,255],
[281,271,256,296,295,291,0,266],
[282,280,275,280,294,295,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,298,267,285,281,290,292],
[247,0,274,260,269,294,282,281],
[252,276,0,258,272,260,266,266],
[283,290,292,0,287,276,271,263],
[265,281,278,263,0,255,281,261],
[269,256,290,274,295,0,293,260],
[260,268,284,279,269,257,0,272],
[258,269,284,287,289,290,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,289,278,274,285,272,261],
[272,0,262,274,278,299,290,287],
[261,288,0,285,277,282,282,279],
[272,276,265,0,258,280,278,278],
[276,272,273,292,0,279,280,277],
[265,251,268,270,271,0,262,263],
[278,260,268,272,270,288,0,271],
[289,263,271,272,273,287,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,294,303,298,283,291,252],
[255,0,248,273,257,260,270,237],
[256,302,0,271,261,264,275,277],
[247,277,279,0,297,268,259,258],
[252,293,289,253,0,277,272,263],
[267,290,286,282,273,0,278,278],
[259,280,275,291,278,272,0,263],
[298,313,273,292,287,272,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,263,261,292,279,259,250],
[291,0,299,286,292,267,276,271],
[287,251,0,279,273,282,264,255],
[289,264,271,0,282,279,250,277],
[258,258,277,268,0,266,269,252],
[271,283,268,271,284,0,250,252],
[291,274,286,300,281,300,0,256],
[300,279,295,273,298,298,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,275,332,296,288,297,287],
[241,0,293,309,263,283,253,256],
[275,257,0,289,290,284,278,278],
[218,241,261,0,273,270,267,255],
[254,287,260,277,0,272,251,231],
[262,267,266,280,278,0,243,236],
[253,297,272,283,299,307,0,285],
[263,294,272,295,319,314,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,275,281,267,278,250,316],
[341,0,248,317,314,332,315,286],
[275,302,0,313,274,304,243,296],
[269,233,237,0,204,248,249,271],
[283,236,276,346,0,278,235,273],
[272,218,246,302,272,0,287,274],
[300,235,307,301,315,263,0,343],
[234,264,254,279,277,276,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,292,288,280,262,265,275],
[260,0,292,298,273,260,282,277],
[258,258,0,279,255,253,265,286],
[262,252,271,0,227,256,254,261],
[270,277,295,323,0,252,286,268],
[288,290,297,294,298,0,262,280],
[285,268,285,296,264,288,0,292],
[275,273,264,289,282,270,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,293,263,260,275,268,220],
[278,0,293,261,276,291,296,256],
[257,257,0,247,273,291,243,226],
[287,289,303,0,250,276,270,271],
[290,274,277,300,0,280,292,245],
[275,259,259,274,270,0,271,240],
[282,254,307,280,258,279,0,297],
[330,294,324,279,305,310,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,216,213,308,241,233,279],
[275,0,218,200,237,200,193,257],
[334,332,0,284,349,247,276,306],
[337,350,266,0,326,291,268,308],
[242,313,201,224,0,260,245,284],
[309,350,303,259,290,0,231,298],
[317,357,274,282,305,319,0,332],
[271,293,244,242,266,252,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,272,280,267,259,269,276],
[245,0,267,274,266,272,266,265],
[278,283,0,275,275,264,268,269],
[270,276,275,0,268,256,269,284],
[283,284,275,282,0,278,268,266],
[291,278,286,294,272,0,280,290],
[281,284,282,281,282,270,0,277],
[274,285,281,266,284,260,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,270,271,287,267,282,275],
[264,0,265,272,270,276,270,273],
[280,285,0,262,278,278,278,274],
[279,278,288,0,279,284,294,274],
[263,280,272,271,0,272,295,274],
[283,274,272,266,278,0,278,277],
[268,280,272,256,255,272,0,272],
[275,277,276,276,276,273,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,288,281,267,261,270,271],
[288,0,268,260,276,270,266,274],
[262,282,0,280,280,266,289,278],
[269,290,270,0,266,253,280,274],
[283,274,270,284,0,266,273,271],
[289,280,284,297,284,0,282,271],
[280,284,261,270,277,268,0,271],
[279,276,272,276,279,279,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,264,270,268,289,286,273],
[282,0,279,288,272,296,276,297],
[286,271,0,275,280,312,310,274],
[280,262,275,0,293,287,292,271],
[282,278,270,257,0,276,290,277],
[261,254,238,263,274,0,266,266],
[264,274,240,258,260,284,0,263],
[277,253,276,279,273,284,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,284,274,264,222,255,251],
[302,0,287,302,305,271,285,295],
[266,263,0,279,293,291,252,270],
[276,248,271,0,275,247,267,278],
[286,245,257,275,0,241,269,247],
[328,279,259,303,309,0,317,270],
[295,265,298,283,281,233,0,257],
[299,255,280,272,303,280,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,271,273,292,272,271,277],
[284,0,285,290,294,277,275,291],
[279,265,0,277,294,265,282,272],
[277,260,273,0,289,262,261,271],
[258,256,256,261,0,271,258,276],
[278,273,285,288,279,0,276,285],
[279,275,268,289,292,274,0,280],
[273,259,278,279,274,265,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,296,250,282,268,283,246],
[274,0,281,262,282,270,292,260],
[254,269,0,249,299,279,294,277],
[300,288,301,0,264,291,304,297],
[268,268,251,286,0,284,308,282],
[282,280,271,259,266,0,278,267],
[267,258,256,246,242,272,0,247],
[304,290,273,253,268,283,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,265,267,256,247,252,251],
[308,0,273,275,281,277,278,267],
[285,277,0,291,268,296,288,271],
[283,275,259,0,273,278,269,266],
[294,269,282,277,0,256,267,279],
[303,273,254,272,294,0,269,296],
[298,272,262,281,283,281,0,275],
[299,283,279,284,271,254,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,291,273,288,291,303,292],
[248,0,267,270,259,275,286,268],
[259,283,0,281,268,287,281,265],
[277,280,269,0,274,269,284,262],
[262,291,282,276,0,287,284,258],
[259,275,263,281,263,0,273,262],
[247,264,269,266,266,277,0,244],
[258,282,285,288,292,288,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,303,250,279,294,268,297],
[276,0,269,255,277,291,265,281],
[247,281,0,239,274,262,262,256],
[300,295,311,0,267,291,318,320],
[271,273,276,283,0,268,274,278],
[256,259,288,259,282,0,264,269],
[282,285,288,232,276,286,0,271],
[253,269,294,230,272,281,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,288,295,263,273,281,279],
[255,0,286,260,265,275,270,251],
[262,264,0,253,246,243,238,229],
[255,290,297,0,254,259,275,292],
[287,285,304,296,0,288,264,242],
[277,275,307,291,262,0,266,274],
[269,280,312,275,286,284,0,251],
[271,299,321,258,308,276,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,289,287,284,275,317,281],
[267,0,288,294,290,284,283,277],
[261,262,0,261,275,283,278,286],
[263,256,289,0,274,265,270,258],
[266,260,275,276,0,265,281,283],
[275,266,267,285,285,0,289,282],
[233,267,272,280,269,261,0,250],
[269,273,264,292,267,268,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,267,270,288,251,310,284],
[272,0,278,298,313,259,310,301],
[283,272,0,263,287,276,264,287],
[280,252,287,0,280,252,301,292],
[262,237,263,270,0,254,286,277],
[299,291,274,298,296,0,307,306],
[240,240,286,249,264,243,0,259],
[266,249,263,258,273,244,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,277,279,263,299,288,277],
[274,0,278,277,268,287,262,257],
[273,272,0,281,269,310,270,276],
[271,273,269,0,271,294,273,249],
[287,282,281,279,0,290,287,270],
[251,263,240,256,260,0,251,251],
[262,288,280,277,263,299,0,267],
[273,293,274,301,280,299,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,238,319,312,337,259,273],
[253,0,276,280,274,316,279,281],
[312,274,0,340,344,305,286,285],
[231,270,210,0,241,267,230,226],
[238,276,206,309,0,277,223,313],
[213,234,245,283,273,0,243,248],
[291,271,264,320,327,307,0,286],
[277,269,265,324,237,302,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,248,288,379,285,357,339],
[280,0,266,233,356,208,300,222],
[302,284,0,267,300,207,320,208],
[262,317,283,0,317,247,297,262],
[171,194,250,233,0,173,226,172],
[265,342,343,303,377,0,303,240],
[193,250,230,253,324,247,0,247],
[211,328,342,288,378,310,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,280,282,277,263,283,281],
[277,0,281,269,265,260,254,267],
[270,269,0,259,274,251,252,251],
[268,281,291,0,287,266,268,273],
[273,285,276,263,0,263,259,259],
[287,290,299,284,287,0,285,273],
[267,296,298,282,291,265,0,268],
[269,283,299,277,291,277,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,269,264,293,245,269,263],
[287,0,268,273,266,251,281,280],
[281,282,0,269,285,265,285,280],
[286,277,281,0,285,281,272,279],
[257,284,265,265,0,250,270,274],
[305,299,285,269,300,0,305,294],
[281,269,265,278,280,245,0,258],
[287,270,270,271,276,256,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,287,289,283,291,304,269],
[269,0,291,270,261,277,290,262],
[263,259,0,253,232,250,286,269],
[261,280,297,0,243,264,279,267],
[267,289,318,307,0,282,298,302],
[259,273,300,286,268,0,266,264],
[246,260,264,271,252,284,0,236],
[281,288,281,283,248,286,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,305,304,270,262,264,281],
[261,0,266,287,276,289,250,289],
[245,284,0,276,255,248,274,252],
[246,263,274,0,265,257,241,246],
[280,274,295,285,0,281,250,280],
[288,261,302,293,269,0,283,287],
[286,300,276,309,300,267,0,306],
[269,261,298,304,270,263,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,286,299,297,275,346,292],
[294,0,267,296,299,259,344,276],
[264,283,0,297,294,275,323,266],
[251,254,253,0,293,261,291,265],
[253,251,256,257,0,253,286,247],
[275,291,275,289,297,0,345,281],
[204,206,227,259,264,205,0,219],
[258,274,284,285,303,269,331,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,256,265,277,247,263,271],
[283,0,263,252,287,271,269,272],
[294,287,0,270,272,286,294,304],
[285,298,280,0,276,273,281,284],
[273,263,278,274,0,271,264,286],
[303,279,264,277,279,0,285,295],
[287,281,256,269,286,265,0,300],
[279,278,246,266,264,255,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,237,258,260,283,245,255],
[279,0,275,270,270,284,276,269],
[313,275,0,283,304,291,270,246],
[292,280,267,0,282,295,257,262],
[290,280,246,268,0,277,265,271],
[267,266,259,255,273,0,257,248],
[305,274,280,293,285,293,0,279],
[295,281,304,288,279,302,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,269,261,288,291,266,278],
[297,0,271,277,300,303,279,285],
[281,279,0,289,293,272,277,292],
[289,273,261,0,295,285,282,296],
[262,250,257,255,0,284,271,275],
[259,247,278,265,266,0,259,274],
[284,271,273,268,279,291,0,281],
[272,265,258,254,275,276,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,296,275,282,284,279,292],
[287,0,294,266,272,276,289,289],
[254,256,0,258,253,260,249,261],
[275,284,292,0,279,284,268,298],
[268,278,297,271,0,283,278,296],
[266,274,290,266,267,0,274,289],
[271,261,301,282,272,276,0,289],
[258,261,289,252,254,261,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,279,297,266,294,294,273],
[283,0,278,261,251,305,282,292],
[271,272,0,286,269,306,283,299],
[253,289,264,0,293,300,305,292],
[284,299,281,257,0,329,295,310],
[256,245,244,250,221,0,270,266],
[256,268,267,245,255,280,0,268],
[277,258,251,258,240,284,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,374,301,257,330,281,260,327],
[176,0,204,230,232,203,176,258],
[249,346,0,273,275,288,247,336],
[293,320,277,0,293,222,218,294],
[220,318,275,257,0,265,266,265],
[269,347,262,328,285,0,300,307],
[290,374,303,332,284,250,0,331],
[223,292,214,256,285,243,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,275,290,276,284,298,277],
[286,0,270,290,279,279,276,287],
[275,280,0,272,253,278,282,270],
[260,260,278,0,259,268,260,271],
[274,271,297,291,0,274,275,275],
[266,271,272,282,276,0,277,261],
[252,274,268,290,275,273,0,269],
[273,263,280,279,275,289,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,310,222,267,320,295,295],
[239,0,267,206,234,278,294,268],
[240,283,0,197,269,324,296,224],
[328,344,353,0,272,385,350,345],
[283,316,281,278,0,412,345,267],
[230,272,226,165,138,0,285,269],
[255,256,254,200,205,265,0,254],
[255,282,326,205,283,281,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,277,293,263,278,270,262],
[285,0,270,304,281,286,275,280],
[273,280,0,285,283,287,285,258],
[257,246,265,0,252,253,246,228],
[287,269,267,298,0,293,274,267],
[272,264,263,297,257,0,251,241],
[280,275,265,304,276,299,0,256],
[288,270,292,322,283,309,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,288,292,270,284,279,298],
[253,0,259,268,255,272,269,267],
[262,291,0,276,263,271,283,279],
[258,282,274,0,261,272,275,281],
[280,295,287,289,0,281,268,283],
[266,278,279,278,269,0,262,264],
[271,281,267,275,282,288,0,278],
[252,283,271,269,267,286,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,277,267,262,274,265,270],
[287,0,276,266,278,271,268,292],
[273,274,0,280,265,288,268,287],
[283,284,270,0,259,281,290,284],
[288,272,285,291,0,278,286,294],
[276,279,262,269,272,0,266,279],
[285,282,282,260,264,284,0,263],
[280,258,263,266,256,271,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,260,274,261,270,283,268],
[261,0,277,268,247,281,266,244],
[290,273,0,269,245,241,262,257],
[276,282,281,0,257,286,270,272],
[289,303,305,293,0,284,275,277],
[280,269,309,264,266,0,279,264],
[267,284,288,280,275,271,0,270],
[282,306,293,278,273,286,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,275,267,294,253,266,277],
[303,0,288,317,295,254,283,303],
[275,262,0,282,305,266,267,254],
[283,233,268,0,266,255,268,248],
[256,255,245,284,0,232,260,246],
[297,296,284,295,318,0,294,274],
[284,267,283,282,290,256,0,280],
[273,247,296,302,304,276,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,355,227,258,260,257,323,258],
[195,0,166,167,129,163,261,164],
[323,384,0,226,255,223,260,225],
[292,383,324,0,223,291,356,291],
[290,421,295,327,0,259,391,260],
[293,387,327,259,291,0,421,226],
[227,289,290,194,159,129,0,161],
[292,386,325,259,290,324,389,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,267,290,284,282,286,286],
[264,0,267,254,259,267,274,267],
[283,283,0,275,263,290,286,292],
[260,296,275,0,289,277,289,302],
[266,291,287,261,0,277,296,271],
[268,283,260,273,273,0,282,272],
[264,276,264,261,254,268,0,277],
[264,283,258,248,279,278,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,251,273,275,277,255,259],
[283,0,264,293,295,272,267,262],
[299,286,0,268,285,282,259,264],
[277,257,282,0,271,279,269,244],
[275,255,265,279,0,276,270,267],
[273,278,268,271,274,0,272,266],
[295,283,291,281,280,278,0,275],
[291,288,286,306,283,284,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,239,251,235,263,253,275],
[291,0,276,270,291,254,318,293],
[311,274,0,258,262,330,260,252],
[299,280,292,0,292,272,274,287],
[315,259,288,258,0,293,275,267],
[287,296,220,278,257,0,258,246],
[297,232,290,276,275,292,0,267],
[275,257,298,263,283,304,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,304,301,304,273,308,295],
[253,0,276,260,282,270,289,303],
[246,274,0,256,252,261,265,274],
[249,290,294,0,290,281,281,285],
[246,268,298,260,0,259,273,281],
[277,280,289,269,291,0,289,291],
[242,261,285,269,277,261,0,282],
[255,247,276,265,269,259,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,393,324,289,383,270,333,298],
[157,0,277,207,271,174,229,238],
[226,273,0,232,376,226,302,287],
[261,343,318,0,301,253,297,243],
[167,279,174,249,0,168,287,186],
[280,376,324,297,382,0,315,260],
[217,321,248,253,263,235,0,261],
[252,312,263,307,364,290,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,267,262,257,246,268,276],
[284,0,321,271,282,249,278,266],
[283,229,0,268,259,257,261,254],
[288,279,282,0,283,279,280,262],
[293,268,291,267,0,303,271,261],
[304,301,293,271,247,0,263,267],
[282,272,289,270,279,287,0,265],
[274,284,296,288,289,283,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,252,292,260,285,281,298],
[284,0,286,297,265,289,277,302],
[298,264,0,298,291,284,281,307],
[258,253,252,0,263,266,244,271],
[290,285,259,287,0,300,291,293],
[265,261,266,284,250,0,262,290],
[269,273,269,306,259,288,0,306],
[252,248,243,279,257,260,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,290,291,266,293,265,287],
[281,0,268,276,269,261,259,269],
[260,282,0,257,276,258,265,273],
[259,274,293,0,258,256,273,259],
[284,281,274,292,0,291,288,276],
[257,289,292,294,259,0,270,266],
[285,291,285,277,262,280,0,267],
[263,281,277,291,274,284,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,232,262,259,237,256,260],
[314,0,278,274,272,279,288,299],
[318,272,0,285,284,274,289,272],
[288,276,265,0,276,257,261,296],
[291,278,266,274,0,254,279,305],
[313,271,276,293,296,0,280,315],
[294,262,261,289,271,270,0,278],
[290,251,278,254,245,235,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,274,277,264,283,260,257],
[273,0,286,275,289,262,251,267],
[276,264,0,267,275,286,249,278],
[273,275,283,0,291,266,277,277],
[286,261,275,259,0,251,239,260],
[267,288,264,284,299,0,282,265],
[290,299,301,273,311,268,0,266],
[293,283,272,273,290,285,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,266,269,295,290,269,280],
[272,0,279,293,300,305,271,251],
[284,271,0,301,309,296,277,285],
[281,257,249,0,259,307,283,259],
[255,250,241,291,0,269,248,290],
[260,245,254,243,281,0,249,260],
[281,279,273,267,302,301,0,288],
[270,299,265,291,260,290,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,264,332,301,291,323,309],
[249,0,284,274,272,286,265,288],
[286,266,0,264,256,267,250,212],
[218,276,286,0,204,300,267,254],
[249,278,294,346,0,268,293,260],
[259,264,283,250,282,0,274,305],
[227,285,300,283,257,276,0,259],
[241,262,338,296,290,245,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,238,251,228,258,252,277],
[282,0,262,233,253,248,266,272],
[312,288,0,231,277,263,271,287],
[299,317,319,0,271,292,284,321],
[322,297,273,279,0,269,278,300],
[292,302,287,258,281,0,295,299],
[298,284,279,266,272,255,0,288],
[273,278,263,229,250,251,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,283,277,293,264,281,285],
[273,0,284,249,281,280,268,273],
[267,266,0,269,299,249,256,264],
[273,301,281,0,295,272,292,288],
[257,269,251,255,0,252,259,254],
[286,270,301,278,298,0,273,285],
[269,282,294,258,291,277,0,268],
[265,277,286,262,296,265,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,310,313,273,309,313,259],
[250,0,321,287,287,297,308,251],
[240,229,0,285,279,311,273,231],
[237,263,265,0,302,302,294,269],
[277,263,271,248,0,318,269,251],
[241,253,239,248,232,0,248,230],
[237,242,277,256,281,302,0,286],
[291,299,319,281,299,320,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,271,255,308,258,264,294],
[281,0,284,274,318,288,276,332],
[279,266,0,274,269,244,233,288],
[295,276,276,0,266,296,235,276],
[242,232,281,284,0,269,287,246],
[292,262,306,254,281,0,285,347],
[286,274,317,315,263,265,0,299],
[256,218,262,274,304,203,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,279,274,227,251,257,261],
[254,0,296,264,230,254,280,278],
[271,254,0,237,193,250,237,260],
[276,286,313,0,275,294,278,271],
[323,320,357,275,0,295,319,330],
[299,296,300,256,255,0,278,278],
[293,270,313,272,231,272,0,290],
[289,272,290,279,220,272,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,281,248,268,262,253,268],
[288,0,287,276,278,269,272,278],
[269,263,0,249,269,260,265,280],
[302,274,301,0,284,280,276,272],
[282,272,281,266,0,267,289,281],
[288,281,290,270,283,0,282,296],
[297,278,285,274,261,268,0,279],
[282,272,270,278,269,254,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,249,264,260,261,267,268],
[291,0,264,284,259,291,271,271],
[301,286,0,266,258,273,257,265],
[286,266,284,0,252,289,282,256],
[290,291,292,298,0,293,275,282],
[289,259,277,261,257,0,277,271],
[283,279,293,268,275,273,0,264],
[282,279,285,294,268,279,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,265,261,262,259,304,289],
[252,0,274,233,247,259,271,257],
[285,276,0,252,264,254,284,265],
[289,317,298,0,274,255,287,272],
[288,303,286,276,0,260,284,269],
[291,291,296,295,290,0,327,266],
[246,279,266,263,266,223,0,247],
[261,293,285,278,281,284,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,297,282,287,261,275,279],
[252,0,284,267,267,264,266,272],
[253,266,0,254,247,250,244,254],
[268,283,296,0,266,246,274,271],
[263,283,303,284,0,251,275,275],
[289,286,300,304,299,0,293,263],
[275,284,306,276,275,257,0,282],
[271,278,296,279,275,287,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,271,282,278,251,279,281],
[306,0,282,263,283,275,283,301],
[279,268,0,293,288,268,271,294],
[268,287,257,0,273,241,252,263],
[272,267,262,277,0,268,273,276],
[299,275,282,309,282,0,260,304],
[271,267,279,298,277,290,0,291],
[269,249,256,287,274,246,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,258,271,271,266,282,277],
[269,0,243,302,293,307,286,295],
[292,307,0,316,301,317,290,273],
[279,248,234,0,268,272,261,270],
[279,257,249,282,0,302,276,264],
[284,243,233,278,248,0,251,248],
[268,264,260,289,274,299,0,263],
[273,255,277,280,286,302,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,282,273,295,299,306,296],
[280,0,283,258,268,271,276,285],
[268,267,0,258,268,278,267,265],
[277,292,292,0,292,272,283,281],
[255,282,282,258,0,255,285,279],
[251,279,272,278,295,0,269,279],
[244,274,283,267,265,281,0,254],
[254,265,285,269,271,271,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,284,281,278,286,283,293],
[275,0,298,307,288,272,293,297],
[266,252,0,255,263,245,254,284],
[269,243,295,0,248,268,270,284],
[272,262,287,302,0,259,282,287],
[264,278,305,282,291,0,275,291],
[267,257,296,280,268,275,0,293],
[257,253,266,266,263,259,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,251,238,258,266,252,281],
[287,0,307,281,295,277,261,295],
[299,243,0,252,285,255,252,272],
[312,269,298,0,306,289,296,321],
[292,255,265,244,0,283,265,267],
[284,273,295,261,267,0,269,282],
[298,289,298,254,285,281,0,305],
[269,255,278,229,283,268,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,308,274,286,273,301,309],
[266,0,288,288,271,294,299,274],
[242,262,0,263,255,267,267,275],
[276,262,287,0,266,284,271,279],
[264,279,295,284,0,286,296,285],
[277,256,283,266,264,0,288,278],
[249,251,283,279,254,262,0,277],
[241,276,275,271,265,272,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,284,319,292,281,282,273],
[262,0,276,302,278,267,321,296],
[266,274,0,295,269,276,290,280],
[231,248,255,0,233,257,274,242],
[258,272,281,317,0,268,308,289],
[269,283,274,293,282,0,299,270],
[268,229,260,276,242,251,0,253],
[277,254,270,308,261,280,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,235,233,264,248,252,292],
[298,0,254,272,273,277,280,298],
[315,296,0,275,287,266,277,326],
[317,278,275,0,283,280,290,320],
[286,277,263,267,0,269,271,294],
[302,273,284,270,281,0,295,301],
[298,270,273,260,279,255,0,293],
[258,252,224,230,256,249,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,228,285,271,231,243,289],
[278,0,245,273,268,263,243,289],
[322,305,0,292,302,262,278,329],
[265,277,258,0,267,216,250,299],
[279,282,248,283,0,258,232,321],
[319,287,288,334,292,0,275,331],
[307,307,272,300,318,275,0,307],
[261,261,221,251,229,219,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,260,275,275,284,296,284],
[261,0,261,273,267,258,268,257],
[290,289,0,275,290,276,287,271],
[275,277,275,0,280,273,295,267],
[275,283,260,270,0,269,283,275],
[266,292,274,277,281,0,293,268],
[254,282,263,255,267,257,0,264],
[266,293,279,283,275,282,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,277,298,279,273,278,273],
[262,0,270,268,278,273,280,259],
[273,280,0,282,280,274,286,282],
[252,282,268,0,267,268,284,257],
[271,272,270,283,0,266,290,266],
[277,277,276,282,284,0,285,272],
[272,270,264,266,260,265,0,250],
[277,291,268,293,284,278,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,290,293,271,290,290,274],
[268,0,279,282,261,290,287,265],
[260,271,0,265,265,285,278,252],
[257,268,285,0,278,281,286,259],
[279,289,285,272,0,281,287,274],
[260,260,265,269,269,0,275,277],
[260,263,272,264,263,275,0,263],
[276,285,298,291,276,273,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,344,204,238,275,241,206,100],
[206,0,168,202,273,208,243,203],
[346,382,0,480,342,208,277,343],
[312,348,70,0,241,208,174,137],
[275,277,208,309,0,210,314,274],
[309,342,342,342,340,0,345,272],
[344,307,273,376,236,205,0,236],
[450,347,207,413,276,278,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,323,280,294,275,291,290],
[268,0,268,286,293,274,269,284],
[227,282,0,269,287,272,254,269],
[270,264,281,0,278,272,288,251],
[256,257,263,272,0,270,256,274],
[275,276,278,278,280,0,278,280],
[259,281,296,262,294,272,0,267],
[260,266,281,299,276,270,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,266,263,268,288,258,270],
[297,0,275,298,279,297,287,271],
[284,275,0,278,286,293,290,287],
[287,252,272,0,284,279,280,281],
[282,271,264,266,0,283,259,287],
[262,253,257,271,267,0,264,255],
[292,263,260,270,291,286,0,297],
[280,279,263,269,263,295,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,283,293,292,296,288,287],
[275,0,270,291,282,279,276,274],
[267,280,0,270,287,272,269,273],
[257,259,280,0,289,272,266,279],
[258,268,263,261,0,264,259,276],
[254,271,278,278,286,0,268,269],
[262,274,281,284,291,282,0,280],
[263,276,277,271,274,281,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,275,247,272,258,268,278],
[297,0,268,288,298,300,294,277],
[275,282,0,269,289,283,282,288],
[303,262,281,0,289,275,284,275],
[278,252,261,261,0,265,262,280],
[292,250,267,275,285,0,282,278],
[282,256,268,266,288,268,0,254],
[272,273,262,275,270,272,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,310,264,306,293,278,285],
[267,0,287,275,293,287,297,289],
[240,263,0,282,266,278,295,272],
[286,275,268,0,284,287,292,259],
[244,257,284,266,0,257,286,279],
[257,263,272,263,293,0,280,279],
[272,253,255,258,264,270,0,258],
[265,261,278,291,271,271,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,300,276,274,304,294,330],
[281,0,316,269,268,332,295,326],
[250,234,0,222,231,246,237,258],
[274,281,328,0,290,310,303,317],
[276,282,319,260,0,311,293,291],
[246,218,304,240,239,0,292,290],
[256,255,313,247,257,258,0,294],
[220,224,292,233,259,260,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,256,262,270,277,285,314],
[310,0,271,273,278,294,314,314],
[294,279,0,264,300,290,324,298],
[288,277,286,0,291,244,299,318],
[280,272,250,259,0,267,284,262],
[273,256,260,306,283,0,299,296],
[265,236,226,251,266,251,0,275],
[236,236,252,232,288,254,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,272,272,248,277,266,267],
[295,0,286,283,264,289,289,286],
[278,264,0,268,266,291,262,277],
[278,267,282,0,275,275,274,275],
[302,286,284,275,0,290,289,290],
[273,261,259,275,260,0,254,259],
[284,261,288,276,261,296,0,286],
[283,264,273,275,260,291,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,283,306,294,267,258,286],
[234,0,287,270,301,250,263,257],
[267,263,0,247,257,232,241,250],
[244,280,303,0,304,270,267,274],
[256,249,293,246,0,242,241,250],
[283,300,318,280,308,0,293,268],
[292,287,309,283,309,257,0,282],
[264,293,300,276,300,282,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,227,260,255,281,281,306],
[261,0,268,255,276,276,275,276],
[323,282,0,269,308,300,280,289],
[290,295,281,0,301,286,270,313],
[295,274,242,249,0,281,254,293],
[269,274,250,264,269,0,276,278],
[269,275,270,280,296,274,0,284],
[244,274,261,237,257,272,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,299,279,272,281,293,267],
[275,0,273,279,260,275,273,286],
[251,277,0,255,249,252,283,247],
[271,271,295,0,264,260,312,290],
[278,290,301,286,0,274,285,249],
[269,275,298,290,276,0,301,287],
[257,277,267,238,265,249,0,249],
[283,264,303,260,301,263,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,262,334,286,259,292,263],
[277,0,267,323,282,265,270,266],
[288,283,0,315,252,286,278,262],
[216,227,235,0,255,242,260,246],
[264,268,298,295,0,244,274,249],
[291,285,264,308,306,0,300,287],
[258,280,272,290,276,250,0,254],
[287,284,288,304,301,263,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,259,286,281,287,322,308],
[242,0,276,257,260,257,307,279],
[291,274,0,277,250,266,306,322],
[264,293,273,0,273,278,311,294],
[269,290,300,277,0,287,305,310],
[263,293,284,272,263,0,306,295],
[228,243,244,239,245,244,0,270],
[242,271,228,256,240,255,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,320,340,337,296,124,236],
[318,0,235,252,337,252,210,256],
[230,315,0,275,313,289,228,209],
[210,298,275,0,337,212,167,279],
[213,213,237,213,0,232,146,193],
[254,298,261,338,318,0,147,214],
[426,340,322,383,404,403,0,239],
[314,294,341,271,357,336,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,269,293,261,273,296,284],
[272,0,267,281,254,275,272,284],
[281,283,0,274,287,258,283,272],
[257,269,276,0,275,268,266,282],
[289,296,263,275,0,273,280,288],
[277,275,292,282,277,0,277,294],
[254,278,267,284,270,273,0,267],
[266,266,278,268,262,256,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,294,328,349,316,336,258],
[225,0,206,268,264,235,270,210],
[256,344,0,300,288,293,302,257],
[222,282,250,0,279,301,316,264],
[201,286,262,271,0,239,245,196],
[234,315,257,249,311,0,322,238],
[214,280,248,234,305,228,0,277],
[292,340,293,286,354,312,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,279,237,264,236,250,267],
[296,0,228,320,264,275,279,267],
[271,322,0,298,206,233,274,252],
[313,230,252,0,251,213,242,252],
[286,286,344,299,0,286,268,254],
[314,275,317,337,264,0,303,287],
[300,271,276,308,282,247,0,271],
[283,283,298,298,296,263,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,274,278,281,273,266,276],
[290,0,287,279,285,285,277,270],
[276,263,0,281,284,259,259,286],
[272,271,269,0,286,257,254,265],
[269,265,266,264,0,271,256,272],
[277,265,291,293,279,0,277,274],
[284,273,291,296,294,273,0,279],
[274,280,264,285,278,276,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,251,253,208,295,292,295],
[466,0,253,337,251,336,378,336],
[299,297,0,170,210,296,250,211],
[297,213,380,0,294,211,293,254],
[342,299,340,256,0,299,295,298],
[255,214,254,339,251,0,334,253],
[258,172,300,257,255,216,0,130],
[255,214,339,296,252,297,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,276,263,249,275,258,274],
[277,0,276,290,261,273,279,275],
[274,274,0,261,256,282,274,279],
[287,260,289,0,273,272,287,288],
[301,289,294,277,0,295,271,291],
[275,277,268,278,255,0,278,272],
[292,271,276,263,279,272,0,282],
[276,275,271,262,259,278,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,255,268,275,278,283,280],
[289,0,283,273,279,277,280,257],
[295,267,0,277,290,279,295,294],
[282,277,273,0,262,284,287,276],
[275,271,260,288,0,269,280,277],
[272,273,271,266,281,0,281,288],
[267,270,255,263,270,269,0,263],
[270,293,256,274,273,262,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,275,262,282,272,263,269],
[279,0,273,283,281,277,269,299],
[275,277,0,280,276,276,276,274],
[288,267,270,0,288,300,253,287],
[268,269,274,262,0,270,240,262],
[278,273,274,250,280,0,273,267],
[287,281,274,297,310,277,0,299],
[281,251,276,263,288,283,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,287,264,277,253,269,293],
[283,0,262,252,271,265,278,281],
[263,288,0,276,305,279,260,311],
[286,298,274,0,296,264,289,297],
[273,279,245,254,0,256,252,303],
[297,285,271,286,294,0,272,306],
[281,272,290,261,298,278,0,310],
[257,269,239,253,247,244,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,287,281,275,287,279,284],
[248,0,248,240,301,282,272,235],
[263,302,0,299,295,311,286,296],
[269,310,251,0,266,300,277,277],
[275,249,255,284,0,300,260,248],
[263,268,239,250,250,0,245,266],
[271,278,264,273,290,305,0,293],
[266,315,254,273,302,284,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,255,255,255,279,256,268],
[289,0,274,286,262,304,280,274],
[295,276,0,273,249,278,275,286],
[295,264,277,0,253,289,268,288],
[295,288,301,297,0,299,267,295],
[271,246,272,261,251,0,266,265],
[294,270,275,282,283,284,0,281],
[282,276,264,262,255,285,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,326,292,264,271,282,290,307],
[224,0,271,253,234,240,238,270],
[258,279,0,209,236,226,245,290],
[286,297,341,0,286,272,288,330],
[279,316,314,264,0,269,307,294],
[268,310,324,278,281,0,267,285],
[260,312,305,262,243,283,0,282],
[243,280,260,220,256,265,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,185,369,323,139,182,274],
[368,0,321,368,322,320,323,274],
[365,229,0,323,275,276,275,321],
[181,182,227,0,183,184,137,274],
[227,228,275,367,0,229,137,274],
[411,230,274,366,321,0,275,321],
[368,227,275,413,413,275,0,367],
[276,276,229,276,276,229,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,274,275,273,276,289,298],
[273,0,287,287,268,294,280,292],
[276,263,0,280,276,254,262,300],
[275,263,270,0,267,277,279,292],
[277,282,274,283,0,270,294,298],
[274,256,296,273,280,0,274,303],
[261,270,288,271,256,276,0,286],
[252,258,250,258,252,247,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,263,275,265,295,286,284],
[270,0,271,258,251,275,266,295],
[287,279,0,285,277,284,269,280],
[275,292,265,0,293,290,272,288],
[285,299,273,257,0,288,294,274],
[255,275,266,260,262,0,277,276],
[264,284,281,278,256,273,0,301],
[266,255,270,262,276,274,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,275,264,255,265,270,254],
[268,0,278,270,258,265,263,269],
[275,272,0,289,285,277,269,270],
[286,280,261,0,252,272,263,265],
[295,292,265,298,0,283,286,288],
[285,285,273,278,267,0,287,273],
[280,287,281,287,264,263,0,274],
[296,281,280,285,262,277,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,242,271,263,294,272,275],
[306,0,274,320,281,312,303,294],
[308,276,0,303,268,306,307,287],
[279,230,247,0,269,284,273,277],
[287,269,282,281,0,293,300,276],
[256,238,244,266,257,0,268,244],
[278,247,243,277,250,282,0,289],
[275,256,263,273,274,306,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,270,276,268,269,270,288],
[278,0,261,299,265,281,245,270],
[280,289,0,302,282,284,283,268],
[274,251,248,0,263,261,263,259],
[282,285,268,287,0,271,267,272],
[281,269,266,289,279,0,284,276],
[280,305,267,287,283,266,0,289],
[262,280,282,291,278,274,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,270,277,276,251,262,266],
[286,0,275,273,292,259,294,251],
[280,275,0,279,282,272,274,278],
[273,277,271,0,270,246,277,265],
[274,258,268,280,0,277,275,253],
[299,291,278,304,273,0,280,298],
[288,256,276,273,275,270,0,271],
[284,299,272,285,297,252,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,287,286,271,277,265,271],
[264,0,281,271,256,255,260,274],
[263,269,0,270,267,250,252,263],
[264,279,280,0,258,263,270,273],
[279,294,283,292,0,276,270,286],
[273,295,300,287,274,0,275,282],
[285,290,298,280,280,275,0,289],
[279,276,287,277,264,268,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,266,271,287,278,284,278],
[274,0,267,255,282,264,261,271],
[284,283,0,276,272,271,269,271],
[279,295,274,0,280,276,283,280],
[263,268,278,270,0,250,245,284],
[272,286,279,274,300,0,287,283],
[266,289,281,267,305,263,0,282],
[272,279,279,270,266,267,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,289,285,288,301,275,304],
[256,0,259,255,270,280,257,266],
[261,291,0,270,265,296,267,296],
[265,295,280,0,280,305,291,304],
[262,280,285,270,0,298,294,295],
[249,270,254,245,252,0,258,278],
[275,293,283,259,256,292,0,279],
[246,284,254,246,255,272,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,293,312,271,298,320,259],
[273,0,303,309,277,289,302,297],
[257,247,0,270,241,276,286,268],
[238,241,280,0,254,261,269,277],
[279,273,309,296,0,284,306,252],
[252,261,274,289,266,0,262,278],
[230,248,264,281,244,288,0,252],
[291,253,282,273,298,272,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,265,289,252,244,258,254],
[262,0,249,285,233,247,248,246],
[285,301,0,282,269,257,277,265],
[261,265,268,0,249,247,257,239],
[298,317,281,301,0,279,268,275],
[306,303,293,303,271,0,290,284],
[292,302,273,293,282,260,0,274],
[296,304,285,311,275,266,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,270,272,262,277,281,275],
[276,0,274,262,260,263,277,264],
[280,276,0,274,264,280,259,279],
[278,288,276,0,271,280,278,282],
[288,290,286,279,0,260,273,275],
[273,287,270,270,290,0,274,261],
[269,273,291,272,277,276,0,273],
[275,286,271,268,275,289,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,204,232,232,174,204,263],
[321,0,319,348,175,231,317,232],
[346,231,0,291,230,260,320,261],
[318,202,259,0,202,171,173,231],
[318,375,320,348,0,289,318,261],
[376,319,290,379,261,0,263,289],
[346,233,230,377,232,287,0,349],
[287,318,289,319,289,261,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,283,273,254,287,273,260],
[269,0,268,277,258,289,291,254],
[267,282,0,272,283,330,345,278],
[277,273,278,0,238,291,290,243],
[296,292,267,312,0,304,290,263],
[263,261,220,259,246,0,267,250],
[277,259,205,260,260,283,0,249],
[290,296,272,307,287,300,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,272,266,282,289,265,284],
[286,0,289,258,272,297,256,285],
[278,261,0,275,279,271,271,289],
[284,292,275,0,296,301,291,313],
[268,278,271,254,0,267,273,283],
[261,253,279,249,283,0,252,280],
[285,294,279,259,277,298,0,298],
[266,265,261,237,267,270,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,248,239,250,248,260,277],
[295,0,275,236,285,268,285,277],
[302,275,0,258,282,271,273,305],
[311,314,292,0,296,269,290,315],
[300,265,268,254,0,275,277,296],
[302,282,279,281,275,0,292,296],
[290,265,277,260,273,258,0,284],
[273,273,245,235,254,254,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,283,290,247,296,307,271],
[296,0,278,305,275,303,298,263],
[267,272,0,280,254,289,272,261],
[260,245,270,0,272,277,277,245],
[303,275,296,278,0,309,299,284],
[254,247,261,273,241,0,261,239],
[243,252,278,273,251,289,0,227],
[279,287,289,305,266,311,323,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,271,249,257,243,250,277],
[265,0,250,238,250,257,250,267],
[279,300,0,275,283,261,266,277],
[301,312,275,0,276,263,279,273],
[293,300,267,274,0,276,284,276],
[307,293,289,287,274,0,285,287],
[300,300,284,271,266,265,0,287],
[273,283,273,277,274,263,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,275,285,281,318,278,273],
[269,0,259,261,256,279,284,268],
[275,291,0,274,270,305,295,264],
[265,289,276,0,266,290,301,268],
[269,294,280,284,0,294,304,281],
[232,271,245,260,256,0,271,266],
[272,266,255,249,246,279,0,260],
[277,282,286,282,269,284,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,314,272,306,323,260,279],
[295,0,297,265,277,303,269,255],
[236,253,0,210,288,282,272,252],
[278,285,340,0,272,333,324,293],
[244,273,262,278,0,268,251,278],
[227,247,268,217,282,0,238,217],
[290,281,278,226,299,312,0,297],
[271,295,298,257,272,333,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,297,255,312,276,275,267],
[271,0,243,270,275,267,265,237],
[253,307,0,271,273,268,268,277],
[295,280,279,0,299,261,284,279],
[238,275,277,251,0,268,286,265],
[274,283,282,289,282,0,261,285],
[275,285,282,266,264,289,0,262],
[283,313,273,271,285,265,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,263,302,272,263,272,255],
[287,0,269,293,271,261,271,256],
[287,281,0,283,234,263,238,271],
[248,257,267,0,267,243,246,282],
[278,279,316,283,0,259,263,276],
[287,289,287,307,291,0,248,259],
[278,279,312,304,287,302,0,272],
[295,294,279,268,274,291,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,213,274,244,244,303,241],
[277,0,187,212,302,185,241,306],
[337,363,0,243,304,273,334,301],
[276,338,307,0,309,247,244,308],
[306,248,246,241,0,216,211,365],
[306,365,277,303,334,0,272,303],
[247,309,216,306,339,278,0,366],
[309,244,249,242,185,247,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,284,283,269,282,306,268],
[288,0,299,275,287,286,312,287],
[266,251,0,261,271,261,306,289],
[267,275,289,0,276,284,305,296],
[281,263,279,274,0,268,301,276],
[268,264,289,266,282,0,297,285],
[244,238,244,245,249,253,0,267],
[282,263,261,254,274,265,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,283,290,279,289,283,273],
[251,0,277,279,269,271,281,270],
[267,273,0,278,281,282,271,277],
[260,271,272,0,274,272,271,264],
[271,281,269,276,0,276,263,268],
[261,279,268,278,274,0,282,276],
[267,269,279,279,287,268,0,269],
[277,280,273,286,282,274,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,270,269,275,293,267,282],
[291,0,260,308,277,287,278,272],
[280,290,0,271,296,303,292,281],
[281,242,279,0,274,266,294,284],
[275,273,254,276,0,281,278,300],
[257,263,247,284,269,0,275,291],
[283,272,258,256,272,275,0,245],
[268,278,269,266,250,259,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,271,285,255,299,251,289],
[278,0,282,288,268,328,283,294],
[279,268,0,264,294,323,253,300],
[265,262,286,0,279,309,275,288],
[295,282,256,271,0,273,268,273],
[251,222,227,241,277,0,262,283],
[299,267,297,275,282,288,0,297],
[261,256,250,262,277,267,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,281,287,249,262,289,296],
[273,0,283,271,262,271,307,282],
[269,267,0,270,263,262,292,256],
[263,279,280,0,280,276,304,290],
[301,288,287,270,0,290,327,285],
[288,279,288,274,260,0,292,289],
[261,243,258,246,223,258,0,263],
[254,268,294,260,265,261,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,288,308,285,299,263,276],
[244,0,261,299,270,248,252,220],
[262,289,0,288,272,275,302,224],
[242,251,262,0,291,272,244,219],
[265,280,278,259,0,249,234,261],
[251,302,275,278,301,0,247,223],
[287,298,248,306,316,303,0,266],
[274,330,326,331,289,327,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,268,270,293,271,281,282],
[278,0,276,282,293,278,277,261],
[282,274,0,304,304,282,279,274],
[280,268,246,0,270,266,262,256],
[257,257,246,280,0,242,268,259],
[279,272,268,284,308,0,280,263],
[269,273,271,288,282,270,0,265],
[268,289,276,294,291,287,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,305,307,317,253,273,272],
[310,0,324,286,272,235,280,279],
[245,226,0,270,256,176,233,229],
[243,264,280,0,284,235,271,257],
[233,278,294,266,0,264,262,257],
[297,315,374,315,286,0,261,257],
[277,270,317,279,288,289,0,268],
[278,271,321,293,293,293,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,265,264,260,253,277,262],
[290,0,274,280,283,282,291,304],
[285,276,0,266,281,274,284,272],
[286,270,284,0,281,288,298,291],
[290,267,269,269,0,298,300,306],
[297,268,276,262,252,0,272,271],
[273,259,266,252,250,278,0,275],
[288,246,278,259,244,279,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,301,261,274,287,308,298],
[282,0,307,269,292,294,299,275],
[249,243,0,280,254,277,309,261],
[289,281,270,0,263,299,282,280],
[276,258,296,287,0,312,321,292],
[263,256,273,251,238,0,272,271],
[242,251,241,268,229,278,0,292],
[252,275,289,270,258,279,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,292,298,286,268,280,274],
[288,0,334,309,308,297,300,272],
[258,216,0,257,269,275,287,252],
[252,241,293,0,276,296,278,291],
[264,242,281,274,0,266,269,262],
[282,253,275,254,284,0,264,224],
[270,250,263,272,281,286,0,273],
[276,278,298,259,288,326,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,256,251,324,209,188,209],
[296,0,276,320,346,251,255,209],
[294,274,0,226,296,319,254,250],
[299,230,324,0,323,254,257,300],
[226,204,254,227,0,204,208,180],
[341,299,231,296,346,0,325,208],
[362,295,296,293,342,225,0,273],
[341,341,300,250,370,342,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,280,264,262,271,276,267],
[267,0,277,271,269,269,282,265],
[270,273,0,267,256,264,245,260],
[286,279,283,0,273,280,264,274],
[288,281,294,277,0,277,273,273],
[279,281,286,270,273,0,262,274],
[274,268,305,286,277,288,0,284],
[283,285,290,276,277,276,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,169,265,263,334,240,239],
[335,0,314,287,335,335,241,239],
[381,236,0,332,262,381,308,332],
[285,263,218,0,262,311,166,192],
[287,215,288,288,0,311,262,334],
[216,215,169,239,239,0,191,215],
[310,309,242,384,288,359,0,309],
[311,311,218,358,216,335,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,306,278,272,312,316,263],
[231,0,277,233,254,245,293,250],
[244,273,0,228,261,220,300,255],
[272,317,322,0,276,275,304,243],
[278,296,289,274,0,260,312,292],
[238,305,330,275,290,0,331,274],
[234,257,250,246,238,219,0,207],
[287,300,295,307,258,276,343,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,299,294,296,317,298,273],
[262,0,220,296,266,233,300,222],
[251,330,0,245,299,270,268,244],
[256,254,305,0,274,276,298,242],
[254,284,251,276,0,211,299,210],
[233,317,280,274,339,0,337,275],
[252,250,282,252,251,213,0,251],
[277,328,306,308,340,275,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,273,268,282,292,281,290],
[257,0,265,248,276,265,275,284],
[277,285,0,282,269,272,271,282],
[282,302,268,0,281,280,277,297],
[268,274,281,269,0,266,273,281],
[258,285,278,270,284,0,268,288],
[269,275,279,273,277,282,0,284],
[260,266,268,253,269,262,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,270,248,260,281,249,316],
[313,0,238,279,327,311,248,327],
[280,312,0,325,311,366,250,325],
[302,271,225,0,254,277,288,302],
[290,223,239,296,0,226,238,303],
[269,239,184,273,324,0,235,313],
[301,302,300,262,312,315,0,378],
[234,223,225,248,247,237,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,261,274,278,274,265,285],
[278,0,271,277,278,276,268,287],
[289,279,0,290,293,272,285,287],
[276,273,260,0,275,273,270,278],
[272,272,257,275,0,278,257,270],
[276,274,278,277,272,0,271,278],
[285,282,265,280,293,279,0,298],
[265,263,263,272,280,272,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,300,284,266,284,304,280],
[258,0,275,267,259,272,278,269],
[250,275,0,287,255,282,293,263],
[266,283,263,0,255,260,285,264],
[284,291,295,295,0,282,307,266],
[266,278,268,290,268,0,303,281],
[246,272,257,265,243,247,0,257],
[270,281,287,286,284,269,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,286,290,263,280,298,265],
[278,0,270,264,291,289,287,281],
[264,280,0,258,280,285,275,256],
[260,286,292,0,276,298,292,256],
[287,259,270,274,0,269,279,276],
[270,261,265,252,281,0,274,274],
[252,263,275,258,271,276,0,275],
[285,269,294,294,274,276,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,280,268,278,283,293,267],
[267,0,278,265,268,287,273,244],
[270,272,0,262,277,288,287,269],
[282,285,288,0,284,311,277,274],
[272,282,273,266,0,292,284,272],
[267,263,262,239,258,0,266,245],
[257,277,263,273,266,284,0,277],
[283,306,281,276,278,305,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,367,182,276,367,274,184,275],
[183,0,274,92,365,365,182,182],
[368,276,0,185,368,276,276,184],
[274,458,365,0,458,365,458,458],
[183,185,182,92,0,92,93,275],
[276,185,274,185,458,0,275,275],
[366,368,274,92,457,275,0,182],
[275,368,366,92,275,275,368,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,272,274,275,269,295,281],
[274,0,283,290,288,288,326,300],
[278,267,0,264,264,279,304,295],
[276,260,286,0,277,280,284,270],
[275,262,286,273,0,278,289,284],
[281,262,271,270,272,0,286,284],
[255,224,246,266,261,264,0,277],
[269,250,255,280,266,266,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,279,264,297,294,283,291],
[286,0,300,275,314,268,294,279],
[271,250,0,271,289,278,308,278],
[286,275,279,0,296,287,292,288],
[253,236,261,254,0,260,281,285],
[256,282,272,263,290,0,295,278],
[267,256,242,258,269,255,0,280],
[259,271,272,262,265,272,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,339,234,287,289,315,263],
[232,0,260,258,234,314,286,287],
[211,290,0,263,235,264,288,260],
[316,292,287,0,288,318,209,263],
[263,316,315,262,0,369,315,340],
[261,236,286,232,181,0,234,287],
[235,264,262,341,235,316,0,261],
[287,263,290,287,210,263,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,272,287,303,297,307,276],
[269,0,261,290,278,302,273,257],
[278,289,0,286,288,283,283,271],
[263,260,264,0,282,274,299,273],
[247,272,262,268,0,263,280,265],
[253,248,267,276,287,0,258,253],
[243,277,267,251,270,292,0,245],
[274,293,279,277,285,297,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,245,254,243,238,243,263],
[306,0,281,270,264,260,257,275],
[305,269,0,272,267,277,273,265],
[296,280,278,0,280,269,261,289],
[307,286,283,270,0,250,274,253],
[312,290,273,281,300,0,280,286],
[307,293,277,289,276,270,0,288],
[287,275,285,261,297,264,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,299,243,264,225,254,255],
[269,0,303,243,245,239,267,229],
[251,247,0,211,226,227,238,256],
[307,307,339,0,294,288,270,267],
[286,305,324,256,0,243,284,251],
[325,311,323,262,307,0,279,281],
[296,283,312,280,266,271,0,286],
[295,321,294,283,299,269,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,286,252,271,290,258,280],
[293,0,276,280,286,291,270,327],
[264,274,0,262,283,276,244,277],
[298,270,288,0,297,301,280,308],
[279,264,267,253,0,269,238,267],
[260,259,274,249,281,0,277,290],
[292,280,306,270,312,273,0,302],
[270,223,273,242,283,260,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,258,262,263,259,272,262],
[304,0,263,289,289,287,275,288],
[292,287,0,300,286,289,274,284],
[288,261,250,0,262,283,274,286],
[287,261,264,288,0,273,277,247],
[291,263,261,267,277,0,276,280],
[278,275,276,276,273,274,0,276],
[288,262,266,264,303,270,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,250,251,284,286,271,236],
[258,0,291,276,286,320,292,288],
[300,259,0,281,293,323,276,242],
[299,274,269,0,285,307,248,289],
[266,264,257,265,0,305,263,237],
[264,230,227,243,245,0,236,218],
[279,258,274,302,287,314,0,280],
[314,262,308,261,313,332,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,234,248,317,255,266,347],
[266,0,331,248,350,271,313,315],
[316,219,0,164,265,286,202,316],
[302,302,386,0,350,318,251,353],
[233,200,285,200,0,291,185,334],
[295,279,264,232,259,0,195,345],
[284,237,348,299,365,355,0,316],
[203,235,234,197,216,205,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,263,264,271,250,278,274],
[281,0,277,275,279,284,293,286],
[287,273,0,281,285,280,288,281],
[286,275,269,0,278,284,302,285],
[279,271,265,272,0,268,281,276],
[300,266,270,266,282,0,279,291],
[272,257,262,248,269,271,0,280],
[276,264,269,265,274,259,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,269,286,280,288,288,279],
[277,0,274,290,294,276,293,294],
[281,276,0,289,282,248,289,279],
[264,260,261,0,260,257,293,254],
[270,256,268,290,0,261,303,269],
[262,274,302,293,289,0,312,291],
[262,257,261,257,247,238,0,248],
[271,256,271,296,281,259,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,255,301,216,216,216,288],
[349,0,335,313,314,243,278,334],
[295,215,0,350,243,247,230,280],
[249,237,200,0,162,215,198,181],
[334,236,307,388,0,318,270,230],
[334,307,303,335,232,0,192,252],
[334,272,320,352,280,358,0,373],
[262,216,270,369,320,298,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,299,285,294,288,275,278],
[268,0,287,293,284,280,265,270],
[251,263,0,266,270,261,254,256],
[265,257,284,0,272,268,257,248],
[256,266,280,278,0,287,270,277],
[262,270,289,282,263,0,265,257],
[275,285,296,293,280,285,0,275],
[272,280,294,302,273,293,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,308,285,282,286,267,291],
[258,0,308,258,304,267,294,285],
[242,242,0,244,261,239,259,254],
[265,292,306,0,308,269,308,318],
[268,246,289,242,0,262,269,265],
[264,283,311,281,288,0,296,285],
[283,256,291,242,281,254,0,279],
[259,265,296,232,285,265,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,283,305,294,292,341,300],
[277,0,272,265,312,267,275,264],
[267,278,0,307,325,286,332,241],
[245,285,243,0,294,261,333,252],
[256,238,225,256,0,222,297,261],
[258,283,264,289,328,0,270,236],
[209,275,218,217,253,280,0,206],
[250,286,309,298,289,314,344,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,279,286,289,289,291,269],
[252,0,278,282,270,255,280,259],
[271,272,0,286,269,251,267,273],
[264,268,264,0,258,245,291,244],
[261,280,281,292,0,268,289,280],
[261,295,299,305,282,0,311,264],
[259,270,283,259,261,239,0,240],
[281,291,277,306,270,286,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,256,267,256,285,274,245],
[266,0,264,287,262,285,292,242],
[294,286,0,240,306,297,286,269],
[283,263,310,0,296,298,308,262],
[294,288,244,254,0,270,272,281],
[265,265,253,252,280,0,299,248],
[276,258,264,242,278,251,0,267],
[305,308,281,288,269,302,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,274,281,281,281,289,286],
[247,0,267,279,250,259,261,267],
[276,283,0,297,280,275,273,281],
[269,271,253,0,251,255,273,275],
[269,300,270,299,0,268,275,271],
[269,291,275,295,282,0,274,272],
[261,289,277,277,275,276,0,283],
[264,283,269,275,279,278,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,271,266,277,284,274,261],
[273,0,268,290,235,260,293,246],
[279,282,0,301,273,298,313,287],
[284,260,249,0,263,293,294,250],
[273,315,277,287,0,268,325,247],
[266,290,252,257,282,0,292,249],
[276,257,237,256,225,258,0,255],
[289,304,263,300,303,301,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,340,307,301,278,335,299],
[276,0,281,288,248,241,257,250],
[210,269,0,261,263,254,287,246],
[243,262,289,0,264,224,278,275],
[249,302,287,286,0,274,296,296],
[272,309,296,326,276,0,288,302],
[215,293,263,272,254,262,0,285],
[251,300,304,275,254,248,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,302,263,275,256,310,280],
[254,0,247,247,257,248,264,220],
[248,303,0,257,279,266,297,236],
[287,303,293,0,298,260,289,264],
[275,293,271,252,0,243,278,262],
[294,302,284,290,307,0,296,261],
[240,286,253,261,272,254,0,210],
[270,330,314,286,288,289,340,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,276,296,275,263,263,283],
[291,0,296,315,281,279,268,275],
[274,254,0,300,244,260,262,268],
[254,235,250,0,251,237,231,251],
[275,269,306,299,0,271,276,292],
[287,271,290,313,279,0,284,281],
[287,282,288,319,274,266,0,299],
[267,275,282,299,258,269,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,282,281,276,283,267,251],
[290,0,290,285,272,301,257,282],
[268,260,0,261,241,288,250,264],
[269,265,289,0,258,282,254,263],
[274,278,309,292,0,315,276,286],
[267,249,262,268,235,0,248,243],
[283,293,300,296,274,302,0,291],
[299,268,286,287,264,307,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,280,269,254,257,249,252],
[296,0,272,293,293,294,280,292],
[270,278,0,282,273,287,259,270],
[281,257,268,0,255,262,260,264],
[296,257,277,295,0,286,274,269],
[293,256,263,288,264,0,271,284],
[301,270,291,290,276,279,0,299],
[298,258,280,286,281,266,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,287,274,269,279,283,282],
[275,0,281,270,272,268,284,250],
[263,269,0,260,264,275,263,244],
[276,280,290,0,275,276,268,271],
[281,278,286,275,0,275,281,273],
[271,282,275,274,275,0,279,261],
[267,266,287,282,269,271,0,263],
[268,300,306,279,277,289,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,286,305,272,281,289,283],
[276,0,283,288,277,271,290,272],
[264,267,0,277,264,287,279,269],
[245,262,273,0,252,273,284,248],
[278,273,286,298,0,294,274,284],
[269,279,263,277,256,0,264,266],
[261,260,271,266,276,286,0,292],
[267,278,281,302,266,284,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,266,274,261,308,258,278],
[270,0,250,263,273,307,254,270],
[284,300,0,294,289,297,250,277],
[276,287,256,0,289,298,285,290],
[289,277,261,261,0,276,268,262],
[242,243,253,252,274,0,236,268],
[292,296,300,265,282,314,0,300],
[272,280,273,260,288,282,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,295,328,293,303,272,319],
[276,0,269,296,287,246,282,267],
[255,281,0,309,330,284,269,313],
[222,254,241,0,238,248,209,211],
[257,263,220,312,0,278,260,238],
[247,304,266,302,272,0,281,302],
[278,268,281,341,290,269,0,310],
[231,283,237,339,312,248,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,279,303,256,280,263,287],
[275,0,277,300,299,301,279,310],
[271,273,0,297,270,283,263,300],
[247,250,253,0,252,272,251,278],
[294,251,280,298,0,286,284,295],
[270,249,267,278,264,0,277,266],
[287,271,287,299,266,273,0,306],
[263,240,250,272,255,284,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,285,298,281,287,256,291],
[261,0,267,274,258,273,273,283],
[265,283,0,281,271,276,288,271],
[252,276,269,0,278,262,271,273],
[269,292,279,272,0,281,285,290],
[263,277,274,288,269,0,256,276],
[294,277,262,279,265,294,0,294],
[259,267,279,277,260,274,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,277,259,274,272,235,259],
[264,0,267,233,278,249,245,266],
[273,283,0,273,293,267,261,267],
[291,317,277,0,285,294,269,276],
[276,272,257,265,0,259,278,266],
[278,301,283,256,291,0,273,293],
[315,305,289,281,272,277,0,287],
[291,284,283,274,284,257,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,229,313,272,286,308,310],
[306,0,274,310,292,320,317,292],
[321,276,0,262,304,295,341,280],
[237,240,288,0,230,282,286,261],
[278,258,246,320,0,283,297,276],
[264,230,255,268,267,0,278,273],
[242,233,209,264,253,272,0,250],
[240,258,270,289,274,277,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,256,294,257,276,254,275],
[292,0,258,292,241,274,239,258],
[294,292,0,330,243,277,260,258],
[256,258,220,0,192,227,258,272],
[293,309,307,358,0,258,336,289],
[274,276,273,323,292,0,289,273],
[296,311,290,292,214,261,0,293],
[275,292,292,278,261,277,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,299,242,304,275,294,291],
[273,0,276,255,299,280,274,281],
[251,274,0,234,269,254,259,280],
[308,295,316,0,292,296,274,313],
[246,251,281,258,0,273,257,291],
[275,270,296,254,277,0,271,294],
[256,276,291,276,293,279,0,301],
[259,269,270,237,259,256,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,270,284,268,255,266,288],
[290,0,273,304,292,271,276,266],
[280,277,0,291,281,265,256,271],
[266,246,259,0,258,272,266,243],
[282,258,269,292,0,281,293,281],
[295,279,285,278,269,0,297,307],
[284,274,294,284,257,253,0,264],
[262,284,279,307,269,243,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,270,282,255,266,277,259],
[270,0,268,249,253,236,269,248],
[280,282,0,279,246,280,271,251],
[268,301,271,0,274,262,317,290],
[295,297,304,276,0,275,309,301],
[284,314,270,288,275,0,316,264],
[273,281,279,233,241,234,0,263],
[291,302,299,260,249,286,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,387,386,289,324,289,355,225],
[163,0,290,196,292,259,257,257],
[164,260,0,226,196,291,194,160],
[261,354,324,0,290,359,288,227],
[226,258,354,260,0,292,226,288],
[261,291,259,191,258,0,321,290],
[195,293,356,262,324,229,0,258],
[325,293,390,323,262,260,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,278,269,279,272,243,315],
[289,0,295,281,293,283,272,303],
[272,255,0,269,289,278,277,279],
[281,269,281,0,267,279,292,290],
[271,257,261,283,0,285,267,296],
[278,267,272,271,265,0,244,258],
[307,278,273,258,283,306,0,300],
[235,247,271,260,254,292,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,269,274,254,256,280,279],
[256,0,256,244,254,261,254,282],
[281,294,0,266,278,267,272,303],
[276,306,284,0,265,282,285,302],
[296,296,272,285,0,287,267,294],
[294,289,283,268,263,0,286,297],
[270,296,278,265,283,264,0,302],
[271,268,247,248,256,253,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,305,303,274,287,279,274],
[261,0,286,278,287,304,267,231],
[245,264,0,279,260,282,252,272],
[247,272,271,0,251,261,247,241],
[276,263,290,299,0,283,267,292],
[263,246,268,289,267,0,245,261],
[271,283,298,303,283,305,0,281],
[276,319,278,309,258,289,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,275,280,285,291,297,286],
[258,0,254,255,230,247,262,262],
[275,296,0,266,266,262,282,274],
[270,295,284,0,279,293,290,275],
[265,320,284,271,0,275,305,281],
[259,303,288,257,275,0,286,287],
[253,288,268,260,245,264,0,257],
[264,288,276,275,269,263,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,297,287,278,268,284,295],
[281,0,296,282,279,270,288,302],
[253,254,0,247,256,237,249,264],
[263,268,303,0,260,277,275,292],
[272,271,294,290,0,274,295,293],
[282,280,313,273,276,0,293,294],
[266,262,301,275,255,257,0,281],
[255,248,286,258,257,256,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,289,264,264,267,265,273],
[260,0,254,237,271,256,226,253],
[261,296,0,265,271,271,279,279],
[286,313,285,0,295,273,270,265],
[286,279,279,255,0,254,269,280],
[283,294,279,277,296,0,271,289],
[285,324,271,280,281,279,0,294],
[277,297,271,285,270,261,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,257,261,284,240,281,249],
[311,0,320,289,310,252,278,280],
[293,230,0,280,228,242,244,240],
[289,261,270,0,274,247,292,263],
[266,240,322,276,0,247,255,279],
[310,298,308,303,303,0,292,275],
[269,272,306,258,295,258,0,282],
[301,270,310,287,271,275,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,260,278,275,284,269,263],
[279,0,267,261,254,281,252,254],
[290,283,0,288,261,291,271,272],
[272,289,262,0,269,285,249,276],
[275,296,289,281,0,295,280,285],
[266,269,259,265,255,0,248,253],
[281,298,279,301,270,302,0,273],
[287,296,278,274,265,297,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,305,222,293,296,296,277],
[276,0,323,278,310,273,244,295],
[245,227,0,256,261,255,225,263],
[328,272,294,0,318,305,284,315],
[257,240,289,232,0,246,234,312],
[254,277,295,245,304,0,288,314],
[254,306,325,266,316,262,0,292],
[273,255,287,235,238,236,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,289,272,308,260,286,277],
[262,0,282,278,280,275,290,268],
[261,268,0,288,270,256,283,271],
[278,272,262,0,265,267,284,286],
[242,270,280,285,0,251,286,271],
[290,275,294,283,299,0,291,298],
[264,260,267,266,264,259,0,266],
[273,282,279,264,279,252,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,288,292,304,274,278,290],
[266,0,287,261,299,278,277,262],
[262,263,0,246,301,271,281,252],
[258,289,304,0,305,265,286,276],
[246,251,249,245,0,249,238,260],
[276,272,279,285,301,0,282,272],
[272,273,269,264,312,268,0,260],
[260,288,298,274,290,278,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,274,283,274,254,261,291],
[292,0,281,278,258,270,250,291],
[276,269,0,306,266,280,281,306],
[267,272,244,0,243,251,243,291],
[276,292,284,307,0,275,293,306],
[296,280,270,299,275,0,253,304],
[289,300,269,307,257,297,0,294],
[259,259,244,259,244,246,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,413,413,275,275,413,275],
[274,0,412,274,412,412,412,137],
[137,138,0,275,137,137,137,275],
[137,276,275,0,275,275,275,275],
[275,138,413,275,0,275,275,275],
[275,138,413,275,275,0,413,275],
[137,138,413,275,275,137,0,275],
[275,413,275,275,275,275,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,275,286,280,287,279,304],
[268,0,275,290,268,261,287,269],
[275,275,0,273,277,303,287,299],
[264,260,277,0,273,292,291,286],
[270,282,273,277,0,275,269,296],
[263,289,247,258,275,0,289,271],
[271,263,263,259,281,261,0,292],
[246,281,251,264,254,279,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,262,270,255,268,286,280],
[292,0,265,277,279,281,271,271],
[288,285,0,287,256,281,269,276],
[280,273,263,0,274,268,271,271],
[295,271,294,276,0,289,290,275],
[282,269,269,282,261,0,276,264],
[264,279,281,279,260,274,0,256],
[270,279,274,279,275,286,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,253,290,256,269,258,263],
[283,0,263,274,284,276,271,276],
[297,287,0,263,297,271,275,268],
[260,276,287,0,277,262,272,283],
[294,266,253,273,0,290,269,289],
[281,274,279,288,260,0,281,269],
[292,279,275,278,281,269,0,270],
[287,274,282,267,261,281,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,290,274,265,273,279,288],
[272,0,286,293,289,288,277,283],
[260,264,0,276,263,267,278,265],
[276,257,274,0,262,266,295,275],
[285,261,287,288,0,281,294,293],
[277,262,283,284,269,0,280,293],
[271,273,272,255,256,270,0,270],
[262,267,285,275,257,257,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,274,276,284,256,261,272],
[277,0,285,272,279,268,281,286],
[276,265,0,279,284,269,274,286],
[274,278,271,0,300,278,290,273],
[266,271,266,250,0,260,265,269],
[294,282,281,272,290,0,271,288],
[289,269,276,260,285,279,0,281],
[278,264,264,277,281,262,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,233,336,220,220,227,306],
[259,0,273,306,291,261,210,303],
[317,277,0,322,290,320,242,323],
[214,244,228,0,261,235,185,261],
[330,259,260,289,0,218,209,247],
[330,289,230,315,332,0,330,359],
[323,340,308,365,341,220,0,326],
[244,247,227,289,303,191,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,298,298,277,312,268,313],
[268,0,246,303,277,291,292,298],
[252,304,0,293,269,282,288,311],
[252,247,257,0,268,284,236,281],
[273,273,281,282,0,313,282,308],
[238,259,268,266,237,0,257,305],
[282,258,262,314,268,293,0,312],
[237,252,239,269,242,245,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,285,252,250,293,307,319],
[248,0,277,270,272,295,293,282],
[265,273,0,284,270,291,260,303],
[298,280,266,0,271,293,291,294],
[300,278,280,279,0,298,275,290],
[257,255,259,257,252,0,271,269],
[243,257,290,259,275,279,0,296],
[231,268,247,256,260,281,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,270,256,309,275,278,263],
[280,0,285,291,314,265,278,287],
[280,265,0,271,287,265,263,258],
[294,259,279,0,293,273,274,288],
[241,236,263,257,0,262,257,264],
[275,285,285,277,288,0,273,261],
[272,272,287,276,293,277,0,292],
[287,263,292,262,286,289,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,285,278,284,268,274,283],
[268,0,277,278,268,252,263,261],
[265,273,0,264,280,265,274,250],
[272,272,286,0,267,274,269,270],
[266,282,270,283,0,267,275,259],
[282,298,285,276,283,0,285,273],
[276,287,276,281,275,265,0,265],
[267,289,300,280,291,277,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,278,258,281,295,309,285],
[246,0,275,250,277,284,272,285],
[272,275,0,276,279,290,291,286],
[292,300,274,0,292,282,291,293],
[269,273,271,258,0,270,288,272],
[255,266,260,268,280,0,275,281],
[241,278,259,259,262,275,0,259],
[265,265,264,257,278,269,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,240,269,267,279,289,264],
[253,0,256,247,247,254,253,254],
[310,294,0,297,305,311,291,273],
[281,303,253,0,269,302,290,260],
[283,303,245,281,0,282,264,276],
[271,296,239,248,268,0,267,250],
[261,297,259,260,286,283,0,251],
[286,296,277,290,274,300,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,279,291,278,269,266,265],
[300,0,279,284,267,278,288,278],
[271,271,0,282,278,282,276,272],
[259,266,268,0,249,267,272,270],
[272,283,272,301,0,267,284,273],
[281,272,268,283,283,0,268,274],
[284,262,274,278,266,282,0,280],
[285,272,278,280,277,276,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,263,279,276,230,265,251],
[268,0,278,283,253,235,266,259],
[287,272,0,291,265,267,245,283],
[271,267,259,0,271,263,270,275],
[274,297,285,279,0,247,257,257],
[320,315,283,287,303,0,294,275],
[285,284,305,280,293,256,0,311],
[299,291,267,275,293,275,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,261,260,248,252,273,288],
[289,0,261,257,266,267,281,304],
[289,289,0,266,273,281,280,310],
[290,293,284,0,274,291,285,300],
[302,284,277,276,0,272,274,322],
[298,283,269,259,278,0,269,302],
[277,269,270,265,276,281,0,290],
[262,246,240,250,228,248,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,289,278,291,284,292,252],
[265,0,269,287,284,290,284,277],
[261,281,0,264,281,295,285,257],
[272,263,286,0,276,276,288,267],
[259,266,269,274,0,273,276,248],
[266,260,255,274,277,0,262,256],
[258,266,265,262,274,288,0,238],
[298,273,293,283,302,294,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,309,294,259,290,236,305],
[283,0,243,248,247,264,285,288],
[241,307,0,301,278,335,289,315],
[256,302,249,0,287,276,270,300],
[291,303,272,263,0,278,284,292],
[260,286,215,274,272,0,244,296],
[314,265,261,280,266,306,0,309],
[245,262,235,250,258,254,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,280,276,268,268,262,272],
[296,0,292,284,273,279,283,271],
[270,258,0,259,255,259,260,255],
[274,266,291,0,271,277,273,266],
[282,277,295,279,0,279,275,286],
[282,271,291,273,271,0,269,277],
[288,267,290,277,275,281,0,277],
[278,279,295,284,264,273,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,262,241,306,283,249,266],
[286,0,278,276,328,278,275,295],
[288,272,0,264,294,298,259,276],
[309,274,286,0,310,311,284,307],
[244,222,256,240,0,280,247,221],
[267,272,252,239,270,0,249,254],
[301,275,291,266,303,301,0,286],
[284,255,274,243,329,296,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,284,300,274,301,282,282],
[291,0,285,278,246,270,268,273],
[266,265,0,275,259,304,284,278],
[250,272,275,0,244,295,270,259],
[276,304,291,306,0,315,275,281],
[249,280,246,255,235,0,234,271],
[268,282,266,280,275,316,0,277],
[268,277,272,291,269,279,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,279,295,291,293,275,279],
[274,0,246,275,313,290,258,246],
[271,304,0,249,307,291,292,263],
[255,275,301,0,276,295,268,262],
[259,237,243,274,0,289,256,276],
[257,260,259,255,261,0,265,237],
[275,292,258,282,294,285,0,261],
[271,304,287,288,274,313,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,253,262,278,245,265,258],
[292,0,268,290,255,257,261,258],
[297,282,0,287,294,275,284,275],
[288,260,263,0,267,267,273,265],
[272,295,256,283,0,297,291,263],
[305,293,275,283,253,0,273,283],
[285,289,266,277,259,277,0,267],
[292,292,275,285,287,267,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,253,262,265,288,288,283],
[275,0,271,266,275,292,287,286],
[297,279,0,280,279,284,283,274],
[288,284,270,0,274,287,283,285],
[285,275,271,276,0,281,295,282],
[262,258,266,263,269,0,277,276],
[262,263,267,267,255,273,0,267],
[267,264,276,265,268,274,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,282,287,300,302,306,298],
[297,0,243,316,336,288,298,287],
[268,307,0,317,300,301,330,268],
[263,234,233,0,290,256,288,245],
[250,214,250,260,0,219,277,266],
[248,262,249,294,331,0,290,289],
[244,252,220,262,273,260,0,265],
[252,263,282,305,284,261,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,276,266,276,264,268,265],
[277,0,265,272,276,258,274,269],
[274,285,0,279,290,283,283,281],
[284,278,271,0,268,280,283,277],
[274,274,260,282,0,273,285,284],
[286,292,267,270,277,0,280,282],
[282,276,267,267,265,270,0,279],
[285,281,269,273,266,268,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,238,252,255,261,259,285],
[281,0,274,292,288,276,276,281],
[312,276,0,283,283,290,275,308],
[298,258,267,0,250,267,258,271],
[295,262,267,300,0,281,262,295],
[289,274,260,283,269,0,267,315],
[291,274,275,292,288,283,0,282],
[265,269,242,279,255,235,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,275,284,273,273,276,265],
[269,0,281,275,278,261,272,283],
[275,269,0,269,272,261,280,253],
[266,275,281,0,292,253,261,264],
[277,272,278,258,0,271,286,255],
[277,289,289,297,279,0,278,249],
[274,278,270,289,264,272,0,259],
[285,267,297,286,295,301,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,305,301,298,268,285,253],
[253,0,300,275,275,211,212,243],
[245,250,0,314,267,293,236,230],
[249,275,236,0,272,260,206,231],
[252,275,283,278,0,242,259,248],
[282,339,257,290,308,0,225,253],
[265,338,314,344,291,325,0,276],
[297,307,320,319,302,297,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,285,292,282,299,287,283],
[281,0,275,292,276,295,283,284],
[265,275,0,289,290,280,276,269],
[258,258,261,0,277,277,273,269],
[268,274,260,273,0,283,264,255],
[251,255,270,273,267,0,267,277],
[263,267,274,277,286,283,0,275],
[267,266,281,281,295,273,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,265,251,263,286,277,258],
[276,0,259,258,257,233,248,243],
[285,291,0,255,282,279,266,278],
[299,292,295,0,278,279,273,282],
[287,293,268,272,0,263,280,277],
[264,317,271,271,287,0,265,276],
[273,302,284,277,270,285,0,265],
[292,307,272,268,273,274,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,267,270,248,294,269,247],
[285,0,298,300,275,296,319,297],
[283,252,0,276,241,267,271,239],
[280,250,274,0,256,287,267,244],
[302,275,309,294,0,289,296,279],
[256,254,283,263,261,0,273,272],
[281,231,279,283,254,277,0,271],
[303,253,311,306,271,278,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,261,278,284,274,241,247],
[225,0,250,252,244,255,256,243],
[289,300,0,263,294,293,281,263],
[272,298,287,0,294,317,281,279],
[266,306,256,256,0,258,288,254],
[276,295,257,233,292,0,275,256],
[309,294,269,269,262,275,0,245],
[303,307,287,271,296,294,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,280,284,275,286,288,284],
[253,0,269,251,254,253,245,235],
[270,281,0,274,270,275,260,273],
[266,299,276,0,270,277,295,281],
[275,296,280,280,0,277,267,278],
[264,297,275,273,273,0,269,284],
[262,305,290,255,283,281,0,261],
[266,315,277,269,272,266,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,297,273,232,237,231,324],
[241,0,325,249,273,273,250,312],
[253,225,0,253,212,216,227,299],
[277,301,297,0,284,316,247,362],
[318,277,338,266,0,298,295,331],
[313,277,334,234,252,0,247,342],
[319,300,323,303,255,303,0,351],
[226,238,251,188,219,208,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,256,276,278,258,266,258],
[278,0,263,288,284,279,298,281],
[294,287,0,299,301,286,294,265],
[274,262,251,0,270,281,259,276],
[272,266,249,280,0,288,277,275],
[292,271,264,269,262,0,265,243],
[284,252,256,291,273,285,0,271],
[292,269,285,274,275,307,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,261,276,303,272,289,299],
[276,0,292,272,283,286,293,299],
[289,258,0,274,269,273,282,281],
[274,278,276,0,274,265,276,275],
[247,267,281,276,0,264,292,281],
[278,264,277,285,286,0,304,299],
[261,257,268,274,258,246,0,285],
[251,251,269,275,269,251,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,241,331,291,289,321,315],
[251,0,279,254,289,265,295,317],
[309,271,0,269,325,285,317,310],
[219,296,281,0,291,231,283,285],
[259,261,225,259,0,237,287,329],
[261,285,265,319,313,0,335,307],
[229,255,233,267,263,215,0,272],
[235,233,240,265,221,243,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,281,265,279,272,291,276],
[271,0,275,278,267,260,280,277],
[269,275,0,250,262,269,269,266],
[285,272,300,0,266,259,283,259],
[271,283,288,284,0,280,300,263],
[278,290,281,291,270,0,292,295],
[259,270,281,267,250,258,0,249],
[274,273,284,291,287,255,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,284,314,278,268,287,261],
[270,0,282,291,266,287,292,279],
[266,268,0,291,278,271,289,285],
[236,259,259,0,263,272,271,251],
[272,284,272,287,0,282,282,267],
[282,263,279,278,268,0,271,257],
[263,258,261,279,268,279,0,246],
[289,271,265,299,283,293,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,315,295,273,246,299,268],
[244,0,296,248,229,261,260,259],
[235,254,0,235,256,234,284,263],
[255,302,315,0,297,292,257,289],
[277,321,294,253,0,280,273,297],
[304,289,316,258,270,0,255,291],
[251,290,266,293,277,295,0,292],
[282,291,287,261,253,259,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,286,282,279,271,264,280],
[272,0,290,260,252,277,275,265],
[264,260,0,296,262,274,268,281],
[268,290,254,0,273,272,278,279],
[271,298,288,277,0,270,277,287],
[279,273,276,278,280,0,273,254],
[286,275,282,272,273,277,0,287],
[270,285,269,271,263,296,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,294,283,277,309,318,272],
[243,0,236,241,255,262,277,250],
[256,314,0,256,282,281,302,292],
[267,309,294,0,274,296,315,271],
[273,295,268,276,0,277,298,265],
[241,288,269,254,273,0,304,276],
[232,273,248,235,252,246,0,257],
[278,300,258,279,285,274,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,263,272,257,261,266,268],
[267,0,262,266,255,255,266,243],
[287,288,0,288,273,288,277,278],
[278,284,262,0,280,278,264,275],
[293,295,277,270,0,277,283,266],
[289,295,262,272,273,0,286,284],
[284,284,273,286,267,264,0,268],
[282,307,272,275,284,266,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,284,280,281,285,278,272],
[267,0,291,263,273,264,282,277],
[266,259,0,260,256,270,276,276],
[270,287,290,0,260,281,280,275],
[269,277,294,290,0,281,294,280],
[265,286,280,269,269,0,275,258],
[272,268,274,270,256,275,0,266],
[278,273,274,275,270,292,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,280,262,271,268,252,276],
[282,0,277,250,259,253,268,258],
[270,273,0,254,284,266,274,276],
[288,300,296,0,274,285,293,296],
[279,291,266,276,0,274,280,266],
[282,297,284,265,276,0,251,274],
[298,282,276,257,270,299,0,263],
[274,292,274,254,284,276,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,216,253,251,276,282,296],
[252,0,217,252,269,217,329,331],
[334,333,0,285,349,252,301,330],
[297,298,265,0,280,280,359,343],
[299,281,201,270,0,251,283,362],
[274,333,298,270,299,0,317,365],
[268,221,249,191,267,233,0,269],
[254,219,220,207,188,185,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,266,251,283,274,261,274],
[280,0,258,256,282,301,280,261],
[284,292,0,269,286,270,283,251],
[299,294,281,0,295,277,280,273],
[267,268,264,255,0,285,240,260],
[276,249,280,273,265,0,264,268],
[289,270,267,270,310,286,0,275],
[276,289,299,277,290,282,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,284,302,291,268,304,329],
[250,0,252,308,280,308,283,306],
[266,298,0,318,252,333,333,291],
[248,242,232,0,252,294,260,297],
[259,270,298,298,0,329,275,301],
[282,242,217,256,221,0,232,270],
[246,267,217,290,275,318,0,327],
[221,244,259,253,249,280,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,286,285,275,305,271,262],
[270,0,260,258,266,302,260,246],
[264,290,0,280,289,304,274,272],
[265,292,270,0,279,306,262,279],
[275,284,261,271,0,304,270,257],
[245,248,246,244,246,0,236,219],
[279,290,276,288,280,314,0,266],
[288,304,278,271,293,331,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,277,271,271,269,256,292],
[265,0,272,261,242,270,266,269],
[273,278,0,245,287,264,274,231],
[279,289,305,0,274,276,268,282],
[279,308,263,276,0,257,258,257],
[281,280,286,274,293,0,258,272],
[294,284,276,282,292,292,0,267],
[258,281,319,268,293,278,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,266,256,290,290,266,260],
[272,0,305,295,315,307,276,270],
[284,245,0,269,284,285,268,267],
[294,255,281,0,301,301,258,270],
[260,235,266,249,0,267,256,254],
[260,243,265,249,283,0,256,249],
[284,274,282,292,294,294,0,289],
[290,280,283,280,296,301,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,267,257,317,285,279,252],
[270,0,307,267,282,322,304,298],
[283,243,0,283,320,300,305,260],
[293,283,267,0,349,270,316,273],
[233,268,230,201,0,248,237,228],
[265,228,250,280,302,0,247,261],
[271,246,245,234,313,303,0,269],
[298,252,290,277,322,289,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,265,239,262,275,259,273],
[273,0,253,261,268,287,266,257],
[285,297,0,281,277,301,262,261],
[311,289,269,0,276,275,284,277],
[288,282,273,274,0,281,287,250],
[275,263,249,275,269,0,275,269],
[291,284,288,266,263,275,0,280],
[277,293,289,273,300,281,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,303,264,270,263,289,266],
[273,0,269,274,244,267,282,270],
[247,281,0,269,258,267,289,264],
[286,276,281,0,263,273,298,284],
[280,306,292,287,0,292,295,259],
[287,283,283,277,258,0,291,264],
[261,268,261,252,255,259,0,256],
[284,280,286,266,291,286,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,277,276,279,284,267,271],
[295,0,290,271,272,295,288,297],
[273,260,0,276,262,289,275,300],
[274,279,274,0,267,276,280,275],
[271,278,288,283,0,286,271,282],
[266,255,261,274,264,0,266,273],
[283,262,275,270,279,284,0,304],
[279,253,250,275,268,277,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,271,222,247,275,277,320],
[240,0,257,251,306,217,293,267],
[279,293,0,237,259,215,220,293],
[328,299,313,0,320,268,335,311],
[303,244,291,230,0,260,288,283],
[275,333,335,282,290,0,323,337],
[273,257,330,215,262,227,0,287],
[230,283,257,239,267,213,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,280,272,254,246,293,259],
[344,0,274,292,283,277,304,276],
[270,276,0,269,290,265,287,286],
[278,258,281,0,255,254,297,269],
[296,267,260,295,0,258,295,273],
[304,273,285,296,292,0,299,290],
[257,246,263,253,255,251,0,245],
[291,274,264,281,277,260,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,274,252,294,286,295,276],
[278,0,280,276,300,283,282,264],
[276,270,0,264,267,281,301,260],
[298,274,286,0,289,284,309,254],
[256,250,283,261,0,265,284,250],
[264,267,269,266,285,0,288,255],
[255,268,249,241,266,262,0,245],
[274,286,290,296,300,295,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,305,291,279,250,276,284],
[276,0,294,264,299,267,252,280],
[245,256,0,259,275,234,294,286],
[259,286,291,0,296,278,295,288],
[271,251,275,254,0,265,255,280],
[300,283,316,272,285,0,301,299],
[274,298,256,255,295,249,0,311],
[266,270,264,262,270,251,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,245,246,244,269,262,258],
[263,0,250,229,225,217,281,260],
[305,300,0,262,257,280,295,292],
[304,321,288,0,282,273,295,282],
[306,325,293,268,0,277,321,325],
[281,333,270,277,273,0,284,281],
[288,269,255,255,229,266,0,315],
[292,290,258,268,225,269,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,262,311,188,192,237,215],
[360,0,264,314,313,265,312,310],
[288,286,0,264,358,311,337,311],
[239,236,286,0,258,213,329,286],
[362,237,192,292,0,263,288,290],
[358,285,239,337,287,0,337,287],
[313,238,213,221,262,213,0,240],
[335,240,239,264,260,263,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,262,289,302,258,282,282],
[269,0,287,325,325,279,273,307],
[288,263,0,313,310,288,277,317],
[261,225,237,0,254,253,219,282],
[248,225,240,296,0,272,236,242],
[292,271,262,297,278,0,228,299],
[268,277,273,331,314,322,0,310],
[268,243,233,268,308,251,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,267,308,306,231,273,272],
[281,0,282,283,232,263,251,228],
[283,268,0,322,270,268,306,269],
[242,267,228,0,251,228,267,231],
[244,318,280,299,0,267,286,302],
[319,287,282,322,283,0,268,215],
[277,299,244,283,264,282,0,298],
[278,322,281,319,248,335,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,275,272,264,284,269,275],
[279,0,274,265,276,278,268,286],
[275,276,0,254,245,276,283,259],
[278,285,296,0,272,282,279,277],
[286,274,305,278,0,285,284,286],
[266,272,274,268,265,0,285,287],
[281,282,267,271,266,265,0,253],
[275,264,291,273,264,263,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,269,271,268,273,282,268],
[276,0,287,286,267,309,271,307],
[281,263,0,287,247,284,293,268],
[279,264,263,0,276,291,306,278],
[282,283,303,274,0,301,291,286],
[277,241,266,259,249,0,302,292],
[268,279,257,244,259,248,0,243],
[282,243,282,272,264,258,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,275,288,276,289,296,279],
[270,0,278,291,283,293,302,277],
[275,272,0,293,296,289,305,286],
[262,259,257,0,275,277,284,268],
[274,267,254,275,0,264,280,275],
[261,257,261,273,286,0,293,269],
[254,248,245,266,270,257,0,261],
[271,273,264,282,275,281,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,269,288,290,263,307,291],
[259,0,268,242,288,255,292,276],
[281,282,0,286,279,275,285,276],
[262,308,264,0,294,284,300,272],
[260,262,271,256,0,282,300,287],
[287,295,275,266,268,0,297,286],
[243,258,265,250,250,253,0,263],
[259,274,274,278,263,264,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,259,275,282,245,260,264],
[288,0,266,280,273,262,263,287],
[291,284,0,284,290,275,282,282],
[275,270,266,0,289,260,251,267],
[268,277,260,261,0,263,269,274],
[305,288,275,290,287,0,277,298],
[290,287,268,299,281,273,0,284],
[286,263,268,283,276,252,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,264,290,260,264,289,275],
[290,0,283,287,277,304,273,265],
[286,267,0,274,279,267,244,287],
[260,263,276,0,273,306,258,276],
[290,273,271,277,0,281,270,250],
[286,246,283,244,269,0,258,253],
[261,277,306,292,280,292,0,295],
[275,285,263,274,300,297,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,292,284,273,282,279,282],
[271,0,278,284,285,289,285,272],
[258,272,0,268,271,295,277,273],
[266,266,282,0,276,292,275,281],
[277,265,279,274,0,273,278,255],
[268,261,255,258,277,0,266,256],
[271,265,273,275,272,284,0,266],
[268,278,277,269,295,294,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,260,245,247,263,241,251],
[260,0,226,268,249,244,243,234],
[290,324,0,268,272,287,273,289],
[305,282,282,0,284,271,257,260],
[303,301,278,266,0,252,261,250],
[287,306,263,279,298,0,252,237],
[309,307,277,293,289,298,0,262],
[299,316,261,290,300,313,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,277,280,282,262,280,267],
[275,0,269,270,279,276,273,271],
[273,281,0,294,269,276,290,272],
[270,280,256,0,274,249,281,265],
[268,271,281,276,0,261,292,293],
[288,274,274,301,289,0,278,279],
[270,277,260,269,258,272,0,276],
[283,279,278,285,257,271,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,276,281,265,259,263,256],
[281,0,283,268,273,281,270,251],
[274,267,0,290,272,278,248,269],
[269,282,260,0,264,248,252,246],
[285,277,278,286,0,285,274,267],
[291,269,272,302,265,0,275,273],
[287,280,302,298,276,275,0,275],
[294,299,281,304,283,277,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,271,252,267,261,266,285],
[262,0,284,265,285,275,286,274],
[279,266,0,263,283,243,282,262],
[298,285,287,0,304,268,313,290],
[283,265,267,246,0,269,265,269],
[289,275,307,282,281,0,295,282],
[284,264,268,237,285,255,0,285],
[265,276,288,260,281,268,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,277,277,268,283,263,276],
[267,0,283,291,264,278,263,287],
[273,267,0,277,278,253,251,266],
[273,259,273,0,248,269,277,269],
[282,286,272,302,0,277,266,289],
[267,272,297,281,273,0,293,301],
[287,287,299,273,284,257,0,306],
[274,263,284,281,261,249,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,277,288,280,259,293,270],
[291,0,278,305,275,283,304,299],
[273,272,0,308,256,265,290,263],
[262,245,242,0,270,260,299,281],
[270,275,294,280,0,279,298,286],
[291,267,285,290,271,0,302,262],
[257,246,260,251,252,248,0,234],
[280,251,287,269,264,288,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,273,276,283,267,261,282],
[264,0,275,256,262,258,260,281],
[277,275,0,268,270,261,265,268],
[274,294,282,0,272,273,278,266],
[267,288,280,278,0,281,270,292],
[283,292,289,277,269,0,255,287],
[289,290,285,272,280,295,0,286],
[268,269,282,284,258,263,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,267,273,264,294,263,291],
[271,0,217,255,259,308,264,306],
[283,333,0,268,245,304,287,275],
[277,295,282,0,291,293,269,266],
[286,291,305,259,0,315,278,307],
[256,242,246,257,235,0,283,268],
[287,286,263,281,272,267,0,294],
[259,244,275,284,243,282,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,273,281,276,274,261,276],
[271,0,265,259,271,271,260,285],
[277,285,0,290,278,270,276,277],
[269,291,260,0,276,261,267,280],
[274,279,272,274,0,265,268,288],
[276,279,280,289,285,0,275,298],
[289,290,274,283,282,275,0,295],
[274,265,273,270,262,252,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,270,290,289,280,287,294],
[274,0,276,298,298,266,287,301],
[280,274,0,305,288,279,291,295],
[260,252,245,0,259,250,255,281],
[261,252,262,291,0,265,278,264],
[270,284,271,300,285,0,291,299],
[263,263,259,295,272,259,0,282],
[256,249,255,269,286,251,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,263,277,238,241,245,252],
[297,0,290,282,279,269,255,285],
[287,260,0,280,260,255,256,261],
[273,268,270,0,266,262,251,238],
[312,271,290,284,0,253,257,271],
[309,281,295,288,297,0,272,287],
[305,295,294,299,293,278,0,264],
[298,265,289,312,279,263,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,295,295,294,270,284,302],
[283,0,295,276,293,254,277,289],
[255,255,0,266,270,248,265,302],
[255,274,284,0,301,239,265,283],
[256,257,280,249,0,262,252,295],
[280,296,302,311,288,0,274,322],
[266,273,285,285,298,276,0,287],
[248,261,248,267,255,228,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,294,316,260,288,322,277],
[264,0,301,285,260,269,290,281],
[256,249,0,296,237,260,276,280],
[234,265,254,0,225,240,265,254],
[290,290,313,325,0,294,325,259],
[262,281,290,310,256,0,289,264],
[228,260,274,285,225,261,0,249],
[273,269,270,296,291,286,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,285,298,297,283,300,273],
[258,0,241,236,243,247,277,242],
[265,309,0,307,300,300,323,280],
[252,314,243,0,273,256,299,250],
[253,307,250,277,0,291,294,264],
[267,303,250,294,259,0,293,257],
[250,273,227,251,256,257,0,241],
[277,308,270,300,286,293,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,342,308,343,326,270,294,328],
[208,0,242,289,243,308,314,243],
[242,308,0,304,326,287,308,328],
[207,261,246,0,277,261,333,311],
[224,307,224,273,0,288,347,313],
[280,242,263,289,262,0,294,295],
[256,236,242,217,203,256,0,206],
[222,307,222,239,237,255,344,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,371,351,325,321,353,337],
[282,0,328,291,285,251,294,301],
[179,222,0,290,244,239,256,268],
[199,259,260,0,223,266,209,305],
[225,265,306,327,0,284,341,276],
[229,299,311,284,266,0,275,305],
[197,256,294,341,209,275,0,281],
[213,249,282,245,274,245,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,269,295,287,260,255,265],
[279,0,281,307,311,271,286,291],
[281,269,0,280,307,268,275,274],
[255,243,270,0,298,257,261,276],
[263,239,243,252,0,244,243,249],
[290,279,282,293,306,0,275,290],
[295,264,275,289,307,275,0,282],
[285,259,276,274,301,260,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,249,279,294,275,269,278],
[282,0,254,263,266,283,249,280],
[301,296,0,282,285,292,271,302],
[271,287,268,0,259,286,277,274],
[256,284,265,291,0,289,267,281],
[275,267,258,264,261,0,266,286],
[281,301,279,273,283,284,0,274],
[272,270,248,276,269,264,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,272,277,296,289,275,305],
[258,0,274,278,307,283,286,283],
[278,276,0,261,309,310,269,290],
[273,272,289,0,304,293,294,298],
[254,243,241,246,0,285,249,281],
[261,267,240,257,265,0,237,270],
[275,264,281,256,301,313,0,291],
[245,267,260,252,269,280,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,289,292,282,280,290,282],
[277,0,267,284,275,279,281,281],
[261,283,0,279,290,272,299,277],
[258,266,271,0,266,271,286,266],
[268,275,260,284,0,272,286,275],
[270,271,278,279,278,0,292,283],
[260,269,251,264,264,258,0,252],
[268,269,273,284,275,267,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,272,277,273,294,291,273],
[285,0,283,289,295,295,284,271],
[278,267,0,275,275,292,280,279],
[273,261,275,0,266,294,293,275],
[277,255,275,284,0,310,280,263],
[256,255,258,256,240,0,286,247],
[259,266,270,257,270,264,0,241],
[277,279,271,275,287,303,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,269,242,269,296,270,252],
[298,0,285,282,269,309,278,283],
[281,265,0,282,266,282,261,287],
[308,268,268,0,274,281,269,270],
[281,281,284,276,0,264,270,280],
[254,241,268,269,286,0,250,261],
[280,272,289,281,280,300,0,272],
[298,267,263,280,270,289,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,335,286,270,275,280,276,306],
[215,0,239,240,225,194,255,241],
[264,311,0,281,273,305,282,266],
[280,310,269,0,292,281,284,278],
[275,325,277,258,0,291,283,286],
[270,356,245,269,259,0,306,260],
[274,295,268,266,267,244,0,238],
[244,309,284,272,264,290,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,293,269,268,279,267,262],
[281,0,275,279,279,309,257,280],
[257,275,0,263,254,263,260,268],
[281,271,287,0,258,276,272,286],
[282,271,296,292,0,279,276,296],
[271,241,287,274,271,0,252,272],
[283,293,290,278,274,298,0,277],
[288,270,282,264,254,278,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,250,273,257,253,285,251],
[283,0,278,292,288,268,280,299],
[300,272,0,306,304,290,305,301],
[277,258,244,0,272,260,287,284],
[293,262,246,278,0,255,292,285],
[297,282,260,290,295,0,303,296],
[265,270,245,263,258,247,0,286],
[299,251,249,266,265,254,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,262,281,257,262,278,277],
[229,0,258,258,242,248,251,261],
[288,292,0,256,258,260,260,271],
[269,292,294,0,276,297,295,276],
[293,308,292,274,0,273,297,305],
[288,302,290,253,277,0,269,289],
[272,299,290,255,253,281,0,280],
[273,289,279,274,245,261,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,238,283,283,267,256,262],
[291,0,275,277,293,284,264,266],
[312,275,0,278,291,287,281,285],
[267,273,272,0,286,286,262,276],
[267,257,259,264,0,273,260,257],
[283,266,263,264,277,0,266,256],
[294,286,269,288,290,284,0,277],
[288,284,265,274,293,294,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,246,273,289,265,266,279],
[299,0,290,290,289,275,281,304],
[304,260,0,294,280,270,303,285],
[277,260,256,0,280,258,280,280],
[261,261,270,270,0,243,279,291],
[285,275,280,292,307,0,284,289],
[284,269,247,270,271,266,0,282],
[271,246,265,270,259,261,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,261,255,273,284,285,266],
[290,0,269,279,266,286,272,259],
[289,281,0,272,306,284,287,277],
[295,271,278,0,274,289,295,299],
[277,284,244,276,0,273,266,288],
[266,264,266,261,277,0,256,281],
[265,278,263,255,284,294,0,255],
[284,291,273,251,262,269,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,220,275,328,166,329,274],
[272,0,217,274,273,220,383,383],
[330,333,0,221,219,331,384,384],
[275,276,329,0,329,275,438,329],
[222,277,331,221,0,331,274,387],
[384,330,219,275,219,0,384,384],
[221,167,166,112,276,166,0,277],
[276,167,166,221,163,166,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,260,282,269,260,258,233],
[317,0,278,285,254,292,270,280],
[290,272,0,302,274,291,289,284],
[268,265,248,0,260,256,256,255],
[281,296,276,290,0,270,293,266],
[290,258,259,294,280,0,274,263],
[292,280,261,294,257,276,0,261],
[317,270,266,295,284,287,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,297,278,264,285,291,279],
[281,0,269,244,270,269,260,273],
[253,281,0,262,271,269,254,284],
[272,306,288,0,296,278,268,301],
[286,280,279,254,0,251,261,266],
[265,281,281,272,299,0,276,293],
[259,290,296,282,289,274,0,286],
[271,277,266,249,284,257,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,279,262,291,260,288,304],
[303,0,272,266,280,286,308,273],
[271,278,0,258,278,295,291,316],
[288,284,292,0,286,269,295,308],
[259,270,272,264,0,294,281,284],
[290,264,255,281,256,0,298,281],
[262,242,259,255,269,252,0,257],
[246,277,234,242,266,269,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,289,282,277,268,283,279],
[265,0,276,278,271,264,272,281],
[261,274,0,284,260,267,267,266],
[268,272,266,0,261,253,257,262],
[273,279,290,289,0,278,269,284],
[282,286,283,297,272,0,286,281],
[267,278,283,293,281,264,0,290],
[271,269,284,288,266,269,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,270,272,264,240,260,249],
[297,0,248,253,301,272,289,288],
[280,302,0,273,276,279,267,292],
[278,297,277,0,284,269,289,320],
[286,249,274,266,0,272,290,271],
[310,278,271,281,278,0,309,317],
[290,261,283,261,260,241,0,271],
[301,262,258,230,279,233,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,280,295,281,293,267,291],
[275,0,281,273,300,300,278,298],
[270,269,0,270,278,292,276,277],
[255,277,280,0,277,284,268,273],
[269,250,272,273,0,285,278,279],
[257,250,258,266,265,0,267,258],
[283,272,274,282,272,283,0,285],
[259,252,273,277,271,292,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,339,293,300,292,275,329,299],
[211,0,254,260,253,260,275,252],
[257,296,0,282,244,238,310,279],
[250,290,268,0,270,249,292,262],
[258,297,306,280,0,268,321,277],
[275,290,312,301,282,0,313,290],
[221,275,240,258,229,237,0,235],
[251,298,271,288,273,260,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,265,264,253,282,281,274],
[290,0,267,284,289,280,290,280],
[285,283,0,278,283,303,266,271],
[286,266,272,0,275,293,268,280],
[297,261,267,275,0,285,261,272],
[268,270,247,257,265,0,267,267],
[269,260,284,282,289,283,0,273],
[276,270,279,270,278,283,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,297,275,279,285,297,270],
[272,0,290,264,284,289,288,275],
[253,260,0,241,261,264,259,269],
[275,286,309,0,293,298,294,285],
[271,266,289,257,0,276,287,264],
[265,261,286,252,274,0,292,262],
[253,262,291,256,263,258,0,260],
[280,275,281,265,286,288,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,267,269,275,261,259,265],
[290,0,276,270,281,281,271,290],
[283,274,0,256,252,276,264,277],
[281,280,294,0,279,269,282,303],
[275,269,298,271,0,271,271,291],
[289,269,274,281,279,0,275,298],
[291,279,286,268,279,275,0,298],
[285,260,273,247,259,252,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,260,240,267,268,277,249],
[283,0,269,255,265,251,273,261],
[290,281,0,254,273,258,288,273],
[310,295,296,0,290,274,293,275],
[283,285,277,260,0,296,289,287],
[282,299,292,276,254,0,276,250],
[273,277,262,257,261,274,0,259],
[301,289,277,275,263,300,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,307,299,296,271,276,252],
[233,0,287,285,270,266,262,276],
[243,263,0,289,273,286,304,271],
[251,265,261,0,246,247,262,273],
[254,280,277,304,0,244,280,254],
[279,284,264,303,306,0,275,257],
[274,288,246,288,270,275,0,261],
[298,274,279,277,296,293,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,276,270,272,266,277,275],
[252,0,240,254,245,259,260,251],
[274,310,0,274,297,268,287,300],
[280,296,276,0,280,286,268,295],
[278,305,253,270,0,286,267,278],
[284,291,282,264,264,0,277,278],
[273,290,263,282,283,273,0,277],
[275,299,250,255,272,272,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,279,278,281,267,264,257],
[288,0,297,266,291,282,285,282],
[271,253,0,264,276,274,258,256],
[272,284,286,0,271,272,269,269],
[269,259,274,279,0,258,258,252],
[283,268,276,278,292,0,268,269],
[286,265,292,281,292,282,0,265],
[293,268,294,281,298,281,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,256,275,255,292,253,288],
[271,0,288,292,285,287,275,296],
[294,262,0,278,291,288,268,273],
[275,258,272,0,283,286,273,283],
[295,265,259,267,0,282,260,264],
[258,263,262,264,268,0,267,264],
[297,275,282,277,290,283,0,277],
[262,254,277,267,286,286,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,258,260,263,271,254,285],
[271,0,258,268,290,264,263,287],
[292,292,0,291,282,290,270,295],
[290,282,259,0,293,268,275,289],
[287,260,268,257,0,292,287,280],
[279,286,260,282,258,0,263,280],
[296,287,280,275,263,287,0,294],
[265,263,255,261,270,270,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,267,267,277,264,278,264],
[278,0,276,281,266,269,278,281],
[283,274,0,292,275,293,275,305],
[283,269,258,0,244,269,265,270],
[273,284,275,306,0,307,305,300],
[286,281,257,281,243,0,279,269],
[272,272,275,285,245,271,0,270],
[286,269,245,280,250,281,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,287,294,299,264,277,273],
[285,0,240,258,296,256,298,279],
[263,310,0,268,341,295,333,287],
[256,292,282,0,261,267,309,282],
[251,254,209,289,0,221,270,250],
[286,294,255,283,329,0,318,269],
[273,252,217,241,280,232,0,223],
[277,271,263,268,300,281,327,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,275,138,138,275,413,275],
[275,0,138,0,137,137,413,275],
[275,412,0,138,275,275,550,275],
[412,550,412,0,275,412,550,412],
[412,413,275,275,0,412,550,550],
[275,413,275,138,138,0,413,412],
[137,137,0,0,0,137,0,137],
[275,275,275,138,0,138,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,275,278,278,281,275,298],
[268,0,260,271,275,268,270,276],
[275,290,0,285,277,282,281,283],
[272,279,265,0,266,280,280,285],
[272,275,273,284,0,282,266,300],
[269,282,268,270,268,0,266,271],
[275,280,269,270,284,284,0,293],
[252,274,267,265,250,279,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,328,350,293,271,244,332],
[264,0,259,320,288,275,285,280],
[222,291,0,306,285,243,296,299],
[200,230,244,0,226,206,264,268],
[257,262,265,324,0,263,260,356],
[279,275,307,344,287,0,330,325],
[306,265,254,286,290,220,0,292],
[218,270,251,282,194,225,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,295,284,278,256,290,267],
[242,0,272,263,273,255,276,250],
[255,278,0,272,253,255,264,261],
[266,287,278,0,274,261,283,275],
[272,277,297,276,0,259,290,263],
[294,295,295,289,291,0,290,261],
[260,274,286,267,260,260,0,261],
[283,300,289,275,287,289,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,294,288,267,296,288,282],
[267,0,278,265,257,257,266,267],
[256,272,0,279,261,271,267,275],
[262,285,271,0,262,252,260,268],
[283,293,289,288,0,274,270,281],
[254,293,279,298,276,0,278,285],
[262,284,283,290,280,272,0,275],
[268,283,275,282,269,265,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,217,264,233,238,297,217],
[323,0,264,276,266,266,306,243],
[333,286,0,307,255,291,306,282],
[286,274,243,0,249,282,297,265],
[317,284,295,301,0,264,306,272],
[312,284,259,268,286,0,318,232],
[253,244,244,253,244,232,0,213],
[333,307,268,285,278,318,337,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,283,317,304,277,272,307],
[269,0,277,291,275,282,283,273],
[267,273,0,295,273,245,276,271],
[233,259,255,0,246,243,258,250],
[246,275,277,304,0,267,247,256],
[273,268,305,307,283,0,259,294],
[278,267,274,292,303,291,0,283],
[243,277,279,300,294,256,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,91,182,274,182,184,182],
[368,0,276,367,274,184,276,184],
[459,274,0,182,274,184,276,182],
[368,183,368,0,274,275,185,184],
[276,276,276,276,0,93,93,184],
[368,366,366,275,457,0,185,274],
[366,274,274,365,457,365,0,365],
[368,366,368,366,366,276,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,273,282,316,272,269,272],
[278,0,305,317,310,250,327,281],
[277,245,0,265,309,232,272,249],
[268,233,285,0,290,277,234,285],
[234,240,241,260,0,214,257,236],
[278,300,318,273,336,0,287,281],
[281,223,278,316,293,263,0,295],
[278,269,301,265,314,269,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,252,266,231,254,250,260],
[298,0,270,279,290,276,272,279],
[298,280,0,277,266,295,279,289],
[284,271,273,0,261,278,263,295],
[319,260,284,289,0,292,270,285],
[296,274,255,272,258,0,270,257],
[300,278,271,287,280,280,0,277],
[290,271,261,255,265,293,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,263,270,276,265,275,263],
[280,0,259,282,287,268,276,273],
[287,291,0,274,272,287,300,283],
[280,268,276,0,278,271,280,254],
[274,263,278,272,0,280,297,269],
[285,282,263,279,270,0,284,296],
[275,274,250,270,253,266,0,261],
[287,277,267,296,281,254,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,284,278,290,267,295,283],
[281,0,275,273,284,283,277,270],
[266,275,0,269,273,281,289,285],
[272,277,281,0,274,270,280,291],
[260,266,277,276,0,268,268,281],
[283,267,269,280,282,0,281,268],
[255,273,261,270,282,269,0,280],
[267,280,265,259,269,282,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,278,271,288,292,296,287],
[264,0,276,273,276,275,286,280],
[272,274,0,278,284,294,286,273],
[279,277,272,0,285,288,288,282],
[262,274,266,265,0,273,262,272],
[258,275,256,262,277,0,283,286],
[254,264,264,262,288,267,0,272],
[263,270,277,268,278,264,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,350,304,264,371,340,327,354],
[200,0,261,298,356,279,253,309],
[246,289,0,276,386,373,340,379],
[286,252,274,0,400,322,261,349],
[179,194,164,150,0,198,243,226],
[210,271,177,228,352,0,277,316],
[223,297,210,289,307,273,0,273],
[196,241,171,201,324,234,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,278,281,272,280,263,303],
[262,0,274,271,253,268,249,286],
[272,276,0,273,277,288,258,284],
[269,279,277,0,289,306,279,307],
[278,297,273,261,0,283,265,297],
[270,282,262,244,267,0,261,268],
[287,301,292,271,285,289,0,296],
[247,264,266,243,253,282,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,236,259,251,250,262,247],
[305,0,255,263,255,256,284,266],
[314,295,0,261,284,281,280,302],
[291,287,289,0,293,303,279,267],
[299,295,266,257,0,242,269,269],
[300,294,269,247,308,0,288,280],
[288,266,270,271,281,262,0,284],
[303,284,248,283,281,270,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,262,284,261,284,275,291],
[278,0,271,302,271,289,277,267],
[288,279,0,295,272,283,266,290],
[266,248,255,0,261,272,260,269],
[289,279,278,289,0,291,271,270],
[266,261,267,278,259,0,265,277],
[275,273,284,290,279,285,0,281],
[259,283,260,281,280,273,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,279,256,275,269,282,284],
[280,0,292,279,274,286,276,267],
[271,258,0,234,262,264,255,251],
[294,271,316,0,252,288,306,293],
[275,276,288,298,0,287,300,288],
[281,264,286,262,263,0,282,276],
[268,274,295,244,250,268,0,273],
[266,283,299,257,262,274,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,282,326,256,288,279,288],
[282,0,286,314,270,251,265,276],
[268,264,0,326,276,288,292,273],
[224,236,224,0,267,227,245,258],
[294,280,274,283,0,285,278,280],
[262,299,262,323,265,0,293,293],
[271,285,258,305,272,257,0,259],
[262,274,277,292,270,257,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,331,352,331,268,288,288],
[282,0,304,347,324,285,239,281],
[219,246,0,306,327,310,198,220],
[198,203,244,0,354,265,246,246],
[219,226,223,196,0,221,220,177],
[282,265,240,285,329,0,263,196],
[262,311,352,304,330,287,0,260],
[262,269,330,304,373,354,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,276,260,273,259,265,246],
[269,0,286,281,312,260,265,255],
[274,264,0,297,277,268,281,251],
[290,269,253,0,288,268,263,278],
[277,238,273,262,0,260,259,238],
[291,290,282,282,290,0,282,271],
[285,285,269,287,291,268,0,271],
[304,295,299,272,312,279,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,292,268,274,271,280,273],
[292,0,310,304,278,263,297,294],
[258,240,0,270,255,257,271,264],
[282,246,280,0,266,286,268,278],
[276,272,295,284,0,290,290,289],
[279,287,293,264,260,0,291,279],
[270,253,279,282,260,259,0,248],
[277,256,286,272,261,271,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,252,239,287,242,261,274],
[290,0,280,303,306,239,297,263],
[298,270,0,288,239,257,284,246],
[311,247,262,0,268,257,272,223],
[263,244,311,282,0,279,286,261],
[308,311,293,293,271,0,323,303],
[289,253,266,278,264,227,0,229],
[276,287,304,327,289,247,321,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,278,276,271,272,266,276],
[271,0,287,306,273,274,272,294],
[272,263,0,268,249,254,236,270],
[274,244,282,0,250,269,268,245],
[279,277,301,300,0,293,261,267],
[278,276,296,281,257,0,252,260],
[284,278,314,282,289,298,0,263],
[274,256,280,305,283,290,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,288,285,271,280,276,320],
[278,0,262,255,267,272,250,279],
[262,288,0,263,279,266,265,299],
[265,295,287,0,297,284,269,313],
[279,283,271,253,0,281,261,295],
[270,278,284,266,269,0,275,292],
[274,300,285,281,289,275,0,313],
[230,271,251,237,255,258,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,278,280,284,274,258,277],
[289,0,293,295,290,272,278,269],
[272,257,0,265,263,254,266,261],
[270,255,285,0,278,280,264,283],
[266,260,287,272,0,257,267,298],
[276,278,296,270,293,0,269,270],
[292,272,284,286,283,281,0,283],
[273,281,289,267,252,280,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,274,308,278,251,301,302],
[245,0,291,277,281,260,275,294],
[276,259,0,282,277,247,277,277],
[242,273,268,0,265,267,261,265],
[272,269,273,285,0,256,265,283],
[299,290,303,283,294,0,270,284],
[249,275,273,289,285,280,0,304],
[248,256,273,285,267,266,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,331,332,275,221,330,442,276],
[219,0,166,220,276,219,276,221],
[218,384,0,164,384,163,328,384],
[275,330,386,0,441,330,386,386],
[329,274,166,109,0,164,276,329],
[220,331,387,220,386,0,331,331],
[108,274,222,164,274,219,0,274],
[274,329,166,164,221,219,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,275,302,268,305,317,283],
[277,0,270,304,272,267,281,290],
[275,280,0,309,268,267,274,280],
[248,246,241,0,241,222,251,285],
[282,278,282,309,0,255,303,296],
[245,283,283,328,295,0,282,293],
[233,269,276,299,247,268,0,252],
[267,260,270,265,254,257,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,274,282,269,277,283,248],
[287,0,271,269,266,276,262,264],
[276,279,0,302,284,275,280,278],
[268,281,248,0,257,266,280,267],
[281,284,266,293,0,266,292,273],
[273,274,275,284,284,0,271,258],
[267,288,270,270,258,279,0,271],
[302,286,272,283,277,292,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,341,426,299,383,254,257],
[254,0,295,339,251,337,250,253],
[209,255,0,341,295,334,251,294],
[124,211,209,0,253,293,249,168],
[251,299,255,297,0,338,338,294],
[167,213,216,257,212,0,171,168],
[296,300,299,301,212,379,0,255],
[293,297,256,382,256,382,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,253,239,238,261,258,263],
[315,0,292,270,287,302,275,294],
[297,258,0,262,245,277,270,267],
[311,280,288,0,268,292,282,270],
[312,263,305,282,0,282,286,282],
[289,248,273,258,268,0,251,255],
[292,275,280,268,264,299,0,270],
[287,256,283,280,268,295,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,278,287,277,293,262,295],
[279,0,264,293,281,282,276,279],
[272,286,0,281,269,272,259,287],
[263,257,269,0,275,267,259,281],
[273,269,281,275,0,280,266,297],
[257,268,278,283,270,0,257,278],
[288,274,291,291,284,293,0,301],
[255,271,263,269,253,272,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,274,277,284,263,271,267],
[280,0,268,282,272,289,263,250],
[276,282,0,275,270,267,275,278],
[273,268,275,0,273,273,261,259],
[266,278,280,277,0,257,258,257],
[287,261,283,277,293,0,276,256],
[279,287,275,289,292,274,0,288],
[283,300,272,291,293,294,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,267,260,257,264,277,283],
[250,0,280,256,252,275,277,272],
[283,270,0,257,277,275,276,271],
[290,294,293,0,272,278,283,284],
[293,298,273,278,0,277,277,281],
[286,275,275,272,273,0,283,296],
[273,273,274,267,273,267,0,277],
[267,278,279,266,269,254,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,320,281,273,286,306,339],
[264,0,285,276,257,263,261,303],
[230,265,0,215,241,179,241,267],
[269,274,335,0,264,247,294,286],
[277,293,309,286,0,238,301,350],
[264,287,371,303,312,0,338,323],
[244,289,309,256,249,212,0,341],
[211,247,283,264,200,227,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,286,301,293,280,299,268],
[267,0,261,265,280,271,245,241],
[264,289,0,259,287,279,229,228],
[249,285,291,0,289,259,239,276],
[257,270,263,261,0,284,262,256],
[270,279,271,291,266,0,246,241],
[251,305,321,311,288,304,0,262],
[282,309,322,274,294,309,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,290,272,275,278,283,279],
[283,0,287,275,269,270,261,269],
[260,263,0,266,252,272,263,262],
[278,275,284,0,285,282,290,278],
[275,281,298,265,0,288,271,261],
[272,280,278,268,262,0,264,274],
[267,289,287,260,279,286,0,286],
[271,281,288,272,289,276,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,266,258,283,269,261,256],
[276,0,274,270,283,254,255,261],
[284,276,0,259,292,270,265,276],
[292,280,291,0,288,276,258,278],
[267,267,258,262,0,262,255,259],
[281,296,280,274,288,0,282,281],
[289,295,285,292,295,268,0,272],
[294,289,274,272,291,269,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,254,282,273,273,275,262],
[277,0,272,274,293,285,291,281],
[296,278,0,268,287,285,288,259],
[268,276,282,0,272,268,276,256],
[277,257,263,278,0,287,296,275],
[277,265,265,282,263,0,279,252],
[275,259,262,274,254,271,0,258],
[288,269,291,294,275,298,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,277,273,290,303,275,289],
[272,0,269,254,287,283,275,278],
[273,281,0,277,301,277,292,290],
[277,296,273,0,302,281,285,292],
[260,263,249,248,0,263,269,274],
[247,267,273,269,287,0,259,281],
[275,275,258,265,281,291,0,289],
[261,272,260,258,276,269,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,247,278,243,261,280,220],
[312,0,286,313,286,283,294,275],
[303,264,0,285,286,283,274,270],
[272,237,265,0,264,271,269,256],
[307,264,264,286,0,297,295,252],
[289,267,267,279,253,0,279,266],
[270,256,276,281,255,271,0,249],
[330,275,280,294,298,284,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,288,268,288,295,285,281],
[254,0,306,260,265,283,291,259],
[262,244,0,269,261,265,280,239],
[282,290,281,0,270,271,277,278],
[262,285,289,280,0,273,282,281],
[255,267,285,279,277,0,262,282],
[265,259,270,273,268,288,0,239],
[269,291,311,272,269,268,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,291,269,281,280,289,267],
[253,0,301,277,277,263,274,273],
[259,249,0,233,262,246,248,245],
[281,273,317,0,300,268,281,274],
[269,273,288,250,0,257,267,260],
[270,287,304,282,293,0,296,282],
[261,276,302,269,283,254,0,259],
[283,277,305,276,290,268,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,293,274,284,268,282,275],
[296,0,293,285,309,269,278,309],
[257,257,0,246,268,254,247,270],
[276,265,304,0,293,297,266,293],
[266,241,282,257,0,248,257,258],
[282,281,296,253,302,0,275,293],
[268,272,303,284,293,275,0,269],
[275,241,280,257,292,257,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,289,317,256,273,249,283],
[255,0,260,289,252,266,257,254],
[261,290,0,300,257,256,264,280],
[233,261,250,0,243,245,240,257],
[294,298,293,307,0,278,267,287],
[277,284,294,305,272,0,291,292],
[301,293,286,310,283,259,0,277],
[267,296,270,293,263,258,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,264,258,277,273,252,266],
[271,0,270,253,280,287,279,276],
[286,280,0,276,291,301,268,282],
[292,297,274,0,287,295,259,271],
[273,270,259,263,0,278,265,259],
[277,263,249,255,272,0,262,261],
[298,271,282,291,285,288,0,268],
[284,274,268,279,291,289,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,287,274,305,293,279,302],
[260,0,293,278,274,265,278,302],
[263,257,0,272,291,257,243,270],
[276,272,278,0,265,261,260,288],
[245,276,259,285,0,258,250,259],
[257,285,293,289,292,0,277,307],
[271,272,307,290,300,273,0,299],
[248,248,280,262,291,243,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,254,264,284,296,257,269],
[284,0,257,267,277,280,280,274],
[296,293,0,273,290,271,256,282],
[286,283,277,0,282,266,264,282],
[266,273,260,268,0,268,253,289],
[254,270,279,284,282,0,263,298],
[293,270,294,286,297,287,0,303],
[281,276,268,268,261,252,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,293,259,289,270,329,216],
[244,0,258,298,366,271,293,238],
[257,292,0,277,347,234,183,219],
[291,252,273,0,363,307,291,289],
[261,184,203,187,0,273,242,221],
[280,279,316,243,277,0,243,260],
[221,257,367,259,308,307,0,239],
[334,312,331,261,329,290,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,247,224,256,280,273,255],
[280,0,271,256,244,266,300,278],
[303,279,0,243,286,283,302,289],
[326,294,307,0,273,305,327,296],
[294,306,264,277,0,267,307,255],
[270,284,267,245,283,0,299,251],
[277,250,248,223,243,251,0,233],
[295,272,261,254,295,299,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,279,281,291,274,256,270],
[292,0,302,281,254,261,266,307],
[271,248,0,260,255,242,260,235],
[269,269,290,0,266,237,252,260],
[259,296,295,284,0,282,272,278],
[276,289,308,313,268,0,248,246],
[294,284,290,298,278,302,0,265],
[280,243,315,290,272,304,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,277,279,274,279,276,271],
[281,0,270,282,284,280,280,262],
[273,280,0,287,287,285,286,288],
[271,268,263,0,289,279,278,261],
[276,266,263,261,0,267,258,273],
[271,270,265,271,283,0,282,274],
[274,270,264,272,292,268,0,272],
[279,288,262,289,277,276,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,270,289,267,273,269,324],
[241,0,259,257,225,256,245,276],
[280,291,0,265,255,276,256,290],
[261,293,285,0,301,267,283,325],
[283,325,295,249,0,298,291,332],
[277,294,274,283,252,0,302,331],
[281,305,294,267,259,248,0,301],
[226,274,260,225,218,219,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,268,262,269,269,265,266],
[272,0,261,265,277,265,262,263],
[282,289,0,283,281,279,269,264],
[288,285,267,0,284,269,251,271],
[281,273,269,266,0,277,253,257],
[281,285,271,281,273,0,269,280],
[285,288,281,299,297,281,0,273],
[284,287,286,279,293,270,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,261,303,266,276,277,275],
[281,0,288,278,275,288,260,278],
[289,262,0,275,262,267,277,276],
[247,272,275,0,282,262,285,257],
[284,275,288,268,0,259,284,283],
[274,262,283,288,291,0,294,291],
[273,290,273,265,266,256,0,270],
[275,272,274,293,267,259,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,269,255,277,268,275,266],
[284,0,257,278,278,288,269,284],
[281,293,0,265,280,267,290,279],
[295,272,285,0,280,273,284,268],
[273,272,270,270,0,269,278,259],
[282,262,283,277,281,0,281,278],
[275,281,260,266,272,269,0,279],
[284,266,271,282,291,272,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,282,259,253,281,274,254],
[272,0,292,274,279,266,288,264],
[268,258,0,253,269,255,264,275],
[291,276,297,0,284,287,285,268],
[297,271,281,266,0,273,284,269],
[269,284,295,263,277,0,267,261],
[276,262,286,265,266,283,0,249],
[296,286,275,282,281,289,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,282,273,275,259,268,273],
[305,0,274,291,292,285,275,286],
[268,276,0,269,277,265,272,268],
[277,259,281,0,263,269,265,268],
[275,258,273,287,0,270,286,275],
[291,265,285,281,280,0,281,284],
[282,275,278,285,264,269,0,277],
[277,264,282,282,275,266,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,285,280,245,290,284,286],
[251,0,243,289,248,258,293,266],
[265,307,0,301,275,263,283,274],
[270,261,249,0,238,276,262,285],
[305,302,275,312,0,289,316,295],
[260,292,287,274,261,0,296,284],
[266,257,267,288,234,254,0,227],
[264,284,276,265,255,266,323,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,284,284,276,271,287,265],
[269,0,294,285,277,269,273,274],
[266,256,0,284,268,264,256,263],
[266,265,266,0,278,273,260,268],
[274,273,282,272,0,279,274,281],
[279,281,286,277,271,0,264,271],
[263,277,294,290,276,286,0,273],
[285,276,287,282,269,279,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,259,269,270,279,271,266],
[286,0,263,273,271,270,284,260],
[291,287,0,282,271,298,291,286],
[281,277,268,0,286,269,283,291],
[280,279,279,264,0,272,286,280],
[271,280,252,281,278,0,282,278],
[279,266,259,267,264,268,0,272],
[284,290,264,259,270,272,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,273,299,317,307,287,269],
[244,0,287,293,279,278,283,271],
[277,263,0,300,283,286,283,280],
[251,257,250,0,272,278,283,271],
[233,271,267,278,0,269,256,257],
[243,272,264,272,281,0,248,243],
[263,267,267,267,294,302,0,261],
[281,279,270,279,293,307,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,237,271,284,272,246,257],
[275,0,253,290,269,293,274,250],
[313,297,0,276,277,295,282,269],
[279,260,274,0,282,283,253,271],
[266,281,273,268,0,311,280,316],
[278,257,255,267,239,0,250,246],
[304,276,268,297,270,300,0,318],
[293,300,281,279,234,304,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,288,256,284,286,269,263],
[269,0,271,262,263,267,267,276],
[262,279,0,289,264,277,264,260],
[294,288,261,0,271,277,250,266],
[266,287,286,279,0,271,272,270],
[264,283,273,273,279,0,293,273],
[281,283,286,300,278,257,0,280],
[287,274,290,284,280,277,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,262,257,253,251,262,246],
[290,0,246,242,246,276,280,266],
[288,304,0,288,287,289,290,267],
[293,308,262,0,281,275,273,273],
[297,304,263,269,0,282,274,252],
[299,274,261,275,268,0,281,238],
[288,270,260,277,276,269,0,282],
[304,284,283,277,298,312,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,276,280,263,280,286,277],
[266,0,287,273,270,280,275,275],
[274,263,0,267,279,272,275,278],
[270,277,283,0,283,279,279,282],
[287,280,271,267,0,276,268,281],
[270,270,278,271,274,0,274,265],
[264,275,275,271,282,276,0,266],
[273,275,272,268,269,285,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,330,442,386,333,276,223,386],
[220,0,443,335,335,383,274,386],
[108,107,0,161,112,163,220,217],
[164,215,389,0,333,273,274,327],
[217,215,438,217,0,329,220,271],
[274,167,387,277,221,0,387,331],
[327,276,330,276,330,163,0,330],
[164,164,333,223,279,219,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,277,262,277,308,286,283],
[253,0,286,247,261,292,285,265],
[273,264,0,264,290,283,263,278],
[288,303,286,0,272,305,295,279],
[273,289,260,278,0,309,285,289],
[242,258,267,245,241,0,269,251],
[264,265,287,255,265,281,0,266],
[267,285,272,271,261,299,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,265,269,285,307,272,284],
[247,0,281,225,265,257,264,234],
[285,269,0,264,260,293,273,259],
[281,325,286,0,303,301,293,251],
[265,285,290,247,0,285,257,275],
[243,293,257,249,265,0,244,262],
[278,286,277,257,293,306,0,278],
[266,316,291,299,275,288,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,191,249,279,278,304,254],
[273,0,274,302,270,290,296,302],
[359,276,0,265,295,290,310,254],
[301,248,285,0,300,291,341,269],
[271,280,255,250,0,274,287,299],
[272,260,260,259,276,0,308,214],
[246,254,240,209,263,242,0,257],
[296,248,296,281,251,336,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,265,258,303,281,298,283],
[281,0,281,288,279,261,283,266],
[285,269,0,278,297,262,300,278],
[292,262,272,0,307,285,288,282],
[247,271,253,243,0,255,277,245],
[269,289,288,265,295,0,286,278],
[252,267,250,262,273,264,0,259],
[267,284,272,268,305,272,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,273,279,283,278,293,301],
[249,0,258,266,252,232,258,250],
[277,292,0,287,277,250,282,273],
[271,284,263,0,255,262,269,284],
[267,298,273,295,0,256,276,279],
[272,318,300,288,294,0,319,313],
[257,292,268,281,274,231,0,256],
[249,300,277,266,271,237,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,255,277,265,274,274,278],
[288,0,271,290,266,275,276,289],
[295,279,0,286,253,279,268,293],
[273,260,264,0,260,254,268,300],
[285,284,297,290,0,274,279,290],
[276,275,271,296,276,0,265,283],
[276,274,282,282,271,285,0,312],
[272,261,257,250,260,267,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,257,298,274,272,301,303],
[284,0,274,280,279,275,283,312],
[293,276,0,294,267,297,298,318],
[252,270,256,0,247,271,270,296],
[276,271,283,303,0,293,299,290],
[278,275,253,279,257,0,280,293],
[249,267,252,280,251,270,0,287],
[247,238,232,254,260,257,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,281,276,279,254,269,264],
[285,0,283,273,279,276,282,279],
[269,267,0,280,283,258,279,269],
[274,277,270,0,284,275,271,276],
[271,271,267,266,0,258,268,274],
[296,274,292,275,292,0,279,275],
[281,268,271,279,282,271,0,266],
[286,271,281,274,276,275,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,276,257,253,257,274,255],
[269,0,273,256,260,271,239,240],
[274,277,0,252,217,239,244,249],
[293,294,298,0,257,279,258,273],
[297,290,333,293,0,285,275,268],
[293,279,311,271,265,0,259,263],
[276,311,306,292,275,291,0,276],
[295,310,301,277,282,287,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,289,272,259,254,272,259],
[274,0,297,310,251,230,230,269],
[261,253,0,271,257,253,251,245],
[278,240,279,0,252,263,251,251],
[291,299,293,298,0,280,284,238],
[296,320,297,287,270,0,237,288],
[278,320,299,299,266,313,0,292],
[291,281,305,299,312,262,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,266,265,258,272,255,258],
[262,0,266,281,254,270,274,255],
[284,284,0,275,276,278,275,268],
[285,269,275,0,251,283,277,284],
[292,296,274,299,0,282,291,260],
[278,280,272,267,268,0,278,256],
[295,276,275,273,259,272,0,264],
[292,295,282,266,290,294,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,261,291,253,271,280,257],
[267,0,295,291,288,276,277,267],
[289,255,0,267,274,256,267,261],
[259,259,283,0,275,250,261,239],
[297,262,276,275,0,256,274,255],
[279,274,294,300,294,0,272,278],
[270,273,283,289,276,278,0,255],
[293,283,289,311,295,272,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,238,276,292,269,289,289],
[263,0,273,285,283,265,300,301],
[312,277,0,282,294,274,294,284],
[274,265,268,0,290,296,287,283],
[258,267,256,260,0,265,271,263],
[281,285,276,254,285,0,278,279],
[261,250,256,263,279,272,0,270],
[261,249,266,267,287,271,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,280,294,273,264,278,289],
[273,0,280,279,274,281,282,296],
[270,270,0,273,275,266,258,279],
[256,271,277,0,265,265,263,273],
[277,276,275,285,0,280,282,288],
[286,269,284,285,270,0,268,297],
[272,268,292,287,268,282,0,312],
[261,254,271,277,262,253,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,284,285,281,283,287,266],
[276,0,279,273,263,290,282,276],
[266,271,0,261,265,271,281,274],
[265,277,289,0,255,268,257,267],
[269,287,285,295,0,275,283,283],
[267,260,279,282,275,0,271,272],
[263,268,269,293,267,279,0,257],
[284,274,276,283,267,278,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,266,262,244,261,264,259],
[277,0,268,279,253,262,270,269],
[284,282,0,287,277,262,275,271],
[288,271,263,0,260,278,278,264],
[306,297,273,290,0,290,285,275],
[289,288,288,272,260,0,298,275],
[286,280,275,272,265,252,0,271],
[291,281,279,286,275,275,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,266,281,280,280,283,278],
[259,0,278,271,267,271,278,248],
[284,272,0,283,270,274,280,268],
[269,279,267,0,266,279,270,255],
[270,283,280,284,0,265,264,279],
[270,279,276,271,285,0,271,254],
[267,272,270,280,286,279,0,253],
[272,302,282,295,271,296,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,270,268,248,288,280,282],
[289,0,279,285,278,281,269,280],
[280,271,0,254,243,296,255,282],
[282,265,296,0,251,273,285,293],
[302,272,307,299,0,299,279,279],
[262,269,254,277,251,0,265,278],
[270,281,295,265,271,285,0,293],
[268,270,268,257,271,272,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,244,239,243,256,243,256],
[262,0,231,205,242,276,233,260],
[306,319,0,268,257,239,287,288],
[311,345,282,0,265,322,279,308],
[307,308,293,285,0,280,259,251],
[294,274,311,228,270,0,246,262],
[307,317,263,271,291,304,0,285],
[294,290,262,242,299,288,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,272,275,278,287,263,289],
[257,0,260,269,284,270,274,281],
[278,290,0,273,281,272,278,290],
[275,281,277,0,277,289,254,271],
[272,266,269,273,0,283,260,267],
[263,280,278,261,267,0,254,267],
[287,276,272,296,290,296,0,292],
[261,269,260,279,283,283,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,329,288,316,270,276,274,271],
[221,0,258,285,281,258,301,253],
[262,292,0,310,265,249,290,269],
[234,265,240,0,268,250,281,228],
[280,269,285,282,0,262,288,281],
[274,292,301,300,288,0,284,266],
[276,249,260,269,262,266,0,274],
[279,297,281,322,269,284,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,371,244,255,301,262,193,276],
[179,0,207,218,240,229,191,254],
[306,343,0,226,328,294,306,275],
[295,332,324,0,369,300,272,334],
[249,310,222,181,0,283,249,277],
[288,321,256,250,267,0,207,289],
[357,359,244,278,301,343,0,314],
[274,296,275,216,273,261,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,283,302,279,302,251,254],
[271,0,303,287,272,266,277,258],
[267,247,0,282,269,293,265,220],
[248,263,268,0,259,283,248,226],
[271,278,281,291,0,307,290,275],
[248,284,257,267,243,0,229,242],
[299,273,285,302,260,321,0,281],
[296,292,330,324,275,308,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,278,275,275,262,284,284],
[282,0,275,268,260,277,270,272],
[272,275,0,260,268,271,266,263],
[275,282,290,0,270,258,272,270],
[275,290,282,280,0,280,280,278],
[288,273,279,292,270,0,286,280],
[266,280,284,278,270,264,0,282],
[266,278,287,280,272,270,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,263,273,272,246,257,269],
[282,0,283,265,274,252,254,256],
[287,267,0,270,296,262,297,291],
[277,285,280,0,276,265,270,272],
[278,276,254,274,0,270,277,291],
[304,298,288,285,280,0,269,293],
[293,296,253,280,273,281,0,278],
[281,294,259,278,259,257,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,242,299,328,260,305,280],
[261,0,256,284,275,249,244,286],
[308,294,0,310,275,293,293,271],
[251,266,240,0,250,258,241,276],
[222,275,275,300,0,263,262,263],
[290,301,257,292,287,0,307,269],
[245,306,257,309,288,243,0,281],
[270,264,279,274,287,281,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,218,253,234,246,220,259],
[283,0,236,270,258,313,257,253],
[332,314,0,278,282,289,260,287],
[297,280,272,0,262,275,255,289],
[316,292,268,288,0,286,300,311],
[304,237,261,275,264,0,279,268],
[330,293,290,295,250,271,0,310],
[291,297,263,261,239,282,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,289,260,309,282,282,264],
[299,0,273,231,299,269,309,253],
[261,277,0,260,287,277,264,248],
[290,319,290,0,309,283,298,275],
[241,251,263,241,0,285,269,241],
[268,281,273,267,265,0,274,282],
[268,241,286,252,281,276,0,264],
[286,297,302,275,309,268,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,272,297,286,283,288,262],
[253,0,261,263,282,251,256,258],
[278,289,0,276,260,274,258,264],
[253,287,274,0,288,284,256,264],
[264,268,290,262,0,276,266,254],
[267,299,276,266,274,0,272,281],
[262,294,292,294,284,278,0,269],
[288,292,286,286,296,269,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,276,289,278,283,309,278],
[275,0,247,269,287,265,271,273],
[274,303,0,288,264,287,306,300],
[261,281,262,0,266,265,275,317],
[272,263,286,284,0,276,287,259],
[267,285,263,285,274,0,297,302],
[241,279,244,275,263,253,0,253],
[272,277,250,233,291,248,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,263,259,295,273,253,285],
[308,0,286,264,279,304,287,288],
[287,264,0,269,279,266,238,299],
[291,286,281,0,297,313,273,293],
[255,271,271,253,0,279,256,253],
[277,246,284,237,271,0,238,287],
[297,263,312,277,294,312,0,296],
[265,262,251,257,297,263,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,282,271,282,288,275,276],
[262,0,288,253,264,270,267,259],
[268,262,0,254,262,258,269,253],
[279,297,296,0,260,283,295,265],
[268,286,288,290,0,274,283,287],
[262,280,292,267,276,0,282,278],
[275,283,281,255,267,268,0,276],
[274,291,297,285,263,272,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,307,335,244,286,263,223],
[251,0,298,331,276,340,258,298],
[243,252,0,321,254,253,295,253],
[215,219,229,0,201,246,249,241],
[306,274,296,349,0,307,330,260],
[264,210,297,304,243,0,235,257],
[287,292,255,301,220,315,0,264],
[327,252,297,309,290,293,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,283,269,273,261,275,259],
[276,0,274,258,260,281,278,282],
[267,276,0,272,274,297,284,270],
[281,292,278,0,295,273,299,261],
[277,290,276,255,0,276,288,271],
[289,269,253,277,274,0,291,264],
[275,272,266,251,262,259,0,253],
[291,268,280,289,279,286,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,264,309,278,281,259,291],
[266,0,286,285,286,257,286,254],
[286,264,0,301,274,272,266,285],
[241,265,249,0,251,269,254,264],
[272,264,276,299,0,269,282,285],
[269,293,278,281,281,0,279,286],
[291,264,284,296,268,271,0,275],
[259,296,265,286,265,264,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,245,369,366,305,367,367],
[304,0,183,490,426,243,365,305],
[305,367,0,367,367,305,305,245],
[181,60,183,0,181,181,181,121],
[184,124,183,369,0,183,245,124],
[245,307,245,369,367,0,305,246],
[183,185,245,369,305,245,0,124],
[183,245,305,429,426,304,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,287,286,250,272,267,284],
[251,0,285,260,240,249,274,289],
[263,265,0,249,258,243,263,277],
[264,290,301,0,274,268,277,302],
[300,310,292,276,0,275,290,302],
[278,301,307,282,275,0,288,324],
[283,276,287,273,260,262,0,270],
[266,261,273,248,248,226,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,376,306,273,337,278,341],
[233,0,294,281,287,302,282,294],
[174,256,0,298,220,256,249,322],
[244,269,252,0,225,271,252,302],
[277,263,330,325,0,309,299,340],
[213,248,294,279,241,0,242,260],
[272,268,301,298,251,308,0,314],
[209,256,228,248,210,290,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,287,262,297,286,221,280],
[284,0,287,247,287,314,264,264],
[263,263,0,305,348,250,263,247],
[288,303,245,0,312,283,268,290],
[253,263,202,238,0,270,194,231],
[264,236,300,267,280,0,237,236],
[329,286,287,282,356,313,0,274],
[270,286,303,260,319,314,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,249,239,269,291,232,295],
[290,0,241,292,224,236,262,312],
[301,309,0,325,312,250,271,296],
[311,258,225,0,246,247,246,260],
[281,326,238,304,0,231,249,313],
[259,314,300,303,319,0,308,330],
[318,288,279,304,301,242,0,291],
[255,238,254,290,237,220,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,268,269,252,268,266,258],
[305,0,285,274,257,287,284,297],
[282,265,0,277,261,280,277,281],
[281,276,273,0,261,293,293,269],
[298,293,289,289,0,306,305,270],
[282,263,270,257,244,0,275,274],
[284,266,273,257,245,275,0,247],
[292,253,269,281,280,276,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,297,266,274,288,284,282],
[260,0,259,249,295,280,287,296],
[253,291,0,273,291,258,335,277],
[284,301,277,0,271,265,332,283],
[276,255,259,279,0,275,314,251],
[262,270,292,285,275,0,295,260],
[266,263,215,218,236,255,0,229],
[268,254,273,267,299,290,321,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,275,298,297,287,282,289],
[276,0,262,297,288,277,283,288],
[275,288,0,308,283,293,291,285],
[252,253,242,0,264,263,277,260],
[253,262,267,286,0,252,269,278],
[263,273,257,287,298,0,273,281],
[268,267,259,273,281,277,0,268],
[261,262,265,290,272,269,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,274,249,350,302,224,277],
[246,0,297,300,246,299,221,346],
[276,253,0,300,350,302,300,323],
[301,250,250,0,350,252,298,302],
[200,304,200,200,0,200,149,249],
[248,251,248,298,350,0,273,275],
[326,329,250,252,401,277,0,324],
[273,204,227,248,301,275,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,298,302,289,281,270,286],
[265,0,273,277,256,259,245,261],
[252,277,0,274,268,268,247,267],
[248,273,276,0,265,251,253,281],
[261,294,282,285,0,259,268,285],
[269,291,282,299,291,0,277,279],
[280,305,303,297,282,273,0,294],
[264,289,283,269,265,271,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,258,241,259,266,253,254],
[289,0,281,256,276,277,264,244],
[292,269,0,259,277,277,270,255],
[309,294,291,0,274,267,264,281],
[291,274,273,276,0,281,269,262],
[284,273,273,283,269,0,284,271],
[297,286,280,286,281,266,0,283],
[296,306,295,269,288,279,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,412,137,274,137,0,0],
[275,0,275,137,274,137,137,275],
[138,275,0,138,412,138,138,138],
[413,413,412,0,550,413,138,275],
[276,276,138,0,0,138,0,138],
[413,413,412,137,412,0,0,138],
[550,413,412,412,550,550,0,275],
[550,275,412,275,412,412,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,254,264,287,275,281,271],
[279,0,271,241,295,300,300,271],
[296,279,0,276,284,275,327,286],
[286,309,274,0,283,301,298,307],
[263,255,266,267,0,270,282,275],
[275,250,275,249,280,0,271,266],
[269,250,223,252,268,279,0,294],
[279,279,264,243,275,284,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,255,272,283,265,267,272],
[281,0,274,271,278,293,281,284],
[295,276,0,270,266,290,285,270],
[278,279,280,0,268,298,292,285],
[267,272,284,282,0,277,286,278],
[285,257,260,252,273,0,280,257],
[283,269,265,258,264,270,0,271],
[278,266,280,265,272,293,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,271,274,279,270,291,273],
[262,0,263,266,265,258,283,254],
[279,287,0,291,292,275,294,297],
[276,284,259,0,278,269,292,280],
[271,285,258,272,0,264,288,295],
[280,292,275,281,286,0,285,292],
[259,267,256,258,262,265,0,265],
[277,296,253,270,255,258,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,271,275,278,270,261,270],
[276,0,275,254,264,268,246,246],
[279,275,0,266,283,262,276,276],
[275,296,284,0,282,268,279,272],
[272,286,267,268,0,268,278,269],
[280,282,288,282,282,0,285,269],
[289,304,274,271,272,265,0,268],
[280,304,274,278,281,281,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,266,255,253,277,266,266],
[299,0,270,301,294,280,299,280],
[284,280,0,286,273,288,273,275],
[295,249,264,0,260,258,281,252],
[297,256,277,290,0,304,282,282],
[273,270,262,292,246,0,272,265],
[284,251,277,269,268,278,0,252],
[284,270,275,298,268,285,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,264,256,277,277,267,277],
[278,0,283,270,292,278,279,274],
[286,267,0,246,273,275,277,271],
[294,280,304,0,269,280,278,296],
[273,258,277,281,0,280,274,268],
[273,272,275,270,270,0,271,272],
[283,271,273,272,276,279,0,275],
[273,276,279,254,282,278,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,274,286,275,282,275,279],
[285,0,276,277,263,271,263,288],
[276,274,0,285,262,289,258,288],
[264,273,265,0,245,273,261,290],
[275,287,288,305,0,291,273,306],
[268,279,261,277,259,0,268,282],
[275,287,292,289,277,282,0,305],
[271,262,262,260,244,268,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,267,288,269,274,270,271],
[256,0,249,274,260,267,245,265],
[283,301,0,290,277,288,259,276],
[262,276,260,0,268,278,268,275],
[281,290,273,282,0,270,275,282],
[276,283,262,272,280,0,255,266],
[280,305,291,282,275,295,0,298],
[279,285,274,275,268,284,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,245,257,261,283,278,260],
[268,0,252,251,271,252,260,235],
[305,298,0,290,290,294,292,263],
[293,299,260,0,272,283,275,279],
[289,279,260,278,0,305,282,272],
[267,298,256,267,245,0,279,259],
[272,290,258,275,268,271,0,250],
[290,315,287,271,278,291,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,264,264,255,271,289,262],
[278,0,270,275,277,284,286,261],
[286,280,0,268,278,298,276,278],
[286,275,282,0,273,285,276,267],
[295,273,272,277,0,292,269,263],
[279,266,252,265,258,0,282,264],
[261,264,274,274,281,268,0,252],
[288,289,272,283,287,286,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,296,328,280,243,288,279],
[241,0,253,288,243,256,266,253],
[254,297,0,291,245,243,277,257],
[222,262,259,0,224,217,307,217],
[270,307,305,326,0,299,299,301],
[307,294,307,333,251,0,322,294],
[262,284,273,243,251,228,0,238],
[271,297,293,333,249,256,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,286,257,284,282,260,282],
[295,0,260,284,292,297,272,301],
[264,290,0,285,314,302,290,306],
[293,266,265,0,285,295,267,294],
[266,258,236,265,0,278,252,272],
[268,253,248,255,272,0,274,270],
[290,278,260,283,298,276,0,290],
[268,249,244,256,278,280,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,276,268,257,280,277,261],
[271,0,271,261,264,269,276,289],
[274,279,0,272,288,283,286,264],
[282,289,278,0,283,273,284,261],
[293,286,262,267,0,277,285,268],
[270,281,267,277,273,0,292,280],
[273,274,264,266,265,258,0,261],
[289,261,286,289,282,270,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,281,288,267,266,252,287],
[282,0,306,286,282,274,283,288],
[269,244,0,282,271,263,259,288],
[262,264,268,0,254,244,274,267],
[283,268,279,296,0,283,275,295],
[284,276,287,306,267,0,253,301],
[298,267,291,276,275,297,0,277],
[263,262,262,283,255,249,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,299,260,277,250,255,267],
[273,0,306,287,275,303,277,276],
[251,244,0,268,261,251,259,275],
[290,263,282,0,266,270,251,279],
[273,275,289,284,0,267,269,292],
[300,247,299,280,283,0,291,296],
[295,273,291,299,281,259,0,294],
[283,274,275,271,258,254,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,320,284,261,286,337,301],
[289,0,311,268,299,267,274,306],
[230,239,0,268,262,243,266,260],
[266,282,282,0,249,268,269,314],
[289,251,288,301,0,261,326,274],
[264,283,307,282,289,0,288,339],
[213,276,284,281,224,262,0,265],
[249,244,290,236,276,211,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,277,288,254,292,278,282],
[272,0,264,293,290,283,286,273],
[273,286,0,278,279,276,302,272],
[262,257,272,0,251,285,267,278],
[296,260,271,299,0,275,272,277],
[258,267,274,265,275,0,270,279],
[272,264,248,283,278,280,0,268],
[268,277,278,272,273,271,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,293,258,282,293,290,288],
[274,0,290,257,266,263,273,247],
[257,260,0,236,243,261,288,245],
[292,293,314,0,277,276,297,253],
[268,284,307,273,0,264,265,263],
[257,287,289,274,286,0,270,264],
[260,277,262,253,285,280,0,261],
[262,303,305,297,287,286,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,289,321,312,297,315,275],
[255,0,261,305,273,291,258,259],
[261,289,0,299,294,304,293,283],
[229,245,251,0,227,299,285,236],
[238,277,256,323,0,291,304,275],
[253,259,246,251,259,0,257,256],
[235,292,257,265,246,293,0,273],
[275,291,267,314,275,294,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,281,250,288,268,271,262],
[293,0,309,297,305,287,284,263],
[269,241,0,251,270,242,281,273],
[300,253,299,0,274,281,269,263],
[262,245,280,276,0,285,261,257],
[282,263,308,269,265,0,288,286],
[279,266,269,281,289,262,0,286],
[288,287,277,287,293,264,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,259,261,195,196,386,228],
[354,0,257,293,228,261,356,260],
[291,293,0,293,261,230,388,197],
[289,257,257,0,229,357,289,258],
[355,322,289,321,0,224,323,226],
[354,289,320,193,326,0,353,257],
[164,194,162,261,227,197,0,293],
[322,290,353,292,324,293,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,274,270,282,263,289,279],
[293,0,270,274,256,280,263,258],
[276,280,0,261,262,265,256,257],
[280,276,289,0,264,267,277,290],
[268,294,288,286,0,264,299,284],
[287,270,285,283,286,0,282,292],
[261,287,294,273,251,268,0,275],
[271,292,293,260,266,258,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,273,309,296,332,344,247],
[260,0,279,288,284,298,324,232],
[277,271,0,320,279,309,345,293],
[241,262,230,0,239,273,300,221],
[254,266,271,311,0,272,308,224],
[218,252,241,277,278,0,315,237],
[206,226,205,250,242,235,0,174],
[303,318,257,329,326,313,376,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,310,285,290,258,309,299],
[247,0,321,293,305,265,319,298],
[240,229,0,271,223,219,242,215],
[265,257,279,0,273,244,257,262],
[260,245,327,277,0,259,254,220],
[292,285,331,306,291,0,273,256],
[241,231,308,293,296,277,0,289],
[251,252,335,288,330,294,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,257,275,254,264,299,237],
[282,0,268,243,256,283,270,248],
[293,282,0,256,275,244,286,243],
[275,307,294,0,290,287,310,277],
[296,294,275,260,0,276,299,268],
[286,267,306,263,274,0,308,278],
[251,280,264,240,251,242,0,248],
[313,302,307,273,282,272,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,225,300,221,297,177,244],
[276,0,249,373,298,349,177,299],
[325,301,0,326,246,348,276,321],
[250,177,224,0,251,273,176,270],
[329,252,304,299,0,401,304,298],
[253,201,202,277,149,0,201,251],
[373,373,274,374,246,349,0,370],
[306,251,229,280,252,299,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,280,280,273,284,276,275],
[266,0,278,275,268,284,278,283],
[270,272,0,273,271,271,292,292],
[270,275,277,0,289,278,266,285],
[277,282,279,261,0,278,265,280],
[266,266,279,272,272,0,270,288],
[274,272,258,284,285,280,0,293],
[275,267,258,265,270,262,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,246,246,250,275,277,220],
[302,0,277,293,269,286,273,256],
[304,273,0,285,267,281,300,277],
[304,257,265,0,263,270,296,234],
[300,281,283,287,0,311,285,263],
[275,264,269,280,239,0,275,250],
[273,277,250,254,265,275,0,245],
[330,294,273,316,287,300,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,282,281,284,276,266,278],
[280,0,283,270,290,272,277,283],
[268,267,0,269,282,266,276,275],
[269,280,281,0,279,281,267,280],
[266,260,268,271,0,271,258,256],
[274,278,284,269,279,0,272,292],
[284,273,274,283,292,278,0,283],
[272,267,275,270,294,258,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,232,263,239,290,303,278],
[355,0,275,283,273,313,289,268],
[318,275,0,246,287,276,300,293],
[287,267,304,0,254,298,264,279],
[311,277,263,296,0,297,341,305],
[260,237,274,252,253,0,265,255],
[247,261,250,286,209,285,0,264],
[272,282,257,271,245,295,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,272,288,302,295,283,301],
[258,0,272,268,266,260,269,276],
[278,278,0,285,266,286,282,308],
[262,282,265,0,286,255,276,296],
[248,284,284,264,0,261,267,289],
[255,290,264,295,289,0,283,273],
[267,281,268,274,283,267,0,294],
[249,274,242,254,261,277,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,257,242,271,257,289,270],
[278,0,274,278,315,275,305,330],
[293,276,0,270,296,291,283,300],
[308,272,280,0,294,263,270,289],
[279,235,254,256,0,244,247,278],
[293,275,259,287,306,0,273,291],
[261,245,267,280,303,277,0,302],
[280,220,250,261,272,259,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,274,268,276,273,244,268],
[306,0,283,281,304,302,289,271],
[276,267,0,255,288,259,269,302],
[282,269,295,0,305,283,292,284],
[274,246,262,245,0,246,245,245],
[277,248,291,267,304,0,254,276],
[306,261,281,258,305,296,0,273],
[282,279,248,266,305,274,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,359,301,321,271,294,331],
[268,0,316,291,325,257,297,305],
[191,234,0,288,271,277,224,289],
[249,259,262,0,281,229,258,321],
[229,225,279,269,0,220,238,280],
[279,293,273,321,330,0,277,340],
[256,253,326,292,312,273,0,305],
[219,245,261,229,270,210,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,264,256,270,259,290,280],
[306,0,293,278,274,280,311,312],
[286,257,0,256,257,243,251,270],
[294,272,294,0,241,276,279,293],
[280,276,293,309,0,271,306,274],
[291,270,307,274,279,0,274,291],
[260,239,299,271,244,276,0,259],
[270,238,280,257,276,259,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,260,242,266,287,278,268],
[275,0,291,268,277,269,265,271],
[290,259,0,244,273,277,264,262],
[308,282,306,0,266,290,290,267],
[284,273,277,284,0,279,276,270],
[263,281,273,260,271,0,265,264],
[272,285,286,260,274,285,0,276],
[282,279,288,283,280,286,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,260,288,288,246,283,260],
[260,0,264,282,270,264,266,260],
[290,286,0,300,280,266,260,272],
[262,268,250,0,260,261,274,262],
[262,280,270,290,0,290,285,291],
[304,286,284,289,260,0,285,288],
[267,284,290,276,265,265,0,284],
[290,290,278,288,259,262,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,259,266,280,288,282,269],
[254,0,266,268,276,279,269,258],
[291,284,0,276,280,279,279,272],
[284,282,274,0,280,291,283,265],
[270,274,270,270,0,273,281,267],
[262,271,271,259,277,0,276,275],
[268,281,271,267,269,274,0,266],
[281,292,278,285,283,275,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,289,284,285,289,289,284],
[292,0,282,306,302,304,267,296],
[261,268,0,253,291,274,251,260],
[266,244,297,0,277,279,267,287],
[265,248,259,273,0,299,262,255],
[261,246,276,271,251,0,279,271],
[261,283,299,283,288,271,0,274],
[266,254,290,263,295,279,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,260,267,258,287,275,264],
[271,0,287,279,268,285,266,278],
[290,263,0,275,265,279,281,263],
[283,271,275,0,261,273,254,264],
[292,282,285,289,0,290,271,282],
[263,265,271,277,260,0,277,275],
[275,284,269,296,279,273,0,276],
[286,272,287,286,268,275,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,262,273,265,301,261,263],
[282,0,281,297,277,283,259,290],
[288,269,0,258,270,272,282,290],
[277,253,292,0,258,250,263,288],
[285,273,280,292,0,304,285,291],
[249,267,278,300,246,0,249,263],
[289,291,268,287,265,301,0,287],
[287,260,260,262,259,287,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,271,292,264,288,277,275],
[273,0,272,281,253,253,260,245],
[279,278,0,290,287,311,288,268],
[258,269,260,0,258,270,276,262],
[286,297,263,292,0,283,267,257],
[262,297,239,280,267,0,269,266],
[273,290,262,274,283,281,0,269],
[275,305,282,288,293,284,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,308,290,281,321,283,304],
[315,0,316,304,272,302,307,328],
[242,234,0,249,250,256,240,271],
[260,246,301,0,271,281,285,284],
[269,278,300,279,0,313,280,299],
[229,248,294,269,237,0,270,286],
[267,243,310,265,270,280,0,287],
[246,222,279,266,251,264,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,256,267,266,296,269,273],
[277,0,265,263,261,286,276,268],
[294,285,0,285,268,288,285,280],
[283,287,265,0,282,284,269,275],
[284,289,282,268,0,277,287,280],
[254,264,262,266,273,0,271,277],
[281,274,265,281,263,279,0,271],
[277,282,270,275,270,273,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,305,295,288,289,277,271],
[259,0,303,258,310,290,293,250],
[245,247,0,263,279,258,251,253],
[255,292,287,0,304,268,295,284],
[262,240,271,246,0,250,249,252],
[261,260,292,282,300,0,271,269],
[273,257,299,255,301,279,0,286],
[279,300,297,266,298,281,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,273,278,294,282,267,277],
[266,0,275,254,277,268,286,250],
[277,275,0,259,289,283,289,266],
[272,296,291,0,298,272,294,276],
[256,273,261,252,0,279,298,276],
[268,282,267,278,271,0,287,277],
[283,264,261,256,252,263,0,266],
[273,300,284,274,274,273,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,284,293,281,259,287,277],
[256,0,272,274,246,260,262,263],
[266,278,0,293,280,290,281,257],
[257,276,257,0,253,269,249,249],
[269,304,270,297,0,262,256,251],
[291,290,260,281,288,0,277,248],
[263,288,269,301,294,273,0,274],
[273,287,293,301,299,302,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,194,277,252,363,213,282],
[295,0,214,297,227,317,272,214],
[356,336,0,272,270,401,313,315],
[273,253,278,0,251,316,272,296],
[298,323,280,299,0,364,254,258],
[187,233,149,234,186,0,190,192],
[337,278,237,278,296,360,0,340],
[268,336,235,254,292,358,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,267,273,258,284,282,279],
[286,0,256,260,263,267,263,285],
[283,294,0,277,269,279,284,297],
[277,290,273,0,275,266,291,309],
[292,287,281,275,0,276,267,287],
[266,283,271,284,274,0,282,291],
[268,287,266,259,283,268,0,294],
[271,265,253,241,263,259,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,272,285,282,290,263,310],
[275,0,312,303,296,285,298,289],
[278,238,0,284,287,257,262,286],
[265,247,266,0,243,267,249,272],
[268,254,263,307,0,277,280,264],
[260,265,293,283,273,0,294,286],
[287,252,288,301,270,256,0,282],
[240,261,264,278,286,264,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,285,291,303,267,275,279],
[256,0,264,261,265,260,271,240],
[265,286,0,260,264,258,274,248],
[259,289,290,0,294,269,259,261],
[247,285,286,256,0,276,274,263],
[283,290,292,281,274,0,277,272],
[275,279,276,291,276,273,0,278],
[271,310,302,289,287,278,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,291,270,300,242,283,299],
[294,0,312,315,279,255,259,292],
[259,238,0,277,278,252,285,290],
[280,235,273,0,261,260,265,285],
[250,271,272,289,0,252,278,291],
[308,295,298,290,298,0,277,275],
[267,291,265,285,272,273,0,295],
[251,258,260,265,259,275,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,307,269,322,286,295,276],
[256,0,270,258,279,242,257,275],
[243,280,0,267,280,265,281,268],
[281,292,283,0,304,283,267,284],
[228,271,270,246,0,253,253,261],
[264,308,285,267,297,0,302,284],
[255,293,269,283,297,248,0,284],
[274,275,282,266,289,266,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,235,290,240,279,245,280],
[310,0,259,326,269,272,266,300],
[315,291,0,311,265,287,231,289],
[260,224,239,0,231,232,264,254],
[310,281,285,319,0,275,287,303],
[271,278,263,318,275,0,264,310],
[305,284,319,286,263,286,0,304],
[270,250,261,296,247,240,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,251,260,268,259,285,258],
[282,0,264,262,291,273,273,262],
[299,286,0,263,287,275,278,279],
[290,288,287,0,303,276,297,266],
[282,259,263,247,0,254,269,272],
[291,277,275,274,296,0,286,258],
[265,277,272,253,281,264,0,266],
[292,288,271,284,278,292,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,291,259,287,309,294,262],
[242,0,273,282,288,270,292,267],
[259,277,0,263,321,269,286,257],
[291,268,287,0,261,297,297,285],
[263,262,229,289,0,302,281,294],
[241,280,281,253,248,0,292,259],
[256,258,264,253,269,258,0,244],
[288,283,293,265,256,291,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,265,305,286,293,287,296],
[271,0,260,304,275,275,278,273],
[285,290,0,323,279,279,311,272],
[245,246,227,0,241,226,257,254],
[264,275,271,309,0,267,286,278],
[257,275,271,324,283,0,269,282],
[263,272,239,293,264,281,0,293],
[254,277,278,296,272,268,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,367,550,184,368,368,458,276],
[183,0,367,276,367,184,367,184],
[0,183,0,184,276,0,275,92],
[366,274,366,0,275,275,366,183],
[182,183,274,275,0,91,274,0],
[182,366,550,275,459,0,458,183],
[92,183,275,184,276,92,0,92],
[274,366,458,367,550,367,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,326,227,252,252,300,225],
[253,0,427,251,277,227,276,201],
[224,123,0,223,297,200,223,198],
[323,299,327,0,323,277,374,251],
[298,273,253,227,0,327,348,225],
[298,323,350,273,223,0,324,323],
[250,274,327,176,202,226,0,275],
[325,349,352,299,325,227,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,292,276,272,265,289,274],
[264,0,240,280,275,264,266,275],
[258,310,0,290,272,274,316,302],
[274,270,260,0,256,276,284,277],
[278,275,278,294,0,283,293,290],
[285,286,276,274,267,0,290,278],
[261,284,234,266,257,260,0,279],
[276,275,248,273,260,272,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,278,264,296,270,296,278],
[263,0,254,247,261,259,279,246],
[272,296,0,284,296,269,287,286],
[286,303,266,0,282,279,295,277],
[254,289,254,268,0,265,288,266],
[280,291,281,271,285,0,287,277],
[254,271,263,255,262,263,0,274],
[272,304,264,273,284,273,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,270,292,291,291,276,304],
[275,0,284,293,289,299,309,306],
[280,266,0,291,272,272,300,288],
[258,257,259,0,256,265,298,287],
[259,261,278,294,0,294,287,292],
[259,251,278,285,256,0,314,288],
[274,241,250,252,263,236,0,269],
[246,244,262,263,258,262,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,257,284,304,284,292,292],
[248,0,251,248,286,263,267,282],
[293,299,0,273,298,282,321,314],
[266,302,277,0,264,246,296,278],
[246,264,252,286,0,244,257,273],
[266,287,268,304,306,0,298,282],
[258,283,229,254,293,252,0,255],
[258,268,236,272,277,268,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,275,278,277,299,262,297],
[269,0,271,278,276,298,259,293],
[275,279,0,276,270,288,278,288],
[272,272,274,0,263,291,269,302],
[273,274,280,287,0,292,283,263],
[251,252,262,259,258,0,253,284],
[288,291,272,281,267,297,0,266],
[253,257,262,248,287,266,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,272,267,262,324,271,276],
[246,0,251,271,254,278,296,263],
[278,299,0,313,273,304,280,269],
[283,279,237,0,287,282,269,248],
[288,296,277,263,0,302,271,287],
[226,272,246,268,248,0,246,255],
[279,254,270,281,279,304,0,262],
[274,287,281,302,263,295,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,253,260,278,314,247,308],
[265,0,291,255,291,276,259,299],
[297,259,0,294,292,264,285,308],
[290,295,256,0,282,281,274,292],
[272,259,258,268,0,277,260,269],
[236,274,286,269,273,0,243,275],
[303,291,265,276,290,307,0,319],
[242,251,242,258,281,275,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,263,301,282,259,307,259],
[260,0,239,287,231,236,239,233],
[287,311,0,307,297,297,273,280],
[249,263,243,0,237,244,260,238],
[268,319,253,313,0,288,281,275],
[291,314,253,306,262,0,311,284],
[243,311,277,290,269,239,0,244],
[291,317,270,312,275,266,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,268,283,272,281,264,286],
[272,0,268,285,276,268,285,272],
[282,282,0,292,261,281,276,286],
[267,265,258,0,260,273,264,282],
[278,274,289,290,0,294,271,288],
[269,282,269,277,256,0,266,269],
[286,265,274,286,279,284,0,309],
[264,278,264,268,262,281,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,279,250,245,294,246,244],
[312,0,329,281,243,309,243,278],
[271,221,0,278,220,288,268,239],
[300,269,272,0,231,267,278,265],
[305,307,330,319,0,330,293,267],
[256,241,262,283,220,0,268,212],
[304,307,282,272,257,282,0,284],
[306,272,311,285,283,338,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,283,274,270,275,298,296],
[243,0,247,287,255,283,305,238],
[267,303,0,306,266,304,329,310],
[276,263,244,0,265,246,271,290],
[280,295,284,285,0,301,264,257],
[275,267,246,304,249,0,273,292],
[252,245,221,279,286,277,0,240],
[254,312,240,260,293,258,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,290,317,296,283,285,265],
[233,0,227,245,226,269,245,226],
[260,323,0,336,306,291,296,275],
[233,305,214,0,250,275,243,233],
[254,324,244,300,0,277,289,277],
[267,281,259,275,273,0,287,259],
[265,305,254,307,261,263,0,231],
[285,324,275,317,273,291,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,265,315,287,312,302,286],
[234,0,235,274,253,248,268,242],
[285,315,0,311,287,273,292,270],
[235,276,239,0,254,260,251,247],
[263,297,263,296,0,274,278,252],
[238,302,277,290,276,0,246,253],
[248,282,258,299,272,304,0,260],
[264,308,280,303,298,297,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,287,280,277,272,261,281],
[254,0,245,274,232,241,262,245],
[263,305,0,284,271,260,249,256],
[270,276,266,0,261,238,277,256],
[273,318,279,289,0,269,277,249],
[278,309,290,312,281,0,269,283],
[289,288,301,273,273,281,0,274],
[269,305,294,294,301,267,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,295,290,260,264,274,273],
[271,0,286,284,273,285,284,269],
[255,264,0,281,261,271,265,265],
[260,266,269,0,253,262,247,264],
[290,277,289,297,0,281,282,269],
[286,265,279,288,269,0,280,271],
[276,266,285,303,268,270,0,280],
[277,281,285,286,281,279,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,267,265,275,264,278,272],
[269,0,267,273,270,269,278,277],
[283,283,0,271,274,285,274,293],
[285,277,279,0,269,280,288,276],
[275,280,276,281,0,293,258,270],
[286,281,265,270,257,0,278,269],
[272,272,276,262,292,272,0,262],
[278,273,257,274,280,281,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,241,278,279,263,249,259],
[290,0,280,296,277,279,281,266],
[309,270,0,279,293,278,297,282],
[272,254,271,0,265,282,251,263],
[271,273,257,285,0,289,271,275],
[287,271,272,268,261,0,261,249],
[301,269,253,299,279,289,0,270],
[291,284,268,287,275,301,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,261,253,255,270,282,269],
[284,0,270,287,281,281,292,306],
[289,280,0,298,274,266,275,289],
[297,263,252,0,280,264,285,291],
[295,269,276,270,0,293,292,284],
[280,269,284,286,257,0,277,278],
[268,258,275,265,258,273,0,278],
[281,244,261,259,266,272,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,313,271,280,303,279,293],
[260,0,289,268,271,294,266,290],
[237,261,0,266,257,261,236,257],
[279,282,284,0,254,286,270,290],
[270,279,293,296,0,288,253,299],
[247,256,289,264,262,0,249,268],
[271,284,314,280,297,301,0,286],
[257,260,293,260,251,282,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,286,285,273,278,282,278],
[264,0,275,281,268,311,245,285],
[264,275,0,285,261,275,255,289],
[265,269,265,0,261,263,264,278],
[277,282,289,289,0,294,268,303],
[272,239,275,287,256,0,247,297],
[268,305,295,286,282,303,0,298],
[272,265,261,272,247,253,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,282,284,280,293,283,244],
[268,0,280,292,285,281,288,273],
[268,270,0,262,267,267,273,259],
[266,258,288,0,287,269,268,260],
[270,265,283,263,0,280,269,262],
[257,269,283,281,270,0,262,275],
[267,262,277,282,281,288,0,248],
[306,277,291,290,288,275,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,324,290,281,259,265,283,282],
[226,0,259,264,246,219,253,222],
[260,291,0,263,247,255,296,275],
[269,286,287,0,245,226,297,249],
[291,304,303,305,0,261,306,281],
[285,331,295,324,289,0,308,264],
[267,297,254,253,244,242,0,269],
[268,328,275,301,269,286,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,277,270,267,276,271,271],
[254,0,264,254,253,270,245,246],
[273,286,0,285,266,284,277,262],
[280,296,265,0,282,279,286,269],
[283,297,284,268,0,282,286,280],
[274,280,266,271,268,0,277,266],
[279,305,273,264,264,273,0,262],
[279,304,288,281,270,284,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,227,258,268,257,252,264],
[277,0,259,250,264,241,236,259],
[323,291,0,293,286,291,273,304],
[292,300,257,0,289,257,279,274],
[282,286,264,261,0,266,257,263],
[293,309,259,293,284,0,274,276],
[298,314,277,271,293,276,0,270],
[286,291,246,276,287,274,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,286,280,291,282,274,291],
[280,0,305,260,289,295,279,294],
[264,245,0,254,274,272,268,267],
[270,290,296,0,270,279,279,290],
[259,261,276,280,0,280,251,280],
[268,255,278,271,270,0,277,274],
[276,271,282,271,299,273,0,281],
[259,256,283,260,270,276,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,308,251,326,276,250,262],
[271,0,302,236,287,242,265,284],
[242,248,0,250,252,225,201,239],
[299,314,300,0,330,290,268,282],
[224,263,298,220,0,230,207,243],
[274,308,325,260,320,0,264,267],
[300,285,349,282,343,286,0,254],
[288,266,311,268,307,283,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,276,258,272,285,282,246],
[263,0,277,260,262,273,241,262],
[274,273,0,298,278,279,261,255],
[292,290,252,0,282,273,248,262],
[278,288,272,268,0,265,255,274],
[265,277,271,277,285,0,259,249],
[268,309,289,302,295,291,0,283],
[304,288,295,288,276,301,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,258,266,304,303,272,277],
[275,0,260,284,281,284,259,279],
[292,290,0,290,279,318,269,276],
[284,266,260,0,282,285,267,264],
[246,269,271,268,0,275,259,269],
[247,266,232,265,275,0,263,259],
[278,291,281,283,291,287,0,273],
[273,271,274,286,281,291,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,277,222,320,259,266,288],
[260,0,282,235,328,218,244,272],
[273,268,0,292,334,297,265,324],
[328,315,258,0,310,293,302,327],
[230,222,216,240,0,223,256,274],
[291,332,253,257,327,0,257,309],
[284,306,285,248,294,293,0,342],
[262,278,226,223,276,241,208,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,333,263,290,274,307,299,291],
[217,0,235,261,245,228,225,239],
[287,315,0,239,281,243,281,298],
[260,289,311,0,289,267,260,252],
[276,305,269,261,0,266,208,252],
[243,322,307,283,284,0,266,292],
[251,325,269,290,342,284,0,290],
[259,311,252,298,298,258,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,268,234,280,231,250,242],
[261,0,233,232,253,240,242,236],
[282,317,0,268,276,254,271,271],
[316,318,282,0,270,285,289,292],
[270,297,274,280,0,260,260,246],
[319,310,296,265,290,0,267,278],
[300,308,279,261,290,283,0,271],
[308,314,279,258,304,272,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,278,277,274,263,297,279],
[263,0,258,250,264,247,271,258],
[272,292,0,279,287,295,284,291],
[273,300,271,0,292,273,280,291],
[276,286,263,258,0,253,272,259],
[287,303,255,277,297,0,274,279],
[253,279,266,270,278,276,0,273],
[271,292,259,259,291,271,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,280,250,275,266,266,270],
[280,0,252,259,260,262,281,276],
[270,298,0,239,281,240,262,290],
[300,291,311,0,293,285,258,300],
[275,290,269,257,0,272,270,290],
[284,288,310,265,278,0,283,292],
[284,269,288,292,280,267,0,300],
[280,274,260,250,260,258,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,285,313,243,282,234,297],
[252,0,269,290,252,246,266,229],
[265,281,0,308,283,258,243,304],
[237,260,242,0,274,212,240,231],
[307,298,267,276,0,232,277,271],
[268,304,292,338,318,0,290,290],
[316,284,307,310,273,260,0,309],
[253,321,246,319,279,260,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,111,163,329,332,330,277],
[275,0,277,275,275,221,164,220],
[439,273,0,166,436,329,273,276],
[387,275,384,0,493,332,276,278],
[221,275,114,57,0,167,221,224],
[218,329,221,218,383,0,216,218],
[220,386,277,274,329,334,0,332],
[273,330,274,272,326,332,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,280,299,264,292,274,279],
[258,0,266,278,278,271,251,263],
[270,284,0,285,273,275,275,263],
[251,272,265,0,274,281,263,271],
[286,272,277,276,0,285,256,291],
[258,279,275,269,265,0,264,274],
[276,299,275,287,294,286,0,284],
[271,287,287,279,259,276,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,237,253,240,321,259,242],
[280,0,229,287,245,264,274,256],
[313,321,0,285,264,311,255,247],
[297,263,265,0,275,333,316,274],
[310,305,286,275,0,326,314,299],
[229,286,239,217,224,0,244,246],
[291,276,295,234,236,306,0,241],
[308,294,303,276,251,304,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,269,274,229,256,246,257],
[245,0,269,262,226,250,256,248],
[281,281,0,281,250,264,243,252],
[276,288,269,0,251,255,233,306],
[321,324,300,299,0,305,316,220],
[294,300,286,295,245,0,258,270],
[304,294,307,317,234,292,0,302],
[293,302,298,244,330,280,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,256,282,275,257,246,242],
[285,0,286,303,298,287,269,281],
[294,264,0,266,289,270,295,261],
[268,247,284,0,291,280,272,253],
[275,252,261,259,0,239,273,237],
[293,263,280,270,311,0,301,239],
[304,281,255,278,277,249,0,270],
[308,269,289,297,313,311,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,277,296,274,295,270,300],
[255,0,273,284,271,249,273,267],
[273,277,0,293,246,278,258,281],
[254,266,257,0,242,252,247,266],
[276,279,304,308,0,280,290,270],
[255,301,272,298,270,0,266,260],
[280,277,292,303,260,284,0,263],
[250,283,269,284,280,290,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,274,278,276,292,290,280],
[251,0,242,248,242,269,251,258],
[276,308,0,268,278,302,282,305],
[272,302,282,0,278,311,267,293],
[274,308,272,272,0,298,301,300],
[258,281,248,239,252,0,262,268],
[260,299,268,283,249,288,0,277],
[270,292,245,257,250,282,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,272,270,293,288,282,286],
[270,0,268,259,298,252,272,272],
[278,282,0,315,302,266,299,289],
[280,291,235,0,310,245,272,285],
[257,252,248,240,0,258,274,271],
[262,298,284,305,292,0,257,272],
[268,278,251,278,276,293,0,288],
[264,278,261,265,279,278,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,266,255,272,283,270,276],
[266,0,267,271,281,268,264,279],
[284,283,0,294,294,286,275,293],
[295,279,256,0,281,289,256,260],
[278,269,256,269,0,289,279,271],
[267,282,264,261,261,0,266,270],
[280,286,275,294,271,284,0,292],
[274,271,257,290,279,280,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,263,258,275,307,276,259],
[275,0,269,280,307,291,280,268],
[287,281,0,269,286,297,268,268],
[292,270,281,0,274,276,272,271],
[275,243,264,276,0,292,260,284],
[243,259,253,274,258,0,253,239],
[274,270,282,278,290,297,0,273],
[291,282,282,279,266,311,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,296,284,276,268,273,299],
[286,0,310,278,273,280,290,303],
[254,240,0,242,256,245,272,261],
[266,272,308,0,308,263,294,274],
[274,277,294,242,0,282,277,285],
[282,270,305,287,268,0,332,283],
[277,260,278,256,273,218,0,261],
[251,247,289,276,265,267,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,344,386,213,290,293,297,270],
[206,0,287,101,174,164,226,224],
[164,263,0,196,195,225,183,222],
[337,449,354,0,258,281,354,307],
[260,376,355,292,0,262,307,291],
[257,386,325,269,288,0,246,255],
[253,324,367,196,243,304,0,264],
[280,326,328,243,259,295,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,285,289,282,265,262,294],
[246,0,272,266,263,245,262,265],
[265,278,0,262,269,259,256,264],
[261,284,288,0,270,259,248,270],
[268,287,281,280,0,259,276,286],
[285,305,291,291,291,0,258,277],
[288,288,294,302,274,292,0,288],
[256,285,286,280,264,273,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,304,314,264,281,268,260],
[254,0,281,278,252,262,282,227],
[246,269,0,258,238,251,265,272],
[236,272,292,0,261,263,276,269],
[286,298,312,289,0,260,304,280],
[269,288,299,287,290,0,298,285],
[282,268,285,274,246,252,0,255],
[290,323,278,281,270,265,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,290,266,278,272,279,271],
[284,0,286,262,264,275,282,270],
[260,264,0,286,259,271,271,271],
[284,288,264,0,268,297,295,285],
[272,286,291,282,0,274,268,267],
[278,275,279,253,276,0,293,282],
[271,268,279,255,282,257,0,270],
[279,280,279,265,283,268,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,277,272,297,276,268,272],
[273,0,276,266,286,275,282,266],
[273,274,0,277,290,282,263,260],
[278,284,273,0,292,273,272,276],
[253,264,260,258,0,272,245,261],
[274,275,268,277,278,0,274,268],
[282,268,287,278,305,276,0,276],
[278,284,290,274,289,282,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,279,260,265,277,281,257],
[298,0,302,275,287,297,304,307],
[271,248,0,289,287,288,291,279],
[290,275,261,0,297,299,297,280],
[285,263,263,253,0,273,301,260],
[273,253,262,251,277,0,289,268],
[269,246,259,253,249,261,0,261],
[293,243,271,270,290,282,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,232,271,223,274,224,261],
[330,0,290,303,265,308,285,293],
[318,260,0,304,274,303,259,296],
[279,247,246,0,256,264,257,280],
[327,285,276,294,0,277,271,282],
[276,242,247,286,273,0,242,278],
[326,265,291,293,279,308,0,283],
[289,257,254,270,268,272,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,289,269,289,292,286,279],
[273,0,267,284,289,295,297,331],
[261,283,0,283,290,266,303,283],
[281,266,267,0,292,285,304,305],
[261,261,260,258,0,298,298,280],
[258,255,284,265,252,0,270,277],
[264,253,247,246,252,280,0,261],
[271,219,267,245,270,273,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,270,269,289,266,302,247],
[279,0,308,271,282,240,305,261],
[280,242,0,264,271,236,280,245],
[281,279,286,0,285,291,314,268],
[261,268,279,265,0,292,296,279],
[284,310,314,259,258,0,318,272],
[248,245,270,236,254,232,0,248],
[303,289,305,282,271,278,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,279,258,270,262,283,276],
[259,0,250,269,244,251,268,282],
[271,300,0,261,266,271,272,302],
[292,281,289,0,252,275,269,317],
[280,306,284,298,0,248,286,299],
[288,299,279,275,302,0,298,292],
[267,282,278,281,264,252,0,277],
[274,268,248,233,251,258,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,276,293,290,275,307,287],
[276,0,269,263,290,278,278,290],
[274,281,0,276,286,290,310,282],
[257,287,274,0,283,293,314,292],
[260,260,264,267,0,283,300,267],
[275,272,260,257,267,0,271,283],
[243,272,240,236,250,279,0,281],
[263,260,268,258,283,267,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,277,293,281,290,281,275],
[270,0,280,285,276,291,278,284],
[273,270,0,284,278,272,283,260],
[257,265,266,0,263,273,256,253],
[269,274,272,287,0,265,270,275],
[260,259,278,277,285,0,282,279],
[269,272,267,294,280,268,0,267],
[275,266,290,297,275,271,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,263,238,240,314,265,234],
[303,0,293,283,264,304,285,256],
[287,257,0,265,286,323,273,255],
[312,267,285,0,317,347,299,291],
[310,286,264,233,0,307,273,217],
[236,246,227,203,243,0,178,207],
[285,265,277,251,277,372,0,241],
[316,294,295,259,333,343,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,261,287,290,238,281,260],
[282,0,264,303,267,265,283,291],
[289,286,0,305,302,281,293,272],
[263,247,245,0,269,267,265,244],
[260,283,248,281,0,271,278,269],
[312,285,269,283,279,0,265,261],
[269,267,257,285,272,285,0,253],
[290,259,278,306,281,289,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,276,275,272,268,262,259],
[292,0,305,261,283,275,272,281],
[274,245,0,246,252,249,258,260],
[275,289,304,0,280,281,284,276],
[278,267,298,270,0,278,279,274],
[282,275,301,269,272,0,264,278],
[288,278,292,266,271,286,0,264],
[291,269,290,274,276,272,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,298,283,267,305,260,300],
[263,0,296,283,283,306,276,289],
[252,254,0,255,260,272,264,262],
[267,267,295,0,277,326,303,301],
[283,267,290,273,0,289,265,291],
[245,244,278,224,261,0,257,254],
[290,274,286,247,285,293,0,281],
[250,261,288,249,259,296,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,361,275,260,269,214,309,312],
[189,0,223,251,195,220,240,243],
[275,327,0,268,276,250,328,288],
[290,299,282,0,258,259,303,319],
[281,355,274,292,0,284,312,305],
[336,330,300,291,266,0,347,308],
[241,310,222,247,238,203,0,296],
[238,307,262,231,245,242,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,288,272,301,266,269,260],
[275,0,263,279,283,249,277,241],
[262,287,0,287,285,257,255,279],
[278,271,263,0,267,271,258,251],
[249,267,265,283,0,269,278,254],
[284,301,293,279,281,0,281,268],
[281,273,295,292,272,269,0,278],
[290,309,271,299,296,282,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,261,292,281,265,285,265],
[269,0,279,295,294,274,269,277],
[289,271,0,289,277,289,270,282],
[258,255,261,0,270,267,269,270],
[269,256,273,280,0,270,280,270],
[285,276,261,283,280,0,288,284],
[265,281,280,281,270,262,0,274],
[285,273,268,280,280,266,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,275,286,276,257,270,265],
[266,0,267,281,290,259,283,276],
[275,283,0,268,287,279,264,295],
[264,269,282,0,271,269,281,282],
[274,260,263,279,0,271,273,268],
[293,291,271,281,279,0,277,285],
[280,267,286,269,277,273,0,287],
[285,274,255,268,282,265,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,250,251,247,267,232,278],
[291,0,231,275,273,277,233,300],
[300,319,0,284,298,300,271,281],
[299,275,266,0,276,287,280,293],
[303,277,252,274,0,299,276,283],
[283,273,250,263,251,0,244,263],
[318,317,279,270,274,306,0,304],
[272,250,269,257,267,287,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,284,281,262,276,293,301],
[285,0,250,278,263,256,279,267],
[266,300,0,283,273,252,293,286],
[269,272,267,0,270,255,309,286],
[288,287,277,280,0,269,296,289],
[274,294,298,295,281,0,304,272],
[257,271,257,241,254,246,0,276],
[249,283,264,264,261,278,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,224,222,221,333,332,251,335],
[326,0,245,245,275,357,302,331],
[328,305,0,194,249,304,278,360],
[329,305,356,0,247,331,328,331],
[217,275,301,303,0,358,301,333],
[218,193,246,219,192,0,247,303],
[299,248,272,222,249,303,0,359],
[215,219,190,219,217,247,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,258,285,266,263,280,266],
[275,0,250,275,259,240,262,251],
[292,300,0,287,287,288,272,285],
[265,275,263,0,240,257,258,241],
[284,291,263,310,0,277,282,277],
[287,310,262,293,273,0,284,276],
[270,288,278,292,268,266,0,285],
[284,299,265,309,273,274,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,209,232,268,250,233,299],
[286,0,285,257,255,269,228,284],
[341,265,0,290,261,266,264,292],
[318,293,260,0,280,280,271,286],
[282,295,289,270,0,289,286,305],
[300,281,284,270,261,0,261,293],
[317,322,286,279,264,289,0,344],
[251,266,258,264,245,257,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,274,278,267,261,266,277],
[275,0,269,273,273,271,270,266],
[276,281,0,274,274,264,272,257],
[272,277,276,0,279,259,281,258],
[283,277,276,271,0,277,285,271],
[289,279,286,291,273,0,283,279],
[284,280,278,269,265,267,0,261],
[273,284,293,292,279,271,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,274,270,282,298,278,291],
[274,0,272,240,264,291,276,313],
[276,278,0,260,253,298,224,260],
[280,310,290,0,265,279,276,271],
[268,286,297,285,0,282,265,315],
[252,259,252,271,268,0,240,291],
[272,274,326,274,285,310,0,271],
[259,237,290,279,235,259,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,309,266,277,281,239,268],
[285,0,315,293,290,303,265,299],
[241,235,0,251,274,273,243,263],
[284,257,299,0,298,310,276,286],
[273,260,276,252,0,282,257,257],
[269,247,277,240,268,0,254,271],
[311,285,307,274,293,296,0,247],
[282,251,287,264,293,279,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,279,277,268,273,279,281],
[258,0,267,259,272,261,269,266],
[271,283,0,256,266,294,268,276],
[273,291,294,0,267,296,275,283],
[282,278,284,283,0,276,271,286],
[277,289,256,254,274,0,279,282],
[271,281,282,275,279,271,0,273],
[269,284,274,267,264,268,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,313,273,259,278,291,233],
[257,0,295,218,256,277,314,218],
[237,255,0,194,257,257,314,234],
[277,332,356,0,258,294,373,276],
[291,294,293,292,0,250,308,211],
[272,273,293,256,300,0,350,232],
[259,236,236,177,242,200,0,238],
[317,332,316,274,339,318,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,275,253,267,262,290,270],
[275,0,271,270,277,269,269,268],
[275,279,0,255,289,272,274,259],
[297,280,295,0,297,292,266,287],
[283,273,261,253,0,270,283,287],
[288,281,278,258,280,0,266,295],
[260,281,276,284,267,284,0,286],
[280,282,291,263,263,255,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,285,300,271,275,291,291],
[239,0,270,277,244,269,271,269],
[265,280,0,274,268,264,276,263],
[250,273,276,0,267,267,286,271],
[279,306,282,283,0,273,306,267],
[275,281,286,283,277,0,293,279],
[259,279,274,264,244,257,0,244],
[259,281,287,279,283,271,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,313,298,294,264,282,287],
[310,0,302,236,333,308,270,288],
[237,248,0,260,288,267,193,293],
[252,314,290,0,308,342,278,303],
[256,217,262,242,0,207,198,233],
[286,242,283,208,343,0,251,288],
[268,280,357,272,352,299,0,287],
[263,262,257,247,317,262,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,262,300,269,279,280,269],
[267,0,261,254,243,261,262,233],
[288,289,0,305,260,287,281,298],
[250,296,245,0,266,263,268,264],
[281,307,290,284,0,296,282,269],
[271,289,263,287,254,0,263,256],
[270,288,269,282,268,287,0,271],
[281,317,252,286,281,294,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,259,265,269,287,254,291],
[283,0,264,268,268,273,267,273],
[291,286,0,283,278,303,262,280],
[285,282,267,0,260,293,260,276],
[281,282,272,290,0,298,278,287],
[263,277,247,257,252,0,245,280],
[296,283,288,290,272,305,0,286],
[259,277,270,274,263,270,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,313,283,255,275,276,266],
[245,0,265,274,276,226,246,232],
[237,285,0,270,271,229,245,258],
[267,276,280,0,282,232,278,266],
[295,274,279,268,0,225,258,243],
[275,324,321,318,325,0,286,287],
[274,304,305,272,292,264,0,261],
[284,318,292,284,307,263,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,270,284,248,296,267,259],
[293,0,256,263,266,290,282,280],
[280,294,0,296,275,310,290,293],
[266,287,254,0,248,310,266,255],
[302,284,275,302,0,312,269,270],
[254,260,240,240,238,0,248,267],
[283,268,260,284,281,302,0,269],
[291,270,257,295,280,283,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,266,286,284,285,265,274],
[278,0,272,281,280,281,268,283],
[284,278,0,304,297,288,294,267],
[264,269,246,0,264,278,267,250],
[266,270,253,286,0,278,272,273],
[265,269,262,272,272,0,278,258],
[285,282,256,283,278,272,0,269],
[276,267,283,300,277,292,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,258,255,260,266,278,261],
[306,0,270,269,272,307,311,286],
[292,280,0,260,282,305,303,275],
[295,281,290,0,266,303,299,280],
[290,278,268,284,0,295,303,278],
[284,243,245,247,255,0,278,257],
[272,239,247,251,247,272,0,241],
[289,264,275,270,272,293,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,287,313,286,276,287,298],
[282,0,269,281,301,312,276,296],
[263,281,0,291,293,294,275,287],
[237,269,259,0,282,257,257,291],
[264,249,257,268,0,276,256,262],
[274,238,256,293,274,0,254,270],
[263,274,275,293,294,296,0,281],
[252,254,263,259,288,280,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,208,222,237,244,259,289],
[319,0,227,309,279,262,280,319],
[342,323,0,331,301,335,265,316],
[328,241,219,0,337,271,275,278],
[313,271,249,213,0,305,291,308],
[306,288,215,279,245,0,266,345],
[291,270,285,275,259,284,0,291],
[261,231,234,272,242,205,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,269,242,288,275,257,302],
[320,0,227,261,275,261,319,319],
[281,323,0,250,263,294,355,276],
[308,289,300,0,273,230,319,347],
[262,275,287,277,0,231,352,335],
[275,289,256,320,319,0,337,318],
[293,231,195,231,198,213,0,272],
[248,231,274,203,215,232,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,290,282,275,303,284,308],
[260,0,273,277,277,278,260,283],
[260,277,0,255,267,285,271,273],
[268,273,295,0,272,285,272,295],
[275,273,283,278,0,284,275,289],
[247,272,265,265,266,0,246,263],
[266,290,279,278,275,304,0,295],
[242,267,277,255,261,287,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,272,251,249,240,266,255],
[295,0,252,275,267,253,305,275],
[278,298,0,277,270,276,286,282],
[299,275,273,0,276,264,268,266],
[301,283,280,274,0,247,263,268],
[310,297,274,286,303,0,286,278],
[284,245,264,282,287,264,0,257],
[295,275,268,284,282,272,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,306,274,271,293,269,276],
[268,0,282,258,279,286,272,269],
[244,268,0,264,263,275,285,263],
[276,292,286,0,278,298,290,268],
[279,271,287,272,0,273,271,270],
[257,264,275,252,277,0,266,259],
[281,278,265,260,279,284,0,272],
[274,281,287,282,280,291,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,263,251,265,264,272,247],
[268,0,290,257,243,279,263,277],
[287,260,0,256,273,271,264,252],
[299,293,294,0,280,264,286,273],
[285,307,277,270,0,301,287,276],
[286,271,279,286,249,0,280,241],
[278,287,286,264,263,270,0,272],
[303,273,298,277,274,309,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,273,282,296,297,281,275],
[281,0,267,266,272,278,296,259],
[277,283,0,272,265,286,293,288],
[268,284,278,0,278,254,305,282],
[254,278,285,272,0,270,301,280],
[253,272,264,296,280,0,284,273],
[269,254,257,245,249,266,0,247],
[275,291,262,268,270,277,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,258,282,287,248,268,276],
[303,0,282,286,313,261,283,303],
[292,268,0,287,283,266,280,284],
[268,264,263,0,272,237,282,274],
[263,237,267,278,0,242,267,262],
[302,289,284,313,308,0,311,264],
[282,267,270,268,283,239,0,273],
[274,247,266,276,288,286,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,361,362,377,328,253,291,378],
[189,0,277,261,193,203,190,308],
[188,273,0,311,172,254,221,272],
[173,289,239,0,155,201,254,273],
[222,357,378,395,0,290,324,357],
[297,347,296,349,260,0,345,347],
[259,360,329,296,226,205,0,346],
[172,242,278,277,193,203,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,265,277,282,265,287,247],
[293,0,267,300,294,283,286,283],
[285,283,0,304,312,282,298,272],
[273,250,246,0,294,265,292,250],
[268,256,238,256,0,259,272,249],
[285,267,268,285,291,0,296,250],
[263,264,252,258,278,254,0,258],
[303,267,278,300,301,300,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,277,288,283,264,281,270],
[261,0,293,278,278,263,267,282],
[273,257,0,266,267,262,253,278],
[262,272,284,0,281,270,269,281],
[267,272,283,269,0,284,285,266],
[286,287,288,280,266,0,282,276],
[269,283,297,281,265,268,0,273],
[280,268,272,269,284,274,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,284,232,269,233,231,271],
[398,0,312,248,263,329,296,332],
[266,238,0,284,249,299,214,267],
[318,302,266,0,269,303,286,319],
[281,287,301,281,0,295,249,271],
[317,221,251,247,255,0,182,355],
[319,254,336,264,301,368,0,304],
[279,218,283,231,279,195,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,267,263,279,245,270,258],
[276,0,247,254,279,256,237,279],
[283,303,0,267,293,276,283,274],
[287,296,283,0,294,264,286,285],
[271,271,257,256,0,249,287,267],
[305,294,274,286,301,0,296,308],
[280,313,267,264,263,254,0,282],
[292,271,276,265,283,242,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,327,285,391,218,282,312,358],
[223,0,267,363,203,265,268,300],
[265,283,0,377,264,253,283,316],
[159,187,173,0,171,153,203,208],
[332,347,286,379,0,317,271,300],
[268,285,297,397,233,0,268,300],
[238,282,267,347,279,282,0,333],
[192,250,234,342,250,250,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,285,280,286,278,270,279],
[267,0,285,258,281,240,270,278],
[265,265,0,244,283,247,265,268],
[270,292,306,0,289,257,292,293],
[264,269,267,261,0,255,283,297],
[272,310,303,293,295,0,295,310],
[280,280,285,258,267,255,0,284],
[271,272,282,257,253,240,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,263,264,301,242,266,267],
[275,0,283,297,290,274,317,318],
[287,267,0,303,263,276,280,273],
[286,253,247,0,282,256,272,272],
[249,260,287,268,0,266,281,265],
[308,276,274,294,284,0,276,257],
[284,233,270,278,269,274,0,264],
[283,232,277,278,285,293,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,289,264,272,276,275,304],
[284,0,293,266,245,280,286,276],
[261,257,0,255,244,277,278,271],
[286,284,295,0,275,295,303,284],
[278,305,306,275,0,292,279,293],
[274,270,273,255,258,0,278,286],
[275,264,272,247,271,272,0,275],
[246,274,279,266,257,264,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,317,255,317,316,323,368],
[249,0,296,279,273,282,267,314],
[233,254,0,243,244,266,305,326],
[295,271,307,0,281,311,309,313],
[233,277,306,269,0,290,300,323],
[234,268,284,239,260,0,288,348],
[227,283,245,241,250,262,0,294],
[182,236,224,237,227,202,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,289,324,301,261,286,286],
[244,0,269,298,307,284,272,246],
[261,281,0,295,292,323,323,259],
[226,252,255,0,239,238,221,202],
[249,243,258,311,0,269,243,227],
[289,266,227,312,281,0,255,246],
[264,278,227,329,307,295,0,284],
[264,304,291,348,323,304,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,277,284,273,252,269,256],
[287,0,287,274,277,270,276,260],
[273,263,0,265,261,241,262,246],
[266,276,285,0,262,258,274,260],
[277,273,289,288,0,267,278,271],
[298,280,309,292,283,0,288,275],
[281,274,288,276,272,262,0,268],
[294,290,304,290,279,275,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,312,277,281,412,314,242],
[273,0,378,412,348,376,379,307],
[238,172,0,278,245,309,242,174],
[273,138,272,0,241,376,274,206],
[269,202,305,309,0,339,304,238],
[138,174,241,174,211,0,174,172],
[236,171,308,276,246,376,0,241],
[308,243,376,344,312,378,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,288,296,282,293,285,250],
[260,0,292,300,261,257,265,266],
[262,258,0,286,269,241,275,246],
[254,250,264,0,250,258,269,265],
[268,289,281,300,0,277,276,254],
[257,293,309,292,273,0,280,277],
[265,285,275,281,274,270,0,275],
[300,284,304,285,296,273,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,279,295,298,264,301,274],
[280,0,270,259,309,257,298,262],
[271,280,0,279,304,301,321,279],
[255,291,271,0,275,242,283,276],
[252,241,246,275,0,262,269,269],
[286,293,249,308,288,0,302,279],
[249,252,229,267,281,248,0,257],
[276,288,271,274,281,271,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,291,284,290,280,267,270],
[285,0,293,268,304,287,299,281],
[259,257,0,266,264,281,256,238],
[266,282,284,0,274,296,279,283],
[260,246,286,276,0,259,257,266],
[270,263,269,254,291,0,261,261],
[283,251,294,271,293,289,0,274],
[280,269,312,267,284,289,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,278,272,275,280,269,274],
[266,0,273,270,264,267,266,270],
[272,277,0,282,272,282,278,280],
[278,280,268,0,277,277,287,277],
[275,286,278,273,0,296,290,286],
[270,283,268,273,254,0,266,273],
[281,284,272,263,260,284,0,281],
[276,280,270,273,264,277,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,270,282,276,293,278,280],
[274,0,290,286,270,285,284,305],
[280,260,0,285,255,261,279,299],
[268,264,265,0,267,258,268,296],
[274,280,295,283,0,276,285,323],
[257,265,289,292,274,0,260,331],
[272,266,271,282,265,290,0,288],
[270,245,251,254,227,219,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,288,284,276,298,301,284],
[275,0,273,270,258,301,292,273],
[262,277,0,260,263,293,276,276],
[266,280,290,0,264,307,286,279],
[274,292,287,286,0,302,291,293],
[252,249,257,243,248,0,262,262],
[249,258,274,264,259,288,0,263],
[266,277,274,271,257,288,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,358,394,293,341,259,276,310],
[192,0,256,214,219,155,174,267],
[156,294,0,193,201,157,192,269],
[257,336,357,0,279,277,278,275],
[209,331,349,271,0,251,247,287],
[291,395,393,273,299,0,312,351],
[274,376,358,272,303,238,0,330],
[240,283,281,275,263,199,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,297,271,271,285,244,264],
[262,0,267,279,285,283,262,262],
[253,283,0,282,266,266,278,251],
[279,271,268,0,266,291,275,274],
[279,265,284,284,0,312,255,282],
[265,267,284,259,238,0,244,248],
[306,288,272,275,295,306,0,281],
[286,288,299,276,268,302,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,292,283,273,296,284,278],
[271,0,284,280,289,285,277,283],
[258,266,0,268,261,275,288,260],
[267,270,282,0,274,272,269,269],
[277,261,289,276,0,292,276,274],
[254,265,275,278,258,0,267,260],
[266,273,262,281,274,283,0,280],
[272,267,290,281,276,290,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,290,271,323,277,290,282],
[258,0,266,267,301,260,283,263],
[260,284,0,281,298,287,283,274],
[279,283,269,0,299,293,307,257],
[227,249,252,251,0,244,250,223],
[273,290,263,257,306,0,282,263],
[260,267,267,243,300,268,0,261],
[268,287,276,293,327,287,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,282,279,267,270,268,257],
[271,0,278,275,260,260,268,272],
[268,272,0,268,261,254,266,278],
[271,275,282,0,261,266,269,272],
[283,290,289,289,0,271,282,291],
[280,290,296,284,279,0,270,279],
[282,282,284,281,268,280,0,277],
[293,278,272,278,259,271,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,265,279,246,260,229,283],
[259,0,271,291,269,254,283,264],
[285,279,0,283,273,302,269,323],
[271,259,267,0,215,252,234,263],
[304,281,277,335,0,311,268,320],
[290,296,248,298,239,0,273,283],
[321,267,281,316,282,277,0,276],
[267,286,227,287,230,267,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,267,268,266,267,276,270],
[294,0,298,289,273,286,304,289],
[283,252,0,250,265,277,280,268],
[282,261,300,0,306,301,291,293],
[284,277,285,244,0,295,277,272],
[283,264,273,249,255,0,263,267],
[274,246,270,259,273,287,0,262],
[280,261,282,257,278,283,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,339,339,338,278,340,255,295],
[211,0,229,231,252,255,230,229],
[211,321,0,296,275,279,232,211],
[212,319,254,0,234,256,126,146],
[272,298,275,316,0,275,277,209],
[210,295,271,294,275,0,168,231],
[295,320,318,424,273,382,0,231],
[255,321,339,404,341,319,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,274,288,288,280,262,284],
[289,0,280,279,271,268,270,295],
[276,270,0,270,282,283,272,289],
[262,271,280,0,277,286,265,294],
[262,279,268,273,0,268,279,272],
[270,282,267,264,282,0,252,292],
[288,280,278,285,271,298,0,292],
[266,255,261,256,278,258,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,257,268,262,257,276,281],
[296,0,263,279,259,261,271,298],
[293,287,0,273,286,275,283,277],
[282,271,277,0,261,275,293,279],
[288,291,264,289,0,279,271,276],
[293,289,275,275,271,0,274,268],
[274,279,267,257,279,276,0,281],
[269,252,273,271,274,282,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,265,248,287,285,299,287],
[256,0,248,267,262,281,252,259],
[285,302,0,276,308,297,310,272],
[302,283,274,0,249,316,272,278],
[263,288,242,301,0,300,276,287],
[265,269,253,234,250,0,288,277],
[251,298,240,278,274,262,0,259],
[263,291,278,272,263,273,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,306,289,281,260,295,279],
[258,0,295,271,276,289,296,274],
[244,255,0,262,254,255,276,268],
[261,279,288,0,276,270,292,296],
[269,274,296,274,0,264,286,270],
[290,261,295,280,286,0,291,283],
[255,254,274,258,264,259,0,268],
[271,276,282,254,280,267,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,283,281,296,289,275,278],
[266,0,279,272,278,276,266,256],
[267,271,0,283,283,288,284,268],
[269,278,267,0,276,267,257,247],
[254,272,267,274,0,298,275,251],
[261,274,262,283,252,0,283,261],
[275,284,266,293,275,267,0,266],
[272,294,282,303,299,289,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,284,259,272,279,270,276],
[281,0,289,281,264,296,275,274],
[266,261,0,257,253,273,252,256],
[291,269,293,0,277,288,284,297],
[278,286,297,273,0,291,277,278],
[271,254,277,262,259,0,260,256],
[280,275,298,266,273,290,0,277],
[274,276,294,253,272,294,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,260,295,274,279,281,281],
[290,0,260,296,276,304,300,275],
[290,290,0,297,288,296,276,273],
[255,254,253,0,288,277,266,258],
[276,274,262,262,0,282,261,277],
[271,246,254,273,268,0,264,246],
[269,250,274,284,289,286,0,275],
[269,275,277,292,273,304,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,275,303,273,202,322,225],
[273,0,252,328,299,227,223,302],
[275,298,0,324,272,225,222,196],
[247,222,226,0,221,275,323,250],
[277,251,278,329,0,253,300,252],
[348,323,325,275,297,0,371,224],
[228,327,328,227,250,179,0,251],
[325,248,354,300,298,326,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,256,256,262,271,248,234],
[279,0,291,249,277,294,248,258],
[294,259,0,263,269,293,259,239],
[294,301,287,0,277,307,272,257],
[288,273,281,273,0,307,277,271],
[279,256,257,243,243,0,234,252],
[302,302,291,278,273,316,0,291],
[316,292,311,293,279,298,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,253,264,243,301,294,318],
[264,0,279,232,269,271,263,335],
[297,271,0,235,246,248,253,327],
[286,318,315,0,279,270,303,346],
[307,281,304,271,0,309,285,298],
[249,279,302,280,241,0,268,313],
[256,287,297,247,265,282,0,340],
[232,215,223,204,252,237,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,294,286,273,284,275,290],
[259,0,243,270,272,262,270,292],
[256,307,0,294,293,285,276,307],
[264,280,256,0,251,280,276,290],
[277,278,257,299,0,293,294,323],
[266,288,265,270,257,0,245,300],
[275,280,274,274,256,305,0,308],
[260,258,243,260,227,250,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,266,245,270,281,262,259],
[281,0,260,268,284,286,280,275],
[284,290,0,256,293,296,273,269],
[305,282,294,0,290,294,274,271],
[280,266,257,260,0,282,249,291],
[269,264,254,256,268,0,263,264],
[288,270,277,276,301,287,0,266],
[291,275,281,279,259,286,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,280,237,257,232,244,250],
[293,0,275,252,285,277,266,264],
[270,275,0,256,265,254,232,260],
[313,298,294,0,294,275,280,284],
[293,265,285,256,0,261,272,265],
[318,273,296,275,289,0,276,289],
[306,284,318,270,278,274,0,253],
[300,286,290,266,285,261,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,283,280,259,278,276,274],
[264,0,250,281,251,252,261,251],
[267,300,0,284,257,258,275,267],
[270,269,266,0,262,260,260,273],
[291,299,293,288,0,290,271,275],
[272,298,292,290,260,0,267,274],
[274,289,275,290,279,283,0,273],
[276,299,283,277,275,276,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,287,267,254,276,254,245],
[245,0,281,207,249,259,204,219],
[263,269,0,240,262,228,251,229],
[283,343,310,0,302,284,290,275],
[296,301,288,248,0,278,278,241],
[274,291,322,266,272,0,258,281],
[296,346,299,260,272,292,0,315],
[305,331,321,275,309,269,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,283,266,273,250,271,263],
[289,0,293,287,280,267,290,286],
[267,257,0,279,268,252,272,262],
[284,263,271,0,269,256,273,262],
[277,270,282,281,0,249,271,264],
[300,283,298,294,301,0,272,283],
[279,260,278,277,279,278,0,252],
[287,264,288,288,286,267,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,283,229,279,249,191,226],
[282,0,241,320,319,321,316,357],
[267,309,0,360,300,307,306,401],
[321,230,190,0,262,287,226,286],
[271,231,250,288,0,305,306,248],
[301,229,243,263,245,0,263,282],
[359,234,244,324,244,287,0,305],
[324,193,149,264,302,268,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,278,282,237,240,311,272],
[288,0,262,277,242,267,302,276],
[272,288,0,285,255,291,318,317],
[268,273,265,0,272,250,331,270],
[313,308,295,278,0,279,318,275],
[310,283,259,300,271,0,296,311],
[239,248,232,219,232,254,0,265],
[278,274,233,280,275,239,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,254,275,272,276,285,282],
[263,0,228,263,251,270,269,247],
[296,322,0,276,274,279,293,269],
[275,287,274,0,267,275,290,298],
[278,299,276,283,0,287,266,263],
[274,280,271,275,263,0,265,289],
[265,281,257,260,284,285,0,271],
[268,303,281,252,287,261,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,302,296,289,286,273,283],
[279,0,290,272,281,291,273,277],
[248,260,0,231,228,242,234,255],
[254,278,319,0,279,256,261,291],
[261,269,322,271,0,289,260,284],
[264,259,308,294,261,0,286,294],
[277,277,316,289,290,264,0,311],
[267,273,295,259,266,256,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,293,292,285,259,254,268],
[300,0,303,318,284,267,286,274],
[257,247,0,275,248,273,257,252],
[258,232,275,0,258,269,233,263],
[265,266,302,292,0,281,264,275],
[291,283,277,281,269,0,271,274],
[296,264,293,317,286,279,0,271],
[282,276,298,287,275,276,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,293,292,279,301,272,289],
[276,0,272,275,279,274,273,285],
[257,278,0,257,246,289,252,269],
[258,275,293,0,263,288,276,279],
[271,271,304,287,0,303,282,289],
[249,276,261,262,247,0,239,255],
[278,277,298,274,268,311,0,290],
[261,265,281,271,261,295,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,265,279,287,283,288,275],
[298,0,252,292,298,288,286,268],
[285,298,0,289,307,292,275,275],
[271,258,261,0,314,285,281,271],
[263,252,243,236,0,264,278,239],
[267,262,258,265,286,0,299,282],
[262,264,275,269,272,251,0,257],
[275,282,275,279,311,268,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,286,300,259,275,301,289],
[269,0,274,274,283,280,270,295],
[264,276,0,293,253,260,272,268],
[250,276,257,0,246,254,257,269],
[291,267,297,304,0,276,292,286],
[275,270,290,296,274,0,279,281],
[249,280,278,293,258,271,0,274],
[261,255,282,281,264,269,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,253,268,242,245,246,266],
[319,0,273,295,285,287,284,319],
[297,277,0,301,269,275,273,302],
[282,255,249,0,273,266,276,277],
[308,265,281,277,0,291,273,300],
[305,263,275,284,259,0,277,304],
[304,266,277,274,277,273,0,298],
[284,231,248,273,250,246,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,306,288,280,260,286,283],
[272,0,277,263,277,270,255,274],
[244,273,0,252,268,255,249,232],
[262,287,298,0,272,288,294,277],
[270,273,282,278,0,265,254,257],
[290,280,295,262,285,0,272,244],
[264,295,301,256,296,278,0,261],
[267,276,318,273,293,306,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,261,270,340,324,276,335],
[243,0,206,242,178,260,239,287],
[289,344,0,297,329,340,247,345],
[280,308,253,0,256,298,256,311],
[210,372,221,294,0,271,238,282],
[226,290,210,252,279,0,239,283],
[274,311,303,294,312,311,0,305],
[215,263,205,239,268,267,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,308,274,286,271,284,291],
[297,0,240,287,299,296,276,328],
[242,310,0,298,333,265,332,295],
[276,263,252,0,312,289,250,353],
[264,251,217,238,0,260,208,285],
[279,254,285,261,290,0,277,320],
[266,274,218,300,342,273,0,307],
[259,222,255,197,265,230,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,385,356,221,440,301,330,387],
[165,0,272,163,356,273,247,359],
[194,278,0,277,360,276,277,387],
[329,387,273,0,415,248,305,413],
[110,194,190,135,0,192,138,274],
[249,277,274,302,358,0,331,358],
[220,303,273,245,412,219,0,384],
[163,191,163,137,276,192,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,278,274,280,263,261,278],
[285,0,294,304,293,258,288,291],
[272,256,0,273,255,255,263,269],
[276,246,277,0,274,256,283,273],
[270,257,295,276,0,284,268,289],
[287,292,295,294,266,0,270,292],
[289,262,287,267,282,280,0,288],
[272,259,281,277,261,258,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,285,261,267,243,281,320],
[240,0,242,213,277,238,264,285],
[265,308,0,298,273,238,283,277],
[289,337,252,0,309,296,295,307],
[283,273,277,241,0,196,255,290],
[307,312,312,254,354,0,340,321],
[269,286,267,255,295,210,0,284],
[230,265,273,243,260,229,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,302,290,335,290,268,268],
[282,0,316,319,265,319,300,300],
[248,234,0,253,296,271,232,282],
[260,231,297,0,346,250,214,281],
[215,285,254,204,0,251,187,218],
[260,231,279,300,299,0,265,247],
[282,250,318,336,363,285,0,334],
[282,250,268,269,332,303,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,275,253,254,228,269,255],
[316,0,284,292,279,244,276,288],
[275,266,0,272,253,243,256,252],
[297,258,278,0,255,243,255,279],
[296,271,297,295,0,287,266,292],
[322,306,307,307,263,0,282,299],
[281,274,294,295,284,268,0,277],
[295,262,298,271,258,251,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,366,91,366,366,366,459,184],
[184,0,91,368,277,275,368,184],
[459,459,0,550,368,275,368,275],
[184,182,0,0,277,91,275,182],
[184,273,182,273,0,182,275,91],
[184,275,275,459,368,0,277,91],
[91,182,182,275,275,273,0,91],
[366,366,275,368,459,459,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,276,292,248,275,268,271],
[287,0,282,300,271,297,282,293],
[274,268,0,282,265,274,274,301],
[258,250,268,0,264,261,242,252],
[302,279,285,286,0,288,269,266],
[275,253,276,289,262,0,274,259],
[282,268,276,308,281,276,0,297],
[279,257,249,298,284,291,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,250,275,277,284,262,272],
[261,0,262,291,287,263,262,252],
[300,288,0,289,286,287,266,277],
[275,259,261,0,278,273,254,261],
[273,263,264,272,0,282,261,253],
[266,287,263,277,268,0,280,272],
[288,288,284,296,289,270,0,290],
[278,298,273,289,297,278,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,274,283,259,287,267,269],
[291,0,276,285,275,273,266,272],
[276,274,0,299,271,291,276,265],
[267,265,251,0,262,268,251,241],
[291,275,279,288,0,290,273,288],
[263,277,259,282,260,0,257,292],
[283,284,274,299,277,293,0,281],
[281,278,285,309,262,258,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,264,256,298,289,243,265],
[300,0,276,286,287,300,239,267],
[286,274,0,286,283,310,261,284],
[294,264,264,0,289,299,266,266],
[252,263,267,261,0,286,247,279],
[261,250,240,251,264,0,225,253],
[307,311,289,284,303,325,0,275],
[285,283,266,284,271,297,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,287,282,274,304,272,294],
[253,0,277,262,261,275,259,266],
[263,273,0,273,261,299,262,261],
[268,288,277,0,270,292,255,272],
[276,289,289,280,0,284,259,259],
[246,275,251,258,266,0,276,268],
[278,291,288,295,291,274,0,279],
[256,284,289,278,291,282,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,292,284,280,287,300,285],
[275,0,268,280,286,276,289,274],
[258,282,0,275,287,286,292,283],
[266,270,275,0,290,279,290,288],
[270,264,263,260,0,270,274,278],
[263,274,264,271,280,0,277,270],
[250,261,258,260,276,273,0,264],
[265,276,267,262,272,280,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,274,292,264,300,271,273],
[284,0,279,287,264,299,291,271],
[276,271,0,285,278,290,259,284],
[258,263,265,0,249,277,267,283],
[286,286,272,301,0,297,276,289],
[250,251,260,273,253,0,254,246],
[279,259,291,283,274,296,0,269],
[277,279,266,267,261,304,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,258,287,265,283,259,258],
[279,0,281,283,266,282,276,282],
[292,269,0,272,276,253,265,267],
[263,267,278,0,271,288,262,276],
[285,284,274,279,0,281,282,266],
[267,268,297,262,269,0,271,277],
[291,274,285,288,268,279,0,268],
[292,268,283,274,284,273,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,315,272,282,248,247,235],
[251,0,284,286,217,220,237,237],
[235,266,0,281,260,275,270,213],
[278,264,269,0,258,261,256,224],
[268,333,290,292,0,271,246,199],
[302,330,275,289,279,0,281,280],
[303,313,280,294,304,269,0,235],
[315,313,337,326,351,270,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,277,291,250,281,258,268],
[268,0,265,270,267,276,244,288],
[273,285,0,276,272,280,283,263],
[259,280,274,0,257,277,261,275],
[300,283,278,293,0,286,275,278],
[269,274,270,273,264,0,267,281],
[292,306,267,289,275,283,0,277],
[282,262,287,275,272,269,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,282,267,283,292,273,283],
[275,0,296,274,293,286,266,272],
[268,254,0,267,264,299,277,282],
[283,276,283,0,300,269,287,289],
[267,257,286,250,0,270,275,291],
[258,264,251,281,280,0,265,252],
[277,284,273,263,275,285,0,262],
[267,278,268,261,259,298,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,306,268,284,257,282,264],
[237,0,317,274,271,275,286,265],
[244,233,0,270,268,253,268,247],
[282,276,280,0,272,237,297,272],
[266,279,282,278,0,260,289,276],
[293,275,297,313,290,0,263,273],
[268,264,282,253,261,287,0,246],
[286,285,303,278,274,277,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,285,299,290,271,294,290],
[271,0,287,285,282,285,284,278],
[265,263,0,279,263,265,299,263],
[251,265,271,0,267,271,282,279],
[260,268,287,283,0,267,261,254],
[279,265,285,279,283,0,266,265],
[256,266,251,268,289,284,0,243],
[260,272,287,271,296,285,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,256,255,263,267,268,297],
[284,0,305,276,262,285,277,278],
[294,245,0,291,258,285,282,296],
[295,274,259,0,265,287,297,295],
[287,288,292,285,0,270,277,313],
[283,265,265,263,280,0,276,296],
[282,273,268,253,273,274,0,262],
[253,272,254,255,237,254,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,247,328,261,263,261,261],
[282,0,273,321,289,243,270,267],
[303,277,0,304,247,245,246,258],
[222,229,246,0,212,236,225,231],
[289,261,303,338,0,280,268,281],
[287,307,305,314,270,0,293,306],
[289,280,304,325,282,257,0,283],
[289,283,292,319,269,244,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,267,284,271,271,274,290],
[274,0,270,288,266,290,294,273],
[283,280,0,270,276,269,262,272],
[266,262,280,0,262,260,284,263],
[279,284,274,288,0,279,283,285],
[279,260,281,290,271,0,268,288],
[276,256,288,266,267,282,0,270],
[260,277,278,287,265,262,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,289,277,266,305,275,308],
[284,0,301,272,287,297,295,306],
[261,249,0,269,268,277,260,264],
[273,278,281,0,281,287,276,310],
[284,263,282,269,0,305,268,295],
[245,253,273,263,245,0,245,263],
[275,255,290,274,282,305,0,307],
[242,244,286,240,255,287,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,256,259,266,281,281,263],
[296,0,253,280,271,276,294,285],
[294,297,0,292,278,283,291,275],
[291,270,258,0,278,287,260,274],
[284,279,272,272,0,285,284,285],
[269,274,267,263,265,0,279,262],
[269,256,259,290,266,271,0,260],
[287,265,275,276,265,288,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,301,275,284,267,274,303],
[267,0,271,251,299,284,270,303],
[249,279,0,287,319,279,269,282],
[275,299,263,0,292,260,285,305],
[266,251,231,258,0,221,277,285],
[283,266,271,290,329,0,295,304],
[276,280,281,265,273,255,0,309],
[247,247,268,245,265,246,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,289,284,269,277,313,277],
[270,0,299,276,280,282,289,293],
[261,251,0,253,270,254,274,255],
[266,274,297,0,281,276,295,270],
[281,270,280,269,0,276,293,280],
[273,268,296,274,274,0,304,286],
[237,261,276,255,257,246,0,245],
[273,257,295,280,270,264,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,270,281,316,263,266,289],
[268,0,250,265,287,255,281,258],
[280,300,0,269,327,275,282,276],
[269,285,281,0,310,278,284,287],
[234,263,223,240,0,242,246,263],
[287,295,275,272,308,0,286,314],
[284,269,268,266,304,264,0,269],
[261,292,274,263,287,236,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,281,270,286,286,272,299],
[258,0,268,285,294,292,280,289],
[269,282,0,281,280,292,266,276],
[280,265,269,0,288,302,266,311],
[264,256,270,262,0,298,259,281],
[264,258,258,248,252,0,270,279],
[278,270,284,284,291,280,0,287],
[251,261,274,239,269,271,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,297,275,284,295,267,268],
[260,0,291,276,284,288,274,287],
[253,259,0,262,260,263,253,252],
[275,274,288,0,268,281,265,262],
[266,266,290,282,0,269,265,249],
[255,262,287,269,281,0,267,260],
[283,276,297,285,285,283,0,269],
[282,263,298,288,301,290,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,298,263,279,295,292,288],
[281,0,256,280,256,297,293,311],
[252,294,0,243,258,265,283,266],
[287,270,307,0,263,248,241,261],
[271,294,292,287,0,294,312,262],
[255,253,285,302,256,0,254,287],
[258,257,267,309,238,296,0,285],
[262,239,284,289,288,263,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,260,299,314,267,296,299],
[277,0,275,325,295,281,286,297],
[290,275,0,325,303,277,299,312],
[251,225,225,0,271,261,283,288],
[236,255,247,279,0,235,280,274],
[283,269,273,289,315,0,286,307],
[254,264,251,267,270,264,0,301],
[251,253,238,262,276,243,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,255,256,264,253,271,244],
[295,0,253,268,302,292,291,272],
[295,297,0,266,298,290,300,297],
[294,282,284,0,278,275,297,280],
[286,248,252,272,0,264,285,260],
[297,258,260,275,286,0,308,272],
[279,259,250,253,265,242,0,247],
[306,278,253,270,290,278,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,289,272,282,299,309,289],
[234,0,253,232,253,261,287,271],
[261,297,0,264,255,265,298,293],
[278,318,286,0,263,304,323,306],
[268,297,295,287,0,293,316,278],
[251,289,285,246,257,0,282,287],
[241,263,252,227,234,268,0,249],
[261,279,257,244,272,263,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,280,279,285,275,273,274],
[276,0,251,248,251,253,260,268],
[270,299,0,274,276,281,285,283],
[271,302,276,0,264,253,260,267],
[265,299,274,286,0,263,279,278],
[275,297,269,297,287,0,271,275],
[277,290,265,290,271,279,0,292],
[276,282,267,283,272,275,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,267,272,282,284,260,273],
[299,0,261,290,275,282,267,278],
[283,289,0,300,284,287,290,272],
[278,260,250,0,268,268,256,252],
[268,275,266,282,0,284,259,268],
[266,268,263,282,266,0,255,262],
[290,283,260,294,291,295,0,284],
[277,272,278,298,282,288,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,281,284,289,288,274,302],
[275,0,253,273,291,280,276,282],
[269,297,0,283,289,304,286,287],
[266,277,267,0,283,276,278,296],
[261,259,261,267,0,271,266,267],
[262,270,246,274,279,0,262,302],
[276,274,264,272,284,288,0,277],
[248,268,263,254,283,248,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,268,240,204,266,265,220],
[274,0,273,277,275,256,237,231],
[282,277,0,277,241,236,215,229],
[310,273,273,0,230,287,269,265],
[346,275,309,320,0,290,307,292],
[284,294,314,263,260,0,273,308],
[285,313,335,281,243,277,0,269],
[330,319,321,285,258,242,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,246,245,257,263,273,234],
[271,0,277,257,246,263,274,275],
[304,273,0,284,288,289,299,254],
[305,293,266,0,268,284,293,276],
[293,304,262,282,0,264,293,266],
[287,287,261,266,286,0,288,258],
[277,276,251,257,257,262,0,241],
[316,275,296,274,284,292,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,283,281,274,276,282,289],
[266,0,265,256,269,270,249,255],
[267,285,0,261,259,270,284,270],
[269,294,289,0,275,279,271,269],
[276,281,291,275,0,280,273,273],
[274,280,280,271,270,0,261,267],
[268,301,266,279,277,289,0,282],
[261,295,280,281,277,283,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,282,285,291,283,264,268],
[280,0,287,273,277,284,282,269],
[268,263,0,292,278,269,259,259],
[265,277,258,0,263,270,278,279],
[259,273,272,287,0,280,282,265],
[267,266,281,280,270,0,268,259],
[286,268,291,272,268,282,0,273],
[282,281,291,271,285,291,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,279,270,267,293,260,294],
[264,0,261,262,268,285,286,275],
[271,289,0,269,275,306,301,298],
[280,288,281,0,275,307,279,297],
[283,282,275,275,0,309,293,280],
[257,265,244,243,241,0,255,268],
[290,264,249,271,257,295,0,278],
[256,275,252,253,270,282,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,286,290,288,274,275,290],
[272,0,280,287,302,277,281,303],
[264,270,0,258,277,268,280,277],
[260,263,292,0,297,273,281,306],
[262,248,273,253,0,255,263,270],
[276,273,282,277,295,0,287,298],
[275,269,270,269,287,263,0,301],
[260,247,273,244,280,252,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,275,292,273,290,268,258],
[244,0,240,276,291,271,254,278],
[275,310,0,323,307,318,292,289],
[258,274,227,0,295,316,280,287],
[277,259,243,255,0,255,272,252],
[260,279,232,234,295,0,267,270],
[282,296,258,270,278,283,0,269],
[292,272,261,263,298,280,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,259,267,269,273,260,282],
[296,0,274,278,291,272,288,284],
[291,276,0,277,285,281,269,288],
[283,272,273,0,298,294,267,286],
[281,259,265,252,0,270,260,264],
[277,278,269,256,280,0,263,269],
[290,262,281,283,290,287,0,273],
[268,266,262,264,286,281,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,264,229,234,235,245,280],
[295,0,265,267,257,276,281,325],
[286,285,0,268,257,285,250,294],
[321,283,282,0,264,269,265,302],
[316,293,293,286,0,309,273,321],
[315,274,265,281,241,0,272,269],
[305,269,300,285,277,278,0,289],
[270,225,256,248,229,281,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,250,274,268,258,274,274],
[279,0,264,289,282,258,273,269],
[300,286,0,286,292,271,290,266],
[276,261,264,0,271,263,265,261],
[282,268,258,279,0,257,276,249],
[292,292,279,287,293,0,273,277],
[276,277,260,285,274,277,0,266],
[276,281,284,289,301,273,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,282,279,295,290,266,268],
[268,0,276,275,283,276,282,262],
[268,274,0,261,273,265,260,270],
[271,275,289,0,268,296,283,275],
[255,267,277,282,0,268,271,281],
[260,274,285,254,282,0,276,269],
[284,268,290,267,279,274,0,251],
[282,288,280,275,269,281,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,293,271,260,253,233,254],
[289,0,308,262,289,252,282,257],
[257,242,0,237,245,252,245,230],
[279,288,313,0,272,254,270,282],
[290,261,305,278,0,281,277,255],
[297,298,298,296,269,0,276,293],
[317,268,305,280,273,274,0,264],
[296,293,320,268,295,257,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,257,282,245,243,267,258],
[306,0,278,303,289,292,275,294],
[293,272,0,303,276,293,282,284],
[268,247,247,0,242,256,243,258],
[305,261,274,308,0,273,274,278],
[307,258,257,294,277,0,268,270],
[283,275,268,307,276,282,0,273],
[292,256,266,292,272,280,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,296,307,303,292,293,305],
[277,0,295,273,288,303,273,271],
[254,255,0,255,269,276,262,262],
[243,277,295,0,271,294,276,258],
[247,262,281,279,0,295,263,271],
[258,247,274,256,255,0,270,281],
[257,277,288,274,287,280,0,278],
[245,279,288,292,279,269,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,281,275,276,288,272,279],
[276,0,274,272,270,296,296,273],
[269,276,0,260,271,275,281,273],
[275,278,290,0,287,295,297,291],
[274,280,279,263,0,279,284,272],
[262,254,275,255,271,0,273,268],
[278,254,269,253,266,277,0,264],
[271,277,277,259,278,282,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,276,291,290,270,271,265],
[272,0,243,281,290,254,276,275],
[274,307,0,304,305,278,272,294],
[259,269,246,0,271,240,268,282],
[260,260,245,279,0,244,257,267],
[280,296,272,310,306,0,269,277],
[279,274,278,282,293,281,0,282],
[285,275,256,268,283,273,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,260,264,274,284,284,281],
[279,0,263,266,263,286,292,262],
[290,287,0,275,282,285,294,285],
[286,284,275,0,271,290,278,269],
[276,287,268,279,0,281,287,279],
[266,264,265,260,269,0,274,263],
[266,258,256,272,263,276,0,276],
[269,288,265,281,271,287,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,242,255,221,274,243,250],
[296,0,252,294,269,292,270,284],
[308,298,0,286,273,300,307,284],
[295,256,264,0,262,293,286,277],
[329,281,277,288,0,305,269,275],
[276,258,250,257,245,0,272,275],
[307,280,243,264,281,278,0,282],
[300,266,266,273,275,275,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,267,264,269,275,247,275],
[281,0,282,278,274,281,294,291],
[283,268,0,285,267,287,283,289],
[286,272,265,0,277,308,271,276],
[281,276,283,273,0,292,286,298],
[275,269,263,242,258,0,251,278],
[303,256,267,279,264,299,0,283],
[275,259,261,274,252,272,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,267,276,266,268,288,260],
[281,0,276,269,253,272,287,280],
[283,274,0,275,285,284,281,273],
[274,281,275,0,268,260,292,264],
[284,297,265,282,0,264,294,269],
[282,278,266,290,286,0,301,268],
[262,263,269,258,256,249,0,255],
[290,270,277,286,281,282,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,369,369,370,184,427,370],
[305,0,367,307,305,307,244,305],
[181,183,0,244,305,184,303,182],
[181,243,306,0,307,183,305,247],
[180,245,245,243,0,182,182,182],
[366,243,366,367,368,0,366,368],
[123,306,247,245,368,184,0,184],
[180,245,368,303,368,182,366,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,265,258,301,337,322,325],
[232,0,294,275,250,289,255,317],
[285,256,0,266,226,295,264,340],
[292,275,284,0,243,310,320,319],
[249,300,324,307,0,319,341,366],
[213,261,255,240,231,0,235,333],
[228,295,286,230,209,315,0,288],
[225,233,210,231,184,217,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,221,250,256,249,298,269],
[279,0,258,284,278,237,279,268],
[329,292,0,308,307,264,284,311],
[300,266,242,0,259,258,282,275],
[294,272,243,291,0,290,258,291],
[301,313,286,292,260,0,290,313],
[252,271,266,268,292,260,0,264],
[281,282,239,275,259,237,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,242,252,211,243,281,218],
[303,0,233,278,267,290,300,286],
[308,317,0,291,262,274,310,279],
[298,272,259,0,255,242,302,240],
[339,283,288,295,0,311,332,268],
[307,260,276,308,239,0,288,254],
[269,250,240,248,218,262,0,248],
[332,264,271,310,282,296,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,271,277,283,282,266,287],
[271,0,261,286,283,278,288,276],
[279,289,0,275,288,290,282,290],
[273,264,275,0,278,268,267,280],
[267,267,262,272,0,286,278,296],
[268,272,260,282,264,0,275,276],
[284,262,268,283,272,275,0,284],
[263,274,260,270,254,274,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,271,271,281,237,280,240],
[284,0,287,269,277,274,299,265],
[279,263,0,287,295,275,307,272],
[279,281,263,0,278,281,300,282],
[269,273,255,272,0,286,272,269],
[313,276,275,269,264,0,317,276],
[270,251,243,250,278,233,0,235],
[310,285,278,268,281,274,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,256,271,278,301,268,272],
[298,0,292,288,330,285,282,274],
[294,258,0,245,284,276,264,259],
[279,262,305,0,295,289,246,226],
[272,220,266,255,0,261,242,248],
[249,265,274,261,289,0,282,247],
[282,268,286,304,308,268,0,283],
[278,276,291,324,302,303,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,333,227,287,312,267,233,265],
[217,0,209,248,213,205,216,204],
[323,341,0,286,311,293,273,306],
[263,302,264,0,282,288,295,255],
[238,337,239,268,0,289,249,225],
[283,345,257,262,261,0,253,274],
[317,334,277,255,301,297,0,267],
[285,346,244,295,325,276,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,276,291,270,286,284,274],
[266,0,275,262,273,294,282,277],
[274,275,0,282,285,277,283,277],
[259,288,268,0,297,265,298,281],
[280,277,265,253,0,259,272,279],
[264,256,273,285,291,0,287,272],
[266,268,267,252,278,263,0,267],
[276,273,273,269,271,278,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,280,286,284,288,268,276],
[258,0,283,262,274,302,262,261],
[270,267,0,270,262,279,276,251],
[264,288,280,0,269,287,279,267],
[266,276,288,281,0,286,267,290],
[262,248,271,263,264,0,261,269],
[282,288,274,271,283,289,0,272],
[274,289,299,283,260,281,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,272,258,257,241,259,275],
[276,0,280,254,233,239,252,284],
[278,270,0,233,248,224,233,248],
[292,296,317,0,232,292,275,282],
[293,317,302,318,0,271,281,327],
[309,311,326,258,279,0,274,277],
[291,298,317,275,269,276,0,264],
[275,266,302,268,223,273,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,307,308,267,297,265,277],
[246,0,302,257,244,240,266,216],
[243,248,0,271,258,251,290,245],
[242,293,279,0,277,295,277,238],
[283,306,292,273,0,288,281,257],
[253,310,299,255,262,0,284,221],
[285,284,260,273,269,266,0,209],
[273,334,305,312,293,329,341,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,280,273,288,272,248,262],
[273,0,276,259,274,262,239,270],
[270,274,0,309,308,280,248,261],
[277,291,241,0,281,272,256,271],
[262,276,242,269,0,268,245,274],
[278,288,270,278,282,0,256,285],
[302,311,302,294,305,294,0,270],
[288,280,289,279,276,265,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,250,336,242,265,290,264],
[277,0,260,292,233,263,262,274],
[300,290,0,290,222,251,234,276],
[214,258,260,0,258,310,323,308],
[308,317,328,292,0,278,272,316],
[285,287,299,240,272,0,274,265],
[260,288,316,227,278,276,0,263],
[286,276,274,242,234,285,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,276,249,257,273,281,282],
[285,0,273,241,272,279,280,280],
[274,277,0,283,293,284,297,280],
[301,309,267,0,293,298,284,306],
[293,278,257,257,0,265,271,298],
[277,271,266,252,285,0,259,277],
[269,270,253,266,279,291,0,285],
[268,270,270,244,252,273,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,302,282,261,285,263,257],
[285,0,294,285,264,271,252,283],
[248,256,0,263,264,259,253,272],
[268,265,287,0,274,259,272,285],
[289,286,286,276,0,274,280,282],
[265,279,291,291,276,0,278,275],
[287,298,297,278,270,272,0,291],
[293,267,278,265,268,275,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,268,263,270,255,277,283],
[277,0,267,259,266,253,281,276],
[282,283,0,264,283,265,271,288],
[287,291,286,0,277,257,270,286],
[280,284,267,273,0,280,278,277],
[295,297,285,293,270,0,287,299],
[273,269,279,280,272,263,0,283],
[267,274,262,264,273,251,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,289,229,290,254,276,293],
[291,0,296,264,295,288,261,295],
[261,254,0,247,271,267,264,243],
[321,286,303,0,316,274,289,301],
[260,255,279,234,0,244,251,261],
[296,262,283,276,306,0,296,293],
[274,289,286,261,299,254,0,256],
[257,255,307,249,289,257,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,245,243,255,227,208,262],
[312,0,304,273,308,299,261,262],
[305,246,0,313,329,303,284,295],
[307,277,237,0,307,287,286,278],
[295,242,221,243,0,244,221,278],
[323,251,247,263,306,0,259,275],
[342,289,266,264,329,291,0,268],
[288,288,255,272,272,275,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_8_550.csv", index=False, header=False)